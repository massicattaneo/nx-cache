{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-hast/lib/footer.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: 'â†©'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n"],"names":["defaultFootnoteBackContent","defaultFootnoteBackLabel","footer","_","rereferenceIndex","result","type","value","push","tagName","properties","children","String","referenceIndex","state","clobberPrefix","options","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","className","listItems","footnoteOrder","length","def","footnoteById","get","content","all","id","identifier","toUpperCase","safeId","normalizeUri","toLowerCase","backReferences","counts","footnoteCounts","undefined","href","dataFootnoteBackref","ariaLabel","Array","isArray","tail","tailTail","listItem","wrap","patch","dataFootnotes","structuredClone"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}