a14ab35e2e9410175300549cdd0f74eb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AddItemsButton: function() {
        return AddItemsButton;
    },
    AddItemsButtonMobile: function() {
        return AddItemsButtonMobile;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reacti18next = require("react-i18next");
const _settings = require("@rp/common/settings");
const _basecomponents = require("@rp/react/web/common/base-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const AddItemsButton = ({ amount, onClick, loading, watchlistItemsCount })=>{
    const { t } = (0, _reacti18next.useTranslation)();
    const hasReachedMaximum = watchlistItemsCount + amount > _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT || watchlistItemsCount >= _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT;
    const disabled = amount <= 0 || loading || hasReachedMaximum;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
        title: hasReachedMaximum ? t("watchlistPage.maximumWatchlistSize", {
            size: _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT
        }) : "",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            component: "span",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                variant: "contained",
                disabled: disabled,
                onClick: onClick,
                size: "small",
                sx: (theme)=>({
                        position: "relative",
                        bottom: 0,
                        ml: 0,
                        whiteSpace: "nowrap",
                        width: "150px",
                        display: "inline-block",
                        marginLeft: 1,
                        "&::after": {
                            content: !disabled ? `"${amount}"` : undefined,
                            position: "absolute",
                            right: -15,
                            top: -15,
                            backgroundColor: "common.white",
                            borderRadius: 20,
                            fontSize: 14,
                            width: 25,
                            outline: `2px solid ${theme.palette.primary.main}`,
                            fontWeight: 700
                        }
                    }),
                children: loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {
                    style: {
                        color: "black",
                        width: 20,
                        height: 20
                    }
                }) : "Add to Watchlist"
            })
        })
    });
};
const AddItemsButtonMobile = ({ amount, onClick, loading, watchlistItemsCount })=>{
    const { safeArea } = (0, _hooks.useDeviceInfo)();
    const hasReachedMaximum = watchlistItemsCount + amount > _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT || watchlistItemsCount >= _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT;
    const disabled = amount <= 0 || loading || hasReachedMaximum;
    if (!loading && amount === 0) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            position: "fixed",
            bottom: safeArea.bottom,
            height: 60,
            background: "linear-gradient(0deg, rgba(18,18,18,1) 0%, rgba(18,18,18,0) 100%)",
            width: "calc(100% - 24px)",
            zIndex: 10
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
            variant: "contained",
            size: "large",
            onClick: onClick,
            disabled: disabled,
            sx: (theme)=>({
                    mb: 16,
                    width: "calc(100% - 32px)",
                    ml: 2,
                    "&::after": {
                        content: !disabled ? `"${amount}"` : undefined,
                        position: "absolute",
                        right: -10,
                        top: -10,
                        backgroundColor: "common.white",
                        borderRadius: 20,
                        fontSize: 12,
                        width: 21,
                        outline: `2px solid ${theme.palette.primary.main}`,
                        fontWeight: 700
                    }
                }),
            children: loading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {
                style: {
                    color: "black",
                    width: 24,
                    height: 24
                }
            }) : "Add to Watchlist"
        })
    });
};

//# sourceMappingURL=data:application/json;base64,