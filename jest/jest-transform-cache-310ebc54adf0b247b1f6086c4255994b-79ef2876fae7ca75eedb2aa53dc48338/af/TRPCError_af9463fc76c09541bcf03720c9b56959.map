{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/@trpc/server/dist/unstable-core-do-not-import/error/TRPCError.js"],"sourcesContent":["'use strict';\n\nvar utils = require('../utils.js');\n\nclass UnknownCauseError extends Error {\n}\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) {\n        return cause;\n    }\n    const type = typeof cause;\n    if (type === 'undefined' || type === 'function' || cause === null) {\n        return undefined;\n    }\n    // Primitive types just get wrapped in an error\n    if (type !== 'object') {\n        return new Error(String(cause));\n    }\n    // If it's an object, we'll create a synthetic error\n    if (utils.isObject(cause)) {\n        const err = new UnknownCauseError();\n        for(const key in cause){\n            err[key] = cause[key];\n        }\n        return err;\n    }\n    return undefined;\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) {\n        return cause;\n    }\n    if (cause instanceof Error && cause.name === 'TRPCError') {\n        // https://github.com/trpc/trpc/pull/4848\n        return cause;\n    }\n    const trpcError = new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        cause\n    });\n    // Inherit stack from error\n    if (cause instanceof Error && cause.stack) {\n        trpcError.stack = cause.stack;\n    }\n    return trpcError;\n}\nclass TRPCError extends Error {\n    constructor(opts){\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = opts.message ?? cause?.message ?? opts.code;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.code = opts.code;\n        this.name = 'TRPCError';\n        if (!this.cause) {\n            // < ES2022 / < Node 16.9.0 compatability\n            this.cause = cause;\n        }\n    }\n}\n\nexports.TRPCError = TRPCError;\nexports.getCauseFromUnknown = getCauseFromUnknown;\nexports.getTRPCErrorFromUnknown = getTRPCErrorFromUnknown;\n"],"names":["utils","require","UnknownCauseError","Error","getCauseFromUnknown","cause","type","undefined","String","isObject","err","key","getTRPCErrorFromUnknown","TRPCError","name","trpcError","code","stack","constructor","opts","message","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,IAAIA,QAAQC,QAAQ;AAEpB,MAAMC,0BAA0BC;AAChC;AACA,SAASC,oBAAoBC,KAAK;IAC9B,IAAIA,iBAAiBF,OAAO;QACxB,OAAOE;IACX;IACA,MAAMC,OAAO,OAAOD;IACpB,IAAIC,SAAS,eAAeA,SAAS,cAAcD,UAAU,MAAM;QAC/D,OAAOE;IACX;IACA,+CAA+C;IAC/C,IAAID,SAAS,UAAU;QACnB,OAAO,IAAIH,MAAMK,OAAOH;IAC5B;IACA,oDAAoD;IACpD,IAAIL,MAAMS,QAAQ,CAACJ,QAAQ;QACvB,MAAMK,MAAM,IAAIR;QAChB,IAAI,MAAMS,OAAON,MAAM;YACnBK,GAAG,CAACC,IAAI,GAAGN,KAAK,CAACM,IAAI;QACzB;QACA,OAAOD;IACX;IACA,OAAOH;AACX;AACA,SAASK,wBAAwBP,KAAK;IAClC,IAAIA,iBAAiBQ,WAAW;QAC5B,OAAOR;IACX;IACA,IAAIA,iBAAiBF,SAASE,MAAMS,IAAI,KAAK,aAAa;QACtD,yCAAyC;QACzC,OAAOT;IACX;IACA,MAAMU,YAAY,IAAIF,UAAU;QAC5BG,MAAM;QACNX;IACJ;IACA,2BAA2B;IAC3B,IAAIA,iBAAiBF,SAASE,MAAMY,KAAK,EAAE;QACvCF,UAAUE,KAAK,GAAGZ,MAAMY,KAAK;IACjC;IACA,OAAOF;AACX;AACA,MAAMF,kBAAkBV;IACpBe,YAAYC,IAAI,CAAC;QACb,MAAMd,QAAQD,oBAAoBe,KAAKd,KAAK;YAC5Bc,eAAAA;QAAhB,MAAMC,UAAUD,CAAAA,OAAAA,CAAAA,gBAAAA,KAAKC,OAAO,cAAZD,2BAAAA,gBAAgBd,kBAAAA,4BAAAA,MAAOe,OAAO,cAA9BD,kBAAAA,OAAkCA,KAAKH,IAAI;QAC3D,6DAA6D;QAC7D,0DAA0D;QAC1D,KAAK,CAACI,SAAS;YACXf;QACJ;QACA,IAAI,CAACW,IAAI,GAAGG,KAAKH,IAAI;QACrB,IAAI,CAACF,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,CAACT,KAAK,EAAE;YACb,yCAAyC;YACzC,IAAI,CAACA,KAAK,GAAGA;QACjB;IACJ;AACJ;AAEAgB,QAAQR,SAAS,GAAGA;AACpBQ,QAAQjB,mBAAmB,GAAGA;AAC9BiB,QAAQT,uBAAuB,GAAGA"}