{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistDataTabs/WatchlistDataTabsTable.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useMemo, useState } from \"react\"\nimport { CqsItem } from \"@rp/common/api-types\"\nimport { WATCHLIST_FINANCIAL_DATA_FEATURE_NAME } from \"@rp/common/settings\"\nimport { INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL } from \"@rp/common/utils\"\nimport { watchlistCustomerIo } from \"@rp/react/common/customer-io\"\nimport { useFinancialData } from \"@rp/react/tanstack-api/financial-data\"\nimport { useLocalStorage } from \"@rp/react/web/common/hooks\"\nimport { useModal } from \"@rp/react/web/common/providers\"\nimport { Box, TablePagination } from \"@rp/react/web/mui/core\"\nimport { ArrowUpward } from \"@rp/react/web/mui/icons\"\nimport {\n  ColumnDef,\n  PaginationState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport { SmartGridColumn } from \"../WatchlistSmartGrid/WatchlistSmartGrid\"\nimport { WatchlistSmartGridActions } from \"../WatchlistSmartGrid/WatchlistSmartGridActions\"\nimport { WatchlistSmartGridHeader } from \"../WatchlistSmartGrid/WatchlistSmartGridHeader\"\nimport { FinanceDataTabs } from \"../hooks/useWatchlistsFinanceDataTabNavigation\"\nimport { useCustomColumns } from \"./CustomDataView/hooks/useCustomColumns\"\nimport { WatchlistDataTableFakeColumnHeaderCell } from \"./WatchlistDataTableCells/WatchlistDataTableFakeColumnHeaderCell\"\nimport { WatchlistDataTableSmartGridCell } from \"./WatchlistDataTableCells/WatchlistDataTableSmartGridCell\"\nimport { WatchlistDataTabsAddColumnsTutorial } from \"./WatchlistDataTabsAddColumnsTutorial\"\nimport {\n  WATCHLIST_DATA_TABS_ADD_COLUMNS_BUTTON_ID,\n  WatchlistDataTabsColumnsMenu,\n} from \"./WatchlistDataTabsColumnsMenu\"\nimport { WatchlistDataTabsDownloadCsv } from \"./WatchlistDataTabsDownloadCsv\"\nimport { WatchlistDataTabsTableEntity } from \"./WatchlistDataTabsTable.types\"\nimport {\n  FINANCE_TABLE_BODY_CLASS,\n  FINANCE_TABLE_CELL_CLASS,\n  FINANCE_TABLE_HEAD_CLASS,\n  FINANCE_TABLE_ITEM_PREFIX,\n  FINANCE_TABLE_ROW_CLASS,\n  FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS,\n  WatchlistDataTabsTableContainer,\n} from \"./WatchlistDataTabsTableContainer\"\nimport { WatchlistDataTabsTableHeaderMenu } from \"./WatchlistDataTabsTableHeaderMenu\"\nimport { WatchlistDataTabsTableUnlockBanner } from \"./WatchlistDataTabsTableUnlockBanner\"\nimport { WatchlistTableLoading } from \"./WatchlistTableLoading\"\nimport { WatchlistTablePaginationActions } from \"./WatchlistTablePaginationActions\"\nimport { downloadTableCSV } from \"./downloadTableCsv\"\nimport { watchlistDataTables } from \"./tables\"\nimport { useWatchlistDataTablesOrder } from \"./useWatchlistDataTablesOrder\"\nimport { useWatchlistDataTablesSorting } from \"./useWatchlistDataTablesSorting\"\nimport { useWatchlistDataTabsVisibility } from \"./useWatchlistDataTablesVisibility\"\n\nexport type WatchlistDataTabsTableProps = {\n  removeEntity: (id: string) => void\n  canEdit: boolean\n  isLoading: boolean\n  entities: Array<CqsItem>\n  onRowClick?: (item: CqsItem) => void\n  onChatWithCell: WatchlistDataTabsTableEntity[\"onChatWithCell\"]\n  selectedEntityId?: string\n  entityMotivation?: string | null\n  dataTab: FinanceDataTabs\n  watchlistName: string\n  smartGridColumns: Array<SmartGridColumn>\n  setSmartGridColumns: Dispatch<SetStateAction<Array<SmartGridColumn>>>\n  setSelectedColumn: Dispatch<SetStateAction<SmartGridColumn | null | undefined>>\n  financialData: ReturnType<typeof useFinancialData>\n  isLoadingEntities: boolean\n  isFeatureBlocked: boolean\n  allEntitiesCounts: number\n}\n\nconst DEFAULT_PAGE_SIZE = 10\nconst ROWS_PER_PAGINATION = [10, 25, 50, 100]\n\nconst stickedColumns: Record<string, number> = {\n  name: 123,\n  ticker: 3,\n}\n\nfunction stickyStyle(id: string) {\n  return {\n    zIndex: stickedColumns[id] !== undefined ? 1 : 0,\n    left: stickedColumns[id],\n    position: stickedColumns[id] !== undefined ? (\"sticky\" as const) : undefined,\n  }\n}\n\nfunction WatchlistDataTabsTable({\n  removeEntity,\n  canEdit,\n  dataTab,\n  isLoading,\n  selectedEntityId,\n  entities,\n  entityMotivation,\n  watchlistName,\n  smartGridColumns,\n  financialData,\n  isLoadingEntities,\n  isFeatureBlocked,\n  allEntitiesCounts,\n  setSmartGridColumns,\n  onRowClick,\n  onChatWithCell,\n  setSelectedColumn,\n}: WatchlistDataTabsTableProps) {\n  const {\n    planComparisonModal: { handleOpen: planComparisonHandleOpen },\n  } = useModal()\n  const { columns, defaultSort, defaultOrder, defaultHidden } = watchlistDataTables[dataTab]\n  const [sorting, setSorting] = useWatchlistDataTablesSorting(dataTab, defaultSort)\n  const [columnOrder, setColumnOrder] = useWatchlistDataTablesOrder(dataTab, defaultOrder)\n  const [columnVisibility, setColumnVisibility] = useWatchlistDataTabsVisibility(\n    dataTab,\n    defaultHidden,\n  )\n\n  // Store userPageSize in localStorage\n  const [userPageSize, setUserPageSize] = useLocalStorage<number>(\"WFT_pageSize\", DEFAULT_PAGE_SIZE)\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: userPageSize,\n  })\n\n  // Update userPageSize when pagination changes\n  useEffect(() => {\n    if (userPageSize !== pagination.pageSize) {\n      setUserPageSize(pagination.pageSize)\n    }\n  }, [pagination, setUserPageSize, userPageSize])\n\n  useEffect(() => {\n    setPagination(prev => {\n      if (entities.length <= prev.pageSize * prev.pageIndex) {\n        return {\n          pageIndex: 0,\n          pageSize: prev.pageSize,\n        }\n      }\n      return prev\n    })\n  }, [entities.length])\n\n  // Memoize the mapped table data to prevent unnecessary re-renders\n  const tableData: Array<WatchlistDataTabsTableEntity> = useMemo(() => {\n    return entities.map(entityInfo => {\n      return {\n        id: entityInfo.key,\n        name: entityInfo.name,\n        ticker: entityInfo.metadata1 ?? \"\",\n        entityInfo,\n        removeEntity,\n        onChatWithCell,\n        canEdit,\n        isLoadingEntities,\n        entityMotivation,\n        financialData: financialData?.[entityInfo.key],\n        onMotivationClicked: row => {\n          onChatWithCell?.({\n            prompt:\n              row.entityMotivation\n                ?.replace(\"{{company}}\", row.entityInfo.name)\n                .replace(\"{{watchlist}}\", watchlistName ?? \"\") ?? \"\",\n            value: null,\n            entityInfo: row.entityInfo,\n            columnName: \"motivation\",\n          })\n        },\n      }\n    })\n  }, [\n    entities,\n    removeEntity,\n    onChatWithCell,\n    canEdit,\n    isLoadingEntities,\n    entityMotivation,\n    financialData,\n    watchlistName,\n  ])\n\n  const isLoadingFinanceData = Object.keys(financialData)\n    .flatMap(item => Object.values(financialData[item]))\n    .some(item => item.isLoading)\n\n  const smartColumns = useMemo(() => {\n    if (dataTab !== \"smartGrid\") return []\n    return smartGridColumns.map(column => {\n      const ret: ColumnDef<WatchlistDataTabsTableEntity> = {\n        id: `smart-grid-column-${column.id}`,\n        accessorFn: info => column.rows?.[info.entityInfo.key]?.value,\n        size: 600,\n        header: () => (\n          <WatchlistSmartGridHeader column={column} setSelectedColumn={setSelectedColumn} />\n        ),\n        sortUndefined: \"last\",\n        cell: info => (\n          <WatchlistDataTableSmartGridCell\n            isLoading={column?.rows?.[info.row.original.entityInfo.key]?.isLoading ?? false}\n            isError={column?.rows?.[info.row.original.entityInfo.key]?.isError ?? false}\n            value={column?.rows?.[info.row.original.entityInfo.key]?.value}\n            chunkMap={column?.chunkMap ?? {}}\n            externalMap={column?.externalMap ?? {}}\n            entityName={info.row.original.entityInfo.name}\n            onClick={() => {\n              const val = column?.rows?.[info.row.original.entityInfo.key]?.value?.replace(\n                INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL,\n                \"\",\n              )\n              info.row.original.onChatWithCell?.({\n                prompt: `Elaborate on: \\n${val}`,\n                value: undefined,\n                entityInfo: info.row.original.entityInfo,\n                columnName: `SmartGrid: ${column.title}`,\n              })\n            }}\n          />\n        ),\n        meta: {\n          menuLabel: column.title,\n        },\n      }\n      return ret\n    })\n  }, [dataTab, setSelectedColumn, smartGridColumns])\n\n  // Custom columns logic\n  const { customColumns } = useCustomColumns()\n  const { customColumnsModal } = useModal()\n\n  const dynamicCustomColumns = useMemo(() => {\n    if (dataTab !== \"custom\") return []\n\n    // If no custom columns are selected, show a fake empty column\n    if (customColumns.length === 0) {\n      return [\n        {\n          id: \"fake-empty-column\",\n          accessorFn: () => \"\",\n          header: () => (\n            <WatchlistDataTableFakeColumnHeaderCell\n              onAddColumn={() => customColumnsModal.handleOpen()}\n            />\n          ),\n          cell: () => \"-\",\n          size: 350,\n          enableHiding: false,\n          enableSorting: false,\n          meta: {\n            menuLabel: \"Add Column\",\n          },\n        } as ColumnDef<WatchlistDataTabsTableEntity>,\n      ]\n    }\n\n    return customColumns\n      .map(customCol => {\n        try {\n          // Get the source table\n          const sourceTable = watchlistDataTables[customCol.sourceTab as FinanceDataTabs]\n          if (!sourceTable) return null\n\n          // Find the matching column definition in the source table\n          const sourceColumn = sourceTable.columns.find(\n            (colDef: ColumnDef<WatchlistDataTabsTableEntity>) => {\n              if (colDef.meta?.endpoint !== customCol.endpoint) return false\n\n              const columnKeys = colDef.meta?.columnKeys\n              if (!columnKeys) return false\n\n              // Match using the primary key (first key in the array)\n              const primaryKey = columnKeys[0]?.toString()\n              return primaryKey === customCol.columnKey\n            },\n          )\n\n          if (sourceColumn) {\n            // Create a custom column definition based on the source column\n            const customColumnDef: ColumnDef<WatchlistDataTabsTableEntity> = {\n              ...sourceColumn,\n              id: `custom-column-${customCol.endpoint}-${customCol.columnKey}`,\n              meta: {\n                ...sourceColumn.meta,\n                menuLabel: customCol.displayName,\n              },\n            }\n            return customColumnDef\n          }\n        } catch (error) {\n          // Skip failed custom column creation\n        }\n        return null\n      })\n      .filter((col): col is ColumnDef<WatchlistDataTabsTableEntity> => col !== null)\n  }, [dataTab, customColumns, customColumnsModal])\n\n  const memo = useMemo(() => {\n    const cols = columns.slice(0)\n    cols.splice(2, 0, ...smartColumns, ...dynamicCustomColumns)\n    return cols\n  }, [columns, smartColumns, dynamicCustomColumns])\n\n  const table = useReactTable({\n    data: tableData,\n    columns: memo,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    state: {\n      sorting,\n      pagination,\n      columnVisibility,\n      columnOrder,\n    },\n    onSortingChange: setSorting,\n    onPaginationChange: setPagination,\n    onColumnVisibilityChange: setColumnVisibility,\n    onColumnOrderChange: setColumnOrder,\n    enableSortingRemoval: false,\n    enableSorting: !isFeatureBlocked,\n    autoResetPageIndex: false,\n  })\n  const { pageSize, pageIndex } = table.getState().pagination\n  const penultimateColumnId = table.getHeaderGroups()[0].headers.slice(-2)[0].id\n\n  const downloadCSV = () =>\n    downloadTableCSV({\n      columns: table.getAllColumns().filter(col => col.id !== \"actions\"),\n      entities,\n      financialData,\n      watchlistName,\n      dataTab,\n    })\n\n  if (isLoading) return <WatchlistTableLoading />\n\n  const orderedColumns = table.getAllColumns().sort((a, b) => {\n    const aIndex = columnOrder.indexOf(a.id)\n    const bIndex = columnOrder.indexOf(b.id)\n    return aIndex === -1 ? 1 : bIndex === -1 ? -1 : aIndex - bIndex\n  })\n\n  return (\n    <Box sx={{ position: \"relative\" }}>\n      <WatchlistDataTabsTableHeaderMenu>\n        {dataTab !== \"smartGrid\" && (\n          <>\n            <WatchlistDataTabsColumnsMenu\n              selectAllColumns={() => {\n                setColumnVisibility(\n                  orderedColumns.reduce((acc, col) => {\n                    if (col.getCanHide()) return { ...acc, [col.id]: true }\n                    return acc\n                  }, {}),\n                )\n              }}\n              setColumnOrder={setColumnOrder}\n              onReset={() => {\n                setColumnOrder(defaultOrder)\n                setColumnVisibility(\n                  defaultHidden.reduce((acc, id) => ({ ...acc, [id]: false }), {}),\n                )\n              }}\n              columns={orderedColumns}\n              currentTab={dataTab}\n            />\n            <WatchlistDataTabsDownloadCsv\n              disabled={\n                isLoadingFinanceData || (dataTab === \"custom\" && customColumns.length === 0)\n              }\n              tooltip={\n                isFeatureBlocked\n                  ? \"Upgrade to export to CSV\"\n                  : dataTab === \"custom\" && customColumns.length === 0\n                  ? \"Add columns to enable CSV export\"\n                  : undefined\n              }\n              onDownload={() => {\n                watchlistCustomerIo.dataView.downloadButtonClicked(dataTab)\n                if (isFeatureBlocked) {\n                  planComparisonHandleOpen(WATCHLIST_FINANCIAL_DATA_FEATURE_NAME)\n                } else {\n                  downloadCSV()\n                }\n              }}\n            />\n            <WatchlistDataTabsAddColumnsTutorial\n              onAddColumn={() => {\n                // Trigger opening of the columns menu by programmatically clicking the button\n                const addColumnsButton = document.getElementById(\n                  WATCHLIST_DATA_TABS_ADD_COLUMNS_BUTTON_ID,\n                )\n                addColumnsButton?.click()\n              }}\n            />\n          </>\n        )}\n        {dataTab === \"smartGrid\" && (\n          <WatchlistSmartGridActions\n            setSelectedColumn={setSelectedColumn}\n            smartGridColumns={smartGridColumns}\n            entities={entities}\n            downloadCSV={downloadCSV}\n            setSmartGridColumns={setSmartGridColumns}\n          />\n        )}\n      </WatchlistDataTabsTableHeaderMenu>\n      <Box\n        onScroll={e => {\n          if (e.currentTarget.scrollLeft > 0) {\n            e.currentTarget.classList.add(FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS)\n          } else {\n            e.currentTarget.classList.remove(FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS)\n          }\n        }}\n        sx={theme => ({ overflowX: \"auto\", ...theme.scrollbarStyles, mb: 8 })}\n      >\n        <WatchlistDataTabsTableContainer\n          aria-label=\"Finance Table\"\n          showGradient={smartColumns.length > 0 || dataTab !== \"smartGrid\"}\n          sx={{\n            [`& .${FINANCE_TABLE_ROW_CLASS}`]: {\n              gridTemplateColumns: `3px ${orderedColumns\n                .filter(col => col.getIsVisible())\n                .map(col => {\n                  if (dataTab === \"smartGrid\" && col.id.startsWith(\"smart-grid-column-\"))\n                    return `minmax(${col.getSize()}px, 1fr)`\n                  return col.id === \"name\" && (dataTab !== \"smartGrid\" || smartColumns.length === 0)\n                    ? `minmax(${col.getSize()}px, 1fr)`\n                    : `${col.getSize()}px`\n                })\n                .join(\" \")}`,\n            },\n          }}\n        >\n          <Box className={FINANCE_TABLE_HEAD_CLASS}>\n            {table.getHeaderGroups().map(headerGroup => (\n              <Box className={FINANCE_TABLE_ROW_CLASS} key={headerGroup.id}>\n                {headerGroup.headers.map(header => {\n                  return (\n                    <Box\n                      className={FINANCE_TABLE_CELL_CLASS}\n                      key={header.id}\n                      sx={{\n                        backgroundColor: \"background.paper\",\n                        color: header.column.getIsSorted() ? \"text.primary\" : \"text.secondary\",\n                        cursor: header.column.getCanSort() ? \"pointer\" : \"default\",\n                        ...(header.id === penultimateColumnId ? { paddingRight: 0 } : {}),\n                        ...stickyStyle(header.column.id),\n                      }}\n                      onClick={header.column.getToggleSortingHandler()}\n                    >\n                      <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                        {flexRender(header.column.columnDef.header, header.getContext())}\n                        {{\n                          asc: <ArrowUpward sx={{ ml: 0.5, fontSize: 12 }} />,\n                          desc: (\n                            <ArrowUpward\n                              sx={{ ml: 0.5, fontSize: 12, transform: \"rotate(180deg)\" }}\n                            />\n                          ),\n                        }[header.column.getIsSorted() as string] ?? null}\n                      </Box>\n                    </Box>\n                  )\n                })}\n              </Box>\n            ))}\n          </Box>\n          <Box className={FINANCE_TABLE_BODY_CLASS}>\n            {table.getRowModel().rows.map(row => {\n              return (\n                <Box\n                  className={\n                    row.original.entityInfo.key === selectedEntityId\n                      ? `${FINANCE_TABLE_ROW_CLASS} selected ${FINANCE_TABLE_ITEM_PREFIX}${row.original.id}`\n                      : `${FINANCE_TABLE_ROW_CLASS} ${FINANCE_TABLE_ITEM_PREFIX}${row.original.id}`\n                  }\n                  onClick={() => {\n                    onRowClick?.(row.original.entityInfo)\n                  }}\n                  key={row.id}\n                >\n                  {row.getVisibleCells().map(cell => {\n                    return (\n                      <Box\n                        className={FINANCE_TABLE_CELL_CLASS}\n                        key={cell.id}\n                        sx={{\n                          backgroundColor: \"background.paper\",\n                          padding: 1,\n                          ...(cell.column.id === penultimateColumnId ? { paddingRight: 0 } : {}),\n                          ...(cell.column.getIndex() === 0 ? { paddingLeft: 0 } : {}),\n                          ...stickyStyle(cell.column.id),\n                        }}\n                      >\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </Box>\n                    )\n                  })}\n                </Box>\n              )\n            })}\n          </Box>\n        </WatchlistDataTabsTableContainer>\n        {tableData.length > pageSize && (\n          <TablePagination\n            sx={{ overflow: \"hidden\", position: \"sticky\", left: 0 }}\n            rowsPerPageOptions={ROWS_PER_PAGINATION}\n            component=\"div\"\n            count={table.getFilteredRowModel().rows.length}\n            rowsPerPage={pageSize}\n            page={pageIndex}\n            slotProps={{\n              select: {\n                inputProps: { \"aria-label\": \"rows per page\" },\n                native: true,\n              },\n            }}\n            onPageChange={(_, page) => {\n              table.setPageIndex(page)\n            }}\n            onRowsPerPageChange={e => {\n              const size = e.target.value ? Number(e.target.value) : DEFAULT_PAGE_SIZE\n              table.setPageSize(size)\n            }}\n            ActionsComponent={WatchlistTablePaginationActions}\n          />\n        )}\n      </Box>\n      {isFeatureBlocked && (\n        <WatchlistDataTabsTableUnlockBanner\n          onUpgrade={() => {\n            watchlistCustomerIo.dataView.upgradeButtonClicked(dataTab)\n            planComparisonHandleOpen(WATCHLIST_FINANCIAL_DATA_FEATURE_NAME)\n          }}\n          entitiesCount={allEntitiesCounts}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport { WatchlistDataTabsTable }\n"],"names":["WatchlistDataTabsTable","DEFAULT_PAGE_SIZE","ROWS_PER_PAGINATION","stickedColumns","name","ticker","stickyStyle","id","zIndex","undefined","left","position","removeEntity","canEdit","dataTab","isLoading","selectedEntityId","entities","entityMotivation","watchlistName","smartGridColumns","financialData","isLoadingEntities","isFeatureBlocked","allEntitiesCounts","setSmartGridColumns","onRowClick","onChatWithCell","setSelectedColumn","planComparisonModal","handleOpen","planComparisonHandleOpen","useModal","columns","defaultSort","defaultOrder","defaultHidden","watchlistDataTables","sorting","setSorting","useWatchlistDataTablesSorting","columnOrder","setColumnOrder","useWatchlistDataTablesOrder","columnVisibility","setColumnVisibility","useWatchlistDataTabsVisibility","userPageSize","setUserPageSize","useLocalStorage","pagination","setPagination","useState","pageIndex","pageSize","useEffect","prev","length","tableData","useMemo","map","entityInfo","key","metadata1","onMotivationClicked","row","prompt","replace","value","columnName","isLoadingFinanceData","Object","keys","flatMap","item","values","some","smartColumns","column","ret","accessorFn","info","rows","size","header","WatchlistSmartGridHeader","sortUndefined","cell","WatchlistDataTableSmartGridCell","original","isError","chunkMap","externalMap","entityName","onClick","val","INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL","title","meta","menuLabel","customColumns","useCustomColumns","customColumnsModal","dynamicCustomColumns","WatchlistDataTableFakeColumnHeaderCell","onAddColumn","enableHiding","enableSorting","customCol","sourceTable","sourceTab","sourceColumn","find","colDef","columnKeys","endpoint","primaryKey","toString","columnKey","customColumnDef","displayName","error","filter","col","memo","cols","slice","splice","table","useReactTable","data","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","getSortedRowModel","state","onSortingChange","onPaginationChange","onColumnVisibilityChange","onColumnOrderChange","enableSortingRemoval","autoResetPageIndex","getState","penultimateColumnId","getHeaderGroups","headers","downloadCSV","downloadTableCSV","getAllColumns","WatchlistTableLoading","orderedColumns","sort","a","b","aIndex","indexOf","bIndex","Box","sx","WatchlistDataTabsTableHeaderMenu","WatchlistDataTabsColumnsMenu","selectAllColumns","reduce","acc","getCanHide","onReset","currentTab","WatchlistDataTabsDownloadCsv","disabled","tooltip","onDownload","watchlistCustomerIo","dataView","downloadButtonClicked","WATCHLIST_FINANCIAL_DATA_FEATURE_NAME","WatchlistDataTabsAddColumnsTutorial","addColumnsButton","document","getElementById","WATCHLIST_DATA_TABS_ADD_COLUMNS_BUTTON_ID","click","WatchlistSmartGridActions","onScroll","e","currentTarget","scrollLeft","classList","add","FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS","remove","theme","overflowX","scrollbarStyles","mb","WatchlistDataTabsTableContainer","aria-label","showGradient","FINANCE_TABLE_ROW_CLASS","gridTemplateColumns","getIsVisible","startsWith","getSize","join","className","FINANCE_TABLE_HEAD_CLASS","headerGroup","FINANCE_TABLE_CELL_CLASS","backgroundColor","color","getIsSorted","cursor","getCanSort","paddingRight","getToggleSortingHandler","display","alignItems","flexRender","columnDef","getContext","asc","ArrowUpward","ml","fontSize","desc","transform","FINANCE_TABLE_BODY_CLASS","getRowModel","FINANCE_TABLE_ITEM_PREFIX","getVisibleCells","padding","getIndex","paddingLeft","TablePagination","overflow","rowsPerPageOptions","component","count","rowsPerPage","page","slotProps","select","inputProps","native","onPageChange","_","setPageIndex","onRowsPerPageChange","target","Number","setPageSize","ActionsComponent","WatchlistTablePaginationActions","WatchlistDataTabsTableUnlockBanner","onUpgrade","upgradeButtonClicked","entitiesCount"],"rangeMappingsmappings":";;;;+BAkiBSA;;;eAAAA;;;;uBAliB8D;0BAEjB;uBACD;4BACjB;uBAEJ;2BACP;sBACY;uBACT;4BAUrB;2CAEmC;0CACD;kCAER;wDACsB;iDACP;qDACI;8CAI7C;8CACsC;iDAUtC;kDAC0C;oDACE;uCACb;iDACU;kCACf;wBACG;6CACQ;+CACE;kDACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsB/C,MAAMC,oBAAoB;AAC1B,MAAMC,sBAAsB;IAAC;IAAI;IAAI;IAAI;CAAI;AAE7C,MAAMC,iBAAyC;IAC7CC,MAAM;IACNC,QAAQ;AACV;AAEA,SAASC,YAAYC,EAAU;IAC7B,OAAO;QACLC,QAAQL,cAAc,CAACI,GAAG,KAAKE,YAAY,IAAI;QAC/CC,MAAMP,cAAc,CAACI,GAAG;QACxBI,UAAUR,cAAc,CAACI,GAAG,KAAKE,YAAa,WAAqBA;IACrE;AACF;AAEA,SAAST,uBAAuB,EAC9BY,YAAY,EACZC,OAAO,EACPC,OAAO,EACPC,SAAS,EACTC,gBAAgB,EAChBC,QAAQ,EACRC,gBAAgB,EAChBC,aAAa,EACbC,gBAAgB,EAChBC,aAAa,EACbC,iBAAiB,EACjBC,gBAAgB,EAChBC,iBAAiB,EACjBC,mBAAmB,EACnBC,UAAU,EACVC,cAAc,EACdC,iBAAiB,EACW;IAC5B,MAAM,EACJC,qBAAqB,EAAEC,YAAYC,wBAAwB,EAAE,EAC9D,GAAGC,IAAAA,mBAAQ;IACZ,MAAM,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,EAAEC,aAAa,EAAE,GAAGC,2BAAmB,CAACvB,QAAQ;IAC1F,MAAM,CAACwB,SAASC,WAAW,GAAGC,IAAAA,4DAA6B,EAAC1B,SAASoB;IACrE,MAAM,CAACO,aAAaC,eAAe,GAAGC,IAAAA,wDAA2B,EAAC7B,SAASqB;IAC3E,MAAM,CAACS,kBAAkBC,oBAAoB,GAAGC,IAAAA,gEAA8B,EAC5EhC,SACAsB;IAGF,qCAAqC;IACrC,MAAM,CAACW,cAAcC,gBAAgB,GAAGC,IAAAA,sBAAe,EAAS,gBAAgBhD;IAChF,MAAM,CAACiD,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAAkB;QAC5DC,WAAW;QACXC,UAAUP;IACZ;IAEA,8CAA8C;IAC9CQ,IAAAA,gBAAS,EAAC;QACR,IAAIR,iBAAiBG,WAAWI,QAAQ,EAAE;YACxCN,gBAAgBE,WAAWI,QAAQ;QACrC;IACF,GAAG;QAACJ;QAAYF;QAAiBD;KAAa;IAE9CQ,IAAAA,gBAAS,EAAC;QACRJ,cAAcK,CAAAA;YACZ,IAAIvC,SAASwC,MAAM,IAAID,KAAKF,QAAQ,GAAGE,KAAKH,SAAS,EAAE;gBACrD,OAAO;oBACLA,WAAW;oBACXC,UAAUE,KAAKF,QAAQ;gBACzB;YACF;YACA,OAAOE;QACT;IACF,GAAG;QAACvC,SAASwC,MAAM;KAAC;IAEpB,kEAAkE;IAClE,MAAMC,YAAiDC,IAAAA,cAAO,EAAC;QAC7D,OAAO1C,SAAS2C,GAAG,CAACC,CAAAA;gBAIRA;YAHV,OAAO;gBACLtD,IAAIsD,WAAWC,GAAG;gBAClB1D,MAAMyD,WAAWzD,IAAI;gBACrBC,QAAQwD,CAAAA,wBAAAA,WAAWE,SAAS,cAApBF,mCAAAA,wBAAwB;gBAChCA;gBACAjD;gBACAe;gBACAd;gBACAS;gBACAJ;gBACAG,aAAa,EAAEA,0BAAAA,oCAAAA,aAAe,CAACwC,WAAWC,GAAG,CAAC;gBAC9CE,qBAAqBC,CAAAA;wBAGfA;wBAAAA;oBAFJtC,2BAAAA,qCAAAA,eAAiB;wBACfuC,QACED,CAAAA,yCAAAA,wBAAAA,IAAI/C,gBAAgB,cAApB+C,4CAAAA,sBACIE,OAAO,CAAC,eAAeF,IAAIJ,UAAU,CAACzD,IAAI,EAC3C+D,OAAO,CAAC,iBAAiBhD,0BAAAA,2BAAAA,gBAAiB,iBAF7C8C,mDAAAA,wCAEoD;wBACtDG,OAAO;wBACPP,YAAYI,IAAIJ,UAAU;wBAC1BQ,YAAY;oBACd;gBACF;YACF;QACF;IACF,GAAG;QACDpD;QACAL;QACAe;QACAd;QACAS;QACAJ;QACAG;QACAF;KACD;IAED,MAAMmD,uBAAuBC,OAAOC,IAAI,CAACnD,eACtCoD,OAAO,CAACC,CAAAA,OAAQH,OAAOI,MAAM,CAACtD,aAAa,CAACqD,KAAK,GACjDE,IAAI,CAACF,CAAAA,OAAQA,KAAK3D,SAAS;IAE9B,MAAM8D,eAAelB,IAAAA,cAAO,EAAC;QAC3B,IAAI7C,YAAY,aAAa,OAAO,EAAE;QACtC,OAAOM,iBAAiBwC,GAAG,CAACkB,CAAAA;YAC1B,MAAMC,MAA+C;gBACnDxE,IAAI,CAAC,kBAAkB,EAAEuE,OAAOvE,EAAE,CAAC,CAAC;gBACpCyE,YAAYC,CAAAA;wBAAQH,kCAAAA;4BAAAA,eAAAA,OAAOI,IAAI,cAAXJ,oCAAAA,mCAAAA,YAAa,CAACG,KAAKpB,UAAU,CAACC,GAAG,CAAC,cAAlCgB,uDAAAA,iCAAoCV,KAAK;;gBAC7De,MAAM;gBACNC,QAAQ,kBACN,qBAACC,kDAAwB;wBAACP,QAAQA;wBAAQlD,mBAAmBA;;gBAE/D0D,eAAe;gBACfC,MAAMN,CAAAA;wBAESH,+CAAAA,cACFA,gDAAAA,eACFA,gDAAAA;wBAFIA,yDACFA,uDAECA,kBACGA;2BALf,qBAACU,gEAA+B;wBAC9BzE,WAAW+D,CAAAA,0DAAAA,mBAAAA,8BAAAA,eAAAA,OAAQI,IAAI,cAAZJ,oCAAAA,gDAAAA,YAAc,CAACG,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU,CAACC,GAAG,CAAC,cAAhDgB,oEAAAA,8CAAkD/D,SAAS,cAA3D+D,qEAAAA,0DAA+D;wBAC1EY,SAASZ,CAAAA,wDAAAA,mBAAAA,8BAAAA,gBAAAA,OAAQI,IAAI,cAAZJ,qCAAAA,iDAAAA,aAAc,CAACG,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU,CAACC,GAAG,CAAC,cAAhDgB,qEAAAA,+CAAkDY,OAAO,cAAzDZ,mEAAAA,wDAA6D;wBACtEV,KAAK,EAAEU,mBAAAA,8BAAAA,gBAAAA,OAAQI,IAAI,cAAZJ,qCAAAA,iDAAAA,aAAc,CAACG,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU,CAACC,GAAG,CAAC,cAAhDgB,qEAAAA,+CAAkDV,KAAK;wBAC9DuB,UAAUb,CAAAA,mBAAAA,mBAAAA,6BAAAA,OAAQa,QAAQ,cAAhBb,8BAAAA,mBAAoB,CAAC;wBAC/Bc,aAAad,CAAAA,sBAAAA,mBAAAA,6BAAAA,OAAQc,WAAW,cAAnBd,iCAAAA,sBAAuB,CAAC;wBACrCe,YAAYZ,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU,CAACzD,IAAI;wBAC7C0F,SAAS;gCACKhB,qDAAAA,+CAAAA,cAIZG,mCAAAA;4BAJA,MAAMc,MAAMjB,mBAAAA,8BAAAA,eAAAA,OAAQI,IAAI,cAAZJ,oCAAAA,gDAAAA,YAAc,CAACG,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU,CAACC,GAAG,CAAC,cAAhDgB,qEAAAA,sDAAAA,8CAAkDV,KAAK,cAAvDU,0EAAAA,oDAAyDX,OAAO,CAC1E6B,2CAAoC,EACpC;6BAEFf,oCAAAA,CAAAA,qBAAAA,KAAKhB,GAAG,CAACwB,QAAQ,EAAC9D,cAAc,cAAhCsD,wDAAAA,uCAAAA,oBAAmC;gCACjCf,QAAQ,CAAC,gBAAgB,EAAE6B,IAAI,CAAC;gCAChC3B,OAAO3D;gCACPoD,YAAYoB,KAAKhB,GAAG,CAACwB,QAAQ,CAAC5B,UAAU;gCACxCQ,YAAY,CAAC,WAAW,EAAES,OAAOmB,KAAK,CAAC,CAAC;4BAC1C;wBACF;;gBACD;gBAEHC,MAAM;oBACJC,WAAWrB,OAAOmB,KAAK;gBACzB;YACF;YACA,OAAOlB;QACT;IACF,GAAG;QAACjE;QAASc;QAAmBR;KAAiB;IAEjD,uBAAuB;IACvB,MAAM,EAAEgF,aAAa,EAAE,GAAGC,IAAAA,kCAAgB;IAC1C,MAAM,EAAEC,kBAAkB,EAAE,GAAGtE,IAAAA,mBAAQ;IAEvC,MAAMuE,uBAAuB5C,IAAAA,cAAO,EAAC;QACnC,IAAI7C,YAAY,UAAU,OAAO,EAAE;QAEnC,8DAA8D;QAC9D,IAAIsF,cAAc3C,MAAM,KAAK,GAAG;YAC9B,OAAO;gBACL;oBACElD,IAAI;oBACJyE,YAAY,IAAM;oBAClBI,QAAQ,kBACN,qBAACoB,8EAAsC;4BACrCC,aAAa,IAAMH,mBAAmBxE,UAAU;;oBAGpDyD,MAAM,IAAM;oBACZJ,MAAM;oBACNuB,cAAc;oBACdC,eAAe;oBACfT,MAAM;wBACJC,WAAW;oBACb;gBACF;aACD;QACH;QAEA,OAAOC,cACJxC,GAAG,CAACgD,CAAAA;YACH,IAAI;gBACF,uBAAuB;gBACvB,MAAMC,cAAcxE,2BAAmB,CAACuE,UAAUE,SAAS,CAAoB;gBAC/E,IAAI,CAACD,aAAa,OAAO;gBAEzB,0DAA0D;gBAC1D,MAAME,eAAeF,YAAY5E,OAAO,CAAC+E,IAAI,CAC3C,CAACC;wBACKA,cAEeA,eAIAC;oBANnB,IAAID,EAAAA,eAAAA,OAAOf,IAAI,cAAXe,mCAAAA,aAAaE,QAAQ,MAAKP,UAAUO,QAAQ,EAAE,OAAO;oBAEzD,MAAMD,cAAaD,gBAAAA,OAAOf,IAAI,cAAXe,oCAAAA,cAAaC,UAAU;oBAC1C,IAAI,CAACA,YAAY,OAAO;oBAExB,uDAAuD;oBACvD,MAAME,cAAaF,eAAAA,UAAU,CAAC,EAAE,cAAbA,mCAAAA,aAAeG,QAAQ;oBAC1C,OAAOD,eAAeR,UAAUU,SAAS;gBAC3C;gBAGF,IAAIP,cAAc;oBAChB,+DAA+D;oBAC/D,MAAMQ,kBAA2D,wCAC5DR;wBACHxG,IAAI,CAAC,cAAc,EAAEqG,UAAUO,QAAQ,CAAC,CAAC,EAAEP,UAAUU,SAAS,CAAC,CAAC;wBAChEpB,MAAM,wCACDa,aAAab,IAAI;4BACpBC,WAAWS,UAAUY,WAAW;;;oBAGpC,OAAOD;gBACT;YACF,EAAE,OAAOE,OAAO;YACd,qCAAqC;YACvC;YACA,OAAO;QACT,GACCC,MAAM,CAAC,CAACC,MAAwDA,QAAQ;IAC7E,GAAG;QAAC7G;QAASsF;QAAeE;KAAmB;IAE/C,MAAMsB,OAAOjE,IAAAA,cAAO,EAAC;QACnB,MAAMkE,OAAO5F,QAAQ6F,KAAK,CAAC;QAC3BD,KAAKE,MAAM,CAAC,GAAG,MAAMlD,iBAAiB0B;QACtC,OAAOsB;IACT,GAAG;QAAC5F;QAAS4C;QAAc0B;KAAqB;IAEhD,MAAMyB,QAAQC,IAAAA,yBAAa,EAAC;QAC1BC,MAAMxE;QACNzB,SAAS2F;QACTO,iBAAiBA,IAAAA,2BAAe;QAChCC,qBAAqBA,IAAAA,+BAAmB;QACxCC,uBAAuBA,IAAAA,iCAAqB;QAC5CC,mBAAmBA,IAAAA,6BAAiB;QACpCC,OAAO;YACLjG;YACAY;YACAN;YACAH;QACF;QACA+F,iBAAiBjG;QACjBkG,oBAAoBtF;QACpBuF,0BAA0B7F;QAC1B8F,qBAAqBjG;QACrBkG,sBAAsB;QACtBjC,eAAe,CAACpF;QAChBsH,oBAAoB;IACtB;IACA,MAAM,EAAEvF,QAAQ,EAAED,SAAS,EAAE,GAAG2E,MAAMc,QAAQ,GAAG5F,UAAU;IAC3D,MAAM6F,sBAAsBf,MAAMgB,eAAe,EAAE,CAAC,EAAE,CAACC,OAAO,CAACnB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAACvH,EAAE;IAE9E,MAAM2I,cAAc,IAClBC,IAAAA,kCAAgB,EAAC;YACflH,SAAS+F,MAAMoB,aAAa,GAAG1B,MAAM,CAACC,CAAAA,MAAOA,IAAIpH,EAAE,KAAK;YACxDU;YACAI;YACAF;YACAL;QACF;IAEF,IAAIC,WAAW,qBAAO,qBAACsI,4CAAqB;IAE5C,MAAMC,iBAAiBtB,MAAMoB,aAAa,GAAGG,IAAI,CAAC,CAACC,GAAGC;QACpD,MAAMC,SAASjH,YAAYkH,OAAO,CAACH,EAAEjJ,EAAE;QACvC,MAAMqJ,SAASnH,YAAYkH,OAAO,CAACF,EAAElJ,EAAE;QACvC,OAAOmJ,WAAW,CAAC,IAAI,IAAIE,WAAW,CAAC,IAAI,CAAC,IAAIF,SAASE;IAC3D;IAEA,qBACE,sBAACC,SAAG;QAACC,IAAI;YAAEnJ,UAAU;QAAW;;0BAC9B,sBAACoJ,kEAAgC;;oBAC9BjJ,YAAY,6BACX;;0CACE,qBAACkJ,0DAA4B;gCAC3BC,kBAAkB;oCAChBpH,oBACEyG,eAAeY,MAAM,CAAC,CAACC,KAAKxC;wCAC1B,IAAIA,IAAIyC,UAAU,IAAI,OAAO,wCAAKD;4CAAK,CAACxC,IAAIpH,EAAE,CAAC,EAAE;;wCACjD,OAAO4J;oCACT,GAAG,CAAC;gCAER;gCACAzH,gBAAgBA;gCAChB2H,SAAS;oCACP3H,eAAeP;oCACfU,oBACET,cAAc8H,MAAM,CAAC,CAACC,KAAK5J,KAAQ,wCAAK4J;4CAAK,CAAC5J,GAAG,EAAE;4CAAU,CAAC;gCAElE;gCACA0B,SAASqH;gCACTgB,YAAYxJ;;0CAEd,qBAACyJ,0DAA4B;gCAC3BC,UACElG,wBAAyBxD,YAAY,YAAYsF,cAAc3C,MAAM,KAAK;gCAE5EgH,SACElJ,mBACI,6BACAT,YAAY,YAAYsF,cAAc3C,MAAM,KAAK,IACjD,qCACAhD;gCAENiK,YAAY;oCACVC,+BAAmB,CAACC,QAAQ,CAACC,qBAAqB,CAAC/J;oCACnD,IAAIS,kBAAkB;wCACpBQ,yBAAyB+I,+CAAqC;oCAChE,OAAO;wCACL5B;oCACF;gCACF;;0CAEF,qBAAC6B,wEAAmC;gCAClCtE,aAAa;oCACX,8EAA8E;oCAC9E,MAAMuE,mBAAmBC,SAASC,cAAc,CAC9CC,uEAAyC;oCAE3CH,6BAAAA,uCAAAA,iBAAkBI,KAAK;gCACzB;;;;oBAILtK,YAAY,6BACX,qBAACuK,oDAAyB;wBACxBzJ,mBAAmBA;wBACnBR,kBAAkBA;wBAClBH,UAAUA;wBACViI,aAAaA;wBACbzH,qBAAqBA;;;;0BAI3B,sBAACoI,SAAG;gBACFyB,UAAUC,CAAAA;oBACR,IAAIA,EAAEC,aAAa,CAACC,UAAU,GAAG,GAAG;wBAClCF,EAAEC,aAAa,CAACE,SAAS,CAACC,GAAG,CAACC,0EAAyC;oBACzE,OAAO;wBACLL,EAAEC,aAAa,CAACE,SAAS,CAACG,MAAM,CAACD,0EAAyC;oBAC5E;gBACF;gBACA9B,IAAIgC,CAAAA,QAAU;wBAAEC,WAAW;uBAAWD,MAAME,eAAe;wBAAEC,IAAI;;;kCAEjE,sBAACC,gEAA+B;wBAC9BC,cAAW;wBACXC,cAAcvH,aAAapB,MAAM,GAAG,KAAK3C,YAAY;wBACrDgJ,IAAI;4BACF,CAAC,CAAC,GAAG,EAAEuC,wDAAuB,CAAC,CAAC,CAAC,EAAE;gCACjCC,qBAAqB,CAAC,IAAI,EAAEhD,eACzB5B,MAAM,CAACC,CAAAA,MAAOA,IAAI4E,YAAY,IAC9B3I,GAAG,CAAC+D,CAAAA;oCACH,IAAI7G,YAAY,eAAe6G,IAAIpH,EAAE,CAACiM,UAAU,CAAC,uBAC/C,OAAO,CAAC,OAAO,EAAE7E,IAAI8E,OAAO,GAAG,QAAQ,CAAC;oCAC1C,OAAO9E,IAAIpH,EAAE,KAAK,UAAWO,CAAAA,YAAY,eAAe+D,aAAapB,MAAM,KAAK,CAAA,IAC5E,CAAC,OAAO,EAAEkE,IAAI8E,OAAO,GAAG,QAAQ,CAAC,GACjC,CAAC,EAAE9E,IAAI8E,OAAO,GAAG,EAAE,CAAC;gCAC1B,GACCC,IAAI,CAAC,KAAK,CAAC;4BAChB;wBACF;;0CAEA,qBAAC7C,SAAG;gCAAC8C,WAAWC,yDAAwB;0CACrC5E,MAAMgB,eAAe,GAAGpF,GAAG,CAACiJ,CAAAA,4BAC3B,qBAAChD,SAAG;wCAAC8C,WAAWN,wDAAuB;kDACpCQ,YAAY5D,OAAO,CAACrF,GAAG,CAACwB,CAAAA;gDAgBhB;4CAfP,qBACE,qBAACyE,SAAG;gDACF8C,WAAWG,yDAAwB;gDAEnChD,IAAI;oDACFiD,iBAAiB;oDACjBC,OAAO5H,OAAON,MAAM,CAACmI,WAAW,KAAK,iBAAiB;oDACtDC,QAAQ9H,OAAON,MAAM,CAACqI,UAAU,KAAK,YAAY;mDAC7C/H,OAAO7E,EAAE,KAAKwI,sBAAsB;oDAAEqE,cAAc;gDAAE,IAAI,CAAC,GAC5D9M,YAAY8E,OAAON,MAAM,CAACvE,EAAE;gDAEjCuF,SAASV,OAAON,MAAM,CAACuI,uBAAuB;0DAE9C,cAAA,sBAACxD,SAAG;oDAACC,IAAI;wDAAEwD,SAAS;wDAAQC,YAAY;oDAAS;;wDAC9CC,IAAAA,sBAAU,EAACpI,OAAON,MAAM,CAAC2I,SAAS,CAACrI,MAAM,EAAEA,OAAOsI,UAAU;wDAC5D,CAAA,6BAAA,CAAA;4DACCC,mBAAK,qBAACC,kBAAW;gEAAC9D,IAAI;oEAAE+D,IAAI;oEAAKC,UAAU;gEAAG;;4DAC9CC,oBACE,qBAACH,kBAAW;gEACV9D,IAAI;oEAAE+D,IAAI;oEAAKC,UAAU;oEAAIE,WAAW;gEAAiB;;wDAG/D,CAAA,CAAC,CAAC5I,OAAON,MAAM,CAACmI,WAAW,GAAa,cAPvC,wCAAA,6BAO2C;;;+CAnBzC7H,OAAO7E,EAAE;wCAuBpB;uCA5B4CsM,YAAYtM,EAAE;;0CAgChE,qBAACsJ,SAAG;gCAAC8C,WAAWsB,yDAAwB;0CACrCjG,MAAMkG,WAAW,GAAGhJ,IAAI,CAACtB,GAAG,CAACK,CAAAA;oCAC5B,qBACE,qBAAC4F,SAAG;wCACF8C,WACE1I,IAAIwB,QAAQ,CAAC5B,UAAU,CAACC,GAAG,KAAK9C,mBAC5B,CAAC,EAAEqL,wDAAuB,CAAC,UAAU,EAAE8B,0DAAyB,CAAC,EAAElK,IAAIwB,QAAQ,CAAClF,EAAE,CAAC,CAAC,GACpF,CAAC,EAAE8L,wDAAuB,CAAC,CAAC,EAAE8B,0DAAyB,CAAC,EAAElK,IAAIwB,QAAQ,CAAClF,EAAE,CAAC,CAAC;wCAEjFuF,SAAS;4CACPpE,uBAAAA,iCAAAA,WAAauC,IAAIwB,QAAQ,CAAC5B,UAAU;wCACtC;kDAGCI,IAAImK,eAAe,GAAGxK,GAAG,CAAC2B,CAAAA;4CACzB,qBACE,qBAACsE,SAAG;gDACF8C,WAAWG,yDAAwB;gDAEnChD,IAAI;oDACFiD,iBAAiB;oDACjBsB,SAAS;mDACL9I,KAAKT,MAAM,CAACvE,EAAE,KAAKwI,sBAAsB;oDAAEqE,cAAc;gDAAE,IAAI,CAAC,GAChE7H,KAAKT,MAAM,CAACwJ,QAAQ,OAAO,IAAI;oDAAEC,aAAa;gDAAE,IAAI,CAAC,GACtDjO,YAAYiF,KAAKT,MAAM,CAACvE,EAAE;0DAG9BiN,IAAAA,sBAAU,EAACjI,KAAKT,MAAM,CAAC2I,SAAS,CAAClI,IAAI,EAAEA,KAAKmI,UAAU;+CATlDnI,KAAKhF,EAAE;wCAYlB;uCAlBK0D,IAAI1D,EAAE;gCAqBjB;;;;oBAGHmD,UAAUD,MAAM,GAAGH,0BAClB,qBAACkL,qBAAe;wBACd1E,IAAI;4BAAE2E,UAAU;4BAAU9N,UAAU;4BAAUD,MAAM;wBAAE;wBACtDgO,oBAAoBxO;wBACpByO,WAAU;wBACVC,OAAO5G,MAAMI,mBAAmB,GAAGlD,IAAI,CAACzB,MAAM;wBAC9CoL,aAAavL;wBACbwL,MAAMzL;wBACN0L,WAAW;4BACTC,QAAQ;gCACNC,YAAY;oCAAE,cAAc;gCAAgB;gCAC5CC,QAAQ;4BACV;wBACF;wBACAC,cAAc,CAACC,GAAGN;4BAChB9G,MAAMqH,YAAY,CAACP;wBACrB;wBACAQ,qBAAqB/D,CAAAA;4BACnB,MAAMpG,OAAOoG,EAAEgE,MAAM,CAACnL,KAAK,GAAGoL,OAAOjE,EAAEgE,MAAM,CAACnL,KAAK,IAAInE;4BACvD+H,MAAMyH,WAAW,CAACtK;wBACpB;wBACAuK,kBAAkBC,gEAA+B;;;;YAItDpO,kCACC,qBAACqO,sEAAkC;gBACjCC,WAAW;oBACTlF,+BAAmB,CAACC,QAAQ,CAACkF,oBAAoB,CAAChP;oBAClDiB,yBAAyB+I,+CAAqC;gBAChE;gBACAiF,eAAevO;;;;AAKzB"}