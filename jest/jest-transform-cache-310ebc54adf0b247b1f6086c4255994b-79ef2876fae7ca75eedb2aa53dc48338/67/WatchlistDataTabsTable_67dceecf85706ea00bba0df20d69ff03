f5e3a60920e669d320489263c6721a63
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistDataTabsTable", {
    enumerable: true,
    get: function() {
        return WatchlistDataTabsTable;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _reacttable = require("@tanstack/react-table");
const _WatchlistSmartGridActions = require("../WatchlistSmartGrid/WatchlistSmartGridActions");
const _WatchlistSmartGridHeader = require("../WatchlistSmartGrid/WatchlistSmartGridHeader");
const _useCustomColumns = require("./CustomDataView/hooks/useCustomColumns");
const _WatchlistDataTableFakeColumnHeaderCell = require("./WatchlistDataTableCells/WatchlistDataTableFakeColumnHeaderCell");
const _WatchlistDataTableSmartGridCell = require("./WatchlistDataTableCells/WatchlistDataTableSmartGridCell");
const _WatchlistDataTabsAddColumnsTutorial = require("./WatchlistDataTabsAddColumnsTutorial");
const _WatchlistDataTabsColumnsMenu = require("./WatchlistDataTabsColumnsMenu");
const _WatchlistDataTabsDownloadCsv = require("./WatchlistDataTabsDownloadCsv");
const _WatchlistDataTabsTableContainer = require("./WatchlistDataTabsTableContainer");
const _WatchlistDataTabsTableHeaderMenu = require("./WatchlistDataTabsTableHeaderMenu");
const _WatchlistDataTabsTableUnlockBanner = require("./WatchlistDataTabsTableUnlockBanner");
const _WatchlistTableLoading = require("./WatchlistTableLoading");
const _WatchlistTablePaginationActions = require("./WatchlistTablePaginationActions");
const _downloadTableCsv = require("./downloadTableCsv");
const _tables = require("./tables");
const _useWatchlistDataTablesOrder = require("./useWatchlistDataTablesOrder");
const _useWatchlistDataTablesSorting = require("./useWatchlistDataTablesSorting");
const _useWatchlistDataTablesVisibility = require("./useWatchlistDataTablesVisibility");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const DEFAULT_PAGE_SIZE = 10;
const ROWS_PER_PAGINATION = [
    10,
    25,
    50,
    100
];
const stickedColumns = {
    name: 123,
    ticker: 3
};
function stickyStyle(id) {
    return {
        zIndex: stickedColumns[id] !== undefined ? 1 : 0,
        left: stickedColumns[id],
        position: stickedColumns[id] !== undefined ? "sticky" : undefined
    };
}
function WatchlistDataTabsTable({ removeEntity, canEdit, dataTab, isLoading, selectedEntityId, entities, entityMotivation, watchlistName, smartGridColumns, financialData, isLoadingEntities, isFeatureBlocked, allEntitiesCounts, setSmartGridColumns, onRowClick, onChatWithCell, setSelectedColumn }) {
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers.useModal)();
    const { columns, defaultSort, defaultOrder, defaultHidden } = _tables.watchlistDataTables[dataTab];
    const [sorting, setSorting] = (0, _useWatchlistDataTablesSorting.useWatchlistDataTablesSorting)(dataTab, defaultSort);
    const [columnOrder, setColumnOrder] = (0, _useWatchlistDataTablesOrder.useWatchlistDataTablesOrder)(dataTab, defaultOrder);
    const [columnVisibility, setColumnVisibility] = (0, _useWatchlistDataTablesVisibility.useWatchlistDataTabsVisibility)(dataTab, defaultHidden);
    // Store userPageSize in localStorage
    const [userPageSize, setUserPageSize] = (0, _hooks.useLocalStorage)("WFT_pageSize", DEFAULT_PAGE_SIZE);
    const [pagination, setPagination] = (0, _react.useState)({
        pageIndex: 0,
        pageSize: userPageSize
    });
    // Update userPageSize when pagination changes
    (0, _react.useEffect)(()=>{
        if (userPageSize !== pagination.pageSize) {
            setUserPageSize(pagination.pageSize);
        }
    }, [
        pagination,
        setUserPageSize,
        userPageSize
    ]);
    (0, _react.useEffect)(()=>{
        setPagination((prev)=>{
            if (entities.length <= prev.pageSize * prev.pageIndex) {
                return {
                    pageIndex: 0,
                    pageSize: prev.pageSize
                };
            }
            return prev;
        });
    }, [
        entities.length
    ]);
    // Memoize the mapped table data to prevent unnecessary re-renders
    const tableData = (0, _react.useMemo)(()=>{
        return entities.map((entityInfo)=>{
            var _entityInfo_metadata1;
            return {
                id: entityInfo.key,
                name: entityInfo.name,
                ticker: (_entityInfo_metadata1 = entityInfo.metadata1) !== null && _entityInfo_metadata1 !== void 0 ? _entityInfo_metadata1 : "",
                entityInfo,
                removeEntity,
                onChatWithCell,
                canEdit,
                isLoadingEntities,
                entityMotivation,
                financialData: financialData === null || financialData === void 0 ? void 0 : financialData[entityInfo.key],
                onMotivationClicked: (row)=>{
                    var _row_entityMotivation;
                    var _row_entityMotivation_replace_replace;
                    onChatWithCell === null || onChatWithCell === void 0 ? void 0 : onChatWithCell({
                        prompt: (_row_entityMotivation_replace_replace = (_row_entityMotivation = row.entityMotivation) === null || _row_entityMotivation === void 0 ? void 0 : _row_entityMotivation.replace("{{company}}", row.entityInfo.name).replace("{{watchlist}}", watchlistName !== null && watchlistName !== void 0 ? watchlistName : "")) !== null && _row_entityMotivation_replace_replace !== void 0 ? _row_entityMotivation_replace_replace : "",
                        value: null,
                        entityInfo: row.entityInfo,
                        columnName: "motivation"
                    });
                }
            };
        });
    }, [
        entities,
        removeEntity,
        onChatWithCell,
        canEdit,
        isLoadingEntities,
        entityMotivation,
        financialData,
        watchlistName
    ]);
    const isLoadingFinanceData = Object.keys(financialData).flatMap((item)=>Object.values(financialData[item])).some((item)=>item.isLoading);
    const smartColumns = (0, _react.useMemo)(()=>{
        if (dataTab !== "smartGrid") return [];
        return smartGridColumns.map((column)=>{
            const ret = {
                id: `smart-grid-column-${column.id}`,
                accessorFn: (info)=>{
                    var _column_rows_info_entityInfo_key, _column_rows;
                    return (_column_rows = column.rows) === null || _column_rows === void 0 ? void 0 : (_column_rows_info_entityInfo_key = _column_rows[info.entityInfo.key]) === null || _column_rows_info_entityInfo_key === void 0 ? void 0 : _column_rows_info_entityInfo_key.value;
                },
                size: 600,
                header: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistSmartGridHeader.WatchlistSmartGridHeader, {
                        column: column,
                        setSelectedColumn: setSelectedColumn
                    }),
                sortUndefined: "last",
                cell: (info)=>/*#__PURE__*/ {
                    var _column_rows_info_row_original_entityInfo_key, _column_rows, _column_rows_info_row_original_entityInfo_key1, _column_rows1, _column_rows_info_row_original_entityInfo_key2, _column_rows2;
                    var _column_rows_info_row_original_entityInfo_key_isLoading, _column_rows_info_row_original_entityInfo_key_isError, _column_chunkMap, _column_externalMap;
                    return (0, _jsxruntime.jsx)(_WatchlistDataTableSmartGridCell.WatchlistDataTableSmartGridCell, {
                        isLoading: (_column_rows_info_row_original_entityInfo_key_isLoading = column === null || column === void 0 ? void 0 : (_column_rows = column.rows) === null || _column_rows === void 0 ? void 0 : (_column_rows_info_row_original_entityInfo_key = _column_rows[info.row.original.entityInfo.key]) === null || _column_rows_info_row_original_entityInfo_key === void 0 ? void 0 : _column_rows_info_row_original_entityInfo_key.isLoading) !== null && _column_rows_info_row_original_entityInfo_key_isLoading !== void 0 ? _column_rows_info_row_original_entityInfo_key_isLoading : false,
                        isError: (_column_rows_info_row_original_entityInfo_key_isError = column === null || column === void 0 ? void 0 : (_column_rows1 = column.rows) === null || _column_rows1 === void 0 ? void 0 : (_column_rows_info_row_original_entityInfo_key1 = _column_rows1[info.row.original.entityInfo.key]) === null || _column_rows_info_row_original_entityInfo_key1 === void 0 ? void 0 : _column_rows_info_row_original_entityInfo_key1.isError) !== null && _column_rows_info_row_original_entityInfo_key_isError !== void 0 ? _column_rows_info_row_original_entityInfo_key_isError : false,
                        value: column === null || column === void 0 ? void 0 : (_column_rows2 = column.rows) === null || _column_rows2 === void 0 ? void 0 : (_column_rows_info_row_original_entityInfo_key2 = _column_rows2[info.row.original.entityInfo.key]) === null || _column_rows_info_row_original_entityInfo_key2 === void 0 ? void 0 : _column_rows_info_row_original_entityInfo_key2.value,
                        chunkMap: (_column_chunkMap = column === null || column === void 0 ? void 0 : column.chunkMap) !== null && _column_chunkMap !== void 0 ? _column_chunkMap : {},
                        externalMap: (_column_externalMap = column === null || column === void 0 ? void 0 : column.externalMap) !== null && _column_externalMap !== void 0 ? _column_externalMap : {},
                        entityName: info.row.original.entityInfo.name,
                        onClick: ()=>{
                            var _column_rows_info_row_original_entityInfo_key_value, _column_rows_info_row_original_entityInfo_key, _column_rows, _info_row_original_onChatWithCell, _info_row_original;
                            const val = column === null || column === void 0 ? void 0 : (_column_rows = column.rows) === null || _column_rows === void 0 ? void 0 : (_column_rows_info_row_original_entityInfo_key = _column_rows[info.row.original.entityInfo.key]) === null || _column_rows_info_row_original_entityInfo_key === void 0 ? void 0 : (_column_rows_info_row_original_entityInfo_key_value = _column_rows_info_row_original_entityInfo_key.value) === null || _column_rows_info_row_original_entityInfo_key_value === void 0 ? void 0 : _column_rows_info_row_original_entityInfo_key_value.replace(_utils.INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL, "");
                            (_info_row_original_onChatWithCell = (_info_row_original = info.row.original).onChatWithCell) === null || _info_row_original_onChatWithCell === void 0 ? void 0 : _info_row_original_onChatWithCell.call(_info_row_original, {
                                prompt: `Elaborate on: \n${val}`,
                                value: undefined,
                                entityInfo: info.row.original.entityInfo,
                                columnName: `SmartGrid: ${column.title}`
                            });
                        }
                    });
                },
                meta: {
                    menuLabel: column.title
                }
            };
            return ret;
        });
    }, [
        dataTab,
        setSelectedColumn,
        smartGridColumns
    ]);
    // Custom columns logic
    const { customColumns } = (0, _useCustomColumns.useCustomColumns)();
    const { customColumnsModal } = (0, _providers.useModal)();
    const dynamicCustomColumns = (0, _react.useMemo)(()=>{
        if (dataTab !== "custom") return [];
        // If no custom columns are selected, show a fake empty column
        if (customColumns.length === 0) {
            return [
                {
                    id: "fake-empty-column",
                    accessorFn: ()=>"",
                    header: ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTableFakeColumnHeaderCell.WatchlistDataTableFakeColumnHeaderCell, {
                            onAddColumn: ()=>customColumnsModal.handleOpen()
                        }),
                    cell: ()=>"-",
                    size: 350,
                    enableHiding: false,
                    enableSorting: false,
                    meta: {
                        menuLabel: "Add Column"
                    }
                }
            ];
        }
        return customColumns.map((customCol)=>{
            try {
                // Get the source table
                const sourceTable = _tables.watchlistDataTables[customCol.sourceTab];
                if (!sourceTable) return null;
                // Find the matching column definition in the source table
                const sourceColumn = sourceTable.columns.find((colDef)=>{
                    var _colDef_meta, _colDef_meta1, _columnKeys_;
                    if (((_colDef_meta = colDef.meta) === null || _colDef_meta === void 0 ? void 0 : _colDef_meta.endpoint) !== customCol.endpoint) return false;
                    const columnKeys = (_colDef_meta1 = colDef.meta) === null || _colDef_meta1 === void 0 ? void 0 : _colDef_meta1.columnKeys;
                    if (!columnKeys) return false;
                    // Match using the primary key (first key in the array)
                    const primaryKey = (_columnKeys_ = columnKeys[0]) === null || _columnKeys_ === void 0 ? void 0 : _columnKeys_.toString();
                    return primaryKey === customCol.columnKey;
                });
                if (sourceColumn) {
                    // Create a custom column definition based on the source column
                    const customColumnDef = _object_spread_props(_object_spread({}, sourceColumn), {
                        id: `custom-column-${customCol.endpoint}-${customCol.columnKey}`,
                        meta: _object_spread_props(_object_spread({}, sourceColumn.meta), {
                            menuLabel: customCol.displayName
                        })
                    });
                    return customColumnDef;
                }
            } catch (error) {
            // Skip failed custom column creation
            }
            return null;
        }).filter((col)=>col !== null);
    }, [
        dataTab,
        customColumns,
        customColumnsModal
    ]);
    const memo = (0, _react.useMemo)(()=>{
        const cols = columns.slice(0);
        cols.splice(2, 0, ...smartColumns, ...dynamicCustomColumns);
        return cols;
    }, [
        columns,
        smartColumns,
        dynamicCustomColumns
    ]);
    const table = (0, _reacttable.useReactTable)({
        data: tableData,
        columns: memo,
        getCoreRowModel: (0, _reacttable.getCoreRowModel)(),
        getFilteredRowModel: (0, _reacttable.getFilteredRowModel)(),
        getPaginationRowModel: (0, _reacttable.getPaginationRowModel)(),
        getSortedRowModel: (0, _reacttable.getSortedRowModel)(),
        state: {
            sorting,
            pagination,
            columnVisibility,
            columnOrder
        },
        onSortingChange: setSorting,
        onPaginationChange: setPagination,
        onColumnVisibilityChange: setColumnVisibility,
        onColumnOrderChange: setColumnOrder,
        enableSortingRemoval: false,
        enableSorting: !isFeatureBlocked,
        autoResetPageIndex: false
    });
    const { pageSize, pageIndex } = table.getState().pagination;
    const penultimateColumnId = table.getHeaderGroups()[0].headers.slice(-2)[0].id;
    const downloadCSV = ()=>(0, _downloadTableCsv.downloadTableCSV)({
            columns: table.getAllColumns().filter((col)=>col.id !== "actions"),
            entities,
            financialData,
            watchlistName,
            dataTab
        });
    if (isLoading) return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistTableLoading.WatchlistTableLoading, {});
    const orderedColumns = table.getAllColumns().sort((a, b)=>{
        const aIndex = columnOrder.indexOf(a.id);
        const bIndex = columnOrder.indexOf(b.id);
        return aIndex === -1 ? 1 : bIndex === -1 ? -1 : aIndex - bIndex;
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            position: "relative"
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WatchlistDataTabsTableHeaderMenu.WatchlistDataTabsTableHeaderMenu, {
                children: [
                    dataTab !== "smartGrid" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsColumnsMenu.WatchlistDataTabsColumnsMenu, {
                                selectAllColumns: ()=>{
                                    setColumnVisibility(orderedColumns.reduce((acc, col)=>{
                                        if (col.getCanHide()) return _object_spread_props(_object_spread({}, acc), {
                                            [col.id]: true
                                        });
                                        return acc;
                                    }, {}));
                                },
                                setColumnOrder: setColumnOrder,
                                onReset: ()=>{
                                    setColumnOrder(defaultOrder);
                                    setColumnVisibility(defaultHidden.reduce((acc, id)=>_object_spread_props(_object_spread({}, acc), {
                                            [id]: false
                                        }), {}));
                                },
                                columns: orderedColumns,
                                currentTab: dataTab
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsDownloadCsv.WatchlistDataTabsDownloadCsv, {
                                disabled: isLoadingFinanceData || dataTab === "custom" && customColumns.length === 0,
                                tooltip: isFeatureBlocked ? "Upgrade to export to CSV" : dataTab === "custom" && customColumns.length === 0 ? "Add columns to enable CSV export" : undefined,
                                onDownload: ()=>{
                                    _customerio.watchlistCustomerIo.dataView.downloadButtonClicked(dataTab);
                                    if (isFeatureBlocked) {
                                        planComparisonHandleOpen(_settings.WATCHLIST_FINANCIAL_DATA_FEATURE_NAME);
                                    } else {
                                        downloadCSV();
                                    }
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsAddColumnsTutorial.WatchlistDataTabsAddColumnsTutorial, {
                                onAddColumn: ()=>{
                                    // Trigger opening of the columns menu by programmatically clicking the button
                                    const addColumnsButton = document.getElementById(_WatchlistDataTabsColumnsMenu.WATCHLIST_DATA_TABS_ADD_COLUMNS_BUTTON_ID);
                                    addColumnsButton === null || addColumnsButton === void 0 ? void 0 : addColumnsButton.click();
                                }
                            })
                        ]
                    }),
                    dataTab === "smartGrid" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistSmartGridActions.WatchlistSmartGridActions, {
                        setSelectedColumn: setSelectedColumn,
                        smartGridColumns: smartGridColumns,
                        entities: entities,
                        downloadCSV: downloadCSV,
                        setSmartGridColumns: setSmartGridColumns
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                onScroll: (e)=>{
                    if (e.currentTarget.scrollLeft > 0) {
                        e.currentTarget.classList.add(_WatchlistDataTabsTableContainer.FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS);
                    } else {
                        e.currentTarget.classList.remove(_WatchlistDataTabsTableContainer.FINANCE_TABLE_SCROLLED_HORIZONTALLY_CLASS);
                    }
                },
                sx: (theme)=>_object_spread_props(_object_spread({
                        overflowX: "auto"
                    }, theme.scrollbarStyles), {
                        mb: 8
                    }),
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WatchlistDataTabsTableContainer.WatchlistDataTabsTableContainer, {
                        "aria-label": "Finance Table",
                        showGradient: smartColumns.length > 0 || dataTab !== "smartGrid",
                        sx: {
                            [`& .${_WatchlistDataTabsTableContainer.FINANCE_TABLE_ROW_CLASS}`]: {
                                gridTemplateColumns: `3px ${orderedColumns.filter((col)=>col.getIsVisible()).map((col)=>{
                                    if (dataTab === "smartGrid" && col.id.startsWith("smart-grid-column-")) return `minmax(${col.getSize()}px, 1fr)`;
                                    return col.id === "name" && (dataTab !== "smartGrid" || smartColumns.length === 0) ? `minmax(${col.getSize()}px, 1fr)` : `${col.getSize()}px`;
                                }).join(" ")}`
                            }
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                className: _WatchlistDataTabsTableContainer.FINANCE_TABLE_HEAD_CLASS,
                                children: table.getHeaderGroups().map((headerGroup)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                        className: _WatchlistDataTabsTableContainer.FINANCE_TABLE_ROW_CLASS,
                                        children: headerGroup.headers.map((header)=>{
                                            var _header_column_getIsSorted;
                                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                                className: _WatchlistDataTabsTableContainer.FINANCE_TABLE_CELL_CLASS,
                                                sx: _object_spread({
                                                    backgroundColor: "background.paper",
                                                    color: header.column.getIsSorted() ? "text.primary" : "text.secondary",
                                                    cursor: header.column.getCanSort() ? "pointer" : "default"
                                                }, header.id === penultimateColumnId ? {
                                                    paddingRight: 0
                                                } : {}, stickyStyle(header.column.id)),
                                                onClick: header.column.getToggleSortingHandler(),
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                                                    sx: {
                                                        display: "flex",
                                                        alignItems: "center"
                                                    },
                                                    children: [
                                                        (0, _reacttable.flexRender)(header.column.columnDef.header, header.getContext()),
                                                        (_header_column_getIsSorted = ({
                                                            asc: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowUpward, {
                                                                sx: {
                                                                    ml: 0.5,
                                                                    fontSize: 12
                                                                }
                                                            }),
                                                            desc: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowUpward, {
                                                                sx: {
                                                                    ml: 0.5,
                                                                    fontSize: 12,
                                                                    transform: "rotate(180deg)"
                                                                }
                                                            })
                                                        })[header.column.getIsSorted()]) !== null && _header_column_getIsSorted !== void 0 ? _header_column_getIsSorted : null
                                                    ]
                                                })
                                            }, header.id);
                                        })
                                    }, headerGroup.id))
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                className: _WatchlistDataTabsTableContainer.FINANCE_TABLE_BODY_CLASS,
                                children: table.getRowModel().rows.map((row)=>{
                                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                        className: row.original.entityInfo.key === selectedEntityId ? `${_WatchlistDataTabsTableContainer.FINANCE_TABLE_ROW_CLASS} selected ${_WatchlistDataTabsTableContainer.FINANCE_TABLE_ITEM_PREFIX}${row.original.id}` : `${_WatchlistDataTabsTableContainer.FINANCE_TABLE_ROW_CLASS} ${_WatchlistDataTabsTableContainer.FINANCE_TABLE_ITEM_PREFIX}${row.original.id}`,
                                        onClick: ()=>{
                                            onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(row.original.entityInfo);
                                        },
                                        children: row.getVisibleCells().map((cell)=>{
                                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                                className: _WatchlistDataTabsTableContainer.FINANCE_TABLE_CELL_CLASS,
                                                sx: _object_spread({
                                                    backgroundColor: "background.paper",
                                                    padding: 1
                                                }, cell.column.id === penultimateColumnId ? {
                                                    paddingRight: 0
                                                } : {}, cell.column.getIndex() === 0 ? {
                                                    paddingLeft: 0
                                                } : {}, stickyStyle(cell.column.id)),
                                                children: (0, _reacttable.flexRender)(cell.column.columnDef.cell, cell.getContext())
                                            }, cell.id);
                                        })
                                    }, row.id);
                                })
                            })
                        ]
                    }),
                    tableData.length > pageSize && /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TablePagination, {
                        sx: {
                            overflow: "hidden",
                            position: "sticky",
                            left: 0
                        },
                        rowsPerPageOptions: ROWS_PER_PAGINATION,
                        component: "div",
                        count: table.getFilteredRowModel().rows.length,
                        rowsPerPage: pageSize,
                        page: pageIndex,
                        slotProps: {
                            select: {
                                inputProps: {
                                    "aria-label": "rows per page"
                                },
                                native: true
                            }
                        },
                        onPageChange: (_, page)=>{
                            table.setPageIndex(page);
                        },
                        onRowsPerPageChange: (e)=>{
                            const size = e.target.value ? Number(e.target.value) : DEFAULT_PAGE_SIZE;
                            table.setPageSize(size);
                        },
                        ActionsComponent: _WatchlistTablePaginationActions.WatchlistTablePaginationActions
                    })
                ]
            }),
            isFeatureBlocked && /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsTableUnlockBanner.WatchlistDataTabsTableUnlockBanner, {
                onUpgrade: ()=>{
                    _customerio.watchlistCustomerIo.dataView.upgradeButtonClicked(dataTab);
                    planComparisonHandleOpen(_settings.WATCHLIST_FINANCIAL_DATA_FEATURE_NAME);
                },
                entitiesCount: allEntitiesCounts
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,