{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/hooks/src/lib/useEngineChartMocks/useEngineChartMocks.ts"],"sourcesContent":["import { adapters } from \"@rp/adapters\"\nimport { useQuery } from \"@tanstack/react-query\"\n\nexport enum EngineChartWidgetsEnum {\n  CATEGORICAL_CARTESIAN = \"categoricalCartesian\",\n  CONTINUOUS_CARTESIAN = \"continuousCartesian\",\n  MAP_GEO = \"mapGeo\",\n  PIE = \"pie\",\n  TABLE_GRID = \"tableGrid\",\n  TILE_MATRIX = \"tileMatrix\",\n  TIME_SERIES = \"timeseries\",\n  TREE = \"tree\",\n}\n\ntype EngineChartResponse = {\n  answer: string\n  widget_spec: Array<Record<string, unknown>>\n  sql_query: string\n  explainer: string\n}\n\nconst getEngineChartMocks = async (name: EngineChartWidgetsEnum) => {\n  const data = fetch(\n    `${adapters.location.getAbsoluteBaseUrl()}engine-chart-mocks/${name}.json`,\n  ).then(res => res.json())\n  return data as unknown as EngineChartResponse\n}\n\nexport const useEngineChartMocks = (name: EngineChartWidgetsEnum) => {\n  return useQuery({\n    queryKey: [\"engineChartMocks\", name],\n    queryFn: () => getEngineChartMocks(name),\n    staleTime: Infinity,\n  })\n}\n"],"names":["useEngineChartMocks","EngineChartWidgetsEnum","getEngineChartMocks","name","data","fetch","adapters","location","getAbsoluteBaseUrl","then","res","json","useQuery","queryKey","queryFn","staleTime","Infinity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;IA4BaA,mBAAmB;eAAnBA;;;0BA5BY;4BACA;;UAEbC;;;;;;;;;GAAAA,2BAAAA;AAkBZ,MAAMC,sBAAsB,OAAOC;IACjC,MAAMC,OAAOC,MACX,CAAC,EAAEC,kBAAQ,CAACC,QAAQ,CAACC,kBAAkB,GAAG,mBAAmB,EAAEL,KAAK,KAAK,CAAC,EAC1EM,IAAI,CAACC,CAAAA,MAAOA,IAAIC,IAAI;IACtB,OAAOP;AACT;AAEO,MAAMJ,sBAAsB,CAACG;IAClC,OAAOS,IAAAA,oBAAQ,EAAC;QACdC,UAAU;YAAC;YAAoBV;SAAK;QACpCW,SAAS,IAAMZ,oBAAoBC;QACnCY,WAAWC;IACb;AACF"}