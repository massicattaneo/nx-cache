67dccf96c453915748c70a0b9bc73a51
/**
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Parents} Parents
 * @typedef {import('../types.js').Info} Info
 * @typedef {import('../types.js').Map} Map
 * @typedef {import('../types.js').State} State
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "listItem", {
    enumerable: true,
    get: function() {
        return listItem;
    }
});
const _checkbullet = require("../util/check-bullet.js");
const _checklistitemindent = require("../util/check-list-item-indent.js");
function listItem(node, parent, state, info) {
    const listItemIndent = (0, _checklistitemindent.checkListItemIndent)(state);
    let bullet = state.bulletCurrent || (0, _checkbullet.checkBullet)(state);
    // Add the marker value for ordered lists.
    if (parent && parent.type === 'list' && parent.ordered) {
        bullet = (typeof parent.start === 'number' && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node)) + bullet;
    }
    let size = bullet.length + 1;
    if (listItemIndent === 'tab' || listItemIndent === 'mixed' && (parent && parent.type === 'list' && parent.spread || node.spread)) {
        size = Math.ceil(size / 4) * 4;
    }
    const tracker = state.createTracker(info);
    tracker.move(bullet + ' '.repeat(size - bullet.length));
    tracker.shift(size);
    const exit = state.enter('listItem');
    const value = state.indentLines(state.containerFlow(node, tracker.current()), map);
    exit();
    return value;
    /** @type {Map} */ function map(line, index, blank) {
        if (index) {
            return (blank ? '' : ' '.repeat(size)) + line;
        }
        return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi9oYW5kbGUvbGlzdC1pdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaXN0SXRlbX0gTGlzdEl0ZW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyZW50c30gUGFyZW50c1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5JbmZvfSBJbmZvXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLk1hcH0gTWFwXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7Y2hlY2tCdWxsZXR9IGZyb20gJy4uL3V0aWwvY2hlY2stYnVsbGV0LmpzJ1xuaW1wb3J0IHtjaGVja0xpc3RJdGVtSW5kZW50fSBmcm9tICcuLi91dGlsL2NoZWNrLWxpc3QtaXRlbS1pbmRlbnQuanMnXG5cbi8qKlxuICogQHBhcmFtIHtMaXN0SXRlbX0gbm9kZVxuICogQHBhcmFtIHtQYXJlbnRzIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0SXRlbShub2RlLCBwYXJlbnQsIHN0YXRlLCBpbmZvKSB7XG4gIGNvbnN0IGxpc3RJdGVtSW5kZW50ID0gY2hlY2tMaXN0SXRlbUluZGVudChzdGF0ZSlcbiAgbGV0IGJ1bGxldCA9IHN0YXRlLmJ1bGxldEN1cnJlbnQgfHwgY2hlY2tCdWxsZXQoc3RhdGUpXG5cbiAgLy8gQWRkIHRoZSBtYXJrZXIgdmFsdWUgZm9yIG9yZGVyZWQgbGlzdHMuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICdsaXN0JyAmJiBwYXJlbnQub3JkZXJlZCkge1xuICAgIGJ1bGxldCA9XG4gICAgICAodHlwZW9mIHBhcmVudC5zdGFydCA9PT0gJ251bWJlcicgJiYgcGFyZW50LnN0YXJ0ID4gLTFcbiAgICAgICAgPyBwYXJlbnQuc3RhcnRcbiAgICAgICAgOiAxKSArXG4gICAgICAoc3RhdGUub3B0aW9ucy5pbmNyZW1lbnRMaXN0TWFya2VyID09PSBmYWxzZVxuICAgICAgICA/IDBcbiAgICAgICAgOiBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSkgK1xuICAgICAgYnVsbGV0XG4gIH1cblxuICBsZXQgc2l6ZSA9IGJ1bGxldC5sZW5ndGggKyAxXG5cbiAgaWYgKFxuICAgIGxpc3RJdGVtSW5kZW50ID09PSAndGFiJyB8fFxuICAgIChsaXN0SXRlbUluZGVudCA9PT0gJ21peGVkJyAmJlxuICAgICAgKChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICdsaXN0JyAmJiBwYXJlbnQuc3ByZWFkKSB8fCBub2RlLnNwcmVhZCkpXG4gICkge1xuICAgIHNpemUgPSBNYXRoLmNlaWwoc2l6ZSAvIDQpICogNFxuICB9XG5cbiAgY29uc3QgdHJhY2tlciA9IHN0YXRlLmNyZWF0ZVRyYWNrZXIoaW5mbylcbiAgdHJhY2tlci5tb3ZlKGJ1bGxldCArICcgJy5yZXBlYXQoc2l6ZSAtIGJ1bGxldC5sZW5ndGgpKVxuICB0cmFja2VyLnNoaWZ0KHNpemUpXG4gIGNvbnN0IGV4aXQgPSBzdGF0ZS5lbnRlcignbGlzdEl0ZW0nKVxuICBjb25zdCB2YWx1ZSA9IHN0YXRlLmluZGVudExpbmVzKFxuICAgIHN0YXRlLmNvbnRhaW5lckZsb3cobm9kZSwgdHJhY2tlci5jdXJyZW50KCkpLFxuICAgIG1hcFxuICApXG4gIGV4aXQoKVxuXG4gIHJldHVybiB2YWx1ZVxuXG4gIC8qKiBAdHlwZSB7TWFwfSAqL1xuICBmdW5jdGlvbiBtYXAobGluZSwgaW5kZXgsIGJsYW5rKSB7XG4gICAgaWYgKGluZGV4KSB7XG4gICAgICByZXR1cm4gKGJsYW5rID8gJycgOiAnICcucmVwZWF0KHNpemUpKSArIGxpbmVcbiAgICB9XG5cbiAgICByZXR1cm4gKGJsYW5rID8gYnVsbGV0IDogYnVsbGV0ICsgJyAnLnJlcGVhdChzaXplIC0gYnVsbGV0Lmxlbmd0aCkpICsgbGluZVxuICB9XG59XG4iXSwibmFtZXMiOlsibGlzdEl0ZW0iLCJub2RlIiwicGFyZW50Iiwic3RhdGUiLCJpbmZvIiwibGlzdEl0ZW1JbmRlbnQiLCJjaGVja0xpc3RJdGVtSW5kZW50IiwiYnVsbGV0IiwiYnVsbGV0Q3VycmVudCIsImNoZWNrQnVsbGV0IiwidHlwZSIsIm9yZGVyZWQiLCJzdGFydCIsIm9wdGlvbnMiLCJpbmNyZW1lbnRMaXN0TWFya2VyIiwiY2hpbGRyZW4iLCJpbmRleE9mIiwic2l6ZSIsImxlbmd0aCIsInNwcmVhZCIsIk1hdGgiLCJjZWlsIiwidHJhY2tlciIsImNyZWF0ZVRyYWNrZXIiLCJtb3ZlIiwicmVwZWF0Iiwic2hpZnQiLCJleGl0IiwiZW50ZXIiLCJ2YWx1ZSIsImluZGVudExpbmVzIiwiY29udGFpbmVyRmxvdyIsImN1cnJlbnQiLCJtYXAiLCJsaW5lIiwiaW5kZXgiLCJibGFuayJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Q0FNQzs7OzsrQkFZZUE7OztlQUFBQTs7OzZCQVZVO3FDQUNRO0FBUzNCLFNBQVNBLFNBQVNDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUk7SUFDaEQsTUFBTUMsaUJBQWlCQyxJQUFBQSx3Q0FBbUIsRUFBQ0g7SUFDM0MsSUFBSUksU0FBU0osTUFBTUssYUFBYSxJQUFJQyxJQUFBQSx3QkFBVyxFQUFDTjtJQUVoRCwwQ0FBMEM7SUFDMUMsSUFBSUQsVUFBVUEsT0FBT1EsSUFBSSxLQUFLLFVBQVVSLE9BQU9TLE9BQU8sRUFBRTtRQUN0REosU0FDRSxBQUFDLENBQUEsT0FBT0wsT0FBT1UsS0FBSyxLQUFLLFlBQVlWLE9BQU9VLEtBQUssR0FBRyxDQUFDLElBQ2pEVixPQUFPVSxLQUFLLEdBQ1osQ0FBQSxJQUNIVCxDQUFBQSxNQUFNVSxPQUFPLENBQUNDLG1CQUFtQixLQUFLLFFBQ25DLElBQ0FaLE9BQU9hLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDZixLQUFJLElBQ2hDTTtJQUNKO0lBRUEsSUFBSVUsT0FBT1YsT0FBT1csTUFBTSxHQUFHO0lBRTNCLElBQ0ViLG1CQUFtQixTQUNsQkEsbUJBQW1CLFdBQ2pCLENBQUEsQUFBQ0gsVUFBVUEsT0FBT1EsSUFBSSxLQUFLLFVBQVVSLE9BQU9pQixNQUFNLElBQUtsQixLQUFLa0IsTUFBTSxBQUFELEdBQ3BFO1FBQ0FGLE9BQU9HLEtBQUtDLElBQUksQ0FBQ0osT0FBTyxLQUFLO0lBQy9CO0lBRUEsTUFBTUssVUFBVW5CLE1BQU1vQixhQUFhLENBQUNuQjtJQUNwQ2tCLFFBQVFFLElBQUksQ0FBQ2pCLFNBQVMsSUFBSWtCLE1BQU0sQ0FBQ1IsT0FBT1YsT0FBT1csTUFBTTtJQUNyREksUUFBUUksS0FBSyxDQUFDVDtJQUNkLE1BQU1VLE9BQU94QixNQUFNeUIsS0FBSyxDQUFDO0lBQ3pCLE1BQU1DLFFBQVExQixNQUFNMkIsV0FBVyxDQUM3QjNCLE1BQU00QixhQUFhLENBQUM5QixNQUFNcUIsUUFBUVUsT0FBTyxLQUN6Q0M7SUFFRk47SUFFQSxPQUFPRTtJQUVQLGdCQUFnQixHQUNoQixTQUFTSSxJQUFJQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsS0FBSztRQUM3QixJQUFJRCxPQUFPO1lBQ1QsT0FBTyxBQUFDQyxDQUFBQSxRQUFRLEtBQUssSUFBSVgsTUFBTSxDQUFDUixLQUFJLElBQUtpQjtRQUMzQztRQUVBLE9BQU8sQUFBQ0UsQ0FBQUEsUUFBUTdCLFNBQVNBLFNBQVMsSUFBSWtCLE1BQU0sQ0FBQ1IsT0FBT1YsT0FBT1csTUFBTSxDQUFBLElBQUtnQjtJQUN4RTtBQUNGIn0=