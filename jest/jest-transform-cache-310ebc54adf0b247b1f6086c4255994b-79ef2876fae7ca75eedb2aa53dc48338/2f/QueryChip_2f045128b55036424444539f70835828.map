{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/cqs-query-bar/src/lib/chips/QueryChip.tsx"],"sourcesContent":["import { forwardRef } from \"react\"\nimport {\n  isRpqlFlatArrayFilter,\n  isRpqlFlatArrayIdFilter,\n  isRpqlFlatLogicalGroup,\n  isRpqlFlatLogicalNot,\n  isRpqlFlatMatchFilter,\n} from \"@rp/common/api-types\"\nimport { RpqlFlatArrayFilter, RpqlFlatFilter } from \"@rp/common/api-types\"\nimport { CqsQueryBarContext } from \"../cqs-query-bar.types\"\nimport { ArrayFilterChip } from \"./ArrayFilterChip\"\nimport { MacroSearchChip } from \"./MacroSearchChip\"\nimport { UnsupportedChip } from \"./UnsupportedChip\"\nimport { WatchlistChip } from \"./WatchlistChip\"\n\ntype QueryChipProps = {\n  filter: RpqlFlatFilter | null\n  nestedFlatFilters?: Array<RpqlFlatArrayFilter | null>\n  onRemove?: () => void\n  query?: CqsQueryBarContext\n}\n\n// üê∑üíÑ\n// This is putting lipstick on a pig. Only needed for a DEMO\nconst ENABLE_UNSUPPORTED_CHIP = false\n\nconst QueryChip = forwardRef<HTMLDivElement, QueryChipProps>(\n  ({ filter, nestedFlatFilters, onRemove, query }, ref) => {\n    if (filter === null) {\n      return null\n    }\n\n    if (isRpqlFlatMatchFilter(filter)) {\n      return (\n        <MacroSearchChip\n          query={query}\n          flatFilters={nestedFlatFilters}\n          filter={filter}\n          onRemove={onRemove}\n          ref={ref}\n        />\n      )\n    }\n\n    if (isRpqlFlatLogicalGroup(filter) || isRpqlFlatLogicalNot(filter)) {\n      return ENABLE_UNSUPPORTED_CHIP ? <UnsupportedChip onRemove={onRemove} /> : null\n    }\n\n    if (isRpqlFlatArrayFilter(filter)) {\n      return <ArrayFilterChip query={query} filter={filter} onRemove={onRemove} ref={ref} />\n    }\n\n    if (isRpqlFlatArrayIdFilter(filter) && filter.type === \"watchlist\") {\n      return <WatchlistChip query={query} filter={filter} onRemove={onRemove} ref={ref} />\n    }\n\n    return ENABLE_UNSUPPORTED_CHIP ? <UnsupportedChip onRemove={onRemove} /> : null\n  },\n)\n\nexport { QueryChip }\n"],"names":["QueryChip","ENABLE_UNSUPPORTED_CHIP","forwardRef","filter","nestedFlatFilters","onRemove","query","ref","isRpqlFlatMatchFilter","MacroSearchChip","flatFilters","isRpqlFlatLogicalGroup","isRpqlFlatLogicalNot","UnsupportedChip","isRpqlFlatArrayFilter","ArrayFilterChip","isRpqlFlatArrayIdFilter","type","WatchlistChip"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA4DSA;;;eAAAA;;;;uBA5DkB;0BAOpB;iCAGyB;iCACA;iCACA;+BACF;AAS9B,OAAO;AACP,4DAA4D;AAC5D,MAAMC,0BAA0B;AAEhC,MAAMD,0BAAYE,IAAAA,iBAAU,EAC1B,CAAC,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,QAAQ,EAAEC,KAAK,EAAE,EAAEC;IAC/C,IAAIJ,WAAW,MAAM;QACnB,OAAO;IACT;IAEA,IAAIK,IAAAA,+BAAqB,EAACL,SAAS;QACjC,qBACE,qBAACM,gCAAe;YACdH,OAAOA;YACPI,aAAaN;YACbD,QAAQA;YACRE,UAAUA;YACVE,KAAKA;;IAGX;IAEA,IAAII,IAAAA,gCAAsB,EAACR,WAAWS,IAAAA,8BAAoB,EAACT,SAAS;QAClE,OAAOF,wCAA0B,qBAACY,gCAAe;YAACR,UAAUA;aAAe;IAC7E;IAEA,IAAIS,IAAAA,+BAAqB,EAACX,SAAS;QACjC,qBAAO,qBAACY,gCAAe;YAACT,OAAOA;YAAOH,QAAQA;YAAQE,UAAUA;YAAUE,KAAKA;;IACjF;IAEA,IAAIS,IAAAA,iCAAuB,EAACb,WAAWA,OAAOc,IAAI,KAAK,aAAa;QAClE,qBAAO,qBAACC,4BAAa;YAACZ,OAAOA;YAAOH,QAAQA;YAAQE,UAAUA;YAAUE,KAAKA;;IAC/E;IAEA,OAAON,wCAA0B,qBAACY,gCAAe;QAACR,UAAUA;SAAe;AAC7E"}