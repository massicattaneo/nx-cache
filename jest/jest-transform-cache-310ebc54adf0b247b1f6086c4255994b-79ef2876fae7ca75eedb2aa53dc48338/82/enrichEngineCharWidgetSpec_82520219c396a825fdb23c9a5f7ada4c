cb17e8578f404fb4f7420e926c5bad11
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "enrichEngineCharWidgetSpec", {
    enumerable: true,
    get: function() {
        return enrichEngineCharWidgetSpec;
    }
});
const _pako = /*#__PURE__*/ _interop_require_default(require("pako"));
const _axiosclient = require("@rp/react/axios-client");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const retrieveEngineChartWidgetSpec = (widgetSpecUrl)=>{
    return async ()=>{
        const { data } = await _axiosclient.axiosClient.get(widgetSpecUrl, {
            responseType: "arraybuffer",
            withCredentials: false
        });
        return data;
    };
};
const enrichEngineCharWidgetSpec = async (queryClient, interaction)=>{
    if (interaction.responseBlock !== undefined && interaction.responseBlock.type === "ENGINE" && interaction.responseBlock.widgetSpecUrl) {
        const { widgetSpecUrl } = interaction.responseBlock;
        const widgetSpec = await queryClient.fetchQuery({
            queryKey: [
                "engine-chart-widget-spec",
                widgetSpecUrl
            ],
            queryFn: retrieveEngineChartWidgetSpec(widgetSpecUrl)
        }).then((arr)=>JSON.parse(_pako.default.inflate(arr, {
                to: "string"
            }))).catch(()=>({}));
        Object.assign(interaction.responseBlock, {
            widgetSpec
        });
    }
    return interaction;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2NoYXQvc3JjL2VucmljaEVuZ2luZUNoYXJXaWRnZXRTcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYWtvIGZyb20gXCJwYWtvXCJcbmltcG9ydCB7IGF4aW9zQ2xpZW50IH0gZnJvbSBcIkBycC9yZWFjdC9heGlvcy1jbGllbnRcIlxuaW1wb3J0IHsgUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcbmltcG9ydCB7IFNlZWRlZEludGVyYWN0aW9uLCBVc2VySW50ZXJhY3Rpb24gfSBmcm9tIFwiLi9jaGF0LnR5cGVzXCJcblxuY29uc3QgcmV0cmlldmVFbmdpbmVDaGFydFdpZGdldFNwZWMgPSAod2lkZ2V0U3BlY1VybDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc0NsaWVudC5nZXQod2lkZ2V0U3BlY1VybCwge1xuICAgICAgcmVzcG9uc2VUeXBlOiBcImFycmF5YnVmZmVyXCIsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuICAgIH0pXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZW5yaWNoRW5naW5lQ2hhcldpZGdldFNwZWMgPSBhc3luYyAoXG4gIHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudCxcbiAgaW50ZXJhY3Rpb246IFVzZXJJbnRlcmFjdGlvbiB8IFNlZWRlZEludGVyYWN0aW9uLFxuKSA9PiB7XG4gIGlmIChcbiAgICBpbnRlcmFjdGlvbi5yZXNwb25zZUJsb2NrICE9PSB1bmRlZmluZWQgJiZcbiAgICBpbnRlcmFjdGlvbi5yZXNwb25zZUJsb2NrLnR5cGUgPT09IFwiRU5HSU5FXCIgJiZcbiAgICBpbnRlcmFjdGlvbi5yZXNwb25zZUJsb2NrLndpZGdldFNwZWNVcmxcbiAgKSB7XG4gICAgY29uc3QgeyB3aWRnZXRTcGVjVXJsIH0gPSBpbnRlcmFjdGlvbi5yZXNwb25zZUJsb2NrXG4gICAgY29uc3Qgd2lkZ2V0U3BlYyA9IGF3YWl0IHF1ZXJ5Q2xpZW50XG4gICAgICAuZmV0Y2hRdWVyeSh7XG4gICAgICAgIHF1ZXJ5S2V5OiBbXCJlbmdpbmUtY2hhcnQtd2lkZ2V0LXNwZWNcIiwgd2lkZ2V0U3BlY1VybF0sXG4gICAgICAgIHF1ZXJ5Rm46IHJldHJpZXZlRW5naW5lQ2hhcnRXaWRnZXRTcGVjKHdpZGdldFNwZWNVcmwpLFxuICAgICAgfSlcbiAgICAgIC50aGVuKGFyciA9PiBKU09OLnBhcnNlKHBha28uaW5mbGF0ZShhcnIsIHsgdG86IFwic3RyaW5nXCIgfSkpKVxuICAgICAgLmNhdGNoKCgpID0+ICh7fSkpXG5cbiAgICBPYmplY3QuYXNzaWduKGludGVyYWN0aW9uLnJlc3BvbnNlQmxvY2ssIHsgd2lkZ2V0U3BlYyB9KVxuICB9XG4gIHJldHVybiBpbnRlcmFjdGlvblxufVxuIl0sIm5hbWVzIjpbImVucmljaEVuZ2luZUNoYXJXaWRnZXRTcGVjIiwicmV0cmlldmVFbmdpbmVDaGFydFdpZGdldFNwZWMiLCJ3aWRnZXRTcGVjVXJsIiwiZGF0YSIsImF4aW9zQ2xpZW50IiwiZ2V0IiwicmVzcG9uc2VUeXBlIiwid2l0aENyZWRlbnRpYWxzIiwicXVlcnlDbGllbnQiLCJpbnRlcmFjdGlvbiIsInJlc3BvbnNlQmxvY2siLCJ1bmRlZmluZWQiLCJ0eXBlIiwid2lkZ2V0U3BlYyIsImZldGNoUXVlcnkiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iLCJ0aGVuIiwiYXJyIiwiSlNPTiIsInBhcnNlIiwicGFrbyIsImluZmxhdGUiLCJ0byIsImNhdGNoIiwiT2JqZWN0IiwiYXNzaWduIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBZWFBOzs7ZUFBQUE7Ozs2REFmSTs2QkFDVzs7Ozs7O0FBSTVCLE1BQU1DLGdDQUFnQyxDQUFDQztJQUNyQyxPQUFPO1FBQ0wsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNQyx3QkFBVyxDQUFDQyxHQUFHLENBQUNILGVBQWU7WUFDcERJLGNBQWM7WUFDZEMsaUJBQWlCO1FBQ25CO1FBQ0EsT0FBT0o7SUFDVDtBQUNGO0FBRU8sTUFBTUgsNkJBQTZCLE9BQ3hDUSxhQUNBQztJQUVBLElBQ0VBLFlBQVlDLGFBQWEsS0FBS0MsYUFDOUJGLFlBQVlDLGFBQWEsQ0FBQ0UsSUFBSSxLQUFLLFlBQ25DSCxZQUFZQyxhQUFhLENBQUNSLGFBQWEsRUFDdkM7UUFDQSxNQUFNLEVBQUVBLGFBQWEsRUFBRSxHQUFHTyxZQUFZQyxhQUFhO1FBQ25ELE1BQU1HLGFBQWEsTUFBTUwsWUFDdEJNLFVBQVUsQ0FBQztZQUNWQyxVQUFVO2dCQUFDO2dCQUE0QmI7YUFBYztZQUNyRGMsU0FBU2YsOEJBQThCQztRQUN6QyxHQUNDZSxJQUFJLENBQUNDLENBQUFBLE1BQU9DLEtBQUtDLEtBQUssQ0FBQ0MsYUFBSSxDQUFDQyxPQUFPLENBQUNKLEtBQUs7Z0JBQUVLLElBQUk7WUFBUyxLQUN4REMsS0FBSyxDQUFDLElBQU8sQ0FBQSxDQUFDLENBQUE7UUFFakJDLE9BQU9DLE1BQU0sQ0FBQ2pCLFlBQVlDLGFBQWEsRUFBRTtZQUFFRztRQUFXO0lBQ3hEO0lBQ0EsT0FBT0o7QUFDVCJ9