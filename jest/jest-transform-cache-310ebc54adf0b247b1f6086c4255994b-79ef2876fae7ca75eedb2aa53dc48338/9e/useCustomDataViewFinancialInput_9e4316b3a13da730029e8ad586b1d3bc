aeee72783095efd17341fa78ac40d77b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCustomDataViewFinancialInput", {
    enumerable: true,
    get: function() {
        return useCustomDataViewFinancialInput;
    }
});
const _react = require("react");
const _tables = require("../../tables");
const _useCustomColumns = require("./useCustomColumns");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function useCustomDataViewFinancialInput(dataTab) {
    const { customColumns } = (0, _useCustomColumns.useCustomColumns)();
    // Dynamic financial data input for custom tab
    const financialDataInput = (0, _react.useMemo)(()=>{
        const tableInput = _tables.watchlistDataTables[dataTab].financialDataInput;
        if (dataTab === "custom" && customColumns.length > 0) {
            // For custom tab, aggregate data requirements from all selected custom columns
            return (entityIds)=>{
                const endpointsSet = new Set();
                let extraFinanceData = {};
                // Collect requirements from each custom column
                customColumns.forEach((customCol)=>{
                    const sourceTable = _tables.watchlistDataTables[customCol.sourceTab];
                    if (sourceTable) {
                        var _sourceColumn_meta;
                        const sourceColumn = sourceTable.columns.find((colDef)=>{
                            var _colDef_meta, _colDef_meta_columnKeys, _colDef_meta1;
                            return ((_colDef_meta = colDef.meta) === null || _colDef_meta === void 0 ? void 0 : _colDef_meta.endpoint) === customCol.endpoint && ((_colDef_meta1 = colDef.meta) === null || _colDef_meta1 === void 0 ? void 0 : (_colDef_meta_columnKeys = _colDef_meta1.columnKeys) === null || _colDef_meta_columnKeys === void 0 ? void 0 : _colDef_meta_columnKeys.includes(customCol.columnKey));
                        });
                        if (sourceColumn === null || sourceColumn === void 0 ? void 0 : (_sourceColumn_meta = sourceColumn.meta) === null || _sourceColumn_meta === void 0 ? void 0 : _sourceColumn_meta.endpoint) {
                            endpointsSet.add(sourceColumn.meta.endpoint);
                            // Include extraFinanceData if the column has it
                            if (sourceColumn.meta.extraFinanceData) {
                                const extra = sourceColumn.meta.extraFinanceData(entityIds.map((entity)=>entity.key));
                                extraFinanceData = _object_spread({}, extraFinanceData, extra);
                            }
                        }
                    }
                });
                // Build the financial data input
                const endpoints = Array.from(endpointsSet);
                const endpointInput = endpoints.reduce((acc, endpoint)=>{
                    return _object_spread_props(_object_spread({}, acc), {
                        [endpoint]: {
                            entityIds: entityIds.map((entity)=>entity.key)
                        }
                    });
                }, {});
                return _object_spread({}, endpointInput, extraFinanceData);
            };
        }
        return tableInput;
    }, [
        dataTab,
        customColumns
    ]);
    return {
        financialDataInput
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9DdXN0b21EYXRhVmlldy9ob29rcy91c2VDdXN0b21EYXRhVmlld0ZpbmFuY2lhbElucHV0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgQ3FzSXRlbSB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBDb2x1bW5EZWYgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXRhYmxlXCJcbmltcG9ydCB7IEZpbmFuY2VEYXRhVGFicyB9IGZyb20gXCIuLi8uLi8uLi9ob29rcy91c2VXYXRjaGxpc3RzRmluYW5jZURhdGFUYWJOYXZpZ2F0aW9uXCJcbmltcG9ydCB7IFdhdGNobGlzdERhdGFUYWJzVGFibGVFbnRpdHkgfSBmcm9tIFwiLi4vLi4vV2F0Y2hsaXN0RGF0YVRhYnNUYWJsZS50eXBlc1wiXG5pbXBvcnQgeyB3YXRjaGxpc3REYXRhVGFibGVzIH0gZnJvbSBcIi4uLy4uL3RhYmxlc1wiXG5pbXBvcnQgeyB1c2VDdXN0b21Db2x1bW5zIH0gZnJvbSBcIi4vdXNlQ3VzdG9tQ29sdW1uc1wiXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDdXN0b21EYXRhVmlld0ZpbmFuY2lhbElucHV0KGRhdGFUYWI6IEZpbmFuY2VEYXRhVGFicykge1xuICBjb25zdCB7IGN1c3RvbUNvbHVtbnMgfSA9IHVzZUN1c3RvbUNvbHVtbnMoKVxuXG4gIC8vIER5bmFtaWMgZmluYW5jaWFsIGRhdGEgaW5wdXQgZm9yIGN1c3RvbSB0YWJcbiAgY29uc3QgZmluYW5jaWFsRGF0YUlucHV0ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgdGFibGVJbnB1dCA9IHdhdGNobGlzdERhdGFUYWJsZXNbZGF0YVRhYl0uZmluYW5jaWFsRGF0YUlucHV0XG5cbiAgICBpZiAoZGF0YVRhYiA9PT0gXCJjdXN0b21cIiAmJiBjdXN0b21Db2x1bW5zLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIEZvciBjdXN0b20gdGFiLCBhZ2dyZWdhdGUgZGF0YSByZXF1aXJlbWVudHMgZnJvbSBhbGwgc2VsZWN0ZWQgY3VzdG9tIGNvbHVtbnNcbiAgICAgIHJldHVybiAoZW50aXR5SWRzOiBBcnJheTxDcXNJdGVtPikgPT4ge1xuICAgICAgICBjb25zdCBlbmRwb2ludHNTZXQgPSBuZXcgU2V0PHN0cmluZz4oKVxuICAgICAgICBsZXQgZXh0cmFGaW5hbmNlRGF0YSA9IHt9XG5cbiAgICAgICAgLy8gQ29sbGVjdCByZXF1aXJlbWVudHMgZnJvbSBlYWNoIGN1c3RvbSBjb2x1bW5cbiAgICAgICAgY3VzdG9tQ29sdW1ucy5mb3JFYWNoKGN1c3RvbUNvbCA9PiB7XG4gICAgICAgICAgY29uc3Qgc291cmNlVGFibGUgPSB3YXRjaGxpc3REYXRhVGFibGVzW2N1c3RvbUNvbC5zb3VyY2VUYWIgYXMgRmluYW5jZURhdGFUYWJzXVxuICAgICAgICAgIGlmIChzb3VyY2VUYWJsZSkge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ29sdW1uID0gc291cmNlVGFibGUuY29sdW1ucy5maW5kKFxuICAgICAgICAgICAgICAoY29sRGVmOiBDb2x1bW5EZWY8V2F0Y2hsaXN0RGF0YVRhYnNUYWJsZUVudGl0eT4pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgY29sRGVmLm1ldGE/LmVuZHBvaW50ID09PSBjdXN0b21Db2wuZW5kcG9pbnQgJiZcbiAgICAgICAgICAgICAgICAgIGNvbERlZi5tZXRhPy5jb2x1bW5LZXlzPy5pbmNsdWRlcyhjdXN0b21Db2wuY29sdW1uS2V5KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgaWYgKHNvdXJjZUNvbHVtbj8ubWV0YT8uZW5kcG9pbnQpIHtcbiAgICAgICAgICAgICAgZW5kcG9pbnRzU2V0LmFkZChzb3VyY2VDb2x1bW4ubWV0YS5lbmRwb2ludClcblxuICAgICAgICAgICAgICAvLyBJbmNsdWRlIGV4dHJhRmluYW5jZURhdGEgaWYgdGhlIGNvbHVtbiBoYXMgaXRcbiAgICAgICAgICAgICAgaWYgKHNvdXJjZUNvbHVtbi5tZXRhLmV4dHJhRmluYW5jZURhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleHRyYSA9IHNvdXJjZUNvbHVtbi5tZXRhLmV4dHJhRmluYW5jZURhdGEoXG4gICAgICAgICAgICAgICAgICBlbnRpdHlJZHMubWFwKGVudGl0eSA9PiBlbnRpdHkua2V5KSxcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZXh0cmFGaW5hbmNlRGF0YSA9IHsgLi4uZXh0cmFGaW5hbmNlRGF0YSwgLi4uZXh0cmEgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEJ1aWxkIHRoZSBmaW5hbmNpYWwgZGF0YSBpbnB1dFxuICAgICAgICBjb25zdCBlbmRwb2ludHMgPSBBcnJheS5mcm9tKGVuZHBvaW50c1NldClcbiAgICAgICAgY29uc3QgZW5kcG9pbnRJbnB1dCA9IGVuZHBvaW50cy5yZWR1Y2UoKGFjYywgZW5kcG9pbnQpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uYWNjLFxuICAgICAgICAgICAgW2VuZHBvaW50XToge1xuICAgICAgICAgICAgICBlbnRpdHlJZHM6IGVudGl0eUlkcy5tYXAoZW50aXR5ID0+IGVudGl0eS5rZXkpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHt9KVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZW5kcG9pbnRJbnB1dCxcbiAgICAgICAgICAuLi5leHRyYUZpbmFuY2VEYXRhLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlSW5wdXRcbiAgfSwgW2RhdGFUYWIsIGN1c3RvbUNvbHVtbnNdKVxuXG4gIHJldHVybiB7IGZpbmFuY2lhbERhdGFJbnB1dCB9XG59XG4iXSwibmFtZXMiOlsidXNlQ3VzdG9tRGF0YVZpZXdGaW5hbmNpYWxJbnB1dCIsImRhdGFUYWIiLCJjdXN0b21Db2x1bW5zIiwidXNlQ3VzdG9tQ29sdW1ucyIsImZpbmFuY2lhbERhdGFJbnB1dCIsInVzZU1lbW8iLCJ0YWJsZUlucHV0Iiwid2F0Y2hsaXN0RGF0YVRhYmxlcyIsImxlbmd0aCIsImVudGl0eUlkcyIsImVuZHBvaW50c1NldCIsIlNldCIsImV4dHJhRmluYW5jZURhdGEiLCJmb3JFYWNoIiwiY3VzdG9tQ29sIiwic291cmNlVGFibGUiLCJzb3VyY2VUYWIiLCJzb3VyY2VDb2x1bW4iLCJjb2x1bW5zIiwiZmluZCIsImNvbERlZiIsIm1ldGEiLCJlbmRwb2ludCIsImNvbHVtbktleXMiLCJpbmNsdWRlcyIsImNvbHVtbktleSIsImFkZCIsImV4dHJhIiwibWFwIiwiZW50aXR5Iiwia2V5IiwiZW5kcG9pbnRzIiwiQXJyYXkiLCJmcm9tIiwiZW5kcG9pbnRJbnB1dCIsInJlZHVjZSIsImFjYyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBUWdCQTs7O2VBQUFBOzs7dUJBUlE7d0JBS1k7a0NBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRTFCLFNBQVNBLGdDQUFnQ0MsT0FBd0I7SUFDdEUsTUFBTSxFQUFFQyxhQUFhLEVBQUUsR0FBR0MsSUFBQUEsa0NBQWdCO0lBRTFDLDhDQUE4QztJQUM5QyxNQUFNQyxxQkFBcUJDLElBQUFBLGNBQU8sRUFBQztRQUNqQyxNQUFNQyxhQUFhQywyQkFBbUIsQ0FBQ04sUUFBUSxDQUFDRyxrQkFBa0I7UUFFbEUsSUFBSUgsWUFBWSxZQUFZQyxjQUFjTSxNQUFNLEdBQUcsR0FBRztZQUNwRCwrRUFBK0U7WUFDL0UsT0FBTyxDQUFDQztnQkFDTixNQUFNQyxlQUFlLElBQUlDO2dCQUN6QixJQUFJQyxtQkFBbUIsQ0FBQztnQkFFeEIsK0NBQStDO2dCQUMvQ1YsY0FBY1csT0FBTyxDQUFDQyxDQUFBQTtvQkFDcEIsTUFBTUMsY0FBY1IsMkJBQW1CLENBQUNPLFVBQVVFLFNBQVMsQ0FBb0I7b0JBQy9FLElBQUlELGFBQWE7NEJBVVhFO3dCQVRKLE1BQU1BLGVBQWVGLFlBQVlHLE9BQU8sQ0FBQ0MsSUFBSSxDQUMzQyxDQUFDQztnQ0FFR0EsY0FDQUEseUJBQUFBOzRCQUZGLE9BQ0VBLEVBQUFBLGVBQUFBLE9BQU9DLElBQUksY0FBWEQsbUNBQUFBLGFBQWFFLFFBQVEsTUFBS1IsVUFBVVEsUUFBUSxNQUM1Q0YsZ0JBQUFBLE9BQU9DLElBQUksY0FBWEQscUNBQUFBLDBCQUFBQSxjQUFhRyxVQUFVLGNBQXZCSCw4Q0FBQUEsd0JBQXlCSSxRQUFRLENBQUNWLFVBQVVXLFNBQVM7d0JBRXpEO3dCQUdGLElBQUlSLHlCQUFBQSxvQ0FBQUEscUJBQUFBLGFBQWNJLElBQUksY0FBbEJKLHlDQUFBQSxtQkFBb0JLLFFBQVEsRUFBRTs0QkFDaENaLGFBQWFnQixHQUFHLENBQUNULGFBQWFJLElBQUksQ0FBQ0MsUUFBUTs0QkFFM0MsZ0RBQWdEOzRCQUNoRCxJQUFJTCxhQUFhSSxJQUFJLENBQUNULGdCQUFnQixFQUFFO2dDQUN0QyxNQUFNZSxRQUFRVixhQUFhSSxJQUFJLENBQUNULGdCQUFnQixDQUM5Q0gsVUFBVW1CLEdBQUcsQ0FBQ0MsQ0FBQUEsU0FBVUEsT0FBT0MsR0FBRztnQ0FFcENsQixtQkFBbUIsbUJBQUtBLGtCQUFxQmU7NEJBQy9DO3dCQUNGO29CQUNGO2dCQUNGO2dCQUVBLGlDQUFpQztnQkFDakMsTUFBTUksWUFBWUMsTUFBTUMsSUFBSSxDQUFDdkI7Z0JBQzdCLE1BQU13QixnQkFBZ0JILFVBQVVJLE1BQU0sQ0FBQyxDQUFDQyxLQUFLZDtvQkFDM0MsT0FBTyx3Q0FDRmM7d0JBQ0gsQ0FBQ2QsU0FBUyxFQUFFOzRCQUNWYixXQUFXQSxVQUFVbUIsR0FBRyxDQUFDQyxDQUFBQSxTQUFVQSxPQUFPQyxHQUFHO3dCQUMvQzs7Z0JBRUosR0FBRyxDQUFDO2dCQUVKLE9BQU8sbUJBQ0ZJLGVBQ0F0QjtZQUVQO1FBQ0Y7UUFFQSxPQUFPTjtJQUNULEdBQUc7UUFBQ0w7UUFBU0M7S0FBYztJQUUzQixPQUFPO1FBQUVFO0lBQW1CO0FBQzlCIn0=