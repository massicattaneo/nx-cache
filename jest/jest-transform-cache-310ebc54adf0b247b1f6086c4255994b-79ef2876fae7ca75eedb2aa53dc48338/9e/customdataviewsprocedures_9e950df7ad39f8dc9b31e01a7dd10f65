6718563a650411f845c19e514388d044
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "userDataCustomDataViewsProcedures", {
    enumerable: true,
    get: function() {
        return userDataCustomDataViewsProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _server = require("@trpc/server");
const _database = require("../../../../database");
const _bigdataapiprocedure = require("../../bigdata-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const userDataCustomDataViewsProcedures = {
    list: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/custom-data-views"
        }
    }).input(_zod.z.object({})).output(_contracts.bigdataSchemas.st_bff_data_tools_CustomDataViewListResponse).query(async ({ ctx })=>{
        const results = await ctx.db.collection("customDataViews").find();
        return {
            results
        };
    }),
    create: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/custom-data-views"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_CreateCustomDataViewRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_CustomDataViewResponse).mutation(async ({ ctx, input })=>{
        const now = new Date().toISOString();
        const newView = {
            id: (0, _database.generateId)(),
            columns: input.columns,
            createdAt: now,
            updatedAt: now,
            user_id: _database.userOwner.ownerUserId
        };
        return ctx.db.collection("customDataViews").insertOne(newView);
    }),
    update: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PATCH",
            path: "/custom-data-views/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    }).merge(_contracts.bigdataSchemas.st_bff_data_tools_UpdateCustomDataViewRequest)).output(_contracts.bigdataSchemas.st_bff_data_tools_CustomDataViewResponse).mutation(async ({ ctx, input })=>{
        const { id } = input, updateData = _object_without_properties(input, [
            "id"
        ]);
        const existing = await ctx.db.collection("customDataViews").findOne({
            id
        });
        if (!existing) {
            throw new _server.TRPCError({
                code: "NOT_FOUND",
                message: "Custom data view not found"
            });
        }
        const updatedView = _object_spread_props(_object_spread({}, existing), {
            columns: updateData.columns !== null ? updateData.columns : existing.columns,
            updatedAt: new Date().toISOString()
        });
        const result = await ctx.db.collection("customDataViews").updateOne({
            id
        }, updatedView);
        if (!result) {
            throw new _server.TRPCError({
                code: "NOT_FOUND",
                message: "Custom data view not found"
            });
        }
        return result;
    }),
    delete: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "DELETE",
            path: "/custom-data-views/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_zod.z.object({
        id: _zod.z.string()
    })).mutation(async ({ ctx, input })=>{
        const existing = await ctx.db.collection("customDataViews").findOne({
            id: input.id
        });
        if (!existing) {
            throw new _server.TRPCError({
                code: "NOT_FOUND",
                message: "Custom data view not found"
            });
        }
        await ctx.db.collection("customDataViews").deleteOne({
            id: input.id
        });
        return {
            id: input.id
        };
    })
};

//# sourceMappingURL=data:application/json;base64,