41e206ef6c3a065339293404d899eb7f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "mapToISOTimestamp", {
    enumerable: true,
    get: function() {
        return mapToISOTimestamp;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const convertToUTC = (str)=>(str === null || str === void 0 ? void 0 : str.endsWith("Z")) ? str : str + "Z";
const mapToISOTimestamp = (item)=>{
    const result = _object_spread({}, item);
    if (item.lastUpdated !== undefined && item.lastUpdated !== null) {
        result.lastUpdated = convertToUTC(item.lastUpdated);
    }
    if (item.lastExecuted) {
        result.lastExecuted = convertToUTC(item.lastExecuted);
    }
    if (item.lastInteracted) {
        result.lastInteracted = convertToUTC(item.lastInteracted);
    }
    if (item.dateCreated !== undefined && item.dateCreated !== null) {
        result.dateCreated = convertToUTC(item.dateCreated);
    }
    if (item.ts !== undefined && item.ts !== null) {
        result.ts = convertToUTC(item.ts);
    }
    return result;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3V0aWxzL3NyYy9saWIvbWFwVG9JU09UaW1lc3RhbXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZSBEYXRlVGltZSA9IHN0cmluZ1xuXG50eXBlIEl0ZW1XaXRoVGltZXN0YW1wcyA9IHtcbiAgbGFzdFVwZGF0ZWQ/OiBEYXRlVGltZSB8IG51bGxcbiAgZGF0ZUNyZWF0ZWQ/OiBEYXRlVGltZSB8IG51bGxcbiAgbGFzdEV4ZWN1dGVkPzogRGF0ZVRpbWUgfCBudWxsXG4gIGxhc3RJbnRlcmFjdGVkPzogRGF0ZVRpbWUgfCBudWxsXG4gIHRzPzogRGF0ZVRpbWUgfCBudWxsXG59XG5cbmNvbnN0IGNvbnZlcnRUb1VUQyA9IChzdHI6IHN0cmluZykgPT4gKHN0cj8uZW5kc1dpdGgoXCJaXCIpID8gc3RyIDogc3RyICsgXCJaXCIpXG5cbmNvbnN0IG1hcFRvSVNPVGltZXN0YW1wID0gPFQgZXh0ZW5kcyBJdGVtV2l0aFRpbWVzdGFtcHM+KGl0ZW06IFQpOiBUID0+IHtcbiAgY29uc3QgcmVzdWx0ID0geyAuLi5pdGVtIH1cblxuICBpZiAoaXRlbS5sYXN0VXBkYXRlZCAhPT0gdW5kZWZpbmVkICYmIGl0ZW0ubGFzdFVwZGF0ZWQgIT09IG51bGwpIHtcbiAgICByZXN1bHQubGFzdFVwZGF0ZWQgPSBjb252ZXJ0VG9VVEMoaXRlbS5sYXN0VXBkYXRlZClcbiAgfVxuXG4gIGlmIChpdGVtLmxhc3RFeGVjdXRlZCkge1xuICAgIHJlc3VsdC5sYXN0RXhlY3V0ZWQgPSBjb252ZXJ0VG9VVEMoaXRlbS5sYXN0RXhlY3V0ZWQpXG4gIH1cblxuICBpZiAoaXRlbS5sYXN0SW50ZXJhY3RlZCkge1xuICAgIHJlc3VsdC5sYXN0SW50ZXJhY3RlZCA9IGNvbnZlcnRUb1VUQyhpdGVtLmxhc3RJbnRlcmFjdGVkKVxuICB9XG5cbiAgaWYgKGl0ZW0uZGF0ZUNyZWF0ZWQgIT09IHVuZGVmaW5lZCAmJiBpdGVtLmRhdGVDcmVhdGVkICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LmRhdGVDcmVhdGVkID0gY29udmVydFRvVVRDKGl0ZW0uZGF0ZUNyZWF0ZWQpXG4gIH1cblxuICBpZiAoaXRlbS50cyAhPT0gdW5kZWZpbmVkICYmIGl0ZW0udHMgIT09IG51bGwpIHtcbiAgICByZXN1bHQudHMgPSBjb252ZXJ0VG9VVEMoaXRlbS50cylcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IHsgbWFwVG9JU09UaW1lc3RhbXAgfVxuIl0sIm5hbWVzIjpbIm1hcFRvSVNPVGltZXN0YW1wIiwiY29udmVydFRvVVRDIiwic3RyIiwiZW5kc1dpdGgiLCJpdGVtIiwicmVzdWx0IiwibGFzdFVwZGF0ZWQiLCJ1bmRlZmluZWQiLCJsYXN0RXhlY3V0ZWQiLCJsYXN0SW50ZXJhY3RlZCIsImRhdGVDcmVhdGVkIiwidHMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXNDU0E7OztlQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTVCVCxNQUFNQyxlQUFlLENBQUNDLE1BQWlCQSxDQUFBQSxnQkFBQUEsMEJBQUFBLElBQUtDLFFBQVEsQ0FBQyxRQUFPRCxNQUFNQSxNQUFNO0FBRXhFLE1BQU1GLG9CQUFvQixDQUErQkk7SUFDdkQsTUFBTUMsU0FBUyxtQkFBS0Q7SUFFcEIsSUFBSUEsS0FBS0UsV0FBVyxLQUFLQyxhQUFhSCxLQUFLRSxXQUFXLEtBQUssTUFBTTtRQUMvREQsT0FBT0MsV0FBVyxHQUFHTCxhQUFhRyxLQUFLRSxXQUFXO0lBQ3BEO0lBRUEsSUFBSUYsS0FBS0ksWUFBWSxFQUFFO1FBQ3JCSCxPQUFPRyxZQUFZLEdBQUdQLGFBQWFHLEtBQUtJLFlBQVk7SUFDdEQ7SUFFQSxJQUFJSixLQUFLSyxjQUFjLEVBQUU7UUFDdkJKLE9BQU9JLGNBQWMsR0FBR1IsYUFBYUcsS0FBS0ssY0FBYztJQUMxRDtJQUVBLElBQUlMLEtBQUtNLFdBQVcsS0FBS0gsYUFBYUgsS0FBS00sV0FBVyxLQUFLLE1BQU07UUFDL0RMLE9BQU9LLFdBQVcsR0FBR1QsYUFBYUcsS0FBS00sV0FBVztJQUNwRDtJQUVBLElBQUlOLEtBQUtPLEVBQUUsS0FBS0osYUFBYUgsS0FBS08sRUFBRSxLQUFLLE1BQU07UUFDN0NOLE9BQU9NLEVBQUUsR0FBR1YsYUFBYUcsS0FBS08sRUFBRTtJQUNsQztJQUVBLE9BQU9OO0FBQ1QifQ==