10e67aa577a859318bafafbf67f72cbb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useBriefDetailsViewData", {
    enumerable: true,
    get: function() {
        return useBriefDetailsViewData;
    }
});
const _reactrouterdom = require("react-router-dom");
const _brief = require("@rp/react/tanstack-api/brief");
const _useBriefReportLoadError = require("../useBriefReportLoadError");
const useBriefDetailsViewData = ()=>{
    var _latestBriefReportResponse_data;
    const { briefId, reportId } = (0, _reactrouterdom.useParams)();
    const isHistoricalBriefReport = !!reportId;
    const { data: briefConfig = null, error: briefConfigError } = (0, _brief.useBriefConfigById)({
        briefId
    });
    const briefName = briefConfig === null || briefConfig === void 0 ? void 0 : briefConfig.briefName;
    const historicalBriefReportResponse = (0, _brief.useHistoricalBriefReport)(briefConfig === null || briefConfig === void 0 ? void 0 : briefConfig.id, reportId);
    const latestBriefReportResponse = (0, _brief.useLatestBriefReport)(briefConfig === null || briefConfig === void 0 ? void 0 : briefConfig.id, !isHistoricalBriefReport);
    (0, _useBriefReportLoadError.useBriefReportLoadError)({
        briefConfigError,
        historicalBriefReportResponse,
        latestBriefReportResponse
    });
    const isLatestBriefReportRetrying = !isHistoricalBriefReport && !!latestBriefReportResponse.isPending && latestBriefReportResponse.failureCount > 0;
    const briefReport = (isHistoricalBriefReport ? historicalBriefReportResponse.data : (_latestBriefReportResponse_data = latestBriefReportResponse.data) === null || _latestBriefReportResponse_data === void 0 ? void 0 : _latestBriefReportResponse_data.report) || null;
    return {
        briefName,
        briefReport,
        briefConfig,
        isLatestBriefReportRetrying
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9ob29rcy91c2VCcmllZkRldGFpbHNWaWV3RGF0YS91c2VCcmllZkRldGFpbHNWaWV3RGF0YS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQge1xuICB0eXBlIEJyaWVmQ29uZmlnLFxuICB0eXBlIEJyaWVmUmVwb3J0LFxuICB1c2VCcmllZkNvbmZpZ0J5SWQsXG4gIHVzZUhpc3RvcmljYWxCcmllZlJlcG9ydCxcbiAgdXNlTGF0ZXN0QnJpZWZSZXBvcnQsXG59IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2JyaWVmXCJcbmltcG9ydCB7IHVzZUJyaWVmUmVwb3J0TG9hZEVycm9yIH0gZnJvbSBcIi4uL3VzZUJyaWVmUmVwb3J0TG9hZEVycm9yXCJcblxudHlwZSBVc2VCcmllZkRldGFpbHNWaWV3RGF0YVN0YXRlID0ge1xuICBicmllZk5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZFxuICBicmllZkNvbmZpZzogQnJpZWZDb25maWcgfCBudWxsXG4gIGlzTGF0ZXN0QnJpZWZSZXBvcnRSZXRyeWluZzogYm9vbGVhblxuICBicmllZlJlcG9ydDogQnJpZWZSZXBvcnQgfCBudWxsXG59XG5cbmNvbnN0IHVzZUJyaWVmRGV0YWlsc1ZpZXdEYXRhID0gKCk6IFVzZUJyaWVmRGV0YWlsc1ZpZXdEYXRhU3RhdGUgPT4ge1xuICBjb25zdCB7IGJyaWVmSWQsIHJlcG9ydElkIH0gPSB1c2VQYXJhbXMoKVxuICBjb25zdCBpc0hpc3RvcmljYWxCcmllZlJlcG9ydCA9ICEhcmVwb3J0SWRcblxuICBjb25zdCB7XG4gICAgZGF0YTogYnJpZWZDb25maWcgPSBudWxsLFxuXG4gICAgZXJyb3I6IGJyaWVmQ29uZmlnRXJyb3IsXG4gIH0gPSB1c2VCcmllZkNvbmZpZ0J5SWQoeyBicmllZklkIH0pXG5cbiAgY29uc3QgYnJpZWZOYW1lID0gYnJpZWZDb25maWc/LmJyaWVmTmFtZVxuXG4gIGNvbnN0IGhpc3RvcmljYWxCcmllZlJlcG9ydFJlc3BvbnNlID0gdXNlSGlzdG9yaWNhbEJyaWVmUmVwb3J0KGJyaWVmQ29uZmlnPy5pZCwgcmVwb3J0SWQpXG4gIGNvbnN0IGxhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2UgPSB1c2VMYXRlc3RCcmllZlJlcG9ydChicmllZkNvbmZpZz8uaWQsICFpc0hpc3RvcmljYWxCcmllZlJlcG9ydClcblxuICB1c2VCcmllZlJlcG9ydExvYWRFcnJvcih7XG4gICAgYnJpZWZDb25maWdFcnJvcixcbiAgICBoaXN0b3JpY2FsQnJpZWZSZXBvcnRSZXNwb25zZSxcbiAgICBsYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlLFxuICB9KVxuXG4gIGNvbnN0IGlzTGF0ZXN0QnJpZWZSZXBvcnRSZXRyeWluZyA9XG4gICAgIWlzSGlzdG9yaWNhbEJyaWVmUmVwb3J0ICYmXG4gICAgISFsYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlLmlzUGVuZGluZyAmJlxuICAgIGxhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2UuZmFpbHVyZUNvdW50ID4gMFxuXG4gIGNvbnN0IGJyaWVmUmVwb3J0ID1cbiAgICAoaXNIaXN0b3JpY2FsQnJpZWZSZXBvcnRcbiAgICAgID8gaGlzdG9yaWNhbEJyaWVmUmVwb3J0UmVzcG9uc2UuZGF0YVxuICAgICAgOiBsYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlLmRhdGE/LnJlcG9ydCkgfHwgbnVsbFxuXG4gIHJldHVybiB7XG4gICAgYnJpZWZOYW1lLFxuICAgIGJyaWVmUmVwb3J0LFxuICAgIGJyaWVmQ29uZmlnLFxuICAgIGlzTGF0ZXN0QnJpZWZSZXBvcnRSZXRyeWluZyxcbiAgfVxufVxuXG5leHBvcnQgeyB1c2VCcmllZkRldGFpbHNWaWV3RGF0YSB9XG5leHBvcnQgdHlwZSB7IFVzZUJyaWVmRGV0YWlsc1ZpZXdEYXRhU3RhdGUgfVxuIl0sIm5hbWVzIjpbInVzZUJyaWVmRGV0YWlsc1ZpZXdEYXRhIiwibGF0ZXN0QnJpZWZSZXBvcnRSZXNwb25zZSIsImJyaWVmSWQiLCJyZXBvcnRJZCIsInVzZVBhcmFtcyIsImlzSGlzdG9yaWNhbEJyaWVmUmVwb3J0IiwiZGF0YSIsImJyaWVmQ29uZmlnIiwiZXJyb3IiLCJicmllZkNvbmZpZ0Vycm9yIiwidXNlQnJpZWZDb25maWdCeUlkIiwiYnJpZWZOYW1lIiwiaGlzdG9yaWNhbEJyaWVmUmVwb3J0UmVzcG9uc2UiLCJ1c2VIaXN0b3JpY2FsQnJpZWZSZXBvcnQiLCJpZCIsInVzZUxhdGVzdEJyaWVmUmVwb3J0IiwidXNlQnJpZWZSZXBvcnRMb2FkRXJyb3IiLCJpc0xhdGVzdEJyaWVmUmVwb3J0UmV0cnlpbmciLCJpc1BlbmRpbmciLCJmYWlsdXJlQ291bnQiLCJicmllZlJlcG9ydCIsInJlcG9ydCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBd0RTQTs7O2VBQUFBOzs7Z0NBeERpQjt1QkFPbkI7eUNBQ2lDO0FBU3hDLE1BQU1BLDBCQUEwQjtRQTZCeEJDO0lBNUJOLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsSUFBQUEseUJBQVM7SUFDdkMsTUFBTUMsMEJBQTBCLENBQUMsQ0FBQ0Y7SUFFbEMsTUFBTSxFQUNKRyxNQUFNQyxjQUFjLElBQUksRUFFeEJDLE9BQU9DLGdCQUFnQixFQUN4QixHQUFHQyxJQUFBQSx5QkFBa0IsRUFBQztRQUFFUjtJQUFRO0lBRWpDLE1BQU1TLFlBQVlKLHdCQUFBQSxrQ0FBQUEsWUFBYUksU0FBUztJQUV4QyxNQUFNQyxnQ0FBZ0NDLElBQUFBLCtCQUF3QixFQUFDTix3QkFBQUEsa0NBQUFBLFlBQWFPLEVBQUUsRUFBRVg7SUFDaEYsTUFBTUYsNEJBQTRCYyxJQUFBQSwyQkFBb0IsRUFBQ1Isd0JBQUFBLGtDQUFBQSxZQUFhTyxFQUFFLEVBQUUsQ0FBQ1Q7SUFFekVXLElBQUFBLGdEQUF1QixFQUFDO1FBQ3RCUDtRQUNBRztRQUNBWDtJQUNGO0lBRUEsTUFBTWdCLDhCQUNKLENBQUNaLDJCQUNELENBQUMsQ0FBQ0osMEJBQTBCaUIsU0FBUyxJQUNyQ2pCLDBCQUEwQmtCLFlBQVksR0FBRztJQUUzQyxNQUFNQyxjQUNKLEFBQUNmLENBQUFBLDBCQUNHTyw4QkFBOEJOLElBQUksSUFDbENMLGtDQUFBQSwwQkFBMEJLLElBQUksY0FBOUJMLHNEQUFBQSxnQ0FBZ0NvQixNQUFNLEFBQUQsS0FBTTtJQUVqRCxPQUFPO1FBQ0xWO1FBQ0FTO1FBQ0FiO1FBQ0FVO0lBQ0Y7QUFDRiJ9