{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistSmartGrid/WatchlistSmartGrid.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useMemo } from \"react\"\nimport { z } from \"zod\"\nimport { CqsScopeSchema, Watchlist } from \"@rp/common/api-types\"\nimport { SummaryStatus, createChunkMap } from \"@rp/react/common/hooks\"\nimport { useWatchlistEntities } from \"@rp/react/tanstack-api/watchlist\"\nimport { Box } from \"@rp/react/web/mui/core\"\nimport { WatchlistSmartGridColumn } from \"./WatchlistSmartGridColumn\"\nimport { WatchlistSmartGridModal } from \"./WatchlistSmartGridModal\"\nimport { generateSmartGridEmptyColumn } from \"./generateSmartGridEmptyColumn\"\nimport { onSmartGridSummary } from \"./onSmartGridSummary\"\n\nexport type SmartGridRow = {\n  isError?: boolean\n  value?: string\n  isLoading: boolean\n  cqsKey: string\n  cqsName: string\n}\n\nexport type SmartGridColumn = {\n  id: string\n  title: string\n  prompt: string\n  chatId: string\n  chunkMap: ReturnType<typeof createChunkMap>[\"chunkMap\"]\n  externalMap: ReturnType<typeof createChunkMap>[\"externalMap\"]\n  status: SummaryStatus\n  rows?: Record<string, SmartGridRow>\n  scope?: z.infer<typeof CqsScopeSchema>\n  timeRange: string\n  isLoading?: boolean\n  isError?: boolean\n}\n\ntype Props = {\n  watchlist: Watchlist\n  smartGridColumns: Array<SmartGridColumn>\n  setSmartGridColumns: Dispatch<SetStateAction<Array<SmartGridColumn>>>\n  selectedColumn: SmartGridColumn | null | undefined\n  setSelectedColumn: Dispatch<SetStateAction<SmartGridColumn | null | undefined>>\n  sourceFilters: Partial<Record<string, boolean>>\n}\n\nfunction WatchlistSmartGrid({\n  watchlist,\n  smartGridColumns,\n  setSmartGridColumns,\n  selectedColumn,\n  setSelectedColumn,\n  sourceFilters,\n}: Props) {\n  const { entities } = useWatchlistEntities(watchlist.id)\n  const onSummary = useMemo(() => onSmartGridSummary(setSmartGridColumns), [setSmartGridColumns])\n\n  return (\n    <Box sx={{ position: \"relative\" }}>\n      <Box sx={{ display: \"flex\", \"& ul\": { p: 0, m: 0 }, \"& li\": { p: 0, m: 0 } }}>\n        {smartGridColumns.map((column, index) => {\n          if (column.status === \"COMPLETED\") return null\n          return (\n            <WatchlistSmartGridColumn\n              key={index}\n              onSmartGridSummary={onSummary}\n              watchlistId={watchlist.id}\n              watchlistName={watchlist.name}\n              chatId={column.chatId}\n              prompt={column.prompt}\n              scope={column.scope}\n              title={column.title}\n              timeRange={column.timeRange}\n              id={column.id}\n              entities={entities}\n              onChatId={(id, chatId) => {\n                setSmartGridColumns(prev => {\n                  const newColumns = [...prev]\n                  const index = newColumns.findIndex(c => c.id === id)\n                  if (newColumns[index]) {\n                    newColumns[index] = {\n                      ...newColumns[index],\n                      chatId,\n                    }\n                  }\n                  return newColumns\n                })\n              }}\n            />\n          )\n        })}\n      </Box>\n      {selectedColumn !== undefined && (\n        <WatchlistSmartGridModal\n          onAccept={async ({ title, prompt, scope, column, timeRange }) => {\n            if (column) {\n              setSmartGridColumns(prev => {\n                const newColumns = [...prev]\n                const index = newColumns.findIndex(c => c.chatId === column.chatId)\n                if (newColumns[index]) {\n                  newColumns[index] = generateSmartGridEmptyColumn({\n                    id: newColumns[index].id,\n                    title,\n                    prompt,\n                    scope,\n                    timeRange,\n                    entities,\n                  })\n                }\n                return newColumns\n              })\n            } else {\n              setSmartGridColumns(prev => {\n                const newColumns = [...prev]\n                newColumns.push(\n                  generateSmartGridEmptyColumn({\n                    title,\n                    prompt,\n                    scope,\n                    entities,\n                    timeRange,\n                  }),\n                )\n                return newColumns\n              })\n            }\n          }}\n          open={selectedColumn}\n          setOpen={setSelectedColumn}\n          sourceFilters={sourceFilters}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport { WatchlistSmartGrid }\n"],"names":["WatchlistSmartGrid","watchlist","smartGridColumns","setSmartGridColumns","selectedColumn","setSelectedColumn","sourceFilters","entities","useWatchlistEntities","id","onSummary","useMemo","onSmartGridSummary","Box","sx","position","display","p","m","map","column","index","status","WatchlistSmartGridColumn","watchlistId","watchlistName","name","chatId","prompt","scope","title","timeRange","onChatId","prev","newColumns","findIndex","c","undefined","WatchlistSmartGridModal","onAccept","generateSmartGridEmptyColumn","push","open","setOpen"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqISA;;;eAAAA;;;;uBArIyC;2BAIb;sBACjB;0CACqB;yCACD;8CACK;oCACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCnC,SAASA,mBAAmB,EAC1BC,SAAS,EACTC,gBAAgB,EAChBC,mBAAmB,EACnBC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACP;IACN,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,+BAAoB,EAACP,UAAUQ,EAAE;IACtD,MAAMC,YAAYC,IAAAA,cAAO,EAAC,IAAMC,IAAAA,sCAAkB,EAACT,sBAAsB;QAACA;KAAoB;IAE9F,qBACE,sBAACU,SAAG;QAACC,IAAI;YAAEC,UAAU;QAAW;;0BAC9B,qBAACF,SAAG;gBAACC,IAAI;oBAAEE,SAAS;oBAAQ,QAAQ;wBAAEC,GAAG;wBAAGC,GAAG;oBAAE;oBAAG,QAAQ;wBAAED,GAAG;wBAAGC,GAAG;oBAAE;gBAAE;0BACxEhB,iBAAiBiB,GAAG,CAAC,CAACC,QAAQC;oBAC7B,IAAID,OAAOE,MAAM,KAAK,aAAa,OAAO;oBAC1C,qBACE,qBAACC,kDAAwB;wBAEvBX,oBAAoBF;wBACpBc,aAAavB,UAAUQ,EAAE;wBACzBgB,eAAexB,UAAUyB,IAAI;wBAC7BC,QAAQP,OAAOO,MAAM;wBACrBC,QAAQR,OAAOQ,MAAM;wBACrBC,OAAOT,OAAOS,KAAK;wBACnBC,OAAOV,OAAOU,KAAK;wBACnBC,WAAWX,OAAOW,SAAS;wBAC3BtB,IAAIW,OAAOX,EAAE;wBACbF,UAAUA;wBACVyB,UAAU,CAACvB,IAAIkB;4BACbxB,oBAAoB8B,CAAAA;gCAClB,MAAMC,aAAa;uCAAID;iCAAK;gCAC5B,MAAMZ,QAAQa,WAAWC,SAAS,CAACC,CAAAA,IAAKA,EAAE3B,EAAE,KAAKA;gCACjD,IAAIyB,UAAU,CAACb,MAAM,EAAE;oCACrBa,UAAU,CAACb,MAAM,GAAG,wCACfa,UAAU,CAACb,MAAM;wCACpBM;;gCAEJ;gCACA,OAAOO;4BACT;wBACF;uBAvBKb;gBA0BX;;YAEDjB,mBAAmBiC,2BAClB,qBAACC,gDAAuB;gBACtBC,UAAU,OAAO,EAAET,KAAK,EAAEF,MAAM,EAAEC,KAAK,EAAET,MAAM,EAAEW,SAAS,EAAE;oBAC1D,IAAIX,QAAQ;wBACVjB,oBAAoB8B,CAAAA;4BAClB,MAAMC,aAAa;mCAAID;6BAAK;4BAC5B,MAAMZ,QAAQa,WAAWC,SAAS,CAACC,CAAAA,IAAKA,EAAET,MAAM,KAAKP,OAAOO,MAAM;4BAClE,IAAIO,UAAU,CAACb,MAAM,EAAE;gCACrBa,UAAU,CAACb,MAAM,GAAGmB,IAAAA,0DAA4B,EAAC;oCAC/C/B,IAAIyB,UAAU,CAACb,MAAM,CAACZ,EAAE;oCACxBqB;oCACAF;oCACAC;oCACAE;oCACAxB;gCACF;4BACF;4BACA,OAAO2B;wBACT;oBACF,OAAO;wBACL/B,oBAAoB8B,CAAAA;4BAClB,MAAMC,aAAa;mCAAID;6BAAK;4BAC5BC,WAAWO,IAAI,CACbD,IAAAA,0DAA4B,EAAC;gCAC3BV;gCACAF;gCACAC;gCACAtB;gCACAwB;4BACF;4BAEF,OAAOG;wBACT;oBACF;gBACF;gBACAQ,MAAMtC;gBACNuC,SAAStC;gBACTC,eAAeA;;;;AAKzB"}