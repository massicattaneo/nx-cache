144af8a18d7c4afdde41d613e866c3b3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistSmartGrid", {
    enumerable: true,
    get: function() {
        return WatchlistSmartGrid;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _core = require("@rp/react/web/mui/core");
const _WatchlistSmartGridColumn = require("./WatchlistSmartGridColumn");
const _WatchlistSmartGridModal = require("./WatchlistSmartGridModal");
const _generateSmartGridEmptyColumn = require("./generateSmartGridEmptyColumn");
const _onSmartGridSummary = require("./onSmartGridSummary");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function WatchlistSmartGrid({ watchlist, smartGridColumns, setSmartGridColumns, selectedColumn, setSelectedColumn, sourceFilters }) {
    const { entities } = (0, _watchlist.useWatchlistEntities)(watchlist.id);
    const onSummary = (0, _react.useMemo)(()=>(0, _onSmartGridSummary.onSmartGridSummary)(setSmartGridColumns), [
        setSmartGridColumns
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            position: "relative"
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    display: "flex",
                    "& ul": {
                        p: 0,
                        m: 0
                    },
                    "& li": {
                        p: 0,
                        m: 0
                    }
                },
                children: smartGridColumns.map((column, index)=>{
                    if (column.status === "COMPLETED") return null;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistSmartGridColumn.WatchlistSmartGridColumn, {
                        onSmartGridSummary: onSummary,
                        watchlistId: watchlist.id,
                        watchlistName: watchlist.name,
                        chatId: column.chatId,
                        prompt: column.prompt,
                        scope: column.scope,
                        title: column.title,
                        timeRange: column.timeRange,
                        id: column.id,
                        entities: entities,
                        onChatId: (id, chatId)=>{
                            setSmartGridColumns((prev)=>{
                                const newColumns = [
                                    ...prev
                                ];
                                const index = newColumns.findIndex((c)=>c.id === id);
                                if (newColumns[index]) {
                                    newColumns[index] = _object_spread_props(_object_spread({}, newColumns[index]), {
                                        chatId
                                    });
                                }
                                return newColumns;
                            });
                        }
                    }, index);
                })
            }),
            selectedColumn !== undefined && /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistSmartGridModal.WatchlistSmartGridModal, {
                onAccept: async ({ title, prompt, scope, column, timeRange })=>{
                    if (column) {
                        setSmartGridColumns((prev)=>{
                            const newColumns = [
                                ...prev
                            ];
                            const index = newColumns.findIndex((c)=>c.chatId === column.chatId);
                            if (newColumns[index]) {
                                newColumns[index] = (0, _generateSmartGridEmptyColumn.generateSmartGridEmptyColumn)({
                                    id: newColumns[index].id,
                                    title,
                                    prompt,
                                    scope,
                                    timeRange,
                                    entities
                                });
                            }
                            return newColumns;
                        });
                    } else {
                        setSmartGridColumns((prev)=>{
                            const newColumns = [
                                ...prev
                            ];
                            newColumns.push((0, _generateSmartGridEmptyColumn.generateSmartGridEmptyColumn)({
                                title,
                                prompt,
                                scope,
                                entities,
                                timeRange
                            }));
                            return newColumns;
                        });
                    }
                },
                open: selectedColumn,
                setOpen: setSelectedColumn,
                sourceFilters: sourceFilters
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,