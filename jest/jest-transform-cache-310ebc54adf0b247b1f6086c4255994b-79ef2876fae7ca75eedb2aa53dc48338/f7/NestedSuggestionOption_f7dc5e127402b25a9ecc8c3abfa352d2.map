{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/search-autosuggest-input/src/lib/SuggestionInput/NestedSuggestionOption.tsx"],"sourcesContent":["import match from \"autosuggest-highlight/match\"\nimport parse from \"autosuggest-highlight/parse\"\nimport { EnhancedSuggestion } from \"@rp/react/tanstack-api/suggestion\"\nimport { EllipsisTooltip } from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { Box } from \"@rp/react/web/mui/core\"\nimport { OptionProps } from \"../UnifiedSearch/UnifiedSearch.types\"\nimport { SuggestionImage } from \"./SuggestionImage\"\nimport {\n  HightLightText,\n  SubsidiariesToggle,\n  SuggestionLabel,\n  SuggestionLeftStyled,\n  SuggestionOptionStyled,\n  SuggestionTickerTextStyled,\n  SuggestionTypeTextStyled,\n  labelTextStyle,\n} from \"./SuggestionOption.styles\"\n\ntype NestedSuggestionProps = {\n  id: string\n  label: string\n  subsidiaries: Array<EnhancedSuggestion>\n  ticker?: string\n  showTickers?: boolean\n  highlightValue: string\n  typeDesc?: string\n  entityType?: string\n  type: string | number\n  altName?: string\n  optionProps: OptionProps\n  toggleSubsidiariesDisplay: (id: string) => void\n  metadata4?: string\n}\n\nconst NestedSuggestionOption = ({\n  id,\n  label,\n  ticker,\n  showTickers,\n  highlightValue,\n  typeDesc,\n  entityType,\n  type,\n  altName,\n  optionProps,\n  subsidiaries,\n  toggleSubsidiariesDisplay,\n  metadata4,\n}: NestedSuggestionProps) => {\n  const displayLabel = altName || label\n  const matches = match(displayLabel, highlightValue)\n  const parts = parse(displayLabel, matches)\n  const { isMobile } = useDeviceInfo()\n\n  const onToggleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation()\n    event.preventDefault()\n    toggleSubsidiariesDisplay(id)\n  }\n\n  return (\n    <li {...optionProps}>\n      <SuggestionOptionStyled key={displayLabel} data-testid=\"container\">\n        <SuggestionLeftStyled>\n          <SuggestionLabel>\n            <div>\n              <SuggestionImage\n                metadata4={metadata4}\n                displayLabel={displayLabel}\n                type={type.toString()}\n                category={entityType}\n                entityType={entityType}\n              />\n              <EllipsisTooltip\n                tooltipText={displayLabel}\n                typographyProps={{ style: labelTextStyle, component: \"span\" }}\n              >\n                {parts.map((part, i) => (\n                  <HightLightText component=\"span\" key={i} highlight={part.highlight}>\n                    {part.text}\n                  </HightLightText>\n                ))}\n              </EllipsisTooltip>\n              {showTickers && ticker ? (\n                <SuggestionTickerTextStyled component=\"span\" data-testid=\"suggestion-ticker\">\n                  {ticker}\n                </SuggestionTickerTextStyled>\n              ) : null}\n              {isMobile ? null : (\n                <SubsidiariesToggle onClick={onToggleClick}>\n                  +{subsidiaries.length} related\n                </SubsidiariesToggle>\n              )}\n            </div>\n          </SuggestionLabel>\n        </SuggestionLeftStyled>\n        <SuggestionTypeTextStyled>{typeDesc}</SuggestionTypeTextStyled>\n      </SuggestionOptionStyled>\n      {isMobile ? (\n        <Box sx={{ pl: 5 }}>\n          <SubsidiariesToggle onClick={onToggleClick}>\n            +{subsidiaries.length} related\n          </SubsidiariesToggle>\n        </Box>\n      ) : null}\n    </li>\n  )\n}\n\nexport { NestedSuggestionOption }\n"],"names":["NestedSuggestionOption","id","label","ticker","showTickers","highlightValue","typeDesc","entityType","type","altName","optionProps","subsidiaries","toggleSubsidiariesDisplay","metadata4","displayLabel","matches","match","parts","parse","isMobile","useDeviceInfo","onToggleClick","event","stopPropagation","preventDefault","li","SuggestionOptionStyled","data-testid","SuggestionLeftStyled","SuggestionLabel","div","SuggestionImage","toString","category","EllipsisTooltip","tooltipText","typographyProps","style","labelTextStyle","component","map","part","i","HightLightText","highlight","text","SuggestionTickerTextStyled","SubsidiariesToggle","onClick","length","SuggestionTypeTextStyled","Box","sx","pl"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA8GSA;;;eAAAA;;;;8DA9GS;8DACA;qCAEc;uBACF;sBACV;iCAEY;wCAUzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBP,MAAMA,yBAAyB,CAAC,EAC9BC,EAAE,EACFC,KAAK,EACLC,MAAM,EACNC,WAAW,EACXC,cAAc,EACdC,QAAQ,EACRC,UAAU,EACVC,IAAI,EACJC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,yBAAyB,EACzBC,SAAS,EACa;IACtB,MAAMC,eAAeL,WAAWP;IAChC,MAAMa,UAAUC,IAAAA,cAAK,EAACF,cAAcT;IACpC,MAAMY,QAAQC,IAAAA,cAAK,EAACJ,cAAcC;IAClC,MAAM,EAAEI,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAElC,MAAMC,gBAAgB,CAACC;QACrBA,MAAMC,eAAe;QACrBD,MAAME,cAAc;QACpBZ,0BAA0BX;IAC5B;IAEA,qBACE,sBAACwB,8CAAOf;;0BACN,sBAACgB,8CAAsB;gBAAoBC,eAAY;;kCACrD,qBAACC,4CAAoB;kCACnB,cAAA,qBAACC,uCAAe;sCACd,cAAA,sBAACC;;kDACC,qBAACC,gCAAe;wCACdlB,WAAWA;wCACXC,cAAcA;wCACdN,MAAMA,KAAKwB,QAAQ;wCACnBC,UAAU1B;wCACVA,YAAYA;;kDAEd,qBAAC2B,oCAAe;wCACdC,aAAarB;wCACbsB,iBAAiB;4CAAEC,OAAOC,sCAAc;4CAAEC,WAAW;wCAAO;kDAE3DtB,MAAMuB,GAAG,CAAC,CAACC,MAAMC,kBAChB,qBAACC,sCAAc;gDAACJ,WAAU;gDAAeK,WAAWH,KAAKG,SAAS;0DAC/DH,KAAKI,IAAI;+CAD0BH;;oCAKzCtC,eAAeD,uBACd,qBAAC2C,kDAA0B;wCAACP,WAAU;wCAAOZ,eAAY;kDACtDxB;yCAED;oCACHgB,WAAW,qBACV,sBAAC4B,0CAAkB;wCAACC,SAAS3B;;4CAAe;4CACxCV,aAAasC,MAAM;4CAAC;;;;;;;kCAMhC,qBAACC,gDAAwB;kCAAE5C;;;eAlCAQ;YAoC5BK,yBACC,qBAACgC,SAAG;gBAACC,IAAI;oBAAEC,IAAI;gBAAE;0BACf,cAAA,sBAACN,0CAAkB;oBAACC,SAAS3B;;wBAAe;wBACxCV,aAAasC,MAAM;wBAAC;;;iBAGxB;;;AAGV"}