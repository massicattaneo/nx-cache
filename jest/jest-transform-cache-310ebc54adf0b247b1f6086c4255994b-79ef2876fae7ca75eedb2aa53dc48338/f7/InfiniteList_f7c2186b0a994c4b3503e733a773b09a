5a9922fd1f33ed54d6c9c4659bbd697b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InfiniteList", {
    enumerable: true,
    get: function() {
        return InfiniteList;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _material = require("@mui/material");
const _InfiniteListItem = require("./InfiniteListItem");
function InfiniteList({ renderItem, items, fetchNextPage, loading = false, hasMore = false, rootMargin, loaderSize = 24, initialElements = 1, fragment = false, virtualized = false, state, setState, root = window.document, pageSize = 1, generateAriaLabel }) {
    const [internalState, setInternalState] = (0, _react.useState)(initialElements);
    const stateNum = state !== undefined ? state : internalState;
    const setStateNum = setState !== undefined ? setState : setInternalState;
    const observer = (0, _react.useRef)(undefined);
    (0, _react.useEffect)(()=>{
        if (state !== undefined && setState === undefined || state === undefined && setState !== undefined) {
            // eslint-disable-next-line no-console
            console.log(`%c INIFINITE LIST `, "background: #e76666; color: #222; border-radius: 5px; ", "'state' and 'setState' should be used together");
        }
    }, [
        setState,
        state
    ]);
    (0, _react.useEffect)(()=>{
        if (stateNum > items.length && hasMore && !loading) {
            fetchNextPage === null || fetchNextPage === void 0 ? void 0 : fetchNextPage();
        }
    }, [
        fetchNextPage,
        hasMore,
        items.length,
        loading,
        stateNum
    ]);
    const intersectItem = (0, _react.useCallback)((node)=>{
        if (observer.current) {
            observer.current.disconnect();
        }
        observer.current = new IntersectionObserver((entries)=>{
            if (entries.some((entry)=>entry.isIntersecting)) {
                setStateNum((prev)=>{
                    return prev + pageSize;
                });
            }
        }, {
            rootMargin,
            root
        });
        if (node) {
            observer.current.observe(node);
        }
    }, [
        rootMargin,
        root,
        setStateNum,
        pageSize
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            items.slice(0, stateNum).map((item, index)=>{
                const intersect = index === stateNum - 1 ? intersectItem : undefined;
                return fragment ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
                    children: renderItem(item, index, intersect)
                }, item.id) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_InfiniteListItem.InfiniteListItem, {
                    ariaLabel: generateAriaLabel === null || generateAriaLabel === void 0 ? void 0 : generateAriaLabel(item),
                    index: index,
                    item: item,
                    renderItem: renderItem,
                    intersect: intersect,
                    virtualized: virtualized
                }, `${item.id}-${index}`);
            }),
            loading || hasMore && stateNum <= items.length ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.CircularProgress, {
                size: loaderSize,
                "data-testid": "loader-spinner",
                sx: {
                    display: "flex",
                    margin: "20px auto"
                }
            }) : null
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,