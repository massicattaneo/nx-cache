{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/InfiniteList/InfiniteList.tsx"],"sourcesContent":["import { Dispatch, Fragment, SetStateAction, useCallback, useEffect, useRef, useState } from \"react\"\nimport { CircularProgress } from \"@mui/material\"\nimport { InfiniteListItem } from \"./InfiniteListItem\"\n\ntype Props<ItemType> = {\n  items: Array<ItemType>\n  renderItem: (\n    item: ItemType,\n    index: number,\n    intersect: (<ElementType extends HTMLElement>(node: ElementType) => void) | undefined,\n  ) => React.ReactNode\n  fetchNextPage?: () => void\n  loading?: boolean\n  hasMore?: boolean\n  rootMargin?: string\n  loaderSize?: string | number\n  initialElements?: number\n  fragment?: boolean\n  virtualized?: boolean\n  state?: number\n  setState?: Dispatch<SetStateAction<number>>\n  root?: Element | Document | null\n  pageSize?: number\n  generateAriaLabel?: (item: ItemType) => string\n}\n\nfunction InfiniteList<ItemType extends { id: string }>({\n  renderItem,\n  items,\n  fetchNextPage,\n  loading = false,\n  hasMore = false,\n  rootMargin,\n  loaderSize = 24,\n  initialElements = 1,\n  fragment = false,\n  virtualized = false,\n  state,\n  setState,\n  root = window.document,\n  pageSize = 1,\n  generateAriaLabel,\n}: Props<ItemType>) {\n  const [internalState, setInternalState] = useState(initialElements)\n  const stateNum = state !== undefined ? state : internalState\n  const setStateNum = setState !== undefined ? setState : setInternalState\n  const observer = useRef<IntersectionObserver>(undefined)\n\n  useEffect(() => {\n    if (\n      (state !== undefined && setState === undefined) ||\n      (state === undefined && setState !== undefined)\n    ) {\n      // eslint-disable-next-line no-console\n      console.log(\n        `%c INIFINITE LIST `,\n        \"background: #e76666; color: #222; border-radius: 5px; \",\n        \"'state' and 'setState' should be used together\",\n      )\n    }\n  }, [setState, state])\n\n  useEffect(() => {\n    if (stateNum > items.length && hasMore && !loading) {\n      fetchNextPage?.()\n    }\n  }, [fetchNextPage, hasMore, items.length, loading, stateNum])\n\n  const intersectItem = useCallback(\n    <ElementType extends HTMLElement>(node: ElementType) => {\n      if (observer.current) {\n        observer.current.disconnect()\n      }\n      observer.current = new IntersectionObserver(\n        entries => {\n          if (entries.some(entry => entry.isIntersecting)) {\n            setStateNum(prev => {\n              return prev + pageSize\n            })\n          }\n        },\n        { rootMargin, root },\n      )\n      if (node) {\n        observer.current.observe(node)\n      }\n    },\n    [rootMargin, root, setStateNum, pageSize],\n  )\n\n  return (\n    <>\n      {items.slice(0, stateNum).map((item, index) => {\n        const intersect = index === stateNum - 1 ? intersectItem : undefined\n        return fragment ? (\n          <Fragment key={item.id}>{renderItem(item, index, intersect)}</Fragment>\n        ) : (\n          <InfiniteListItem\n            ariaLabel={generateAriaLabel?.(item)}\n            index={index}\n            key={`${item.id}-${index}`}\n            item={item}\n            renderItem={renderItem}\n            intersect={intersect}\n            virtualized={virtualized}\n          />\n        )\n      })}\n      {loading || (hasMore && stateNum <= items.length) ? (\n        <CircularProgress\n          size={loaderSize}\n          data-testid=\"loader-spinner\"\n          sx={{ display: \"flex\", margin: \"20px auto\" }}\n        />\n      ) : null}\n    </>\n  )\n}\n\nexport { InfiniteList }\n"],"names":["InfiniteList","renderItem","items","fetchNextPage","loading","hasMore","rootMargin","loaderSize","initialElements","fragment","virtualized","state","setState","root","window","document","pageSize","generateAriaLabel","internalState","setInternalState","useState","stateNum","undefined","setStateNum","observer","useRef","useEffect","console","log","length","intersectItem","useCallback","node","current","disconnect","IntersectionObserver","entries","some","entry","isIntersecting","prev","observe","slice","map","item","index","intersect","Fragment","id","InfiniteListItem","ariaLabel","CircularProgress","size","data-testid","sx","display","margin"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAuHSA;;;eAAAA;;;;uBAvHoF;0BAC5D;kCACA;AAwBjC,SAASA,aAA8C,EACrDC,UAAU,EACVC,KAAK,EACLC,aAAa,EACbC,UAAU,KAAK,EACfC,UAAU,KAAK,EACfC,UAAU,EACVC,aAAa,EAAE,EACfC,kBAAkB,CAAC,EACnBC,WAAW,KAAK,EAChBC,cAAc,KAAK,EACnBC,KAAK,EACLC,QAAQ,EACRC,OAAOC,OAAOC,QAAQ,EACtBC,WAAW,CAAC,EACZC,iBAAiB,EACD;IAChB,MAAM,CAACC,eAAeC,iBAAiB,GAAGC,IAAAA,eAAQ,EAACZ;IACnD,MAAMa,WAAWV,UAAUW,YAAYX,QAAQO;IAC/C,MAAMK,cAAcX,aAAaU,YAAYV,WAAWO;IACxD,MAAMK,WAAWC,IAAAA,aAAM,EAAuBH;IAE9CI,IAAAA,gBAAS,EAAC;QACR,IACE,AAACf,UAAUW,aAAaV,aAAaU,aACpCX,UAAUW,aAAaV,aAAaU,WACrC;YACA,sCAAsC;YACtCK,QAAQC,GAAG,CACT,CAAC,kBAAkB,CAAC,EACpB,0DACA;QAEJ;IACF,GAAG;QAAChB;QAAUD;KAAM;IAEpBe,IAAAA,gBAAS,EAAC;QACR,IAAIL,WAAWnB,MAAM2B,MAAM,IAAIxB,WAAW,CAACD,SAAS;YAClDD,0BAAAA,oCAAAA;QACF;IACF,GAAG;QAACA;QAAeE;QAASH,MAAM2B,MAAM;QAAEzB;QAASiB;KAAS;IAE5D,MAAMS,gBAAgBC,IAAAA,kBAAW,EAC/B,CAAkCC;QAChC,IAAIR,SAASS,OAAO,EAAE;YACpBT,SAASS,OAAO,CAACC,UAAU;QAC7B;QACAV,SAASS,OAAO,GAAG,IAAIE,qBACrBC,CAAAA;YACE,IAAIA,QAAQC,IAAI,CAACC,CAAAA,QAASA,MAAMC,cAAc,GAAG;gBAC/ChB,YAAYiB,CAAAA;oBACV,OAAOA,OAAOxB;gBAChB;YACF;QACF,GACA;YAAEV;YAAYO;QAAK;QAErB,IAAImB,MAAM;YACRR,SAASS,OAAO,CAACQ,OAAO,CAACT;QAC3B;IACF,GACA;QAAC1B;QAAYO;QAAMU;QAAaP;KAAS;IAG3C,qBACE;;YACGd,MAAMwC,KAAK,CAAC,GAAGrB,UAAUsB,GAAG,CAAC,CAACC,MAAMC;gBACnC,MAAMC,YAAYD,UAAUxB,WAAW,IAAIS,gBAAgBR;gBAC3D,OAAOb,yBACL,qBAACsC,eAAQ;8BAAgB9C,WAAW2C,MAAMC,OAAOC;mBAAlCF,KAAKI,EAAE,kBAEtB,qBAACC,kCAAgB;oBACfC,SAAS,EAAEjC,8BAAAA,wCAAAA,kBAAoB2B;oBAC/BC,OAAOA;oBAEPD,MAAMA;oBACN3C,YAAYA;oBACZ6C,WAAWA;oBACXpC,aAAaA;mBAJR,CAAC,EAAEkC,KAAKI,EAAE,CAAC,CAAC,EAAEH,MAAM,CAAC;YAOhC;YACCzC,WAAYC,WAAWgB,YAAYnB,MAAM2B,MAAM,iBAC9C,qBAACsB,0BAAgB;gBACfC,MAAM7C;gBACN8C,eAAY;gBACZC,IAAI;oBAAEC,SAAS;oBAAQC,QAAQ;gBAAY;iBAE3C;;;AAGV"}