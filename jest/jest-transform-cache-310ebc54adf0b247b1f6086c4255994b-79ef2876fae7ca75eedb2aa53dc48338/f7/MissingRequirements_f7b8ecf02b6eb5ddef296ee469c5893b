16e9af2b80ebea89e5fa1554ddedaca1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MissingRequirements", {
    enumerable: true,
    get: function() {
        return MissingRequirements;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reacthookform = require("react-hook-form");
const _zod = require("zod");
const _clerkreact = require("@clerk/clerk-react");
const _zod1 = require("@hookform/resolvers/zod");
const _material = require("@mui/material");
const _adapters = require("@rp/adapters");
const _utils = require("@rp/common/utils");
const _signup = require("@rp/react/common/sign-up");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _utils1 = require("@rp/react/web/common/vendors/utils");
const _PasswordStephelpers = require("./PasswordStep/PasswordStep.helpers");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const FormSchemaWithoutPassword = _zod.z.object({
    first: _zod.z.string().min(1, "First name is required.").max(150, "First name can be at most 150 characters."),
    last: _zod.z.string().min(1, "Last name is required.").max(150, "Last name can be at most 150 characters.")
});
const FormSchemaWithPassword = _zod.z.object({
    first: _zod.z.string().min(1, "First name is required.").max(150, "First name can be at most 150 characters."),
    last: _zod.z.string().min(1, "Last name is required.").max(150, "Last name can be at most 150 characters."),
    secret: _zod.z.string().refine((value)=>(0, _signup.checkLength)(value), {
        message: "Password must be at least 12 characters"
    }).refine((value)=>(0, _signup.containsNumbers)(value), {
        message: "Password must contain at least one number"
    }).refine((value)=>(0, _signup.containsUpperLower)(value), {
        message: "Password must contain at least one uppercase and one lowercase letter"
    }).refine((value)=>(0, _signup.containsSpecial)(value), {
        message: "Password must contain at least one special character"
    })
});
const MissingRequirements = ({ onComplete = ()=>{} })=>{
    var _formState_errors_first, _formState_errors_last, _formState_errors_secret;
    const { isLoaded, signUp, setActive } = (0, _clerkreact.useSignUp)();
    const { enqueueError } = (0, _providers.useSnackbar)();
    const unsafeMetadata = (0, _hooks.useClerkSignUpUnsafeMetadata)();
    const passwordRequired = signUp === null || signUp === void 0 ? void 0 : signUp.missingFields.includes("password");
    const schemaType = passwordRequired ? FormSchemaWithPassword : FormSchemaWithoutPassword;
    const { register, watch, formState, handleSubmit } = (0, _reacthookform.useForm)(passwordRequired ? {
        resolver: (0, _zod1.zodResolver)(schemaType),
        defaultValues: {
            first: (signUp === null || signUp === void 0 ? void 0 : signUp.firstName) || "",
            last: (signUp === null || signUp === void 0 ? void 0 : signUp.lastName) || "",
            secret: ""
        },
        mode: "all"
    } : {
        resolver: (0, _zod1.zodResolver)(schemaType),
        defaultValues: {
            first: (signUp === null || signUp === void 0 ? void 0 : signUp.firstName) || "",
            last: (signUp === null || signUp === void 0 ? void 0 : signUp.lastName) || ""
        },
        mode: "all"
    });
    const firstNameRequired = (signUp === null || signUp === void 0 ? void 0 : signUp.firstName) === null || (signUp === null || signUp === void 0 ? void 0 : signUp.firstName) === undefined;
    const lastNameRequired = (signUp === null || signUp === void 0 ? void 0 : signUp.lastName) === null || (signUp === null || signUp === void 0 ? void 0 : signUp.lastName) === undefined;
    const lastNameWatch = watch("last");
    const firstNameWatch = watch("first");
    const secretWatch = watch("secret");
    const handleSubmitForm = async (values)=>{
        if (!isLoaded) {
            return;
        }
        try {
            await signUp.update({
                firstName: values.first,
                lastName: values.last
            });
            if (signUp.status === "complete") {
                setActive({
                    session: signUp.createdSessionId
                });
                window.location.replace(_adapters.adapters.location.getAbsoluteBaseUrl());
            }
        } catch (error) {
            (0, _utils1.reportError)(error, {}, ()=>{});
            enqueueError((0, _utils.displayError)(error));
            return;
        }
    };
    const handleSubmitFormWithPassword = async (values)=>{
        if (!isLoaded) {
            return;
        }
        try {
            await signUp.update((0, _PasswordStephelpers.getSignUpUpdateValues)(values, unsafeMetadata));
            // Send the user an email with the verification code
            await signUp.prepareEmailAddressVerification({
                strategy: "email_code"
            });
        } catch (error) {
            (0, _utils1.reportError)(error, {}, ()=>{});
            enqueueError((0, _utils.displayError)(error));
            return;
        }
        onComplete();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.LoginContainer, {
        pageTitle: "Confirm your details",
        title: "Confirm your details",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
            id: "MissingRequirementsForm",
            autoComplete: "off",
            onSubmit: handleSubmit(passwordRequired ? handleSubmitFormWithPassword : handleSubmitForm),
            style: {
                width: "100%",
                display: "flex",
                flexDirection: "column",
                alignItems: "center"
            },
            children: [
                firstNameRequired && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    style: {
                        width: "100%"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.InputLabel, {
                            htmlFor: "firstName",
                            children: "First Name"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.OutlinedInput, _object_spread({
                            id: "firstName",
                            autoFocus: true,
                            placeholder: "Write your first name",
                            style: {
                                width: "100%"
                            },
                            error: !!formState.errors.first,
                            inputProps: {
                                autoComplete: "off"
                            }
                        }, register("first"))),
                        formState.errors.first && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.FormHelperText, {
                            error: true,
                            children: (_formState_errors_first = formState.errors.first) === null || _formState_errors_first === void 0 ? void 0 : _formState_errors_first.message
                        })
                    ]
                }),
                lastNameRequired && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    style: {
                        width: "100%"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.InputLabel, {
                            htmlFor: "lastName",
                            children: "Last Name"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.OutlinedInput, _object_spread_props(_object_spread({
                            id: "lastName",
                            placeholder: "Write your last name",
                            style: {
                                width: "100%"
                            },
                            inputProps: {
                                className: "keeper-ignore",
                                autoComplete: "off"
                            }
                        }, register("last")), {
                            error: !!formState.errors.last
                        })),
                        formState.errors.last && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.FormHelperText, {
                            error: true,
                            children: (_formState_errors_last = formState.errors.last) === null || _formState_errors_last === void 0 ? void 0 : _formState_errors_last.message
                        })
                    ]
                }),
                passwordRequired && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    style: {
                        width: "100%"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.InputLabel, {
                            htmlFor: "password",
                            children: "Password"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.PasswordInput, _object_spread({
                            id: "password",
                            placeholder: "Choose a password",
                            style: {
                                width: "100%"
                            },
                            error: !!formState.errors.secret,
                            inputProps: {
                                className: "keeper-ignore",
                                autoComplete: "off"
                            }
                        }, register("secret"))),
                        formState.errors.secret && /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.FormHelperText, {
                            error: true,
                            children: (_formState_errors_secret = formState.errors.secret) === null || _formState_errors_secret === void 0 ? void 0 : _formState_errors_secret.message
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Button, {
                    disabled: !(firstNameWatch && firstNameWatch.length > 1 && lastNameWatch && lastNameWatch.length > 1 && (secretWatch || !passwordRequired) || isLoaded),
                    type: "submit",
                    variant: "contained",
                    sx: {
                        marginTop: 3,
                        width: "100%"
                    },
                    children: "Create Account"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Button, {
                    variant: "text",
                    sx: {
                        marginTop: 1,
                        width: "100%"
                    },
                    onClick: ()=>{
                        signUp === null || signUp === void 0 ? void 0 : signUp.create({});
                        window.location.replace(_adapters.adapters.location.getAbsoluteBaseUrl());
                    },
                    children: "Cancel"
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,