{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/SignUp/Steps/MissingRequirements.tsx"],"sourcesContent":["import { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { useSignUp } from \"@clerk/clerk-react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Button, FormHelperText, InputLabel, OutlinedInput } from \"@mui/material\"\nimport { adapters } from \"@rp/adapters\"\nimport { displayError } from \"@rp/common/utils\"\nimport {\n  checkLength,\n  containsNumbers,\n  containsSpecial,\n  containsUpperLower,\n} from \"@rp/react/common/sign-up\"\nimport { PasswordInput } from \"@rp/react/web/common/base-components\"\nimport { LoginContainer } from \"@rp/react/web/common/composite-components\"\nimport { useClerkSignUpUnsafeMetadata } from \"@rp/react/web/common/hooks\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport { reportError } from \"@rp/react/web/common/vendors/utils\"\nimport { getSignUpUpdateValues } from \"./PasswordStep/PasswordStep.helpers\"\n\nconst FormSchemaWithoutPassword = z.object({\n  first: z\n    .string()\n    .min(1, \"First name is required.\")\n    .max(150, \"First name can be at most 150 characters.\"),\n  last: z\n    .string()\n    .min(1, \"Last name is required.\")\n    .max(150, \"Last name can be at most 150 characters.\"),\n})\n\nconst FormSchemaWithPassword = z.object({\n  first: z\n    .string()\n    .min(1, \"First name is required.\")\n    .max(150, \"First name can be at most 150 characters.\"),\n  last: z\n    .string()\n    .min(1, \"Last name is required.\")\n    .max(150, \"Last name can be at most 150 characters.\"),\n  secret: z\n    .string()\n    .refine(value => checkLength(value), {\n      message: \"Password must be at least 12 characters\",\n    })\n    .refine(value => containsNumbers(value), {\n      message: \"Password must contain at least one number\",\n    })\n    .refine(value => containsUpperLower(value), {\n      message: \"Password must contain at least one uppercase and one lowercase letter\",\n    })\n    .refine(value => containsSpecial(value), {\n      message: \"Password must contain at least one special character\",\n    }),\n})\n\ntype props = { onComplete?: () => void }\n\nconst MissingRequirements = ({ onComplete = () => {} }: props) => {\n  const { isLoaded, signUp, setActive } = useSignUp()\n  const { enqueueError } = useSnackbar()\n  const unsafeMetadata = useClerkSignUpUnsafeMetadata()\n  const passwordRequired = signUp?.missingFields.includes(\"password\")\n  const schemaType = passwordRequired ? FormSchemaWithPassword : FormSchemaWithoutPassword\n  type FormValues = z.infer<typeof FormSchemaWithPassword>\n\n  const { register, watch, formState, handleSubmit } = useForm<FormValues>(\n    passwordRequired\n      ? {\n          resolver: zodResolver(schemaType),\n          defaultValues: {\n            first: signUp?.firstName || \"\",\n            last: signUp?.lastName || \"\",\n            secret: \"\",\n          },\n          mode: \"all\",\n        }\n      : {\n          resolver: zodResolver(schemaType),\n          defaultValues: {\n            first: signUp?.firstName || \"\",\n            last: signUp?.lastName || \"\",\n          },\n          mode: \"all\",\n        },\n  )\n  const firstNameRequired = signUp?.firstName === null || signUp?.firstName === undefined\n  const lastNameRequired = signUp?.lastName === null || signUp?.lastName === undefined\n\n  const lastNameWatch = watch(\"last\")\n  const firstNameWatch = watch(\"first\")\n  const secretWatch = watch(\"secret\")\n\n  const handleSubmitForm = async (values: FormValues) => {\n    if (!isLoaded) {\n      return\n    }\n\n    try {\n      await signUp.update({\n        firstName: values.first,\n        lastName: values.last,\n      })\n\n      if (signUp.status === \"complete\") {\n        setActive({ session: signUp.createdSessionId })\n        window.location.replace(adapters.location.getAbsoluteBaseUrl())\n      }\n    } catch (error: unknown) {\n      reportError(error as Error, {}, () => {})\n      enqueueError(displayError(error))\n      return\n    }\n  }\n\n  const handleSubmitFormWithPassword = async (values: FormValues) => {\n    if (!isLoaded) {\n      return\n    }\n\n    try {\n      await signUp.update(getSignUpUpdateValues(values, unsafeMetadata))\n\n      // Send the user an email with the verification code\n      await signUp.prepareEmailAddressVerification({\n        strategy: \"email_code\",\n      })\n    } catch (error: unknown) {\n      reportError(error as Error, {}, () => {})\n      enqueueError(displayError(error))\n      return\n    }\n\n    onComplete()\n  }\n\n  return (\n    <LoginContainer pageTitle=\"Confirm your details\" title=\"Confirm your details\">\n      <form\n        id=\"MissingRequirementsForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(passwordRequired ? handleSubmitFormWithPassword : handleSubmitForm)}\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        {firstNameRequired && (\n          <div style={{ width: \"100%\" }}>\n            <InputLabel htmlFor=\"firstName\">First Name</InputLabel>\n            <OutlinedInput\n              id=\"firstName\"\n              autoFocus\n              placeholder=\"Write your first name\"\n              style={{ width: \"100%\" }}\n              error={!!formState.errors.first}\n              inputProps={{\n                autoComplete: \"off\",\n              }}\n              {...register(\"first\")}\n            />\n            {formState.errors.first && (\n              <FormHelperText error>{formState.errors.first?.message}</FormHelperText>\n            )}\n          </div>\n        )}\n        {lastNameRequired && (\n          <div style={{ width: \"100%\" }}>\n            <InputLabel htmlFor=\"lastName\">Last Name</InputLabel>\n            <OutlinedInput\n              id=\"lastName\"\n              placeholder=\"Write your last name\"\n              style={{ width: \"100%\" }}\n              inputProps={{\n                className: \"keeper-ignore\",\n                autoComplete: \"off\",\n              }}\n              {...register(\"last\")}\n              error={!!formState.errors.last}\n            />\n            {formState.errors.last && (\n              <FormHelperText error>{formState.errors.last?.message}</FormHelperText>\n            )}\n          </div>\n        )}\n\n        {passwordRequired && (\n          <div style={{ width: \"100%\" }}>\n            <InputLabel htmlFor=\"password\">Password</InputLabel>\n            <PasswordInput\n              id=\"password\"\n              placeholder=\"Choose a password\"\n              style={{ width: \"100%\" }}\n              error={!!formState.errors.secret}\n              inputProps={{\n                className: \"keeper-ignore\",\n                autoComplete: \"off\",\n              }}\n              {...register(\"secret\")}\n            />\n            {formState.errors.secret && (\n              <FormHelperText error>{formState.errors.secret?.message}</FormHelperText>\n            )}\n          </div>\n        )}\n\n        <Button\n          disabled={\n            !(\n              (firstNameWatch &&\n                firstNameWatch.length > 1 &&\n                lastNameWatch &&\n                lastNameWatch.length > 1 &&\n                (secretWatch || !passwordRequired)) ||\n              isLoaded\n            )\n          }\n          type=\"submit\"\n          variant=\"contained\"\n          sx={{ marginTop: 3, width: \"100%\" }}\n        >\n          Create Account\n        </Button>\n        <Button\n          variant=\"text\"\n          sx={{ marginTop: 1, width: \"100%\" }}\n          onClick={() => {\n            signUp?.create({})\n            window.location.replace(adapters.location.getAbsoluteBaseUrl())\n          }}\n        >\n          Cancel\n        </Button>\n      </form>\n    </LoginContainer>\n  )\n}\n\nexport { MissingRequirements }\n"],"names":["MissingRequirements","FormSchemaWithoutPassword","z","object","first","string","min","max","last","FormSchemaWithPassword","secret","refine","value","checkLength","message","containsNumbers","containsUpperLower","containsSpecial","onComplete","formState","isLoaded","signUp","setActive","useSignUp","enqueueError","useSnackbar","unsafeMetadata","useClerkSignUpUnsafeMetadata","passwordRequired","missingFields","includes","schemaType","register","watch","handleSubmit","useForm","resolver","zodResolver","defaultValues","firstName","lastName","mode","firstNameRequired","undefined","lastNameRequired","lastNameWatch","firstNameWatch","secretWatch","handleSubmitForm","values","update","status","session","createdSessionId","window","location","replace","adapters","getAbsoluteBaseUrl","error","reportError","displayError","handleSubmitFormWithPassword","getSignUpUpdateValues","prepareEmailAddressVerification","strategy","LoginContainer","pageTitle","title","form","id","autoComplete","onSubmit","style","width","display","flexDirection","alignItems","div","InputLabel","htmlFor","OutlinedInput","autoFocus","placeholder","errors","inputProps","FormHelperText","className","PasswordInput","Button","disabled","length","type","variant","sx","marginTop","onClick","create"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}