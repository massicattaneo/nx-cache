3955e95a3370ae13649de9c9bca1b7ed
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useKeyboardShortcuts", {
    enumerable: true,
    get: function() {
        return useKeyboardShortcuts;
    }
});
const _react = require("react");
const useKeyboardShortcuts = (keys, callback, node = null)=>{
    const callbackRef = (0, _react.useRef)(callback);
    (0, _react.useLayoutEffect)(()=>{
        callbackRef.current = callback;
    });
    const handleKeyPress = (0, _react.useCallback)((event)=>{
        const lowerCaseKey = event.key.toLowerCase();
        if (keys.some((combination)=>{
            const parts = combination.split("+").map((part)=>part.trim().toLowerCase());
            const mainKey = parts.pop();
            if (!mainKey || lowerCaseKey !== mainKey) {
                return false;
            }
            const requiredModifiers = {
                meta: parts.includes("cmd") || parts.includes("meta"),
                ctrl: parts.includes("ctrl"),
                shift: parts.includes("shift"),
                alt: parts.includes("alt")
            };
            return event.metaKey === requiredModifiers.meta && event.ctrlKey === requiredModifiers.ctrl && event.shiftKey === requiredModifiers.shift && event.altKey === requiredModifiers.alt;
        })) {
            callbackRef.current(event);
        }
    }, [
        keys
    ]);
    (0, _react.useEffect)(()=>{
        const targetNode = node !== null && node !== void 0 ? node : document;
        targetNode && targetNode.addEventListener("keydown", handleKeyPress);
        return ()=>targetNode && targetNode.removeEventListener("keydown", handleKeyPress);
    }, [
        handleKeyPress,
        node
    ]);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9ob29rcy9zcmMvdXNlS2V5Ym9hcmRTaG9ydGN1dHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIlxuXG5jb25zdCB1c2VLZXlib2FyZFNob3J0Y3V0cyA9IChcbiAga2V5czogQXJyYXk8c3RyaW5nPixcbiAgY2FsbGJhY2s6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCxcbiAgbm9kZSA9IG51bGwsXG4pID0+IHtcbiAgY29uc3QgY2FsbGJhY2tSZWYgPSB1c2VSZWYoY2FsbGJhY2spXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrXG4gIH0pXG5cbiAgY29uc3QgaGFuZGxlS2V5UHJlc3MgPSB1c2VDYWxsYmFjayhcbiAgICAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGxvd2VyQ2FzZUtleSA9IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpXG4gICAgICBpZiAoXG4gICAgICAgIGtleXMuc29tZShjb21iaW5hdGlvbiA9PiB7XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBjb21iaW5hdGlvbi5zcGxpdChcIitcIikubWFwKHBhcnQgPT4gcGFydC50cmltKCkudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICBjb25zdCBtYWluS2V5ID0gcGFydHMucG9wKClcblxuICAgICAgICAgIGlmICghbWFpbktleSB8fCBsb3dlckNhc2VLZXkgIT09IG1haW5LZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHJlcXVpcmVkTW9kaWZpZXJzID0ge1xuICAgICAgICAgICAgbWV0YTogcGFydHMuaW5jbHVkZXMoXCJjbWRcIikgfHwgcGFydHMuaW5jbHVkZXMoXCJtZXRhXCIpLFxuICAgICAgICAgICAgY3RybDogcGFydHMuaW5jbHVkZXMoXCJjdHJsXCIpLFxuICAgICAgICAgICAgc2hpZnQ6IHBhcnRzLmluY2x1ZGVzKFwic2hpZnRcIiksXG4gICAgICAgICAgICBhbHQ6IHBhcnRzLmluY2x1ZGVzKFwiYWx0XCIpLFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBldmVudC5tZXRhS2V5ID09PSByZXF1aXJlZE1vZGlmaWVycy5tZXRhICYmXG4gICAgICAgICAgICBldmVudC5jdHJsS2V5ID09PSByZXF1aXJlZE1vZGlmaWVycy5jdHJsICYmXG4gICAgICAgICAgICBldmVudC5zaGlmdEtleSA9PT0gcmVxdWlyZWRNb2RpZmllcnMuc2hpZnQgJiZcbiAgICAgICAgICAgIGV2ZW50LmFsdEtleSA9PT0gcmVxdWlyZWRNb2RpZmllcnMuYWx0XG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIGNhbGxiYWNrUmVmLmN1cnJlbnQoZXZlbnQpXG4gICAgICB9XG4gICAgfSxcbiAgICBba2V5c10sXG4gIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBub2RlID8/IGRvY3VtZW50XG4gICAgdGFyZ2V0Tm9kZSAmJiB0YXJnZXROb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleVByZXNzKVxuXG4gICAgcmV0dXJuICgpID0+IHRhcmdldE5vZGUgJiYgdGFyZ2V0Tm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlQcmVzcylcbiAgfSwgW2hhbmRsZUtleVByZXNzLCBub2RlXSlcbn1cblxuZXhwb3J0IHsgdXNlS2V5Ym9hcmRTaG9ydGN1dHMgfVxuIl0sIm5hbWVzIjpbInVzZUtleWJvYXJkU2hvcnRjdXRzIiwia2V5cyIsImNhbGxiYWNrIiwibm9kZSIsImNhbGxiYWNrUmVmIiwidXNlUmVmIiwidXNlTGF5b3V0RWZmZWN0IiwiY3VycmVudCIsImhhbmRsZUtleVByZXNzIiwidXNlQ2FsbGJhY2siLCJldmVudCIsImxvd2VyQ2FzZUtleSIsImtleSIsInRvTG93ZXJDYXNlIiwic29tZSIsImNvbWJpbmF0aW9uIiwicGFydHMiLCJzcGxpdCIsIm1hcCIsInBhcnQiLCJ0cmltIiwibWFpbktleSIsInBvcCIsInJlcXVpcmVkTW9kaWZpZXJzIiwibWV0YSIsImluY2x1ZGVzIiwiY3RybCIsInNoaWZ0IiwiYWx0IiwibWV0YUtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsInVzZUVmZmVjdCIsInRhcmdldE5vZGUiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRFNBOzs7ZUFBQUE7Ozt1QkFyRHVEO0FBRWhFLE1BQU1BLHVCQUF1QixDQUMzQkMsTUFDQUMsVUFDQUMsT0FBTyxJQUFJO0lBRVgsTUFBTUMsY0FBY0MsSUFBQUEsYUFBTSxFQUFDSDtJQUMzQkksSUFBQUEsc0JBQWUsRUFBQztRQUNkRixZQUFZRyxPQUFPLEdBQUdMO0lBQ3hCO0lBRUEsTUFBTU0saUJBQWlCQyxJQUFBQSxrQkFBVyxFQUNoQyxDQUFDQztRQUNDLE1BQU1DLGVBQWVELE1BQU1FLEdBQUcsQ0FBQ0MsV0FBVztRQUMxQyxJQUNFWixLQUFLYSxJQUFJLENBQUNDLENBQUFBO1lBQ1IsTUFBTUMsUUFBUUQsWUFBWUUsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQ0MsQ0FBQUEsT0FBUUEsS0FBS0MsSUFBSSxHQUFHUCxXQUFXO1lBQ3hFLE1BQU1RLFVBQVVMLE1BQU1NLEdBQUc7WUFFekIsSUFBSSxDQUFDRCxXQUFXVixpQkFBaUJVLFNBQVM7Z0JBQ3hDLE9BQU87WUFDVDtZQUVBLE1BQU1FLG9CQUFvQjtnQkFDeEJDLE1BQU1SLE1BQU1TLFFBQVEsQ0FBQyxVQUFVVCxNQUFNUyxRQUFRLENBQUM7Z0JBQzlDQyxNQUFNVixNQUFNUyxRQUFRLENBQUM7Z0JBQ3JCRSxPQUFPWCxNQUFNUyxRQUFRLENBQUM7Z0JBQ3RCRyxLQUFLWixNQUFNUyxRQUFRLENBQUM7WUFDdEI7WUFFQSxPQUNFZixNQUFNbUIsT0FBTyxLQUFLTixrQkFBa0JDLElBQUksSUFDeENkLE1BQU1vQixPQUFPLEtBQUtQLGtCQUFrQkcsSUFBSSxJQUN4Q2hCLE1BQU1xQixRQUFRLEtBQUtSLGtCQUFrQkksS0FBSyxJQUMxQ2pCLE1BQU1zQixNQUFNLEtBQUtULGtCQUFrQkssR0FBRztRQUUxQyxJQUNBO1lBQ0F4QixZQUFZRyxPQUFPLENBQUNHO1FBQ3RCO0lBQ0YsR0FDQTtRQUFDVDtLQUFLO0lBR1JnQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsTUFBTUMsYUFBYS9CLGlCQUFBQSxrQkFBQUEsT0FBUWdDO1FBQzNCRCxjQUFjQSxXQUFXRSxnQkFBZ0IsQ0FBQyxXQUFXNUI7UUFFckQsT0FBTyxJQUFNMEIsY0FBY0EsV0FBV0csbUJBQW1CLENBQUMsV0FBVzdCO0lBQ3ZFLEdBQUc7UUFBQ0E7UUFBZ0JMO0tBQUs7QUFDM0IifQ==