b09b93c464cad30b4e0b9228a65ad303
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ShowMoreButton", {
    enumerable: true,
    get: function() {
        return ShowMoreButton;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _theme = require("@rp/react/theme");
const _core = require("@rp/react/web/mui/core");
const ShowMoreButtonStyled = (0, _theme.styled)(_core.Box, {
    name: "ShowMoreButton",
    shouldForwardProp: (prop)=>prop !== "isFamilyButton"
})(({ theme, isFamilyButton })=>{
    return isFamilyButton ? {
        display: "flex",
        margin: "0 auto",
        width: "fit-content",
        padding: "4px 0",
        textDecoration: "underline",
        "&:hover": {
            textDecoration: "none"
        }
    } : {
        display: "flex",
        alignItems: "center",
        color: theme.palette.text.secondary,
        marginTop: theme.spacing(0.5),
        marginLeft: 30,
        textTransform: "none",
        padding: "4px 0",
        width: "fit-content",
        textDecoration: "underline",
        "&:hover": {
            textDecoration: "none"
        }
    };
});
const ShowMoreButton = ({ showMore, onClick, qty, isFamilyButton = false, sx })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ShowMoreButtonStyled, {
        isFamilyButton: isFamilyButton,
        onClick: onClick,
        "data-testid": "show-more-button",
        sx: sx,
        children: showMore ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
            sx: {
                cursor: "pointer"
            },
            variant: "body2",
            children: "Show less"
        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
            sx: {
                cursor: "pointer"
            },
            variant: "body2",
            children: [
                "Show more (",
                qty,
                ")"
            ]
        })
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvU2hvd01vcmVCdXR0b24vU2hvd01vcmVCdXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCJAcnAvcmVhY3QvdGhlbWVcIlxuaW1wb3J0IHsgQm94LCBTeFByb3BzLCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG5jb25zdCBTaG93TW9yZUJ1dHRvblN0eWxlZCA9IHN0eWxlZChCb3gsIHtcbiAgbmFtZTogXCJTaG93TW9yZUJ1dHRvblwiLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBwcm9wICE9PSBcImlzRmFtaWx5QnV0dG9uXCIsXG59KTx7XG4gIGlzRmFtaWx5QnV0dG9uOiBib29sZWFuXG59PigoeyB0aGVtZSwgaXNGYW1pbHlCdXR0b24gfSkgPT4ge1xuICByZXR1cm4gaXNGYW1pbHlCdXR0b25cbiAgICA/IHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgICAgd2lkdGg6IFwiZml0LWNvbnRlbnRcIixcbiAgICAgICAgcGFkZGluZzogXCI0cHggMFwiLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICAgbWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nKDAuNSksXG4gICAgICAgIG1hcmdpbkxlZnQ6IDMwLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcIm5vbmVcIixcbiAgICAgICAgcGFkZGluZzogXCI0cHggMFwiLFxuICAgICAgICB3aWR0aDogXCJmaXQtY29udGVudFwiLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCIsXG4gICAgICAgIH0sXG4gICAgICB9XG59KVxuXG50eXBlIFByb3BzID0ge1xuICBzaG93TW9yZTogYm9vbGVhblxuICBvbkNsaWNrOiAoKSA9PiB2b2lkXG4gIHF0eTogbnVtYmVyXG4gIGlzRmFtaWx5QnV0dG9uPzogYm9vbGVhblxuICBzeD86IFN4UHJvcHNcbn1cblxuY29uc3QgU2hvd01vcmVCdXR0b24gPSAoeyBzaG93TW9yZSwgb25DbGljaywgcXR5LCBpc0ZhbWlseUJ1dHRvbiA9IGZhbHNlLCBzeCB9OiBQcm9wcykgPT4gKFxuICA8U2hvd01vcmVCdXR0b25TdHlsZWRcbiAgICBpc0ZhbWlseUJ1dHRvbj17aXNGYW1pbHlCdXR0b259XG4gICAgb25DbGljaz17b25DbGlja31cbiAgICBkYXRhLXRlc3RpZD1cInNob3ctbW9yZS1idXR0b25cIlxuICAgIHN4PXtzeH1cbiAgPlxuICAgIHtzaG93TW9yZSA/IChcbiAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGN1cnNvcjogXCJwb2ludGVyXCIgfX0gdmFyaWFudD1cImJvZHkyXCI+XG4gICAgICAgIFNob3cgbGVzc1xuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICkgOiAoXG4gICAgICA8VHlwb2dyYXBoeSBzeD17eyBjdXJzb3I6IFwicG9pbnRlclwiIH19IHZhcmlhbnQ9XCJib2R5MlwiPlxuICAgICAgICBTaG93IG1vcmUgKHtxdHl9KVxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICl9XG4gIDwvU2hvd01vcmVCdXR0b25TdHlsZWQ+XG4pXG5cbmV4cG9ydCB7IFNob3dNb3JlQnV0dG9uIH1cbiJdLCJuYW1lcyI6WyJTaG93TW9yZUJ1dHRvbiIsIlNob3dNb3JlQnV0dG9uU3R5bGVkIiwic3R5bGVkIiwiQm94IiwibmFtZSIsInNob3VsZEZvcndhcmRQcm9wIiwicHJvcCIsInRoZW1lIiwiaXNGYW1pbHlCdXR0b24iLCJkaXNwbGF5IiwibWFyZ2luIiwid2lkdGgiLCJwYWRkaW5nIiwidGV4dERlY29yYXRpb24iLCJhbGlnbkl0ZW1zIiwiY29sb3IiLCJwYWxldHRlIiwidGV4dCIsInNlY29uZGFyeSIsIm1hcmdpblRvcCIsInNwYWNpbmciLCJtYXJnaW5MZWZ0IiwidGV4dFRyYW5zZm9ybSIsInNob3dNb3JlIiwib25DbGljayIsInF0eSIsInN4IiwiZGF0YS10ZXN0aWQiLCJUeXBvZ3JhcGh5IiwiY3Vyc29yIiwidmFyaWFudCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBK0RTQTs7O2VBQUFBOzs7O3VCQS9EYztzQkFDa0I7QUFFekMsTUFBTUMsdUJBQXVCQyxJQUFBQSxhQUFNLEVBQUNDLFNBQUcsRUFBRTtJQUN2Q0MsTUFBTTtJQUNOQyxtQkFBbUJDLENBQUFBLE9BQVFBLFNBQVM7QUFDdEMsR0FFRyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsY0FBYyxFQUFFO0lBQzNCLE9BQU9BLGlCQUNIO1FBQ0VDLFNBQVM7UUFDVEMsUUFBUTtRQUNSQyxPQUFPO1FBQ1BDLFNBQVM7UUFDVEMsZ0JBQWdCO1FBQ2hCLFdBQVc7WUFDVEEsZ0JBQWdCO1FBQ2xCO0lBQ0YsSUFDQTtRQUNFSixTQUFTO1FBQ1RLLFlBQVk7UUFDWkMsT0FBT1IsTUFBTVMsT0FBTyxDQUFDQyxJQUFJLENBQUNDLFNBQVM7UUFDbkNDLFdBQVdaLE1BQU1hLE9BQU8sQ0FBQztRQUN6QkMsWUFBWTtRQUNaQyxlQUFlO1FBQ2ZWLFNBQVM7UUFDVEQsT0FBTztRQUNQRSxnQkFBZ0I7UUFDaEIsV0FBVztZQUNUQSxnQkFBZ0I7UUFDbEI7SUFDRjtBQUNOO0FBVUEsTUFBTWIsaUJBQWlCLENBQUMsRUFBRXVCLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxHQUFHLEVBQUVqQixpQkFBaUIsS0FBSyxFQUFFa0IsRUFBRSxFQUFTLGlCQUNuRixxQkFBQ3pCO1FBQ0NPLGdCQUFnQkE7UUFDaEJnQixTQUFTQTtRQUNURyxlQUFZO1FBQ1pELElBQUlBO2tCQUVISCx5QkFDQyxxQkFBQ0ssZ0JBQVU7WUFBQ0YsSUFBSTtnQkFBRUcsUUFBUTtZQUFVO1lBQUdDLFNBQVE7c0JBQVE7MkJBSXZELHNCQUFDRixnQkFBVTtZQUFDRixJQUFJO2dCQUFFRyxRQUFRO1lBQVU7WUFBR0MsU0FBUTs7Z0JBQVE7Z0JBQ3pDTDtnQkFBSSJ9