{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/trpc/src/lib/trpcClientAdapter.ts"],"sourcesContent":["import qs from \"qs\"\nimport { TRPCCombinedDataTransformer } from \"@trpc/server\"\nimport { inferProcedureInput, inferProcedureOutput } from \"@trpc/server\"\nimport {\n  CustomProcedure,\n  CustomRouter,\n  getTrpcRouterPaths,\n  isOpenApiMeta,\n  isProcedure,\n} from \"./trpcAdaptersUtils\"\n\ntype Input<K extends CustomProcedure | CustomRouter | undefined> = K extends CustomProcedure\n  ? inferProcedureInput<K>\n  : unknown\n\ntype Output<K extends CustomProcedure | CustomRouter | undefined> = K extends CustomProcedure\n  ? inferProcedureOutput<K>\n  : unknown\n\ntype TrpcPlaywrightMock<Router> = {\n  [key in keyof Router]: Router[key] extends CustomProcedure\n    ? {\n        request: (input: Input<Router[key]>) => Promise<Output<Router[key]>>\n      }\n    : TrpcPlaywrightMock<Router[key]>\n}\n\ntype Callback = (props: { input: unknown; path: string }) => Promise<unknown>\n\ntype Props<TRouter extends CustomRouter> = {\n  router: TRouter\n  token?: string\n  Authorization?: string\n  url: string\n  transformer?: TRPCCombinedDataTransformer\n}\n\nfunction replaceParams(path: string, params: unknown) {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"Invalid params\")\n  }\n  return {\n    parsed: Object.entries(params).reduce((acc, [key, value]) => {\n      return acc.replace(`:${key}`, String(value))\n    }, path),\n    rest: Object.entries(params)\n      .filter(([key]) => !path.includes(`:${key}`))\n      .reduce((acc, [key, value]) => {\n        return { ...acc, [key]: value }\n      }, {}),\n  }\n}\n\nfunction createTypedTRPC<Router extends CustomRouter>(\n  callback: Callback,\n  pathParts: Array<string> = [],\n  context?: Router,\n): TrpcPlaywrightMock<Router> {\n  return new Proxy<TrpcPlaywrightMock<Router>>({} as TrpcPlaywrightMock<Router>, {\n    get(proxy, procedureKey: keyof typeof context) {\n      if (procedureKey === \"request\") {\n        return (input: Input<typeof context>) => {\n          return callback({ input, path: pathParts.join(\".\") })\n        }\n      }\n      return createTypedTRPC(callback, [...pathParts, procedureKey], proxy[procedureKey])\n    },\n  })\n}\n\nfunction createTrpcClient<Router extends CustomRouter>(callback: Callback) {\n  return {\n    client: createTypedTRPC<Router>(callback),\n  }\n}\n\n/**\n * Creates a TRPC client adapter for a given router, token, and url.\n * This function allows you to interact with a TRPC router using a token for authentication.\n * It supports custom data transformers for input and output.\n * @param props Configuration object for the TRPC client adapter.\n * @param props.router The TRPC router to interact with.\n * @param props.token The API token for authentication.\n * @param props.url The origin URL for the API.\n * example usage:\n * ```ts\n * const { client } = trpcClientAdapter({\n *   router: trpcBigdataApiRouter,\n *   token: \"my-api.token\",\n *   url: \"https://api.bigdata.com\",\n * })\n * ```\n */\nexport function trpcClientAdapter<TRouter extends CustomRouter>({\n  router,\n  token,\n  Authorization,\n  url,\n}: Props<TRouter>) {\n  const paths = getTrpcRouterPaths(router)\n  return createTrpcClient<TRouter>(async ({ input, path }) => {\n    const { procedure } = paths.find(({ path: p }) => p === path) ?? {}\n    if (!procedure || !isProcedure(procedure) || !isOpenApiMeta(procedure._def.meta)) {\n      throw new Error(`Procedure not found for path: ${path}`)\n    }\n    const meta = procedure._def.meta\n    const { parsed, rest } = replaceParams(meta.openapi.path, input)\n    const isGetOrDelete = meta.openapi.method === \"GET\" || meta.openapi.method === \"DELETE\"\n    const fetchUrl = `${url}${parsed}${isGetOrDelete ? \"?\" + qs.stringify(rest) : \"\"}`\n    return fetch(fetchUrl, {\n      method: meta.openapi.method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(token ? { \"X-Api-Key\": token } : {}),\n        ...(Authorization ? { Authorization: `Bearer ${Authorization}` } : {}),\n      },\n      body: isGetOrDelete ? undefined : JSON.stringify(rest),\n    }).then(res => res.json())\n  })\n}\n"],"names":["trpcClientAdapter","replaceParams","path","params","Error","parsed","Object","entries","reduce","acc","key","value","replace","String","rest","filter","includes","createTypedTRPC","callback","pathParts","context","Proxy","get","proxy","procedureKey","input","join","createTrpcClient","client","router","token","Authorization","url","paths","getTrpcRouterPaths","procedure","find","p","isProcedure","isOpenApiMeta","_def","meta","openapi","isGetOrDelete","method","fetchUrl","qs","stringify","fetch","headers","body","undefined","JSON","then","res","json"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA6FgBA;;;eAAAA;;;2DA7FD;mCASR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BP,SAASC,cAAcC,IAAY,EAAEC,MAAe;IAClD,IAAI,OAAOA,WAAW,YAAYA,WAAW,MAAM;QACjD,MAAM,IAAIC,MAAM;IAClB;IACA,OAAO;QACLC,QAAQC,OAAOC,OAAO,CAACJ,QAAQK,MAAM,CAAC,CAACC,KAAK,CAACC,KAAKC,MAAM;YACtD,OAAOF,IAAIG,OAAO,CAAC,CAAC,CAAC,EAAEF,IAAI,CAAC,EAAEG,OAAOF;QACvC,GAAGT;QACHY,MAAMR,OAAOC,OAAO,CAACJ,QAClBY,MAAM,CAAC,CAAC,CAACL,IAAI,GAAK,CAACR,KAAKc,QAAQ,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC,GAC1CF,MAAM,CAAC,CAACC,KAAK,CAACC,KAAKC,MAAM;YACxB,OAAO,wCAAKF;gBAAK,CAACC,IAAI,EAAEC;;QAC1B,GAAG,CAAC;IACR;AACF;AAEA,SAASM,gBACPC,QAAkB,EAClBC,YAA2B,EAAE,EAC7BC,OAAgB;IAEhB,OAAO,IAAIC,MAAkC,CAAC,GAAiC;QAC7EC,KAAIC,KAAK,EAAEC,YAAkC;YAC3C,IAAIA,iBAAiB,WAAW;gBAC9B,OAAO,CAACC;oBACN,OAAOP,SAAS;wBAAEO;wBAAOvB,MAAMiB,UAAUO,IAAI,CAAC;oBAAK;gBACrD;YACF;YACA,OAAOT,gBAAgBC,UAAU;mBAAIC;gBAAWK;aAAa,EAAED,KAAK,CAACC,aAAa;QACpF;IACF;AACF;AAEA,SAASG,iBAA8CT,QAAkB;IACvE,OAAO;QACLU,QAAQX,gBAAwBC;IAClC;AACF;AAmBO,SAASlB,kBAAgD,EAC9D6B,MAAM,EACNC,KAAK,EACLC,aAAa,EACbC,GAAG,EACY;IACf,MAAMC,QAAQC,IAAAA,qCAAkB,EAACL;IACjC,OAAOF,iBAA0B,OAAO,EAAEF,KAAK,EAAEvB,IAAI,EAAE;YAC/B+B;QAAtB,MAAM,EAAEE,SAAS,EAAE,GAAGF,CAAAA,cAAAA,MAAMG,IAAI,CAAC,CAAC,EAAElC,MAAMmC,CAAC,EAAE,GAAKA,MAAMnC,mBAAlC+B,yBAAAA,cAA2C,CAAC;QAClE,IAAI,CAACE,aAAa,CAACG,IAAAA,8BAAW,EAACH,cAAc,CAACI,IAAAA,gCAAa,EAACJ,UAAUK,IAAI,CAACC,IAAI,GAAG;YAChF,MAAM,IAAIrC,MAAM,CAAC,8BAA8B,EAAEF,KAAK,CAAC;QACzD;QACA,MAAMuC,OAAON,UAAUK,IAAI,CAACC,IAAI;QAChC,MAAM,EAAEpC,MAAM,EAAES,IAAI,EAAE,GAAGb,cAAcwC,KAAKC,OAAO,CAACxC,IAAI,EAAEuB;QAC1D,MAAMkB,gBAAgBF,KAAKC,OAAO,CAACE,MAAM,KAAK,SAASH,KAAKC,OAAO,CAACE,MAAM,KAAK;QAC/E,MAAMC,WAAW,CAAC,EAAEb,IAAI,EAAE3B,OAAO,EAAEsC,gBAAgB,MAAMG,WAAE,CAACC,SAAS,CAACjC,QAAQ,GAAG,CAAC;QAClF,OAAOkC,MAAMH,UAAU;YACrBD,QAAQH,KAAKC,OAAO,CAACE,MAAM;YAC3BK,SAAS;gBACP,gBAAgB;eACZnB,QAAQ;gBAAE,aAAaA;YAAM,IAAI,CAAC,GAClCC,gBAAgB;gBAAEA,eAAe,CAAC,OAAO,EAAEA,cAAc,CAAC;YAAC,IAAI,CAAC;YAEtEmB,MAAMP,gBAAgBQ,YAAYC,KAAKL,SAAS,CAACjC;QACnD,GAAGuC,IAAI,CAACC,CAAAA,MAAOA,IAAIC,IAAI;IACzB;AACF"}