1013d2861771edebd6c063a065817ec9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "trpcClientAdapter", {
    enumerable: true,
    get: function() {
        return trpcClientAdapter;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _trpcAdaptersUtils = require("./trpcAdaptersUtils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function replaceParams(path, params) {
    if (typeof params !== "object" || params === null) {
        throw new Error("Invalid params");
    }
    return {
        parsed: Object.entries(params).reduce((acc, [key, value])=>{
            return acc.replace(`:${key}`, String(value));
        }, path),
        rest: Object.entries(params).filter(([key])=>!path.includes(`:${key}`)).reduce((acc, [key, value])=>{
            return _object_spread_props(_object_spread({}, acc), {
                [key]: value
            });
        }, {})
    };
}
function createTypedTRPC(callback, pathParts = [], context) {
    return new Proxy({}, {
        get (proxy, procedureKey) {
            if (procedureKey === "request") {
                return (input)=>{
                    return callback({
                        input,
                        path: pathParts.join(".")
                    });
                };
            }
            return createTypedTRPC(callback, [
                ...pathParts,
                procedureKey
            ], proxy[procedureKey]);
        }
    });
}
function createTrpcClient(callback) {
    return {
        client: createTypedTRPC(callback)
    };
}
function trpcClientAdapter({ router, token, Authorization, url }) {
    const paths = (0, _trpcAdaptersUtils.getTrpcRouterPaths)(router);
    return createTrpcClient(async ({ input, path })=>{
        var _paths_find;
        const { procedure } = (_paths_find = paths.find(({ path: p })=>p === path)) !== null && _paths_find !== void 0 ? _paths_find : {};
        if (!procedure || !(0, _trpcAdaptersUtils.isProcedure)(procedure) || !(0, _trpcAdaptersUtils.isOpenApiMeta)(procedure._def.meta)) {
            throw new Error(`Procedure not found for path: ${path}`);
        }
        const meta = procedure._def.meta;
        const { parsed, rest } = replaceParams(meta.openapi.path, input);
        const isGetOrDelete = meta.openapi.method === "GET" || meta.openapi.method === "DELETE";
        const fetchUrl = `${url}${parsed}${isGetOrDelete ? "?" + _qs.default.stringify(rest) : ""}`;
        return fetch(fetchUrl, {
            method: meta.openapi.method,
            headers: _object_spread({
                "Content-Type": "application/json"
            }, token ? {
                "X-Api-Key": token
            } : {}, Authorization ? {
                Authorization: `Bearer ${Authorization}`
            } : {}),
            body: isGetOrDelete ? undefined : JSON.stringify(rest)
        }).then((res)=>res.json());
    });
}

//# sourceMappingURL=data:application/json;base64,