{"version":3,"sources":["../../src/react/index.ts","../../src/react/hooks/createContextAndHook.ts","../../src/organization.ts","../../src/telemetry/events/method-called.ts","../../src/react/contexts.tsx","../../src/react/clerk-swr.ts","../../src/react/hooks/usePagesOrInfinite.ts","../../src/react/hooks/useOrganization.tsx","../../src/react/hooks/useOrganizationList.tsx","../../src/react/hooks/useSafeLayoutEffect.tsx","../../src/react/hooks/useSession.ts","../../src/react/hooks/useSessionList.ts","../../src/react/hooks/useUser.ts","../../src/react/hooks/useClerk.ts","../../src/react/hooks/useDeepEqualMemo.ts","../../src/react/hooks/useReverification.ts","../../src/authorization.ts","../../src/authorization-errors.ts","../../src/error.ts","../../src/utils/noop.ts","../../src/utils/createDeferredPromise.ts"],"sourcesContent":["export * from './hooks';\n\nexport {\n  ClerkInstanceContext,\n  ClientContext,\n  OptionsContext,\n  OrganizationProvider,\n  SessionContext,\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useClientContext,\n  useOptionsContext,\n  useOrganizationContext,\n  UserContext,\n  useSessionContext,\n  useUserContext,\n} from './contexts';\n","'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","import type { OrganizationMembershipResource } from '@clerk/types';\n\n/**\n * Finds the organization membership for a given organization ID from a list of memberships\n * @param organizationMemberships - Array of organization memberships to search through\n * @param organizationId - ID of the organization to find the membership for\n * @returns The matching organization membership or undefined if not found\n */\nexport function getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  organizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === organizationId,\n  );\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_METHOD_CALLED = 'METHOD_CALLED';\n\ntype EventMethodCalled = {\n  method: string;\n} & Record<string, string | number | boolean>;\n\n/**\n * Fired when a helper method is called from a Clerk SDK.\n */\nexport function eventMethodCalled(\n  method: string,\n  payload?: Record<string, unknown>,\n): TelemetryEventRaw<EventMethodCalled> {\n  return {\n    event: EVENT_METHOD_CALLED,\n    payload: {\n      method,\n      ...payload,\n    },\n  };\n}\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClerkOptions,\n  ClientResource,\n  LoadedClerk,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\nconst OptionsContext = React.createContext<ClerkOptions>({});\n\nfunction useOptionsContext(): ClerkOptions {\n  const context = React.useContext(OptionsContext);\n  if (context === undefined) {\n    throw new Error('useOptions must be used within an OptionsContext');\n  }\n  return context;\n}\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: { organization },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\nfunction useAssertWrappedByClerkProvider(displayNameOrFn: string | (() => void)): void {\n  const ctx = React.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === 'function') {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(\n      `${displayNameOrFn} can only be used within the <ClerkProvider /> component.\n\nPossible fixes:\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\n2. Check for multiple versions of the \\`@clerk/shared\\` package in your project. Use a tool like \\`npm ls @clerk/shared\\` to identify multiple versions, and update your dependencies to only rely on one.\n\nLearn more: https://clerk.com/docs/components/clerk-provider`.trim(),\n    );\n  }\n}\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  OptionsContext,\n  useOptionsContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n  useAssertWrappedByClerkProvider,\n};\n","'use client';\n\nexport * from 'swr';\n\nexport { default as useSWR } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type {\n  CacheSetter,\n  PagesOrInfiniteConfig,\n  PagesOrInfiniteOptions,\n  PaginatedResources,\n  ValueOrSetter,\n} from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : (params?.initialPage ?? defaultValues.initialPage),\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (params?.pageSize ?? defaultValues.pageSize));\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (params?.[key] ?? defaultValues[key]);\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\nconst cachingSWROptions = {\n  dedupingInterval: 1000 * 60,\n  focusThrottleInterval: 1000 * 60 * 2,\n} satisfies Parameters<typeof useSWR>[2];\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TConfig extends PagesOrInfiniteConfig = PagesOrInfiniteConfig,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  config: TConfig,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TConfig['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = config.enabled ?? true;\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData, ...cachingSWROptions },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    cachingSWROptions,\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembersParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { getCurrentOrganizationMembership } from '../../organization';\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useSessionContext,\n} from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  /**\n   * If set to `true`, all default properties will be used. Otherwise, accepts an object with an optional `enrollmentMode` property of type [`OrganizationEnrollmentMode`](https://clerk.com/docs/references/react/use-organization#organization-enrollment-mode) and any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization#shared-properties).\n   */\n  domains?: true | PaginatedHookConfig<GetDomainsParams>;\n  /**\n   * If set to `true`, all default properties will be used. Otherwise, accepts an object with an optional `status` property of type [`OrganizationInvitationStatus`](https://clerk.com/docs/references/react/use-organization#organization-invitation-status) and any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization#shared-properties).\n   */\n  membershipRequests?: true | PaginatedHookConfig<GetMembershipRequestParams>;\n  /**\n   * If set to `true`, all default properties will be used. Otherwise, accepts an object with an optional `role` property of type [`OrganizationCustomRoleKey[]`](https://clerk.com/docs/references/react/use-organization#organization-custome-role-key) and any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization#shared-properties).\n   */\n  memberships?: true | PaginatedHookConfig<GetMembersParams>;\n  /**\n   * If set to `true`, all default properties will be used. Otherwise, accepts an object with an optional `status` property of type [`OrganizationInvitationStatus`](https://clerk.com/docs/references/react/use-organization#organization-invitation-status) and any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization#shared-properties).\n   */\n  invitations?: true | PaginatedHookConfig<GetInvitationsParams>;\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: false;\n      /**\n       * The currently active organization.\n       */\n      organization: undefined;\n      /**\n       * The current organization membership.\n       */\n      membership: undefined;\n      /**\n       * Includes a paginated list of the organization's domains.\n       */\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      /**\n       * Includes a paginated list of the organization's membership requests.\n       */\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      /**\n       * Includes a paginated list of the organization's memberships.\n       */\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      /**\n       * Includes a paginated list of the organization's invitations.\n       */\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: true;\n      /**\n       * The currently active organization.\n       */\n      organization: OrganizationResource;\n      /**\n       * The current organization membership.\n       */\n      membership: undefined;\n      /**\n       * Includes a paginated list of the organization's domains.\n       */\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      /**\n       * Includes a paginated list of the organization's membership requests.\n       */\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      /**\n       * Includes a paginated list of the organization's memberships.\n       */\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      /**\n       * Includes a paginated list of the organization's invitations.\n       */\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: boolean;\n      /**\n       * The currently active organization.\n       */\n      organization: OrganizationResource | null;\n      /**\n       * The current organization membership.\n       */\n      membership: OrganizationMembershipResource | null | undefined;\n      /**\n       * Includes a paginated list of the organization's domains.\n       */\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      /**\n       * Includes a paginated list of the organization's membership requests.\n       */\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      /**\n       * Includes a paginated list of the organization's memberships.\n       */\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      /**\n       * Includes a paginated list of the organization's invitations.\n       */\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\n/**\n * The `useOrganization()` hook retrieves attributes of the currently active organization.\n */\nexport const useOrganization: UseOrganization = params => {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganization');\n\n  const { organization } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n    query: undefined,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganization'));\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n          query: membersSafeValues.query,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    membersParams || {},\n    organization?.getMemberships,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  /**\n   * `true` or an object with any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization-list#shared-properties). If set to `true`, all default properties will be used.\n   */\n  userMemberships?: true | PaginatedHookConfig<GetUserOrganizationMembershipParams>;\n  /**\n   * `true` or an object with [`status: OrganizationInvitationStatus`](https://clerk.com/docs/references/react/use-organization-list#organization-invitation-status) or any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization-list#shared-properties). If set to `true`, all default properties will be used.\n   */\n  userInvitations?: true | PaginatedHookConfig<GetUserOrganizationInvitationsParams>;\n  /**\n   * `true` or an object with [`status: OrganizationSuggestionsStatus | OrganizationSuggestionStatus[]`](https://clerk.com/docs/references/react/use-organization-list#organization-suggestion-status) or any of the properties described in [Shared properties](https://clerk.com/docs/references/react/use-organization-list#shared-properties). If set to `true`, all default properties will be used.\n   */\n  userSuggestions?: true | PaginatedHookConfig<GetUserOrganizationSuggestionsParams>;\n};\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: false;\n      /**\n       * A function that returns a `Promise` which resolves to the newly created `Organization`.\n       */\n      createOrganization: undefined;\n      /**\n       * A function that sets the active session and/or organization.\n       */\n      setActive: undefined;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization memberships.\n       */\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization invitations.\n       */\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      /**\n       * Returns `PaginatedResources` which includes a list of suggestions for organizations that the user can join.\n       */\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      /**\n       * A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.\n       */\n      isLoaded: boolean;\n      /**\n       * A function that returns a `Promise` which resolves to the newly created `Organization`.\n       */\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      /**\n       * A function that sets the active session and/or organization.\n       */\n      setActive: SetActive;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization memberships.\n       */\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      /**\n       * Returns `PaginatedResources` which includes a list of the user's organization invitations.\n       */\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      /**\n       * Returns `PaginatedResources` which includes a list of suggestions for organizations that the user can join.\n       */\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\n/**\n * The `useOrganizationList()` hook provides access to the current user's organization memberships, invitations, and suggestions. It also includes methods for creating new organizations and managing the active organization.\n */\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganizationList');\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganizationList'));\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    userMembershipsParams || {},\n    user?.getOrganizationMemberships,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","import type { UseSessionReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useSessionContext } from '../contexts';\n\ntype UseSession = () => UseSessionReturn;\n\n/**\n * The `useSession()` hook provides access to the current user's [`Session`](https://clerk.com/docs/references/javascript/session) object, as well as helpers for setting the active session.\n *\n * @example\n * ### Access the `Session` object\n *\n * The following example uses the `useSession()` hook to access the `Session` object, which has the `lastActiveAt` property. The `lastActiveAt` property is a `Date` object used to show the time the session was last active.\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useSession } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, session, isSignedIn } = useSession()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *   if (!isSignedIn) {\n *     // Handle signed out state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <p>This session has been active since {session.lastActiveAt.toLocaleString()}</p>\n *     </div>\n *   )\n * }\n * ```\n */\nexport const useSession: UseSession = () => {\n  useAssertWrappedByClerkProvider('useSession');\n\n  const session = useSessionContext();\n\n  if (session === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, session: undefined };\n  }\n\n  if (session === null) {\n    return { isLoaded: true, isSignedIn: false, session: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, session };\n};\n","import type { UseSessionListReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useClientContext } from '../contexts';\n\n/**\n * The `useSessionList()` hook returns an array of [`Session`](https://clerk.com/docs/references/javascript/session) objects that have been registered on the client device.\n *\n * @example\n * ### Get a list of sessions\n *\n * The following example uses `useSessionList()` to get a list of sessions that have been registered on the client device. The `sessions` property is used to show the number of times the user has visited the page.\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useSessionList } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, sessions } = useSessionList()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   return (\n *     <div>\n *       <p>Welcome back. You've been here {sessions.length} times before.</p>\n *     </div>\n *   )\n * }\n * ```\n */\nexport const useSessionList = (): UseSessionListReturn => {\n  useAssertWrappedByClerkProvider('useSessionList');\n\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n\n  if (!client) {\n    return { isLoaded: false, sessions: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import type { UseUserReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useUserContext } from '../contexts';\n\n/**\n * The `useUser()` hook provides access to the current user's [`User`](https://clerk.com/docs/references/javascript/user/user) object, which contains all the data for a single user in your application and provides methods to manage their account. This hook also allows you to check if the user is signed in and if Clerk has loaded and initialized.\n *\n * @example\n * ### Get the current user\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user/user) object, which contains the current user's data such as their full name. The `isLoaded` and `isSignedIn` properties are used to handle the loading state and to check if the user is signed in, respectively.\n *\n * ```tsx {{ filename: 'src/Example.tsx' }}\n * export default function Example() {\n *   const { isSignedIn, user, isLoaded } = useUser()\n *\n *   if (!isLoaded) {\n *     return <div>Loading...</div>\n *   }\n *\n *   if (!isSignedIn) {\n *     return <div>Sign in to view this page</div>\n *   }\n *\n *   return <div>Hello {user.firstName}!</div>\n * }\n * ```\n *\n * @example\n * ### Update user data\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user/user) object, which calls the [`update()`](https://clerk.com/docs/references/javascript/user/user#update) method to update the current user's information.\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useUser } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, user } = useUser()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   if (!user) return null\n *\n *   const updateUser = async () => {\n *     await user.update({\n *       firstName: 'John',\n *       lastName: 'Doe',\n *     })\n *   }\n *\n *   return (\n *     <>\n *       <button onClick={updateUser}>Update your name</button>\n *       <p>user.firstName: {user?.firstName}</p>\n *       <p>user.lastName: {user?.lastName}</p>\n *     </>\n *   )\n * }\n * ```\n *\n * @example\n * ### Reload user data\n *\n * The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user/user) object, which calls the [`reload()`](https://clerk.com/docs/references/javascript/user/user#reload) method to get the latest user's information.\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useUser } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const { isLoaded, user } = useUser()\n *\n *   if (!isLoaded) {\n *     // Handle loading state\n *     return null\n *   }\n *\n *   if (!user) return null\n *\n *   const updateUser = async () => {\n *     // Update data via an API endpoint\n *     const updateMetadata = await fetch('/api/updateMetadata')\n *\n *     // Check if the update was successful\n *     if (updateMetadata.message !== 'success') {\n *       throw new Error('Error updating')\n *     }\n *\n *     // If the update was successful, reload the user data\n *     await user.reload()\n *   }\n *\n *   return (\n *     <>\n *       <button onClick={updateUser}>Update your metadata</button>\n *       <p>user role: {user?.publicMetadata.role}</p>\n *     </>\n *   )\n * }\n * ```\n */\nexport function useUser(): UseUserReturn {\n  useAssertWrappedByClerkProvider('useUser');\n\n  const user = useUserContext();\n\n  if (user === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, user: undefined };\n  }\n\n  if (user === null) {\n    return { isLoaded: true, isSignedIn: false, user: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, user };\n}\n","import type { LoadedClerk } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext } from '../contexts';\n\n/**\n * The `useClerk()` hook provides access to the [`Clerk`](https://clerk.com/docs/references/javascript/clerk/clerk) object, allowing you to build alternatives to any Clerk Component.\n *\n * @warning\n * This composable should only be used for advanced use cases, such as building a completely custom OAuth flow or as an escape hatch to access to the `Clerk` object.\n *\n * @returns The `Clerk` object, which includes all the methods and properties listed in the [`Clerk` reference](https://clerk.com/docs/references/javascript/clerk/clerk).\n *\n * @example\n *\n * The following example uses the `useClerk()` hook to access the `clerk` object. The `clerk` object is used to call the [`openSignIn()`](https://clerk.com/docs/references/javascript/clerk/clerk#sign-in) method to open the sign-in modal.\n *\n * ```tsx {{ filename: 'src/Home.tsx' }}\n * import { useClerk } from '@clerk/clerk-react'\n *\n * export default function Home() {\n *   const clerk = useClerk()\n *\n *   return <button onClick={() => clerk.openSignIn({})}>Sign in</button>\n * }\n * ```\n */\nexport const useClerk = (): LoadedClerk => {\n  useAssertWrappedByClerkProvider('useClerk');\n  return useClerkInstanceContext();\n};\n","import { dequal as deepEqual } from 'dequal';\nimport React from 'react';\n\ntype UseMemoFactory<T> = () => T;\ntype UseMemoDependencyArray = Exclude<Parameters<typeof React.useMemo>[1], 'undefined'>;\ntype UseDeepEqualMemo = <T>(factory: UseMemoFactory<T>, dependencyArray: UseMemoDependencyArray) => T;\n\nconst useDeepEqualMemoize = <T>(value: T) => {\n  const ref = React.useRef<T>(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React.useMemo(() => ref.current, [ref.current]);\n};\n\nexport const useDeepEqualMemo: UseDeepEqualMemo = (factory, dependencyArray) => {\n  return React.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\nexport const isDeeplyEqual = deepEqual;\n","import type { Clerk } from '@clerk/types';\nimport { useMemo, useRef } from 'react';\n\nimport { validateReverificationConfig } from '../../authorization';\nimport { isReverificationHint, reverificationError } from '../../authorization-errors';\nimport { ClerkRuntimeError, isClerkAPIResponseError, isClerkRuntimeError } from '../../error';\nimport { createDeferredPromise } from '../../utils/createDeferredPromise';\nimport { useClerk } from './useClerk';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\n\nconst CLERK_API_REVERIFICATION_ERROR_CODE = 'session_reverification_required';\n\nasync function resolveResult<T>(result: Promise<T> | T): Promise<T | ReturnType<typeof reverificationError>> {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    // Treat fapi assurance as an assurance hint\n    if (isClerkAPIResponseError(e) && e.errors.find(({ code }) => code === CLERK_API_REVERIFICATION_ERROR_CODE)) {\n      return reverificationError();\n    }\n\n    // rethrow\n    throw e;\n  }\n}\n\ntype ExcludeClerkError<T, P> = T extends { clerk_error: any } ? (P extends { throwOnCancel: true } ? never : null) : T;\n\n/**\n * The optional options object.\n */\ntype UseReverificationOptions = {\n  /**\n   * A callback function that is invoked when the user cancels the reverification process.\n   */\n  onCancel?: () => void;\n  /**\n   * Determines if an error should throw when the user cancels the reverification process. Defaults to `false`.\n   */\n  throwOnCancel?: boolean;\n};\n\ntype CreateReverificationHandlerParams = UseReverificationOptions & {\n  openUIComponent: Clerk['__internal_openReverification'];\n};\n\nfunction createReverificationHandler(params: CreateReverificationHandlerParams) {\n  function assertReverification<Fetcher extends (...args: any[]) => Promise<any> | undefined>(\n    fetcher: Fetcher,\n  ): (\n    ...args: Parameters<Fetcher>\n  ) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Parameters<Fetcher>[1]>> {\n    return (async (...args: Parameters<Fetcher>) => {\n      let result = await resolveResult(fetcher(...args));\n\n      if (isReverificationHint(result)) {\n        /**\n         * Create a promise\n         */\n        const resolvers = createDeferredPromise();\n\n        const isValidMetadata = validateReverificationConfig(result.clerk_error.metadata?.reverification);\n\n        /**\n         * On success resolve the pending promise\n         * On cancel reject the pending promise\n         */\n        params.openUIComponent?.({\n          level: isValidMetadata ? isValidMetadata().level : undefined,\n          afterVerification() {\n            resolvers.resolve(true);\n          },\n          afterVerificationCancelled() {\n            resolvers.reject(\n              new ClerkRuntimeError('User cancelled attempted verification', {\n                code: 'reverification_cancelled',\n              }),\n            );\n          },\n        });\n\n        try {\n          /**\n           * Wait until the promise from above have been resolved or rejected\n           */\n          await resolvers.promise;\n        } catch (e) {\n          if (params.onCancel) {\n            params.onCancel();\n          }\n\n          if (isClerkRuntimeError(e) && e.code === 'reverification_cancelled' && params.throwOnCancel) {\n            throw e;\n          }\n\n          return null;\n        }\n\n        /**\n         * After the promise resolved successfully try the original request one more time\n         */\n        result = await resolveResult(fetcher(...args));\n      }\n\n      return result;\n    }) as ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Parameters<Fetcher>[1]>;\n  }\n\n  return assertReverification;\n}\n\ntype UseReverificationResult<\n  Fetcher extends (...args: any[]) => Promise<any> | undefined,\n  Options extends UseReverificationOptions,\n> = readonly [(...args: Parameters<Fetcher>) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Options>>];\n\n/**\n * The `useReverification()` hook is used to handle a session's reverification flow. If a request requires reverification, a modal will display, prompting the user to verify their credentials. Upon successful verification, the original request will automatically retry.\n *\n * @warning\n *\n * This feature is currently in public beta. **It is not recommended for production use.**\n *\n * Depending on the SDK you're using, this feature requires `@clerk/nextjs@6.5.0` or later, `@clerk/clerk-react@5.17.0` or later, and `@clerk/clerk-js@5.35.0` or later.\n *\n * @example\n * ### Handle cancellation of the reverification process\n *\n * The following example demonstrates how to handle scenarios where a user cancels the reverification flow, such as closing the modal, which might result in `myData` being `null`.\n *\n * In the following example, `myFetcher` would be a function in your backend that fetches data from the route that requires reverification. See the [guide on how to require reverification](https://clerk.com/docs/guides/reverification) for more information.\n *\n * ```tsx {{ filename: 'src/components/MyButton.tsx' }}\n * import { useReverification } from '@clerk/react'\n *\n * export function MyButton() {\n *   const [enhancedFetcher] = useReverification(myFetcher)\n *\n *   const handleClick = async () => {\n *     const myData = await enhancedFetcher()\n *     // If `myData` is null, the user canceled the reverification process\n *     // You can choose how your app responds. This example returns null.\n *     if (!myData) return\n *   }\n *\n *   return <button onClick={handleClick}>Update User</button>\n * }\n * ```\n *\n * @example\n * ### Handle `throwOnCancel`\n *\n * When `throwOnCancel` is set to `true`, the fetcher will throw a `ClerkRuntimeError` with the code `\"reverification_cancelled\"` if the user cancels the reverification flow (for example, by closing the modal). This error can be caught and handled according to your app's needs. For example, by displaying a toast notification to the user or silently ignoring the cancellation.\n *\n * In this example, `myFetcher` would be a function in your backend that fetches data from the route that requires reverification. See the [guide on how to require reverification](https://clerk.com/docs/guides/reverification) for more information.\n *\n * ```tsx {{ filename: 'src/components/MyButton.tsx' }}\n * import { useReverification } from '@clerk/clerk-react'\n * import { isClerkRuntimeError } from '@clerk/clerk-react/errors'\n *\n * export function MyButton() {\n *   const [enhancedFetcher] = useReverification(myFetcher, { throwOnCancel: true })\n *\n *   const handleClick = async () => {\n *     try {\n *       const myData = await enhancedFetcher()\n *     } catch (e) {\n *       // Handle if user cancels the reverification process\n *       if (isClerkRuntimeError(e) && e.code === 'reverification_cancelled') {\n *         console.error('User cancelled reverification', e.code)\n *       }\n *     }\n *   }\n *\n *   return <button onClick={handleClick}>Update user</button>\n * }\n * ```\n */\nfunction useReverification<\n  Fetcher extends (...args: any[]) => Promise<any> | undefined,\n  Options extends UseReverificationOptions,\n>(fetcher: Fetcher, options?: Options): UseReverificationResult<Fetcher, Options> {\n  const { __internal_openReverification } = useClerk();\n  const fetcherRef = useRef(fetcher);\n  const optionsRef = useRef(options);\n\n  const handleReverification = useMemo(() => {\n    const handler = createReverificationHandler({\n      openUIComponent: __internal_openReverification,\n      ...optionsRef.current,\n    })(fetcherRef.current);\n    return [handler] as const;\n  }, [__internal_openReverification, fetcherRef.current, optionsRef.current]);\n\n  // Keep fetcher and options ref in sync\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n\n  return handleReverification;\n}\n\nexport { useReverification };\n","import type {\n  CheckAuthorizationWithCustomPermissions,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n  ReverificationConfig,\n  SessionVerificationLevel,\n  SessionVerificationTypes,\n} from '@clerk/types';\n\ntype TypesToConfig = Record<SessionVerificationTypes, Exclude<ReverificationConfig, SessionVerificationTypes>>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  factorVerificationAge: [number, number] | null;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  { orgId, orgRole, orgPermissions }: AuthorizationOptions,\n) => boolean | null;\n\ntype CheckStepUpAuthorization = (\n  params: {\n    reverification?: ReverificationConfig;\n  },\n  { factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst TYPES_TO_OBJECTS: TypesToConfig = {\n  strict_mfa: {\n    afterMinutes: 10,\n    level: 'multi_factor',\n  },\n  strict: {\n    afterMinutes: 10,\n    level: 'second_factor',\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: 'second_factor',\n  },\n  lax: {\n    afterMinutes: 1_440,\n    level: 'second_factor',\n  },\n};\n\nconst ALLOWED_LEVELS = new Set<SessionVerificationLevel>(['first_factor', 'second_factor', 'multi_factor']);\n\nconst ALLOWED_TYPES = new Set<SessionVerificationTypes>(['strict_mfa', 'strict', 'moderate', 'lax']);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: any) => typeof maxAge === 'number' && maxAge > 0;\nconst isValidLevel = (level: any) => ALLOWED_LEVELS.has(level);\nconst isValidVerificationType = (type: any) => ALLOWED_TYPES.has(type);\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\n\nconst validateReverificationConfig = (config: ReverificationConfig | undefined | null) => {\n  if (!config) {\n    return false;\n  }\n\n  const convertConfigToObject = (config: ReverificationConfig) => {\n    if (typeof config === 'string') {\n      return TYPES_TO_OBJECTS[config];\n    }\n    return config;\n  };\n\n  const isValidStringValue = typeof config === 'string' && isValidVerificationType(config);\n  const isValidObjectValue =\n    typeof config === 'object' && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);\n\n  if (isValidStringValue || isValidObjectValue) {\n    return convertConfigToObject.bind(null, config);\n  }\n\n  return false;\n};\n\n/**\n * Evaluates if the user meets step-up authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkStepUpAuthorization: CheckStepUpAuthorization = (params, { factorVerificationAge }) => {\n  if (!params.reverification || !factorVerificationAge) {\n    return null;\n  }\n\n  const isValidReverification = validateReverificationConfig(params.reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n\n  const { level, afterMinutes } = isValidReverification();\n  const [factor1Age, factor2Age] = factorVerificationAge;\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'first_factor':\n      return isValidFactor1;\n    case 'second_factor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'multi_factor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and step-up authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nconst createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\n\nexport { createCheckAuthorization, validateReverificationConfig };\n","import type { ReverificationConfig } from '@clerk/types';\n\ntype ClerkError<T> = {\n  clerk_error: T;\n};\n\nconst REVERIFICATION_REASON = 'reverification-error';\n\ntype ReverificationError<M extends { metadata?: any } = { metadata: unknown }> = ClerkError<\n  {\n    type: 'forbidden';\n    reason: typeof REVERIFICATION_REASON;\n  } & M\n>;\n\nconst reverificationError = <MC extends ReverificationConfig>(\n  missingConfig?: MC,\n): ReverificationError<{\n  metadata?: {\n    reverification?: MC;\n  };\n}> => ({\n  clerk_error: {\n    type: 'forbidden',\n    reason: REVERIFICATION_REASON,\n    metadata: {\n      reverification: missingConfig,\n    },\n  },\n});\n\nconst reverificationErrorResponse = (...args: Parameters<typeof reverificationError>) =>\n  new Response(JSON.stringify(reverificationError(...args)), {\n    status: 403,\n  });\n\nconst isReverificationHint = (result: any): result is ReturnType<typeof reverificationError> => {\n  return (\n    result &&\n    typeof result === 'object' &&\n    'clerk_error' in result &&\n    result.clerk_error?.type === 'forbidden' &&\n    result.clerk_error?.reason === REVERIFICATION_REASON\n  );\n};\n\nexport { reverificationError, reverificationErrorResponse, isReverificationHint };\n","import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function isCaptchaError(e: ClerkAPIResponseError): boolean {\n  return ['captcha_invalid', 'captcha_not_enabled', 'captcha_missing_token'].includes(e.errors[0].code);\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any): error is ClerkAPIResponseError | ClerkRuntimeError | MetamaskError {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport function errorToJSON(error: ClerkAPIError | null): ClerkAPIErrorJSON {\n  return {\n    code: error?.code || '',\n    message: error?.message || '',\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    const prefix = '🔒 Clerk:';\n    const regex = new RegExp(prefix.replace(' ', '\\\\s*'), 'i');\n    const sanitized = message.replace(regex, '');\n    const _message = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n    super(_message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = 'ClerkRuntimeError';\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   * @memberof ClerkRuntimeError\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    this.name = 'EmailLinkError' as const;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err.name === 'EmailLinkError';\n}\n\n/** @deprecated Please use `EmailLinkErrorCodeStatus` instead.*/\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nexport const EmailLinkErrorCodeStatus = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n} as const;\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n\ntype ClerkWebAuthnErrorCode =\n  // Generic\n  | 'passkey_not_supported'\n  | 'passkey_pa_not_supported'\n  | 'passkey_invalid_rpID_or_domain'\n  | 'passkey_already_exists'\n  | 'passkey_operation_aborted'\n  // Retrieval\n  | 'passkey_retrieval_cancelled'\n  | 'passkey_retrieval_failed'\n  // Registration\n  | 'passkey_registration_cancelled'\n  | 'passkey_registration_failed';\n\nexport class ClerkWebAuthnError extends ClerkRuntimeError {\n  /**\n   * A unique code identifying the error, can be used for localization.\n   */\n  code: ClerkWebAuthnErrorCode;\n\n  constructor(message: string, { code }: { code: ClerkWebAuthnErrorCode }) {\n    super(message, { code });\n    this.code = code;\n  }\n}\n","export const noop = (..._args: any[]): void => {\n  // do nothing.\n};\n","import { noop } from './noop';\n\ntype Callback = (val?: any) => void;\n\n/**\n * Create a promise that can be resolved or rejected from\n * outside the Promise constructor callback\n */\nexport const createDeferredPromise = () => {\n  let resolve: Callback = noop;\n  let reject: Callback = noop;\n  const promise = new Promise((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return { promise, resolve, reject };\n};\n"],"names":["react_exports","__export","ClerkInstanceContext","ClientContext","OptionsContext","OrganizationProvider","SessionContext","UserContext","assertContextExists","createContextAndHook","isDeeplyEqual","useAssertWrappedByClerkProvider","useClerk","useClerkInstanceContext","useClientContext","useDeepEqualMemo","useOptionsContext","useOrganization","useOrganizationContext","useOrganizationList","useReverification","useSafeLayoutEffect","useSession","useSessionContext","useSessionList","useUser","useUserContext","module","exports","__toCommonJS","import_react","__toESM","require","contextVal","msgOrCtx","Error","displayName","options","assertCtxFn","Ctx","React","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","getCurrentOrganizationMembership","organizationMemberships","organizationId","find","organizationMembership","organization","id","EVENT_METHOD_CALLED","eventMethodCalled","method","payload","event","clerk_swr_exports","useSWR","import_swr","default","useSWRInfinite","import_infinite","__reExport","import_react2","context","OrganizationContextInternal","children","swrConfig","createElement","SWRConfig","Provider","displayNameOrFn","trim","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","shouldUseDefaults","initialPageRef","import_react3","useRef","initialPage","pageSizeRef","pageSize","newObj","key","current","cachingSWROptions","dedupingInterval","focusThrottleInterval","usePagesOrInfinite","fetcher","config","cacheKeys","paginatedPage","setPaginatedPage","useState","enabled","triggerInfinite","infinite","keepPreviousData","pagesCacheKey","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","cacheKeyParams","requestParams","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","useMemo","fetchPage","useCallback","numberOrgFn","map","a","flat","count","length","total_count","isFetching","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","clerk","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","query","invitationsSafeValues","telemetry","record","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","getMembershipRequests","getMemberships","getInvitations","isLoaded","membership","loaded","user","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","createOrganization","setActive","window","import_react4","useLayoutEffect","useEffect","isSignedIn","isomorphicClerk","client","sessions","import_dequal","useDeepEqualMemoize","ref","import_react5","deepEqual","factory","dependencyArray","TYPES_TO_OBJECTS","strict_mfa","afterMinutes","level","strict","moderate","lax","ALLOWED_LEVELS","ALLOWED_TYPES","isValidMaxAge","maxAge","isValidLevel","isValidVerificationType","validateReverificationConfig","convertConfigToObject","isValidStringValue","isValidObjectValue","bind","REVERIFICATION_REASON","reverificationError","missingConfig","clerk_error","reason","metadata","reverification","isReverificationHint","result","isClerkAPIResponseError","err","isClerkRuntimeError","ClerkRuntimeError","_ClerkRuntimeError","constructor","message","code","prefix","regex","RegExp","replace","sanitized","_message","toString","name","setPrototypeOf","prototype","clerkRuntimeError","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","noop","_args","createDeferredPromise","resolve","reject","promise","Promise","res","rej","CLERK_API_REVERIFICATION_ERROR_CODE","resolveResult","r","Response","json","e","errors","createReverificationHandler","assertReverification","args","resolvers","isValidMetadata","openUIComponent","afterVerification","afterVerificationCancelled","onCancel","throwOnCancel","__internal_openReverification","fetcherRef","import_react6","optionsRef","handleReverification","handler"],"rangeMappingsmappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,gBAAA,CAAA;AAAAC,SAAAD,eAAA;IAAAE,sBAAA,IAAAA;IAAAC,eAAA,IAAAA;IAAAC,gBAAA,IAAAA;IAAAC,sBAAA,IAAAA;IAAAC,gBAAA,IAAAA;IAAAC,aAAA,IAAAA;IAAAC,qBAAA,IAAAA;IAAAC,sBAAA,IAAAA;IAAAC,eAAA,IAAAA;IAAAC,iCAAA,IAAAA;IAAAC,UAAA,IAAAA;IAAAC,yBAAA,IAAAA;IAAAC,kBAAA,IAAAA;IAAAC,kBAAA,IAAAA;IAAAC,mBAAA,IAAAA;IAAAC,iBAAA,IAAAA;IAAAC,wBAAA,IAAAA;IAAAC,qBAAA,IAAAA;IAAAC,mBAAA,IAAAA;IAAAC,qBAAA,IAAAA;IAAAC,YAAA,IAAAA;IAAAC,mBAAA,IAAAA;IAAAC,gBAAA,IAAAA;IAAAC,SAAA,IAAAA;IAAAC,gBAAA,IAAAA;AAAA;AAAAC,OAAAC,OAAA,GAAAC,aAAA7B;;ACCA,IAAA8B,eAAkBC,QAAAC,QAAA;AAEX,SAASxB,oBAAoByB,UAAA,EAAqBC,QAAA;IACvD,IAAI,CAACD,YAAY;QACf,MAAM,OAAOC,aAAa,WAAW,IAAIC,MAAMD,YAAY,IAAIC,MAAM,CAAA,EAAGD,SAASE,WAAW,CAAA,UAAA,CAAY;IAC1G;AACF;AAYO,IAAM3B,uBAAuB,CAClC2B,aACAC;IAEA,MAAM,EAAEC,cAAc9B,mBAAA,EAAoB,GAAI6B,WAAW,CAAC;IAC1D,MAAME,MAAMT,aAAAU,OAAAA,CAAMC,aAAA,CAA6C,KAAA;IAC/DF,IAAIH,WAAA,GAAcA;IAElB,MAAMM,SAAS;QACb,MAAMC,MAAMb,aAAAU,OAAAA,CAAMI,UAAA,CAAWL;QAC7BD,YAAYK,KAAK,CAAA,EAAGP,YAAW,UAAA,CAAY;QAC3C,OAAQO,IAAYE,KAAA;IACtB;IAEA,MAAMC,yBAAyB;QAC7B,MAAMH,MAAMb,aAAAU,OAAAA,CAAMI,UAAA,CAAWL;QAC7B,OAAOI,MAAMA,IAAIE,KAAA,GAAQ,CAAC;IAC5B;IAEA,OAAO;QAACN;QAAKG;QAAQI;KAAsB;AAC7C;;AC/BO,SAASC,iCACdC,uBAAA,EACAC,cAAA;IAEA,OAAOD,wBAAwBE,IAAA,CAC7B,CAAAC,yBAA0BA,uBAAuBC,YAAA,CAAaC,EAAA,KAAOJ;AAEzE;;ACbA,IAAMK,sBAAsB;AASrB,SAASC,kBACdC,MAAA,EACAC,OAAA;IAEA,OAAO;QACLC,OAAOJ;QACPG,SAAS;YACPD;WACGC;IAEP;AACF;;ACXA,IAAA3B,gBAAkBC,QAAAC,QAAA;;ACXlB,IAAA2B,oBAAA,CAAA;AAAA1D,SAAA0D,mBAAA;IAAAC,QAAA,IAAAC,WAAAC,OAAA;IAAAC,gBAAA,IAAAC,gBAAAF,OAAA;AAAA;AAEAG,WAAAN,mBAAc3B,QAAA;AAEd,IAAA6B,aAAkC9B,QAAAC,QAAA;AAClC,IAAAgC,kBAA0CjC,QAAAC,QAAA;;ADW1C,IAAM,CAAC9B,sBAAsBW,wBAAuB,GAAIJ,qBAAkC;AAC1F,IAAM,CAACF,aAAamB,eAAc,GAAIjB,qBAAsD;AAC5F,IAAM,CAACN,eAAeW,iBAAgB,GAAIL,qBAAwD;AAClG,IAAM,CAACH,gBAAgBiB,kBAAiB,GAAId,qBAC1C;AAGF,IAAML,iBAAiB8D,cAAA1B,OAAAA,CAAMC,aAAA,CAA4B,CAAC;AAE1D,SAASzB;IACP,MAAMmD,UAAUD,cAAA1B,OAAAA,CAAMI,UAAA,CAAWxC;IACjC,IAAI+D,YAAY,KAAA,GAAW;QACzB,MAAM,IAAIhC,MAAM;IAClB;IACA,OAAOgC;AACT;AAKA,IAAM,CAACC,6BAA6BlD,uBAAsB,GAAIT,qBAE3D;AAEH,IAAMJ,uBAAuB,CAAC,EAC5BgE,QAAA,EACAjB,YAAA,EACAkB,SAAA,EACF;IAME,OACE,aAAA,GAAAJ,cAAA1B,OAAAA,CAAA+B,aAAA,CAACZ,kBAAAa,SAAA,EAAA;QAAU3B,OAAOyB;IAAA,GAChB,aAAA,GAAAJ,cAAA1B,OAAAA,CAAA+B,aAAA,CAACH,4BAA4BK,QAAA,EAA5B;QACC5B,OAAO;YACLA,OAAO;gBAAEO;YAAa;QACxB;IAAA,GAECiB;AAIT;AAEA,SAAS1D,gCAAgC+D,eAAA;IACvC,MAAM/B,MAAMuB,cAAA1B,OAAAA,CAAMI,UAAA,CAAW1C;IAE7B,IAAI,CAACyC,KAAK;QACR,IAAI,OAAO+B,oBAAoB,YAAY;YACzCA;YACA;QACF;QAEA,MAAM,IAAIvC,MACR,CAAA,EAAGuC,gBAAe;;;;;;4DAAA,CAAA,CAMsCC,IAAA;IAE5D;AACF;;AEhFA,IAAA7C,gBAAuDE,QAAA;AAWvD,SAAS4C,iBAAiBC,IAAA,EAA+BC,IAAA;IACvD,MAAMC,UAAU,IAAIC,IAAIC,OAAOC,IAAA,CAAKJ;IACpC,MAAMK,sBAA+C,CAAC;IAEtD,KAAA,MAAWC,QAAQH,OAAOC,IAAA,CAAKL,MAAO;QACpC,IAAI,CAACE,QAAQM,GAAA,CAAID,OAAO;YACtBD,mBAAA,CAAoBC,KAAI,GAAIP,IAAA,CAAKO,KAAI;QACvC;IACF;IAEA,OAAOD;AACT;AAEO,IAAMG,oBAAoB,CAAmCC,QAA8BC;IAChG,MAAMC,oBAAoB,OAAOF,WAAW,aAAaA;QAINA;IADnD,MAAMG,iBAAA,CAAA,GAAiBC,cAAAC,MAAA,EACrBH,oBAAoBD,cAAcK,WAAA,GAAeN,CAAAA,sBAAAA,mBAAAA,6BAAAA,OAAQM,WAAA,cAARN,iCAAAA,sBAAuBC,cAAcK,WAAA;QAEfN;IAAzE,MAAMO,cAAA,CAAA,GAAcH,cAAAC,MAAA,EAAOH,oBAAoBD,cAAcO,QAAA,GAAYR,CAAAA,mBAAAA,mBAAAA,6BAAAA,OAAQQ,QAAA,cAARR,8BAAAA,mBAAoBC,cAAcO,QAAS;IAEpH,MAAMC,SAAkC,CAAC;IACzC,KAAA,MAAWC,OAAOhB,OAAOC,IAAA,CAAKM,eAAgB;YAEYD;QAAxDS,MAAA,CAAOC,IAAG,GAAIR,oBAAoBD,aAAA,CAAcS,IAAG,GAAKV,CAAAA,cAAAA,mBAAAA,6BAAAA,MAAA,CAASU,IAAG,cAAZV,yBAAAA,cAAiBC,aAAA,CAAcS,IAAG;IAC5F;IAEA,OAAO,wCACFD;QACHH,aAAaH,eAAeQ,OAAA;QAC5BH,UAAUD,YAAYI,OAAA;;AAE1B;AAEA,IAAMC,oBAAoB;IACxBC,kBAAkB,MAAO;IACzBC,uBAAuB,MAAO,KAAK;AACrC;AA0BO,IAAMC,qBAAyC,CAACf,QAAQgB,SAASC,QAAQC;QAC3BlB;IAAnD,MAAM,CAACmB,eAAeC,iBAAgB,GAAA,CAAA,GAAIhB,cAAAiB,QAAA,EAASrB,CAAAA,sBAAAA,OAAOM,WAAA,cAAPN,iCAAAA,sBAAsB;QAG3CA;IAA9B,MAAMG,iBAAA,CAAA,GAAiBC,cAAAC,MAAA,EAAOL,CAAAA,uBAAAA,OAAOM,WAAA,cAAPN,kCAAAA,uBAAsB;QACzBA;IAA3B,MAAMO,cAAA,CAAA,GAAcH,cAAAC,MAAA,EAAOL,CAAAA,mBAAAA,OAAOQ,QAAA,cAAPR,8BAAAA,mBAAmB;QAE9BiB;IAAhB,MAAMK,UAAUL,CAAAA,kBAAAA,OAAOK,OAAA,cAAPL,6BAAAA,kBAAkB;QACVA;IAAxB,MAAMM,kBAAkBN,CAAAA,mBAAAA,OAAOO,QAAA,cAAPP,8BAAAA,mBAAmB;QAClBA;IAAzB,MAAMQ,mBAAmBR,CAAAA,2BAAAA,OAAOQ,gBAAA,cAAPR,sCAAAA,2BAA2B;IAEpD,MAAMS,gBAAgB,wCACjBR,WACAlB;QACHM,aAAaa;QACbX,UAAUD,YAAYI,OAAA;;IAGxB,MAAM,EACJgB,MAAMC,OAAA,EACNC,cAAcC,eAAA,EACdC,WAAWC,YAAA,EACXC,OAAOC,QAAA,EACPC,QAAQC,SAAA,EACV,GAAA,CAAA,GAAI9D,WAAAC,OAAA,EACF,CAACgD,mBAAmB,CAAC,CAACP,WAAWM,UAAUI,gBAAgB,MAC3D,CAAAW;QAEE,MAAMC,gBAAgBjD,iBAAiBgD,gBAAgBnB;QAEvD,OAAOF,oBAAAA,8BAAAA,QAAUsB;IACnB,GACA;QAAEb;OAAqBb;IAGzB,MAAM,EACJe,MAAMY,eAAA,EACNR,WAAWS,oBAAA,EACXX,cAAcY,uBAAA,EACdR,OAAOS,gBAAA,EACPC,IAAA,EACAC,OAAA,EACAT,QAAQU,iBAAA,EACV,GAAA,CAAA,GAAIpE,gBAAAF,OAAA,EACF,CAAAuE;QACE,IAAI,CAACvB,mBAAmB,CAACD,SAAS;YAChC,OAAO;QACT;QAEA,OAAO,wCACFtB,QACAkB;YACHZ,aAAaH,eAAeQ,OAAA,GAAUmC;YACtCtC,UAAUD,YAAYI,OAAA;;IAE1B,GACA,CAAA0B;QAEE,MAAMC,gBAAgBjD,iBAAiBgD,gBAAgBnB;QAEvD,OAAOF,oBAAAA,8BAAAA,QAAUsB;IACnB,GACA1B;IAGF,MAAMmC,OAAA,CAAA,GAAO3C,cAAA4C,OAAA,EAAQ;QACnB,IAAIzB,iBAAiB;YACnB,OAAOoB;QACT;QACA,OAAOxB;IACT,GAAG;QAACI;QAAiBoB;QAAMxB;KAAc;IAEzC,MAAM8B,YAAA,CAAA,GAAmC7C,cAAA8C,WAAA,EACvC,CAAAC;QACE,IAAI5B,iBAAiB;YACnB,KAAKqB,QAAQO;YACb;QACF;QACA,OAAO/B,iBAAiB+B;IAC1B,GACA;QAACP;KAAO;IAGV,MAAMjB,OAAA,CAAA,GAAOvB,cAAA4C,OAAA,EAAQ;QACnB,IAAIzB,iBAAiB;gBACZgB;YAAP,OAAOA,CAAAA,4BAAAA,4BAAAA,sCAAAA,gBAAiBa,GAAA,CAAI,CAAAC,IAAKA,cAAAA,wBAAAA,EAAG1B,IAAI,EAAE2B,IAAA,gBAAnCf,uCAAAA,4BAA6C,EAAC;QACvD;YACOX;QAAP,OAAOA,CAAAA,gBAAAA,oBAAAA,8BAAAA,QAASD,IAAA,cAATC,2BAAAA,gBAAiB,EAAC;IAC3B,GAAG;QAACL;QAAiBK;QAASW;KAAgB;IAE9C,MAAMgB,QAAA,CAAA,GAAQnD,cAAA4C,OAAA,EAAQ;QACpB,IAAIzB,iBAAiB;gBACZgB;YAAP,OAAOA,CAAAA,4BAAAA,uCAAAA,oBAAAA,eAAA,CAAkBA,CAAAA,4BAAAA,sCAAAA,gBAAiBiB,MAAA,IAAS,EAAC,cAA7CjB,wCAAAA,kBAAgDkB,WAAA,KAAe;QACxE;YACO7B;QAAP,OAAOA,CAAAA,uBAAAA,oBAAAA,8BAAAA,QAAS6B,WAAA,cAAT7B,kCAAAA,uBAAwB;IACjC,GAAG;QAACL;QAAiBK;QAASW;KAAgB;IAE9C,MAAMR,YAAYR,kBAAkBiB,uBAAuBR;IAC3D,MAAM0B,aAAanC,kBAAkBkB,0BAA0BX;QAChDP;IAAf,MAAMU,QAAA,CAASV,OAAAA,kBAAkBmB,mBAAmBR,sBAArCX,kBAAAA,OAAkD;IACjE,MAAMoC,UAAU,CAAC,CAAC1B;IAIlB,MAAM2B,YAAA,CAAA,GAAYxD,cAAA8C,WAAA,EAAY;QAC5BD,UAAU,CAAAY,IAAKC,KAAKC,GAAA,CAAI,GAAGF,IAAI;IACjC,GAAG;QAACZ;KAAU;IAEd,MAAMe,gBAAA,CAAA,GAAgB5D,cAAA8C,WAAA,EAAY;QAChCD,UAAU,CAAAY,IAAKC,KAAKC,GAAA,CAAI,GAAGF,IAAI;IACjC,GAAG;QAACZ;KAAU;IAEd,MAAMgB,cAAA,AAAe9D,CAAAA,eAAeQ,OAAA,GAAU,CAAA,IAAKJ,YAAYI,OAAA;IAE/D,MAAMuD,YAAYJ,KAAKK,IAAA,CAAA,AAAMZ,CAAAA,QAAQU,WAAA,IAAe1D,YAAYI,OAAO;IACvE,MAAMyD,cAAcb,QAAQU,cAAc1D,YAAYI,OAAA,GAAUoC,OAAOxC,YAAYI,OAAA;IACnF,MAAM0D,kBAAA,AAAmBtB,CAAAA,OAAO,CAAA,IAAKxC,YAAYI,OAAA,GAAUsD,cAAc1D,YAAYI,OAAA;IAErF,MAAM2D,UAAuB/C,kBACzB,CAAAjE,QACEuF,kBAAkBvF,OAAO;YACvBiH,YAAY;QACd,KACF,CAAAjH,QACE8E,UAAU9E,OAAO;YACfiH,YAAY;QACd;IAEN,MAAMA,aAAahD,kBAAkB,IAAMsB,sBAAsB,IAAMT;IAEvE,OAAO;QACLT;QACA4B;QACAtB;QACAF;QACA2B;QACAC;QACAZ;QACAmB;QACAjB;QACAW;QACAI;QACAI;QACAC;QAAA,4CAAA;QAEAE;QAAA,4CAAA;QAEAD;IACF;AACF;;AC7EA,IAAME,6BAA6B;IACjC7C,MAAM,KAAA;IACN4B,OAAO,KAAA;IACPtB,OAAO,KAAA;IACPF,WAAW;IACX2B,YAAY;IACZC,SAAS;IACTZ,MAAM,KAAA;IACNmB,WAAW,KAAA;IACXjB,WAAW,KAAA;IACXW,WAAW,KAAA;IACXI,eAAe,KAAA;IACfI,aAAa;IACbC,iBAAiB;IACjBE,YAAY,KAAA;IACZD,SAAS,KAAA;AACX;AAKO,IAAM5I,kBAAmC,CAAAsE;QAgD9CyE;IA/CA,MAAM,EACJC,SAASC,gBAAA,EACTC,oBAAoBC,4BAAA,EACpBC,aAAaC,iBAAA,EACbC,aAAaC,qBAAA,EACf,GAAIjF,UAAU,CAAC;IAEf5E,gCAAgC;IAEhC,MAAM,EAAEyC,YAAA,EAAa,GAAIlC;IACzB,MAAMuJ,UAAUlJ;IAEhB,MAAMmJ,mBAAmBpF,kBAAkB4E,kBAAkB;QAC3DrE,aAAa;QACbE,UAAU;QACViB,kBAAkB;QAClBD,UAAU;QACV4D,gBAAgB,KAAA;IAClB;IAEA,MAAMC,8BAA8BtF,kBAAkB8E,8BAA8B;QAClFvE,aAAa;QACbE,UAAU;QACV8E,QAAQ;QACR7D,kBAAkB;QAClBD,UAAU;IACZ;IAEA,MAAM+D,oBAAoBxF,kBAAkBgF,mBAAmB;QAC7DzE,aAAa;QACbE,UAAU;QACVgF,MAAM,KAAA;QACN/D,kBAAkB;QAClBD,UAAU;QACViE,OAAO,KAAA;IACT;IAEA,MAAMC,wBAAwB3F,kBAAkBkF,uBAAuB;QACrE3E,aAAa;QACbE,UAAU;QACV8E,QAAQ;YAAC;SAAS;QAClB7D,kBAAkB;QAClBD,UAAU;IACZ;IAEA,MAAMiD,QAAQnJ;KAEdmJ,mBAAAA,MAAMkB,SAAA,cAANlB,uCAAAA,iBAAiBmB,MAAA,CAAO5H,kBAAkB;IAE1C,MAAM6H,eACJ,OAAOlB,qBAAqB,cACxB,KAAA,IACA;QACErE,aAAa6E,iBAAiB7E,WAAA;QAC9BE,UAAU2E,iBAAiB3E,QAAA;QAC3B4E,gBAAgBD,iBAAiBC,cAAA;IACnC;IAEN,MAAMU,0BACJ,OAAOjB,iCAAiC,cACpC,KAAA,IACA;QACEvE,aAAa+E,4BAA4B/E,WAAA;QACzCE,UAAU6E,4BAA4B7E,QAAA;QACtC8E,QAAQD,4BAA4BC,MAAA;IACtC;IAEN,MAAMS,gBACJ,OAAOhB,sBAAsB,cACzB,KAAA,IACA;QACEzE,aAAaiF,kBAAkBjF,WAAA;QAC/BE,UAAU+E,kBAAkB/E,QAAA;QAC5BgF,MAAMD,kBAAkBC,IAAA;QACxBC,OAAOF,kBAAkBE,KAAA;IAC3B;IAEN,MAAMO,oBACJ,OAAOf,0BAA0B,cAC7B,KAAA,IACA;QACE3E,aAAaoF,sBAAsBpF,WAAA;QACnCE,UAAUkF,sBAAsBlF,QAAA;QAChC8E,QAAQI,sBAAsBJ,MAAA;IAChC;IAEN,MAAMZ,UAAU3D,mBACd,mBACK8E,eAELhI,yBAAAA,mCAAAA,aAAcoI,UAAA,EACd;QACExE,kBAAkB0D,iBAAiB1D,gBAAA;QACnCD,UAAU2D,iBAAiB3D,QAAA;QAC3BF,SAAS,CAAC,CAACuE;IACb,GACA;QACEK,MAAM;QACNxI,cAAA,EAAgBG,yBAAAA,mCAAAA,aAAcC,EAAA;IAChC;IAGF,MAAM8G,qBAAqB7D,mBAIzB,mBACK+E,0BAELjI,yBAAAA,mCAAAA,aAAcsI,qBAAA,EACd;QACE1E,kBAAkB4D,4BAA4B5D,gBAAA;QAC9CD,UAAU6D,4BAA4B7D,QAAA;QACtCF,SAAS,CAAC,CAACwE;IACb,GACA;QACEI,MAAM;QACNxI,cAAA,EAAgBG,yBAAAA,mCAAAA,aAAcC,EAAA;IAChC;IAGF,MAAMgH,cAAc/D,mBAClBgF,iBAAiB,CAAC,GAClBlI,yBAAAA,mCAAAA,aAAcuI,cAAA,EACd;QACE3E,kBAAkB8D,kBAAkB9D,gBAAA;QACpCD,UAAU+D,kBAAkB/D,QAAA;QAC5BF,SAAS,CAAC,CAACyE;IACb,GACA;QACEG,MAAM;QACNxI,cAAA,EAAgBG,yBAAAA,mCAAAA,aAAcC,EAAA;IAChC;IAGF,MAAMkH,cAAcjE,mBAClB,mBACKiF,oBAELnI,yBAAAA,mCAAAA,aAAcwI,cAAA,EACd;QACE5E,kBAAkBiE,sBAAsBjE,gBAAA;QACxCD,UAAUkE,sBAAsBlE,QAAA;QAChCF,SAAS,CAAC,CAAC0E;IACb,GACA;QACEE,MAAM;QACNxI,cAAA,EAAgBG,yBAAAA,mCAAAA,aAAcC,EAAA;IAChC;IAGF,IAAID,iBAAiB,KAAA,GAAW;QAC9B,OAAO;YACLyI,UAAU;YACVzI,cAAc,KAAA;YACd0I,YAAY,KAAA;YACZ7B,SAASF;YACTI,oBAAoBJ;YACpBM,aAAaN;YACbQ,aAAaR;QACf;IACF;IAEA,IAAI3G,iBAAiB,MAAM;QACzB,OAAO;YACLyI,UAAU;YACVzI,cAAc;YACd0I,YAAY;YACZ7B,SAAS;YACTE,oBAAoB;YACpBE,aAAa;YACbE,aAAa;QACf;IACF;IAGA,IAAI,CAACP,MAAM+B,MAAA,IAAU3I,cAAc;QACjC,OAAO;YACLyI,UAAU;YACVzI;YACA0I,YAAY,KAAA;YACZ7B,SAASF;YACTI,oBAAoBJ;YACpBM,aAAaN;YACbQ,aAAaR;QACf;IACF;IAEA,OAAO;QACL8B,UAAU7B,MAAM+B,MAAA;QAChB3I;QACA0I,YAAY/I,iCAAiC0H,QAASuB,IAAA,CAAKhJ,uBAAA,EAAyBI,aAAaC,EAAE;QAAA,qCAAA;QACnG4G;QACAE;QACAE;QACAE;IACF;AACF;;AC/UA,IAAMR,8BAA6B;IACjC7C,MAAM,KAAA;IACN4B,OAAO,KAAA;IACPtB,OAAO,KAAA;IACPF,WAAW;IACX2B,YAAY;IACZC,SAAS;IACTZ,MAAM,KAAA;IACNmB,WAAW,KAAA;IACXjB,WAAW,KAAA;IACXW,WAAW,KAAA;IACXI,eAAe,KAAA;IACfI,aAAa;IACbC,iBAAiB;IACjBE,YAAY,KAAA;IACZD,SAAS,KAAA;AACX;AAsEO,IAAM1I,sBAA2C,CAAAoE;QA+BtDyE;IA9BA,MAAM,EAAEiC,eAAA,EAAiBC,eAAA,EAAiBC,eAAA,EAAgB,GAAI5G,UAAU,CAAC;IAEzE5E,gCAAgC;IAEhC,MAAMyL,4BAA4B9G,kBAAkB2G,iBAAiB;QACnEpG,aAAa;QACbE,UAAU;QACViB,kBAAkB;QAClBD,UAAU;IACZ;IAEA,MAAMsF,4BAA4B/G,kBAAkB4G,iBAAiB;QACnErG,aAAa;QACbE,UAAU;QACV8E,QAAQ;QACR7D,kBAAkB;QAClBD,UAAU;IACZ;IAEA,MAAMuF,4BAA4BhH,kBAAkB6G,iBAAiB;QACnEtG,aAAa;QACbE,UAAU;QACV8E,QAAQ;QACR7D,kBAAkB;QAClBD,UAAU;IACZ;IAEA,MAAMiD,QAAQnJ;IACd,MAAMmL,OAAOtK;KAEbsI,mBAAAA,MAAMkB,SAAA,cAANlB,uCAAAA,iBAAiBmB,MAAA,CAAO5H,kBAAkB;IAE1C,MAAMgJ,wBACJ,OAAON,oBAAoB,cACvB,KAAA,IACA;QACEpG,aAAauG,0BAA0BvG,WAAA;QACvCE,UAAUqG,0BAA0BrG,QAAA;IACtC;IAEN,MAAMyG,wBACJ,OAAON,oBAAoB,cACvB,KAAA,IACA;QACErG,aAAawG,0BAA0BxG,WAAA;QACvCE,UAAUsG,0BAA0BtG,QAAA;QACpC8E,QAAQwB,0BAA0BxB,MAAA;IACpC;IAEN,MAAM4B,wBACJ,OAAON,oBAAoB,cACvB,KAAA,IACA;QACEtG,aAAayG,0BAA0BzG,WAAA;QACvCE,UAAUuG,0BAA0BvG,QAAA;QACpC8E,QAAQyB,0BAA0BzB,MAAA;IACpC;IAEN,MAAM6B,gBAAgB,CAAC,CAAE1C,CAAAA,MAAM+B,MAAA,IAAUC,IAAA;IAEzC,MAAM3B,cAAc/D,mBAIlBiG,yBAAyB,CAAC,GAC1BP,iBAAAA,2BAAAA,KAAMW,0BAAA,EACN;QACE3F,kBAAkBoF,0BAA0BpF,gBAAA;QAC5CD,UAAUqF,0BAA0BrF,QAAA;QACpCF,SAAS,CAAC,CAAC0F;IACb,GACA;QACEd,MAAM;QACNmB,MAAA,EAAQZ,iBAAAA,2BAAAA,KAAM3I,EAAA;IAChB;IAGF,MAAMkH,cAAcjE,mBAIlB,mBACKkG,wBAELR,iBAAAA,2BAAAA,KAAMa,0BAAA,EACN;QACE7F,kBAAkBqF,0BAA0BrF,gBAAA;QAC5CD,UAAUsF,0BAA0BtF,QAAA;QACpCF,SAAS,CAAC,CAAC2F;IACb,GACA;QACEf,MAAM;QACNmB,MAAA,EAAQZ,iBAAAA,2BAAAA,KAAM3I,EAAA;IAChB;IAGF,MAAMyJ,cAAcxG,mBAIlB,mBACKmG,wBAELT,iBAAAA,2BAAAA,KAAMe,0BAAA,EACN;QACE/F,kBAAkBsF,0BAA0BtF,gBAAA;QAC5CD,UAAUuF,0BAA0BvF,QAAA;QACpCF,SAAS,CAAC,CAAC4F;IACb,GACA;QACEhB,MAAM;QACNmB,MAAA,EAAQZ,iBAAAA,2BAAAA,KAAM3I,EAAA;IAChB;IAIF,IAAI,CAACqJ,eAAe;QAClB,OAAO;YACLb,UAAU;YACVmB,oBAAoB,KAAA;YACpBC,WAAW,KAAA;YACXhB,iBAAiBlC;YACjBmC,iBAAiBnC;YACjBoC,iBAAiBpC;QACnB;IACF;IAEA,OAAO;QACL8B,UAAUa;QACVO,WAAWjD,MAAMiD,SAAA;QACjBD,oBAAoBhD,MAAMgD,kBAAA;QAC1Bf,iBAAiB5B;QACjB6B,iBAAiB3B;QACjB4B,iBAAiBW;IACnB;AACF;;AC/PA,IAAAhL,gBAAkBC,QAAAC,QAAA;AAEX,IAAMX,sBAAsB,OAAO6L,WAAW,cAAcC,cAAA3K,OAAAA,CAAM4K,eAAA,GAAkBD,cAAA3K,OAAAA,CAAM6K,SAAA;;ACmC1F,IAAM/L,aAAyB;IACpCX,gCAAgC;IAEhC,MAAM8J,UAAUlJ;IAEhB,IAAIkJ,YAAY,KAAA,GAAW;QACzB,OAAO;YAAEoB,UAAU;YAAOyB,YAAY,KAAA;YAAW7C,SAAS,KAAA;QAAU;IACtE;IAEA,IAAIA,YAAY,MAAM;QACpB,OAAO;YAAEoB,UAAU;YAAMyB,YAAY;YAAO7C,SAAS;QAAK;IAC5D;IAEA,OAAO;QAAEoB,UAAU;QAAMyB,YAAY;QAAM7C;IAAQ;AACrD;;ACpBO,IAAMjJ,iBAAiB;IAC5Bb,gCAAgC;IAEhC,MAAM4M,kBAAkB1M;IACxB,MAAM2M,SAAS1M;IAEf,IAAI,CAAC0M,QAAQ;QACX,OAAO;YAAE3B,UAAU;YAAO4B,UAAU,KAAA;YAAWR,WAAW,KAAA;QAAU;IACtE;IAEA,OAAO;QACLpB,UAAU;QACV4B,UAAUD,OAAOC,QAAA;QACjBR,WAAWM,gBAAgBN,SAAA;IAC7B;AACF;;ACyDO,SAASxL;IACdd,gCAAgC;IAEhC,MAAMqL,OAAOtK;IAEb,IAAIsK,SAAS,KAAA,GAAW;QACtB,OAAO;YAAEH,UAAU;YAAOyB,YAAY,KAAA;YAAWtB,MAAM,KAAA;QAAU;IACnE;IAEA,IAAIA,SAAS,MAAM;QACjB,OAAO;YAAEH,UAAU;YAAMyB,YAAY;YAAOtB,MAAM;QAAK;IACzD;IAEA,OAAO;QAAEH,UAAU;QAAMyB,YAAY;QAAMtB;IAAK;AAClD;;AC3FO,IAAMpL,WAAW;IACtBD,gCAAgC;IAChC,OAAOE;AACT;;AC7BA,IAAA6M,gBAAoC1L,QAAA;AACpC,IAAAF,gBAAkBC,QAAAC,QAAA;AAMlB,IAAM2L,sBAAsB,CAAI9K;IAC9B,MAAM+K,MAAMC,cAAArL,OAAAA,CAAMoD,MAAA,CAAU/C;IAC5B,IAAI,CAAA,CAAA,GAAC6K,cAAAI,MAAAA,EAAUjL,OAAO+K,IAAI1H,OAAO,GAAG;QAClC0H,IAAI1H,OAAA,GAAUrD;IAChB;IACA,OAAOgL,cAAArL,OAAAA,CAAM+F,OAAA,CAAQ,IAAMqF,IAAI1H,OAAA,EAAS;QAAC0H,IAAI1H,OAAO;KAAC;AACvD;AAEO,IAAMnF,mBAAqC,CAACgN,SAASC;IAC1D,OAAOH,cAAArL,OAAAA,CAAM+F,OAAA,CAAQwF,SAASJ,oBAAoBK;AACpD;AAEO,IAAMtN,gBAAgBgN,cAAAI,MAAAA;;AClB7B,IAAAhM,gBAAgCE,QAAA;;AC6BhC,IAAMiM,mBAAkC;IACtCC,YAAY;QACVC,cAAc;QACdC,OAAO;IACT;IACAC,QAAQ;QACNF,cAAc;QACdC,OAAO;IACT;IACAE,UAAU;QACRH,cAAc;QACdC,OAAO;IACT;IACAG,KAAK;QACHJ,cAAc;QACdC,OAAO;IACT;AACF;AAEA,IAAMI,iBAAiB,aAAA,GAAA,IAAIxJ,IAA8B;IAAC;IAAgB;IAAiB;CAAe;AAE1G,IAAMyJ,gBAAgB,aAAA,GAAA,IAAIzJ,IAA8B;IAAC;IAAc;IAAU;IAAY;CAAM;AAGnG,IAAM0J,gBAAgB,CAACC,SAAgB,OAAOA,WAAW,YAAYA,SAAS;AAC9E,IAAMC,eAAe,CAACR,QAAeI,eAAenJ,GAAA,CAAI+I;AACxD,IAAMS,0BAA0B,CAACpD,OAAcgD,cAAcpJ,GAAA,CAAIoG;AAyBjE,IAAMqD,+BAA+B,CAACtI;IACpC,IAAI,CAACA,QAAQ;QACX,OAAO;IACT;IAEA,MAAMuI,wBAAwB,CAACvI;QAC7B,IAAI,OAAOA,YAAW,UAAU;YAC9B,OAAOyH,gBAAA,CAAiBzH,QAAM;QAChC;QACA,OAAOA;IACT;IAEA,MAAMwI,qBAAqB,OAAOxI,WAAW,YAAYqI,wBAAwBrI;IACjF,MAAMyI,qBACJ,OAAOzI,WAAW,YAAYoI,aAAapI,OAAO4H,KAAK,KAAKM,cAAclI,OAAO2H,YAAY;IAE/F,IAAIa,sBAAsBC,oBAAoB;QAC5C,OAAOF,sBAAsBG,IAAA,CAAK,MAAM1I;IAC1C;IAEA,OAAO;AACT;;AChGA,IAAM2I,wBAAwB;AAS9B,IAAMC,sBAAsB,CAC1BC,gBAKK,CAAA;QACLC,aAAa;YACX7D,MAAM;YACN8D,QAAQJ;YACRK,UAAU;gBACRC,gBAAgBJ;YAClB;QACF;IACF,CAAA;AAOA,IAAMK,uBAAuB,CAACC;QAK1BA,qBACAA;IALF,OACEA,UACA,OAAOA,WAAW,YAClB,iBAAiBA,UACjBA,EAAAA,sBAAAA,OAAOL,WAAA,cAAPK,0CAAAA,oBAAoBlE,IAAA,MAAS,eAC7BkE,EAAAA,uBAAAA,OAAOL,WAAA,cAAPK,2CAAAA,qBAAoBJ,MAAA,MAAWJ;AAEnC;;ACHO,SAASS,wBAAwBC,GAAA;IACtC,OAAO,gBAAgBA;AACzB;AAkBO,SAASC,oBAAoBD,GAAA;IAClC,OAAO,uBAAuBA;AAChC;AAyFO,IAAME,oBAAN,MAAMC,2BAA0B7N;IAmBrC8N,YAAYC,OAAA,EAAiB,EAAEC,IAAA,EAAK,CAAqB;QACvD,MAAMC,SAAS;QACf,MAAMC,QAAQ,IAAIC,OAAOF,OAAOG,OAAA,CAAQ,KAAK,SAAS;QACtD,MAAMC,YAAYN,QAAQK,OAAA,CAAQF,OAAO;QACzC,MAAMI,WAAW,CAAA,EAAGL,OAAM,CAAA,EAAII,UAAU7L,IAAA,GAAM;;OAAA,EAAcwL,KAAI;AAAA,CAAA;QAChE,KAAA,CAAMM;QAgBR;;;;;KAAA,GAAA,IAAA,CAAOC,QAAA,GAAW;YAChB,OAAO,CAAA,CAAA,EAAI,IAAA,CAAKC,IAAI,CAAA;QAAA,EAAc,IAAA,CAAKT,OAAO,CAAA,CAAA;QAChD;QAhBEjL,OAAO2L,cAAA,CAAe,IAAA,EAAMZ,mBAAkBa,SAAS;QAEvD,IAAA,CAAKV,IAAA,GAAOA;QACZ,IAAA,CAAKD,OAAA,GAAUO;QACf,IAAA,CAAKK,iBAAA,GAAoB;QACzB,IAAA,CAAKH,IAAA,GAAO;IACd;AAWF;AA8BA,IAAMI,kBAAkB9L,OAAO+L,MAAA,CAAO;IACpCC,6BAA6B,CAAA,gJAAA,CAAA;IAC7BC,mCAAmC,CAAA,uJAAA,CAAA;IACnCC,mCAAmC,CAAA,sGAAA,CAAA;IACnCC,8BAA8B,CAAA,iGAAA,CAAA;IAC9BC,sBAAsB,CAAA,gIAAA,CAAA;AACxB;;ACvOO,IAAMC,OAAO,CAAA,GAAIC,SAExB;;ACMO,IAAMC,wBAAwB;IACnC,IAAIC,UAAoBH;IACxB,IAAII,SAAmBJ;IACvB,MAAMK,UAAU,IAAIC,QAAQ,CAACC,KAAKC;QAChCL,UAAUI;QACVH,SAASI;IACX;IACA,OAAO;QAAEH;QAASF;QAASC;IAAO;AACpC;;ALNA,IAAMK,sCAAsC;AAE5C,eAAeC,cAAiBrC,MAAA;IAC9B,IAAI;QACF,MAAMsC,IAAI,MAAMtC;QAChB,IAAIsC,aAAaC,UAAU;YACzB,OAAOD,EAAEE,IAAA;QACX;QACA,OAAOF;IACT,EAAA,OAASG,GAAG;QAEV,IAAIxC,wBAAwBwC,MAAMA,EAAEC,MAAA,CAAOnP,IAAA,CAAK,CAAC,EAAEiN,IAAA,EAAK,GAAMA,SAAS4B,sCAAsC;YAC3G,OAAO3C;QACT;QAGA,MAAMgD;IACR;AACF;AAsBA,SAASE,4BAA4B/M,MAAA;IACnC,SAASgN,qBACPhM,OAAA;QAIA,OAAQ,OAAA,GAAUiM;YAChB,IAAI7C,SAAS,MAAMqC,cAAczL,WAAWiM;YAE5C,IAAI9C,qBAAqBC,SAAS;oBAMqBA,8BAMrDpK;gBARA,MAAMkN,YAAYjB;gBAElB,MAAMkB,kBAAkB5D,8BAA6Ba,+BAAAA,OAAOL,WAAA,CAAYE,QAAA,cAAnBG,mDAAAA,6BAA6BF,cAAc;iBAMhGlK,0BAAAA,OAAOoN,eAAA,cAAPpN,8CAAAA,6BAAAA,QAAyB;oBACvB6I,OAAOsE,kBAAkBA,kBAAkBtE,KAAA,GAAQ,KAAA;oBACnDwE;wBACEH,UAAUhB,OAAA,CAAQ;oBACpB;oBACAoB;wBACEJ,UAAUf,MAAA,CACR,IAAI3B,kBAAkB,yCAAyC;4BAC7DI,MAAM;wBACR;oBAEJ;gBACF;gBAEA,IAAI;oBAIF,MAAMsC,UAAUd,OAAA;gBAClB,EAAA,OAASS,GAAG;oBACV,IAAI7M,OAAOuN,QAAA,EAAU;wBACnBvN,OAAOuN,QAAA;oBACT;oBAEA,IAAIhD,oBAAoBsC,MAAMA,EAAEjC,IAAA,KAAS,8BAA8B5K,OAAOwN,aAAA,EAAe;wBAC3F,MAAMX;oBACR;oBAEA,OAAO;gBACT;gBAKAzC,SAAS,MAAMqC,cAAczL,WAAWiM;YAC1C;YAEA,OAAO7C;QACT;IACF;IAEA,OAAO4C;AACT;AAqEA,SAASnR,kBAGPmF,OAAA,EAAkBlE,OAAA;IAClB,MAAM,EAAE2Q,6BAAA,EAA8B,GAAIpS;IAC1C,MAAMqS,aAAA,CAAA,GAAaC,cAAAtN,MAAA,EAAOW;IAC1B,MAAM4M,aAAA,CAAA,GAAaD,cAAAtN,MAAA,EAAOvD;IAE1B,MAAM+Q,uBAAA,CAAA,GAAuBF,cAAA3K,OAAA,EAAQ;QACnC,MAAM8K,UAAUf,4BAA4B;YAC1CK,iBAAiBK;WACdG,WAAWjN,OAAA,GACb+M,WAAW/M,OAAO;QACrB,OAAO;YAACmN;SAAO;IACjB,GAAG;QAACL;QAA+BC,WAAW/M,OAAA;QAASiN,WAAWjN,OAAO;KAAC;IAG1E7E,oBAAoB;QAClB4R,WAAW/M,OAAA,GAAUK;QACrB4M,WAAWjN,OAAA,GAAU7D;IACvB;IAEA,OAAO+Q;AACT"}