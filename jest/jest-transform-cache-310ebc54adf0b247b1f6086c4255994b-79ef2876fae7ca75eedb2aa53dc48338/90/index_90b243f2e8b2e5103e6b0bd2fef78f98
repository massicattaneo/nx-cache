0ff402b20d0ff244ff5d5bc0e7fcea2c
"use strict";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __reExport = (target, mod, secondTarget)=>(__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/react/index.ts
var react_exports = {};
__export(react_exports, {
    ClerkInstanceContext: ()=>ClerkInstanceContext,
    ClientContext: ()=>ClientContext,
    OptionsContext: ()=>OptionsContext,
    OrganizationProvider: ()=>OrganizationProvider,
    SessionContext: ()=>SessionContext,
    UserContext: ()=>UserContext,
    assertContextExists: ()=>assertContextExists,
    createContextAndHook: ()=>createContextAndHook,
    isDeeplyEqual: ()=>isDeeplyEqual,
    useAssertWrappedByClerkProvider: ()=>useAssertWrappedByClerkProvider,
    useClerk: ()=>useClerk,
    useClerkInstanceContext: ()=>useClerkInstanceContext,
    useClientContext: ()=>useClientContext,
    useDeepEqualMemo: ()=>useDeepEqualMemo,
    useOptionsContext: ()=>useOptionsContext,
    useOrganization: ()=>useOrganization,
    useOrganizationContext: ()=>useOrganizationContext,
    useOrganizationList: ()=>useOrganizationList,
    useReverification: ()=>useReverification,
    useSafeLayoutEffect: ()=>useSafeLayoutEffect,
    useSession: ()=>useSession,
    useSessionContext: ()=>useSessionContext,
    useSessionList: ()=>useSessionList,
    useUser: ()=>useUser,
    useUserContext: ()=>useUserContext
});
module.exports = __toCommonJS(react_exports);
// src/react/hooks/createContextAndHook.ts
var import_react = __toESM(require("react"));
function assertContextExists(contextVal, msgOrCtx) {
    if (!contextVal) {
        throw typeof msgOrCtx === "string" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);
    }
}
var createContextAndHook = (displayName, options)=>{
    const { assertCtxFn = assertContextExists } = options || {};
    const Ctx = import_react.default.createContext(void 0);
    Ctx.displayName = displayName;
    const useCtx = ()=>{
        const ctx = import_react.default.useContext(Ctx);
        assertCtxFn(ctx, `${displayName} not found`);
        return ctx.value;
    };
    const useCtxWithoutGuarantee = ()=>{
        const ctx = import_react.default.useContext(Ctx);
        return ctx ? ctx.value : {};
    };
    return [
        Ctx,
        useCtx,
        useCtxWithoutGuarantee
    ];
};
// src/organization.ts
function getCurrentOrganizationMembership(organizationMemberships, organizationId) {
    return organizationMemberships.find((organizationMembership)=>organizationMembership.organization.id === organizationId);
}
// src/telemetry/events/method-called.ts
var EVENT_METHOD_CALLED = "METHOD_CALLED";
function eventMethodCalled(method, payload) {
    return {
        event: EVENT_METHOD_CALLED,
        payload: _object_spread({
            method
        }, payload)
    };
}
// src/react/contexts.tsx
var import_react2 = __toESM(require("react"));
// src/react/clerk-swr.ts
var clerk_swr_exports = {};
__export(clerk_swr_exports, {
    useSWR: ()=>import_swr.default,
    useSWRInfinite: ()=>import_infinite.default
});
__reExport(clerk_swr_exports, require("swr"));
var import_swr = __toESM(require("swr"));
var import_infinite = __toESM(require("swr/infinite"));
// src/react/contexts.tsx
var [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook("ClerkInstanceContext");
var [UserContext, useUserContext] = createContextAndHook("UserContext");
var [ClientContext, useClientContext] = createContextAndHook("ClientContext");
var [SessionContext, useSessionContext] = createContextAndHook("SessionContext");
var OptionsContext = import_react2.default.createContext({});
function useOptionsContext() {
    const context = import_react2.default.useContext(OptionsContext);
    if (context === void 0) {
        throw new Error("useOptions must be used within an OptionsContext");
    }
    return context;
}
var [OrganizationContextInternal, useOrganizationContext] = createContextAndHook("OrganizationContext");
var OrganizationProvider = ({ children, organization, swrConfig })=>{
    return /* @__PURE__ */ import_react2.default.createElement(clerk_swr_exports.SWRConfig, {
        value: swrConfig
    }, /* @__PURE__ */ import_react2.default.createElement(OrganizationContextInternal.Provider, {
        value: {
            value: {
                organization
            }
        }
    }, children));
};
function useAssertWrappedByClerkProvider(displayNameOrFn) {
    const ctx = import_react2.default.useContext(ClerkInstanceContext);
    if (!ctx) {
        if (typeof displayNameOrFn === "function") {
            displayNameOrFn();
            return;
        }
        throw new Error(`${displayNameOrFn} can only be used within the <ClerkProvider /> component.

Possible fixes:
1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.
2. Check for multiple versions of the \`@clerk/shared\` package in your project. Use a tool like \`npm ls @clerk/shared\` to identify multiple versions, and update your dependencies to only rely on one.

Learn more: https://clerk.com/docs/components/clerk-provider`.trim());
    }
}
// src/react/hooks/usePagesOrInfinite.ts
var import_react3 = require("react");
function getDifferentKeys(obj1, obj2) {
    const keysSet = new Set(Object.keys(obj2));
    const differentKeysObject = {};
    for (const key1 of Object.keys(obj1)){
        if (!keysSet.has(key1)) {
            differentKeysObject[key1] = obj1[key1];
        }
    }
    return differentKeysObject;
}
var useWithSafeValues = (params, defaultValues)=>{
    const shouldUseDefaults = typeof params === "boolean" && params;
    var _params_initialPage;
    const initialPageRef = (0, import_react3.useRef)(shouldUseDefaults ? defaultValues.initialPage : (_params_initialPage = params === null || params === void 0 ? void 0 : params.initialPage) !== null && _params_initialPage !== void 0 ? _params_initialPage : defaultValues.initialPage);
    var _params_pageSize;
    const pageSizeRef = (0, import_react3.useRef)(shouldUseDefaults ? defaultValues.pageSize : (_params_pageSize = params === null || params === void 0 ? void 0 : params.pageSize) !== null && _params_pageSize !== void 0 ? _params_pageSize : defaultValues.pageSize);
    const newObj = {};
    for (const key of Object.keys(defaultValues)){
        var _params_key;
        newObj[key] = shouldUseDefaults ? defaultValues[key] : (_params_key = params === null || params === void 0 ? void 0 : params[key]) !== null && _params_key !== void 0 ? _params_key : defaultValues[key];
    }
    return _object_spread_props(_object_spread({}, newObj), {
        initialPage: initialPageRef.current,
        pageSize: pageSizeRef.current
    });
};
var cachingSWROptions = {
    dedupingInterval: 1e3 * 60,
    focusThrottleInterval: 1e3 * 60 * 2
};
var usePagesOrInfinite = (params, fetcher, config, cacheKeys)=>{
    var _params_initialPage;
    const [paginatedPage, setPaginatedPage] = (0, import_react3.useState)((_params_initialPage = params.initialPage) !== null && _params_initialPage !== void 0 ? _params_initialPage : 1);
    var _params_initialPage1;
    const initialPageRef = (0, import_react3.useRef)((_params_initialPage1 = params.initialPage) !== null && _params_initialPage1 !== void 0 ? _params_initialPage1 : 1);
    var _params_pageSize;
    const pageSizeRef = (0, import_react3.useRef)((_params_pageSize = params.pageSize) !== null && _params_pageSize !== void 0 ? _params_pageSize : 10);
    var _config_enabled;
    const enabled = (_config_enabled = config.enabled) !== null && _config_enabled !== void 0 ? _config_enabled : true;
    var _config_infinite;
    const triggerInfinite = (_config_infinite = config.infinite) !== null && _config_infinite !== void 0 ? _config_infinite : false;
    var _config_keepPreviousData;
    const keepPreviousData = (_config_keepPreviousData = config.keepPreviousData) !== null && _config_keepPreviousData !== void 0 ? _config_keepPreviousData : false;
    const pagesCacheKey = _object_spread_props(_object_spread({}, cacheKeys, params), {
        initialPage: paginatedPage,
        pageSize: pageSizeRef.current
    });
    const { data: swrData, isValidating: swrIsValidating, isLoading: swrIsLoading, error: swrError, mutate: swrMutate } = (0, import_swr.default)(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, (cacheKeyParams)=>{
        const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);
        return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);
    }, _object_spread({
        keepPreviousData
    }, cachingSWROptions));
    const { data: swrInfiniteData, isLoading: swrInfiniteIsLoading, isValidating: swrInfiniteIsValidating, error: swrInfiniteError, size, setSize, mutate: swrInfiniteMutate } = (0, import_infinite.default)((pageIndex)=>{
        if (!triggerInfinite || !enabled) {
            return null;
        }
        return _object_spread_props(_object_spread({}, params, cacheKeys), {
            initialPage: initialPageRef.current + pageIndex,
            pageSize: pageSizeRef.current
        });
    }, (cacheKeyParams)=>{
        const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);
        return fetcher === null || fetcher === void 0 ? void 0 : fetcher(requestParams);
    }, cachingSWROptions);
    const page = (0, import_react3.useMemo)(()=>{
        if (triggerInfinite) {
            return size;
        }
        return paginatedPage;
    }, [
        triggerInfinite,
        size,
        paginatedPage
    ]);
    const fetchPage = (0, import_react3.useCallback)((numberOrgFn)=>{
        if (triggerInfinite) {
            void setSize(numberOrgFn);
            return;
        }
        return setPaginatedPage(numberOrgFn);
    }, [
        setSize
    ]);
    const data = (0, import_react3.useMemo)(()=>{
        if (triggerInfinite) {
            var _swrInfiniteData_map_flat;
            return (_swrInfiniteData_map_flat = swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.map((a)=>a === null || a === void 0 ? void 0 : a.data).flat()) !== null && _swrInfiniteData_map_flat !== void 0 ? _swrInfiniteData_map_flat : [];
        }
        var _swrData_data;
        return (_swrData_data = swrData === null || swrData === void 0 ? void 0 : swrData.data) !== null && _swrData_data !== void 0 ? _swrData_data : [];
    }, [
        triggerInfinite,
        swrData,
        swrInfiniteData
    ]);
    const count = (0, import_react3.useMemo)(()=>{
        if (triggerInfinite) {
            var _swrInfiniteData_;
            return (swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : (_swrInfiniteData_ = swrInfiniteData[(swrInfiniteData === null || swrInfiniteData === void 0 ? void 0 : swrInfiniteData.length) - 1]) === null || _swrInfiniteData_ === void 0 ? void 0 : _swrInfiniteData_.total_count) || 0;
        }
        var _swrData_total_count;
        return (_swrData_total_count = swrData === null || swrData === void 0 ? void 0 : swrData.total_count) !== null && _swrData_total_count !== void 0 ? _swrData_total_count : 0;
    }, [
        triggerInfinite,
        swrData,
        swrInfiniteData
    ]);
    const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;
    const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;
    var _ref;
    const error = (_ref = triggerInfinite ? swrInfiniteError : swrError) !== null && _ref !== void 0 ? _ref : null;
    const isError = !!error;
    const fetchNext = (0, import_react3.useCallback)(()=>{
        fetchPage((n)=>Math.max(0, n + 1));
    }, [
        fetchPage
    ]);
    const fetchPrevious = (0, import_react3.useCallback)(()=>{
        fetchPage((n)=>Math.max(0, n - 1));
    }, [
        fetchPage
    ]);
    const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;
    const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);
    const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;
    const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;
    const setData = triggerInfinite ? (value)=>swrInfiniteMutate(value, {
            revalidate: false
        }) : (value)=>swrMutate(value, {
            revalidate: false
        });
    const revalidate = triggerInfinite ? ()=>swrInfiniteMutate() : ()=>swrMutate();
    return {
        data,
        count,
        error,
        isLoading,
        isFetching,
        isError,
        page,
        pageCount,
        fetchPage,
        fetchNext,
        fetchPrevious,
        hasNextPage,
        hasPreviousPage,
        // Let the hook return type define this type
        revalidate,
        // Let the hook return type define this type
        setData
    };
};
// src/react/hooks/useOrganization.tsx
var undefinedPaginatedResource = {
    data: void 0,
    count: void 0,
    error: void 0,
    isLoading: false,
    isFetching: false,
    isError: false,
    page: void 0,
    pageCount: void 0,
    fetchPage: void 0,
    fetchNext: void 0,
    fetchPrevious: void 0,
    hasNextPage: false,
    hasPreviousPage: false,
    revalidate: void 0,
    setData: void 0
};
var useOrganization = (params)=>{
    var _clerk_telemetry;
    const { domains: domainListParams, membershipRequests: membershipRequestsListParams, memberships: membersListParams, invitations: invitationsListParams } = params || {};
    useAssertWrappedByClerkProvider("useOrganization");
    const { organization } = useOrganizationContext();
    const session = useSessionContext();
    const domainSafeValues = useWithSafeValues(domainListParams, {
        initialPage: 1,
        pageSize: 10,
        keepPreviousData: false,
        infinite: false,
        enrollmentMode: void 0
    });
    const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {
        initialPage: 1,
        pageSize: 10,
        status: "pending",
        keepPreviousData: false,
        infinite: false
    });
    const membersSafeValues = useWithSafeValues(membersListParams, {
        initialPage: 1,
        pageSize: 10,
        role: void 0,
        keepPreviousData: false,
        infinite: false,
        query: void 0
    });
    const invitationsSafeValues = useWithSafeValues(invitationsListParams, {
        initialPage: 1,
        pageSize: 10,
        status: [
            "pending"
        ],
        keepPreviousData: false,
        infinite: false
    });
    const clerk = useClerkInstanceContext();
    (_clerk_telemetry = clerk.telemetry) === null || _clerk_telemetry === void 0 ? void 0 : _clerk_telemetry.record(eventMethodCalled("useOrganization"));
    const domainParams = typeof domainListParams === "undefined" ? void 0 : {
        initialPage: domainSafeValues.initialPage,
        pageSize: domainSafeValues.pageSize,
        enrollmentMode: domainSafeValues.enrollmentMode
    };
    const membershipRequestParams = typeof membershipRequestsListParams === "undefined" ? void 0 : {
        initialPage: membershipRequestSafeValues.initialPage,
        pageSize: membershipRequestSafeValues.pageSize,
        status: membershipRequestSafeValues.status
    };
    const membersParams = typeof membersListParams === "undefined" ? void 0 : {
        initialPage: membersSafeValues.initialPage,
        pageSize: membersSafeValues.pageSize,
        role: membersSafeValues.role,
        query: membersSafeValues.query
    };
    const invitationsParams = typeof invitationsListParams === "undefined" ? void 0 : {
        initialPage: invitationsSafeValues.initialPage,
        pageSize: invitationsSafeValues.pageSize,
        status: invitationsSafeValues.status
    };
    const domains = usePagesOrInfinite(_object_spread({}, domainParams), organization === null || organization === void 0 ? void 0 : organization.getDomains, {
        keepPreviousData: domainSafeValues.keepPreviousData,
        infinite: domainSafeValues.infinite,
        enabled: !!domainParams
    }, {
        type: "domains",
        organizationId: organization === null || organization === void 0 ? void 0 : organization.id
    });
    const membershipRequests = usePagesOrInfinite(_object_spread({}, membershipRequestParams), organization === null || organization === void 0 ? void 0 : organization.getMembershipRequests, {
        keepPreviousData: membershipRequestSafeValues.keepPreviousData,
        infinite: membershipRequestSafeValues.infinite,
        enabled: !!membershipRequestParams
    }, {
        type: "membershipRequests",
        organizationId: organization === null || organization === void 0 ? void 0 : organization.id
    });
    const memberships = usePagesOrInfinite(membersParams || {}, organization === null || organization === void 0 ? void 0 : organization.getMemberships, {
        keepPreviousData: membersSafeValues.keepPreviousData,
        infinite: membersSafeValues.infinite,
        enabled: !!membersParams
    }, {
        type: "members",
        organizationId: organization === null || organization === void 0 ? void 0 : organization.id
    });
    const invitations = usePagesOrInfinite(_object_spread({}, invitationsParams), organization === null || organization === void 0 ? void 0 : organization.getInvitations, {
        keepPreviousData: invitationsSafeValues.keepPreviousData,
        infinite: invitationsSafeValues.infinite,
        enabled: !!invitationsParams
    }, {
        type: "invitations",
        organizationId: organization === null || organization === void 0 ? void 0 : organization.id
    });
    if (organization === void 0) {
        return {
            isLoaded: false,
            organization: void 0,
            membership: void 0,
            domains: undefinedPaginatedResource,
            membershipRequests: undefinedPaginatedResource,
            memberships: undefinedPaginatedResource,
            invitations: undefinedPaginatedResource
        };
    }
    if (organization === null) {
        return {
            isLoaded: true,
            organization: null,
            membership: null,
            domains: null,
            membershipRequests: null,
            memberships: null,
            invitations: null
        };
    }
    if (!clerk.loaded && organization) {
        return {
            isLoaded: true,
            organization,
            membership: void 0,
            domains: undefinedPaginatedResource,
            membershipRequests: undefinedPaginatedResource,
            memberships: undefinedPaginatedResource,
            invitations: undefinedPaginatedResource
        };
    }
    return {
        isLoaded: clerk.loaded,
        organization,
        membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),
        // your membership in the current org
        domains,
        membershipRequests,
        memberships,
        invitations
    };
};
// src/react/hooks/useOrganizationList.tsx
var undefinedPaginatedResource2 = {
    data: void 0,
    count: void 0,
    error: void 0,
    isLoading: false,
    isFetching: false,
    isError: false,
    page: void 0,
    pageCount: void 0,
    fetchPage: void 0,
    fetchNext: void 0,
    fetchPrevious: void 0,
    hasNextPage: false,
    hasPreviousPage: false,
    revalidate: void 0,
    setData: void 0
};
var useOrganizationList = (params)=>{
    var _clerk_telemetry;
    const { userMemberships, userInvitations, userSuggestions } = params || {};
    useAssertWrappedByClerkProvider("useOrganizationList");
    const userMembershipsSafeValues = useWithSafeValues(userMemberships, {
        initialPage: 1,
        pageSize: 10,
        keepPreviousData: false,
        infinite: false
    });
    const userInvitationsSafeValues = useWithSafeValues(userInvitations, {
        initialPage: 1,
        pageSize: 10,
        status: "pending",
        keepPreviousData: false,
        infinite: false
    });
    const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {
        initialPage: 1,
        pageSize: 10,
        status: "pending",
        keepPreviousData: false,
        infinite: false
    });
    const clerk = useClerkInstanceContext();
    const user = useUserContext();
    (_clerk_telemetry = clerk.telemetry) === null || _clerk_telemetry === void 0 ? void 0 : _clerk_telemetry.record(eventMethodCalled("useOrganizationList"));
    const userMembershipsParams = typeof userMemberships === "undefined" ? void 0 : {
        initialPage: userMembershipsSafeValues.initialPage,
        pageSize: userMembershipsSafeValues.pageSize
    };
    const userInvitationsParams = typeof userInvitations === "undefined" ? void 0 : {
        initialPage: userInvitationsSafeValues.initialPage,
        pageSize: userInvitationsSafeValues.pageSize,
        status: userInvitationsSafeValues.status
    };
    const userSuggestionsParams = typeof userSuggestions === "undefined" ? void 0 : {
        initialPage: userSuggestionsSafeValues.initialPage,
        pageSize: userSuggestionsSafeValues.pageSize,
        status: userSuggestionsSafeValues.status
    };
    const isClerkLoaded = !!(clerk.loaded && user);
    const memberships = usePagesOrInfinite(userMembershipsParams || {}, user === null || user === void 0 ? void 0 : user.getOrganizationMemberships, {
        keepPreviousData: userMembershipsSafeValues.keepPreviousData,
        infinite: userMembershipsSafeValues.infinite,
        enabled: !!userMembershipsParams
    }, {
        type: "userMemberships",
        userId: user === null || user === void 0 ? void 0 : user.id
    });
    const invitations = usePagesOrInfinite(_object_spread({}, userInvitationsParams), user === null || user === void 0 ? void 0 : user.getOrganizationInvitations, {
        keepPreviousData: userInvitationsSafeValues.keepPreviousData,
        infinite: userInvitationsSafeValues.infinite,
        enabled: !!userInvitationsParams
    }, {
        type: "userInvitations",
        userId: user === null || user === void 0 ? void 0 : user.id
    });
    const suggestions = usePagesOrInfinite(_object_spread({}, userSuggestionsParams), user === null || user === void 0 ? void 0 : user.getOrganizationSuggestions, {
        keepPreviousData: userSuggestionsSafeValues.keepPreviousData,
        infinite: userSuggestionsSafeValues.infinite,
        enabled: !!userSuggestionsParams
    }, {
        type: "userSuggestions",
        userId: user === null || user === void 0 ? void 0 : user.id
    });
    if (!isClerkLoaded) {
        return {
            isLoaded: false,
            createOrganization: void 0,
            setActive: void 0,
            userMemberships: undefinedPaginatedResource2,
            userInvitations: undefinedPaginatedResource2,
            userSuggestions: undefinedPaginatedResource2
        };
    }
    return {
        isLoaded: isClerkLoaded,
        setActive: clerk.setActive,
        createOrganization: clerk.createOrganization,
        userMemberships: memberships,
        userInvitations: invitations,
        userSuggestions: suggestions
    };
};
// src/react/hooks/useSafeLayoutEffect.tsx
var import_react4 = __toESM(require("react"));
var useSafeLayoutEffect = typeof window !== "undefined" ? import_react4.default.useLayoutEffect : import_react4.default.useEffect;
// src/react/hooks/useSession.ts
var useSession = ()=>{
    useAssertWrappedByClerkProvider("useSession");
    const session = useSessionContext();
    if (session === void 0) {
        return {
            isLoaded: false,
            isSignedIn: void 0,
            session: void 0
        };
    }
    if (session === null) {
        return {
            isLoaded: true,
            isSignedIn: false,
            session: null
        };
    }
    return {
        isLoaded: true,
        isSignedIn: true,
        session
    };
};
// src/react/hooks/useSessionList.ts
var useSessionList = ()=>{
    useAssertWrappedByClerkProvider("useSessionList");
    const isomorphicClerk = useClerkInstanceContext();
    const client = useClientContext();
    if (!client) {
        return {
            isLoaded: false,
            sessions: void 0,
            setActive: void 0
        };
    }
    return {
        isLoaded: true,
        sessions: client.sessions,
        setActive: isomorphicClerk.setActive
    };
};
// src/react/hooks/useUser.ts
function useUser() {
    useAssertWrappedByClerkProvider("useUser");
    const user = useUserContext();
    if (user === void 0) {
        return {
            isLoaded: false,
            isSignedIn: void 0,
            user: void 0
        };
    }
    if (user === null) {
        return {
            isLoaded: true,
            isSignedIn: false,
            user: null
        };
    }
    return {
        isLoaded: true,
        isSignedIn: true,
        user
    };
}
// src/react/hooks/useClerk.ts
var useClerk = ()=>{
    useAssertWrappedByClerkProvider("useClerk");
    return useClerkInstanceContext();
};
// src/react/hooks/useDeepEqualMemo.ts
var import_dequal = require("dequal");
var import_react5 = __toESM(require("react"));
var useDeepEqualMemoize = (value)=>{
    const ref = import_react5.default.useRef(value);
    if (!(0, import_dequal.dequal)(value, ref.current)) {
        ref.current = value;
    }
    return import_react5.default.useMemo(()=>ref.current, [
        ref.current
    ]);
};
var useDeepEqualMemo = (factory, dependencyArray)=>{
    return import_react5.default.useMemo(factory, useDeepEqualMemoize(dependencyArray));
};
var isDeeplyEqual = import_dequal.dequal;
// src/react/hooks/useReverification.ts
var import_react6 = require("react");
// src/authorization.ts
var TYPES_TO_OBJECTS = {
    strict_mfa: {
        afterMinutes: 10,
        level: "multi_factor"
    },
    strict: {
        afterMinutes: 10,
        level: "second_factor"
    },
    moderate: {
        afterMinutes: 60,
        level: "second_factor"
    },
    lax: {
        afterMinutes: 1440,
        level: "second_factor"
    }
};
var ALLOWED_LEVELS = /* @__PURE__ */ new Set([
    "first_factor",
    "second_factor",
    "multi_factor"
]);
var ALLOWED_TYPES = /* @__PURE__ */ new Set([
    "strict_mfa",
    "strict",
    "moderate",
    "lax"
]);
var isValidMaxAge = (maxAge)=>typeof maxAge === "number" && maxAge > 0;
var isValidLevel = (level)=>ALLOWED_LEVELS.has(level);
var isValidVerificationType = (type)=>ALLOWED_TYPES.has(type);
var validateReverificationConfig = (config)=>{
    if (!config) {
        return false;
    }
    const convertConfigToObject = (config2)=>{
        if (typeof config2 === "string") {
            return TYPES_TO_OBJECTS[config2];
        }
        return config2;
    };
    const isValidStringValue = typeof config === "string" && isValidVerificationType(config);
    const isValidObjectValue = typeof config === "object" && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes);
    if (isValidStringValue || isValidObjectValue) {
        return convertConfigToObject.bind(null, config);
    }
    return false;
};
// src/authorization-errors.ts
var REVERIFICATION_REASON = "reverification-error";
var reverificationError = (missingConfig)=>({
        clerk_error: {
            type: "forbidden",
            reason: REVERIFICATION_REASON,
            metadata: {
                reverification: missingConfig
            }
        }
    });
var isReverificationHint = (result)=>{
    var _result_clerk_error, _result_clerk_error1;
    return result && typeof result === "object" && "clerk_error" in result && ((_result_clerk_error = result.clerk_error) === null || _result_clerk_error === void 0 ? void 0 : _result_clerk_error.type) === "forbidden" && ((_result_clerk_error1 = result.clerk_error) === null || _result_clerk_error1 === void 0 ? void 0 : _result_clerk_error1.reason) === REVERIFICATION_REASON;
};
// src/error.ts
function isClerkAPIResponseError(err) {
    return "clerkError" in err;
}
function isClerkRuntimeError(err) {
    return "clerkRuntimeError" in err;
}
var ClerkRuntimeError = class _ClerkRuntimeError extends Error {
    constructor(message, { code }){
        const prefix = "\u{1F512} Clerk:";
        const regex = new RegExp(prefix.replace(" ", "\\s*"), "i");
        const sanitized = message.replace(regex, "");
        const _message = `${prefix} ${sanitized.trim()}

(code="${code}")
`;
        super(_message);
        /**
     * Returns a string representation of the error.
     *
     * @returns {string} A formatted string with the error name and message.
     * @memberof ClerkRuntimeError
     */ this.toString = ()=>{
            return `[${this.name}]
Message:${this.message}`;
        };
        Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);
        this.code = code;
        this.message = _message;
        this.clerkRuntimeError = true;
        this.name = "ClerkRuntimeError";
    }
};
var DefaultMessages = Object.freeze({
    InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,
    InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,
    MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,
    MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,
    MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`
});
// src/utils/noop.ts
var noop = (..._args)=>{};
// src/utils/createDeferredPromise.ts
var createDeferredPromise = ()=>{
    let resolve = noop;
    let reject = noop;
    const promise = new Promise((res, rej)=>{
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        resolve,
        reject
    };
};
// src/react/hooks/useReverification.ts
var CLERK_API_REVERIFICATION_ERROR_CODE = "session_reverification_required";
async function resolveResult(result) {
    try {
        const r = await result;
        if (r instanceof Response) {
            return r.json();
        }
        return r;
    } catch (e) {
        if (isClerkAPIResponseError(e) && e.errors.find(({ code })=>code === CLERK_API_REVERIFICATION_ERROR_CODE)) {
            return reverificationError();
        }
        throw e;
    }
}
function createReverificationHandler(params) {
    function assertReverification(fetcher) {
        return async (...args)=>{
            let result = await resolveResult(fetcher(...args));
            if (isReverificationHint(result)) {
                var _result_clerk_error_metadata, _params_openUIComponent;
                const resolvers = createDeferredPromise();
                const isValidMetadata = validateReverificationConfig((_result_clerk_error_metadata = result.clerk_error.metadata) === null || _result_clerk_error_metadata === void 0 ? void 0 : _result_clerk_error_metadata.reverification);
                (_params_openUIComponent = params.openUIComponent) === null || _params_openUIComponent === void 0 ? void 0 : _params_openUIComponent.call(params, {
                    level: isValidMetadata ? isValidMetadata().level : void 0,
                    afterVerification () {
                        resolvers.resolve(true);
                    },
                    afterVerificationCancelled () {
                        resolvers.reject(new ClerkRuntimeError("User cancelled attempted verification", {
                            code: "reverification_cancelled"
                        }));
                    }
                });
                try {
                    await resolvers.promise;
                } catch (e) {
                    if (params.onCancel) {
                        params.onCancel();
                    }
                    if (isClerkRuntimeError(e) && e.code === "reverification_cancelled" && params.throwOnCancel) {
                        throw e;
                    }
                    return null;
                }
                result = await resolveResult(fetcher(...args));
            }
            return result;
        };
    }
    return assertReverification;
}
function useReverification(fetcher, options) {
    const { __internal_openReverification } = useClerk();
    const fetcherRef = (0, import_react6.useRef)(fetcher);
    const optionsRef = (0, import_react6.useRef)(options);
    const handleReverification = (0, import_react6.useMemo)(()=>{
        const handler = createReverificationHandler(_object_spread({
            openUIComponent: __internal_openReverification
        }, optionsRef.current))(fetcherRef.current);
        return [
            handler
        ];
    }, [
        __internal_openReverification,
        fetcherRef.current,
        optionsRef.current
    ]);
    useSafeLayoutEffect(()=>{
        fetcherRef.current = fetcher;
        optionsRef.current = options;
    });
    return handleReverification;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    ClerkInstanceContext,
    ClientContext,
    OptionsContext,
    OrganizationProvider,
    SessionContext,
    UserContext,
    assertContextExists,
    createContextAndHook,
    isDeeplyEqual,
    useAssertWrappedByClerkProvider,
    useClerk,
    useClerkInstanceContext,
    useClientContext,
    useDeepEqualMemo,
    useOptionsContext,
    useOrganization,
    useOrganizationContext,
    useOrganizationList,
    useReverification,
    useSafeLayoutEffect,
    useSession,
    useSessionContext,
    useSessionList,
    useUser,
    useUserContext
}); //# sourceMappingURL=index.js.map

//# sourceMappingURL=data:application/json;base64,