{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/cqs-query-bar/src/lib/QueryDisplay.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from \"react\"\nimport { isRpqlFlatMatchFilter } from \"@rp/common/api-types\"\nimport { RpqlFlatFilter } from \"@rp/common/api-types\"\nimport { tagManagerEvents } from \"@rp/react/web/common/vendors/utils\"\nimport { useTheme } from \"@rp/react/web/mui/core\"\nimport { ChipWrapper } from \"./chips/Chip.styles\"\nimport { OperationChip } from \"./chips/OperationChip\"\nimport { MobileQueryBarSearchText } from \"./chips/QueryBarExtensions.mobile\"\nimport { QueryChip } from \"./chips/QueryChip\"\nimport { compareQueries } from \"./compareQueries\"\nimport { CqsQueryBarContext } from \"./cqs-query-bar.types\"\nimport { groupByOperations } from \"./groupByOperations\"\n\ntype QueryDisplayProps = {\n  searchActions?: { setIsOpen: (setOpen: boolean) => void }\n  query: CqsQueryBarContext\n  scrollRef?: React.MutableRefObject<HTMLDivElement | null>\n}\n\nconst QueryDisplay = ({ query, searchActions, scrollRef }: QueryDisplayProps) => {\n  const [updatedId, setUpdatedId] = useState<string | null>(null)\n  const [scrollToRef, setScrollToRef] = useState<HTMLDivElement | null>(null)\n  const theme = useTheme()\n\n  const reducedFilters = useMemo(\n    () =>\n      query.filters.reduce(\n        (\n          acc: Record<\n            string,\n            (RpqlFlatFilter & { macroFilters?: Array<RpqlFlatFilter | null> }) | null\n          >,\n          id,\n        ) => {\n          const filter = query.actions.expression.getFilter(id)\n          if (!filter) {\n            return { ...acc, [id]: filter }\n          }\n\n          return {\n            ...acc,\n            [id]: {\n              ...filter,\n              macroFilters: isRpqlFlatMatchFilter(filter)\n                ? filter.value.map(childId => query.actions.expression.getFilter(childId))\n                : undefined,\n            },\n          }\n        },\n        {},\n      ),\n    [query],\n  )\n\n  const lastQuery = useRef(reducedFilters)\n\n  useEffect(() => {\n    const selectedId = compareQueries(reducedFilters, lastQuery.current)\n    lastQuery.current = reducedFilters\n\n    // Ignore if we could not find a single change (too many rerenders)\n    if (selectedId === null) {\n      return\n    }\n\n    setUpdatedId(prev => selectedId ?? prev)\n  }, [reducedFilters])\n\n  useEffect(() => {\n    if (scrollToRef) {\n      scrollToRef.style.backgroundColor = theme.palette.grey[500]\n      const { left } = scrollToRef.getBoundingClientRect()\n      scrollRef?.current?.scrollBy({ left, behavior: \"smooth\" })\n      setTimeout(() => {\n        scrollToRef.style.removeProperty(\"background-color\")\n        setUpdatedId(null)\n      }, 1000)\n    }\n  }, [scrollRef, scrollToRef, theme.palette.grey])\n\n  const handleRemove = (ids: Array<string>, type?: string) => {\n    tagManagerEvents.queryRefinement({\n      action: \"remove\",\n      component: \"queryBar\",\n      queryId: query.id,\n      queryType: type ?? \"\",\n      savedStatus: query.saveStatus ?? \"unsaved\",\n    })\n\n    query.actions.expression.removeFilters(ids)\n  }\n\n  const operations = groupByOperations(reducedFilters)\n  if (!operations) return null\n\n  return (\n    <ChipWrapper>\n      {Object.entries(operations)\n        .sort((first, second) => {\n          if (first[0] === \"in\" && second[0] === \"in\") return 0\n          if (first[0] !== \"in\" && second[0] === \"in\") return 1\n          if (first[0] === \"in\" && second[0] !== \"in\") return -1\n          if (first[0] === \"all\" && second[0] === \"not-in\") return -1\n          if (first[0] === \"not-in\" && second[0] === \"all\") return 1\n          return 0\n        })\n        .map(([operation, filters]) => {\n          if (operation === \"in\") {\n            return filters.map(filterId => {\n              const filter = query.actions.expression.getFilter(filterId)\n              const onRemove = () => handleRemove([filterId.toString()], filter?.type)\n              return (\n                <QueryChip\n                  query={query}\n                  key={filterId}\n                  filter={filter}\n                  onRemove={onRemove}\n                  ref={updatedId === filterId ? setScrollToRef : undefined}\n                />\n              )\n            })\n          } else {\n            const filter = query.actions.expression.getFilter(filters[0])\n            const onRemove = () => handleRemove(filters, filter?.type)\n            return (\n              <OperationChip\n                key={operation}\n                operation={operation}\n                filters={filters}\n                onRemove={onRemove}\n                query={query}\n              />\n            )\n          }\n        })}\n      <MobileQueryBarSearchText onClick={() => searchActions?.setIsOpen(true)} />\n    </ChipWrapper>\n  )\n}\n\nexport { QueryDisplay }\n"],"names":["QueryDisplay","query","searchActions","scrollRef","updatedId","setUpdatedId","useState","scrollToRef","setScrollToRef","theme","useTheme","reducedFilters","useMemo","filters","reduce","acc","id","filter","actions","expression","getFilter","macroFilters","isRpqlFlatMatchFilter","value","map","childId","undefined","lastQuery","useRef","useEffect","selectedId","compareQueries","current","prev","style","backgroundColor","palette","grey","left","getBoundingClientRect","scrollBy","behavior","setTimeout","removeProperty","handleRemove","ids","type","tagManagerEvents","queryRefinement","action","component","queryId","queryType","savedStatus","saveStatus","removeFilters","operations","groupByOperations","ChipWrapper","Object","entries","sort","first","second","operation","filterId","onRemove","toString","QueryChip","ref","OperationChip","MobileQueryBarSearchText","onClick","setIsOpen"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}