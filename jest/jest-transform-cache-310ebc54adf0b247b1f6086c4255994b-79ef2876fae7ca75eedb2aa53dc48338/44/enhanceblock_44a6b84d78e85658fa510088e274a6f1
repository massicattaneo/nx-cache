995c10da2342430e3e9d36a203eceda6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "enhanceBlock", {
    enumerable: true,
    get: function() {
        return enhanceBlock;
    }
});
const _types = require("@rp/react/rpjson/types");
const _enhancetextblock = require("./enhance-text-block");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const enhanceTableBlock = (block, options)=>{
    return _object_spread_props(_object_spread({}, block), {
        id: options.idIterator(),
        tree: options.tree.slice(0),
        rows: block.rows.map((row)=>_object_spread_props(_object_spread({
                id: options.idIterator(),
                tree: options.tree.slice(0),
                type: "TABLE_ROW"
            }, row), {
                cells: row.cells.map((entry)=>{
                    var _entry_content;
                    return _object_spread_props(_object_spread({
                        id: options.idIterator(),
                        tree: options.tree.slice(0)
                    }, entry), {
                        content: (_entry_content = entry.content) === null || _entry_content === void 0 ? void 0 : _entry_content.map((cont)=>enhanceBlock(cont, _object_spread_props(_object_spread({}, options), {
                                textStartAt: 0
                            })))
                    });
                })
            }))
    });
};
const enhanceListEntry = (entry, options)=>{
    return _object_spread_props(_object_spread({}, entry), {
        type: _types.EnhancedDocumentTypes.CONTAINER,
        id: options.idIterator(),
        tree: options.tree.slice(0),
        content: entry.content.map((cont)=>enhanceBlock(cont, _object_spread_props(_object_spread({}, options), {
                textStartAt: 0
            })))
    });
};
const enhanceListBlock = (block, options)=>{
    return _object_spread_props(_object_spread({}, block), {
        id: options.idIterator(),
        prefix: block.key,
        tree: options.tree.slice(0),
        entries: block.entries.map((entry)=>enhanceListEntry(entry, options))
    });
};
const enhanceBlock = (block, options)=>{
    if (block.type) options.tree.push(block.type);
    if ((0, _types.isListBlock)(block)) {
        return enhanceListBlock(block, options);
    } else if ((0, _types.isTableBlock)(block)) {
        return enhanceTableBlock(block, options);
    }
    const item = (0, _enhancetextblock.enhanceTextBlock)(block, options);
    item.entities.forEach((entity)=>{
        const id = entity.key;
        // eslint-disable-next-line no-param-reassign
        options.stats.entities[id] = options.stats.entities[id] || {
            ids: [],
            appearances: []
        };
        options.stats.entities[id].ids.push(item.id);
        const pnum = item.paragraphNumber;
        const sentence = item.sentences.find((sent)=>sent.start <= entity.start && sent.end >= entity.end);
        var _sentence_sentenceNumber;
        options.stats.entities[id].appearances.push({
            pnum,
            snum: (_sentence_sentenceNumber = sentence === null || sentence === void 0 ? void 0 : sentence.sentenceNumber) !== null && _sentence_sentenceNumber !== void 0 ? _sentence_sentenceNumber : 1,
            text: !sentence ? item.text : block.text.substring(sentence.start, sentence.end)
        });
    });
    if (item.paragraphNumber !== undefined) {
        var _options_stats_paragraphs_item_paragraphNumber;
        const p = (_options_stats_paragraphs_item_paragraphNumber = options.stats.paragraphs[item.paragraphNumber]) !== null && _options_stats_paragraphs_item_paragraphNumber !== void 0 ? _options_stats_paragraphs_item_paragraphNumber : [];
        Object.assign(options.stats.paragraphs, {
            [item.paragraphNumber]: p.concat(item)
        });
    }
    return item;
};

//# sourceMappingURL=data:application/json;base64,