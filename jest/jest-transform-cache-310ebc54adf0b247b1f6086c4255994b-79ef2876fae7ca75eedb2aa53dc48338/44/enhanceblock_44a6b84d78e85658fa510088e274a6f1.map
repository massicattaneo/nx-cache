{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/rpjson/src/lib/document-enhancer/enhance-block.ts"],"sourcesContent":["import { isListBlock, isTableBlock } from \"@rp/react/rpjson/types\"\nimport {\n  EnhanceBlockOptions,\n  EnhancedBlock,\n  EnhancedListBlock,\n  EnhancedListEntry,\n  EnhancedTableBlock,\n} from \"@rp/react/rpjson/types\"\nimport { EnhancedDocumentTypes } from \"@rp/react/rpjson/types\"\nimport { ContentBlock, ListBlock, ListEntry, TableBlock } from \"@rp/react/rpjson/types\"\nimport { enhanceTextBlock } from \"./enhance-text-block\"\n\nconst enhanceTableBlock = (block: TableBlock, options: EnhanceBlockOptions): EnhancedTableBlock => {\n  return {\n    ...block,\n    id: options.idIterator(),\n    tree: options.tree.slice(0),\n    rows: block.rows.map(row => ({\n      id: options.idIterator(),\n      tree: options.tree.slice(0),\n      type: \"TABLE_ROW\",\n      ...row,\n      cells: row.cells.map(entry => ({\n        id: options.idIterator(),\n        tree: options.tree.slice(0),\n        ...entry,\n        content: entry.content?.map(cont => enhanceBlock(cont, { ...options, textStartAt: 0 })),\n      })),\n    })),\n  }\n}\nconst enhanceListEntry = (entry: ListEntry, options: EnhanceBlockOptions): EnhancedListEntry => {\n  return {\n    ...entry,\n    type: EnhancedDocumentTypes.CONTAINER,\n    id: options.idIterator(),\n    tree: options.tree.slice(0),\n    content: entry.content.map(cont => enhanceBlock(cont, { ...options, textStartAt: 0 })),\n  }\n}\n\nconst enhanceListBlock = (block: ListBlock, options: EnhanceBlockOptions): EnhancedListBlock => {\n  return {\n    ...block,\n    id: options.idIterator(),\n    prefix: block.key,\n    tree: options.tree.slice(0),\n    entries: block.entries.map(entry => enhanceListEntry(entry, options)),\n  }\n}\n\nconst enhanceBlock = (block: ContentBlock, options: EnhanceBlockOptions): EnhancedBlock => {\n  if (block.type) options.tree.push(block.type)\n  if (isListBlock(block)) {\n    return enhanceListBlock(block, options)\n  } else if (isTableBlock(block)) {\n    return enhanceTableBlock(block, options)\n  }\n  const item = enhanceTextBlock(block, options)\n  item.entities.forEach(entity => {\n    const id = entity.key\n    // eslint-disable-next-line no-param-reassign\n    options.stats.entities[id] = options.stats.entities[id] || { ids: [], appearances: [] }\n    options.stats.entities[id].ids.push(item.id)\n    const pnum = item.paragraphNumber\n    const sentence = item.sentences.find(\n      sent => sent.start <= entity.start && sent.end >= entity.end,\n    )\n\n    options.stats.entities[id].appearances.push({\n      pnum,\n      snum: sentence?.sentenceNumber ?? 1,\n      text: !sentence ? item.text : block.text.substring(sentence.start, sentence.end),\n    })\n  })\n\n  if (item.paragraphNumber !== undefined) {\n    const p = options.stats.paragraphs[item.paragraphNumber] ?? []\n    Object.assign(options.stats.paragraphs, { [item.paragraphNumber]: p.concat(item) })\n  }\n  return item\n}\n\nexport { enhanceBlock }\n"],"names":["enhanceBlock","enhanceTableBlock","block","options","id","idIterator","tree","slice","rows","map","row","type","cells","entry","content","cont","textStartAt","enhanceListEntry","EnhancedDocumentTypes","CONTAINER","enhanceListBlock","prefix","key","entries","push","isListBlock","isTableBlock","item","enhanceTextBlock","entities","forEach","entity","stats","ids","appearances","pnum","paragraphNumber","sentence","sentences","find","sent","start","end","snum","sentenceNumber","text","substring","undefined","p","paragraphs","Object","assign","concat"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}