431e2652da2fdda4bbf1d4d7fb5b7aaa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "QueryDisplay", {
    enumerable: true,
    get: function() {
        return QueryDisplay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _utils = require("@rp/react/web/common/vendors/utils");
const _core = require("@rp/react/web/mui/core");
const _Chipstyles = require("./chips/Chip.styles");
const _OperationChip = require("./chips/OperationChip");
const _QueryBarExtensionsmobile = require("./chips/QueryBarExtensions.mobile");
const _QueryChip = require("./chips/QueryChip");
const _compareQueries = require("./compareQueries");
const _groupByOperations = require("./groupByOperations");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const QueryDisplay = ({ query, searchActions, scrollRef })=>{
    const [updatedId, setUpdatedId] = (0, _react.useState)(null);
    const [scrollToRef, setScrollToRef] = (0, _react.useState)(null);
    const theme = (0, _core.useTheme)();
    const reducedFilters = (0, _react.useMemo)(()=>query.filters.reduce((acc, id)=>{
            const filter = query.actions.expression.getFilter(id);
            if (!filter) {
                return _object_spread_props(_object_spread({}, acc), {
                    [id]: filter
                });
            }
            return _object_spread_props(_object_spread({}, acc), {
                [id]: _object_spread_props(_object_spread({}, filter), {
                    macroFilters: (0, _apitypes.isRpqlFlatMatchFilter)(filter) ? filter.value.map((childId)=>query.actions.expression.getFilter(childId)) : undefined
                })
            });
        }, {}), [
        query
    ]);
    const lastQuery = (0, _react.useRef)(reducedFilters);
    (0, _react.useEffect)(()=>{
        const selectedId = (0, _compareQueries.compareQueries)(reducedFilters, lastQuery.current);
        lastQuery.current = reducedFilters;
        // Ignore if we could not find a single change (too many rerenders)
        if (selectedId === null) {
            return;
        }
        setUpdatedId((prev)=>selectedId !== null && selectedId !== void 0 ? selectedId : prev);
    }, [
        reducedFilters
    ]);
    (0, _react.useEffect)(()=>{
        if (scrollToRef) {
            var _scrollRef_current;
            scrollToRef.style.backgroundColor = theme.palette.grey[500];
            const { left } = scrollToRef.getBoundingClientRect();
            scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.scrollBy({
                left,
                behavior: "smooth"
            });
            setTimeout(()=>{
                scrollToRef.style.removeProperty("background-color");
                setUpdatedId(null);
            }, 1000);
        }
    }, [
        scrollRef,
        scrollToRef,
        theme.palette.grey
    ]);
    const handleRemove = (ids, type)=>{
        var _query_saveStatus;
        _utils.tagManagerEvents.queryRefinement({
            action: "remove",
            component: "queryBar",
            queryId: query.id,
            queryType: type !== null && type !== void 0 ? type : "",
            savedStatus: (_query_saveStatus = query.saveStatus) !== null && _query_saveStatus !== void 0 ? _query_saveStatus : "unsaved"
        });
        query.actions.expression.removeFilters(ids);
    };
    const operations = (0, _groupByOperations.groupByOperations)(reducedFilters);
    if (!operations) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Chipstyles.ChipWrapper, {
        children: [
            Object.entries(operations).sort((first, second)=>{
                if (first[0] === "in" && second[0] === "in") return 0;
                if (first[0] !== "in" && second[0] === "in") return 1;
                if (first[0] === "in" && second[0] !== "in") return -1;
                if (first[0] === "all" && second[0] === "not-in") return -1;
                if (first[0] === "not-in" && second[0] === "all") return 1;
                return 0;
            }).map(([operation, filters])=>{
                if (operation === "in") {
                    return filters.map((filterId)=>{
                        const filter = query.actions.expression.getFilter(filterId);
                        const onRemove = ()=>handleRemove([
                                filterId.toString()
                            ], filter === null || filter === void 0 ? void 0 : filter.type);
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_QueryChip.QueryChip, {
                            query: query,
                            filter: filter,
                            onRemove: onRemove,
                            ref: updatedId === filterId ? setScrollToRef : undefined
                        }, filterId);
                    });
                } else {
                    const filter = query.actions.expression.getFilter(filters[0]);
                    const onRemove = ()=>handleRemove(filters, filter === null || filter === void 0 ? void 0 : filter.type);
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_OperationChip.OperationChip, {
                        operation: operation,
                        filters: filters,
                        onRemove: onRemove,
                        query: query
                    }, operation);
                }
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_QueryBarExtensionsmobile.MobileQueryBarSearchText, {
                onClick: ()=>searchActions === null || searchActions === void 0 ? void 0 : searchActions.setIsOpen(true)
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,