4deb372ebdd66a5fdb680ee7c8601b26
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useCopySearchById: function() {
        return useCopySearchById;
    },
    useCopySearchSnackbar: function() {
        return useCopySearchSnackbar;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _material = require("@mui/material");
const _adapters = require("@rp/adapters");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _router = require("@rp/react/web/router");
const _reactquery = require("@tanstack/react-query");
const _Snackbar = require("./Snackbar");
const _useCopyResource = require("./useCopyResource");
const _useShowSuccessMessage = require("./useShowSuccessMessage");
const baseRoute = ()=>{
    var _adapters_location_getRelativeBaseUrl;
    const base = ((_adapters_location_getRelativeBaseUrl = _adapters.adapters.location.getRelativeBaseUrl()) !== null && _adapters_location_getRelativeBaseUrl !== void 0 ? _adapters_location_getRelativeBaseUrl : "").slice(0, -1);
    const ROUTE = `${base}${_router.SEARCH_ROUTE}`;
    return ROUTE;
};
const useCopySearch = ()=>{
    const { mutateAsync, isPending } = (0, _userdataqueries.useCreateSavedQuery)();
    const onCopySuccess = (0, _react.useCallback)(({ id })=>{
        const message = encodeURIComponent("You made a copy of the search.");
        window.open(`${baseRoute()}/${id}?${_useShowSuccessMessage.SUCCESS_MESSAGE_QUERY_PARAM}=${message}`, "_blank", "noreferrer");
    }, []);
    return {
        mutateAsync,
        onCopySuccess,
        isPending
    };
};
const useCopySearchById = (id)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const { mutateAsync, onCopySuccess, isPending: isCopying } = useCopySearch();
    const { enqueueSuccess, enqueueError } = (0, _Snackbar.useSnackbar)();
    const copy = (0, _react.useCallback)(async ()=>{
        const data = await (0, _userdataqueries.getSavedQuery)(queryClient, id !== null && id !== void 0 ? id : "");
        return mutateAsync({
            name: `Copy of ${data === null || data === void 0 ? void 0 : data.name}`,
            query: data === null || data === void 0 ? void 0 : data.query,
            saveStatus: data === null || data === void 0 ? void 0 : data.saveStatus,
            promptProperties: data === null || data === void 0 ? void 0 : data.promptProperties
        }).then((data)=>{
            enqueueSuccess(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
                children: [
                    "The search ",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                        children: data.name
                    }),
                    " has been created"
                ]
            }));
        }).catch(()=>{
            enqueueError("There was an error copying the search");
        });
    }, [
        enqueueError,
        enqueueSuccess,
        id,
        mutateAsync,
        queryClient
    ]);
    const copyInANewTab = (0, _react.useCallback)(async ()=>{
        const data = await (0, _userdataqueries.getSavedQuery)(queryClient, id !== null && id !== void 0 ? id : "");
        return mutateAsync({
            name: `Copy of ${data === null || data === void 0 ? void 0 : data.name}`,
            query: data === null || data === void 0 ? void 0 : data.query,
            saveStatus: data === null || data === void 0 ? void 0 : data.saveStatus,
            promptProperties: data === null || data === void 0 ? void 0 : data.promptProperties
        }).then(onCopySuccess);
    }, [
        id,
        mutateAsync,
        onCopySuccess,
        queryClient
    ]);
    return {
        copy,
        copyInANewTab,
        isCopying
    };
};
const useCopySearchSnackbar = ()=>{
    const { mutateAsync, onCopySuccess } = useCopySearch();
    const { showSnackbar, isCopying } = (0, _useCopyResource.useCopyResource)({
        mutateAsync,
        infoMessage: "You can't make changes to a Public Search.",
        onSuccess: onCopySuccess
    });
    return {
        showSnackbar,
        isCopying
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL3VzZUNvcHlTZWFyY2gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tIFwiQG11aS9tYXRlcmlhbFwiXG5pbXBvcnQgeyBhZGFwdGVycyB9IGZyb20gXCJAcnAvYWRhcHRlcnNcIlxuaW1wb3J0IHsgZ2V0U2F2ZWRRdWVyeSwgdXNlQ3JlYXRlU2F2ZWRRdWVyeSB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3VzZXItZGF0YS1xdWVyaWVzXCJcbmltcG9ydCB7IFNFQVJDSF9ST1VURSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JvdXRlclwiXG5pbXBvcnQgeyB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiLi9TbmFja2JhclwiXG5pbXBvcnQgeyB1c2VDb3B5UmVzb3VyY2UgfSBmcm9tIFwiLi91c2VDb3B5UmVzb3VyY2VcIlxuaW1wb3J0IHsgU1VDQ0VTU19NRVNTQUdFX1FVRVJZX1BBUkFNIH0gZnJvbSBcIi4vdXNlU2hvd1N1Y2Nlc3NNZXNzYWdlXCJcblxuY29uc3QgYmFzZVJvdXRlID0gKCkgPT4ge1xuICBjb25zdCBiYXNlID0gKGFkYXB0ZXJzLmxvY2F0aW9uLmdldFJlbGF0aXZlQmFzZVVybCgpID8/IFwiXCIpLnNsaWNlKDAsIC0xKVxuICBjb25zdCBST1VURSA9IGAke2Jhc2V9JHtTRUFSQ0hfUk9VVEV9YFxuICByZXR1cm4gUk9VVEVcbn1cblxuY29uc3QgdXNlQ29weVNlYXJjaCA9ICgpID0+IHtcbiAgY29uc3QgeyBtdXRhdGVBc3luYywgaXNQZW5kaW5nIH0gPSB1c2VDcmVhdGVTYXZlZFF1ZXJ5KClcblxuICBjb25zdCBvbkNvcHlTdWNjZXNzID0gdXNlQ2FsbGJhY2soKHsgaWQgfTogeyBpZDogc3RyaW5nIH0pID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gZW5jb2RlVVJJQ29tcG9uZW50KFwiWW91IG1hZGUgYSBjb3B5IG9mIHRoZSBzZWFyY2guXCIpXG4gICAgd2luZG93Lm9wZW4oXG4gICAgICBgJHtiYXNlUm91dGUoKX0vJHtpZH0/JHtTVUNDRVNTX01FU1NBR0VfUVVFUllfUEFSQU19PSR7bWVzc2FnZX1gLFxuICAgICAgXCJfYmxhbmtcIixcbiAgICAgIFwibm9yZWZlcnJlclwiLFxuICAgIClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIHsgbXV0YXRlQXN5bmMsIG9uQ29weVN1Y2Nlc3MsIGlzUGVuZGluZyB9XG59XG5cbmNvbnN0IHVzZUNvcHlTZWFyY2hCeUlkID0gKGlkOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpXG4gIGNvbnN0IHsgbXV0YXRlQXN5bmMsIG9uQ29weVN1Y2Nlc3MsIGlzUGVuZGluZzogaXNDb3B5aW5nIH0gPSB1c2VDb3B5U2VhcmNoKClcbiAgY29uc3QgeyBlbnF1ZXVlU3VjY2VzcywgZW5xdWV1ZUVycm9yIH0gPSB1c2VTbmFja2JhcigpXG4gIGNvbnN0IGNvcHkgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldFNhdmVkUXVlcnkocXVlcnlDbGllbnQsIGlkID8/IFwiXCIpXG4gICAgcmV0dXJuIG11dGF0ZUFzeW5jKHtcbiAgICAgIG5hbWU6IGBDb3B5IG9mICR7ZGF0YT8ubmFtZX1gLFxuICAgICAgcXVlcnk6IGRhdGE/LnF1ZXJ5LFxuICAgICAgc2F2ZVN0YXR1czogZGF0YT8uc2F2ZVN0YXR1cyxcbiAgICAgIHByb21wdFByb3BlcnRpZXM6IGRhdGE/LnByb21wdFByb3BlcnRpZXMsXG4gICAgfSlcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICBlbnF1ZXVlU3VjY2VzcyhcbiAgICAgICAgICA8VHlwb2dyYXBoeT5cbiAgICAgICAgICAgIFRoZSBzZWFyY2ggPHN0cm9uZz57ZGF0YS5uYW1lfTwvc3Ryb25nPiBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PixcbiAgICAgICAgKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIGVucXVldWVFcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciBjb3B5aW5nIHRoZSBzZWFyY2hcIilcbiAgICAgIH0pXG4gIH0sIFtlbnF1ZXVlRXJyb3IsIGVucXVldWVTdWNjZXNzLCBpZCwgbXV0YXRlQXN5bmMsIHF1ZXJ5Q2xpZW50XSlcblxuICBjb25zdCBjb3B5SW5BTmV3VGFiID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRTYXZlZFF1ZXJ5KHF1ZXJ5Q2xpZW50LCBpZCA/PyBcIlwiKVxuICAgIHJldHVybiBtdXRhdGVBc3luYyh7XG4gICAgICBuYW1lOiBgQ29weSBvZiAke2RhdGE/Lm5hbWV9YCxcbiAgICAgIHF1ZXJ5OiBkYXRhPy5xdWVyeSxcbiAgICAgIHNhdmVTdGF0dXM6IGRhdGE/LnNhdmVTdGF0dXMsXG4gICAgICBwcm9tcHRQcm9wZXJ0aWVzOiBkYXRhPy5wcm9tcHRQcm9wZXJ0aWVzLFxuICAgIH0pLnRoZW4ob25Db3B5U3VjY2VzcylcbiAgfSwgW2lkLCBtdXRhdGVBc3luYywgb25Db3B5U3VjY2VzcywgcXVlcnlDbGllbnRdKVxuXG4gIHJldHVybiB7IGNvcHksIGNvcHlJbkFOZXdUYWIsIGlzQ29weWluZyB9XG59XG5cbmNvbnN0IHVzZUNvcHlTZWFyY2hTbmFja2JhciA9ICgpID0+IHtcbiAgY29uc3QgeyBtdXRhdGVBc3luYywgb25Db3B5U3VjY2VzcyB9ID0gdXNlQ29weVNlYXJjaCgpXG5cbiAgY29uc3QgeyBzaG93U25hY2tiYXIsIGlzQ29weWluZyB9ID0gdXNlQ29weVJlc291cmNlKHtcbiAgICBtdXRhdGVBc3luYyxcbiAgICBpbmZvTWVzc2FnZTogXCJZb3UgY2FuJ3QgbWFrZSBjaGFuZ2VzIHRvIGEgUHVibGljIFNlYXJjaC5cIixcbiAgICBvblN1Y2Nlc3M6IG9uQ29weVN1Y2Nlc3MsXG4gIH0pXG4gIHJldHVybiB7IHNob3dTbmFja2JhciwgaXNDb3B5aW5nIH1cbn1cblxuZXhwb3J0IHsgdXNlQ29weVNlYXJjaFNuYWNrYmFyLCB1c2VDb3B5U2VhcmNoQnlJZCB9XG4iXSwibmFtZXMiOlsidXNlQ29weVNlYXJjaEJ5SWQiLCJ1c2VDb3B5U2VhcmNoU25hY2tiYXIiLCJiYXNlUm91dGUiLCJhZGFwdGVycyIsImJhc2UiLCJsb2NhdGlvbiIsImdldFJlbGF0aXZlQmFzZVVybCIsInNsaWNlIiwiUk9VVEUiLCJTRUFSQ0hfUk9VVEUiLCJ1c2VDb3B5U2VhcmNoIiwibXV0YXRlQXN5bmMiLCJpc1BlbmRpbmciLCJ1c2VDcmVhdGVTYXZlZFF1ZXJ5Iiwib25Db3B5U3VjY2VzcyIsInVzZUNhbGxiYWNrIiwiaWQiLCJtZXNzYWdlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwid2luZG93Iiwib3BlbiIsIlNVQ0NFU1NfTUVTU0FHRV9RVUVSWV9QQVJBTSIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJpc0NvcHlpbmciLCJlbnF1ZXVlU3VjY2VzcyIsImVucXVldWVFcnJvciIsInVzZVNuYWNrYmFyIiwiY29weSIsImRhdGEiLCJnZXRTYXZlZFF1ZXJ5IiwibmFtZSIsInF1ZXJ5Iiwic2F2ZVN0YXR1cyIsInByb21wdFByb3BlcnRpZXMiLCJ0aGVuIiwiVHlwb2dyYXBoeSIsInN0cm9uZyIsImNhdGNoIiwiY29weUluQU5ld1RhYiIsInNob3dTbmFja2JhciIsInVzZUNvcHlSZXNvdXJjZSIsImluZm9NZXNzYWdlIiwib25TdWNjZXNzIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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