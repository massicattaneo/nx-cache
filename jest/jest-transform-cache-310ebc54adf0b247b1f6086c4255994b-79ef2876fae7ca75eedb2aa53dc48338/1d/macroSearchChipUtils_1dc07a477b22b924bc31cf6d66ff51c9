c30c3f008286426c347575f4b8b50f47
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getMacroChipLabel: function() {
        return getMacroChipLabel;
    },
    useMacroSearchFilter: function() {
        return useMacroSearchFilter;
    }
});
const _utils = require("@rp/common/utils");
const _discoverypanelconfig = require("@rp/react/tanstack-api/discovery-panel-config");
const useMacroSearchFilter = (flatFilters, macroType)=>{
    const { data, isLoading } = (0, _discoverypanelconfig.usePanelConfig)();
    const { groups = [], label } = (data === null || data === void 0 ? void 0 : data.discoveryPanelCategories.find((item)=>item.category === macroType.slice(6))) || {};
    const value = flatFilters.map((flatFilter)=>{
        const values = (flatFilter === null || flatFilter === void 0 ? void 0 : flatFilter.value) || [];
        return Array.isArray(values) ? values.map((value)=>{
            var _flatFilter_type;
            const type = (_flatFilter_type = flatFilter === null || flatFilter === void 0 ? void 0 : flatFilter.type) !== null && _flatFilter_type !== void 0 ? _flatFilter_type : "";
            const group = groups.filter(_discoverypanelconfig.isGroup).find((item)=>item.group === type);
            var _group_label, _ref, _flatFilter_id;
            return {
                group: (_ref = (_group_label = group === null || group === void 0 ? void 0 : group.label) !== null && _group_label !== void 0 ? _group_label : label) !== null && _ref !== void 0 ? _ref : type,
                id: (_flatFilter_id = flatFilter === null || flatFilter === void 0 ? void 0 : flatFilter.id) !== null && _flatFilter_id !== void 0 ? _flatFilter_id : "",
                value: value.toString(),
                type,
                macroType,
                macroLabel: label
            };
        }) : [];
    }).flat();
    return {
        value,
        isLoading
    };
};
const getMacroChipLabel = (macro)=>{
    const macros = [
        "macro_sources",
        "macro_concepts"
    ];
    if (macros.includes(macro.macroType)) {
        return (0, _utils.capitalize)(macro.value);
    }
    if (macro.type === "category") {
        return `All ${macro.value}`;
    }
    if (macro.macroType === "macro_topics") {
        return `${(0, _utils.capitalizeAllWordsBySeparator)(macro.value, "-")} ${macro.macroLabel}`;
    }
    return `${macro.value} ${macro.macroLabel}`;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2Nxcy1xdWVyeS1iYXIvc3JjL2xpYi9jaGlwcy9tYWNyb1NlYXJjaENoaXBVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBScHFsRmxhdEZpbHRlciB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBjYXBpdGFsaXplLCBjYXBpdGFsaXplQWxsV29yZHNCeVNlcGFyYXRvciB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IGlzR3JvdXAsIHVzZVBhbmVsQ29uZmlnIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZGlzY292ZXJ5LXBhbmVsLWNvbmZpZ1wiXG5cbmNvbnN0IHVzZU1hY3JvU2VhcmNoRmlsdGVyID0gKGZsYXRGaWx0ZXJzOiBBcnJheTxScHFsRmxhdEZpbHRlciB8IG51bGw+LCBtYWNyb1R5cGU6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGRhdGEsIGlzTG9hZGluZyB9ID0gdXNlUGFuZWxDb25maWcoKVxuICBjb25zdCB7IGdyb3VwcyA9IFtdLCBsYWJlbCB9ID1cbiAgICBkYXRhPy5kaXNjb3ZlcnlQYW5lbENhdGVnb3JpZXMuZmluZChpdGVtID0+IGl0ZW0uY2F0ZWdvcnkgPT09IG1hY3JvVHlwZS5zbGljZSg2KSkgfHwge31cbiAgY29uc3QgdmFsdWUgPSBmbGF0RmlsdGVyc1xuICAgIC5tYXAoZmxhdEZpbHRlciA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBmbGF0RmlsdGVyPy52YWx1ZSB8fCBbXVxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWVzKVxuICAgICAgICA/IHZhbHVlcy5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGZsYXRGaWx0ZXI/LnR5cGUgPz8gXCJcIlxuICAgICAgICAgICAgY29uc3QgZ3JvdXAgPSBncm91cHMuZmlsdGVyKGlzR3JvdXApLmZpbmQoaXRlbSA9PiBpdGVtLmdyb3VwID09PSB0eXBlKVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwPy5sYWJlbCA/PyBsYWJlbCA/PyB0eXBlLFxuICAgICAgICAgICAgICBpZDogZmxhdEZpbHRlcj8uaWQgPz8gXCJcIixcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIG1hY3JvVHlwZSxcbiAgICAgICAgICAgICAgbWFjcm9MYWJlbDogbGFiZWwsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBbXVxuICAgIH0pXG4gICAgLmZsYXQoKVxuICByZXR1cm4geyB2YWx1ZSwgaXNMb2FkaW5nIH1cbn1cblxuY29uc3QgZ2V0TWFjcm9DaGlwTGFiZWwgPSAobWFjcm86IFJldHVyblR5cGU8dHlwZW9mIHVzZU1hY3JvU2VhcmNoRmlsdGVyPltcInZhbHVlXCJdW251bWJlcl0pID0+IHtcbiAgY29uc3QgbWFjcm9zID0gW1wibWFjcm9fc291cmNlc1wiLCBcIm1hY3JvX2NvbmNlcHRzXCJdXG4gIGlmIChtYWNyb3MuaW5jbHVkZXMobWFjcm8ubWFjcm9UeXBlKSkge1xuICAgIHJldHVybiBjYXBpdGFsaXplKG1hY3JvLnZhbHVlKVxuICB9XG4gIGlmIChtYWNyby50eXBlID09PSBcImNhdGVnb3J5XCIpIHtcbiAgICByZXR1cm4gYEFsbCAke21hY3JvLnZhbHVlfWBcbiAgfVxuICBpZiAobWFjcm8ubWFjcm9UeXBlID09PSBcIm1hY3JvX3RvcGljc1wiKSB7XG4gICAgcmV0dXJuIGAke2NhcGl0YWxpemVBbGxXb3Jkc0J5U2VwYXJhdG9yKG1hY3JvLnZhbHVlLCBcIi1cIil9ICR7bWFjcm8ubWFjcm9MYWJlbH1gXG4gIH1cblxuICByZXR1cm4gYCR7bWFjcm8udmFsdWV9ICR7bWFjcm8ubWFjcm9MYWJlbH1gXG59XG5cbmV4cG9ydCB7IHVzZU1hY3JvU2VhcmNoRmlsdGVyLCBnZXRNYWNyb0NoaXBMYWJlbCB9XG4iXSwibmFtZXMiOlsiZ2V0TWFjcm9DaGlwTGFiZWwiLCJ1c2VNYWNyb1NlYXJjaEZpbHRlciIsImZsYXRGaWx0ZXJzIiwibWFjcm9UeXBlIiwiZGF0YSIsImlzTG9hZGluZyIsInVzZVBhbmVsQ29uZmlnIiwiZ3JvdXBzIiwibGFiZWwiLCJkaXNjb3ZlcnlQYW5lbENhdGVnb3JpZXMiLCJmaW5kIiwiaXRlbSIsImNhdGVnb3J5Iiwic2xpY2UiLCJ2YWx1ZSIsIm1hcCIsImZsYXRGaWx0ZXIiLCJ2YWx1ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJ0eXBlIiwiZ3JvdXAiLCJmaWx0ZXIiLCJpc0dyb3VwIiwiaWQiLCJ0b1N0cmluZyIsIm1hY3JvTGFiZWwiLCJmbGF0IiwibWFjcm8iLCJtYWNyb3MiLCJpbmNsdWRlcyIsImNhcGl0YWxpemUiLCJjYXBpdGFsaXplQWxsV29yZHNCeVNlcGFyYXRvciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBNkMrQkEsaUJBQWlCO2VBQWpCQTs7SUFBdEJDLG9CQUFvQjtlQUFwQkE7Ozt1QkE1Q2lEO3NDQUNsQjtBQUV4QyxNQUFNQSx1QkFBdUIsQ0FBQ0MsYUFBMkNDO0lBQ3ZFLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsSUFBQUEsb0NBQWM7SUFDMUMsTUFBTSxFQUFFQyxTQUFTLEVBQUUsRUFBRUMsS0FBSyxFQUFFLEdBQzFCSixDQUFBQSxpQkFBQUEsMkJBQUFBLEtBQU1LLHdCQUF3QixDQUFDQyxJQUFJLENBQUNDLENBQUFBLE9BQVFBLEtBQUtDLFFBQVEsS0FBS1QsVUFBVVUsS0FBSyxDQUFDLFFBQU8sQ0FBQztJQUN4RixNQUFNQyxRQUFRWixZQUNYYSxHQUFHLENBQUNDLENBQUFBO1FBQ0gsTUFBTUMsU0FBU0QsQ0FBQUEsdUJBQUFBLGlDQUFBQSxXQUFZRixLQUFLLEtBQUksRUFBRTtRQUN0QyxPQUFPSSxNQUFNQyxPQUFPLENBQUNGLFVBQ2pCQSxPQUFPRixHQUFHLENBQUNELENBQUFBO2dCQUNJRTtZQUFiLE1BQU1JLE9BQU9KLENBQUFBLG1CQUFBQSx1QkFBQUEsaUNBQUFBLFdBQVlJLElBQUksY0FBaEJKLDhCQUFBQSxtQkFBb0I7WUFDakMsTUFBTUssUUFBUWQsT0FBT2UsTUFBTSxDQUFDQyw2QkFBTyxFQUFFYixJQUFJLENBQUNDLENBQUFBLE9BQVFBLEtBQUtVLEtBQUssS0FBS0Q7Z0JBRXhEQyxjQUFBQSxNQUNITDtZQUZOLE9BQU87Z0JBQ0xLLE9BQU9BLENBQUFBLE9BQUFBLENBQUFBLGVBQUFBLGtCQUFBQSw0QkFBQUEsTUFBT2IsS0FBSyxjQUFaYSwwQkFBQUEsZUFBZ0JiLG1CQUFoQmEsa0JBQUFBLE9BQXlCRDtnQkFDaENJLElBQUlSLENBQUFBLGlCQUFBQSx1QkFBQUEsaUNBQUFBLFdBQVlRLEVBQUUsY0FBZFIsNEJBQUFBLGlCQUFrQjtnQkFDdEJGLE9BQU9BLE1BQU1XLFFBQVE7Z0JBQ3JCTDtnQkFDQWpCO2dCQUNBdUIsWUFBWWxCO1lBQ2Q7UUFDRixLQUNBLEVBQUU7SUFDUixHQUNDbUIsSUFBSTtJQUNQLE9BQU87UUFBRWI7UUFBT1Q7SUFBVTtBQUM1QjtBQUVBLE1BQU1MLG9CQUFvQixDQUFDNEI7SUFDekIsTUFBTUMsU0FBUztRQUFDO1FBQWlCO0tBQWlCO0lBQ2xELElBQUlBLE9BQU9DLFFBQVEsQ0FBQ0YsTUFBTXpCLFNBQVMsR0FBRztRQUNwQyxPQUFPNEIsSUFBQUEsaUJBQVUsRUFBQ0gsTUFBTWQsS0FBSztJQUMvQjtJQUNBLElBQUljLE1BQU1SLElBQUksS0FBSyxZQUFZO1FBQzdCLE9BQU8sQ0FBQyxJQUFJLEVBQUVRLE1BQU1kLEtBQUssQ0FBQyxDQUFDO0lBQzdCO0lBQ0EsSUFBSWMsTUFBTXpCLFNBQVMsS0FBSyxnQkFBZ0I7UUFDdEMsT0FBTyxDQUFDLEVBQUU2QixJQUFBQSxvQ0FBNkIsRUFBQ0osTUFBTWQsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFYyxNQUFNRixVQUFVLENBQUMsQ0FBQztJQUNqRjtJQUVBLE9BQU8sQ0FBQyxFQUFFRSxNQUFNZCxLQUFLLENBQUMsQ0FBQyxFQUFFYyxNQUFNRixVQUFVLENBQUMsQ0FBQztBQUM3QyJ9