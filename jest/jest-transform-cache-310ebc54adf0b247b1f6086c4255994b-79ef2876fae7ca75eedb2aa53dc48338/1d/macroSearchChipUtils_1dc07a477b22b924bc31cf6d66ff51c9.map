{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/cqs-query-bar/src/lib/chips/macroSearchChipUtils.ts"],"sourcesContent":["import { RpqlFlatFilter } from \"@rp/common/api-types\"\nimport { capitalize, capitalizeAllWordsBySeparator } from \"@rp/common/utils\"\nimport { isGroup, usePanelConfig } from \"@rp/react/tanstack-api/discovery-panel-config\"\n\nconst useMacroSearchFilter = (flatFilters: Array<RpqlFlatFilter | null>, macroType: string) => {\n  const { data, isLoading } = usePanelConfig()\n  const { groups = [], label } =\n    data?.discoveryPanelCategories.find(item => item.category === macroType.slice(6)) || {}\n  const value = flatFilters\n    .map(flatFilter => {\n      const values = flatFilter?.value || []\n      return Array.isArray(values)\n        ? values.map(value => {\n            const type = flatFilter?.type ?? \"\"\n            const group = groups.filter(isGroup).find(item => item.group === type)\n            return {\n              group: group?.label ?? label ?? type,\n              id: flatFilter?.id ?? \"\",\n              value: value.toString(),\n              type,\n              macroType,\n              macroLabel: label,\n            }\n          })\n        : []\n    })\n    .flat()\n  return { value, isLoading }\n}\n\nconst getMacroChipLabel = (macro: ReturnType<typeof useMacroSearchFilter>[\"value\"][number]) => {\n  const macros = [\"macro_sources\", \"macro_concepts\"]\n  if (macros.includes(macro.macroType)) {\n    return capitalize(macro.value)\n  }\n  if (macro.type === \"category\") {\n    return `All ${macro.value}`\n  }\n  if (macro.macroType === \"macro_topics\") {\n    return `${capitalizeAllWordsBySeparator(macro.value, \"-\")} ${macro.macroLabel}`\n  }\n\n  return `${macro.value} ${macro.macroLabel}`\n}\n\nexport { useMacroSearchFilter, getMacroChipLabel }\n"],"names":["getMacroChipLabel","useMacroSearchFilter","flatFilters","macroType","data","isLoading","usePanelConfig","groups","label","discoveryPanelCategories","find","item","category","slice","value","map","flatFilter","values","Array","isArray","type","group","filter","isGroup","id","toString","macroLabel","flat","macro","macros","includes","capitalize","capitalizeAllWordsBySeparator"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA6C+BA,iBAAiB;eAAjBA;;IAAtBC,oBAAoB;eAApBA;;;uBA5CiD;sCAClB;AAExC,MAAMA,uBAAuB,CAACC,aAA2CC;IACvE,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAE,GAAGC,IAAAA,oCAAc;IAC1C,MAAM,EAAEC,SAAS,EAAE,EAAEC,KAAK,EAAE,GAC1BJ,CAAAA,iBAAAA,2BAAAA,KAAMK,wBAAwB,CAACC,IAAI,CAACC,CAAAA,OAAQA,KAAKC,QAAQ,KAAKT,UAAUU,KAAK,CAAC,QAAO,CAAC;IACxF,MAAMC,QAAQZ,YACXa,GAAG,CAACC,CAAAA;QACH,MAAMC,SAASD,CAAAA,uBAAAA,iCAAAA,WAAYF,KAAK,KAAI,EAAE;QACtC,OAAOI,MAAMC,OAAO,CAACF,UACjBA,OAAOF,GAAG,CAACD,CAAAA;gBACIE;YAAb,MAAMI,OAAOJ,CAAAA,mBAAAA,uBAAAA,iCAAAA,WAAYI,IAAI,cAAhBJ,8BAAAA,mBAAoB;YACjC,MAAMK,QAAQd,OAAOe,MAAM,CAACC,6BAAO,EAAEb,IAAI,CAACC,CAAAA,OAAQA,KAAKU,KAAK,KAAKD;gBAExDC,cAAAA,MACHL;YAFN,OAAO;gBACLK,OAAOA,CAAAA,OAAAA,CAAAA,eAAAA,kBAAAA,4BAAAA,MAAOb,KAAK,cAAZa,0BAAAA,eAAgBb,mBAAhBa,kBAAAA,OAAyBD;gBAChCI,IAAIR,CAAAA,iBAAAA,uBAAAA,iCAAAA,WAAYQ,EAAE,cAAdR,4BAAAA,iBAAkB;gBACtBF,OAAOA,MAAMW,QAAQ;gBACrBL;gBACAjB;gBACAuB,YAAYlB;YACd;QACF,KACA,EAAE;IACR,GACCmB,IAAI;IACP,OAAO;QAAEb;QAAOT;IAAU;AAC5B;AAEA,MAAML,oBAAoB,CAAC4B;IACzB,MAAMC,SAAS;QAAC;QAAiB;KAAiB;IAClD,IAAIA,OAAOC,QAAQ,CAACF,MAAMzB,SAAS,GAAG;QACpC,OAAO4B,IAAAA,iBAAU,EAACH,MAAMd,KAAK;IAC/B;IACA,IAAIc,MAAMR,IAAI,KAAK,YAAY;QAC7B,OAAO,CAAC,IAAI,EAAEQ,MAAMd,KAAK,CAAC,CAAC;IAC7B;IACA,IAAIc,MAAMzB,SAAS,KAAK,gBAAgB;QACtC,OAAO,CAAC,EAAE6B,IAAAA,oCAA6B,EAACJ,MAAMd,KAAK,EAAE,KAAK,CAAC,EAAEc,MAAMF,UAAU,CAAC,CAAC;IACjF;IAEA,OAAO,CAAC,EAAEE,MAAMd,KAAK,CAAC,CAAC,EAAEc,MAAMF,UAAU,CAAC,CAAC;AAC7C"}