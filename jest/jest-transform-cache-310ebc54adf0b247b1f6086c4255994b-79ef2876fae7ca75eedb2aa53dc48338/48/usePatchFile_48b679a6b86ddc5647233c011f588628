52b337a6e6ff1f52cf08d57f4c7bed73
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePatchFile", {
    enumerable: true,
    get: function() {
        return usePatchFile;
    }
});
const _clerkreact = require("@clerk/clerk-react");
const _adapters = require("@rp/adapters");
const _customerio = require("@rp/react/common/customer-io");
const _reactquery = require("@tanstack/react-query");
const _getMetadata = require("../services/getMetadata");
const _patch = require("../services/patch");
const _utils = require("../utils");
const _validateFields = require("../utils/validateFields");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// Update an existing file
const usePatchFile = (fileId)=>{
    const { user } = (0, _clerkreact.useUser)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const onMutate = async (fields)=>{
        queryClient.setQueriesData({
            queryKey: _utils.filesQueryKeys.paginated()
        }, (data)=>{
            if (!data) return data;
            return _object_spread_props(_object_spread({}, data), {
                pages: data.pages.map((page)=>{
                    return {
                        results: page.results.map((file)=>{
                            if (file.file_id === fileId) {
                                var _fields_file_name, _fields_shared_with;
                                return _object_spread_props(_object_spread({}, file), {
                                    file_name: (_fields_file_name = fields.file_name) !== null && _fields_file_name !== void 0 ? _fields_file_name : file.file_name,
                                    shared_with: (_fields_shared_with = fields.shared_with) !== null && _fields_shared_with !== void 0 ? _fields_shared_with : file.shared_with
                                });
                            }
                            return file;
                        })
                    };
                })
            });
        });
        queryClient.setQueryData(_utils.filesQueryKeys.metadata(fileId), (data)=>{
            if (!data) return data;
            var _fields_shared_with, _fields_file_name;
            return _object_spread_props(_object_spread({}, data), {
                sharedWith: (_fields_shared_with = fields.shared_with) !== null && _fields_shared_with !== void 0 ? _fields_shared_with : data === null || data === void 0 ? void 0 : data.sharedWith,
                name: (_fields_file_name = fields.file_name) !== null && _fields_file_name !== void 0 ? _fields_file_name : data === null || data === void 0 ? void 0 : data.name
            });
        });
    };
    const onError = ()=>{
        queryClient.invalidateQueries({
            queryKey: _utils.filesQueryKeys.metadata(fileId)
        });
        queryClient.invalidateQueries({
            queryKey: _utils.filesQueryKeys.paginated()
        });
    };
    return (0, _reactquery.useMutation)({
        mutationFn: async (fields)=>{
            const verifiedFields = await (0, _validateFields.validateFields)(fileId, fields, queryClient);
            const originalFile = await (0, _getMetadata.getMetadata)(fileId, queryClient);
            return (0, _patch.patch)({
                fileId,
                fields: verifiedFields
            }, originalFile);
        },
        onMutate,
        onError,
        onSuccess: (result, fields)=>{
            const updatedFields = [];
            if (fields.file_name) updatedFields.push("fileName");
            if (fields.shared_with) updatedFields.push("sharedWith");
            var _user_id;
            _customerio.filesCustomerIo.filesApi.edited({
                fileId: result.id,
                ownerId: result.owner,
                updatedById: (_user_id = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id !== void 0 ? _user_id : "",
                origin: _adapters.adapters.platform.name,
                sharedWith: result.sharedWith,
                updatedFields,
                timestamp: Date.now() * 1000
            });
            queryClient.setQueryData(_utils.filesQueryKeys.metadata(result.id), result);
            queryClient.refetchQueries({
                queryKey: _utils.filesQueryKeys.file,
                exact: true
            });
            queryClient.refetchQueries({
                queryKey: _utils.filesQueryKeys.paginated()
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,