c96cf3d573691dcf96c47722a809ecde
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentViewerSelector", {
    enumerable: true,
    get: function() {
        return DocumentViewerSelector;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _types = require("@rp/react/rpjson/types");
const _basecomponents = require("@rp/react/web/common/base-components");
const _useDocumentViewerPageScrolling = require("./hooks/useDocumentViewerPageScrolling");
const _useDocumentViewerPageVisited = require("./hooks/useDocumentViewerPageVisited");
const _PDFViewer = /*#__PURE__*/ _interop_require_default(require("./pdf/PDFViewer"));
const _RPJSONViewer = /*#__PURE__*/ _interop_require_default(require("./rpJSON/RPJSONViewer"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function DocumentViewerSelector({ isRpJsonLoading, rpjsonDocument, isPrivate, documentId, backTitle, disableBackButton, disableCheckbox, disableDocumentDiscovery, expression, onChange, onExclude, error, rpjsonHeaderOffset, pdfHeaderOffset, pdfBodyOffset, onAddToWatchlist, shouldUseScrollTrigger = true, viewerPaddingTop, isFromChat = false, customDocumentHeaderProps, customBackClick, customBackgroundColor }) {
    const navigate = (0, _reactrouterdom.useNavigate)();
    const [selectedDetection, setSelectedDetection] = (0, _react.useState)(undefined);
    const handleClick = ()=>{
        if (customBackClick) {
            customBackClick();
            return;
        }
        setSelectedDetection(undefined);
        navigate(-1);
    };
    (0, _useDocumentViewerPageScrolling.useDocumentViewerPageScrolling)({
        documentId
    });
    (0, _useDocumentViewerPageVisited.useDocumentViewerPageVisited)({
        documentId
    });
    if (isRpJsonLoading || !rpjsonDocument) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {});
    }
    const shouldShowPdfViewer = (rpjsonDocument === null || rpjsonDocument === void 0 ? void 0 : rpjsonDocument.document.metadata.media_type) === "application/pdf" && (isPrivate || rpjsonDocument.document.metadata.url !== undefined);
    const title = rpjsonDocument && (0, _types.isTextBlock)(rpjsonDocument.content.title) ? rpjsonDocument.content.title.text : "";
    const name = rpjsonDocument.document.metadata.provider_filename || title;
    if (shouldShowPdfViewer) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_PDFViewer.default, {
            disableBackButton: disableBackButton,
            documentId: documentId,
            backTitle: backTitle,
            handleClick: handleClick,
            name: name,
            isPrivate: !!isPrivate,
            pdfUrl: rpjsonDocument.document.metadata.url,
            pdfBodyOffset: pdfBodyOffset,
            pdfHeaderOffset: pdfHeaderOffset,
            isFromChat: isFromChat,
            customDocumentHeaderProps: customDocumentHeaderProps
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_RPJSONViewer.default, {
        backTitle: backTitle,
        disableBackButton: disableBackButton,
        disableCheckbox: disableCheckbox,
        disableDocumentDiscovery: disableDocumentDiscovery,
        documentId: documentId,
        error: error,
        expression: expression,
        handleClick: handleClick,
        rpjsonHeaderOffset: rpjsonHeaderOffset,
        isPrivate: !!isPrivate,
        isRpJsonLoading: isRpJsonLoading,
        onAddToWatchlist: onAddToWatchlist,
        onChange: onChange,
        onExclude: onExclude,
        rpjsonDocument: rpjsonDocument,
        selectedDetection: selectedDetection,
        setSelectedDetection: setSelectedDetection,
        shouldUseScrollTrigger: shouldUseScrollTrigger,
        viewerPaddingTop: viewerPaddingTop,
        name: name,
        customDocumentHeaderProps: customDocumentHeaderProps,
        customBackgroundColor: customBackgroundColor
    });
}

//# sourceMappingURL=data:application/json;base64,