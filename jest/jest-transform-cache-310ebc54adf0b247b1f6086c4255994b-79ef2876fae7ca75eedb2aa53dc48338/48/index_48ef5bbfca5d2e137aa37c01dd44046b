ab80387f41c89163ffe642873d6d0d9e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    watchlistGlobalMotivationValidator: function() {
        return watchlistGlobalMotivationValidator;
    },
    watchlistSaveImageInputSchema: function() {
        return watchlistSaveImageInputSchema;
    },
    watchlistSaveImageOutputSchema: function() {
        return watchlistSaveImageOutputSchema;
    }
});
const _zod = /*#__PURE__*/ _interop_require_default(require("zod"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const watchlistSaveImageInputSchema = _zod.default.object({
    id: _zod.default.string(),
    image: _zod.default.union([
        _zod.default.boolean(),
        _zod.default.null()
    ]).optional(),
    avatar: _zod.default.union([
        _zod.default.boolean(),
        _zod.default.null()
    ]).optional()
});
const watchlistSaveImageOutputSchema = _zod.default.object({
    url: _zod.default.string(),
    key: _zod.default.string()
});
const expectedPlaceholders = [
    "company",
    "watchlist"
];
const watchlistGlobalMotivationValidator = _zod.default.string().refine((val)=>{
    const matches = [
        ...val.matchAll(/\{\{\s*(\w+)\s*\}\}/g)
    ].map((m)=>m[1]);
    const hasAll = expectedPlaceholders.every((ph)=>matches.includes(ph));
    const onlyExpected = matches.every((ph)=>expectedPlaceholders.includes(ph));
    return hasAll && onlyExpected;
}, {
    message: "String must include exactly {{company}} and {{watchlist}} placeholders."
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3pvZC1jb250cmFjdHMvd2F0Y2hsaXN0cy9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHogZnJvbSBcInpvZFwiXG5cbmV4cG9ydCBjb25zdCB3YXRjaGxpc3RTYXZlSW1hZ2VJbnB1dFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIGltYWdlOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICBhdmF0YXI6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG59KVxuXG5leHBvcnQgY29uc3Qgd2F0Y2hsaXN0U2F2ZUltYWdlT3V0cHV0U2NoZW1hID0gei5vYmplY3QoeyB1cmw6IHouc3RyaW5nKCksIGtleTogei5zdHJpbmcoKSB9KVxuXG5jb25zdCBleHBlY3RlZFBsYWNlaG9sZGVycyA9IFtcImNvbXBhbnlcIiwgXCJ3YXRjaGxpc3RcIl1cblxuZXhwb3J0IGNvbnN0IHdhdGNobGlzdEdsb2JhbE1vdGl2YXRpb25WYWxpZGF0b3IgPSB6LnN0cmluZygpLnJlZmluZShcbiAgdmFsID0+IHtcbiAgICBjb25zdCBtYXRjaGVzID0gWy4uLnZhbC5tYXRjaEFsbCgvXFx7XFx7XFxzKihcXHcrKVxccypcXH1cXH0vZyldLm1hcChtID0+IG1bMV0pXG4gICAgY29uc3QgaGFzQWxsID0gZXhwZWN0ZWRQbGFjZWhvbGRlcnMuZXZlcnkocGggPT4gbWF0Y2hlcy5pbmNsdWRlcyhwaCkpXG4gICAgY29uc3Qgb25seUV4cGVjdGVkID0gbWF0Y2hlcy5ldmVyeShwaCA9PiBleHBlY3RlZFBsYWNlaG9sZGVycy5pbmNsdWRlcyhwaCkpXG4gICAgcmV0dXJuIGhhc0FsbCAmJiBvbmx5RXhwZWN0ZWRcbiAgfSxcbiAge1xuICAgIG1lc3NhZ2U6IFwiU3RyaW5nIG11c3QgaW5jbHVkZSBleGFjdGx5IHt7Y29tcGFueX19IGFuZCB7e3dhdGNobGlzdH19IHBsYWNlaG9sZGVycy5cIixcbiAgfSxcbilcbiJdLCJuYW1lcyI6WyJ3YXRjaGxpc3RHbG9iYWxNb3RpdmF0aW9uVmFsaWRhdG9yIiwid2F0Y2hsaXN0U2F2ZUltYWdlSW5wdXRTY2hlbWEiLCJ3YXRjaGxpc3RTYXZlSW1hZ2VPdXRwdXRTY2hlbWEiLCJ6Iiwib2JqZWN0IiwiaWQiLCJzdHJpbmciLCJpbWFnZSIsInVuaW9uIiwiYm9vbGVhbiIsIm51bGwiLCJvcHRpb25hbCIsImF2YXRhciIsInVybCIsImtleSIsImV4cGVjdGVkUGxhY2Vob2xkZXJzIiwicmVmaW5lIiwidmFsIiwibWF0Y2hlcyIsIm1hdGNoQWxsIiwibWFwIiwibSIsImhhc0FsbCIsImV2ZXJ5IiwicGgiLCJpbmNsdWRlcyIsIm9ubHlFeHBlY3RlZCIsIm1lc3NhZ2UiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFZYUEsa0NBQWtDO2VBQWxDQTs7SUFWQUMsNkJBQTZCO2VBQTdCQTs7SUFNQUMsOEJBQThCO2VBQTlCQTs7OzREQVJDOzs7Ozs7QUFFUCxNQUFNRCxnQ0FBZ0NFLFlBQUMsQ0FBQ0MsTUFBTSxDQUFDO0lBQ3BEQyxJQUFJRixZQUFDLENBQUNHLE1BQU07SUFDWkMsT0FBT0osWUFBQyxDQUFDSyxLQUFLLENBQUM7UUFBQ0wsWUFBQyxDQUFDTSxPQUFPO1FBQUlOLFlBQUMsQ0FBQ08sSUFBSTtLQUFHLEVBQUVDLFFBQVE7SUFDaERDLFFBQVFULFlBQUMsQ0FBQ0ssS0FBSyxDQUFDO1FBQUNMLFlBQUMsQ0FBQ00sT0FBTztRQUFJTixZQUFDLENBQUNPLElBQUk7S0FBRyxFQUFFQyxRQUFRO0FBQ25EO0FBRU8sTUFBTVQsaUNBQWlDQyxZQUFDLENBQUNDLE1BQU0sQ0FBQztJQUFFUyxLQUFLVixZQUFDLENBQUNHLE1BQU07SUFBSVEsS0FBS1gsWUFBQyxDQUFDRyxNQUFNO0FBQUc7QUFFMUYsTUFBTVMsdUJBQXVCO0lBQUM7SUFBVztDQUFZO0FBRTlDLE1BQU1mLHFDQUFxQ0csWUFBQyxDQUFDRyxNQUFNLEdBQUdVLE1BQU0sQ0FDakVDLENBQUFBO0lBQ0UsTUFBTUMsVUFBVTtXQUFJRCxJQUFJRSxRQUFRLENBQUM7S0FBd0IsQ0FBQ0MsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQSxDQUFDLENBQUMsRUFBRTtJQUN2RSxNQUFNQyxTQUFTUCxxQkFBcUJRLEtBQUssQ0FBQ0MsQ0FBQUEsS0FBTU4sUUFBUU8sUUFBUSxDQUFDRDtJQUNqRSxNQUFNRSxlQUFlUixRQUFRSyxLQUFLLENBQUNDLENBQUFBLEtBQU1ULHFCQUFxQlUsUUFBUSxDQUFDRDtJQUN2RSxPQUFPRixVQUFVSTtBQUNuQixHQUNBO0lBQ0VDLFNBQVM7QUFDWCJ9