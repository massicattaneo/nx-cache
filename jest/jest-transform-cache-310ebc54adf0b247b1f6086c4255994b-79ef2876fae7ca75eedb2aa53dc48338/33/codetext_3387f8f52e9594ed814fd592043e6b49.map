{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/code-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n"],"names":["codeText","name","tokenize","tokenizeCodeText","resolve","resolveCodeText","previous","events","tailExitIndex","length","headEnterIndex","index","enter","type","undefined","end","splice","code","effects","ok","nok","self","sizeOpen","size","token","start","sequenceOpen","consume","exit","between","sequenceClose","markdownLineEnding","data"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}