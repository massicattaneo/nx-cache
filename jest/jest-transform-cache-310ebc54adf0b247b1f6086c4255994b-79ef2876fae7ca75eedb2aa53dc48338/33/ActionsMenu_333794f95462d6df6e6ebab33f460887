b579cc4545ae295b642156537cff8d50
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ActionsMenu", {
    enumerable: true,
    get: function() {
        return ActionsMenu;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _RPTooltip = require("../RPTooltip");
const NestedMenu = /*#__PURE__*/ (0, _react.forwardRef)(({ actions, item, open, handleClose, onActionClick, anchorEl, nested, anchorOrigin = {
    horizontal: "center",
    vertical: "bottom"
}, transformOrigin = {
    horizontal: "center",
    vertical: "top"
} }, ref)=>{
    const [selectedItem, setSelectedItem] = (0, _react.useState)(null);
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const nestedAnchor = isMobile ? {
        horizontal: "left",
        vertical: "top"
    } : {
        horizontal: "right",
        vertical: "top"
    };
    const nestedTransform = isMobile ? {
        horizontal: "right",
        vertical: "top"
    } : {
        horizontal: "left",
        vertical: "top"
    };
    (0, _react.useEffect)(()=>{
        return ()=>setSelectedItem(null);
    }, [
        open
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Menu, {
        variant: "menu",
        onClick: (e)=>e.stopPropagation(),
        open: open,
        anchorEl: anchorEl,
        onClose: handleClose,
        sx: {
            "& .MuiList-root": {
                maxHeight: "80vh"
            },
            pointerEvents: nested ? "none" : undefined,
            mt: nested ? -1 : 0,
            ul: {
                backgroundColor: "elevation.dp06"
            }
        },
        ref: ref,
        anchorOrigin: nested ? nestedAnchor : anchorOrigin,
        transformOrigin: nested ? nestedTransform : transformOrigin,
        hideBackdrop: nested,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                pointerEvents: "auto"
            },
            children: actions.map((action)=>{
                const { id, label, icon, onClick, allowedAction, disabledAction, nestedActions, color } = action;
                if (allowedAction === null || allowedAction === void 0 ? void 0 : allowedAction(item)) return null;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(NestedMenuItem, {
                    onClick: (ev)=>{
                        setSelectedItem(label);
                        onClick(ev);
                        onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick(action);
                    },
                    label: label,
                    nestedActions: nestedActions,
                    selected: label === selectedItem,
                    onMouseEnter: ()=>setSelectedItem(label),
                    handleClose: handleClose,
                    item: item,
                    disabled: disabledAction === null || disabledAction === void 0 ? void 0 : disabledAction(item),
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            sx: {
                                display: "flex",
                                gap: 1,
                                color
                            },
                            children: [
                                typeof icon === "function" ? icon(item) : icon,
                                " ",
                                typeof label === "function" ? label(item) : label
                            ]
                        }),
                        nestedActions !== undefined ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowRight, {}) : null
                    ]
                }, id);
            })
        })
    });
});
const NestedMenuItem = ({ children, onClick, nestedActions, selected, onMouseEnter, handleClose, item, disabled })=>{
    const ref = (0, _react.useRef)(null);
    const openSubmenu = nestedActions !== undefined && selected;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.MenuItem, {
                sx: {
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    gap: 2,
                    minHeight: "32px",
                    py: 1,
                    backgroundColor: "elevation.dp06",
                    "& svg": {
                        color: "text.secondary"
                    }
                },
                onClick: ()=>{
                    !(nestedActions === null || nestedActions === void 0 ? void 0 : nestedActions.length) && handleClose();
                    onClick(item);
                },
                onMouseEnter: onMouseEnter,
                ref: ref,
                disabled: disabled,
                children: children
            }),
            nestedActions !== undefined ? /*#__PURE__*/ (0, _jsxruntime.jsx)(NestedMenu, {
                actions: nestedActions,
                item: item,
                open: openSubmenu,
                handleClose: handleClose,
                anchorEl: ref.current,
                nested: true
            }) : null
        ]
    });
};
const ActionsMenu = ({ open, setOpen, actions, item, anchorOrigin, transformOrigin, onActionClick, title = "More actions", sxIconButton, openColor = "primary.main" })=>{
    const [ref, setRef] = (0, _react.useState)(null);
    const handleClose = (0, _react.useCallback)(()=>{
        setOpen(false);
    }, [
        setOpen
    ]);
    (0, _hooks.useDisableIOSTouch)(open);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_RPTooltip.RPTooltip, {
                title: title,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                    sx: sxIconButton,
                    ref: setRef,
                    size: "small",
                    onClick: (e)=>{
                        e.stopPropagation();
                        setOpen(true);
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.MoreVert, {
                        sx: {
                            color: open ? openColor : ""
                        }
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ClickAwayListener, {
                onClickAway: handleClose,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(NestedMenu, {
                    open: open,
                    actions: actions,
                    anchorOrigin: anchorOrigin,
                    transformOrigin: transformOrigin,
                    item: item,
                    handleClose: handleClose,
                    anchorEl: ref,
                    onActionClick: onActionClick
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,