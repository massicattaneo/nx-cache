3e9f0bf444988400371f3dc287c1785b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistSuggestionListMobile", {
    enumerable: true,
    get: function() {
        return WatchlistSuggestionListMobile;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _discoverypanelconfig = require("@rp/react/tanstack-api/discovery-panel-config");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _providers1 = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _AddItemsButton = require("./AddItemsButton");
const _LoadingSuggestion = require("./LoadingSuggestion");
const _WatchlistEmptyPlaceholder = require("./WatchlistEmptyPlaceholder");
const _WatchlistSuggestionItemmobile = require("./WatchlistSuggestionItem.mobile");
const _WatchlistSuggestionList = require("./WatchlistSuggestionList");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const MOBILE_MENU_HEIGHT = 28;
const WatchlistSuggestionListMobile = ({ pages, included, isLoading, onAddSuggestions, categoryFilter, isPatching, fetchNextPage, hasMore, hasFilter, watchlist })=>{
    var _pages_;
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const suggestions = (0, _react.useMemo)(()=>pages.map((i)=>i.results).flat().filter(_suggestion.isEnhancedCqsItemSuggestion), [
        pages
    ]);
    const [selectedSuggestions, setSelectedSuggestions] = (0, _react.useState)([]);
    const { quota } = (0, _providers.useAccount)();
    const isWatchlistEntityLimitMet = (0, _hooks.useIsWatchlistEntityLimitMet)(quota, included.length + selectedSuggestions.length);
    const { data: panelConfig } = (0, _discoverypanelconfig.usePanelConfig)();
    const [categoryFields] = (0, _react.useMemo)(()=>{
        var _panelConfig_discoveryPanelCategories;
        const categoryMap = (0, _WatchlistSuggestionList.getDisplayCategories)((_panelConfig_discoveryPanelCategories = panelConfig === null || panelConfig === void 0 ? void 0 : panelConfig.discoveryPanelCategories) !== null && _panelConfig_discoveryPanelCategories !== void 0 ? _panelConfig_discoveryPanelCategories : []);
        return categoryFilter ? [
            categoryMap[categoryFilter].fields,
            categoryMap[categoryFilter].title
        ] : [
            [],
            undefined
        ];
    }, [
        categoryFilter,
        panelConfig
    ]);
    const addSelectedSuggestion = (0, _react.useCallback)((key)=>{
        setSelectedSuggestions((prev)=>[
                ...prev,
                key
            ]);
    }, []);
    const removeSelectedSuggestion = (0, _react.useCallback)((key)=>{
        setSelectedSuggestions((prev)=>{
            const filteredSuggestions = prev.filter((selectedKey)=>selectedKey !== key);
            return filteredSuggestions;
        });
    }, []);
    var _pages__count;
    const numOfResults = (_pages__count = (_pages_ = pages[0]) === null || _pages_ === void 0 ? void 0 : _pages_.count) !== null && _pages__count !== void 0 ? _pages__count : 0;
    const hasResults = !(!isLoading && suggestions.length === 0);
    var _watchlist_items_length;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            width: "100%",
            height: "100%"
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    position: "sticky",
                    height: MOBILE_MENU_HEIGHT,
                    justifyContent: "space-between",
                    alignItems: "end",
                    backgroundColor: "surface.main",
                    pt: 0,
                    pl: 2,
                    zIndex: 1
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        width: "100%",
                        alignItems: "center",
                        minHeight: 33
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            color: "grey.300",
                            variant: "caption",
                            sx: {
                                flexGrow: 1,
                                whiteSpace: "nowrap"
                            },
                            children: isLoading ? "" : `Showing ${(0, _utils.formatNumber)(numOfResults)} item${numOfResults > 1 ? "s" : ""}`
                        }),
                        !isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_AddItemsButton.AddItemsButtonMobile, {
                            amount: selectedSuggestions.length,
                            onClick: ()=>{
                                if (isWatchlistEntityLimitMet) {
                                    planComparisonHandleOpen(_settings.WATCHLIST_ENTITIES_FEATURE_NAME);
                                    return;
                                }
                                setSelectedSuggestions([]);
                                onAddSuggestions(selectedSuggestions);
                            },
                            loading: isPatching,
                            watchlistItemsCount: (_watchlist_items_length = watchlist === null || watchlist === void 0 ? void 0 : watchlist.items.length) !== null && _watchlist_items_length !== void 0 ? _watchlist_items_length : 0
                        }) : null
                    ]
                })
            }),
            !hasResults ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    display: "flex",
                    alignItems: "center",
                    height: "calc(100% - 58px)"
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistEmptyPlaceholder.WatchlistEmptyPlaceholder, {
                    placeholder: "We couldn't find any results that match your search criteria. Please try again with different keywords."
                })
            }) : null,
            hasResults ? isLoading ? new Array(20).fill(0).map((_, index)=>{
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSuggestion.LoadingSuggestion, {
                    extraColumns: 0
                }, index);
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                items: suggestions.map((s)=>{
                    var _s_id;
                    return _object_spread_props(_object_spread({}, s), {
                        id: (_s_id = s.id) !== null && _s_id !== void 0 ? _s_id : s.key
                    });
                }),
                fetchNextPage: fetchNextPage,
                hasMore: hasMore,
                renderItem: (suggestion)=>{
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistSuggestionItemmobile.WatchlistSuggestionItemMobile, {
                        hasFilter: hasFilter,
                        disabled: isPatching,
                        isLoading: false,
                        suggestion: suggestion,
                        selected: included.includes(suggestion.key) || selectedSuggestions.includes(suggestion.key),
                        included: included.includes(suggestion.key),
                        onChange: (key, value)=>value ? addSelectedSuggestion(key) : removeSelectedSuggestion(key),
                        categoryFilter: categoryFilter,
                        fields: categoryFields
                    }, suggestion.key);
                }
            }) : null
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,