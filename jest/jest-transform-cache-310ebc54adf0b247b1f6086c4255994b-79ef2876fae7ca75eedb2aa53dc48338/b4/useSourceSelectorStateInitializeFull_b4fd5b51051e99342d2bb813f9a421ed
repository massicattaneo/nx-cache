22a1b1ee7a112bd647f8b482b6d9aa61
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSourceSelectorStateInitializeFull", {
    enumerable: true,
    get: function() {
        return useSourceSelectorStateInitializeFull;
    }
});
const _react = require("react");
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _partition = /*#__PURE__*/ _interop_require_default(require("lodash/partition"));
const _content = require("@rp/react/tanstack-api/content");
const _providers = require("@rp/react/web/common/providers");
const _mapContentPackageToSelectedPackage = require("../utils/mapContentPackageToSelectedPackage");
const _mapContentSourceToSelectedSource = require("../utils/mapContentSourceToSelectedSource");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const defaultInitialSourceSelectorState = {
    isFilterInclude: true,
    sourceIDs: [],
    packageIDs: []
};
function useSourceSelectorStateInitializeFull({ initialState = defaultInitialSourceSelectorState, setSelectedSources, setSelectedAllPackages, setIsFilterInclude }) {
    const { enableWebFeSourceSelectorV1SelectAll } = (0, _launchdarklyreactclientsdk.useFlags)();
    const { enqueueError } = (0, _providers.useSnackbar)();
    const contentSources = (0, _content.useContentSourcesByID)(initialState.sourceIDs);
    const contentPackages = (0, _content.useContentPackagesByID)(enableWebFeSourceSelectorV1SelectAll ? initialState.packageIDs : []);
    const areContentPackagesFetching = contentPackages.some((pkg)=>pkg.isFetching);
    const areContentSourcesFetching = contentSources.some((source)=>source.isFetching);
    const [hasInitializingError, setHasInitializingError] = (0, _react.useState)(false);
    const { mappedContentSources, mappedContentPackages, isInitializingState } = (0, _react.useMemo)(()=>{
        if (areContentSourcesFetching || areContentPackagesFetching) {
            return {
                areContentSourcesFetching: true,
                areContentPackagesFetching: true,
                mappedContentSources: [],
                mappedContentPackages: [],
                isInitializingState: true
            };
        }
        const [validContentPackages, invalidContentPackages] = (0, _partition.default)(contentPackages, (contentPackage)=>!contentPackage.isError);
        const [validContentSources, invalidContentSources] = (0, _partition.default)(contentSources, (contentSource)=>!contentSource.isError);
        if (invalidContentPackages.length || invalidContentSources.length) {
            setHasInitializingError(true);
            enqueueError("Some initializing packages or sources failed to load.");
        }
        const mappedContentSources = validContentSources.filter((response)=>{
            var _response_data;
            return (_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.entitled;
        }).map(_mapContentSourceToSelectedSource.mapContentSourceToSelectedSource);
        const mappedContentPackages = validContentPackages.filter((response)=>{
            var _response_data;
            return (_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data.entitled;
        }).map(_mapContentPackageToSelectedPackage.mapContentPackageToSelectedPackage);
        return {
            areContentSourcesFetching,
            areContentPackagesFetching,
            mappedContentSources,
            mappedContentPackages,
            isInitializingState: false
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps -- useQueries responses are not stable references
    }, [
        areContentSourcesFetching,
        areContentPackagesFetching
    ]);
    (0, _react.useEffect)(()=>{
        if (!areContentSourcesFetching && !areContentPackagesFetching) {
            setSelectedSources(mappedContentSources);
            setSelectedAllPackages(mappedContentPackages);
            setIsFilterInclude(initialState.isFilterInclude);
        }
    }, [
        areContentSourcesFetching,
        areContentPackagesFetching,
        mappedContentSources,
        mappedContentPackages,
        initialState.isFilterInclude,
        setSelectedSources,
        setSelectedAllPackages,
        setIsFilterInclude
    ]);
    const initialStateFull = (0, _react.useMemo)(()=>areContentSourcesFetching || areContentPackagesFetching ? null : {
            isFilterInclude: initialState.isFilterInclude,
            packages: mappedContentPackages,
            sources: mappedContentSources
        }, [
        areContentPackagesFetching,
        areContentSourcesFetching,
        initialState.isFilterInclude,
        mappedContentPackages,
        mappedContentSources
    ]);
    return {
        initialStateFull,
        isInitializingState,
        hasInitializingError
    };
}

//# sourceMappingURL=data:application/json;base64,