{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/source-selector/src/hooks/useSourceSelectorStateInitializeFull.ts"],"sourcesContent":["import { type Dispatch, type SetStateAction, useEffect, useMemo, useState } from \"react\"\nimport { useFlags } from \"launchdarkly-react-client-sdk\"\nimport partition from \"lodash/partition\"\nimport {\n  type SourceSelectorSubmission,\n  useContentPackagesByID,\n  useContentSourcesByID,\n} from \"@rp/react/tanstack-api/content\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport {\n  SourceSelectionInitialStateFull,\n  SourceSelectorFeatureFlags,\n  SourceSelectorSelectedPackageInfo,\n  SourceSelectorSelectedSourceInfo,\n} from \"../sourceSelector.types\"\nimport { mapContentPackageToSelectedPackage } from \"../utils/mapContentPackageToSelectedPackage\"\nimport { mapContentSourceToSelectedSource } from \"../utils/mapContentSourceToSelectedSource\"\n\nconst defaultInitialSourceSelectorState: SourceSelectorSubmission = {\n  isFilterInclude: true,\n  sourceIDs: [],\n  packageIDs: [],\n}\n\ntype UseInitializeSourceSelectorStateProps = {\n  initialState: SourceSelectorSubmission | undefined\n  setSelectedSources: Dispatch<SetStateAction<Array<SourceSelectorSelectedSourceInfo>>>\n  setSelectedAllPackages: Dispatch<SetStateAction<Array<SourceSelectorSelectedPackageInfo>>>\n  setIsFilterInclude: Dispatch<SetStateAction<boolean>>\n}\n\ntype UseSourceSelectorStateInitializeFullState = {\n  initialStateFull: SourceSelectionInitialStateFull | null\n  isInitializingState: boolean\n  hasInitializingError: boolean\n}\n\nfunction useSourceSelectorStateInitializeFull({\n  initialState = defaultInitialSourceSelectorState,\n  setSelectedSources,\n  setSelectedAllPackages,\n  setIsFilterInclude,\n}: UseInitializeSourceSelectorStateProps): UseSourceSelectorStateInitializeFullState {\n  const { enableWebFeSourceSelectorV1SelectAll } = useFlags<SourceSelectorFeatureFlags>()\n  const { enqueueError } = useSnackbar()\n\n  const contentSources = useContentSourcesByID(initialState.sourceIDs)\n  const contentPackages = useContentPackagesByID(\n    enableWebFeSourceSelectorV1SelectAll ? initialState.packageIDs : [],\n  )\n\n  const areContentPackagesFetching = contentPackages.some(pkg => pkg.isFetching)\n  const areContentSourcesFetching = contentSources.some(source => source.isFetching)\n\n  const [hasInitializingError, setHasInitializingError] = useState(false)\n  const { mappedContentSources, mappedContentPackages, isInitializingState } = useMemo(() => {\n    if (areContentSourcesFetching || areContentPackagesFetching) {\n      return {\n        areContentSourcesFetching: true,\n        areContentPackagesFetching: true,\n        mappedContentSources: [],\n        mappedContentPackages: [],\n        isInitializingState: true,\n      }\n    }\n\n    const [validContentPackages, invalidContentPackages] = partition(\n      contentPackages,\n      contentPackage => !contentPackage.isError,\n    )\n    const [validContentSources, invalidContentSources] = partition(\n      contentSources,\n      contentSource => !contentSource.isError,\n    )\n\n    if (invalidContentPackages.length || invalidContentSources.length) {\n      setHasInitializingError(true)\n      enqueueError(\"Some initializing packages or sources failed to load.\")\n    }\n\n    const mappedContentSources = validContentSources\n      .filter(response => response.data?.entitled)\n      .map(mapContentSourceToSelectedSource)\n    const mappedContentPackages = validContentPackages\n      .filter(response => response.data?.entitled)\n      .map(mapContentPackageToSelectedPackage)\n\n    return {\n      areContentSourcesFetching,\n      areContentPackagesFetching,\n      mappedContentSources,\n      mappedContentPackages,\n      isInitializingState: false,\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- useQueries responses are not stable references\n  }, [areContentSourcesFetching, areContentPackagesFetching])\n  useEffect(() => {\n    if (!areContentSourcesFetching && !areContentPackagesFetching) {\n      setSelectedSources(mappedContentSources)\n      setSelectedAllPackages(mappedContentPackages)\n      setIsFilterInclude(initialState.isFilterInclude)\n    }\n  }, [\n    areContentSourcesFetching,\n    areContentPackagesFetching,\n    mappedContentSources,\n    mappedContentPackages,\n    initialState.isFilterInclude,\n    setSelectedSources,\n    setSelectedAllPackages,\n    setIsFilterInclude,\n  ])\n\n  const initialStateFull: SourceSelectionInitialStateFull | null = useMemo(\n    () =>\n      areContentSourcesFetching || areContentPackagesFetching\n        ? null\n        : {\n            isFilterInclude: initialState.isFilterInclude,\n            packages: mappedContentPackages,\n            sources: mappedContentSources,\n          },\n    [\n      areContentPackagesFetching,\n      areContentSourcesFetching,\n      initialState.isFilterInclude,\n      mappedContentPackages,\n      mappedContentSources,\n    ],\n  )\n\n  return {\n    initialStateFull,\n    isInitializingState,\n    hasInitializingError,\n  }\n}\n\nexport { useSourceSelectorStateInitializeFull }\nexport type { UseSourceSelectorStateInitializeFullState, UseInitializeSourceSelectorStateProps }\n"],"names":["useSourceSelectorStateInitializeFull","defaultInitialSourceSelectorState","isFilterInclude","sourceIDs","packageIDs","initialState","setSelectedSources","setSelectedAllPackages","setIsFilterInclude","enableWebFeSourceSelectorV1SelectAll","useFlags","enqueueError","useSnackbar","contentSources","useContentSourcesByID","contentPackages","useContentPackagesByID","areContentPackagesFetching","some","pkg","isFetching","areContentSourcesFetching","source","hasInitializingError","setHasInitializingError","useState","mappedContentSources","mappedContentPackages","isInitializingState","useMemo","validContentPackages","invalidContentPackages","partition","contentPackage","isError","validContentSources","invalidContentSources","contentSource","length","filter","response","data","entitled","map","mapContentSourceToSelectedSource","mapContentPackageToSelectedPackage","useEffect","initialStateFull","packages","sources"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA0ISA;;;eAAAA;;;uBA1IwE;4CACxD;kEACH;yBAKf;2BACqB;oDAOuB;kDACF;;;;;;AAEjD,MAAMC,oCAA8D;IAClEC,iBAAiB;IACjBC,WAAW,EAAE;IACbC,YAAY,EAAE;AAChB;AAeA,SAASJ,qCAAqC,EAC5CK,eAAeJ,iCAAiC,EAChDK,kBAAkB,EAClBC,sBAAsB,EACtBC,kBAAkB,EACoB;IACtC,MAAM,EAAEC,oCAAoC,EAAE,GAAGC,IAAAA,oCAAQ;IACzD,MAAM,EAAEC,YAAY,EAAE,GAAGC,IAAAA,sBAAW;IAEpC,MAAMC,iBAAiBC,IAAAA,8BAAqB,EAACT,aAAaF,SAAS;IACnE,MAAMY,kBAAkBC,IAAAA,+BAAsB,EAC5CP,uCAAuCJ,aAAaD,UAAU,GAAG,EAAE;IAGrE,MAAMa,6BAA6BF,gBAAgBG,IAAI,CAACC,CAAAA,MAAOA,IAAIC,UAAU;IAC7E,MAAMC,4BAA4BR,eAAeK,IAAI,CAACI,CAAAA,SAAUA,OAAOF,UAAU;IAEjF,MAAM,CAACG,sBAAsBC,wBAAwB,GAAGC,IAAAA,eAAQ,EAAC;IACjE,MAAM,EAAEC,oBAAoB,EAAEC,qBAAqB,EAAEC,mBAAmB,EAAE,GAAGC,IAAAA,cAAO,EAAC;QACnF,IAAIR,6BAA6BJ,4BAA4B;YAC3D,OAAO;gBACLI,2BAA2B;gBAC3BJ,4BAA4B;gBAC5BS,sBAAsB,EAAE;gBACxBC,uBAAuB,EAAE;gBACzBC,qBAAqB;YACvB;QACF;QAEA,MAAM,CAACE,sBAAsBC,uBAAuB,GAAGC,IAAAA,kBAAS,EAC9DjB,iBACAkB,CAAAA,iBAAkB,CAACA,eAAeC,OAAO;QAE3C,MAAM,CAACC,qBAAqBC,sBAAsB,GAAGJ,IAAAA,kBAAS,EAC5DnB,gBACAwB,CAAAA,gBAAiB,CAACA,cAAcH,OAAO;QAGzC,IAAIH,uBAAuBO,MAAM,IAAIF,sBAAsBE,MAAM,EAAE;YACjEd,wBAAwB;YACxBb,aAAa;QACf;QAEA,MAAMe,uBAAuBS,oBAC1BI,MAAM,CAACC,CAAAA;gBAAYA;oBAAAA,iBAAAA,SAASC,IAAI,cAAbD,qCAAAA,eAAeE,QAAQ;WAC1CC,GAAG,CAACC,kEAAgC;QACvC,MAAMjB,wBAAwBG,qBAC3BS,MAAM,CAACC,CAAAA;gBAAYA;oBAAAA,iBAAAA,SAASC,IAAI,cAAbD,qCAAAA,eAAeE,QAAQ;WAC1CC,GAAG,CAACE,sEAAkC;QAEzC,OAAO;YACLxB;YACAJ;YACAS;YACAC;YACAC,qBAAqB;QACvB;IACA,yGAAyG;IAC3G,GAAG;QAACP;QAA2BJ;KAA2B;IAC1D6B,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACzB,6BAA6B,CAACJ,4BAA4B;YAC7DX,mBAAmBoB;YACnBnB,uBAAuBoB;YACvBnB,mBAAmBH,aAAaH,eAAe;QACjD;IACF,GAAG;QACDmB;QACAJ;QACAS;QACAC;QACAtB,aAAaH,eAAe;QAC5BI;QACAC;QACAC;KACD;IAED,MAAMuC,mBAA2DlB,IAAAA,cAAO,EACtE,IACER,6BAA6BJ,6BACzB,OACA;YACEf,iBAAiBG,aAAaH,eAAe;YAC7C8C,UAAUrB;YACVsB,SAASvB;QACX,GACN;QACET;QACAI;QACAhB,aAAaH,eAAe;QAC5ByB;QACAD;KACD;IAGH,OAAO;QACLqB;QACAnB;QACAL;IACF;AACF"}