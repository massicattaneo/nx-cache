01412d59c91c5fbb5dc39ee5dc02d441
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    convertScheduleDaysToCronExpDays: function() {
        return convertScheduleDaysToCronExpDays;
    },
    convertScheduleToCronExp: function() {
        return convertScheduleToCronExp;
    },
    formatDaysToText: function() {
        return formatDaysToText;
    }
});
const _isEqual = /*#__PURE__*/ _interop_require_default(require("lodash/isEqual"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const daysMapping = {
    mon: {
        short: "Mon",
        long: "Monday"
    },
    tue: {
        short: "Tue",
        long: "Tuesday"
    },
    wed: {
        short: "Wed",
        long: "Wednesday"
    },
    thu: {
        short: "Thu",
        long: "Thursday"
    },
    fri: {
        short: "Fri",
        long: "Friday"
    },
    sat: {
        short: "Sat",
        long: "Saturday"
    },
    sun: {
        short: "Sun",
        long: "Sunday"
    }
};
const weekdays = [
    "mon",
    "tue",
    "wed",
    "thu",
    "fri"
];
const allDays = [
    "mon",
    "tue",
    "wed",
    "thu",
    "fri",
    "sat",
    "sun"
];
const formatDaysToText = (days)=>{
    const sortedDays = days.sort((a, b)=>allDays.indexOf(a) - allDays.indexOf(b));
    if ((0, _isEqual.default)(sortedDays, weekdays)) {
        return "Weekdays";
    }
    if (sortedDays.length === 7) {
        return "Daily";
    }
    if (sortedDays.length === 1) {
        return daysMapping[sortedDays[0]].long;
    }
    const daysTextList = sortedDays.map((day)=>daysMapping[day].short);
    return daysTextList.join(", ");
};
const convertScheduleDaysToCronExpDays = (days)=>{
    if ((0, _isEqual.default)(days, weekdays)) {
        return "MON,TUE,WED,THU,FRI";
    }
    if (days.length === 7) {
        return "?";
    }
    if (days.length === 0) {
        return "*";
    }
    return days.join(",").toUpperCase();
};
const convertScheduleToCronExp = (schedule)=>schedule ? `${schedule.minute} ${schedule.hour} * * ${convertScheduleDaysToCronExpDays(schedule.days)}` : "";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2JyaWVmL3NyYy91dGlscy9zY2hlZHVsZURheXMudXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzRXF1YWwgZnJvbSBcImxvZGFzaC9pc0VxdWFsXCJcbmltcG9ydCB7IEJyaWVmQ29uZmlnQVBJU2NoZWR1bGUsIEJyaWVmQ29uZmlnQVBJU2NoZWR1bGVEYXkgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9icmllZlwiXG5cbnR5cGUgRGF5TGFiZWxzID0geyBzaG9ydDogc3RyaW5nOyBsb25nOiBzdHJpbmcgfVxuXG5jb25zdCBkYXlzTWFwcGluZzogUmVjb3JkPEJyaWVmQ29uZmlnQVBJU2NoZWR1bGVEYXksIERheUxhYmVscz4gPSB7XG4gIG1vbjogeyBzaG9ydDogXCJNb25cIiwgbG9uZzogXCJNb25kYXlcIiB9LFxuICB0dWU6IHsgc2hvcnQ6IFwiVHVlXCIsIGxvbmc6IFwiVHVlc2RheVwiIH0sXG4gIHdlZDogeyBzaG9ydDogXCJXZWRcIiwgbG9uZzogXCJXZWRuZXNkYXlcIiB9LFxuICB0aHU6IHsgc2hvcnQ6IFwiVGh1XCIsIGxvbmc6IFwiVGh1cnNkYXlcIiB9LFxuICBmcmk6IHsgc2hvcnQ6IFwiRnJpXCIsIGxvbmc6IFwiRnJpZGF5XCIgfSxcbiAgc2F0OiB7IHNob3J0OiBcIlNhdFwiLCBsb25nOiBcIlNhdHVyZGF5XCIgfSxcbiAgc3VuOiB7IHNob3J0OiBcIlN1blwiLCBsb25nOiBcIlN1bmRheVwiIH0sXG59XG5cbmNvbnN0IHdlZWtkYXlzOiBBcnJheTxCcmllZkNvbmZpZ0FQSVNjaGVkdWxlRGF5PiA9IFtcIm1vblwiLCBcInR1ZVwiLCBcIndlZFwiLCBcInRodVwiLCBcImZyaVwiXVxuY29uc3QgYWxsRGF5czogQXJyYXk8QnJpZWZDb25maWdBUElTY2hlZHVsZURheT4gPSBbXCJtb25cIiwgXCJ0dWVcIiwgXCJ3ZWRcIiwgXCJ0aHVcIiwgXCJmcmlcIiwgXCJzYXRcIiwgXCJzdW5cIl1cblxuY29uc3QgZm9ybWF0RGF5c1RvVGV4dCA9IChkYXlzOiBBcnJheTxCcmllZkNvbmZpZ0FQSVNjaGVkdWxlRGF5PikgPT4ge1xuICBjb25zdCBzb3J0ZWREYXlzID0gZGF5cy5zb3J0KChhLCBiKSA9PiBhbGxEYXlzLmluZGV4T2YoYSkgLSBhbGxEYXlzLmluZGV4T2YoYikpXG5cbiAgaWYgKGlzRXF1YWwoc29ydGVkRGF5cywgd2Vla2RheXMpKSB7XG4gICAgcmV0dXJuIFwiV2Vla2RheXNcIlxuICB9XG5cbiAgaWYgKHNvcnRlZERheXMubGVuZ3RoID09PSA3KSB7XG4gICAgcmV0dXJuIFwiRGFpbHlcIlxuICB9XG5cbiAgaWYgKHNvcnRlZERheXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGRheXNNYXBwaW5nW3NvcnRlZERheXNbMF1dLmxvbmdcbiAgfVxuXG4gIGNvbnN0IGRheXNUZXh0TGlzdCA9IHNvcnRlZERheXMubWFwKGRheSA9PiBkYXlzTWFwcGluZ1tkYXldLnNob3J0KVxuXG4gIHJldHVybiBkYXlzVGV4dExpc3Quam9pbihcIiwgXCIpXG59XG5cbmNvbnN0IGNvbnZlcnRTY2hlZHVsZURheXNUb0Nyb25FeHBEYXlzID0gKGRheXM6IEFycmF5PEJyaWVmQ29uZmlnQVBJU2NoZWR1bGVEYXk+KTogc3RyaW5nID0+IHtcbiAgaWYgKGlzRXF1YWwoZGF5cywgd2Vla2RheXMpKSB7XG4gICAgcmV0dXJuIFwiTU9OLFRVRSxXRUQsVEhVLEZSSVwiXG4gIH1cblxuICBpZiAoZGF5cy5sZW5ndGggPT09IDcpIHtcbiAgICByZXR1cm4gXCI/XCJcbiAgfVxuXG4gIGlmIChkYXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIipcIlxuICB9XG5cbiAgcmV0dXJuIGRheXMuam9pbihcIixcIikudG9VcHBlckNhc2UoKVxufVxuXG5jb25zdCBjb252ZXJ0U2NoZWR1bGVUb0Nyb25FeHAgPSAoc2NoZWR1bGU6IEJyaWVmQ29uZmlnQVBJU2NoZWR1bGUgfCB1bmRlZmluZWQpOiBzdHJpbmcgPT5cbiAgc2NoZWR1bGVcbiAgICA/IGAke3NjaGVkdWxlLm1pbnV0ZX0gJHtzY2hlZHVsZS5ob3VyfSAqICogJHtjb252ZXJ0U2NoZWR1bGVEYXlzVG9Dcm9uRXhwRGF5cyhzY2hlZHVsZS5kYXlzKX1gXG4gICAgOiBcIlwiXG5cbmV4cG9ydCB7IGZvcm1hdERheXNUb1RleHQsIGNvbnZlcnRTY2hlZHVsZVRvQ3JvbkV4cCwgY29udmVydFNjaGVkdWxlRGF5c1RvQ3JvbkV4cERheXMgfVxuIl0sIm5hbWVzIjpbImNvbnZlcnRTY2hlZHVsZURheXNUb0Nyb25FeHBEYXlzIiwiY29udmVydFNjaGVkdWxlVG9Dcm9uRXhwIiwiZm9ybWF0RGF5c1RvVGV4dCIsImRheXNNYXBwaW5nIiwibW9uIiwic2hvcnQiLCJsb25nIiwidHVlIiwid2VkIiwidGh1IiwiZnJpIiwic2F0Iiwic3VuIiwid2Vla2RheXMiLCJhbGxEYXlzIiwiZGF5cyIsInNvcnRlZERheXMiLCJzb3J0IiwiYSIsImIiLCJpbmRleE9mIiwiaXNFcXVhbCIsImxlbmd0aCIsImRheXNUZXh0TGlzdCIsIm1hcCIsImRheSIsImpvaW4iLCJ0b1VwcGVyQ2FzZSIsInNjaGVkdWxlIiwibWludXRlIiwiaG91ciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBMkRxREEsZ0NBQWdDO2VBQWhDQTs7SUFBMUJDLHdCQUF3QjtlQUF4QkE7O0lBQWxCQyxnQkFBZ0I7ZUFBaEJBOzs7Z0VBM0RXOzs7Ozs7QUFLcEIsTUFBTUMsY0FBNEQ7SUFDaEVDLEtBQUs7UUFBRUMsT0FBTztRQUFPQyxNQUFNO0lBQVM7SUFDcENDLEtBQUs7UUFBRUYsT0FBTztRQUFPQyxNQUFNO0lBQVU7SUFDckNFLEtBQUs7UUFBRUgsT0FBTztRQUFPQyxNQUFNO0lBQVk7SUFDdkNHLEtBQUs7UUFBRUosT0FBTztRQUFPQyxNQUFNO0lBQVc7SUFDdENJLEtBQUs7UUFBRUwsT0FBTztRQUFPQyxNQUFNO0lBQVM7SUFDcENLLEtBQUs7UUFBRU4sT0FBTztRQUFPQyxNQUFNO0lBQVc7SUFDdENNLEtBQUs7UUFBRVAsT0FBTztRQUFPQyxNQUFNO0lBQVM7QUFDdEM7QUFFQSxNQUFNTyxXQUE2QztJQUFDO0lBQU87SUFBTztJQUFPO0lBQU87Q0FBTTtBQUN0RixNQUFNQyxVQUE0QztJQUFDO0lBQU87SUFBTztJQUFPO0lBQU87SUFBTztJQUFPO0NBQU07QUFFbkcsTUFBTVosbUJBQW1CLENBQUNhO0lBQ3hCLE1BQU1DLGFBQWFELEtBQUtFLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNTCxRQUFRTSxPQUFPLENBQUNGLEtBQUtKLFFBQVFNLE9BQU8sQ0FBQ0Q7SUFFNUUsSUFBSUUsSUFBQUEsZ0JBQU8sRUFBQ0wsWUFBWUgsV0FBVztRQUNqQyxPQUFPO0lBQ1Q7SUFFQSxJQUFJRyxXQUFXTSxNQUFNLEtBQUssR0FBRztRQUMzQixPQUFPO0lBQ1Q7SUFFQSxJQUFJTixXQUFXTSxNQUFNLEtBQUssR0FBRztRQUMzQixPQUFPbkIsV0FBVyxDQUFDYSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUNWLElBQUk7SUFDeEM7SUFFQSxNQUFNaUIsZUFBZVAsV0FBV1EsR0FBRyxDQUFDQyxDQUFBQSxNQUFPdEIsV0FBVyxDQUFDc0IsSUFBSSxDQUFDcEIsS0FBSztJQUVqRSxPQUFPa0IsYUFBYUcsSUFBSSxDQUFDO0FBQzNCO0FBRUEsTUFBTTFCLG1DQUFtQyxDQUFDZTtJQUN4QyxJQUFJTSxJQUFBQSxnQkFBTyxFQUFDTixNQUFNRixXQUFXO1FBQzNCLE9BQU87SUFDVDtJQUVBLElBQUlFLEtBQUtPLE1BQU0sS0FBSyxHQUFHO1FBQ3JCLE9BQU87SUFDVDtJQUVBLElBQUlQLEtBQUtPLE1BQU0sS0FBSyxHQUFHO1FBQ3JCLE9BQU87SUFDVDtJQUVBLE9BQU9QLEtBQUtXLElBQUksQ0FBQyxLQUFLQyxXQUFXO0FBQ25DO0FBRUEsTUFBTTFCLDJCQUEyQixDQUFDMkIsV0FDaENBLFdBQ0ksQ0FBQyxFQUFFQSxTQUFTQyxNQUFNLENBQUMsQ0FBQyxFQUFFRCxTQUFTRSxJQUFJLENBQUMsS0FBSyxFQUFFOUIsaUNBQWlDNEIsU0FBU2IsSUFBSSxFQUFFLENBQUMsR0FDNUYifQ==