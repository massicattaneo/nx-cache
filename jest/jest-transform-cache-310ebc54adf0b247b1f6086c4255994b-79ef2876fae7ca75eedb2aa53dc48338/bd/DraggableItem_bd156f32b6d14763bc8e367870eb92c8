c5fad8eaa61ef35248db8b9ccb0d8b01
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DraggableItem: function() {
        return DraggableItem;
    },
    ItemTypes: function() {
        return ItemTypes;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactdndhtml5backend = require("react-dnd-html5-backend");
const _useDragRowItems = require("./useDragRowItems");
var ItemTypes;
(function(ItemTypes) {
    ItemTypes["MOBILE_CARD"] = "mobileCard";
    ItemTypes["HUB_TABLE_ROW"] = "hubTableRow";
})(ItemTypes || (ItemTypes = {}));
const DraggableItem = ({ renderItem, moveCard, index, item, onDrop, type, disableDrag })=>{
    const dragRef = (0, _react.useRef)(null);
    const dropRef = (0, _react.useRef)(null);
    const { drag, drop, isDragging, handlerId, preview } = (0, _useDragRowItems.useDragRowItems)({
        ref: dropRef,
        moveCard,
        index,
        item,
        onDrop,
        type,
        disableDrag
    });
    const opacity = isDragging ? 0 : 1;
    drag(dragRef);
    drop(dropRef);
    (0, _react.useEffect)(()=>{
        preview((0, _reactdndhtml5backend.getEmptyImage)(), {
            captureDraggingState: true
        });
    }, [
        preview
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        ref: dropRef,
        style: {
            opacity
        },
        "data-handler-id": handlerId,
        children: renderItem(dragRef, {
            disableDrag
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvUmVPcmRlcmFibGVMaXN0L0RyYWdnYWJsZUl0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpTWCwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgZ2V0RW1wdHlJbWFnZSB9IGZyb20gXCJyZWFjdC1kbmQtaHRtbDUtYmFja2VuZFwiXG5pbXBvcnQgeyB1c2VEcmFnUm93SXRlbXMgfSBmcm9tIFwiLi91c2VEcmFnUm93SXRlbXNcIlxuXG50eXBlIE1vdmVDYXJkID0gKGRyYWdJbmRleDogbnVtYmVyLCBob3ZlckluZGV4OiBudW1iZXIpID0+IHZvaWRcblxuZW51bSBJdGVtVHlwZXMge1xuICBcIk1PQklMRV9DQVJEXCIgPSBcIm1vYmlsZUNhcmRcIixcbiAgXCJIVUJfVEFCTEVfUk9XXCIgPSBcImh1YlRhYmxlUm93XCIsXG59XG5leHBvcnQgdHlwZSBJdGVtV2l0aElkID0geyBpZDogc3RyaW5nIH1cblxudHlwZSBEbkRQcm9wczxSb3dUeXBlIGV4dGVuZHMgSXRlbVdpdGhJZD4gPSB7XG4gIG1vdmVDYXJkOiBNb3ZlQ2FyZFxuICBpbmRleDogbnVtYmVyXG4gIG9uRHJvcDogKCkgPT4gdm9pZFxuICB0eXBlOiBJdGVtVHlwZXNcbiAgaXRlbTogUm93VHlwZVxufVxuXG50eXBlIERyYWdPcHRpb25zID0ge1xuICBkaXNhYmxlRHJhZz86IGJvb2xlYW5cbiAgaXNEcmFnZ2luZz86IGJvb2xlYW5cbn1cblxudHlwZSBEcmFnZ2VyUHJvcHM8Um93VHlwZSBleHRlbmRzIEl0ZW1XaXRoSWQ+ID0gRG5EUHJvcHM8Um93VHlwZT4gJiB7XG4gIHJlbmRlckl0ZW06IChcbiAgICBkcmFnUmVmPzogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxIVE1MRGl2RWxlbWVudCB8IG51bGw+LFxuICAgIGRyYWdPcHRpb25zPzogRHJhZ09wdGlvbnMsXG4gICkgPT4gSlNYLkVsZW1lbnRcbiAgZGlzYWJsZURyYWc/OiBib29sZWFuXG59XG5cbmNvbnN0IERyYWdnYWJsZUl0ZW0gPSA8Um93VHlwZSBleHRlbmRzIEl0ZW1XaXRoSWQ+KHtcbiAgcmVuZGVySXRlbSxcbiAgbW92ZUNhcmQsXG4gIGluZGV4LFxuICBpdGVtLFxuICBvbkRyb3AsXG4gIHR5cGUsXG4gIGRpc2FibGVEcmFnLFxufTogRHJhZ2dlclByb3BzPFJvd1R5cGU+KSA9PiB7XG4gIGNvbnN0IGRyYWdSZWYgPSB1c2VSZWYobnVsbClcbiAgY29uc3QgZHJvcFJlZiA9IHVzZVJlZihudWxsKVxuXG4gIGNvbnN0IHsgZHJhZywgZHJvcCwgaXNEcmFnZ2luZywgaGFuZGxlcklkLCBwcmV2aWV3IH0gPSB1c2VEcmFnUm93SXRlbXMoe1xuICAgIHJlZjogZHJvcFJlZixcbiAgICBtb3ZlQ2FyZCxcbiAgICBpbmRleCxcbiAgICBpdGVtLFxuICAgIG9uRHJvcCxcbiAgICB0eXBlLFxuICAgIGRpc2FibGVEcmFnLFxuICB9KVxuICBjb25zdCBvcGFjaXR5ID0gaXNEcmFnZ2luZyA/IDAgOiAxXG4gIGRyYWcoZHJhZ1JlZilcbiAgZHJvcChkcm9wUmVmKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJldmlldyhnZXRFbXB0eUltYWdlKCksIHsgY2FwdHVyZURyYWdnaW5nU3RhdGU6IHRydWUgfSlcbiAgfSwgW3ByZXZpZXddKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e2Ryb3BSZWZ9IHN0eWxlPXt7IG9wYWNpdHkgfX0gZGF0YS1oYW5kbGVyLWlkPXtoYW5kbGVySWR9PlxuICAgICAge3JlbmRlckl0ZW0oZHJhZ1JlZiwgeyBkaXNhYmxlRHJhZyB9KX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgeyBEcmFnZ2FibGVJdGVtLCBJdGVtVHlwZXMgfVxuZXhwb3J0IHR5cGUgeyBEbkRQcm9wcywgRHJhZ09wdGlvbnMgfVxuIl0sIm5hbWVzIjpbIkRyYWdnYWJsZUl0ZW0iLCJJdGVtVHlwZXMiLCJyZW5kZXJJdGVtIiwibW92ZUNhcmQiLCJpbmRleCIsIml0ZW0iLCJvbkRyb3AiLCJ0eXBlIiwiZGlzYWJsZURyYWciLCJkcmFnUmVmIiwidXNlUmVmIiwiZHJvcFJlZiIsImRyYWciLCJkcm9wIiwiaXNEcmFnZ2luZyIsImhhbmRsZXJJZCIsInByZXZpZXciLCJ1c2VEcmFnUm93SXRlbXMiLCJyZWYiLCJvcGFjaXR5IiwidXNlRWZmZWN0IiwiZ2V0RW1wdHlJbWFnZSIsImNhcHR1cmVEcmFnZ2luZ1N0YXRlIiwiZGl2Iiwic3R5bGUiLCJkYXRhLWhhbmRsZXItaWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBcUVTQSxhQUFhO2VBQWJBOztJQUFlQyxTQUFTO2VBQVRBOzs7O3VCQXJFZTtzQ0FDVDtpQ0FDRTs7VUFJM0JBOzs7R0FBQUEsY0FBQUE7QUEyQkwsTUFBTUQsZ0JBQWdCLENBQTZCLEVBQ2pERSxVQUFVLEVBQ1ZDLFFBQVEsRUFDUkMsS0FBSyxFQUNMQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsSUFBSSxFQUNKQyxXQUFXLEVBQ1c7SUFDdEIsTUFBTUMsVUFBVUMsSUFBQUEsYUFBTSxFQUFDO0lBQ3ZCLE1BQU1DLFVBQVVELElBQUFBLGFBQU0sRUFBQztJQUV2QixNQUFNLEVBQUVFLElBQUksRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFLEdBQUdDLElBQUFBLGdDQUFlLEVBQUM7UUFDckVDLEtBQUtQO1FBQ0xSO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFDQSxNQUFNVyxVQUFVTCxhQUFhLElBQUk7SUFDakNGLEtBQUtIO0lBQ0xJLEtBQUtGO0lBRUxTLElBQUFBLGdCQUFTLEVBQUM7UUFDUkosUUFBUUssSUFBQUEsbUNBQWEsS0FBSTtZQUFFQyxzQkFBc0I7UUFBSztJQUN4RCxHQUFHO1FBQUNOO0tBQVE7SUFFWixxQkFDRSxxQkFBQ087UUFBSUwsS0FBS1A7UUFBU2EsT0FBTztZQUFFTDtRQUFRO1FBQUdNLG1CQUFpQlY7a0JBQ3JEYixXQUFXTyxTQUFTO1lBQUVEO1FBQVk7O0FBR3pDIn0=