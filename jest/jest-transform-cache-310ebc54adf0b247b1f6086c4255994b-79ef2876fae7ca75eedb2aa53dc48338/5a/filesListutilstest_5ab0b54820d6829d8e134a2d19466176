707cb1eb217219472c3ceb2809c9d4ae
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _filesListutils = require("./filesList.utils");
beforeEach(jest.clearAllMocks);
describe("fileList.utils", ()=>{
    describe("handleCheckboxChangeFunc", ()=>{
        const mockStopPropagation = jest.fn();
        const ev = {
            stopPropagation: mockStopPropagation
        };
        const shared = true;
        const mockCompletedFiltered = [
            {
                id: "id-1",
                data: "data-1"
            },
            {
                id: "id-2",
                data: "data-2"
            },
            {
                id: "id-3",
                data: "data-3"
            }
        ];
        const mockSetSelectedFiles = jest.fn();
        describe("when val", ()=>{
            const val = true;
            beforeEach(()=>{
                (0, _filesListutils.handleCheckboxChangeFunc)({
                    ev,
                    val,
                    setSelectedFiles: mockSetSelectedFiles,
                    completedFiltered: mockCompletedFiltered,
                    shared
                });
            });
            it("should call stopPropagation", ()=>{
                expect(mockStopPropagation).toHaveBeenCalledTimes(1);
            });
            it("should call setSelected with correct params", ()=>{
                expect(mockSetSelectedFiles).toHaveBeenCalledTimes(1);
                expect(mockSetSelectedFiles).toHaveBeenCalledWith([
                    {
                        id: "id-1",
                        shared: true
                    },
                    {
                        id: "id-2",
                        shared: true
                    },
                    {
                        id: "id-3",
                        shared: true
                    }
                ]);
            });
        });
        describe("when !val", ()=>{
            const val = false;
            beforeEach(()=>{
                (0, _filesListutils.handleCheckboxChangeFunc)({
                    ev,
                    val,
                    setSelectedFiles: mockSetSelectedFiles,
                    completedFiltered: mockCompletedFiltered,
                    shared
                });
            });
            it("should call stopPropagation", ()=>{
                expect(mockStopPropagation).toHaveBeenCalledTimes(1);
            });
            it("should call setSelected with empty params", ()=>{
                expect(mockSetSelectedFiles).toHaveBeenCalledTimes(1);
                expect(mockSetSelectedFiles).toHaveBeenCalledWith([]);
            });
        });
    });
    describe("getOwnerName", ()=>{
        const mockOrgUser = {
            publicUserData: {
                firstName: "Penelope",
                lastName: "Cruz",
                userId: "user-123"
            }
        };
        const mockUserMatch = {
            id: "user-123"
        };
        const mockUserNoMatch = {
            id: "user-no-match"
        };
        describe("with no orgUser", ()=>{
            it("should return undefined data", ()=>{
                expect((0, _filesListutils.getOwnerNameData)(mockUserMatch, undefined)).toStrictEqual({
                    ownerDisplayName: undefined,
                    ownerName: undefined
                });
            });
        });
        describe("with no user", ()=>{
            it("should return undefined data", ()=>{
                expect((0, _filesListutils.getOwnerNameData)(undefined, mockOrgUser)).toStrictEqual({
                    ownerDisplayName: undefined,
                    ownerName: undefined
                });
            });
        });
        describe("with full data, is this user", ()=>{
            it("should return undefined data", ()=>{
                expect((0, _filesListutils.getOwnerNameData)(mockUserMatch, mockOrgUser)).toStrictEqual({
                    ownerDisplayName: "You",
                    ownerName: "Penelope Cruz"
                });
            });
        });
        describe("with full data, is not this user", ()=>{
            it("should return undefined data", ()=>{
                expect((0, _filesListutils.getOwnerNameData)(mockUserNoMatch, mockOrgUser)).toStrictEqual({
                    ownerDisplayName: "Penelope Cruz",
                    ownerName: "Penelope Cruz"
                });
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,