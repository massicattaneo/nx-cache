{"version":3,"sources":["../src/deprecated.ts","../src/utils/runtimeEnvironment.ts"],"sourcesContent":["import { isProductionEnvironment, isTestEnvironment } from './utils/runtimeEnvironment';\n/**\n * Mark class method / function as deprecated.\n *\n * A console WARNING will be displayed when class method / function is invoked.\n *\n * Examples\n * 1. Deprecate class method\n * class Example {\n *   getSomething = (arg1, arg2) => {\n *       deprecated('Example.getSomething', 'Use `getSomethingElse` instead.');\n *       return `getSomethingValue:${arg1 || '-'}:${arg2 || '-'}`;\n *   };\n * }\n *\n * 2. Deprecate function\n * const getSomething = () => {\n *   deprecated('getSomething', 'Use `getSomethingElse` instead.');\n *   return 'getSomethingValue';\n * };\n */\nconst displayedWarnings = new Set<string>();\nexport const deprecated = (fnName: string, warning: string, key?: string): void => {\n  const hideWarning = isTestEnvironment() || isProductionEnvironment();\n  const messageId = key ?? fnName;\n  if (displayedWarnings.has(messageId) || hideWarning) {\n    return;\n  }\n  displayedWarnings.add(messageId);\n\n  console.warn(\n    `Clerk - DEPRECATION WARNING: \"${fnName}\" is deprecated and will be removed in the next major release.\\n${warning}`,\n  );\n};\n/**\n * Mark class property as deprecated.\n *\n * A console WARNING will be displayed when class property is being accessed.\n *\n * 1. Deprecate class property\n * class Example {\n *   something: string;\n *   constructor(something: string) {\n *     this.something = something;\n *   }\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.');\n *\n * 2. Deprecate class static property\n * class Example {\n *   static something: string;\n * }\n *\n * deprecatedProperty(Example, 'something', 'Use `somethingElse` instead.', true);\n */\ntype AnyClass = new (...args: any[]) => any;\n\nexport const deprecatedProperty = (cls: AnyClass, propName: string, warning: string, isStatic = false): void => {\n  const target = isStatic ? cls : cls.prototype;\n\n  let value = target[propName];\n  Object.defineProperty(target, propName, {\n    get() {\n      deprecated(propName, warning, `${cls.name}:${propName}`);\n      return value;\n    },\n    set(v: unknown) {\n      value = v;\n    },\n  });\n};\n\n/**\n * Mark object property as deprecated.\n *\n * A console WARNING will be displayed when object property is being accessed.\n *\n * 1. Deprecate object property\n * const obj = { something: 'aloha' };\n *\n * deprecatedObjectProperty(obj, 'something', 'Use `somethingElse` instead.');\n */\nexport const deprecatedObjectProperty = (\n  obj: Record<string, any>,\n  propName: string,\n  warning: string,\n  key?: string,\n): void => {\n  let value = obj[propName];\n  Object.defineProperty(obj, propName, {\n    get() {\n      deprecated(propName, warning, key);\n      return value;\n    },\n    set(v: unknown) {\n      value = v;\n    },\n  });\n};\n","export const isDevelopmentEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'development';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n\n  return false;\n};\n\nexport const isTestEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'test';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n\nexport const isProductionEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'production';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n"],"names":["deprecated_exports","__export","deprecated","deprecatedObjectProperty","deprecatedProperty","module","exports","__toCommonJS","isTestEnvironment","process","env","NODE_ENV","isProductionEnvironment","displayedWarnings","Set","fnName","warning","key","hideWarning","messageId","has","add","console","warn","cls","propName","isStatic","target","prototype","value","Object","defineProperty","get","name","set","v","obj"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,qBAAA,CAAA;AAAAC,SAAAD,oBAAA;IAAAE,YAAA,IAAAA;IAAAC,0BAAA,IAAAA;IAAAC,oBAAA,IAAAA;AAAA;AAAAC,OAAAC,OAAA,GAAAC,aAAAP;;ACWO,IAAMQ,oBAAoB;IAC/B,IAAI;QACF,OAAOC,QAAQC,GAAA,CAAIC,QAAA,KAAa;IAElC,EAAA,UAAQ,CAAC;IAGT,OAAO;AACT;AAEO,IAAMC,0BAA0B;IACrC,IAAI;QACF,OAAOH,QAAQC,GAAA,CAAIC,QAAA,KAAa;IAElC,EAAA,UAAQ,CAAC;IAGT,OAAO;AACT;;ADRA,IAAME,oBAAoB,aAAA,GAAA,IAAIC;AACvB,IAAMZ,aAAa,CAACa,QAAgBC,SAAiBC;IAC1D,MAAMC,cAAcV,uBAAuBI;IAC3C,MAAMO,YAAYF,gBAAAA,iBAAAA,MAAOF;IACzB,IAAIF,kBAAkBO,GAAA,CAAID,cAAcD,aAAa;QACnD;IACF;IACAL,kBAAkBQ,GAAA,CAAIF;IAEtBG,QAAQC,IAAA,CACN,CAAA,8BAAA,EAAiCR,OAAM;AAAA,EAAmEC,QAAO,CAAA;AAErH;AAyBO,IAAMZ,qBAAqB,CAACoB,KAAeC,UAAkBT,SAAiBU,WAAW,KAAA;IAC9F,MAAMC,SAASD,WAAWF,MAAMA,IAAII,SAAA;IAEpC,IAAIC,QAAQF,MAAA,CAAOF,SAAQ;IAC3BK,OAAOC,cAAA,CAAeJ,QAAQF,UAAU;QACtCO;YACE9B,WAAWuB,UAAUT,SAAS,CAAA,EAAGQ,IAAIS,IAAI,CAAA,CAAA,EAAIR,SAAQ,CAAE;YACvD,OAAOI;QACT;QACAK,KAAIC,CAAA;YACFN,QAAQM;QACV;IACF;AACF;AAYO,IAAMhC,2BAA2B,CACtCiC,KACAX,UACAT,SACAC;IAEA,IAAIY,QAAQO,GAAA,CAAIX,SAAQ;IACxBK,OAAOC,cAAA,CAAeK,KAAKX,UAAU;QACnCO;YACE9B,WAAWuB,UAAUT,SAASC;YAC9B,OAAOY;QACT;QACAK,KAAIC,CAAA;YACFN,QAAQM;QACV;IACF;AACF"}