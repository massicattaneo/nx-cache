7c0658af114017ea213a7b56199c2d38
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/deprecated.ts
var deprecated_exports = {};
__export(deprecated_exports, {
    deprecated: ()=>deprecated,
    deprecatedObjectProperty: ()=>deprecatedObjectProperty,
    deprecatedProperty: ()=>deprecatedProperty
});
module.exports = __toCommonJS(deprecated_exports);
// src/utils/runtimeEnvironment.ts
var isTestEnvironment = ()=>{
    try {
        return process.env.NODE_ENV === "test";
    } catch (e) {}
    return false;
};
var isProductionEnvironment = ()=>{
    try {
        return process.env.NODE_ENV === "production";
    } catch (e) {}
    return false;
};
// src/deprecated.ts
var displayedWarnings = /* @__PURE__ */ new Set();
var deprecated = (fnName, warning, key)=>{
    const hideWarning = isTestEnvironment() || isProductionEnvironment();
    const messageId = key !== null && key !== void 0 ? key : fnName;
    if (displayedWarnings.has(messageId) || hideWarning) {
        return;
    }
    displayedWarnings.add(messageId);
    console.warn(`Clerk - DEPRECATION WARNING: "${fnName}" is deprecated and will be removed in the next major release.
${warning}`);
};
var deprecatedProperty = (cls, propName, warning, isStatic = false)=>{
    const target = isStatic ? cls : cls.prototype;
    let value = target[propName];
    Object.defineProperty(target, propName, {
        get () {
            deprecated(propName, warning, `${cls.name}:${propName}`);
            return value;
        },
        set (v) {
            value = v;
        }
    });
};
var deprecatedObjectProperty = (obj, propName, warning, key)=>{
    let value = obj[propName];
    Object.defineProperty(obj, propName, {
        get () {
            deprecated(propName, warning, key);
            return value;
        },
        set (v) {
            value = v;
        }
    });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    deprecated,
    deprecatedObjectProperty,
    deprecatedProperty
}); //# sourceMappingURL=deprecated.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXByZWNhdGVkLnRzIiwiLi4vc3JjL3V0aWxzL3J1bnRpbWVFbnZpcm9ubWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1Byb2R1Y3Rpb25FbnZpcm9ubWVudCwgaXNUZXN0RW52aXJvbm1lbnQgfSBmcm9tICcuL3V0aWxzL3J1bnRpbWVFbnZpcm9ubWVudCc7XG4vKipcbiAqIE1hcmsgY2xhc3MgbWV0aG9kIC8gZnVuY3Rpb24gYXMgZGVwcmVjYXRlZC5cbiAqXG4gKiBBIGNvbnNvbGUgV0FSTklORyB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIGNsYXNzIG1ldGhvZCAvIGZ1bmN0aW9uIGlzIGludm9rZWQuXG4gKlxuICogRXhhbXBsZXNcbiAqIDEuIERlcHJlY2F0ZSBjbGFzcyBtZXRob2RcbiAqIGNsYXNzIEV4YW1wbGUge1xuICogICBnZXRTb21ldGhpbmcgPSAoYXJnMSwgYXJnMikgPT4ge1xuICogICAgICAgZGVwcmVjYXRlZCgnRXhhbXBsZS5nZXRTb21ldGhpbmcnLCAnVXNlIGBnZXRTb21ldGhpbmdFbHNlYCBpbnN0ZWFkLicpO1xuICogICAgICAgcmV0dXJuIGBnZXRTb21ldGhpbmdWYWx1ZToke2FyZzEgfHwgJy0nfToke2FyZzIgfHwgJy0nfWA7XG4gKiAgIH07XG4gKiB9XG4gKlxuICogMi4gRGVwcmVjYXRlIGZ1bmN0aW9uXG4gKiBjb25zdCBnZXRTb21ldGhpbmcgPSAoKSA9PiB7XG4gKiAgIGRlcHJlY2F0ZWQoJ2dldFNvbWV0aGluZycsICdVc2UgYGdldFNvbWV0aGluZ0Vsc2VgIGluc3RlYWQuJyk7XG4gKiAgIHJldHVybiAnZ2V0U29tZXRoaW5nVmFsdWUnO1xuICogfTtcbiAqL1xuY29uc3QgZGlzcGxheWVkV2FybmluZ3MgPSBuZXcgU2V0PHN0cmluZz4oKTtcbmV4cG9ydCBjb25zdCBkZXByZWNhdGVkID0gKGZuTmFtZTogc3RyaW5nLCB3YXJuaW5nOiBzdHJpbmcsIGtleT86IHN0cmluZyk6IHZvaWQgPT4ge1xuICBjb25zdCBoaWRlV2FybmluZyA9IGlzVGVzdEVudmlyb25tZW50KCkgfHwgaXNQcm9kdWN0aW9uRW52aXJvbm1lbnQoKTtcbiAgY29uc3QgbWVzc2FnZUlkID0ga2V5ID8/IGZuTmFtZTtcbiAgaWYgKGRpc3BsYXllZFdhcm5pbmdzLmhhcyhtZXNzYWdlSWQpIHx8IGhpZGVXYXJuaW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRpc3BsYXllZFdhcm5pbmdzLmFkZChtZXNzYWdlSWQpO1xuXG4gIGNvbnNvbGUud2FybihcbiAgICBgQ2xlcmsgLSBERVBSRUNBVElPTiBXQVJOSU5HOiBcIiR7Zm5OYW1lfVwiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxcbiR7d2FybmluZ31gLFxuICApO1xufTtcbi8qKlxuICogTWFyayBjbGFzcyBwcm9wZXJ0eSBhcyBkZXByZWNhdGVkLlxuICpcbiAqIEEgY29uc29sZSBXQVJOSU5HIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gY2xhc3MgcHJvcGVydHkgaXMgYmVpbmcgYWNjZXNzZWQuXG4gKlxuICogMS4gRGVwcmVjYXRlIGNsYXNzIHByb3BlcnR5XG4gKiBjbGFzcyBFeGFtcGxlIHtcbiAqICAgc29tZXRoaW5nOiBzdHJpbmc7XG4gKiAgIGNvbnN0cnVjdG9yKHNvbWV0aGluZzogc3RyaW5nKSB7XG4gKiAgICAgdGhpcy5zb21ldGhpbmcgPSBzb21ldGhpbmc7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBkZXByZWNhdGVkUHJvcGVydHkoRXhhbXBsZSwgJ3NvbWV0aGluZycsICdVc2UgYHNvbWV0aGluZ0Vsc2VgIGluc3RlYWQuJyk7XG4gKlxuICogMi4gRGVwcmVjYXRlIGNsYXNzIHN0YXRpYyBwcm9wZXJ0eVxuICogY2xhc3MgRXhhbXBsZSB7XG4gKiAgIHN0YXRpYyBzb21ldGhpbmc6IHN0cmluZztcbiAqIH1cbiAqXG4gKiBkZXByZWNhdGVkUHJvcGVydHkoRXhhbXBsZSwgJ3NvbWV0aGluZycsICdVc2UgYHNvbWV0aGluZ0Vsc2VgIGluc3RlYWQuJywgdHJ1ZSk7XG4gKi9cbnR5cGUgQW55Q2xhc3MgPSBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cbmV4cG9ydCBjb25zdCBkZXByZWNhdGVkUHJvcGVydHkgPSAoY2xzOiBBbnlDbGFzcywgcHJvcE5hbWU6IHN0cmluZywgd2FybmluZzogc3RyaW5nLCBpc1N0YXRpYyA9IGZhbHNlKTogdm9pZCA9PiB7XG4gIGNvbnN0IHRhcmdldCA9IGlzU3RhdGljID8gY2xzIDogY2xzLnByb3RvdHlwZTtcblxuICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcE5hbWVdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wTmFtZSwge1xuICAgIGdldCgpIHtcbiAgICAgIGRlcHJlY2F0ZWQocHJvcE5hbWUsIHdhcm5pbmcsIGAke2Nscy5uYW1lfToke3Byb3BOYW1lfWApO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0KHY6IHVua25vd24pIHtcbiAgICAgIHZhbHVlID0gdjtcbiAgICB9LFxuICB9KTtcbn07XG5cbi8qKlxuICogTWFyayBvYmplY3QgcHJvcGVydHkgYXMgZGVwcmVjYXRlZC5cbiAqXG4gKiBBIGNvbnNvbGUgV0FSTklORyB3aWxsIGJlIGRpc3BsYXllZCB3aGVuIG9iamVjdCBwcm9wZXJ0eSBpcyBiZWluZyBhY2Nlc3NlZC5cbiAqXG4gKiAxLiBEZXByZWNhdGUgb2JqZWN0IHByb3BlcnR5XG4gKiBjb25zdCBvYmogPSB7IHNvbWV0aGluZzogJ2Fsb2hhJyB9O1xuICpcbiAqIGRlcHJlY2F0ZWRPYmplY3RQcm9wZXJ0eShvYmosICdzb21ldGhpbmcnLCAnVXNlIGBzb21ldGhpbmdFbHNlYCBpbnN0ZWFkLicpO1xuICovXG5leHBvcnQgY29uc3QgZGVwcmVjYXRlZE9iamVjdFByb3BlcnR5ID0gKFxuICBvYmo6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4gIHdhcm5pbmc6IHN0cmluZyxcbiAga2V5Pzogc3RyaW5nLFxuKTogdm9pZCA9PiB7XG4gIGxldCB2YWx1ZSA9IG9ialtwcm9wTmFtZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3BOYW1lLCB7XG4gICAgZ2V0KCkge1xuICAgICAgZGVwcmVjYXRlZChwcm9wTmFtZSwgd2FybmluZywga2V5KTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldCh2OiB1bmtub3duKSB7XG4gICAgICB2YWx1ZSA9IHY7XG4gICAgfSxcbiAgfSk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IGlzRGV2ZWxvcG1lbnRFbnZpcm9ubWVudCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2gge31cblxuICAvLyBUT0RPOiBhZGQgc3VwcG9ydCBmb3IgaW1wb3J0Lm1ldGEuZW52LkRFViB0aGF0IGlzIGJlaW5nIHVzZWQgYnkgdml0ZVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Rlc3RFbnZpcm9ubWVudCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCB7fVxuXG4gIC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciBpbXBvcnQubWV0YS5lbnYuREVWIHRoYXQgaXMgYmVpbmcgdXNlZCBieSB2aXRlXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Byb2R1Y3Rpb25FbnZpcm9ubWVudCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCB7fVxuXG4gIC8vIFRPRE86IGFkZCBzdXBwb3J0IGZvciBpbXBvcnQubWV0YS5lbnYuREVWIHRoYXQgaXMgYmVpbmcgdXNlZCBieSB2aXRlXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXSwibmFtZXMiOlsiZGVwcmVjYXRlZF9leHBvcnRzIiwiX19leHBvcnQiLCJkZXByZWNhdGVkIiwiZGVwcmVjYXRlZE9iamVjdFByb3BlcnR5IiwiZGVwcmVjYXRlZFByb3BlcnR5IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fdG9Db21tb25KUyIsImlzVGVzdEVudmlyb25tZW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiaXNQcm9kdWN0aW9uRW52aXJvbm1lbnQiLCJkaXNwbGF5ZWRXYXJuaW5ncyIsIlNldCIsImZuTmFtZSIsIndhcm5pbmciLCJrZXkiLCJoaWRlV2FybmluZyIsIm1lc3NhZ2VJZCIsImhhcyIsImFkZCIsImNvbnNvbGUiLCJ3YXJuIiwiY2xzIiwicHJvcE5hbWUiLCJpc1N0YXRpYyIsInRhcmdldCIsInByb3RvdHlwZSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJuYW1lIiwic2V0IiwidiIsIm9iaiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEscUJBQUEsQ0FBQTtBQUFBQyxTQUFBRCxvQkFBQTtJQUFBRSxZQUFBLElBQUFBO0lBQUFDLDBCQUFBLElBQUFBO0lBQUFDLG9CQUFBLElBQUFBO0FBQUE7QUFBQUMsT0FBQUMsT0FBQSxHQUFBQyxhQUFBUDs7QUNXTyxJQUFNUSxvQkFBb0I7SUFDL0IsSUFBSTtRQUNGLE9BQU9DLFFBQVFDLEdBQUEsQ0FBSUMsUUFBQSxLQUFhO0lBRWxDLEVBQUEsVUFBUSxDQUFDO0lBR1QsT0FBTztBQUNUO0FBRU8sSUFBTUMsMEJBQTBCO0lBQ3JDLElBQUk7UUFDRixPQUFPSCxRQUFRQyxHQUFBLENBQUlDLFFBQUEsS0FBYTtJQUVsQyxFQUFBLFVBQVEsQ0FBQztJQUdULE9BQU87QUFDVDs7QURSQSxJQUFNRSxvQkFBb0IsYUFBQSxHQUFBLElBQUlDO0FBQ3ZCLElBQU1aLGFBQWEsQ0FBQ2EsUUFBZ0JDLFNBQWlCQztJQUMxRCxNQUFNQyxjQUFjVix1QkFBdUJJO0lBQzNDLE1BQU1PLFlBQVlGLGdCQUFBQSxpQkFBQUEsTUFBT0Y7SUFDekIsSUFBSUYsa0JBQWtCTyxHQUFBLENBQUlELGNBQWNELGFBQWE7UUFDbkQ7SUFDRjtJQUNBTCxrQkFBa0JRLEdBQUEsQ0FBSUY7SUFFdEJHLFFBQVFDLElBQUEsQ0FDTixDQUFBLDhCQUFBLEVBQWlDUixPQUFNO0FBQUEsRUFBbUVDLFFBQU8sQ0FBQTtBQUVySDtBQXlCTyxJQUFNWixxQkFBcUIsQ0FBQ29CLEtBQWVDLFVBQWtCVCxTQUFpQlUsV0FBVyxLQUFBO0lBQzlGLE1BQU1DLFNBQVNELFdBQVdGLE1BQU1BLElBQUlJLFNBQUE7SUFFcEMsSUFBSUMsUUFBUUYsTUFBQSxDQUFPRixTQUFRO0lBQzNCSyxPQUFPQyxjQUFBLENBQWVKLFFBQVFGLFVBQVU7UUFDdENPO1lBQ0U5QixXQUFXdUIsVUFBVVQsU0FBUyxDQUFBLEVBQUdRLElBQUlTLElBQUksQ0FBQSxDQUFBLEVBQUlSLFNBQVEsQ0FBRTtZQUN2RCxPQUFPSTtRQUNUO1FBQ0FLLEtBQUlDLENBQUE7WUFDRk4sUUFBUU07UUFDVjtJQUNGO0FBQ0Y7QUFZTyxJQUFNaEMsMkJBQTJCLENBQ3RDaUMsS0FDQVgsVUFDQVQsU0FDQUM7SUFFQSxJQUFJWSxRQUFRTyxHQUFBLENBQUlYLFNBQVE7SUFDeEJLLE9BQU9DLGNBQUEsQ0FBZUssS0FBS1gsVUFBVTtRQUNuQ087WUFDRTlCLFdBQVd1QixVQUFVVCxTQUFTQztZQUM5QixPQUFPWTtRQUNUO1FBQ0FLLEtBQUlDLENBQUE7WUFDRk4sUUFBUU07UUFDVjtJQUNGO0FBQ0YifQ==