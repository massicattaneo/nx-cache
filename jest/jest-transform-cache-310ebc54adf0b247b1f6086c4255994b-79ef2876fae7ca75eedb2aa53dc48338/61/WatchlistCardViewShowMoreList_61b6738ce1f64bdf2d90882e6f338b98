db7a7f6b509c4b284b7f88cefac385f7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistCardViewShowMoreList", {
    enumerable: true,
    get: function() {
        return WatchlistCardViewShowMoreList;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _WatchlistCard = require("./WatchlistCard/WatchlistCard");
const _WatchlistCardContainer = require("./WatchlistCard/WatchlistCardContainer");
const WatchlistCardViewShowMoreList = ({ data, lastElement, initialLines = 1, containerEl, onCardClick })=>{
    const itemsPerLines = (0, _hooks.useItemsPerLine)({
        containerEl,
        width: _WatchlistCardContainer.WATCHLIST_CARD_WIDTH,
        gap: 16
    });
    const defData = new Array(itemsPerLines * initialLines).fill(undefined);
    const displayData = data !== null && data !== void 0 ? data : defData;
    const [showItems, setShowItems] = (0, _react.useState)(itemsPerLines * initialLines);
    (0, _react.useEffect)(()=>{
        setShowItems(itemsPerLines * initialLines);
    }, [
        initialLines,
        itemsPerLines
    ]);
    const shouldShowLastElement = lastElement && displayData.length + (lastElement ? 1 : 0) > showItems;
    const shouldShowMoreButton = displayData.length > showItems;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            mb: 10,
            display: "flex",
            alignItems: "center",
            flexDirection: "column"
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_compositecomponents.AutoAnimateHeight, {
                minHeight: _WatchlistCardContainer.WATCHLIST_CARD_HEIGHT * initialLines,
                sx: {
                    "& > div": {
                        display: "flex",
                        gap: 2,
                        maxWidth: "100%",
                        flexWrap: "wrap",
                        justifyContent: "center"
                    }
                },
                children: [
                    displayData.slice(0, showItems).map((watchlist, index, arr)=>{
                        if (shouldShowLastElement && index === arr.length - 1) {
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
                                children: lastElement
                            }, "new-watchlist");
                        }
                        var _watchlist_id;
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistCard.WatchlistCard, {
                            showPerformance: true,
                            watchlist: watchlist,
                            onClick: ()=>watchlist && onCardClick(watchlist)
                        }, (_watchlist_id = watchlist === null || watchlist === void 0 ? void 0 : watchlist.id) !== null && _watchlist_id !== void 0 ? _watchlist_id : index);
                    }),
                    !shouldShowLastElement && lastElement
                ]
            }),
            shouldShowMoreButton && /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                onClick: ()=>setShowItems((prev)=>prev + itemsPerLines),
                sx: {
                    color: "text.secondary",
                    mt: 2,
                    cursor: "pointer",
                    "&:hover": {
                        textDecoration: "underline"
                    }
                },
                children: "Show more"
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi93YXRjaGxpc3RzL3NyYy9XYXRjaGxpc3RDYXJkVmlld1Nob3dNb3JlTGlzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBXYXRjaGxpc3QgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgQXV0b0FuaW1hdGVIZWlnaHQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vY29tcG9zaXRlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgdXNlSXRlbXNQZXJMaW5lIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IEJveCwgVHlwb2dyYXBoeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IFdhdGNobGlzdENhcmQgfSBmcm9tIFwiLi9XYXRjaGxpc3RDYXJkL1dhdGNobGlzdENhcmRcIlxuaW1wb3J0IHsgV0FUQ0hMSVNUX0NBUkRfSEVJR0hULCBXQVRDSExJU1RfQ0FSRF9XSURUSCB9IGZyb20gXCIuL1dhdGNobGlzdENhcmQvV2F0Y2hsaXN0Q2FyZENvbnRhaW5lclwiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGRhdGE6IEFycmF5PFdhdGNobGlzdD4gfCB1bmRlZmluZWRcbiAgbGFzdEVsZW1lbnQ/OiBSZWFjdEVsZW1lbnRcbiAgaW5pdGlhbExpbmVzPzogbnVtYmVyXG4gIGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCB8IG51bGxcbiAgb25DYXJkQ2xpY2s6ICh3YXRjaGxpc3Q6IFdhdGNobGlzdCkgPT4gdm9pZFxufVxuXG5leHBvcnQgY29uc3QgV2F0Y2hsaXN0Q2FyZFZpZXdTaG93TW9yZUxpc3QgPSAoe1xuICBkYXRhLFxuICBsYXN0RWxlbWVudCxcbiAgaW5pdGlhbExpbmVzID0gMSxcbiAgY29udGFpbmVyRWwsXG4gIG9uQ2FyZENsaWNrLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgaXRlbXNQZXJMaW5lcyA9IHVzZUl0ZW1zUGVyTGluZSh7XG4gICAgY29udGFpbmVyRWwsXG4gICAgd2lkdGg6IFdBVENITElTVF9DQVJEX1dJRFRILFxuICAgIGdhcDogMTYsXG4gIH0pXG4gIGNvbnN0IGRlZkRhdGE6IEFycmF5PHVuZGVmaW5lZD4gPSBuZXcgQXJyYXkoaXRlbXNQZXJMaW5lcyAqIGluaXRpYWxMaW5lcykuZmlsbCh1bmRlZmluZWQpXG4gIGNvbnN0IGRpc3BsYXlEYXRhID0gZGF0YSA/PyBkZWZEYXRhXG4gIGNvbnN0IFtzaG93SXRlbXMsIHNldFNob3dJdGVtc10gPSB1c2VTdGF0ZShpdGVtc1BlckxpbmVzICogaW5pdGlhbExpbmVzKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2hvd0l0ZW1zKGl0ZW1zUGVyTGluZXMgKiBpbml0aWFsTGluZXMpXG4gIH0sIFtpbml0aWFsTGluZXMsIGl0ZW1zUGVyTGluZXNdKVxuXG4gIGNvbnN0IHNob3VsZFNob3dMYXN0RWxlbWVudCA9XG4gICAgbGFzdEVsZW1lbnQgJiYgZGlzcGxheURhdGEubGVuZ3RoICsgKGxhc3RFbGVtZW50ID8gMSA6IDApID4gc2hvd0l0ZW1zXG4gIGNvbnN0IHNob3VsZFNob3dNb3JlQnV0dG9uID0gZGlzcGxheURhdGEubGVuZ3RoID4gc2hvd0l0ZW1zXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IHN4PXt7IG1iOiAxMCwgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIgfX0+XG4gICAgICA8QXV0b0FuaW1hdGVIZWlnaHRcbiAgICAgICAgbWluSGVpZ2h0PXtXQVRDSExJU1RfQ0FSRF9IRUlHSFQgKiBpbml0aWFsTGluZXN9XG4gICAgICAgIHN4PXt7XG4gICAgICAgICAgXCImID4gZGl2XCI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgZ2FwOiAyLFxuICAgICAgICAgICAgbWF4V2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgZmxleFdyYXA6IFwid3JhcFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2Rpc3BsYXlEYXRhLnNsaWNlKDAsIHNob3dJdGVtcykubWFwKCh3YXRjaGxpc3QsIGluZGV4LCBhcnIpID0+IHtcbiAgICAgICAgICBpZiAoc2hvdWxkU2hvd0xhc3RFbGVtZW50ICYmIGluZGV4ID09PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIDxGcmFnbWVudCBrZXk9e1wibmV3LXdhdGNobGlzdFwifT57bGFzdEVsZW1lbnR9PC9GcmFnbWVudD5cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxXYXRjaGxpc3RDYXJkXG4gICAgICAgICAgICAgIHNob3dQZXJmb3JtYW5jZVxuICAgICAgICAgICAgICBrZXk9e3dhdGNobGlzdD8uaWQgPz8gaW5kZXh9XG4gICAgICAgICAgICAgIHdhdGNobGlzdD17d2F0Y2hsaXN0fVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB3YXRjaGxpc3QgJiYgb25DYXJkQ2xpY2sod2F0Y2hsaXN0KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgICAgeyFzaG91bGRTaG93TGFzdEVsZW1lbnQgJiYgbGFzdEVsZW1lbnR9XG4gICAgICA8L0F1dG9BbmltYXRlSGVpZ2h0PlxuICAgICAge3Nob3VsZFNob3dNb3JlQnV0dG9uICYmIChcbiAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTaG93SXRlbXMocHJldiA9PiBwcmV2ICsgaXRlbXNQZXJMaW5lcyl9XG4gICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgIGNvbG9yOiBcInRleHQuc2Vjb25kYXJ5XCIsXG4gICAgICAgICAgICBtdDogMixcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICBcIiY6aG92ZXJcIjogeyB0ZXh0RGVjb3JhdGlvbjogXCJ1bmRlcmxpbmVcIiB9LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBTaG93IG1vcmVcbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIldhdGNobGlzdENhcmRWaWV3U2hvd01vcmVMaXN0IiwiZGF0YSIsImxhc3RFbGVtZW50IiwiaW5pdGlhbExpbmVzIiwiY29udGFpbmVyRWwiLCJvbkNhcmRDbGljayIsIml0ZW1zUGVyTGluZXMiLCJ1c2VJdGVtc1BlckxpbmUiLCJ3aWR0aCIsIldBVENITElTVF9DQVJEX1dJRFRIIiwiZ2FwIiwiZGVmRGF0YSIsIkFycmF5IiwiZmlsbCIsInVuZGVmaW5lZCIsImRpc3BsYXlEYXRhIiwic2hvd0l0ZW1zIiwic2V0U2hvd0l0ZW1zIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzaG91bGRTaG93TGFzdEVsZW1lbnQiLCJsZW5ndGgiLCJzaG91bGRTaG93TW9yZUJ1dHRvbiIsIkJveCIsInN4IiwibWIiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImZsZXhEaXJlY3Rpb24iLCJBdXRvQW5pbWF0ZUhlaWdodCIsIm1pbkhlaWdodCIsIldBVENITElTVF9DQVJEX0hFSUdIVCIsIm1heFdpZHRoIiwiZmxleFdyYXAiLCJqdXN0aWZ5Q29udGVudCIsInNsaWNlIiwibWFwIiwid2F0Y2hsaXN0IiwiaW5kZXgiLCJhcnIiLCJGcmFnbWVudCIsIldhdGNobGlzdENhcmQiLCJzaG93UGVyZm9ybWFuY2UiLCJvbkNsaWNrIiwiaWQiLCJUeXBvZ3JhcGh5IiwicHJldiIsImNvbG9yIiwibXQiLCJjdXJzb3IiLCJ0ZXh0RGVjb3JhdGlvbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBZ0JhQTs7O2VBQUFBOzs7O3VCQWhCK0M7cUNBRTFCO3VCQUNGO3NCQUNBOytCQUNGO3dDQUM4QjtBQVVyRCxNQUFNQSxnQ0FBZ0MsQ0FBQyxFQUM1Q0MsSUFBSSxFQUNKQyxXQUFXLEVBQ1hDLGVBQWUsQ0FBQyxFQUNoQkMsV0FBVyxFQUNYQyxXQUFXLEVBQ0w7SUFDTixNQUFNQyxnQkFBZ0JDLElBQUFBLHNCQUFlLEVBQUM7UUFDcENIO1FBQ0FJLE9BQU9DLDRDQUFvQjtRQUMzQkMsS0FBSztJQUNQO0lBQ0EsTUFBTUMsVUFBNEIsSUFBSUMsTUFBTU4sZ0JBQWdCSCxjQUFjVSxJQUFJLENBQUNDO0lBQy9FLE1BQU1DLGNBQWNkLGlCQUFBQSxrQkFBQUEsT0FBUVU7SUFDNUIsTUFBTSxDQUFDSyxXQUFXQyxhQUFhLEdBQUdDLElBQUFBLGVBQVEsRUFBQ1osZ0JBQWdCSDtJQUUzRGdCLElBQUFBLGdCQUFTLEVBQUM7UUFDUkYsYUFBYVgsZ0JBQWdCSDtJQUMvQixHQUFHO1FBQUNBO1FBQWNHO0tBQWM7SUFFaEMsTUFBTWMsd0JBQ0psQixlQUFlYSxZQUFZTSxNQUFNLEdBQUluQixDQUFBQSxjQUFjLElBQUksQ0FBQSxJQUFLYztJQUM5RCxNQUFNTSx1QkFBdUJQLFlBQVlNLE1BQU0sR0FBR0w7SUFFbEQscUJBQ0Usc0JBQUNPLFNBQUc7UUFBQ0MsSUFBSTtZQUFFQyxJQUFJO1lBQUlDLFNBQVM7WUFBUUMsWUFBWTtZQUFVQyxlQUFlO1FBQVM7OzBCQUNoRixzQkFBQ0Msc0NBQWlCO2dCQUNoQkMsV0FBV0MsNkNBQXFCLEdBQUc1QjtnQkFDbkNxQixJQUFJO29CQUNGLFdBQVc7d0JBQ1RFLFNBQVM7d0JBQ1RoQixLQUFLO3dCQUNMc0IsVUFBVTt3QkFDVkMsVUFBVTt3QkFDVkMsZ0JBQWdCO29CQUNsQjtnQkFDRjs7b0JBRUNuQixZQUFZb0IsS0FBSyxDQUFDLEdBQUduQixXQUFXb0IsR0FBRyxDQUFDLENBQUNDLFdBQVdDLE9BQU9DO3dCQUN0RCxJQUFJbkIseUJBQXlCa0IsVUFBVUMsSUFBSWxCLE1BQU0sR0FBRyxHQUFHOzRCQUNyRCxxQkFBTyxxQkFBQ21CLGVBQVE7MENBQXdCdEM7K0JBQWxCO3dCQUN4Qjs0QkFJU21DO3dCQUhULHFCQUNFLHFCQUFDSSw0QkFBYTs0QkFDWkMsZUFBZTs0QkFFZkwsV0FBV0E7NEJBQ1hNLFNBQVMsSUFBTU4sYUFBYWhDLFlBQVlnQzsyQkFGbkNBLENBQUFBLGdCQUFBQSxzQkFBQUEsZ0NBQUFBLFVBQVdPLEVBQUUsY0FBYlAsMkJBQUFBLGdCQUFpQkM7b0JBSzVCO29CQUNDLENBQUNsQix5QkFBeUJsQjs7O1lBRTVCb0Isc0NBQ0MscUJBQUN1QixnQkFBVTtnQkFDVEYsU0FBUyxJQUFNMUIsYUFBYTZCLENBQUFBLE9BQVFBLE9BQU94QztnQkFDM0NrQixJQUFJO29CQUNGdUIsT0FBTztvQkFDUEMsSUFBSTtvQkFDSkMsUUFBUTtvQkFDUixXQUFXO3dCQUFFQyxnQkFBZ0I7b0JBQVk7Z0JBQzNDOzBCQUNEOzs7O0FBTVQifQ==