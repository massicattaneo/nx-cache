7926a996382859d2b0c9aa49971e1e11
"use strict";
jest.mock("react-router", ()=>_object_spread_props(_object_spread({}, jest.requireActual("react-router")), {
        useLocation: jest.fn(),
        useNavigate: jest.fn(),
        useParams: jest.fn()
    }));
jest.mock("@rp/react/web/common/hooks", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/web/common/hooks")), {
        useHashParams: jest.fn(),
        useQueryParams: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _reactrouter = require("react-router");
const _hooks = require("@rp/react/web/common/hooks");
const _react = require("@testing-library/react");
const _useChatPaneContainer = require("./useChatPaneContainer");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
let renderedHook;
const mockChatId = "chat-id-123";
const mockDocumentId = "doc-id-123";
const mockDocumentId2 = "doc-id-234";
const mockUseNavigate = _reactrouter.useNavigate;
const mockUseLocation = _reactrouter.useLocation;
const mockUseParams = _reactrouter.useParams;
const mockNavigate = jest.fn();
mockUseNavigate.mockReturnValue(mockNavigate);
const mockUseHashParams = _hooks.useHashParams;
const mockUseQueryParams = _hooks.useQueryParams;
beforeEach(jest.clearAllMocks);
describe("useChatPaneContainer", ()=>{
    describe("initial render", ()=>{
        beforeEach(()=>{
            mockUseHashParams.mockReturnValue([
                {}
            ]);
            mockUseParams.mockReturnValue({
                id: mockDocumentId
            });
            mockUseQueryParams.mockReturnValue({
                get: ()=>undefined
            });
            mockUseLocation.mockReturnValue({
                search: ""
            });
            renderedHook = (0, _react.renderHook)(_useChatPaneContainer.useChatPaneContainer);
        });
        it("should return the correct state", ()=>{
            expect(renderedHook.result.current).toStrictEqual({
                chatId: undefined,
                onChatCreated: expect.any(Function)
            });
        });
    });
    describe("onChatCreated", ()=>{
        beforeEach(()=>{
            mockUseHashParams.mockReturnValue([
                {}
            ]);
            mockUseParams.mockReturnValue({
                id: undefined
            });
            mockUseQueryParams.mockReturnValueOnce({
                get: ()=>undefined
            }).mockReturnValue({
                get: ()=>mockChatId
            });
            mockUseLocation.mockReturnValue({
                search: ""
            });
            renderedHook = (0, _react.renderHook)(_useChatPaneContainer.useChatPaneContainer);
            (0, _react.act)(()=>renderedHook.result.current.onChatCreated(mockChatId));
            renderedHook.rerender();
        });
        it("should navigate to the correct URL", ()=>{
            expect(mockNavigate).toHaveBeenCalledTimes(1);
            expect(mockNavigate).toHaveBeenCalledWith(`?chatId=${mockChatId}`, {
                replace: true
            });
        });
        it("should return the correct chat ID", ()=>{
            expect(renderedHook.result.current.chatId).toBe(mockChatId);
        });
    });
    describe("on documentId change", ()=>{
        beforeEach(()=>{
            mockUseHashParams.mockReturnValue([
                {
                    private: true
                }
            ]);
            mockUseParams.mockReturnValue({
                id: mockDocumentId
            });
            mockUseQueryParams.mockReturnValueOnce({
                get: ()=>mockChatId
            }).mockReturnValue({
                get: ()=>undefined
            });
            mockUseLocation.mockReturnValue({
                search: `?chatId=${mockChatId}`
            });
            renderedHook = (0, _react.renderHook)(_useChatPaneContainer.useChatPaneContainer);
            (0, _react.act)(()=>mockUseParams.mockReturnValue({
                    id: mockDocumentId2
                }));
            renderedHook.rerender();
        });
        it("should navigate to the correct URL", ()=>{
            expect(mockNavigate).toHaveBeenCalledTimes(2);
            expect(mockNavigate.mock.calls).toStrictEqual([
                [
                    "?#?private=true",
                    {
                        replace: true
                    }
                ],
                [
                    "?#?private=true",
                    {
                        replace: true
                    }
                ]
            ]);
        });
        it("should return the correct (undefined) chat ID", ()=>{
            expect(renderedHook.result.current.chatId).toBeUndefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,