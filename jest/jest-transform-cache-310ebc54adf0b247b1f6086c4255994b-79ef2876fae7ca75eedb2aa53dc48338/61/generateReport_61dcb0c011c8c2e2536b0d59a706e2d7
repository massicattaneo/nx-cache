f8fb5cd65857e26d961f27e055e648ff
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "generateReport", {
    enumerable: true,
    get: function() {
        return generateReport;
    }
});
const _generateDate = require("./generateDate");
const _generateId = require("./generateId");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const generateReport = (params)=>{
    const entityReports = params.entities.map((entityInfo)=>{
        var _entityInfo_description, _entityInfo_country;
        return {
            entityId: entityInfo.key,
            entityInfo: _object_spread_props(_object_spread({}, entityInfo), {
                description: (_entityInfo_description = entityInfo.description) !== null && _entityInfo_description !== void 0 ? _entityInfo_description : "",
                country: (_entityInfo_country = entityInfo.country) !== null && _entityInfo_country !== void 0 ? _entityInfo_country : ""
            }),
            cleanFinalReport: `* ${entityInfo.name} report`
        };
    });
    return {
        report: {
            watchlistId: params.watchlist.id,
            watchlistName: params.watchlist.name,
            reportTitle: `Report for ${params.watchlist.name}`,
            reportDate: (0, _generateDate.generateDate)(),
            introduction: "Introduction to the report",
            entityReports,
            reportId: (0, _generateId.generateId)(),
            briefId: params.brief.id,
            isEmpty: false
        },
        nextReportDate: (0, _generateDate.generateDate)(new Date(Date.now() + 24 * 60 * 60 * 1000))
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvZGV2ZWxvcG1lbnQvc3JjL2xpYi9kYXRhYmFzZS9nZW5lcmF0b3JzL2dlbmVyYXRlUmVwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCJcbmltcG9ydCB7IGJpZ2RhdGFTY2hlbWFzIH0gZnJvbSBcIkBycC9jb21tb24vY29udHJhY3RzXCJcbmltcG9ydCB7IERiQnJpZWYsIERiQ3FzLCBEYldhdGNobGlzdCB9IGZyb20gXCIuLi9kYi50eXBlc1wiXG5pbXBvcnQgeyBnZW5lcmF0ZURhdGUgfSBmcm9tIFwiLi9nZW5lcmF0ZURhdGVcIlxuaW1wb3J0IHsgZ2VuZXJhdGVJZCB9IGZyb20gXCIuL2dlbmVyYXRlSWRcIlxuXG50eXBlIFJldCA9IHouaW5mZXI8dHlwZW9mIGJpZ2RhdGFTY2hlbWFzLnN0X2JyaWVmc19MYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlX0lucHV0PlxudHlwZSBQYXJhbXMgPSB7XG4gIHdhdGNobGlzdDogRGJXYXRjaGxpc3RcbiAgYnJpZWY6IERiQnJpZWZcbiAgZW50aXRpZXM6IEFycmF5PERiQ3FzPlxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVSZXBvcnQgPSAocGFyYW1zOiBQYXJhbXMpOiBSZXQgPT4ge1xuICBjb25zdCBlbnRpdHlSZXBvcnRzID0gcGFyYW1zLmVudGl0aWVzLm1hcChlbnRpdHlJbmZvID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZW50aXR5SWQ6IGVudGl0eUluZm8ua2V5LFxuICAgICAgZW50aXR5SW5mbzoge1xuICAgICAgICAuLi5lbnRpdHlJbmZvLFxuICAgICAgICBkZXNjcmlwdGlvbjogZW50aXR5SW5mby5kZXNjcmlwdGlvbiA/PyBcIlwiLFxuICAgICAgICBjb3VudHJ5OiBlbnRpdHlJbmZvLmNvdW50cnkgPz8gXCJcIixcbiAgICAgIH0sXG4gICAgICBjbGVhbkZpbmFsUmVwb3J0OiBgKiAke2VudGl0eUluZm8ubmFtZX0gcmVwb3J0YCxcbiAgICB9XG4gIH0pXG4gIHJldHVybiB7XG4gICAgcmVwb3J0OiB7XG4gICAgICB3YXRjaGxpc3RJZDogcGFyYW1zLndhdGNobGlzdC5pZCxcbiAgICAgIHdhdGNobGlzdE5hbWU6IHBhcmFtcy53YXRjaGxpc3QubmFtZSxcbiAgICAgIHJlcG9ydFRpdGxlOiBgUmVwb3J0IGZvciAke3BhcmFtcy53YXRjaGxpc3QubmFtZX1gLFxuICAgICAgcmVwb3J0RGF0ZTogZ2VuZXJhdGVEYXRlKCksXG4gICAgICBpbnRyb2R1Y3Rpb246IFwiSW50cm9kdWN0aW9uIHRvIHRoZSByZXBvcnRcIixcbiAgICAgIGVudGl0eVJlcG9ydHMsXG4gICAgICByZXBvcnRJZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgYnJpZWZJZDogcGFyYW1zLmJyaWVmLmlkLFxuICAgICAgaXNFbXB0eTogZmFsc2UsXG4gICAgfSxcbiAgICBuZXh0UmVwb3J0RGF0ZTogZ2VuZXJhdGVEYXRlKG5ldyBEYXRlKERhdGUubm93KCkgKyAyNCAqIDYwICogNjAgKiAxMDAwKSksXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZVJlcG9ydCIsInBhcmFtcyIsImVudGl0eVJlcG9ydHMiLCJlbnRpdGllcyIsIm1hcCIsImVudGl0eUluZm8iLCJlbnRpdHlJZCIsImtleSIsImRlc2NyaXB0aW9uIiwiY291bnRyeSIsImNsZWFuRmluYWxSZXBvcnQiLCJuYW1lIiwicmVwb3J0Iiwid2F0Y2hsaXN0SWQiLCJ3YXRjaGxpc3QiLCJpZCIsIndhdGNobGlzdE5hbWUiLCJyZXBvcnRUaXRsZSIsInJlcG9ydERhdGUiLCJnZW5lcmF0ZURhdGUiLCJpbnRyb2R1Y3Rpb24iLCJyZXBvcnRJZCIsImdlbmVyYXRlSWQiLCJicmllZklkIiwiYnJpZWYiLCJpc0VtcHR5IiwibmV4dFJlcG9ydERhdGUiLCJEYXRlIiwibm93Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFhYUE7OztlQUFBQTs7OzhCQVZnQjs0QkFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTcEIsTUFBTUEsaUJBQWlCLENBQUNDO0lBQzdCLE1BQU1DLGdCQUFnQkQsT0FBT0UsUUFBUSxDQUFDQyxHQUFHLENBQUNDLENBQUFBO1lBS3ZCQSx5QkFDSkE7UUFMYixPQUFPO1lBQ0xDLFVBQVVELFdBQVdFLEdBQUc7WUFDeEJGLFlBQVksd0NBQ1BBO2dCQUNIRyxhQUFhSCxDQUFBQSwwQkFBQUEsV0FBV0csV0FBVyxjQUF0QkgscUNBQUFBLDBCQUEwQjtnQkFDdkNJLFNBQVNKLENBQUFBLHNCQUFBQSxXQUFXSSxPQUFPLGNBQWxCSixpQ0FBQUEsc0JBQXNCOztZQUVqQ0ssa0JBQWtCLENBQUMsRUFBRSxFQUFFTCxXQUFXTSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2pEO0lBQ0Y7SUFDQSxPQUFPO1FBQ0xDLFFBQVE7WUFDTkMsYUFBYVosT0FBT2EsU0FBUyxDQUFDQyxFQUFFO1lBQ2hDQyxlQUFlZixPQUFPYSxTQUFTLENBQUNILElBQUk7WUFDcENNLGFBQWEsQ0FBQyxXQUFXLEVBQUVoQixPQUFPYSxTQUFTLENBQUNILElBQUksQ0FBQyxDQUFDO1lBQ2xETyxZQUFZQyxJQUFBQSwwQkFBWTtZQUN4QkMsY0FBYztZQUNkbEI7WUFDQW1CLFVBQVVDLElBQUFBLHNCQUFVO1lBQ3BCQyxTQUFTdEIsT0FBT3VCLEtBQUssQ0FBQ1QsRUFBRTtZQUN4QlUsU0FBUztRQUNYO1FBQ0FDLGdCQUFnQlAsSUFBQUEsMEJBQVksRUFBQyxJQUFJUSxLQUFLQSxLQUFLQyxHQUFHLEtBQUssS0FBSyxLQUFLLEtBQUs7SUFDcEU7QUFDRiJ9