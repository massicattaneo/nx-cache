7f524cb99bceb9229dcab0d69885c45a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CompanyWatchlists", {
    enumerable: true,
    get: function() {
        return CompanyWatchlists;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _watchlists = require("@rp/react/web/common/watchlists");
const _core = require("@rp/react/web/mui/core");
const _WatchlistsListView = require("../../WatchlistsListView");
const CompanyWatchlists = ({ organizationName, containerEl, onCardClick, data, modeView })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                sx: {
                    fontSize: 32,
                    fontWeight: 700
                },
                children: [
                    organizationName,
                    "'s Watchlists"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                sx: {
                    color: "text.secondary",
                    fontSize: 16,
                    my: 2
                },
                children: (data === null || data === void 0 ? void 0 : data.length) === 0 ? "Once a watchlist is shared within your organization, you'll see it here" : `Take a look at your colleagues' watchlists at ${organizationName}`
            }),
            modeView === "card" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_watchlists.WatchlistCardViewShowMoreList, {
                onCardClick: onCardClick,
                containerEl: containerEl,
                data: data,
                initialLines: 3
            }),
            modeView === "list" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistsListView.PublicWatchlists, {
                data: data,
                isLoading: !data
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RzQ2FyZFZpZXcvQ29tcGFueVdhdGNobGlzdHMvQ29tcGFueVdhdGNobGlzdHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yZ2FuaXphdGlvbk1lbWJlcnNoaXBSZXNvdXJjZSB9IGZyb20gXCJAY2xlcmsvdHlwZXNcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IFdhdGNobGlzdENhcmRWaWV3U2hvd01vcmVMaXN0IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3dhdGNobGlzdHNcIlxuaW1wb3J0IHsgVHlwb2dyYXBoeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IFB1YmxpY1dhdGNobGlzdHMgfSBmcm9tIFwiLi4vLi4vV2F0Y2hsaXN0c0xpc3RWaWV3XCJcbmltcG9ydCB7IFdhdGNobGlzdHNNb2RlVmlldyB9IGZyb20gXCIuLi9XYXRjaGxpc3RzQ2FyZFZpZXdUb2dnbGVzXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgZGF0YTogQXJyYXk8V2F0Y2hsaXN0ICYgeyBvd25lcjogT3JnYW5pemF0aW9uTWVtYmVyc2hpcFJlc291cmNlIHwgdW5kZWZpbmVkIH0+IHwgdW5kZWZpbmVkXG4gIG9yZ2FuaXphdGlvbk5hbWU6IHN0cmluZ1xuICBjb250YWluZXJFbDogSFRNTERpdkVsZW1lbnQgfCBudWxsXG4gIG9uQ2FyZENsaWNrOiAod2F0Y2hsaXN0OiBXYXRjaGxpc3QpID0+IHZvaWRcbiAgbW9kZVZpZXc6IFdhdGNobGlzdHNNb2RlVmlld1xufVxuXG5leHBvcnQgY29uc3QgQ29tcGFueVdhdGNobGlzdHMgPSAoe1xuICBvcmdhbml6YXRpb25OYW1lLFxuICBjb250YWluZXJFbCxcbiAgb25DYXJkQ2xpY2ssXG4gIGRhdGEsXG4gIG1vZGVWaWV3LFxufTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFR5cG9ncmFwaHkgc3g9e3sgZm9udFNpemU6IDMyLCBmb250V2VpZ2h0OiA3MDAgfX0+XG4gICAgICAgIHtvcmdhbml6YXRpb25OYW1lfSdzIFdhdGNobGlzdHNcbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGNvbG9yOiBcInRleHQuc2Vjb25kYXJ5XCIsIGZvbnRTaXplOiAxNiwgbXk6IDIgfX0+XG4gICAgICAgIHtkYXRhPy5sZW5ndGggPT09IDBcbiAgICAgICAgICA/IFwiT25jZSBhIHdhdGNobGlzdCBpcyBzaGFyZWQgd2l0aGluIHlvdXIgb3JnYW5pemF0aW9uLCB5b3UnbGwgc2VlIGl0IGhlcmVcIlxuICAgICAgICAgIDogYFRha2UgYSBsb29rIGF0IHlvdXIgY29sbGVhZ3Vlcycgd2F0Y2hsaXN0cyBhdCAke29yZ2FuaXphdGlvbk5hbWV9YH1cbiAgICAgIDwvVHlwb2dyYXBoeT5cblxuICAgICAge21vZGVWaWV3ID09PSBcImNhcmRcIiAmJiAoXG4gICAgICAgIDxXYXRjaGxpc3RDYXJkVmlld1Nob3dNb3JlTGlzdFxuICAgICAgICAgIG9uQ2FyZENsaWNrPXtvbkNhcmRDbGlja31cbiAgICAgICAgICBjb250YWluZXJFbD17Y29udGFpbmVyRWx9XG4gICAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgICBpbml0aWFsTGluZXM9ezN9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAge21vZGVWaWV3ID09PSBcImxpc3RcIiAmJiA8UHVibGljV2F0Y2hsaXN0cyBkYXRhPXtkYXRhfSBpc0xvYWRpbmc9eyFkYXRhfSAvPn1cbiAgICA8Lz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIkNvbXBhbnlXYXRjaGxpc3RzIiwib3JnYW5pemF0aW9uTmFtZSIsImNvbnRhaW5lckVsIiwib25DYXJkQ2xpY2siLCJkYXRhIiwibW9kZVZpZXciLCJUeXBvZ3JhcGh5Iiwic3giLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJjb2xvciIsIm15IiwibGVuZ3RoIiwiV2F0Y2hsaXN0Q2FyZFZpZXdTaG93TW9yZUxpc3QiLCJpbml0aWFsTGluZXMiLCJQdWJsaWNXYXRjaGxpc3RzIiwiaXNMb2FkaW5nIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWVhQTs7O2VBQUFBOzs7OzRCQWJpQztzQkFDbkI7b0NBQ007QUFXMUIsTUFBTUEsb0JBQW9CLENBQUMsRUFDaENDLGdCQUFnQixFQUNoQkMsV0FBVyxFQUNYQyxXQUFXLEVBQ1hDLElBQUksRUFDSkMsUUFBUSxFQUNGO0lBQ04scUJBQ0U7OzBCQUNFLHNCQUFDQyxnQkFBVTtnQkFBQ0MsSUFBSTtvQkFBRUMsVUFBVTtvQkFBSUMsWUFBWTtnQkFBSTs7b0JBQzdDUjtvQkFBaUI7OzswQkFFcEIscUJBQUNLLGdCQUFVO2dCQUFDQyxJQUFJO29CQUFFRyxPQUFPO29CQUFrQkYsVUFBVTtvQkFBSUcsSUFBSTtnQkFBRTswQkFDNURQLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVEsTUFBTSxNQUFLLElBQ2QsNEVBQ0EsQ0FBQyw4Q0FBOEMsRUFBRVgsaUJBQWlCLENBQUM7O1lBR3hFSSxhQUFhLHdCQUNaLHFCQUFDUSx5Q0FBNkI7Z0JBQzVCVixhQUFhQTtnQkFDYkQsYUFBYUE7Z0JBQ2JFLE1BQU1BO2dCQUNOVSxjQUFjOztZQUdqQlQsYUFBYSx3QkFBVSxxQkFBQ1Usb0NBQWdCO2dCQUFDWCxNQUFNQTtnQkFBTVksV0FBVyxDQUFDWjs7OztBQUd4RSJ9