d00b39f42b3ae528475646919a06abd8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    apiKeySchema: function() {
        return apiKeySchema;
    },
    apiKeysQuotaSchema: function() {
        return apiKeysQuotaSchema;
    },
    apiKeysQuotasSchema: function() {
        return apiKeysQuotasSchema;
    }
});
const _zod = require("zod");
const QuotaId = _zod.z.enum([
    "apiQueryUnit",
    "inputTokens",
    "outputTokens",
    "webSearch",
    "textGeneration",
    "pdfGeneration"
]);
const apiKeysQuotaSchema = _zod.z.object({
    id: QuotaId,
    name: _zod.z.string(),
    costPerUnitCredits: _zod.z.number(),
    consumedUnits: _zod.z.number(),
    consumedCredits: _zod.z.number()
});
const apiKeysQuotasSchema = _zod.z.object({
    organizationId: _zod.z.string(),
    totalAllowedCredits: _zod.z.number(),
    totalConsumedCredits: _zod.z.number(),
    remainingCredits: _zod.z.number(),
    quotas: _zod.z.array(apiKeysQuotaSchema),
    lastUpdated: _zod.z.string()
});
function parseDate(date) {
    const str = date.endsWith("Z") ? date : `${date}Z`;
    return new Date(str);
}
const apiKeySchema = _zod.z.object({
    id: _zod.z.string().uuid(),
    stub: _zod.z.string(),
    user_id: _zod.z.string(),
    description: _zod.z.string(),
    enabled: _zod.z.boolean(),
    last_used: _zod.z.string().nullish().transform((str)=>str ? parseDate(str) : null),
    date_created: _zod.z.string().transform((str)=>parseDate(str)),
    last_updated: _zod.z.string().transform((str)=>parseDate(str)),
    created_by: _zod.z.string(),
    modified_by: _zod.z.string()
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3pvZC1jb250cmFjdHMvYXBpLWtleXMvc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCJcblxuY29uc3QgUXVvdGFJZCA9IHouZW51bShbXG4gIFwiYXBpUXVlcnlVbml0XCIsXG4gIFwiaW5wdXRUb2tlbnNcIixcbiAgXCJvdXRwdXRUb2tlbnNcIixcbiAgXCJ3ZWJTZWFyY2hcIixcbiAgXCJ0ZXh0R2VuZXJhdGlvblwiLFxuICBcInBkZkdlbmVyYXRpb25cIixcbl0pXG5cbmNvbnN0IGFwaUtleXNRdW90YVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IFF1b3RhSWQsXG4gIG5hbWU6IHouc3RyaW5nKCksXG4gIGNvc3RQZXJVbml0Q3JlZGl0czogei5udW1iZXIoKSxcbiAgY29uc3VtZWRVbml0czogei5udW1iZXIoKSxcbiAgY29uc3VtZWRDcmVkaXRzOiB6Lm51bWJlcigpLFxufSlcblxuY29uc3QgYXBpS2V5c1F1b3Rhc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgb3JnYW5pemF0aW9uSWQ6IHouc3RyaW5nKCksXG4gIHRvdGFsQWxsb3dlZENyZWRpdHM6IHoubnVtYmVyKCksXG4gIHRvdGFsQ29uc3VtZWRDcmVkaXRzOiB6Lm51bWJlcigpLFxuICByZW1haW5pbmdDcmVkaXRzOiB6Lm51bWJlcigpLFxuICBxdW90YXM6IHouYXJyYXkoYXBpS2V5c1F1b3RhU2NoZW1hKSxcbiAgbGFzdFVwZGF0ZWQ6IHouc3RyaW5nKCksXG59KVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZTogc3RyaW5nKTogRGF0ZSB7XG4gIGNvbnN0IHN0ciA9IGRhdGUuZW5kc1dpdGgoXCJaXCIpID8gZGF0ZSA6IGAke2RhdGV9WmBcbiAgcmV0dXJuIG5ldyBEYXRlKHN0cilcbn1cblxuY29uc3QgYXBpS2V5U2NoZW1hID0gei5vYmplY3Qoe1xuICBpZDogei5zdHJpbmcoKS51dWlkKCksXG4gIHN0dWI6IHouc3RyaW5nKCksXG4gIHVzZXJfaWQ6IHouc3RyaW5nKCksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLFxuICBlbmFibGVkOiB6LmJvb2xlYW4oKSxcbiAgbGFzdF91c2VkOiB6XG4gICAgLnN0cmluZygpXG4gICAgLm51bGxpc2goKVxuICAgIC50cmFuc2Zvcm0oc3RyID0+IChzdHIgPyBwYXJzZURhdGUoc3RyKSA6IG51bGwpKSxcbiAgZGF0ZV9jcmVhdGVkOiB6LnN0cmluZygpLnRyYW5zZm9ybShzdHIgPT4gcGFyc2VEYXRlKHN0cikpLFxuICBsYXN0X3VwZGF0ZWQ6IHouc3RyaW5nKCkudHJhbnNmb3JtKHN0ciA9PiBwYXJzZURhdGUoc3RyKSksXG4gIGNyZWF0ZWRfYnk6IHouc3RyaW5nKCksXG4gIG1vZGlmaWVkX2J5OiB6LnN0cmluZygpLFxufSlcblxuZXhwb3J0IHsgYXBpS2V5c1F1b3Rhc1NjaGVtYSwgYXBpS2V5U2NoZW1hLCBhcGlLZXlzUXVvdGFTY2hlbWEgfVxuIl0sIm5hbWVzIjpbImFwaUtleVNjaGVtYSIsImFwaUtleXNRdW90YVNjaGVtYSIsImFwaUtleXNRdW90YXNTY2hlbWEiLCJRdW90YUlkIiwieiIsImVudW0iLCJvYmplY3QiLCJpZCIsIm5hbWUiLCJzdHJpbmciLCJjb3N0UGVyVW5pdENyZWRpdHMiLCJudW1iZXIiLCJjb25zdW1lZFVuaXRzIiwiY29uc3VtZWRDcmVkaXRzIiwib3JnYW5pemF0aW9uSWQiLCJ0b3RhbEFsbG93ZWRDcmVkaXRzIiwidG90YWxDb25zdW1lZENyZWRpdHMiLCJyZW1haW5pbmdDcmVkaXRzIiwicXVvdGFzIiwiYXJyYXkiLCJsYXN0VXBkYXRlZCIsInBhcnNlRGF0ZSIsImRhdGUiLCJzdHIiLCJlbmRzV2l0aCIsIkRhdGUiLCJ1dWlkIiwic3R1YiIsInVzZXJfaWQiLCJkZXNjcmlwdGlvbiIsImVuYWJsZWQiLCJib29sZWFuIiwibGFzdF91c2VkIiwibnVsbGlzaCIsInRyYW5zZm9ybSIsImRhdGVfY3JlYXRlZCIsImxhc3RfdXBkYXRlZCIsImNyZWF0ZWRfYnkiLCJtb2RpZmllZF9ieSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBaUQ4QkEsWUFBWTtlQUFaQTs7SUFBY0Msa0JBQWtCO2VBQWxCQTs7SUFBbkNDLG1CQUFtQjtlQUFuQkE7OztxQkFqRFM7QUFFbEIsTUFBTUMsVUFBVUMsTUFBQyxDQUFDQyxJQUFJLENBQUM7SUFDckI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxNQUFNSixxQkFBcUJHLE1BQUMsQ0FBQ0UsTUFBTSxDQUFDO0lBQ2xDQyxJQUFJSjtJQUNKSyxNQUFNSixNQUFDLENBQUNLLE1BQU07SUFDZEMsb0JBQW9CTixNQUFDLENBQUNPLE1BQU07SUFDNUJDLGVBQWVSLE1BQUMsQ0FBQ08sTUFBTTtJQUN2QkUsaUJBQWlCVCxNQUFDLENBQUNPLE1BQU07QUFDM0I7QUFFQSxNQUFNVCxzQkFBc0JFLE1BQUMsQ0FBQ0UsTUFBTSxDQUFDO0lBQ25DUSxnQkFBZ0JWLE1BQUMsQ0FBQ0ssTUFBTTtJQUN4Qk0scUJBQXFCWCxNQUFDLENBQUNPLE1BQU07SUFDN0JLLHNCQUFzQlosTUFBQyxDQUFDTyxNQUFNO0lBQzlCTSxrQkFBa0JiLE1BQUMsQ0FBQ08sTUFBTTtJQUMxQk8sUUFBUWQsTUFBQyxDQUFDZSxLQUFLLENBQUNsQjtJQUNoQm1CLGFBQWFoQixNQUFDLENBQUNLLE1BQU07QUFDdkI7QUFFQSxTQUFTWSxVQUFVQyxJQUFZO0lBQzdCLE1BQU1DLE1BQU1ELEtBQUtFLFFBQVEsQ0FBQyxPQUFPRixPQUFPLENBQUMsRUFBRUEsS0FBSyxDQUFDLENBQUM7SUFDbEQsT0FBTyxJQUFJRyxLQUFLRjtBQUNsQjtBQUVBLE1BQU12QixlQUFlSSxNQUFDLENBQUNFLE1BQU0sQ0FBQztJQUM1QkMsSUFBSUgsTUFBQyxDQUFDSyxNQUFNLEdBQUdpQixJQUFJO0lBQ25CQyxNQUFNdkIsTUFBQyxDQUFDSyxNQUFNO0lBQ2RtQixTQUFTeEIsTUFBQyxDQUFDSyxNQUFNO0lBQ2pCb0IsYUFBYXpCLE1BQUMsQ0FBQ0ssTUFBTTtJQUNyQnFCLFNBQVMxQixNQUFDLENBQUMyQixPQUFPO0lBQ2xCQyxXQUFXNUIsTUFBQyxDQUNUSyxNQUFNLEdBQ053QixPQUFPLEdBQ1BDLFNBQVMsQ0FBQ1gsQ0FBQUEsTUFBUUEsTUFBTUYsVUFBVUUsT0FBTztJQUM1Q1ksY0FBYy9CLE1BQUMsQ0FBQ0ssTUFBTSxHQUFHeUIsU0FBUyxDQUFDWCxDQUFBQSxNQUFPRixVQUFVRTtJQUNwRGEsY0FBY2hDLE1BQUMsQ0FBQ0ssTUFBTSxHQUFHeUIsU0FBUyxDQUFDWCxDQUFBQSxNQUFPRixVQUFVRTtJQUNwRGMsWUFBWWpDLE1BQUMsQ0FBQ0ssTUFBTTtJQUNwQjZCLGFBQWFsQyxNQUFDLENBQUNLLE1BQU07QUFDdkIifQ==