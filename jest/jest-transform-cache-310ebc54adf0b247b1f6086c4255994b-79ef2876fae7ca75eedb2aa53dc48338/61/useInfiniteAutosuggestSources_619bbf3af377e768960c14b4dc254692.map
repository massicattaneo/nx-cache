{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/content/src/hooks/useInfiniteAutosuggestSources.ts"],"sourcesContent":["import { keepPreviousData, useInfiniteQuery } from \"@tanstack/react-query\"\nimport { AUTOSUGGEST_SOURCES_INFINITE_PAGE_SIZE } from \"../content.constants\"\nimport { getAutosuggestSources } from \"../services/getAutosuggestSources\"\nimport { autosuggestSourcesQueryKeys } from \"../utils/autosuggestSourcesQueryKeys\"\n\ntype UseInfiniteAutosuggestSourcesParams = {\n  contentPackage?: string | undefined\n  contentCategory?: string | undefined\n  query: string\n}\nfunction useInfiniteAutosuggestSources({\n  contentPackage,\n  contentCategory,\n  query,\n}: UseInfiniteAutosuggestSourcesParams) {\n  return useInfiniteQuery({\n    enabled: !!contentPackage || !!contentCategory,\n    queryKey: autosuggestSourcesQueryKeys.paginated({ contentPackage, contentCategory, query }),\n    queryFn: params =>\n      getAutosuggestSources({\n        offset: params.pageParam,\n        pageCount: AUTOSUGGEST_SOURCES_INFINITE_PAGE_SIZE,\n        contentPackage,\n        contentCategory,\n        query,\n      }),\n    staleTime: 60 * 1000,\n    refetchOnWindowFocus: false,\n    initialPageParam: 0,\n    placeholderData: keepPreviousData,\n    getNextPageParam: (lastPage, _allPages, lastPageParam) => {\n      if (lastPage.results.length < AUTOSUGGEST_SOURCES_INFINITE_PAGE_SIZE) return undefined\n      return lastPageParam + 1\n    },\n  })\n}\n\nexport { useInfiniteAutosuggestSources }\n"],"names":["useInfiniteAutosuggestSources","contentPackage","contentCategory","query","useInfiniteQuery","enabled","queryKey","autosuggestSourcesQueryKeys","paginated","queryFn","params","getAutosuggestSources","offset","pageParam","pageCount","AUTOSUGGEST_SOURCES_INFINITE_PAGE_SIZE","staleTime","refetchOnWindowFocus","initialPageParam","placeholderData","keepPreviousData","getNextPageParam","lastPage","_allPages","lastPageParam","results","length","undefined"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqCSA;;;eAAAA;;;4BArC0C;kCACI;uCACjB;6CACM;AAO5C,SAASA,8BAA8B,EACrCC,cAAc,EACdC,eAAe,EACfC,KAAK,EAC+B;IACpC,OAAOC,IAAAA,4BAAgB,EAAC;QACtBC,SAAS,CAAC,CAACJ,kBAAkB,CAAC,CAACC;QAC/BI,UAAUC,wDAA2B,CAACC,SAAS,CAAC;YAAEP;YAAgBC;YAAiBC;QAAM;QACzFM,SAASC,CAAAA,SACPC,IAAAA,4CAAqB,EAAC;gBACpBC,QAAQF,OAAOG,SAAS;gBACxBC,WAAWC,wDAAsC;gBACjDd;gBACAC;gBACAC;YACF;QACFa,WAAW,KAAK;QAChBC,sBAAsB;QACtBC,kBAAkB;QAClBC,iBAAiBC,4BAAgB;QACjCC,kBAAkB,CAACC,UAAUC,WAAWC;YACtC,IAAIF,SAASG,OAAO,CAACC,MAAM,GAAGX,wDAAsC,EAAE,OAAOY;YAC7E,OAAOH,gBAAgB;QACzB;IACF;AACF"}