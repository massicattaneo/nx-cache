ac2d917ed858072d70690601793892f4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SourceChatDisplay", {
    enumerable: true,
    get: function() {
        return SourceChatDisplay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _settings = require("@rp/common/settings");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const SourceChatDisplay = ({ isLoading, source, relatedChunks, ts, onClick })=>{
    const { srcKey, id: documentId } = source;
    const { setDocumentData } = (0, _providers.useDocumentViewerData)();
    const [hashParams, setHashParams] = (0, _hooks.useHashParams)();
    const { redirectToContent } = (0, _hooks.useExternalLinkUrl)(documentId);
    // TODO: Retrieve this info from BE
    const documentScope = "news";
    const isPrivate = srcKey === "000000";
    const handleClick = async (ev)=>{
        var _relatedChunks__boundingBoxes;
        ev.stopPropagation();
        onClick === null || onClick === void 0 ? void 0 : onClick();
        var _source_rpProviderId;
        if (source.url && _settings.REDIRECT_PROVIDERS.includes((_source_rpProviderId = source.rpProviderId) !== null && _source_rpProviderId !== void 0 ? _source_rpProviderId : "")) {
            var _relatedChunks__text;
            redirectToContent(source.url, (_relatedChunks__text = relatedChunks === null || relatedChunks === void 0 ? void 0 : relatedChunks[0].text) !== null && _relatedChunks__text !== void 0 ? _relatedChunks__text : "");
            return;
        }
        setDocumentData({
            documentId,
            documentScope,
            chunks: relatedChunks !== null && relatedChunks !== void 0 ? relatedChunks : []
        });
        const hashParams = isPrivate ? {
            document: documentId,
            private: "true"
        } : {
            document: documentId
        };
        const boundingBox = relatedChunks === null || relatedChunks === void 0 ? void 0 : (_relatedChunks__boundingBoxes = relatedChunks[0].boundingBoxes) === null || _relatedChunks__boundingBoxes === void 0 ? void 0 : _relatedChunks__boundingBoxes[0];
        if (boundingBox) {
            hashParams.bb = JSON.stringify(boundingBox);
        }
        setHashParams(hashParams);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.SourceDisplay, {
        showTooltips: !hashParams.document,
        isLoading: isLoading,
        source: source,
        onClick: handleClick,
        name: source.name,
        ts: ts
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L0NoYXQvQ2hhdFJlc3BvbnNlL1NvdXJjZUNoYXREaXNwbGF5LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb3VzZUV2ZW50SGFuZGxlciB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBDcXNDaHVua1N0b3J5IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IFJFRElSRUNUX1BST1ZJREVSUyB9IGZyb20gXCJAcnAvY29tbW9uL3NldHRpbmdzXCJcbmltcG9ydCB7IExsbURvY3VtZW50U291cmNlIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvbGxtLXN1bW1hcnlcIlxuaW1wb3J0IHsgU291cmNlRGlzcGxheSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyB1c2VFeHRlcm5hbExpbmtVcmwsIHVzZUhhc2hQYXJhbXMgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vaG9va3NcIlxuaW1wb3J0IHsgdXNlRG9jdW1lbnRWaWV3ZXJEYXRhIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5cbnR5cGUgTGxtRG9jdW1lbnRTb3VyY2VXaXRoTGlua3MgPSBMbG1Eb2N1bWVudFNvdXJjZSAmIHtcbiAgdXJsPzogc3RyaW5nIHwgbnVsbFxuICBpbWFnZVVybHM/OiBBcnJheTxzdHJpbmc+IHwgbnVsbFxufVxuXG50eXBlIFByb3BzID0ge1xuICBpc0xvYWRpbmc/OiBib29sZWFuXG4gIHNvdXJjZTogTGxtRG9jdW1lbnRTb3VyY2VXaXRoTGlua3NcbiAgcmVsYXRlZENodW5rcz86IENxc0NodW5rU3RvcnlbXCJjaHVua3NcIl1cbiAgdHM/OiBzdHJpbmdcbiAgb25DbGljaz86ICgpID0+IHZvaWRcbn1cblxuY29uc3QgU291cmNlQ2hhdERpc3BsYXkgPSAoeyBpc0xvYWRpbmcsIHNvdXJjZSwgcmVsYXRlZENodW5rcywgdHMsIG9uQ2xpY2sgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBzcmNLZXksIGlkOiBkb2N1bWVudElkIH0gPSBzb3VyY2VcbiAgY29uc3QgeyBzZXREb2N1bWVudERhdGEgfSA9IHVzZURvY3VtZW50Vmlld2VyRGF0YSgpXG4gIGNvbnN0IFtoYXNoUGFyYW1zLCBzZXRIYXNoUGFyYW1zXSA9IHVzZUhhc2hQYXJhbXMoKVxuICBjb25zdCB7IHJlZGlyZWN0VG9Db250ZW50IH0gPSB1c2VFeHRlcm5hbExpbmtVcmwoZG9jdW1lbnRJZClcblxuICAvLyBUT0RPOiBSZXRyaWV2ZSB0aGlzIGluZm8gZnJvbSBCRVxuICBjb25zdCBkb2N1bWVudFNjb3BlID0gXCJuZXdzXCJcbiAgY29uc3QgaXNQcml2YXRlID0gc3JjS2V5ID09PSBcIjAwMDAwMFwiXG5cbiAgY29uc3QgaGFuZGxlQ2xpY2s6IE1vdXNlRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PiA9IGFzeW5jIGV2ID0+IHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxuICAgIG9uQ2xpY2s/LigpXG4gICAgaWYgKHNvdXJjZS51cmwgJiYgUkVESVJFQ1RfUFJPVklERVJTLmluY2x1ZGVzKHNvdXJjZS5ycFByb3ZpZGVySWQgPz8gXCJcIikpIHtcbiAgICAgIHJlZGlyZWN0VG9Db250ZW50KHNvdXJjZS51cmwsIHJlbGF0ZWRDaHVua3M/LlswXS50ZXh0ID8/IFwiXCIpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXREb2N1bWVudERhdGEoe1xuICAgICAgZG9jdW1lbnRJZCxcbiAgICAgIGRvY3VtZW50U2NvcGUsXG4gICAgICBjaHVua3M6IHJlbGF0ZWRDaHVua3MgPz8gW10sXG4gICAgfSlcblxuICAgIGNvbnN0IGhhc2hQYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSBpc1ByaXZhdGVcbiAgICAgID8geyBkb2N1bWVudDogZG9jdW1lbnRJZCwgcHJpdmF0ZTogXCJ0cnVlXCIgfVxuICAgICAgOiB7IGRvY3VtZW50OiBkb2N1bWVudElkIH1cbiAgICBjb25zdCBib3VuZGluZ0JveCA9IHJlbGF0ZWRDaHVua3M/LlswXS5ib3VuZGluZ0JveGVzPy5bMF1cbiAgICBpZiAoYm91bmRpbmdCb3gpIHtcbiAgICAgIGhhc2hQYXJhbXMuYmIgPSBKU09OLnN0cmluZ2lmeShib3VuZGluZ0JveClcbiAgICB9XG5cbiAgICBzZXRIYXNoUGFyYW1zKGhhc2hQYXJhbXMpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxTb3VyY2VEaXNwbGF5XG4gICAgICBzaG93VG9vbHRpcHM9eyFoYXNoUGFyYW1zLmRvY3VtZW50fVxuICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICBzb3VyY2U9e3NvdXJjZX1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfVxuICAgICAgbmFtZT17c291cmNlLm5hbWV9XG4gICAgICB0cz17dHN9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgeyBTb3VyY2VDaGF0RGlzcGxheSB9XG4iXSwibmFtZXMiOlsiU291cmNlQ2hhdERpc3BsYXkiLCJpc0xvYWRpbmciLCJzb3VyY2UiLCJyZWxhdGVkQ2h1bmtzIiwidHMiLCJvbkNsaWNrIiwic3JjS2V5IiwiaWQiLCJkb2N1bWVudElkIiwic2V0RG9jdW1lbnREYXRhIiwidXNlRG9jdW1lbnRWaWV3ZXJEYXRhIiwiaGFzaFBhcmFtcyIsInNldEhhc2hQYXJhbXMiLCJ1c2VIYXNoUGFyYW1zIiwicmVkaXJlY3RUb0NvbnRlbnQiLCJ1c2VFeHRlcm5hbExpbmtVcmwiLCJkb2N1bWVudFNjb3BlIiwiaXNQcml2YXRlIiwiaGFuZGxlQ2xpY2siLCJldiIsInN0b3BQcm9wYWdhdGlvbiIsInVybCIsIlJFRElSRUNUX1BST1ZJREVSUyIsImluY2x1ZGVzIiwicnBQcm92aWRlcklkIiwidGV4dCIsImNodW5rcyIsImRvY3VtZW50IiwicHJpdmF0ZSIsImJvdW5kaW5nQm94IiwiYm91bmRpbmdCb3hlcyIsImJiIiwiSlNPTiIsInN0cmluZ2lmeSIsIlNvdXJjZURpc3BsYXkiLCJzaG93VG9vbHRpcHMiLCJuYW1lIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBb0VTQTs7O2VBQUFBOzs7OzBCQWxFMEI7cUNBRUw7dUJBQ29COzJCQUNaO0FBZXRDLE1BQU1BLG9CQUFvQixDQUFDLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFTO0lBQ2pGLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxJQUFJQyxVQUFVLEVBQUUsR0FBR047SUFDbkMsTUFBTSxFQUFFTyxlQUFlLEVBQUUsR0FBR0MsSUFBQUEsZ0NBQXFCO0lBQ2pELE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHQyxJQUFBQSxvQkFBYTtJQUNqRCxNQUFNLEVBQUVDLGlCQUFpQixFQUFFLEdBQUdDLElBQUFBLHlCQUFrQixFQUFDUDtJQUVqRCxtQ0FBbUM7SUFDbkMsTUFBTVEsZ0JBQWdCO0lBQ3RCLE1BQU1DLFlBQVlYLFdBQVc7SUFFN0IsTUFBTVksY0FBaUQsT0FBTUM7WUFpQnZDaEI7UUFoQnBCZ0IsR0FBR0MsZUFBZTtRQUNsQmYsb0JBQUFBLDhCQUFBQTtZQUM4Q0g7UUFBOUMsSUFBSUEsT0FBT21CLEdBQUcsSUFBSUMsNEJBQWtCLENBQUNDLFFBQVEsQ0FBQ3JCLENBQUFBLHVCQUFBQSxPQUFPc0IsWUFBWSxjQUFuQnRCLGtDQUFBQSx1QkFBdUIsS0FBSztnQkFDMUNDO1lBQTlCVyxrQkFBa0JaLE9BQU9tQixHQUFHLEVBQUVsQixDQUFBQSx1QkFBQUEsMEJBQUFBLG9DQUFBQSxhQUFlLENBQUMsRUFBRSxDQUFDc0IsSUFBSSxjQUF2QnRCLGtDQUFBQSx1QkFBMkI7WUFDekQ7UUFDRjtRQUVBTSxnQkFBZ0I7WUFDZEQ7WUFDQVE7WUFDQVUsUUFBUXZCLDBCQUFBQSwyQkFBQUEsZ0JBQWlCLEVBQUU7UUFDN0I7UUFFQSxNQUFNUSxhQUFxQ00sWUFDdkM7WUFBRVUsVUFBVW5CO1lBQVlvQixTQUFTO1FBQU8sSUFDeEM7WUFBRUQsVUFBVW5CO1FBQVc7UUFDM0IsTUFBTXFCLGNBQWMxQiwwQkFBQUEscUNBQUFBLGdDQUFBQSxhQUFlLENBQUMsRUFBRSxDQUFDMkIsYUFBYSxjQUFoQzNCLG9EQUFBQSw2QkFBa0MsQ0FBQyxFQUFFO1FBQ3pELElBQUkwQixhQUFhO1lBQ2ZsQixXQUFXb0IsRUFBRSxHQUFHQyxLQUFLQyxTQUFTLENBQUNKO1FBQ2pDO1FBRUFqQixjQUFjRDtJQUNoQjtJQUVBLHFCQUNFLHFCQUFDdUIsa0NBQWE7UUFDWkMsY0FBYyxDQUFDeEIsV0FBV2dCLFFBQVE7UUFDbEMxQixXQUFXQTtRQUNYQyxRQUFRQTtRQUNSRyxTQUFTYTtRQUNUa0IsTUFBTWxDLE9BQU9rQyxJQUFJO1FBQ2pCaEMsSUFBSUE7O0FBR1YifQ==