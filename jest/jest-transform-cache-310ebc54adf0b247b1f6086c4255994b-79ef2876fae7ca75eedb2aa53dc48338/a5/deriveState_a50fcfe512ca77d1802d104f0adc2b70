7c8a48dda3cfe35ad57244d9c4f3d8aa
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/deriveState.ts
var deriveState_exports = {};
__export(deriveState_exports, {
    deriveState: ()=>deriveState
});
module.exports = __toCommonJS(deriveState_exports);
var deriveState = (clerkLoaded, state, initialState)=>{
    if (!clerkLoaded && initialState) {
        return deriveFromSsrInitialState(initialState);
    }
    return deriveFromClientSideState(state);
};
var deriveFromSsrInitialState = (initialState)=>{
    const userId = initialState.userId;
    const user = initialState.user;
    const sessionId = initialState.sessionId;
    const session = initialState.session;
    const organization = initialState.organization;
    const orgId = initialState.orgId;
    const orgRole = initialState.orgRole;
    const orgPermissions = initialState.orgPermissions;
    const orgSlug = initialState.orgSlug;
    const actor = initialState.actor;
    const factorVerificationAge = initialState.factorVerificationAge;
    return {
        userId,
        user,
        sessionId,
        session,
        organization,
        orgId,
        orgRole,
        orgPermissions,
        orgSlug,
        actor,
        factorVerificationAge
    };
};
var deriveFromClientSideState = (state)=>{
    var _user_organizationMemberships;
    const userId = state.user ? state.user.id : state.user;
    const user = state.user;
    const sessionId = state.session ? state.session.id : state.session;
    const session = state.session;
    const factorVerificationAge = state.session ? state.session.factorVerificationAge : null;
    const actor = session === null || session === void 0 ? void 0 : session.actor;
    const organization = state.organization;
    const orgId = state.organization ? state.organization.id : state.organization;
    const orgSlug = organization === null || organization === void 0 ? void 0 : organization.slug;
    const membership = organization ? user === null || user === void 0 ? void 0 : (_user_organizationMemberships = user.organizationMemberships) === null || _user_organizationMemberships === void 0 ? void 0 : _user_organizationMemberships.find((om)=>om.organization.id === orgId) : organization;
    const orgPermissions = membership ? membership.permissions : membership;
    const orgRole = membership ? membership.role : membership;
    return {
        userId,
        user,
        sessionId,
        session,
        organization,
        orgId,
        orgRole,
        orgSlug,
        orgPermissions,
        actor,
        factorVerificationAge
    };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    deriveState
}); //# sourceMappingURL=deriveState.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXJpdmVTdGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEFjdGl2ZVNlc3Npb25SZXNvdXJjZSxcbiAgSW5pdGlhbFN0YXRlLFxuICBPcmdhbml6YXRpb25DdXN0b21QZXJtaXNzaW9uS2V5LFxuICBPcmdhbml6YXRpb25DdXN0b21Sb2xlS2V5LFxuICBPcmdhbml6YXRpb25SZXNvdXJjZSxcbiAgUmVzb3VyY2VzLFxuICBVc2VyUmVzb3VyY2UsXG59IGZyb20gJ0BjbGVyay90eXBlcyc7XG5cbi8qKlxuICogRGVyaXZlcyBhdXRoZW50aWNhdGlvbiBzdGF0ZSBiYXNlZCBvbiB0aGUgY3VycmVudCByZW5kZXJpbmcgY29udGV4dCAoU1NSIG9yIGNsaWVudC1zaWRlKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlcml2ZVN0YXRlID0gKGNsZXJrTG9hZGVkOiBib29sZWFuLCBzdGF0ZTogUmVzb3VyY2VzLCBpbml0aWFsU3RhdGU6IEluaXRpYWxTdGF0ZSB8IHVuZGVmaW5lZCkgPT4ge1xuICBpZiAoIWNsZXJrTG9hZGVkICYmIGluaXRpYWxTdGF0ZSkge1xuICAgIHJldHVybiBkZXJpdmVGcm9tU3NySW5pdGlhbFN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIGRlcml2ZUZyb21DbGllbnRTaWRlU3RhdGUoc3RhdGUpO1xufTtcblxuY29uc3QgZGVyaXZlRnJvbVNzckluaXRpYWxTdGF0ZSA9IChpbml0aWFsU3RhdGU6IEluaXRpYWxTdGF0ZSkgPT4ge1xuICBjb25zdCB1c2VySWQgPSBpbml0aWFsU3RhdGUudXNlcklkO1xuICBjb25zdCB1c2VyID0gaW5pdGlhbFN0YXRlLnVzZXIgYXMgVXNlclJlc291cmNlO1xuICBjb25zdCBzZXNzaW9uSWQgPSBpbml0aWFsU3RhdGUuc2Vzc2lvbklkO1xuICBjb25zdCBzZXNzaW9uID0gaW5pdGlhbFN0YXRlLnNlc3Npb24gYXMgQWN0aXZlU2Vzc2lvblJlc291cmNlO1xuICBjb25zdCBvcmdhbml6YXRpb24gPSBpbml0aWFsU3RhdGUub3JnYW5pemF0aW9uIGFzIE9yZ2FuaXphdGlvblJlc291cmNlO1xuICBjb25zdCBvcmdJZCA9IGluaXRpYWxTdGF0ZS5vcmdJZDtcbiAgY29uc3Qgb3JnUm9sZSA9IGluaXRpYWxTdGF0ZS5vcmdSb2xlIGFzIE9yZ2FuaXphdGlvbkN1c3RvbVJvbGVLZXk7XG4gIGNvbnN0IG9yZ1Blcm1pc3Npb25zID0gaW5pdGlhbFN0YXRlLm9yZ1Blcm1pc3Npb25zIGFzIE9yZ2FuaXphdGlvbkN1c3RvbVBlcm1pc3Npb25LZXlbXTtcbiAgY29uc3Qgb3JnU2x1ZyA9IGluaXRpYWxTdGF0ZS5vcmdTbHVnO1xuICBjb25zdCBhY3RvciA9IGluaXRpYWxTdGF0ZS5hY3RvcjtcbiAgY29uc3QgZmFjdG9yVmVyaWZpY2F0aW9uQWdlID0gaW5pdGlhbFN0YXRlLmZhY3RvclZlcmlmaWNhdGlvbkFnZTtcblxuICByZXR1cm4ge1xuICAgIHVzZXJJZCxcbiAgICB1c2VyLFxuICAgIHNlc3Npb25JZCxcbiAgICBzZXNzaW9uLFxuICAgIG9yZ2FuaXphdGlvbixcbiAgICBvcmdJZCxcbiAgICBvcmdSb2xlLFxuICAgIG9yZ1Blcm1pc3Npb25zLFxuICAgIG9yZ1NsdWcsXG4gICAgYWN0b3IsXG4gICAgZmFjdG9yVmVyaWZpY2F0aW9uQWdlLFxuICB9O1xufTtcblxuY29uc3QgZGVyaXZlRnJvbUNsaWVudFNpZGVTdGF0ZSA9IChzdGF0ZTogUmVzb3VyY2VzKSA9PiB7XG4gIGNvbnN0IHVzZXJJZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHN0YXRlLnVzZXIgPyBzdGF0ZS51c2VyLmlkIDogc3RhdGUudXNlcjtcbiAgY29uc3QgdXNlciA9IHN0YXRlLnVzZXI7XG4gIGNvbnN0IHNlc3Npb25JZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHN0YXRlLnNlc3Npb24gPyBzdGF0ZS5zZXNzaW9uLmlkIDogc3RhdGUuc2Vzc2lvbjtcbiAgY29uc3Qgc2Vzc2lvbiA9IHN0YXRlLnNlc3Npb247XG4gIGNvbnN0IGZhY3RvclZlcmlmaWNhdGlvbkFnZTogW251bWJlciwgbnVtYmVyXSB8IG51bGwgPSBzdGF0ZS5zZXNzaW9uID8gc3RhdGUuc2Vzc2lvbi5mYWN0b3JWZXJpZmljYXRpb25BZ2UgOiBudWxsO1xuICBjb25zdCBhY3RvciA9IHNlc3Npb24/LmFjdG9yO1xuICBjb25zdCBvcmdhbml6YXRpb24gPSBzdGF0ZS5vcmdhbml6YXRpb247XG4gIGNvbnN0IG9yZ0lkOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkID0gc3RhdGUub3JnYW5pemF0aW9uID8gc3RhdGUub3JnYW5pemF0aW9uLmlkIDogc3RhdGUub3JnYW5pemF0aW9uO1xuICBjb25zdCBvcmdTbHVnID0gb3JnYW5pemF0aW9uPy5zbHVnO1xuICBjb25zdCBtZW1iZXJzaGlwID0gb3JnYW5pemF0aW9uXG4gICAgPyB1c2VyPy5vcmdhbml6YXRpb25NZW1iZXJzaGlwcz8uZmluZChvbSA9PiBvbS5vcmdhbml6YXRpb24uaWQgPT09IG9yZ0lkKVxuICAgIDogb3JnYW5pemF0aW9uO1xuICBjb25zdCBvcmdQZXJtaXNzaW9ucyA9IG1lbWJlcnNoaXAgPyBtZW1iZXJzaGlwLnBlcm1pc3Npb25zIDogbWVtYmVyc2hpcDtcbiAgY29uc3Qgb3JnUm9sZSA9IG1lbWJlcnNoaXAgPyBtZW1iZXJzaGlwLnJvbGUgOiBtZW1iZXJzaGlwO1xuXG4gIHJldHVybiB7XG4gICAgdXNlcklkLFxuICAgIHVzZXIsXG4gICAgc2Vzc2lvbklkLFxuICAgIHNlc3Npb24sXG4gICAgb3JnYW5pemF0aW9uLFxuICAgIG9yZ0lkLFxuICAgIG9yZ1JvbGUsXG4gICAgb3JnU2x1ZyxcbiAgICBvcmdQZXJtaXNzaW9ucyxcbiAgICBhY3RvcixcbiAgICBmYWN0b3JWZXJpZmljYXRpb25BZ2UsXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbImRlcml2ZVN0YXRlX2V4cG9ydHMiLCJfX2V4cG9ydCIsImRlcml2ZVN0YXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fdG9Db21tb25KUyIsImNsZXJrTG9hZGVkIiwic3RhdGUiLCJpbml0aWFsU3RhdGUiLCJkZXJpdmVGcm9tU3NySW5pdGlhbFN0YXRlIiwiZGVyaXZlRnJvbUNsaWVudFNpZGVTdGF0ZSIsInVzZXJJZCIsInVzZXIiLCJzZXNzaW9uSWQiLCJzZXNzaW9uIiwib3JnYW5pemF0aW9uIiwib3JnSWQiLCJvcmdSb2xlIiwib3JnUGVybWlzc2lvbnMiLCJvcmdTbHVnIiwiYWN0b3IiLCJmYWN0b3JWZXJpZmljYXRpb25BZ2UiLCJpZCIsInNsdWciLCJtZW1iZXJzaGlwIiwib3JnYW5pemF0aW9uTWVtYmVyc2hpcHMiLCJmaW5kIiwib20iLCJwZXJtaXNzaW9ucyIsInJvbGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsc0JBQUEsQ0FBQTtBQUFBQyxTQUFBRCxxQkFBQTtJQUFBRSxhQUFBLElBQUFBO0FBQUE7QUFBQUMsT0FBQUMsT0FBQSxHQUFBQyxhQUFBTDtBQWFPLElBQU1FLGNBQWMsQ0FBQ0ksYUFBc0JDLE9BQWtCQztJQUNsRSxJQUFJLENBQUNGLGVBQWVFLGNBQWM7UUFDaEMsT0FBT0MsMEJBQTBCRDtJQUNuQztJQUNBLE9BQU9FLDBCQUEwQkg7QUFDbkM7QUFFQSxJQUFNRSw0QkFBNEIsQ0FBQ0Q7SUFDakMsTUFBTUcsU0FBU0gsYUFBYUcsTUFBQTtJQUM1QixNQUFNQyxPQUFPSixhQUFhSSxJQUFBO0lBQzFCLE1BQU1DLFlBQVlMLGFBQWFLLFNBQUE7SUFDL0IsTUFBTUMsVUFBVU4sYUFBYU0sT0FBQTtJQUM3QixNQUFNQyxlQUFlUCxhQUFhTyxZQUFBO0lBQ2xDLE1BQU1DLFFBQVFSLGFBQWFRLEtBQUE7SUFDM0IsTUFBTUMsVUFBVVQsYUFBYVMsT0FBQTtJQUM3QixNQUFNQyxpQkFBaUJWLGFBQWFVLGNBQUE7SUFDcEMsTUFBTUMsVUFBVVgsYUFBYVcsT0FBQTtJQUM3QixNQUFNQyxRQUFRWixhQUFhWSxLQUFBO0lBQzNCLE1BQU1DLHdCQUF3QmIsYUFBYWEscUJBQUE7SUFFM0MsT0FBTztRQUNMVjtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFQSxJQUFNWCw0QkFBNEIsQ0FBQ0g7UUFXN0JLO0lBVkosTUFBTUQsU0FBb0NKLE1BQU1LLElBQUEsR0FBT0wsTUFBTUssSUFBQSxDQUFLVSxFQUFBLEdBQUtmLE1BQU1LLElBQUE7SUFDN0UsTUFBTUEsT0FBT0wsTUFBTUssSUFBQTtJQUNuQixNQUFNQyxZQUF1Q04sTUFBTU8sT0FBQSxHQUFVUCxNQUFNTyxPQUFBLENBQVFRLEVBQUEsR0FBS2YsTUFBTU8sT0FBQTtJQUN0RixNQUFNQSxVQUFVUCxNQUFNTyxPQUFBO0lBQ3RCLE1BQU1PLHdCQUFpRGQsTUFBTU8sT0FBQSxHQUFVUCxNQUFNTyxPQUFBLENBQVFPLHFCQUFBLEdBQXdCO0lBQzdHLE1BQU1ELFFBQVFOLG9CQUFBQSw4QkFBQUEsUUFBU00sS0FBQTtJQUN2QixNQUFNTCxlQUFlUixNQUFNUSxZQUFBO0lBQzNCLE1BQU1DLFFBQW1DVCxNQUFNUSxZQUFBLEdBQWVSLE1BQU1RLFlBQUEsQ0FBYU8sRUFBQSxHQUFLZixNQUFNUSxZQUFBO0lBQzVGLE1BQU1JLFVBQVVKLHlCQUFBQSxtQ0FBQUEsYUFBY1EsSUFBQTtJQUM5QixNQUFNQyxhQUFhVCxlQUNmSCxpQkFBQUEsNEJBQUFBLGdDQUFBQSxLQUFNYSx1QkFBQSxjQUFOYixvREFBQUEsOEJBQStCYyxJQUFBLENBQUssQ0FBQUMsS0FBTUEsR0FBR1osWUFBQSxDQUFhTyxFQUFBLEtBQU9OLFNBQ2pFRDtJQUNKLE1BQU1HLGlCQUFpQk0sYUFBYUEsV0FBV0ksV0FBQSxHQUFjSjtJQUM3RCxNQUFNUCxVQUFVTyxhQUFhQSxXQUFXSyxJQUFBLEdBQU9MO0lBRS9DLE9BQU87UUFDTGI7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQUQ7UUFDQUU7UUFDQUM7SUFDRjtBQUNGIn0=