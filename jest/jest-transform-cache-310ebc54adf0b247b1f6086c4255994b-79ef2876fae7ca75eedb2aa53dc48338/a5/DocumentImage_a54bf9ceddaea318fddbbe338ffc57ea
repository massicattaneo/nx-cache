c1a330b862890b62044c7fe0f36e1441
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentImage", {
    enumerable: true,
    get: function() {
        return DocumentImage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _documentimages = require("@rp/react/tanstack-api/document-images");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const DocumentImage = ({ documentId, externalContentUrl, onClick })=>{
    var _data_documentId_, _data_documentId;
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const { data, isLoading } = (0, _documentimages.useDocumentsImages)([
        documentId
    ]);
    const imgRef = (0, _react.useRef)(null);
    const [isLoaded, setIsLoaded] = (0, _react.useState)(false);
    const [hasImage, setHasImage] = (0, _react.useState)(false);
    var _data_documentId__replace;
    const imageUrl = (_data_documentId__replace = (_data_documentId = data[documentId]) === null || _data_documentId === void 0 ? void 0 : (_data_documentId_ = _data_documentId[0]) === null || _data_documentId_ === void 0 ? void 0 : _data_documentId_.replace("http://", "https://")) !== null && _data_documentId__replace !== void 0 ? _data_documentId__replace : undefined;
    (0, _react.useEffect)(()=>{
        if (!isLoading && imageUrl && imgRef.current) {
            imgRef.current.onload = ()=>{
                setHasImage(true);
                setIsLoaded(true);
            };
            imgRef.current.onerror = ()=>setIsLoaded(true);
            imgRef.current.src = imageUrl;
        } else if (!isLoading && !imageUrl) {
            setIsLoaded(true);
            setHasImage(false);
        }
    }, [
        imageUrl,
        isLoading
    ]);
    const height = isMobile ? "200px" : "350px";
    return !isLoaded || hasImage ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            overflow: "hidden",
            width: "100%",
            height,
            mb: 2,
            "& img": {
                borderRadius: "6px",
                width: "100%",
                height,
                objectFit: "cover"
            }
        },
        children: [
            !hasImage ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                height: height,
                sx: {
                    transform: "initial"
                }
            }) : null,
            externalContentUrl ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Link, {
                sx: {
                    display: hasImage ? "initial" : "none"
                },
                href: externalContentUrl,
                color: "primary",
                target: "_blank",
                underline: "hover",
                rel: "noopener",
                onClick: onClick,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                    ref: imgRef,
                    src: imageUrl,
                    alt: ""
                })
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ref: imgRef,
                src: imageUrl,
                alt: "",
                style: {
                    display: hasImage ? "initial" : "none"
                }
            })
        ]
    }) : null;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2RvY3VtZW50LXZpZXdlci9zcmMvbGliL0RvY3VtZW50SW1hZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VEb2N1bWVudHNJbWFnZXMgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9kb2N1bWVudC1pbWFnZXNcIlxuaW1wb3J0IHsgdXNlRGV2aWNlSW5mbyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyBCb3gsIExpbmssIFNrZWxldG9uIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG50eXBlIFByb3BzID0ge1xuICBkb2N1bWVudElkOiBzdHJpbmdcbiAgZXh0ZXJuYWxDb250ZW50VXJsPzogc3RyaW5nXG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkXG59XG5cbmNvbnN0IERvY3VtZW50SW1hZ2UgPSAoeyBkb2N1bWVudElkLCBleHRlcm5hbENvbnRlbnRVcmwsIG9uQ2xpY2sgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpc01vYmlsZSB9ID0gdXNlRGV2aWNlSW5mbygpXG4gIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nIH0gPSB1c2VEb2N1bWVudHNJbWFnZXMoW2RvY3VtZW50SWRdKVxuICBjb25zdCBpbWdSZWYgPSB1c2VSZWY8SFRNTEltYWdlRWxlbWVudCB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtpc0xvYWRlZCwgc2V0SXNMb2FkZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG4gIGNvbnN0IFtoYXNJbWFnZSwgc2V0SGFzSW1hZ2VdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpXG5cbiAgY29uc3QgaW1hZ2VVcmwgPSBkYXRhW2RvY3VtZW50SWRdPy5bMF0/LnJlcGxhY2UoXCJodHRwOi8vXCIsIFwiaHR0cHM6Ly9cIikgPz8gdW5kZWZpbmVkXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWlzTG9hZGluZyAmJiBpbWFnZVVybCAmJiBpbWdSZWYuY3VycmVudCkge1xuICAgICAgaW1nUmVmLmN1cnJlbnQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBzZXRIYXNJbWFnZSh0cnVlKVxuICAgICAgICBzZXRJc0xvYWRlZCh0cnVlKVxuICAgICAgfVxuICAgICAgaW1nUmVmLmN1cnJlbnQub25lcnJvciA9ICgpID0+IHNldElzTG9hZGVkKHRydWUpXG4gICAgICBpbWdSZWYuY3VycmVudC5zcmMgPSBpbWFnZVVybFxuICAgIH0gZWxzZSBpZiAoIWlzTG9hZGluZyAmJiAhaW1hZ2VVcmwpIHtcbiAgICAgIHNldElzTG9hZGVkKHRydWUpXG4gICAgICBzZXRIYXNJbWFnZShmYWxzZSlcbiAgICB9XG4gIH0sIFtpbWFnZVVybCwgaXNMb2FkaW5nXSlcblxuICBjb25zdCBoZWlnaHQgPSBpc01vYmlsZSA/IFwiMjAwcHhcIiA6IFwiMzUwcHhcIlxuXG4gIHJldHVybiAhaXNMb2FkZWQgfHwgaGFzSW1hZ2UgPyAoXG4gICAgPEJveFxuICAgICAgc3g9e3tcbiAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBtYjogMixcbiAgICAgICAgXCImIGltZ1wiOiB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjZweFwiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgb2JqZWN0Rml0OiBcImNvdmVyXCIsXG4gICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIHshaGFzSW1hZ2UgPyA8U2tlbGV0b24gaGVpZ2h0PXtoZWlnaHR9IHN4PXt7IHRyYW5zZm9ybTogXCJpbml0aWFsXCIgfX0gLz4gOiBudWxsfVxuICAgICAge2V4dGVybmFsQ29udGVudFVybCA/IChcbiAgICAgICAgPExpbmtcbiAgICAgICAgICBzeD17eyBkaXNwbGF5OiBoYXNJbWFnZSA/IFwiaW5pdGlhbFwiIDogXCJub25lXCIgfX1cbiAgICAgICAgICBocmVmPXtleHRlcm5hbENvbnRlbnRVcmx9XG4gICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIHVuZGVybGluZT1cImhvdmVyXCJcbiAgICAgICAgICByZWw9XCJub29wZW5lclwiXG4gICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgPlxuICAgICAgICAgIDxpbWcgcmVmPXtpbWdSZWZ9IHNyYz17aW1hZ2VVcmx9IGFsdD17XCJcIn0gLz5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgKSA6IChcbiAgICAgICAgPGltZ1xuICAgICAgICAgIHJlZj17aW1nUmVmfVxuICAgICAgICAgIHNyYz17aW1hZ2VVcmx9XG4gICAgICAgICAgYWx0PXtcIlwifVxuICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6IGhhc0ltYWdlID8gXCJpbml0aWFsXCIgOiBcIm5vbmVcIiB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKSA6IG51bGxcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnRJbWFnZSB9XG4iXSwibmFtZXMiOlsiRG9jdW1lbnRJbWFnZSIsImRvY3VtZW50SWQiLCJleHRlcm5hbENvbnRlbnRVcmwiLCJvbkNsaWNrIiwiZGF0YSIsImlzTW9iaWxlIiwidXNlRGV2aWNlSW5mbyIsImlzTG9hZGluZyIsInVzZURvY3VtZW50c0ltYWdlcyIsImltZ1JlZiIsInVzZVJlZiIsImlzTG9hZGVkIiwic2V0SXNMb2FkZWQiLCJ1c2VTdGF0ZSIsImhhc0ltYWdlIiwic2V0SGFzSW1hZ2UiLCJpbWFnZVVybCIsInJlcGxhY2UiLCJ1bmRlZmluZWQiLCJ1c2VFZmZlY3QiLCJjdXJyZW50Iiwib25sb2FkIiwib25lcnJvciIsInNyYyIsImhlaWdodCIsIkJveCIsInN4Iiwib3ZlcmZsb3ciLCJ3aWR0aCIsIm1iIiwiYm9yZGVyUmFkaXVzIiwib2JqZWN0Rml0IiwiU2tlbGV0b24iLCJ0cmFuc2Zvcm0iLCJMaW5rIiwiZGlzcGxheSIsImhyZWYiLCJjb2xvciIsInRhcmdldCIsInVuZGVybGluZSIsInJlbCIsImltZyIsInJlZiIsImFsdCIsInN0eWxlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBNEVTQTs7O2VBQUFBOzs7O3VCQTVFbUM7Z0NBQ1Q7dUJBQ0w7c0JBQ007QUFRcEMsTUFBTUEsZ0JBQWdCLENBQUMsRUFBRUMsVUFBVSxFQUFFQyxrQkFBa0IsRUFBRUMsT0FBTyxFQUFTO1FBT3REQyxtQkFBQUE7SUFOakIsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsSUFBQUEsb0JBQWE7SUFDbEMsTUFBTSxFQUFFRixJQUFJLEVBQUVHLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSxrQ0FBa0IsRUFBQztRQUFDUDtLQUFXO0lBQzNELE1BQU1RLFNBQVNDLElBQUFBLGFBQU0sRUFBMEI7SUFDL0MsTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUdDLElBQUFBLGVBQVEsRUFBVTtJQUNsRCxNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR0YsSUFBQUEsZUFBUSxFQUFVO1FBRWpDVDtJQUFqQixNQUFNWSxXQUFXWixDQUFBQSw2QkFBQUEsbUJBQUFBLElBQUksQ0FBQ0gsV0FBVyxjQUFoQkcsd0NBQUFBLG9CQUFBQSxnQkFBa0IsQ0FBQyxFQUFFLGNBQXJCQSx3Q0FBQUEsa0JBQXVCYSxPQUFPLENBQUMsV0FBVyx5QkFBMUNiLHVDQUFBQSw0QkFBeURjO0lBRTFFQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSSxDQUFDWixhQUFhUyxZQUFZUCxPQUFPVyxPQUFPLEVBQUU7WUFDNUNYLE9BQU9XLE9BQU8sQ0FBQ0MsTUFBTSxHQUFHO2dCQUN0Qk4sWUFBWTtnQkFDWkgsWUFBWTtZQUNkO1lBQ0FILE9BQU9XLE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLElBQU1WLFlBQVk7WUFDM0NILE9BQU9XLE9BQU8sQ0FBQ0csR0FBRyxHQUFHUDtRQUN2QixPQUFPLElBQUksQ0FBQ1QsYUFBYSxDQUFDUyxVQUFVO1lBQ2xDSixZQUFZO1lBQ1pHLFlBQVk7UUFDZDtJQUNGLEdBQUc7UUFBQ0M7UUFBVVQ7S0FBVTtJQUV4QixNQUFNaUIsU0FBU25CLFdBQVcsVUFBVTtJQUVwQyxPQUFPLENBQUNNLFlBQVlHLHlCQUNsQixzQkFBQ1csU0FBRztRQUNGQyxJQUFJO1lBQ0ZDLFVBQVU7WUFDVkMsT0FBTztZQUNQSjtZQUNBSyxJQUFJO1lBQ0osU0FBUztnQkFDUEMsY0FBYztnQkFDZEYsT0FBTztnQkFDUEo7Z0JBQ0FPLFdBQVc7WUFDYjtRQUNGOztZQUVDLENBQUNqQix5QkFBVyxxQkFBQ2tCLGNBQVE7Z0JBQUNSLFFBQVFBO2dCQUFRRSxJQUFJO29CQUFFTyxXQUFXO2dCQUFVO2lCQUFRO1lBQ3pFL0IsbUNBQ0MscUJBQUNnQyxVQUFJO2dCQUNIUixJQUFJO29CQUFFUyxTQUFTckIsV0FBVyxZQUFZO2dCQUFPO2dCQUM3Q3NCLE1BQU1sQztnQkFDTm1DLE9BQU07Z0JBQ05DLFFBQU87Z0JBQ1BDLFdBQVU7Z0JBQ1ZDLEtBQUk7Z0JBQ0pyQyxTQUFTQTswQkFFVCxjQUFBLHFCQUFDc0M7b0JBQUlDLEtBQUtqQztvQkFBUWMsS0FBS1A7b0JBQVUyQixLQUFLOzsrQkFHeEMscUJBQUNGO2dCQUNDQyxLQUFLakM7Z0JBQ0xjLEtBQUtQO2dCQUNMMkIsS0FBSztnQkFDTEMsT0FBTztvQkFBRVQsU0FBU3JCLFdBQVcsWUFBWTtnQkFBTzs7O1NBSXBEO0FBQ04ifQ==