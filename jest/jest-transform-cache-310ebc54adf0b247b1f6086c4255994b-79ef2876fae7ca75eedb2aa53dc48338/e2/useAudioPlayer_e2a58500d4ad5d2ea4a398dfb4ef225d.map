{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/base-components/src/AudioPlayer/useAudioPlayer.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\"\nimport { AudioPlayerInterface } from \"./audioPlayer.types\"\nimport {\n  closeAudioPlayerControls,\n  createOnTimeUpdateAudioPlayer,\n  initializeAudioPlayer,\n  pauseAudioPlayer,\n  playAudioPlayer,\n} from \"./audioPlayer.utils\"\n\ntype UseAudioPlayerProps = {\n  url: string | undefined\n}\n\ntype UseAudioPlayerState = AudioPlayerInterface\n\nconst useAudioPlayer = ({ url }: UseAudioPlayerProps): UseAudioPlayerState => {\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [duration, setDuration] = useState(0)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [areControlsVisible, setAreControlsVisible] = useState(false)\n\n  useEffect(() => initializeAudioPlayer(url, audio, setAudio), [audio, url])\n\n  useEffect(() => {\n    if (!audio) return\n\n    audio.ontimeupdate = createOnTimeUpdateAudioPlayer(audio, setCurrentTime, setDuration, duration)\n  }, [audio, duration, areControlsVisible])\n\n  const play = useCallback(\n    () => playAudioPlayer(audio, setIsPlaying, setAreControlsVisible),\n    [audio],\n  )\n  const pause = useCallback(() => pauseAudioPlayer(audio, setIsPlaying), [audio])\n  const closeControls = useCallback(\n    () => closeAudioPlayerControls(audio, setIsPlaying, setAreControlsVisible),\n    [audio],\n  )\n\n  const updateCurrentTime = useCallback(\n    (newCurrentTime: number) => {\n      if (!audio) return\n\n      setCurrentTime(Math.round(newCurrentTime))\n      audio.currentTime = newCurrentTime\n    },\n    [audio],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (!audio) return\n\n      setCurrentTime(0)\n      setIsPlaying(false)\n      setDuration(0)\n      setAreControlsVisible(false)\n      audio.pause()\n      setAudio(null)\n    }\n  }, [audio])\n\n  return {\n    closeControls,\n    currentTime,\n    duration,\n    areControlsVisible,\n    isPlaying,\n    pause,\n    audio,\n    play,\n    updateCurrentTime,\n  }\n}\n\nexport { useAudioPlayer }\nexport type { UseAudioPlayerState, UseAudioPlayerProps }\n"],"names":["useAudioPlayer","url","audio","setAudio","useState","currentTime","setCurrentTime","duration","setDuration","isPlaying","setIsPlaying","areControlsVisible","setAreControlsVisible","useEffect","initializeAudioPlayer","ontimeupdate","createOnTimeUpdateAudioPlayer","play","useCallback","playAudioPlayer","pause","pauseAudioPlayer","closeControls","closeAudioPlayerControls","updateCurrentTime","newCurrentTime","Math","round"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA6ESA;;;eAAAA;;;uBA7EwC;kCAQ1C;AAQP,MAAMA,iBAAiB,CAAC,EAAEC,GAAG,EAAuB;IAClD,MAAM,CAACC,OAAOC,SAAS,GAAGC,IAAAA,eAAQ,EAA0B;IAC5D,MAAM,CAACC,aAAaC,eAAe,GAAGF,IAAAA,eAAQ,EAAC;IAC/C,MAAM,CAACG,UAAUC,YAAY,GAAGJ,IAAAA,eAAQ,EAAC;IACzC,MAAM,CAACK,WAAWC,aAAa,GAAGN,IAAAA,eAAQ,EAAC;IAC3C,MAAM,CAACO,oBAAoBC,sBAAsB,GAAGR,IAAAA,eAAQ,EAAC;IAE7DS,IAAAA,gBAAS,EAAC,IAAMC,IAAAA,uCAAqB,EAACb,KAAKC,OAAOC,WAAW;QAACD;QAAOD;KAAI;IAEzEY,IAAAA,gBAAS,EAAC;QACR,IAAI,CAACX,OAAO;QAEZA,MAAMa,YAAY,GAAGC,IAAAA,+CAA6B,EAACd,OAAOI,gBAAgBE,aAAaD;IACzF,GAAG;QAACL;QAAOK;QAAUI;KAAmB;IAExC,MAAMM,OAAOC,IAAAA,kBAAW,EACtB,IAAMC,IAAAA,iCAAe,EAACjB,OAAOQ,cAAcE,wBAC3C;QAACV;KAAM;IAET,MAAMkB,QAAQF,IAAAA,kBAAW,EAAC,IAAMG,IAAAA,kCAAgB,EAACnB,OAAOQ,eAAe;QAACR;KAAM;IAC9E,MAAMoB,gBAAgBJ,IAAAA,kBAAW,EAC/B,IAAMK,IAAAA,0CAAwB,EAACrB,OAAOQ,cAAcE,wBACpD;QAACV;KAAM;IAGT,MAAMsB,oBAAoBN,IAAAA,kBAAW,EACnC,CAACO;QACC,IAAI,CAACvB,OAAO;QAEZI,eAAeoB,KAAKC,KAAK,CAACF;QAC1BvB,MAAMG,WAAW,GAAGoB;IACtB,GACA;QAACvB;KAAM;IAGTW,IAAAA,gBAAS,EAAC;QACR,OAAO;YACL,IAAI,CAACX,OAAO;YAEZI,eAAe;YACfI,aAAa;YACbF,YAAY;YACZI,sBAAsB;YACtBV,MAAMkB,KAAK;YACXjB,SAAS;QACX;IACF,GAAG;QAACD;KAAM;IAEV,OAAO;QACLoB;QACAjB;QACAE;QACAI;QACAF;QACAW;QACAlB;QACAe;QACAO;IACF;AACF"}