d11c51ee9df2b07e06d3188e553a8f3b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCopyResource", {
    enumerable: true,
    get: function() {
        return useCopyResource;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _Snackbar = require("./Snackbar");
const useCopyResource = ({ mutateAsync, infoMessage = "You can't make changes to a Public Resource.", errorMessage = "We're sorry, but copying the resource couldn't be completed due to a network issue.", onSuccess })=>{
    const [isCopying, setIsCopying] = (0, _react.useState)(false);
    const { enqueueInfo, enqueueError, closeSnackbar } = (0, _Snackbar.useSnackbar)();
    const lastSnackbar = (0, _react.useRef)(null);
    const clickDisabled = (0, _react.useRef)(false);
    const copyResource = (0, _react.useCallback)(async (newResource)=>{
        try {
            if (clickDisabled.current) {
                return;
            }
            clickDisabled.current = true;
            setIsCopying(true);
            const data = await mutateAsync(newResource);
            lastSnackbar.current && closeSnackbar(lastSnackbar.current);
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);
            setIsCopying(false);
        } catch (e) {
            enqueueError(errorMessage);
            setIsCopying(false);
        }
    }, [
        closeSnackbar,
        enqueueError,
        errorMessage,
        mutateAsync,
        onSuccess
    ]);
    const showSnackbar = (0, _react.useCallback)((newResource)=>{
        clickDisabled.current = false;
        lastSnackbar.current && closeSnackbar(lastSnackbar.current);
        lastSnackbar.current = enqueueInfo(/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ButtonBase, {
            onClick: ()=>copyResource(newResource),
            sx: {
                textAlign: "left"
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                variant: "body2",
                children: [
                    infoMessage,
                    " ",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        fontWeight: 700,
                        variant: "body2",
                        component: "span",
                        children: "Click here to make a copy."
                    })
                ]
            })
        }), {
            autoHideDuration: null
        });
    }, [
        closeSnackbar,
        copyResource,
        enqueueInfo,
        infoMessage
    ]);
    return {
        showSnackbar,
        isCopying
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL3VzZUNvcHlSZXNvdXJjZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgQnV0dG9uQmFzZSwgVHlwb2dyYXBoeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IHVzZVNuYWNrYmFyIH0gZnJvbSBcIi4vU25hY2tiYXJcIlxuXG50eXBlIENvcHlSZXNvdXJjZVBhcmFtczxUPiA9IHtcbiAgbXV0YXRlQXN5bmM6IChuZXdSZXNvdXJjZTogVCkgPT4gUHJvbWlzZTxUICYgeyBpZDogc3RyaW5nIH0+XG4gIGluZm9NZXNzYWdlPzogc3RyaW5nXG4gIGVycm9yTWVzc2FnZT86IHN0cmluZ1xuICBvblN1Y2Nlc3M/OiAobmV3UmVzb3VyY2U6IFQgJiB7IGlkOiBzdHJpbmcgfSkgPT4gdm9pZFxufVxuXG5jb25zdCB1c2VDb3B5UmVzb3VyY2UgPSA8VCw+KHtcbiAgbXV0YXRlQXN5bmMsXG4gIGluZm9NZXNzYWdlID0gXCJZb3UgY2FuJ3QgbWFrZSBjaGFuZ2VzIHRvIGEgUHVibGljIFJlc291cmNlLlwiLFxuICBlcnJvck1lc3NhZ2UgPSBcIldlJ3JlIHNvcnJ5LCBidXQgY29weWluZyB0aGUgcmVzb3VyY2UgY291bGRuJ3QgYmUgY29tcGxldGVkIGR1ZSB0byBhIG5ldHdvcmsgaXNzdWUuXCIsXG4gIG9uU3VjY2Vzcyxcbn06IENvcHlSZXNvdXJjZVBhcmFtczxUPikgPT4ge1xuICBjb25zdCBbaXNDb3B5aW5nLCBzZXRJc0NvcHlpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgZW5xdWV1ZUluZm8sIGVucXVldWVFcnJvciwgY2xvc2VTbmFja2JhciB9ID0gdXNlU25hY2tiYXIoKVxuICBjb25zdCBsYXN0U25hY2tiYXIgPSB1c2VSZWY8c3RyaW5nIHwgbnVtYmVyIHwgbnVsbD4obnVsbClcbiAgY29uc3QgY2xpY2tEaXNhYmxlZCA9IHVzZVJlZihmYWxzZSlcblxuICBjb25zdCBjb3B5UmVzb3VyY2UgPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAobmV3UmVzb3VyY2U6IFQpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChjbGlja0Rpc2FibGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjbGlja0Rpc2FibGVkLmN1cnJlbnQgPSB0cnVlXG4gICAgICAgIHNldElzQ29weWluZyh0cnVlKVxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgbXV0YXRlQXN5bmMobmV3UmVzb3VyY2UpXG4gICAgICAgIGxhc3RTbmFja2Jhci5jdXJyZW50ICYmIGNsb3NlU25hY2tiYXIobGFzdFNuYWNrYmFyLmN1cnJlbnQpXG4gICAgICAgIG9uU3VjY2Vzcz8uKGRhdGEpXG4gICAgICAgIHNldElzQ29weWluZyhmYWxzZSlcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICBlbnF1ZXVlRXJyb3IoZXJyb3JNZXNzYWdlKVxuICAgICAgICBzZXRJc0NvcHlpbmcoZmFsc2UpXG4gICAgICB9XG4gICAgfSxcbiAgICBbY2xvc2VTbmFja2JhciwgZW5xdWV1ZUVycm9yLCBlcnJvck1lc3NhZ2UsIG11dGF0ZUFzeW5jLCBvblN1Y2Nlc3NdLFxuICApXG5cbiAgY29uc3Qgc2hvd1NuYWNrYmFyID0gdXNlQ2FsbGJhY2soXG4gICAgKG5ld1Jlc291cmNlOiBUKSA9PiB7XG4gICAgICBjbGlja0Rpc2FibGVkLmN1cnJlbnQgPSBmYWxzZVxuICAgICAgbGFzdFNuYWNrYmFyLmN1cnJlbnQgJiYgY2xvc2VTbmFja2JhcihsYXN0U25hY2tiYXIuY3VycmVudClcbiAgICAgIGxhc3RTbmFja2Jhci5jdXJyZW50ID0gZW5xdWV1ZUluZm8oXG4gICAgICAgIDxCdXR0b25CYXNlIG9uQ2xpY2s9eygpID0+IGNvcHlSZXNvdXJjZShuZXdSZXNvdXJjZSl9IHN4PXt7IHRleHRBbGlnbjogXCJsZWZ0XCIgfX0+XG4gICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCI+XG4gICAgICAgICAgICB7aW5mb01lc3NhZ2V9e1wiIFwifVxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgZm9udFdlaWdodD17NzAwfSB2YXJpYW50PVwiYm9keTJcIiBjb21wb25lbnQ9XCJzcGFuXCI+XG4gICAgICAgICAgICAgIENsaWNrIGhlcmUgdG8gbWFrZSBhIGNvcHkuXG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8L0J1dHRvbkJhc2U+LFxuICAgICAgICB7IGF1dG9IaWRlRHVyYXRpb246IG51bGwgfSxcbiAgICAgIClcbiAgICB9LFxuICAgIFtjbG9zZVNuYWNrYmFyLCBjb3B5UmVzb3VyY2UsIGVucXVldWVJbmZvLCBpbmZvTWVzc2FnZV0sXG4gIClcblxuICByZXR1cm4geyBzaG93U25hY2tiYXIsIGlzQ29weWluZyB9XG59XG5cbmV4cG9ydCB7IHVzZUNvcHlSZXNvdXJjZSB9XG4iXSwibmFtZXMiOlsidXNlQ29weVJlc291cmNlIiwibXV0YXRlQXN5bmMiLCJpbmZvTWVzc2FnZSIsImVycm9yTWVzc2FnZSIsIm9uU3VjY2VzcyIsImlzQ29weWluZyIsInNldElzQ29weWluZyIsInVzZVN0YXRlIiwiZW5xdWV1ZUluZm8iLCJlbnF1ZXVlRXJyb3IiLCJjbG9zZVNuYWNrYmFyIiwidXNlU25hY2tiYXIiLCJsYXN0U25hY2tiYXIiLCJ1c2VSZWYiLCJjbGlja0Rpc2FibGVkIiwiY29weVJlc291cmNlIiwidXNlQ2FsbGJhY2siLCJuZXdSZXNvdXJjZSIsImN1cnJlbnQiLCJkYXRhIiwic2hvd1NuYWNrYmFyIiwiQnV0dG9uQmFzZSIsIm9uQ2xpY2siLCJzeCIsInRleHRBbGlnbiIsIlR5cG9ncmFwaHkiLCJ2YXJpYW50IiwiZm9udFdlaWdodCIsImNvbXBvbmVudCIsImF1dG9IaWRlRHVyYXRpb24iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWdFU0E7OztlQUFBQTs7Ozt1QkFoRXFDO3NCQUNQOzBCQUNYO0FBUzVCLE1BQU1BLGtCQUFrQixDQUFLLEVBQzNCQyxXQUFXLEVBQ1hDLGNBQWMsOENBQThDLEVBQzVEQyxlQUFlLHFGQUFxRixFQUNwR0MsU0FBUyxFQUNhO0lBQ3RCLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDM0MsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLFlBQVksRUFBRUMsYUFBYSxFQUFFLEdBQUdDLElBQUFBLHFCQUFXO0lBQ2hFLE1BQU1DLGVBQWVDLElBQUFBLGFBQU0sRUFBeUI7SUFDcEQsTUFBTUMsZ0JBQWdCRCxJQUFBQSxhQUFNLEVBQUM7SUFFN0IsTUFBTUUsZUFBZUMsSUFBQUEsa0JBQVcsRUFDOUIsT0FBT0M7UUFDTCxJQUFJO1lBQ0YsSUFBSUgsY0FBY0ksT0FBTyxFQUFFO2dCQUN6QjtZQUNGO1lBQ0FKLGNBQWNJLE9BQU8sR0FBRztZQUN4QlosYUFBYTtZQUNiLE1BQU1hLE9BQU8sTUFBTWxCLFlBQVlnQjtZQUMvQkwsYUFBYU0sT0FBTyxJQUFJUixjQUFjRSxhQUFhTSxPQUFPO1lBQzFEZCxzQkFBQUEsZ0NBQUFBLFVBQVllO1lBQ1piLGFBQWE7UUFDZixFQUFFLFVBQU07WUFDTkcsYUFBYU47WUFDYkcsYUFBYTtRQUNmO0lBQ0YsR0FDQTtRQUFDSTtRQUFlRDtRQUFjTjtRQUFjRjtRQUFhRztLQUFVO0lBR3JFLE1BQU1nQixlQUFlSixJQUFBQSxrQkFBVyxFQUM5QixDQUFDQztRQUNDSCxjQUFjSSxPQUFPLEdBQUc7UUFDeEJOLGFBQWFNLE9BQU8sSUFBSVIsY0FBY0UsYUFBYU0sT0FBTztRQUMxRE4sYUFBYU0sT0FBTyxHQUFHViwwQkFDckIscUJBQUNhLGdCQUFVO1lBQUNDLFNBQVMsSUFBTVAsYUFBYUU7WUFBY00sSUFBSTtnQkFBRUMsV0FBVztZQUFPO3NCQUM1RSxjQUFBLHNCQUFDQyxnQkFBVTtnQkFBQ0MsU0FBUTs7b0JBQ2pCeEI7b0JBQWE7a0NBQ2QscUJBQUN1QixnQkFBVTt3QkFBQ0UsWUFBWTt3QkFBS0QsU0FBUTt3QkFBUUUsV0FBVTtrQ0FBTzs7OztZQUtsRTtZQUFFQyxrQkFBa0I7UUFBSztJQUU3QixHQUNBO1FBQUNuQjtRQUFlSztRQUFjUDtRQUFhTjtLQUFZO0lBR3pELE9BQU87UUFBRWtCO1FBQWNmO0lBQVU7QUFDbkMifQ==