{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/providers/src/useCopyResource.tsx"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\"\nimport { ButtonBase, Typography } from \"@rp/react/web/mui/core\"\nimport { useSnackbar } from \"./Snackbar\"\n\ntype CopyResourceParams<T> = {\n  mutateAsync: (newResource: T) => Promise<T & { id: string }>\n  infoMessage?: string\n  errorMessage?: string\n  onSuccess?: (newResource: T & { id: string }) => void\n}\n\nconst useCopyResource = <T,>({\n  mutateAsync,\n  infoMessage = \"You can't make changes to a Public Resource.\",\n  errorMessage = \"We're sorry, but copying the resource couldn't be completed due to a network issue.\",\n  onSuccess,\n}: CopyResourceParams<T>) => {\n  const [isCopying, setIsCopying] = useState(false)\n  const { enqueueInfo, enqueueError, closeSnackbar } = useSnackbar()\n  const lastSnackbar = useRef<string | number | null>(null)\n  const clickDisabled = useRef(false)\n\n  const copyResource = useCallback(\n    async (newResource: T) => {\n      try {\n        if (clickDisabled.current) {\n          return\n        }\n        clickDisabled.current = true\n        setIsCopying(true)\n        const data = await mutateAsync(newResource)\n        lastSnackbar.current && closeSnackbar(lastSnackbar.current)\n        onSuccess?.(data)\n        setIsCopying(false)\n      } catch {\n        enqueueError(errorMessage)\n        setIsCopying(false)\n      }\n    },\n    [closeSnackbar, enqueueError, errorMessage, mutateAsync, onSuccess],\n  )\n\n  const showSnackbar = useCallback(\n    (newResource: T) => {\n      clickDisabled.current = false\n      lastSnackbar.current && closeSnackbar(lastSnackbar.current)\n      lastSnackbar.current = enqueueInfo(\n        <ButtonBase onClick={() => copyResource(newResource)} sx={{ textAlign: \"left\" }}>\n          <Typography variant=\"body2\">\n            {infoMessage}{\" \"}\n            <Typography fontWeight={700} variant=\"body2\" component=\"span\">\n              Click here to make a copy.\n            </Typography>\n          </Typography>\n        </ButtonBase>,\n        { autoHideDuration: null },\n      )\n    },\n    [closeSnackbar, copyResource, enqueueInfo, infoMessage],\n  )\n\n  return { showSnackbar, isCopying }\n}\n\nexport { useCopyResource }\n"],"names":["useCopyResource","mutateAsync","infoMessage","errorMessage","onSuccess","isCopying","setIsCopying","useState","enqueueInfo","enqueueError","closeSnackbar","useSnackbar","lastSnackbar","useRef","clickDisabled","copyResource","useCallback","newResource","current","data","showSnackbar","ButtonBase","onClick","sx","textAlign","Typography","variant","fontWeight","component","autoHideDuration"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgESA;;;eAAAA;;;;uBAhEqC;sBACP;0BACX;AAS5B,MAAMA,kBAAkB,CAAK,EAC3BC,WAAW,EACXC,cAAc,8CAA8C,EAC5DC,eAAe,qFAAqF,EACpGC,SAAS,EACa;IACtB,MAAM,CAACC,WAAWC,aAAa,GAAGC,IAAAA,eAAQ,EAAC;IAC3C,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,aAAa,EAAE,GAAGC,IAAAA,qBAAW;IAChE,MAAMC,eAAeC,IAAAA,aAAM,EAAyB;IACpD,MAAMC,gBAAgBD,IAAAA,aAAM,EAAC;IAE7B,MAAME,eAAeC,IAAAA,kBAAW,EAC9B,OAAOC;QACL,IAAI;YACF,IAAIH,cAAcI,OAAO,EAAE;gBACzB;YACF;YACAJ,cAAcI,OAAO,GAAG;YACxBZ,aAAa;YACb,MAAMa,OAAO,MAAMlB,YAAYgB;YAC/BL,aAAaM,OAAO,IAAIR,cAAcE,aAAaM,OAAO;YAC1Dd,sBAAAA,gCAAAA,UAAYe;YACZb,aAAa;QACf,EAAE,UAAM;YACNG,aAAaN;YACbG,aAAa;QACf;IACF,GACA;QAACI;QAAeD;QAAcN;QAAcF;QAAaG;KAAU;IAGrE,MAAMgB,eAAeJ,IAAAA,kBAAW,EAC9B,CAACC;QACCH,cAAcI,OAAO,GAAG;QACxBN,aAAaM,OAAO,IAAIR,cAAcE,aAAaM,OAAO;QAC1DN,aAAaM,OAAO,GAAGV,0BACrB,qBAACa,gBAAU;YAACC,SAAS,IAAMP,aAAaE;YAAcM,IAAI;gBAAEC,WAAW;YAAO;sBAC5E,cAAA,sBAACC,gBAAU;gBAACC,SAAQ;;oBACjBxB;oBAAa;kCACd,qBAACuB,gBAAU;wBAACE,YAAY;wBAAKD,SAAQ;wBAAQE,WAAU;kCAAO;;;;YAKlE;YAAEC,kBAAkB;QAAK;IAE7B,GACA;QAACnB;QAAeK;QAAcP;QAAaN;KAAY;IAGzD,OAAO;QAAEkB;QAAcf;IAAU;AACnC"}