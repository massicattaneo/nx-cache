97377cba59edbfffc6d4f350a5272f11
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useWatchlistUploadModal", {
    enumerable: true,
    get: function() {
        return useWatchlistUploadModal;
    }
});
const _react = require("react");
const _customerio = require("@rp/react/common/customer-io");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const useWatchlistUploadModal = (watchlistId)=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    const [isUploading, setIsUploading] = (0, _react.useState)(false);
    const { mutateAsync: upload, error, reset } = (0, _suggestion.useWatchlistBatchUpload)({
        onError: (error)=>{
            _customerio.watchlistCustomerIo.uploadModal.sendError(watchlistId, error);
        }
    });
    const openModal = (0, _react.useCallback)(()=>{
        reset();
        setUploadedData(null);
        setIsOpen((wasOpen)=>{
            if (!wasOpen) {
                _customerio.watchlistCustomerIo.uploadModal.setTimestamp("open");
            }
            return true;
        });
    }, [
        reset
    ]);
    const [uploadedData, setUploadedData] = (0, _react.useState)(null);
    const onSubmitFiles = (0, _react.useCallback)((files)=>{
        if (files.length === 0) return;
        const [file] = files;
        openModal();
        setIsUploading(true);
        _customerio.watchlistCustomerIo.uploadModal.setTimestamp("startUpload");
        upload({
            file
        }).then((data)=>{
            _customerio.watchlistCustomerIo.uploadModal.setTimestamp("endUpload");
            setUploadedData(data);
        }).finally(()=>{
            setIsUploading(false);
        });
    }, [
        openModal,
        upload
    ]);
    return {
        onSubmitFiles,
        uploadedData,
        openModal,
        setIsOpen,
        isOpen,
        isUploading,
        error
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9ob29rcy91c2VXYXRjaGxpc3RVcGxvYWRNb2RhbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHdhdGNobGlzdEN1c3RvbWVySW8gfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9jdXN0b21lci1pb1wiXG5pbXBvcnQge1xuICBXYXRjaGxpc3RCYXRjaFN1Z2dlc3Rpb25Qb3N0UmVzcG9uc2VFeHRlbmRlZCxcbiAgdXNlV2F0Y2hsaXN0QmF0Y2hVcGxvYWQsXG59IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3N1Z2dlc3Rpb25cIlxuXG5leHBvcnQgY29uc3QgdXNlV2F0Y2hsaXN0VXBsb2FkTW9kYWwgPSAod2F0Y2hsaXN0SWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtpc1VwbG9hZGluZywgc2V0SXNVcGxvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHtcbiAgICBtdXRhdGVBc3luYzogdXBsb2FkLFxuICAgIGVycm9yLFxuICAgIHJlc2V0LFxuICB9ID0gdXNlV2F0Y2hsaXN0QmF0Y2hVcGxvYWQoe1xuICAgIG9uRXJyb3I6IGVycm9yID0+IHtcbiAgICAgIHdhdGNobGlzdEN1c3RvbWVySW8udXBsb2FkTW9kYWwuc2VuZEVycm9yKHdhdGNobGlzdElkLCBlcnJvcilcbiAgICB9LFxuICB9KVxuXG4gIGNvbnN0IG9wZW5Nb2RhbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXNldCgpXG4gICAgc2V0VXBsb2FkZWREYXRhKG51bGwpXG4gICAgc2V0SXNPcGVuKHdhc09wZW4gPT4ge1xuICAgICAgaWYgKCF3YXNPcGVuKSB7XG4gICAgICAgIHdhdGNobGlzdEN1c3RvbWVySW8udXBsb2FkTW9kYWwuc2V0VGltZXN0YW1wKFwib3BlblwiKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KVxuICB9LCBbcmVzZXRdKVxuXG4gIGNvbnN0IFt1cGxvYWRlZERhdGEsIHNldFVwbG9hZGVkRGF0YV0gPVxuICAgIHVzZVN0YXRlPFdhdGNobGlzdEJhdGNoU3VnZ2VzdGlvblBvc3RSZXNwb25zZUV4dGVuZGVkIHwgbnVsbD4obnVsbClcbiAgY29uc3Qgb25TdWJtaXRGaWxlcyA9IHVzZUNhbGxiYWNrKFxuICAgIChmaWxlczogQXJyYXk8RmlsZT4pID0+IHtcbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHJldHVyblxuICAgICAgY29uc3QgW2ZpbGVdID0gZmlsZXNcbiAgICAgIG9wZW5Nb2RhbCgpXG4gICAgICBzZXRJc1VwbG9hZGluZyh0cnVlKVxuICAgICAgd2F0Y2hsaXN0Q3VzdG9tZXJJby51cGxvYWRNb2RhbC5zZXRUaW1lc3RhbXAoXCJzdGFydFVwbG9hZFwiKVxuICAgICAgdXBsb2FkKHsgZmlsZSB9KVxuICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICB3YXRjaGxpc3RDdXN0b21lcklvLnVwbG9hZE1vZGFsLnNldFRpbWVzdGFtcChcImVuZFVwbG9hZFwiKVxuICAgICAgICAgIHNldFVwbG9hZGVkRGF0YShkYXRhKVxuICAgICAgICB9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgc2V0SXNVcGxvYWRpbmcoZmFsc2UpXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBbb3Blbk1vZGFsLCB1cGxvYWRdLFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBvblN1Ym1pdEZpbGVzLFxuICAgIHVwbG9hZGVkRGF0YSxcbiAgICBvcGVuTW9kYWwsXG4gICAgc2V0SXNPcGVuLFxuICAgIGlzT3BlbixcbiAgICBpc1VwbG9hZGluZyxcbiAgICBlcnJvcixcbiAgfVxufVxuIl0sIm5hbWVzIjpbInVzZVdhdGNobGlzdFVwbG9hZE1vZGFsIiwid2F0Y2hsaXN0SWQiLCJpc09wZW4iLCJzZXRJc09wZW4iLCJ1c2VTdGF0ZSIsImlzVXBsb2FkaW5nIiwic2V0SXNVcGxvYWRpbmciLCJtdXRhdGVBc3luYyIsInVwbG9hZCIsImVycm9yIiwicmVzZXQiLCJ1c2VXYXRjaGxpc3RCYXRjaFVwbG9hZCIsIm9uRXJyb3IiLCJ3YXRjaGxpc3RDdXN0b21lcklvIiwidXBsb2FkTW9kYWwiLCJzZW5kRXJyb3IiLCJvcGVuTW9kYWwiLCJ1c2VDYWxsYmFjayIsInNldFVwbG9hZGVkRGF0YSIsIndhc09wZW4iLCJzZXRUaW1lc3RhbXAiLCJ1cGxvYWRlZERhdGEiLCJvblN1Ym1pdEZpbGVzIiwiZmlsZXMiLCJsZW5ndGgiLCJmaWxlIiwidGhlbiIsImRhdGEiLCJmaW5hbGx5Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBT2FBOzs7ZUFBQUE7Ozt1QkFQeUI7NEJBQ0Y7NEJBSTdCO0FBRUEsTUFBTUEsMEJBQTBCLENBQUNDO0lBQ3RDLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDckMsTUFBTSxDQUFDQyxhQUFhQyxlQUFlLEdBQUdGLElBQUFBLGVBQVEsRUFBQztJQUMvQyxNQUFNLEVBQ0pHLGFBQWFDLE1BQU0sRUFDbkJDLEtBQUssRUFDTEMsS0FBSyxFQUNOLEdBQUdDLElBQUFBLG1DQUF1QixFQUFDO1FBQzFCQyxTQUFTSCxDQUFBQTtZQUNQSSwrQkFBbUIsQ0FBQ0MsV0FBVyxDQUFDQyxTQUFTLENBQUNkLGFBQWFRO1FBQ3pEO0lBQ0Y7SUFFQSxNQUFNTyxZQUFZQyxJQUFBQSxrQkFBVyxFQUFDO1FBQzVCUDtRQUNBUSxnQkFBZ0I7UUFDaEJmLFVBQVVnQixDQUFBQTtZQUNSLElBQUksQ0FBQ0EsU0FBUztnQkFDWk4sK0JBQW1CLENBQUNDLFdBQVcsQ0FBQ00sWUFBWSxDQUFDO1lBQy9DO1lBQ0EsT0FBTztRQUNUO0lBQ0YsR0FBRztRQUFDVjtLQUFNO0lBRVYsTUFBTSxDQUFDVyxjQUFjSCxnQkFBZ0IsR0FDbkNkLElBQUFBLGVBQVEsRUFBc0Q7SUFDaEUsTUFBTWtCLGdCQUFnQkwsSUFBQUEsa0JBQVcsRUFDL0IsQ0FBQ007UUFDQyxJQUFJQSxNQUFNQyxNQUFNLEtBQUssR0FBRztRQUN4QixNQUFNLENBQUNDLEtBQUssR0FBR0Y7UUFDZlA7UUFDQVYsZUFBZTtRQUNmTywrQkFBbUIsQ0FBQ0MsV0FBVyxDQUFDTSxZQUFZLENBQUM7UUFDN0NaLE9BQU87WUFBRWlCO1FBQUssR0FDWEMsSUFBSSxDQUFDQyxDQUFBQTtZQUNKZCwrQkFBbUIsQ0FBQ0MsV0FBVyxDQUFDTSxZQUFZLENBQUM7WUFDN0NGLGdCQUFnQlM7UUFDbEIsR0FDQ0MsT0FBTyxDQUFDO1lBQ1B0QixlQUFlO1FBQ2pCO0lBQ0osR0FDQTtRQUFDVTtRQUFXUjtLQUFPO0lBR3JCLE9BQU87UUFDTGM7UUFDQUQ7UUFDQUw7UUFDQWI7UUFDQUQ7UUFDQUc7UUFDQUk7SUFDRjtBQUNGIn0=