{"version":3,"sources":["../../../src/actions/dragDrop/endDrag.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tDragDropManager,\n\tDragDropMonitor,\n\tSentinelAction,\n} from '../../interfaces.js'\nimport { END_DRAG } from './types.js'\n\nexport function createEndDrag(manager: DragDropManager) {\n\treturn function endDrag(): SentinelAction {\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\t\tverifyIsDragging(monitor)\n\n\t\tconst sourceId = monitor.getSourceId()\n\t\tif (sourceId != null) {\n\t\t\tconst source = registry.getSource(sourceId, true)\n\t\t\tsource.endDrag(monitor, sourceId)\n\t\t\tregistry.unpinSource()\n\t\t}\n\t\treturn { type: END_DRAG }\n\t}\n}\n\nfunction verifyIsDragging(monitor: DragDropMonitor) {\n\tinvariant(monitor.isDragging(), 'Cannot call endDrag while not dragging.')\n}\n"],"names":["createEndDrag","manager","endDrag","monitor","getMonitor","registry","getRegistry","verifyIsDragging","sourceId","getSourceId","source","getSource","unpinSource","type","END_DRAG","invariant","isDragging"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASgBA;;;eAAAA;;;2BATU;uBAOD;AAElB,SAASA,cAAcC,OAAwB;IACrD,OAAO,SAASC;QACf,MAAMC,UAAUF,QAAQG,UAAU;QAClC,MAAMC,WAAWJ,QAAQK,WAAW;QACpCC,iBAAiBJ;QAEjB,MAAMK,WAAWL,QAAQM,WAAW;QACpC,IAAID,YAAY,MAAM;YACrB,MAAME,SAASL,SAASM,SAAS,CAACH,UAAU;YAC5CE,OAAOR,OAAO,CAACC,SAASK;YACxBH,SAASO,WAAW;;QAErB,OAAO;YAAEC,MAAMC,eAAQ;;;;AAIzB,SAASP,iBAAiBJ,OAAwB;IACjDY,IAAAA,oBAAS,EAACZ,QAAQa,UAAU,IAAI"}