{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-util-resolve-all/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n"],"names":["resolveAll","constructs","events","context","called","index","length","resolve","includes","push"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;CAWC;;;;+BACeA;;;eAAAA;;;AAAT,SAASA,WAAWC,UAAU,EAAEC,MAAM,EAAEC,OAAO;IACpD,4BAA4B,GAC5B,MAAMC,SAAS,EAAE;IACjB,IAAIC,QAAQ,CAAC;IAEb,MAAO,EAAEA,QAAQJ,WAAWK,MAAM,CAAE;QAClC,MAAMC,UAAUN,UAAU,CAACI,MAAM,CAACL,UAAU;QAE5C,IAAIO,WAAW,CAACH,OAAOI,QAAQ,CAACD,UAAU;YACxCL,SAASK,QAAQL,QAAQC;YACzBC,OAAOK,IAAI,CAACF;QACd;IACF;IAEA,OAAOL;AACT"}