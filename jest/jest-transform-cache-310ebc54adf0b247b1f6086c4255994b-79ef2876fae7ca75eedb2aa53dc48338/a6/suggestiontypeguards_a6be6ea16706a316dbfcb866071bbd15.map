{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/suggestion/src/suggestion.type-guards.ts"],"sourcesContent":["import {\n  CompanySuggestion,\n  EnhancedCqsItemSuggestion,\n  EnhancedEntitySuggestion,\n  EnhancedMacroSearchSuggestion,\n  EnhancedSuggestion,\n  EnhancedSuggestionWithSubsidiaries,\n  EntitySuggestion,\n  KeywordSuggestion,\n  MacroSearchSuggestion,\n  RecentSearchSuggestion,\n  SavedSearchSuggestion,\n  Suggestion,\n} from \"./suggestion.types\"\n\nconst isMacroSearchSuggestion = (suggestion: Suggestion): suggestion is MacroSearchSuggestion => {\n  return \"groups\" in suggestion\n}\n\nconst isSavedSearchSuggestion = (\n  suggestion: EnhancedSuggestion,\n): suggestion is EnhancedSuggestion & SavedSearchSuggestion => {\n  return \"queryType\" in suggestion && suggestion.queryType === \"savedSearch\"\n}\n\nconst isSourceSuggestion = (\n  suggestion: EnhancedSuggestion,\n): suggestion is EnhancedSuggestion & EntitySuggestion => {\n  return \"queryType\" in suggestion && suggestion.queryType === \"source\"\n}\n\nconst isCompanySuggestion = (\n  suggestion: EnhancedSuggestion | EntitySuggestion,\n): suggestion is EnhancedSuggestion & CompanySuggestion => {\n  return \"category\" in suggestion && suggestion.category === \"Companies\"\n}\n\nconst isETFSuggestion = (\n  suggestion: EnhancedSuggestion,\n): suggestion is EnhancedSuggestion & CompanySuggestion => {\n  return \"category\" in suggestion && suggestion.category === \"ETFs\"\n}\n\nconst isEntitySuggestion = (\n  suggestion: EnhancedSuggestion | EntitySuggestion,\n): suggestion is EntitySuggestion => {\n  return \"entityType\" in suggestion\n}\n\nconst getEmptySuggestion = (key: string) => {\n  const empty: EnhancedSuggestion = {\n    key,\n    name: \"\",\n    typeDesc: \"\",\n    queryType: \"entity\",\n    entityType: \"\",\n    type: \"\",\n    label: \"\",\n    value: \"\",\n    id: \"\",\n  }\n  return empty\n}\n\nconst isEnhancedEntityAutoSuggestion = (\n  item: EnhancedSuggestion,\n): item is EnhancedEntitySuggestion => item.type === \"entity\"\nconst isEnhancedCqsItemSuggestion = (item: EnhancedSuggestion): item is EnhancedCqsItemSuggestion =>\n  \"queryType\" in item\nconst isEnhancedMacroAutoSuggestion = (\n  item: EnhancedSuggestion,\n): item is EnhancedMacroSearchSuggestion => item.type.startsWith(\"macro_\")\nconst isEnhancedSuggestionWithSubsidiaries = (\n  suggestion: EnhancedSuggestion | EnhancedSuggestionWithSubsidiaries,\n): suggestion is EnhancedSuggestionWithSubsidiaries => {\n  return Array.isArray((suggestion as EnhancedSuggestionWithSubsidiaries).subsidiaries)\n}\nconst isKeywordAutoSuggestion = (item: EnhancedSuggestion): item is KeywordSuggestion =>\n  item.type === \"keyword\"\nconst isRecentSearchAutoSuggestion = (item: EnhancedSuggestion): item is RecentSearchSuggestion =>\n  item.type === \"recent\"\n\nexport {\n  isMacroSearchSuggestion,\n  isCompanySuggestion,\n  isSourceSuggestion,\n  getEmptySuggestion,\n  isSavedSearchSuggestion,\n  isEnhancedEntityAutoSuggestion,\n  isEnhancedMacroAutoSuggestion,\n  isKeywordAutoSuggestion,\n  isRecentSearchAutoSuggestion,\n  isEnhancedCqsItemSuggestion,\n  isEnhancedSuggestionWithSubsidiaries,\n  isEntitySuggestion,\n  isETFSuggestion,\n}\n"],"names":["getEmptySuggestion","isCompanySuggestion","isETFSuggestion","isEnhancedCqsItemSuggestion","isEnhancedEntityAutoSuggestion","isEnhancedMacroAutoSuggestion","isEnhancedSuggestionWithSubsidiaries","isEntitySuggestion","isKeywordAutoSuggestion","isMacroSearchSuggestion","isRecentSearchAutoSuggestion","isSavedSearchSuggestion","isSourceSuggestion","suggestion","queryType","category","key","empty","name","typeDesc","entityType","type","label","value","id","item","startsWith","Array","isArray","subsidiaries"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAsFEA,kBAAkB;eAAlBA;;IAFAC,mBAAmB;eAAnBA;;IAWAC,eAAe;eAAfA;;IAHAC,2BAA2B;eAA3BA;;IAJAC,8BAA8B;eAA9BA;;IACAC,6BAA6B;eAA7BA;;IAIAC,oCAAoC;eAApCA;;IACAC,kBAAkB;eAAlBA;;IAJAC,uBAAuB;eAAvBA;;IAPAC,uBAAuB;eAAvBA;;IAQAC,4BAA4B;eAA5BA;;IAJAC,uBAAuB;eAAvBA;;IAFAC,kBAAkB;eAAlBA;;;AAtEF,MAAMH,0BAA0B,CAACI;IAC/B,OAAO,YAAYA;AACrB;AAEA,MAAMF,0BAA0B,CAC9BE;IAEA,OAAO,eAAeA,cAAcA,WAAWC,SAAS,KAAK;AAC/D;AAEA,MAAMF,qBAAqB,CACzBC;IAEA,OAAO,eAAeA,cAAcA,WAAWC,SAAS,KAAK;AAC/D;AAEA,MAAMb,sBAAsB,CAC1BY;IAEA,OAAO,cAAcA,cAAcA,WAAWE,QAAQ,KAAK;AAC7D;AAEA,MAAMb,kBAAkB,CACtBW;IAEA,OAAO,cAAcA,cAAcA,WAAWE,QAAQ,KAAK;AAC7D;AAEA,MAAMR,qBAAqB,CACzBM;IAEA,OAAO,gBAAgBA;AACzB;AAEA,MAAMb,qBAAqB,CAACgB;IAC1B,MAAMC,QAA4B;QAChCD;QACAE,MAAM;QACNC,UAAU;QACVL,WAAW;QACXM,YAAY;QACZC,MAAM;QACNC,OAAO;QACPC,OAAO;QACPC,IAAI;IACN;IACA,OAAOP;AACT;AAEA,MAAMb,iCAAiC,CACrCqB,OACqCA,KAAKJ,IAAI,KAAK;AACrD,MAAMlB,8BAA8B,CAACsB,OACnC,eAAeA;AACjB,MAAMpB,gCAAgC,CACpCoB,OAC0CA,KAAKJ,IAAI,CAACK,UAAU,CAAC;AACjE,MAAMpB,uCAAuC,CAC3CO;IAEA,OAAOc,MAAMC,OAAO,CAAC,AAACf,WAAkDgB,YAAY;AACtF;AACA,MAAMrB,0BAA0B,CAACiB,OAC/BA,KAAKJ,IAAI,KAAK;AAChB,MAAMX,+BAA+B,CAACe,OACpCA,KAAKJ,IAAI,KAAK"}