{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-util-sanitize-uri/index.js"],"sourcesContent":["import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n"],"names":["normalizeUri","sanitizeUri","url","protocol","value","encode","colon","indexOf","questionMark","numberSign","slash","test","slice","result","index","start","skip","length","code","charCodeAt","replace","asciiAlphanumeric","String","fromCharCode","next","push","encodeURIComponent","join"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA2DgBA,YAAY;eAAZA;;IAnCAC,WAAW;eAAXA;;;wCAxBgB;qCACX;AAuBd,SAASA,YAAYC,GAAG,EAAEC,QAAQ;IACvC,MAAMC,QAAQC,IAAAA,2BAAM,EAACL,aAAaE,OAAO;IACzC,IAAI,CAACC,UAAU;QACb,OAAOC;IACT;IACA,MAAME,QAAQF,MAAMG,OAAO,CAAC;IAC5B,MAAMC,eAAeJ,MAAMG,OAAO,CAAC;IACnC,MAAME,aAAaL,MAAMG,OAAO,CAAC;IACjC,MAAMG,QAAQN,MAAMG,OAAO,CAAC;IAC5B,IACE,0CAA0C;IAC1CD,QAAQ,KACR,uEAAuE;IACtEI,QAAQ,CAAC,KAAKJ,QAAQI,SACtBF,eAAe,CAAC,KAAKF,QAAQE,gBAC7BC,aAAa,CAAC,KAAKH,QAAQG,cAC5B,0CAA0C;IAC1CN,SAASQ,IAAI,CAACP,MAAMQ,KAAK,CAAC,GAAGN,SAC7B;QACA,OAAOF;IACT;IACA,OAAO;AACT;AAaO,SAASJ,aAAaI,KAAK;IAChC,0BAA0B,GAC1B,MAAMS,SAAS,EAAE;IACjB,IAAIC,QAAQ,CAAC;IACb,IAAIC,QAAQ;IACZ,IAAIC,OAAO;IACX,MAAO,EAAEF,QAAQV,MAAMa,MAAM,CAAE;QAC7B,MAAMC,OAAOd,MAAMe,UAAU,CAACL;QAC9B,mBAAmB,GACnB,IAAIM,UAAU;QAEd,mCAAmC;QACnC,IACEF,SAAS,MACTG,IAAAA,yCAAiB,EAACjB,MAAMe,UAAU,CAACL,QAAQ,OAC3CO,IAAAA,yCAAiB,EAACjB,MAAMe,UAAU,CAACL,QAAQ,KAC3C;YACAE,OAAO;QACT,OAEK,IAAIE,OAAO,KAAK;YACnB,IAAI,CAAC,oBAAoBP,IAAI,CAACW,OAAOC,YAAY,CAACL,QAAQ;gBACxDE,UAAUE,OAAOC,YAAY,CAACL;YAChC;QACF,OAEK,IAAIA,OAAO,SAAUA,OAAO,OAAQ;YACvC,MAAMM,OAAOpB,MAAMe,UAAU,CAACL,QAAQ;YAEtC,4BAA4B;YAC5B,IAAII,OAAO,SAAUM,OAAO,SAAUA,OAAO,OAAQ;gBACnDJ,UAAUE,OAAOC,YAAY,CAACL,MAAMM;gBACpCR,OAAO;YACT,OAEK;gBACHI,UAAU;YACZ;QACF,OAEK;YACHA,UAAUE,OAAOC,YAAY,CAACL;QAChC;QACA,IAAIE,SAAS;YACXP,OAAOY,IAAI,CAACrB,MAAMQ,KAAK,CAACG,OAAOD,QAAQY,mBAAmBN;YAC1DL,QAAQD,QAAQE,OAAO;YACvBI,UAAU;QACZ;QACA,IAAIJ,MAAM;YACRF,SAASE;YACTA,OAAO;QACT;IACF;IACA,OAAOH,OAAOc,IAAI,CAAC,MAAMvB,MAAMQ,KAAK,CAACG;AACvC"}