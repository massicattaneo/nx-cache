{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/hooks/src/lib/useSuggestedPrompts/usePrompts.ts"],"sourcesContent":["import { adapters } from \"@rp/adapters\"\nimport { SuggestedPromptFile } from \"@rp/common/api-types\"\nimport { environment } from \"@rp/common/environment\"\nimport { SUGGESTED_PROMPTS_PATH } from \"@rp/common/settings\"\nimport { AsyncStorageKeys } from \"@rp/common/utils\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { PromptFile } from \"./suggestedPrompts.types\"\n\nconst SUGGESTED_PROMPTS_TIMEOUT = 5000\nconst native = adapters.name === \"native\"\n\nconst requestSuggestedPrompts = async () => {\n  const { storeDataAsyncStorage, getDataAsyncStorage } = adapters.asyncStorage\n  if (!native)\n    return (await axiosClient.get(`${environment.webAppUrl}${SUGGESTED_PROMPTS_PATH}`)).data\n\n  return await axiosClient\n    .get(`${environment.webAppUrl}${SUGGESTED_PROMPTS_PATH}`, {\n      timeout: SUGGESTED_PROMPTS_TIMEOUT,\n    })\n    .then(async res => {\n      await storeDataAsyncStorage(AsyncStorageKeys.SUGGESTED_PROMPTS, JSON.stringify(res.data))\n      return res.data as PromptFile\n    })\n    .catch(async () => {\n      const data = await getDataAsyncStorage(AsyncStorageKeys.SUGGESTED_PROMPTS)\n      if (!data) return import(\"./suggestedData.json\")\n      return JSON.parse(data)\n    })\n}\n\nconst usePrompts = () => {\n  return useQuery({\n    queryKey: [\"suggestedPrompts\"],\n    queryFn: async () => {\n      const data: PromptFile =\n        adapters.isLocalEnv() && native\n          ? await import(\"./suggestedData.json\")\n          : await requestSuggestedPrompts()\n      const result = SuggestedPromptFile.safeParse(data)\n      //TODO: this should probably return something for native??\n      return result.success ? result.data : undefined\n    },\n    staleTime: 12 * 60 * 60 * 1000,\n    placeholderData: data => data,\n  })\n}\n\nexport { usePrompts }\n"],"names":["usePrompts","SUGGESTED_PROMPTS_TIMEOUT","native","adapters","name","requestSuggestedPrompts","storeDataAsyncStorage","getDataAsyncStorage","asyncStorage","axiosClient","get","environment","webAppUrl","SUGGESTED_PROMPTS_PATH","data","timeout","then","res","AsyncStorageKeys","SUGGESTED_PROMPTS","JSON","stringify","catch","parse","useQuery","queryKey","queryFn","isLocalEnv","result","SuggestedPromptFile","safeParse","success","undefined","staleTime","placeholderData"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAiDSA;;;eAAAA;;;0BAjDgB;0BACW;6BACR;0BACW;uBACN;6BACL;4BACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGzB,MAAMC,4BAA4B;AAClC,MAAMC,SAASC,kBAAQ,CAACC,IAAI,KAAK;AAEjC,MAAMC,0BAA0B;IAC9B,MAAM,EAAEC,qBAAqB,EAAEC,mBAAmB,EAAE,GAAGJ,kBAAQ,CAACK,YAAY;IAC5E,IAAI,CAACN,QACH,OAAO,AAAC,CAAA,MAAMO,wBAAW,CAACC,GAAG,CAAC,CAAC,EAAEC,wBAAW,CAACC,SAAS,CAAC,EAAEC,gCAAsB,CAAC,CAAC,CAAA,EAAGC,IAAI;IAE1F,OAAO,MAAML,wBAAW,CACrBC,GAAG,CAAC,CAAC,EAAEC,wBAAW,CAACC,SAAS,CAAC,EAAEC,gCAAsB,CAAC,CAAC,EAAE;QACxDE,SAASd;IACX,GACCe,IAAI,CAAC,OAAMC;QACV,MAAMX,sBAAsBY,uBAAgB,CAACC,iBAAiB,EAAEC,KAAKC,SAAS,CAACJ,IAAIH,IAAI;QACvF,OAAOG,IAAIH,IAAI;IACjB,GACCQ,KAAK,CAAC;QACL,MAAMR,OAAO,MAAMP,oBAAoBW,uBAAgB,CAACC,iBAAiB;QACzE,IAAI,CAACL,MAAM,OAAO,mEAAA,QAAO;QACzB,OAAOM,KAAKG,KAAK,CAACT;IACpB;AACJ;AAEA,MAAMd,aAAa;IACjB,OAAOwB,IAAAA,oBAAQ,EAAC;QACdC,UAAU;YAAC;SAAmB;QAC9BC,SAAS;YACP,MAAMZ,OACJX,kBAAQ,CAACwB,UAAU,MAAMzB,SACrB,MAAM,mEAAA,QAAO,4BACb,MAAMG;YACZ,MAAMuB,SAASC,6BAAmB,CAACC,SAAS,CAAChB;YAC7C,0DAA0D;YAC1D,OAAOc,OAAOG,OAAO,GAAGH,OAAOd,IAAI,GAAGkB;QACxC;QACAC,WAAW,KAAK,KAAK,KAAK;QAC1BC,iBAAiBpB,CAAAA,OAAQA;IAC3B;AACF"}