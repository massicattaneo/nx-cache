8563f308727cd51fdcf82e77cce04c54
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getUpdateFilter: function() {
        return getUpdateFilter;
    },
    updateFilterInMap: function() {
        return updateFilterInMap;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const getUpdateFilter = (filter)=>{
    const { id: _id } = filter, rest = _object_without_properties(filter, [
        "id"
    ]);
    return rest;
};
function updateFilterInMap(filterMap, filter, update) {
    if (filter === null) return {
        error: "Attempting to update non-existant filter",
        map: filterMap
    };
    const updateFilter = getUpdateFilter(filter);
    const newFilterContent = typeof update === "function" ? update(updateFilter) : update;
    const newFilter = _object_spread({
        id: filter.id
    }, newFilterContent)// TODO: enforce specific flat filter type
    ;
    const map = _object_spread_props(_object_spread({}, filterMap), {
        [filter.id]: newFilter
    });
    return {
        map
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvcnBxbC9zcmMvbGliL3JwcWwtdXRpbHMvdXBkYXRlRmlsdGVySW5NYXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnBxbEZpbHRlck1hcCwgUnBxbEZsYXRGaWx0ZXIgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuXG50eXBlIFVwZGF0ZTxURmlsdGVyPiA9IE9taXQ8VEZpbHRlciwgXCJpZFwiPlxuZXhwb3J0IHR5cGUgVXBkYXRlU2lnbmF0dXJlPFRGaWx0ZXI+ID0gVXBkYXRlPFRGaWx0ZXI+IHwgKChhOiBVcGRhdGU8VEZpbHRlcj4pID0+IFVwZGF0ZTxURmlsdGVyPilcblxuZXhwb3J0IGNvbnN0IGdldFVwZGF0ZUZpbHRlciA9IDxURmlsdGVyIGV4dGVuZHMgUnBxbEZsYXRGaWx0ZXI+KFxuICBmaWx0ZXI6IFRGaWx0ZXIsXG4pOiBVcGRhdGU8VEZpbHRlcj4gPT4ge1xuICBjb25zdCB7IGlkOiBfaWQsIC4uLnJlc3QgfSA9IGZpbHRlclxuICByZXR1cm4gcmVzdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRmlsdGVySW5NYXA8VEZpbHRlciBleHRlbmRzIFJwcWxGbGF0RmlsdGVyID0gUnBxbEZsYXRGaWx0ZXI+KFxuICBmaWx0ZXJNYXA6IFJwcWxGaWx0ZXJNYXAsXG4gIGZpbHRlcjogVEZpbHRlciB8IG51bGwsXG4gIHVwZGF0ZTogVXBkYXRlU2lnbmF0dXJlPFRGaWx0ZXI+LFxuKSB7XG4gIGlmIChmaWx0ZXIgPT09IG51bGwpIHJldHVybiB7IGVycm9yOiBcIkF0dGVtcHRpbmcgdG8gdXBkYXRlIG5vbi1leGlzdGFudCBmaWx0ZXJcIiwgbWFwOiBmaWx0ZXJNYXAgfVxuXG4gIGNvbnN0IHVwZGF0ZUZpbHRlciA9IGdldFVwZGF0ZUZpbHRlcihmaWx0ZXIpXG5cbiAgY29uc3QgbmV3RmlsdGVyQ29udGVudCA9IHR5cGVvZiB1cGRhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHVwZGF0ZSh1cGRhdGVGaWx0ZXIpIDogdXBkYXRlXG4gIGNvbnN0IG5ld0ZpbHRlciA9IHtcbiAgICBpZDogZmlsdGVyLmlkLFxuICAgIC4uLm5ld0ZpbHRlckNvbnRlbnQsXG4gIH0gYXMgUnBxbEZsYXRGaWx0ZXIgLy8gVE9ETzogZW5mb3JjZSBzcGVjaWZpYyBmbGF0IGZpbHRlciB0eXBlXG5cbiAgY29uc3QgbWFwID0ge1xuICAgIC4uLmZpbHRlck1hcCxcbiAgICBbZmlsdGVyLmlkXTogbmV3RmlsdGVyLFxuICB9XG4gIHJldHVybiB7IG1hcCB9XG59XG4iXSwibmFtZXMiOlsiZ2V0VXBkYXRlRmlsdGVyIiwidXBkYXRlRmlsdGVySW5NYXAiLCJmaWx0ZXIiLCJpZCIsIl9pZCIsInJlc3QiLCJmaWx0ZXJNYXAiLCJ1cGRhdGUiLCJlcnJvciIsIm1hcCIsInVwZGF0ZUZpbHRlciIsIm5ld0ZpbHRlckNvbnRlbnQiLCJuZXdGaWx0ZXIiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUthQSxlQUFlO2VBQWZBOztJQU9HQyxpQkFBaUI7ZUFBakJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUFQsTUFBTUQsa0JBQWtCLENBQzdCRTtJQUVBLE1BQU0sRUFBRUMsSUFBSUMsR0FBRyxFQUFXLEdBQUdGLFFBQVRHLGtDQUFTSDtRQUFyQkM7O0lBQ1IsT0FBT0U7QUFDVDtBQUVPLFNBQVNKLGtCQUNkSyxTQUF3QixFQUN4QkosTUFBc0IsRUFDdEJLLE1BQWdDO0lBRWhDLElBQUlMLFdBQVcsTUFBTSxPQUFPO1FBQUVNLE9BQU87UUFBNENDLEtBQUtIO0lBQVU7SUFFaEcsTUFBTUksZUFBZVYsZ0JBQWdCRTtJQUVyQyxNQUFNUyxtQkFBbUIsT0FBT0osV0FBVyxhQUFhQSxPQUFPRyxnQkFBZ0JIO0lBQy9FLE1BQU1LLFlBQVk7UUFDaEJULElBQUlELE9BQU9DLEVBQUU7T0FDVlEsaUJBQ2UsMENBQTBDOztJQUU5RCxNQUFNRixNQUFNLHdDQUNQSDtRQUNILENBQUNKLE9BQU9DLEVBQUUsQ0FBQyxFQUFFUzs7SUFFZixPQUFPO1FBQUVIO0lBQUk7QUFDZiJ9