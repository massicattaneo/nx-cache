377975f0139c276323f809a80ed5ac3c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RpJsonToolbar", {
    enumerable: true,
    get: function() {
        return RpJsonToolbar;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactuse = require("react-use");
const _core = require("@rp/react/web/mui/core");
const _MarkSentencesButton = require("./MarkSentencesButton");
const _MatchesSelector = require("./MatchesSelector");
const _RpJsonToolbarstyles = require("./RpJsonToolbar.styles");
const _RpJsonToolbarAdornment = require("./RpJsonToolbarAdornment");
const _SearchRpJsonButton = require("./SearchRpJsonButton");
const _rpJsonToolbarUtils = require("./rpJsonToolbarUtils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
/**
 * The RpJsonToolbar that contains the form for searching, matching, viewing and navigating:
 * 1. Search strings
 * 2. Matches
 * 3. Sentences
 * 4. Entities and Events
 */ const RpJsonToolbar = (_param)=>{
    var { onChange, onArrowsClick, actions, matchesCount, currentMatch, areMatchesLoading, onMatchesChange, enableMatches = false, markSentences, foundCount, value, className = "", size = "small" } = _param, args = _object_without_properties(_param, [
        "onChange",
        "onArrowsClick",
        "actions",
        "matchesCount",
        "currentMatch",
        "areMatchesLoading",
        "onMatchesChange",
        "enableMatches",
        "markSentences",
        "foundCount",
        "value",
        "className",
        "size"
    ]);
    const [textValue, setTextValue] = (0, _react.useState)(value);
    const [arrowIndex, setArrowIndex] = (0, _react.useState)(1);
    const [isExpanded, setIsExpanded] = (0, _react.useState)(false);
    const [animation, setAnimation] = (0, _react.useState)(false);
    const ref = (0, _react.useRef)(null);
    const textRef = (0, _react.useRef)(null);
    const pixelSize = (0, _rpJsonToolbarUtils.getPixelSize)(size);
    (0, _react.useEffect)(()=>{
        if (arrowIndex > foundCount) setArrowIndex(1);
    }, [
        arrowIndex,
        foundCount,
        textValue
    ]);
    (0, _reactuse.useDebounce)(()=>{
        if (!onChange) {
            return;
        }
        if (!animation) {
            return onChange("");
        }
        return onChange(textValue);
    }, 100, [
        textValue,
        animation
    ]);
    const handleExpand = ()=>{
        setAnimation(true);
        setIsExpanded(true);
    };
    const handleCollapse = ()=>{
        setAnimation(false);
        setTimeout(()=>{
            setIsExpanded(false);
        }, 200);
    };
    const displayMatches = (0, _react.useMemo)(()=>areMatchesLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
            variant: "rectangular",
            width: 150,
            height: "100%"
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_MatchesSelector.MatchesSelector, {
            matchesCount: matchesCount,
            onSelectionChange: onMatchesChange,
            currentMatch: currentMatch
        }), [
        areMatchesLoading,
        matchesCount,
        onMatchesChange,
        currentMatch
    ]);
    const findBar = isExpanded ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Grid, {
        item: true,
        xs: true,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_RpJsonToolbarstyles.GrowingSearch, _object_spread({
            autoComplete: "off",
            ref: ref,
            autoFocus: true,
            visible: animation,
            "data-testid": "RpJsonToolbarTextField",
            inputRef: textRef,
            onKeyPress: (event)=>{
                if (event.key === "Enter") {
                    const index = (0, _rpJsonToolbarUtils.numberLoop)(foundCount, arrowIndex, 1);
                    setArrowIndex(index);
                    onArrowsClick(index);
                }
            },
            onChange: (event)=>{
                setTextValue(event.target.value);
            },
            onBlur: textValue === "" ? handleCollapse : undefined,
            fullWidth: true,
            size: size,
            value: textValue,
            InputProps: {
                style: {
                    height: pixelSize
                },
                startAdornment: /*#__PURE__*/ (0, _jsxruntime.jsx)(_RpJsonToolbarstyles.SearchIcon, {}),
                endAdornment: /*#__PURE__*/ (0, _jsxruntime.jsx)(_RpJsonToolbarAdornment.RpJsonToolBarAdornment, {
                    hasText: textValue.length > 0,
                    foundCount: foundCount,
                    onArrowsClick: (direction)=>{
                        const index = (0, _rpJsonToolbarUtils.numberLoop)(foundCount, arrowIndex, direction);
                        setArrowIndex(index);
                        onArrowsClick(index);
                    },
                    arrowIndex: arrowIndex,
                    onClose: handleCollapse,
                    textRef: textRef
                })
            },
            placeholder: "Find in document"
        }, args))
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_SearchRpJsonButton.SearchRpJsonButton, {
        size: size,
        onChange: handleExpand
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: className,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Grid, {
            container: true,
            columnSpacing: 1,
            justifyContent: "flex-end",
            children: [
                enableMatches && !(!areMatchesLoading && matchesCount === 0) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Grid, {
                    item: true,
                    xs: true,
                    children: displayMatches
                }) : null,
                onChange ? findBar : null,
                matchesCount && actions.toggleSentences ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Grid, {
                    item: true,
                    xs: "auto",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MarkSentencesButton.MarkSentencesButton, {
                        markSentences: markSentences,
                        size: size,
                        onChange: actions.toggleSentences
                    })
                }) : null
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,