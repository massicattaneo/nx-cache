{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistDataTabs/downloadTableCsv.ts"],"sourcesContent":["import { format } from \"date-fns\"\nimport { CqsItem } from \"@rp/common/api-types\"\nimport { INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL } from \"@rp/common/utils\"\nimport { useFinancialData } from \"@rp/react/tanstack-api/financial-data\"\nimport { downloadCSVFromMatrix } from \"@rp/react/web/common/utils\"\nimport { Column } from \"@tanstack/react-table\"\nimport { FinanceDataTabs } from \"../hooks/useWatchlistsFinanceDataTabNavigation\"\nimport { WatchlistDataTabsTableEntity } from \"./WatchlistDataTabsTable.types\"\n\n// Helper function to calculate percentage difference for CSV export\nfunction calculatePercentageDifference(row: WatchlistDataTabsTableEntity): number | undefined {\n  const targetConsensus = row.financialData?.companyPriceTarget?.data?.targetConsensus\n  const currentPrice = row.financialData?.companyQuote?.data?.price\n\n  if (targetConsensus && currentPrice && currentPrice !== 0) {\n    return ((targetConsensus - currentPrice) / currentPrice) * 100\n  }\n  return undefined\n}\n\ntype Props = {\n  columns: Array<Column<WatchlistDataTabsTableEntity, unknown>>\n  entities: Array<CqsItem>\n  financialData: ReturnType<typeof useFinancialData>\n  watchlistName: string\n  dataTab: FinanceDataTabs\n}\n\nfunction downloadTableCSV({ columns, entities, financialData, watchlistName, dataTab }: Props) {\n  const headers = columns.map(col => {\n    const label = col.columnDef.meta?.menuLabel ?? col.id\n    return `${label}`\n  })\n\n  const rows = entities.map(entityInfo => {\n    return columns.map(col => {\n      const row = {\n        id: entityInfo.key,\n        entityInfo,\n        financialData: financialData?.[entityInfo.key],\n      }\n\n      // Handle calculated columns that don't have direct API field mappings\n      const columnLabel = col.columnDef.meta?.menuLabel\n      if (columnLabel === \"% Difference\") {\n        return calculatePercentageDifference(row)?.toString()\n      }\n\n      // Handle columns that multiply by 100 for percentage display\n      const percentageMultiplierColumns = [\n        \"SBC to Revenue (LTM)\",\n        \"R&D intensity (LTM)\",\n        \"Capex/Sales (LTM)\",\n      ]\n\n      if (columnLabel && percentageMultiplierColumns.includes(columnLabel)) {\n        const rawValue = col.accessorFn?.(row, col.getIndex())\n        return rawValue ? (Number(rawValue) * 100).toString() : undefined\n      }\n\n      // Default behavior for regular columns\n      return col\n        .accessorFn?.(row, col.getIndex())\n        ?.toString()\n        .replace(INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL, \"\")\n    })\n  })\n\n  const filename = `${watchlistName}-${dataTab}-${format(Date.now(), \"yyyyMMdd\")}.csv`\n  downloadCSVFromMatrix({ headers, rows, filename })\n}\n\nexport { downloadTableCSV }\n"],"names":["downloadTableCSV","calculatePercentageDifference","row","targetConsensus","financialData","companyPriceTarget","data","currentPrice","companyQuote","price","undefined","columns","entities","watchlistName","dataTab","headers","map","col","label","columnDef","meta","menuLabel","id","rows","entityInfo","key","columnLabel","toString","percentageMultiplierColumns","includes","rawValue","accessorFn","getIndex","Number","replace","INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL","filename","format","Date","now","downloadCSVFromMatrix"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAwESA;;;eAAAA;;;yBAxEc;uBAE8B;wBAEf;AAKtC,oEAAoE;AACpE,SAASC,8BAA8BC,GAAiC;QAC9CA,4CAAAA,uCAAAA,oBACHA,sCAAAA,iCAAAA;IADrB,MAAMC,mBAAkBD,qBAAAA,IAAIE,aAAa,cAAjBF,0CAAAA,wCAAAA,mBAAmBG,kBAAkB,cAArCH,6DAAAA,6CAAAA,sCAAuCI,IAAI,cAA3CJ,iEAAAA,2CAA6CC,eAAe;IACpF,MAAMI,gBAAeL,sBAAAA,IAAIE,aAAa,cAAjBF,2CAAAA,kCAAAA,oBAAmBM,YAAY,cAA/BN,uDAAAA,uCAAAA,gCAAiCI,IAAI,cAArCJ,2DAAAA,qCAAuCO,KAAK;IAEjE,IAAIN,mBAAmBI,gBAAgBA,iBAAiB,GAAG;QACzD,OAAO,AAAEJ,CAAAA,kBAAkBI,YAAW,IAAKA,eAAgB;IAC7D;IACA,OAAOG;AACT;AAUA,SAASV,iBAAiB,EAAEW,OAAO,EAAEC,QAAQ,EAAER,aAAa,EAAES,aAAa,EAAEC,OAAO,EAAS;IAC3F,MAAMC,UAAUJ,QAAQK,GAAG,CAACC,CAAAA;YACZA;YAAAA;QAAd,MAAMC,QAAQD,CAAAA,iCAAAA,sBAAAA,IAAIE,SAAS,CAACC,IAAI,cAAlBH,0CAAAA,oBAAoBI,SAAS,cAA7BJ,2CAAAA,gCAAiCA,IAAIK,EAAE;QACrD,OAAO,CAAC,EAAEJ,MAAM,CAAC;IACnB;IAEA,MAAMK,OAAOX,SAASI,GAAG,CAACQ,CAAAA;QACxB,OAAOb,QAAQK,GAAG,CAACC,CAAAA;gBAQGA,qBAkBbA,iBAAAA;YAzBP,MAAMf,MAAM;gBACVoB,IAAIE,WAAWC,GAAG;gBAClBD;gBACApB,aAAa,EAAEA,0BAAAA,oCAAAA,aAAe,CAACoB,WAAWC,GAAG,CAAC;YAChD;YAEA,sEAAsE;YACtE,MAAMC,eAAcT,sBAAAA,IAAIE,SAAS,CAACC,IAAI,cAAlBH,0CAAAA,oBAAoBI,SAAS;YACjD,IAAIK,gBAAgB,gBAAgB;oBAC3BzB;gBAAP,QAAOA,iCAAAA,8BAA8BC,kBAA9BD,qDAAAA,+BAAoC0B,QAAQ;YACrD;YAEA,6DAA6D;YAC7D,MAAMC,8BAA8B;gBAClC;gBACA;gBACA;aACD;YAED,IAAIF,eAAeE,4BAA4BC,QAAQ,CAACH,cAAc;oBACnDT;gBAAjB,MAAMa,YAAWb,mBAAAA,IAAIc,UAAU,cAAdd,uCAAAA,sBAAAA,KAAiBf,KAAKe,IAAIe,QAAQ;gBACnD,OAAOF,WAAW,AAACG,CAAAA,OAAOH,YAAY,GAAE,EAAGH,QAAQ,KAAKjB;YAC1D;YAEA,uCAAuC;YACvC,QAAOO,mBAAAA,IACJc,UAAU,cADNd,wCAAAA,kBAAAA,sBAAAA,KACSf,KAAKe,IAAIe,QAAQ,iBAD1Bf,sCAAAA,gBAEHU,QAAQ,GACTO,OAAO,CAACC,2CAAoC,EAAE;QACnD;IACF;IAEA,MAAMC,WAAW,CAAC,EAAEvB,cAAc,CAAC,EAAEC,QAAQ,CAAC,EAAEuB,IAAAA,eAAM,EAACC,KAAKC,GAAG,IAAI,YAAY,IAAI,CAAC;IACpFC,IAAAA,6BAAqB,EAAC;QAAEzB;QAASQ;QAAMa;IAAS;AAClD"}