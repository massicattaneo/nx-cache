{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/providers/src/useDocumentViewerData.ts"],"sourcesContent":["import { useMemo } from \"react\"\nimport { CqsChunk, CqsScope, CqsSearchQuery } from \"@rp/common/api-types\"\nimport { useLocalStorage } from \"@rp/react/web/common/hooks\"\n\n/* This hook manages the extra information coming from the\ncontext that didn't fit on the url, or there is no other way\nto find it. This state is stored on the Local Storage. */\n\ntype DocumentViewerData = {\n  documentId?: string // Only to check if the data matches the current document\n  documentScope: CqsScope\n  language: string\n  query?: CqsSearchQuery\n  startingChunkId?: number\n  queryId?: string\n  hideMatches?: boolean\n  chunks: Array<CqsChunk>\n}\n\nexport const documentViewerDataDefault: DocumentViewerData = {\n  documentId: undefined,\n  documentScope: \"news\",\n  language: \"English\",\n  query: undefined,\n  startingChunkId: undefined,\n  queryId: undefined,\n  hideMatches: false,\n  chunks: [],\n}\n\nexport const useDocumentViewerData: () => {\n  documentData: DocumentViewerData\n  setDocumentData: (newValue: Partial<DocumentViewerData>) => void\n  removeDocumentData: () => void\n} = () => {\n  const [storedValue, setValue, remove] = useLocalStorage<Partial<DocumentViewerData>>(\n    \"__explore_document_data__\",\n    documentViewerDataDefault,\n  )\n\n  return useMemo(\n    () => ({\n      documentData: {\n        documentId: storedValue.documentId,\n        documentScope: storedValue.documentScope ?? documentViewerDataDefault.documentScope,\n        language: storedValue.language ?? documentViewerDataDefault.language,\n        query: storedValue.query ?? documentViewerDataDefault.query,\n        startingChunkId: storedValue.startingChunkId ?? documentViewerDataDefault.startingChunkId,\n        queryId: storedValue.queryId ?? documentViewerDataDefault.queryId,\n        hideMatches: storedValue.hideMatches ?? documentViewerDataDefault.hideMatches,\n        chunks: storedValue.chunks ?? documentViewerDataDefault.chunks,\n      },\n      setDocumentData: setValue,\n      removeDocumentData: remove,\n    }),\n    [remove, setValue, storedValue],\n  )\n}\n"],"names":["documentViewerDataDefault","useDocumentViewerData","documentId","undefined","documentScope","language","query","startingChunkId","queryId","hideMatches","chunks","storedValue","setValue","remove","useLocalStorage","useMemo","documentData","setDocumentData","removeDocumentData"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAmBaA,yBAAyB;eAAzBA;;IAWAC,qBAAqB;eAArBA;;;uBA9BW;uBAEQ;AAiBzB,MAAMD,4BAAgD;IAC3DE,YAAYC;IACZC,eAAe;IACfC,UAAU;IACVC,OAAOH;IACPI,iBAAiBJ;IACjBK,SAASL;IACTM,aAAa;IACbC,QAAQ,EAAE;AACZ;AAEO,MAAMT,wBAIT;IACF,MAAM,CAACU,aAAaC,UAAUC,OAAO,GAAGC,IAAAA,sBAAe,EACrD,6BACAd;IAGF,OAAOe,IAAAA,cAAO,EACZ;YAGmBJ,4BACLA,uBACHA,oBACUA,8BACRA,sBACIA,0BACLA;eATL;YACLK,cAAc;gBACZd,YAAYS,YAAYT,UAAU;gBAClCE,eAAeO,CAAAA,6BAAAA,YAAYP,aAAa,cAAzBO,wCAAAA,6BAA6BX,0BAA0BI,aAAa;gBACnFC,UAAUM,CAAAA,wBAAAA,YAAYN,QAAQ,cAApBM,mCAAAA,wBAAwBX,0BAA0BK,QAAQ;gBACpEC,OAAOK,CAAAA,qBAAAA,YAAYL,KAAK,cAAjBK,gCAAAA,qBAAqBX,0BAA0BM,KAAK;gBAC3DC,iBAAiBI,CAAAA,+BAAAA,YAAYJ,eAAe,cAA3BI,0CAAAA,+BAA+BX,0BAA0BO,eAAe;gBACzFC,SAASG,CAAAA,uBAAAA,YAAYH,OAAO,cAAnBG,kCAAAA,uBAAuBX,0BAA0BQ,OAAO;gBACjEC,aAAaE,CAAAA,2BAAAA,YAAYF,WAAW,cAAvBE,sCAAAA,2BAA2BX,0BAA0BS,WAAW;gBAC7EC,QAAQC,CAAAA,sBAAAA,YAAYD,MAAM,cAAlBC,iCAAAA,sBAAsBX,0BAA0BU,MAAM;YAChE;YACAO,iBAAiBL;YACjBM,oBAAoBL;QACtB;IAAA,GACA;QAACA;QAAQD;QAAUD;KAAY;AAEnC"}