ddeff6ba2c8ddf5660841b1f25e586dc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistsUploadDropZone", {
    enumerable: true,
    get: function() {
        return WatchlistsUploadDropZone;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _basecomponents = require("@rp/react/web/common/base-components");
const _providers = require("@rp/react/web/common/providers");
const _WatchlistsUploadOverlay = require("./WatchlistsUploadOverlay");
const WatchlistsUploadDropZone = ({ children, disabled, onDropFiles, onFilesRejected, centerContent })=>{
    const { enqueueError } = (0, _providers.useSnackbar)();
    const onDropRejected = (0, _react.useCallback)(()=>{
        const message = `The file format is not supported.`;
        enqueueError(`The file format is not supported.`, {
            autoHideDuration: 5000
        });
        onFilesRejected === null || onFilesRejected === void 0 ? void 0 : onFilesRejected({
            error: new Error(message)
        });
    }, [
        enqueueError,
        onFilesRejected
    ]);
    if (disabled) return children;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.DropZone, {
        onDrop: onDropFiles,
        onDropRejected: onDropRejected,
        disabled: disabled,
        Overlay: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistsUploadOverlay.WatchlistsUploadOverlay, {
            centerContent: centerContent
        }),
        accept: ".csv",
        sx: {
            [`& .${_basecomponents.DROP_ZONE_AREA_CLASS_NAME}`]: {
                height: "100%",
                position: "relative"
            }
        },
        children: children
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RzVXBsb2FkRHJvcFpvbmUvV2F0Y2hsaXN0c1VwbG9hZERyb3Bab25lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBEUk9QX1pPTkVfQVJFQV9DTEFTU19OQU1FLCBEcm9wWm9uZSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IFdhdGNobGlzdHNVcGxvYWRPdmVybGF5IH0gZnJvbSBcIi4vV2F0Y2hsaXN0c1VwbG9hZE92ZXJsYXlcIlxuXG50eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gIGRpc2FibGVkPzogYm9vbGVhblxuICBvbkRyb3BGaWxlczogKGZpbGVzOiBBcnJheTxGaWxlPikgPT4gdm9pZFxuICBjZW50ZXJDb250ZW50PzogYm9vbGVhblxuICBvbkZpbGVzUmVqZWN0ZWQ/OiAocHJvcHM6IHsgZXJyb3I6IEVycm9yIH0pID0+IHZvaWRcbn1cblxuZXhwb3J0IGNvbnN0IFdhdGNobGlzdHNVcGxvYWREcm9wWm9uZSA9ICh7XG4gIGNoaWxkcmVuLFxuICBkaXNhYmxlZCxcbiAgb25Ecm9wRmlsZXMsXG4gIG9uRmlsZXNSZWplY3RlZCxcbiAgY2VudGVyQ29udGVudCxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW5xdWV1ZUVycm9yIH0gPSB1c2VTbmFja2JhcigpXG5cbiAgY29uc3Qgb25Ecm9wUmVqZWN0ZWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgZmlsZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC5gXG4gICAgZW5xdWV1ZUVycm9yKGBUaGUgZmlsZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC5gLCB7XG4gICAgICBhdXRvSGlkZUR1cmF0aW9uOiA1MDAwLFxuICAgIH0pXG4gICAgb25GaWxlc1JlamVjdGVkPy4oe1xuICAgICAgZXJyb3I6IG5ldyBFcnJvcihtZXNzYWdlKSxcbiAgICB9KVxuICB9LCBbZW5xdWV1ZUVycm9yLCBvbkZpbGVzUmVqZWN0ZWRdKVxuXG4gIGlmIChkaXNhYmxlZCkgcmV0dXJuIGNoaWxkcmVuXG5cbiAgcmV0dXJuIChcbiAgICA8RHJvcFpvbmVcbiAgICAgIG9uRHJvcD17b25Ecm9wRmlsZXN9XG4gICAgICBvbkRyb3BSZWplY3RlZD17b25Ecm9wUmVqZWN0ZWR9XG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBPdmVybGF5PXs8V2F0Y2hsaXN0c1VwbG9hZE92ZXJsYXkgY2VudGVyQ29udGVudD17Y2VudGVyQ29udGVudH0gLz59XG4gICAgICBhY2NlcHQ9XCIuY3N2XCJcbiAgICAgIHN4PXt7XG4gICAgICAgIFtgJiAuJHtEUk9QX1pPTkVfQVJFQV9DTEFTU19OQU1FfWBdOiB7XG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Ecm9wWm9uZT5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIldhdGNobGlzdHNVcGxvYWREcm9wWm9uZSIsImNoaWxkcmVuIiwiZGlzYWJsZWQiLCJvbkRyb3BGaWxlcyIsIm9uRmlsZXNSZWplY3RlZCIsImNlbnRlckNvbnRlbnQiLCJlbnF1ZXVlRXJyb3IiLCJ1c2VTbmFja2JhciIsIm9uRHJvcFJlamVjdGVkIiwidXNlQ2FsbGJhY2siLCJtZXNzYWdlIiwiYXV0b0hpZGVEdXJhdGlvbiIsImVycm9yIiwiRXJyb3IiLCJEcm9wWm9uZSIsIm9uRHJvcCIsIk92ZXJsYXkiLCJXYXRjaGxpc3RzVXBsb2FkT3ZlcmxheSIsImFjY2VwdCIsInN4IiwiRFJPUF9aT05FX0FSRUFfQ0xBU1NfTkFNRSIsImhlaWdodCIsInBvc2l0aW9uIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBYWFBOzs7ZUFBQUE7Ozs7dUJBYmU7Z0NBQ3dCOzJCQUN4Qjt5Q0FDWTtBQVVqQyxNQUFNQSwyQkFBMkIsQ0FBQyxFQUN2Q0MsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWEMsZUFBZSxFQUNmQyxhQUFhLEVBQ1A7SUFDTixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSxzQkFBVztJQUVwQyxNQUFNQyxpQkFBaUJDLElBQUFBLGtCQUFXLEVBQUM7UUFDakMsTUFBTUMsVUFBVSxDQUFDLGlDQUFpQyxDQUFDO1FBQ25ESixhQUFhLENBQUMsaUNBQWlDLENBQUMsRUFBRTtZQUNoREssa0JBQWtCO1FBQ3BCO1FBQ0FQLDRCQUFBQSxzQ0FBQUEsZ0JBQWtCO1lBQ2hCUSxPQUFPLElBQUlDLE1BQU1IO1FBQ25CO0lBQ0YsR0FBRztRQUFDSjtRQUFjRjtLQUFnQjtJQUVsQyxJQUFJRixVQUFVLE9BQU9EO0lBRXJCLHFCQUNFLHFCQUFDYSx3QkFBUTtRQUNQQyxRQUFRWjtRQUNSSyxnQkFBZ0JBO1FBQ2hCTixVQUFVQTtRQUNWYyx1QkFBUyxxQkFBQ0MsZ0RBQXVCO1lBQUNaLGVBQWVBOztRQUNqRGEsUUFBTztRQUNQQyxJQUFJO1lBQ0YsQ0FBQyxDQUFDLEdBQUcsRUFBRUMseUNBQXlCLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25DQyxRQUFRO2dCQUNSQyxVQUFVO1lBQ1o7UUFDRjtrQkFFQ3JCOztBQUdQIn0=