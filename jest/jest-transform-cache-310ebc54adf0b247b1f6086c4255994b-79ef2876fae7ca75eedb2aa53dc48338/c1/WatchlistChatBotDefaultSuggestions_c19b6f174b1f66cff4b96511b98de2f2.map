{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistChat/WatchlistChatBot/WatchlistChatBotDefaultSuggestions.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useMemo } from \"react\"\nimport { CqsItem } from \"@rp/common/api-types\"\nimport { BigdataChatAvatar } from \"@rp/react/common/assets\"\nimport { WatchlistSuggestion, watchlistSuggestedPrompts } from \"@rp/react/common/watchlists\"\nimport { WorkflowDescriptionResult } from \"@rp/react/tanstack-api/workflow\"\nimport { Box, Typography } from \"@rp/react/web/mui/core\"\nimport { WatchlistChatBotSuggestion } from \"./WatchlistChatBotSuggestion\"\n\ntype Props = {\n  workflows: Array<WorkflowDescriptionResult>\n  displayName: string\n  onSuggestionClick: (suggestion: WatchlistSuggestion) => void\n  showAllPrompts?: boolean\n  setShowAllPrompts?: Dispatch<SetStateAction<boolean>>\n  selectedEntity: CqsItem | null\n  offsetY?: number\n}\n\nconst SHOW_MORE_LIMIT = 5\n\nexport const WatchlistChatBotDefaultSuggestions = ({\n  workflows,\n  displayName,\n  onSuggestionClick,\n  showAllPrompts,\n  setShowAllPrompts,\n  offsetY = 0,\n  selectedEntity,\n}: Props) => {\n  const raw = useMemo(() => {\n    if (!selectedEntity) {\n      return watchlistSuggestedPrompts.filter(suggestion => suggestion.disjunctiveFacets === null)\n    }\n    return watchlistSuggestedPrompts\n      .filter(suggestion => {\n        return suggestion.disjunctiveFacets?.some(inner => {\n          const sameCategory = selectedEntity.category === inner.category\n          const sameGroup1 = selectedEntity.group1 === inner.group1\n          return (!inner.group1 && sameCategory) || (sameCategory && sameGroup1)\n        })\n      })\n      .concat(\n        workflows.map(wf => ({\n          id: `workflow-${wf.id}`,\n          label: wf.flowName,\n          prompt: () => \"\",\n          workflow: { id: wf.id },\n          disjunctiveFacets: null,\n          iconName: \"FlashOn\",\n        })),\n      )\n  }, [selectedEntity, workflows])\n  const list = raw\n    .sort((first, second) => {\n      if (first.workflow && second.workflow)\n        return first.workflow.id.localeCompare(second.workflow.id)\n      if (first.workflow) return -1\n      if (second.workflow) return 1\n      return first.label.localeCompare(second.label)\n    })\n    .slice(0, showAllPrompts ? 100000 : SHOW_MORE_LIMIT)\n\n  return (\n    <Box\n      sx={{\n        pt: 2,\n        px: 2,\n        width: \"100%\",\n        maxWidth: 700,\n        mx: \"auto\",\n      }}\n    >\n      <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n        <BigdataChatAvatar height={28} width={28} />\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Bigdata\n        </Typography>\n      </Box>\n      <Typography sx={{ fontSize: 18, mt: 2 }}>\n        What would you like to know about <strong>{displayName}</strong>?\n      </Typography>\n      <Box\n        sx={theme => ({\n          backgroundColor: \"elevation.dp06\",\n          borderRadius: 2,\n          p: 2,\n          mt: 2,\n          maxHeight: `calc(100dvh - ${offsetY + 240}px)`,\n          overflowY: \"auto\",\n          ...theme.scrollbarStyles,\n        })}\n      >\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          Suggestions:\n        </Typography>\n        {list.map(suggestion => {\n          return (\n            <WatchlistChatBotSuggestion\n              key={suggestion.id}\n              suggestion={suggestion}\n              onSuggestionClick={onSuggestionClick}\n            />\n          )\n        })}\n        {raw.length > SHOW_MORE_LIMIT ? (\n          <Typography\n            sx={{\n              mt: 2,\n              cursor: \"pointer\",\n              color: \"text.secondary\",\n              \"&:hover\": { textDecoration: \"underline\" },\n            }}\n            variant=\"body2\"\n            onClick={() => setShowAllPrompts?.(!showAllPrompts)}\n          >\n            {showAllPrompts ? \"Show less\" : \"Show more\"}\n          </Typography>\n        ) : null}\n      </Box>\n    </Box>\n  )\n}\n"],"names":["WatchlistChatBotDefaultSuggestions","SHOW_MORE_LIMIT","workflows","displayName","onSuggestionClick","showAllPrompts","setShowAllPrompts","offsetY","selectedEntity","raw","useMemo","watchlistSuggestedPrompts","filter","suggestion","disjunctiveFacets","some","inner","sameCategory","category","sameGroup1","group1","concat","map","wf","id","label","flowName","prompt","workflow","iconName","list","sort","first","second","localeCompare","slice","Box","sx","pt","px","width","maxWidth","mx","display","alignItems","gap","BigdataChatAvatar","height","Typography","variant","color","fontSize","mt","strong","theme","backgroundColor","borderRadius","p","maxHeight","overflowY","scrollbarStyles","mb","WatchlistChatBotSuggestion","length","cursor","textDecoration","onClick"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}