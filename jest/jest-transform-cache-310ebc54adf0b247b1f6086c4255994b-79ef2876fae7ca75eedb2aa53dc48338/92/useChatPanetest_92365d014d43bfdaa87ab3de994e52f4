9fdc11bb730f3a6a72672376071d4d1c
"use strict";
jest.mock("@rp/react/common/rpjson", ()=>({
        useRpjson: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _rpjson = require("@rp/react/common/rpjson");
const _react = require("@testing-library/react");
const _useChatPane = require("./useChatPane");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const mockDefinedCurrentInteraction = {
    displayedMessage: "Hello"
};
const mockChatId = "chat-id-123";
const mockUseRpjson = _rpjson.useRpjson;
let renderedHook;
const testMatrixForFlags = [
    {
        chatId: mockChatId,
        currentInteraction: mockDefinedCurrentInteraction,
        expected: {
            shouldShowChat: true,
            shouldShowLoadingChat: false,
            shouldShowSuggestions: false
        }
    },
    {
        chatId: undefined,
        currentInteraction: mockDefinedCurrentInteraction,
        expected: {
            shouldShowChat: false,
            shouldShowLoadingChat: true,
            shouldShowSuggestions: false
        }
    },
    {
        chatId: undefined,
        currentInteraction: undefined,
        expected: {
            shouldShowChat: false,
            shouldShowLoadingChat: false,
            shouldShowSuggestions: true
        }
    },
    {
        chatId: mockChatId,
        currentInteraction: undefined,
        expected: {
            shouldShowChat: true,
            shouldShowLoadingChat: false,
            shouldShowSuggestions: false
        }
    }
];
beforeEach(jest.clearAllMocks);
describe("useChatPane", ()=>{
    describe("the flags", ()=>{
        describe.each(testMatrixForFlags)("when chatId is $chatId and currentInteraction is $currentInteraction", ({ chatId, currentInteraction, expected })=>{
            beforeEach(()=>{
                mockUseRpjson.mockReturnValue({
                    data: {
                        document: {
                            metadata: {
                                provider_filename: "test.pdf"
                            }
                        }
                    }
                });
                renderedHook = (0, _react.renderHook)(()=>(0, _useChatPane.useChatPane)({
                        chatId,
                        currentInteraction,
                        selectedFiles: []
                    }));
            });
            it(`should return the correct state, ${JSON.stringify(expected)}`, ()=>{
                expect(renderedHook.result.current).toStrictEqual(_object_spread_props(_object_spread({}, expected), {
                    name: "Your Files"
                }));
            });
        });
    });
    describe("the name", ()=>{
        describe("with no selected files", ()=>{
            beforeEach(()=>{
                mockUseRpjson.mockReturnValue({
                    data: undefined
                });
                renderedHook = (0, _react.renderHook)(()=>(0, _useChatPane.useChatPane)({
                        chatId: mockChatId,
                        currentInteraction: mockDefinedCurrentInteraction,
                        selectedFiles: []
                    }));
            });
            it("should return the correct name", ()=>{
                expect(renderedHook.result.current.name).toBe("Your Files");
            });
            it("should call useRpjson with the correct params", ()=>{
                expect(mockUseRpjson).toHaveBeenCalledTimes(1);
                expect(mockUseRpjson).toHaveBeenCalledWith("", "private");
            });
        });
        describe("with 1 selected file but no rpjson", ()=>{
            beforeEach(()=>{
                mockUseRpjson.mockReturnValue({
                    data: undefined
                });
                renderedHook = (0, _react.renderHook)(()=>(0, _useChatPane.useChatPane)({
                        chatId: mockChatId,
                        currentInteraction: mockDefinedCurrentInteraction,
                        selectedFiles: [
                            {
                                id: "file-id-1",
                                shared: false
                            }
                        ]
                    }));
            });
            it("should return the correct name", ()=>{
                expect(renderedHook.result.current.name).toBe("Your File");
            });
            it("should call useRpjson with the correct params", ()=>{
                expect(mockUseRpjson).toHaveBeenCalledTimes(1);
                expect(mockUseRpjson).toHaveBeenCalledWith("file-id-1", "private");
            });
        });
        describe("with 1 selected file and good rpjson", ()=>{
            beforeEach(()=>{
                mockUseRpjson.mockReturnValue({
                    data: {
                        document: {
                            metadata: {
                                provider_filename: "test.pdf"
                            }
                        }
                    }
                });
                renderedHook = (0, _react.renderHook)(()=>(0, _useChatPane.useChatPane)({
                        chatId: mockChatId,
                        currentInteraction: mockDefinedCurrentInteraction,
                        selectedFiles: [
                            {
                                id: "file-id-1",
                                shared: true
                            }
                        ]
                    }));
            });
            it("should return the correct name", ()=>{
                expect(renderedHook.result.current.name).toBe("test.pdf");
            });
            it("should call useRpjson with the correct params", ()=>{
                expect(mockUseRpjson).toHaveBeenCalledTimes(1);
                expect(mockUseRpjson).toHaveBeenCalledWith("file-id-1", "public");
            });
        });
        describe("with 2 selected files and good rpjson", ()=>{
            beforeEach(()=>{
                mockUseRpjson.mockReturnValue({
                    data: {
                        document: {
                            metadata: {
                                provider_filename: "test.pdf"
                            }
                        }
                    }
                });
                renderedHook = (0, _react.renderHook)(()=>(0, _useChatPane.useChatPane)({
                        chatId: mockChatId,
                        currentInteraction: mockDefinedCurrentInteraction,
                        selectedFiles: [
                            {
                                id: "file-id-1",
                                shared: false
                            },
                            {
                                id: "file-id-2",
                                shared: true
                            }
                        ]
                    }));
            });
            it("should return the correct name", ()=>{
                expect(renderedHook.result.current.name).toBe("Your 2 Files");
            });
            it("should call useRpjson with the correct params", ()=>{
                expect(mockUseRpjson).toHaveBeenCalledTimes(1);
                expect(mockUseRpjson).toHaveBeenCalledWith("", "private");
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,