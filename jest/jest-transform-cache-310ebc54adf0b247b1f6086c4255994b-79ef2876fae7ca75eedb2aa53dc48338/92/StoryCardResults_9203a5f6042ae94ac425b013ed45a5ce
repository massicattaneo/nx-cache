c353a6acc82cb653433481a7250c5009
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StoryCardResults", {
    enumerable: true,
    get: function() {
        return StoryCardResults;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _documentviewer = require("@rp/react/web/document-viewer");
const _core = require("@rp/react/web/mui/core");
const _StoryCardResultsstyles = require("./StoryCardResults.styles");
const _StoryCardsContainer = require("./StoryCardsContainer");
const _StoryCardsHeader = require("./StoryCardsHeader");
const _scrollToStoryTop = require("./scrollToStoryTop");
const _useDegradedQueryInfoMessage = require("./useDegradedQueryInfoMessage");
const StoryCardResults = ({ onAddToWatchlist })=>{
    const [showCluster, setShowCluster] = (0, _react.useState)();
    const toggleShowCluster = (0, _react.useCallback)((id)=>{
        setShowCluster((prev)=>{
            (0, _scrollToStoryTop.scrollToStoryTopAfterTransition)(prev, id);
            if (!id) return undefined;
            return id === prev ? undefined : id;
        });
    }, []);
    const { stories, fetchStatus, status, fetchNextPage, isFetchingNextPage, hasNextPage, coverage, enabled } = (0, _providers.useCurrentCQSPreview)();
    const { isFeedbackMode } = (0, _providers.useFeedbackContext)();
    const [{ document: documentId = "" }] = (0, _hooks.useHashParams)();
    (0, _useDegradedQueryInfoMessage.useDegradedQueryInfoMessage)(coverage, isFeedbackMode);
    const { searchQuery, savedQuery: { id, query: { expression } }, uiState: { isSummaryLoading } } = (0, _providers.useQueryContext)();
    const [resultsPageState] = (0, _providers.useResultsPageState)();
    const { highlights, keywords } = (0, _documentviewer.useDocumentViewerHighlights)(expression);
    (0, _react.useEffect)(()=>setShowCluster(undefined), [
        expression
    ]);
    const scrollToTopRef = (0, _react.useRef)(document.body);
    const loadingState = isSummaryLoading && enabled || fetchStatus === "fetching" && (resultsPageState === "loading" || resultsPageState === "empty") || status === "pending" && (resultsPageState === "loading" || resultsPageState === "empty");
    (0, _react.useEffect)(()=>{
        if (!documentId && fetchStatus === "fetching") {
            // For some reason I need to slow down this request a bit in order to make it work
            setTimeout(()=>window.scroll({
                    top: 0
                }), 0);
        }
    }, [
        documentId,
        fetchStatus
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_StoryCardResultsstyles.StoryCardResultsStyled, {
        "data-testid": "results-storycard",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_StoryCardsHeader.StoryCardsHeader, {}),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                width: "100%",
                children: loadingState ? [
                    ...new Array(12).keys()
                ].map((i)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_StoryCardResultsstyles.StoryCardLoadingContainer, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                                width: "100%",
                                height: 14
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                                width: "50%",
                                height: 12,
                                style: {
                                    marginBottom: 10
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                                width: "100%",
                                height: 16
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                                width: "100%",
                                height: 16
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                                width: "50%",
                                height: 16
                            })
                        ]
                    }, i)) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_StoryCardsContainer.StoryCardsContainer, {
                            stories: stories,
                            loading: isFetchingNextPage,
                            hasMore: hasNextPage,
                            fetchNextPage: fetchNextPage,
                            highlights: highlights,
                            feedback: true,
                            toggleShowCluster: toggleShowCluster,
                            showCluster: showCluster,
                            searchQuery: searchQuery,
                            keywords: keywords,
                            documentQuery: searchQuery,
                            isFeedbackMode: isFeedbackMode,
                            component: "results",
                            scrollOnRender: true,
                            queryId: id,
                            onAddToWatchlist: onAddToWatchlist
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.StoryCardScrollTopButton, {
                            infiniteScrollContainerRef: scrollToTopRef,
                            scrollBody: true
                        })
                    ]
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,