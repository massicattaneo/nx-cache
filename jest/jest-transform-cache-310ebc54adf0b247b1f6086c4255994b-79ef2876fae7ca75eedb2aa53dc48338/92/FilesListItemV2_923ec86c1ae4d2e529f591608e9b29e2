44e40b4cc5b50520fb4aefc953721467
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesListItemV2", {
    enumerable: true,
    get: function() {
        return FilesListItemV2;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _compact = /*#__PURE__*/ _interop_require_default(require("lodash/compact"));
const _reacthighlightwords = /*#__PURE__*/ _interop_require_default(require("react-highlight-words"));
const _clerkreact = require("@clerk/clerk-react");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _files = require("@rp/react/web/common/files");
const _icons = require("@rp/react/web/icons");
const _core = require("@rp/react/web/mui/core");
const _FileStatusCell = require("../FileStatusCell/FileStatusCell");
const _FilesListMobilesActions = require("./FilesListMobilesActions");
const _filesListutils = require("./filesList.utils");
const _handleFileRowCheckboxChangeFunc = require("./utils/handleFileRowCheckboxChangeFunc");
const _handleFileRowClickRowFunc = require("./utils/handleFileRowClickRowFunc");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function FilesListItemV2({ item, columnsWidth, actions, selectedFiles, setSelectedFiles, filterTerm, isPlaceholderData, shared, isThisFileOpen, shouldUseMinimalList, openChatPane }) {
    var _item_sharedWith;
    const [isHover, setIsHover] = (0, _react.useState)({});
    const [openMenu, setOpenMenu] = (0, _react.useState)(false);
    const theme = (0, _core.useTheme)();
    const { data: orgUser, isLoading } = (0, _hooks.useClerkOrganizationMember)(item.owner);
    const { user } = (0, _clerkreact.useUser)();
    const { canShare } = (0, _providers.useAccount)();
    const showCompanyIcon = !!(item.sharedWith && (item === null || item === void 0 ? void 0 : (_item_sharedWith = item.sharedWith) === null || _item_sharedWith === void 0 ? void 0 : _item_sharedWith.length) > 0);
    const isSelected = !!selectedFiles.find((i)=>i.id === item.id);
    const { ownerName, ownerDisplayName } = (0, _filesListutils.getOwnerNameData)(user, orgUser);
    const removeAction = _object_spread_props(_object_spread({}, actions.remove), {
        onClick: (file)=>{
            return actions.remove.onClick(file).then(()=>{
                setSelectedFiles((prev)=>prev.filter((item)=>item.id !== file.id));
            });
        }
    });
    const mobileActions = [
        actions.open,
        actions.chat,
        canShare ? actions.share : undefined,
        shared ? undefined : removeAction,
        actions.download
    ].filter(Boolean);
    const desktopActions = [
        actions.open,
        shared ? actions.chat : undefined,
        canShare ? actions.share : undefined,
        shared ? undefined : removeAction,
        actions.download
    ].filter(Boolean);
    const onRemove = (item)=>{
        actions.remove.onClick(item);
    };
    const onRowClick = (0, _react.useCallback)(()=>(0, _handleFileRowClickRowFunc.handleFileRowClickRowFunc)({
            actions,
            item,
            isSelected,
            isThisFileOpen,
            openChatPane,
            setSelectedFiles,
            shared: !!shared
        }), [
        actions,
        isSelected,
        isThisFileOpen,
        item,
        openChatPane,
        setSelectedFiles,
        shared
    ]);
    const handleCheckboxChange = (0, _react.useCallback)((_ev, checked)=>(0, _handleFileRowCheckboxChangeFunc.handleFileRowCheckboxChangeFunc)({
            actions,
            checked,
            isSelected,
            isThisFileOpen,
            item,
            openChatPane,
            setSelectedFiles,
            shared: !!shared
        }), [
        actions,
        isSelected,
        isThisFileOpen,
        item,
        openChatPane,
        setSelectedFiles,
        shared
    ]);
    const columns = (0, _react.useMemo)(()=>(0, _compact.default)([
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                    disabled: !(0, _utils.isFileStatusCompleted)(item.status),
                    checked: isSelected,
                    onClick: (ev)=>ev.stopPropagation(),
                    onChange: handleCheckboxChange
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.FileIcon, {
                    extension: item.type
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1,
                        pr: 2
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            tooltipText: item.name,
                            typographyProps: {
                                fontSize: 14
                            },
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthighlightwords.default, {
                                autoEscape: true,
                                highlightStyle: {
                                    color: theme.palette.primary.light
                                },
                                highlightTag: "span",
                                searchWords: [
                                    filterTerm
                                ],
                                textToHighlight: item.name
                            })
                        }),
                        showCompanyIcon && !shared ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ShareIcon, {
                            shared: true,
                            sx: {
                                mx: 1
                            }
                        }) : null
                    ]
                })
            },
            !shouldUseMinimalList && {
                node: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1,
                        pr: 2
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.UserAvatar, {
                            isLoading: isLoading,
                            ownerName: ownerName,
                            imgUrl: orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.imageUrl,
                            hasImage: orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.hasImage
                        }),
                        isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                            width: columnsWidth[3]
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            tooltipText: ownerName !== null && ownerName !== void 0 ? ownerName : "",
                            typographyProps: {
                                fontSize: 14
                            },
                            children: ownerDisplayName
                        })
                    ]
                })
            },
            !shouldUseMinimalList && {
                text: (0, _utils.formatTime)(item.date)
            },
            !shouldUseMinimalList && {
                text: (0, _files.getSizeAndUnit)(item.size, item.status === "error")
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FileStatusCell.FileStatusCell, {
                    onActionClick: (action)=>{
                        if (action.id === "download") {
                            setIsHover({});
                        }
                    },
                    item: item,
                    rowIsHovered: isHover[item.id],
                    actions: [
                        ...desktopActions
                    ],
                    isOpenMenu: openMenu,
                    setIsOpenMenu: setOpenMenu,
                    onDelete: ()=>actions.remove.onClick(item),
                    shouldHideChatIcon: true,
                    isMiniRow: shouldUseMinimalList
                })
            }
        ]), [
        actions.remove,
        columnsWidth,
        desktopActions,
        filterTerm,
        handleCheckboxChange,
        isHover,
        isLoading,
        isSelected,
        item,
        openMenu,
        orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.hasImage,
        orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.imageUrl,
        ownerDisplayName,
        ownerName,
        shared,
        shouldUseMinimalList,
        showCompanyIcon,
        theme.palette.primary.light
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
        shouldPreventMobileFormat: true,
        isPlaceholderData: isPlaceholderData,
        onMouseEnter: ()=>setIsHover({
                [item.id]: true
            }),
        onMouseLeave: ()=>setIsHover({}),
        selected: openMenu,
        onRowClick: (0, _utils.isFileStatusCompleted)(item.status) ? onRowClick : undefined,
        mobileActions: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListMobilesActions.FilesListMobilesActions, {
            actions: mobileActions,
            item: item,
            onRemove: onRemove
        }),
        columnsWidth: columnsWidth,
        sx: {
            gap: 0,
            backgroundColor: isThisFileOpen ? theme.palette.elevation.dp01 : undefined,
            borderLeft: `3px solid ${isThisFileOpen ? theme.palette.primary.main : "transparent"}`,
            "&:hover": {
                backgroundColor: theme.palette.elevation.dp01
            }
        },
        columns: columns
    });
}

//# sourceMappingURL=data:application/json;base64,