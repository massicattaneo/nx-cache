{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/Files/FilesV2/hooks/useChatPane.test.ts"],"sourcesContent":["import { useRpjson } from \"@rp/react/common/rpjson\"\nimport { CurrentInteraction } from \"@rp/react/web/chat\"\nimport { RenderHookResult, renderHook } from \"@testing-library/react\"\nimport { type UseChatPaneProps, type UseChatPaneState, useChatPane } from \"./useChatPane\"\n\nconst mockDefinedCurrentInteraction = { displayedMessage: \"Hello\" } as CurrentInteraction\nconst mockChatId = \"chat-id-123\"\n\nconst mockUseRpjson = useRpjson as jest.Mock\njest.mock(\"@rp/react/common/rpjson\", () => ({\n  useRpjson: jest.fn(),\n}))\n\nlet renderedHook: RenderHookResult<UseChatPaneState, UseChatPaneProps>\n\nconst testMatrixForFlags = [\n  {\n    chatId: mockChatId,\n    currentInteraction: mockDefinedCurrentInteraction,\n    expected: {\n      shouldShowChat: true,\n      shouldShowLoadingChat: false,\n      shouldShowSuggestions: false,\n    },\n  },\n  {\n    chatId: undefined,\n    currentInteraction: mockDefinedCurrentInteraction,\n    expected: {\n      shouldShowChat: false,\n      shouldShowLoadingChat: true,\n      shouldShowSuggestions: false,\n    },\n  },\n  {\n    chatId: undefined,\n    currentInteraction: undefined,\n    expected: {\n      shouldShowChat: false,\n      shouldShowLoadingChat: false,\n      shouldShowSuggestions: true,\n    },\n  },\n  {\n    chatId: mockChatId,\n    currentInteraction: undefined,\n    expected: {\n      shouldShowChat: true,\n      shouldShowLoadingChat: false,\n      shouldShowSuggestions: false,\n    },\n  },\n]\n\nbeforeEach(jest.clearAllMocks)\n\ndescribe(\"useChatPane\", () => {\n  describe(\"the flags\", () => {\n    describe.each(testMatrixForFlags)(\n      \"when chatId is $chatId and currentInteraction is $currentInteraction\",\n      ({ chatId, currentInteraction, expected }) => {\n        beforeEach(() => {\n          mockUseRpjson.mockReturnValue({\n            data: {\n              document: {\n                metadata: { provider_filename: \"test.pdf\" },\n              },\n            },\n          })\n          renderedHook = renderHook(() =>\n            useChatPane({ chatId, currentInteraction, selectedFiles: [] }),\n          )\n        })\n\n        it(`should return the correct state, ${JSON.stringify(expected)}`, () => {\n          expect(renderedHook.result.current).toStrictEqual({ ...expected, name: \"Your Files\" })\n        })\n      },\n    )\n  })\n\n  describe(\"the name\", () => {\n    describe(\"with no selected files\", () => {\n      beforeEach(() => {\n        mockUseRpjson.mockReturnValue({ data: undefined })\n        renderedHook = renderHook(() =>\n          useChatPane({\n            chatId: mockChatId,\n            currentInteraction: mockDefinedCurrentInteraction,\n            selectedFiles: [],\n          }),\n        )\n      })\n\n      it(\"should return the correct name\", () => {\n        expect(renderedHook.result.current.name).toBe(\"Your Files\")\n      })\n\n      it(\"should call useRpjson with the correct params\", () => {\n        expect(mockUseRpjson).toHaveBeenCalledTimes(1)\n        expect(mockUseRpjson).toHaveBeenCalledWith(\"\", \"private\")\n      })\n    })\n\n    describe(\"with 1 selected file but no rpjson\", () => {\n      beforeEach(() => {\n        mockUseRpjson.mockReturnValue({ data: undefined })\n        renderedHook = renderHook(() =>\n          useChatPane({\n            chatId: mockChatId,\n            currentInteraction: mockDefinedCurrentInteraction,\n            selectedFiles: [{ id: \"file-id-1\", shared: false }],\n          }),\n        )\n      })\n\n      it(\"should return the correct name\", () => {\n        expect(renderedHook.result.current.name).toBe(\"Your File\")\n      })\n\n      it(\"should call useRpjson with the correct params\", () => {\n        expect(mockUseRpjson).toHaveBeenCalledTimes(1)\n        expect(mockUseRpjson).toHaveBeenCalledWith(\"file-id-1\", \"private\")\n      })\n    })\n\n    describe(\"with 1 selected file and good rpjson\", () => {\n      beforeEach(() => {\n        mockUseRpjson.mockReturnValue({\n          data: { document: { metadata: { provider_filename: \"test.pdf\" } } },\n        })\n        renderedHook = renderHook(() =>\n          useChatPane({\n            chatId: mockChatId,\n            currentInteraction: mockDefinedCurrentInteraction,\n            selectedFiles: [{ id: \"file-id-1\", shared: true }],\n          }),\n        )\n      })\n\n      it(\"should return the correct name\", () => {\n        expect(renderedHook.result.current.name).toBe(\"test.pdf\")\n      })\n\n      it(\"should call useRpjson with the correct params\", () => {\n        expect(mockUseRpjson).toHaveBeenCalledTimes(1)\n        expect(mockUseRpjson).toHaveBeenCalledWith(\"file-id-1\", \"public\")\n      })\n    })\n\n    describe(\"with 2 selected files and good rpjson\", () => {\n      beforeEach(() => {\n        mockUseRpjson.mockReturnValue({\n          data: { document: { metadata: { provider_filename: \"test.pdf\" } } },\n        })\n        renderedHook = renderHook(() =>\n          useChatPane({\n            chatId: mockChatId,\n            currentInteraction: mockDefinedCurrentInteraction,\n            selectedFiles: [\n              { id: \"file-id-1\", shared: false },\n              { id: \"file-id-2\", shared: true },\n            ],\n          }),\n        )\n      })\n\n      it(\"should return the correct name\", () => {\n        expect(renderedHook.result.current.name).toBe(\"Your 2 Files\")\n      })\n\n      it(\"should call useRpjson with the correct params\", () => {\n        expect(mockUseRpjson).toHaveBeenCalledTimes(1)\n        expect(mockUseRpjson).toHaveBeenCalledWith(\"\", \"private\")\n      })\n    })\n  })\n})\n"],"names":["jest","mock","useRpjson","fn","mockDefinedCurrentInteraction","displayedMessage","mockChatId","mockUseRpjson","renderedHook","testMatrixForFlags","chatId","currentInteraction","expected","shouldShowChat","shouldShowLoadingChat","shouldShowSuggestions","undefined","beforeEach","clearAllMocks","describe","each","mockReturnValue","data","document","metadata","provider_filename","renderHook","useChatPane","selectedFiles","it","JSON","stringify","expect","result","current","toStrictEqual","name","toBe","toHaveBeenCalledTimes","toHaveBeenCalledWith","id","shared"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}