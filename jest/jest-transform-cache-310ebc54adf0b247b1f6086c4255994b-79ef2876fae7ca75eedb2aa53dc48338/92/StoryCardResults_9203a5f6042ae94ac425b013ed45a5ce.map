{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/results-story-card/src/StoryCardResults.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\"\nimport { Watchlist } from \"@rp/common/api-types\"\nimport { StoryCardScrollTopButton } from \"@rp/react/web/common/composite-components\"\nimport { useHashParams } from \"@rp/react/web/common/hooks\"\nimport { useFeedbackContext } from \"@rp/react/web/common/providers\"\nimport { useCurrentCQSPreview, useQueryContext } from \"@rp/react/web/common/providers\"\nimport { useResultsPageState } from \"@rp/react/web/common/providers\"\nimport { useDocumentViewerHighlights } from \"@rp/react/web/document-viewer\"\nimport { Box, Skeleton } from \"@rp/react/web/mui/core\"\nimport { StoryCardLoadingContainer, StoryCardResultsStyled } from \"./StoryCardResults.styles\"\nimport { StoryCardsContainer } from \"./StoryCardsContainer\"\nimport { StoryCardsHeader } from \"./StoryCardsHeader\"\nimport { scrollToStoryTopAfterTransition } from \"./scrollToStoryTop\"\nimport { useDegradedQueryInfoMessage } from \"./useDegradedQueryInfoMessage\"\n\ntype Props = {\n  onAddToWatchlist?: (watchlist: Watchlist) => void\n}\n\nconst StoryCardResults = ({ onAddToWatchlist }: Props) => {\n  const [showCluster, setShowCluster] = useState<string | undefined>()\n  const toggleShowCluster = useCallback((id: string | undefined) => {\n    setShowCluster(prev => {\n      scrollToStoryTopAfterTransition(prev, id)\n      if (!id) return undefined\n      return id === prev ? undefined : id\n    })\n  }, [])\n\n  const {\n    stories,\n    fetchStatus,\n    status,\n    fetchNextPage,\n    isFetchingNextPage,\n    hasNextPage,\n    coverage,\n    enabled,\n  } = useCurrentCQSPreview()\n  const { isFeedbackMode } = useFeedbackContext()\n  const [{ document: documentId = \"\" }] = useHashParams()\n\n  useDegradedQueryInfoMessage(coverage, isFeedbackMode)\n\n  const {\n    searchQuery,\n    savedQuery: {\n      id,\n      query: { expression },\n    },\n    uiState: { isSummaryLoading },\n  } = useQueryContext()\n\n  const [resultsPageState] = useResultsPageState()\n\n  const { highlights, keywords } = useDocumentViewerHighlights(expression)\n  useEffect(() => setShowCluster(undefined), [expression])\n\n  const scrollToTopRef = useRef<HTMLElement>(document.body)\n  const loadingState =\n    (isSummaryLoading && enabled) ||\n    (fetchStatus === \"fetching\" &&\n      (resultsPageState === \"loading\" || resultsPageState === \"empty\")) ||\n    (status === \"pending\" && (resultsPageState === \"loading\" || resultsPageState === \"empty\"))\n\n  useEffect(() => {\n    if (!documentId && fetchStatus === \"fetching\") {\n      // For some reason I need to slow down this request a bit in order to make it work\n      setTimeout(() => window.scroll({ top: 0 }), 0)\n    }\n  }, [documentId, fetchStatus])\n\n  return (\n    <StoryCardResultsStyled data-testid=\"results-storycard\">\n      <StoryCardsHeader />\n      <Box width=\"100%\">\n        {loadingState ? (\n          [...new Array(12).keys()].map(i => (\n            <StoryCardLoadingContainer key={i}>\n              <Skeleton width=\"100%\" height={14} />\n              <Skeleton width=\"50%\" height={12} style={{ marginBottom: 10 }} />\n              <Skeleton width=\"100%\" height={16} />\n              <Skeleton width=\"100%\" height={16} />\n              <Skeleton width=\"50%\" height={16} />\n            </StoryCardLoadingContainer>\n          ))\n        ) : (\n          <>\n            <StoryCardsContainer\n              stories={stories}\n              loading={isFetchingNextPage}\n              hasMore={hasNextPage}\n              fetchNextPage={fetchNextPage}\n              highlights={highlights}\n              feedback\n              toggleShowCluster={toggleShowCluster}\n              showCluster={showCluster}\n              searchQuery={searchQuery}\n              keywords={keywords}\n              documentQuery={searchQuery}\n              isFeedbackMode={isFeedbackMode}\n              component=\"results\"\n              scrollOnRender\n              queryId={id}\n              onAddToWatchlist={onAddToWatchlist}\n            />\n            <StoryCardScrollTopButton infiniteScrollContainerRef={scrollToTopRef} scrollBody />\n          </>\n        )}\n      </Box>\n    </StoryCardResultsStyled>\n  )\n}\n\nexport { StoryCardResults }\n"],"names":["StoryCardResults","onAddToWatchlist","showCluster","setShowCluster","useState","toggleShowCluster","useCallback","id","prev","scrollToStoryTopAfterTransition","undefined","stories","fetchStatus","status","fetchNextPage","isFetchingNextPage","hasNextPage","coverage","enabled","useCurrentCQSPreview","isFeedbackMode","useFeedbackContext","document","documentId","useHashParams","useDegradedQueryInfoMessage","searchQuery","savedQuery","query","expression","uiState","isSummaryLoading","useQueryContext","resultsPageState","useResultsPageState","highlights","keywords","useDocumentViewerHighlights","useEffect","scrollToTopRef","useRef","body","loadingState","setTimeout","window","scroll","top","StoryCardResultsStyled","data-testid","StoryCardsHeader","Box","width","Array","keys","map","i","StoryCardLoadingContainer","Skeleton","height","style","marginBottom","StoryCardsContainer","loading","hasMore","feedback","documentQuery","component","scrollOnRender","queryId","StoryCardScrollTopButton","infiniteScrollContainerRef","scrollBody"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}