{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/providers/src/lib/AccountProvider.tsx"],"sourcesContent":["import React from \"react\"\nimport { useOrganization } from \"@clerk/clerk-react\"\nimport { UserResource } from \"@clerk/types\"\nimport { ApplicationEntitlement, UserDataQuota } from \"@rp/common/api-types\"\nimport { UseUserQuotas } from \"@rp/react/common/hooks\"\n\ntype EnabledEntitlements = Partial<Record<ApplicationEntitlement, boolean>>\ntype LaunchDarklyFlags = Partial<Record<string | number | symbol, boolean | object>>\n\ntype Account =\n  | {\n      quota: UserDataQuota\n      hasEntitlement(entitlement: ApplicationEntitlement): boolean\n      hasSomeEntitlement(entitlements: Array<ApplicationEntitlement>): boolean\n      entitlements: Array<ApplicationEntitlement>\n      canShare: boolean\n      isAccountBanned: boolean\n      syncing: false\n      isProUser: boolean\n      isUserAnIndividual: boolean\n      isFinancialPackageSubscriber: boolean\n    }\n  | {\n      quota: null\n      hasEntitlement: (entitlement: ApplicationEntitlement) => false\n      hasSomeEntitlement(entitlements: Array<ApplicationEntitlement>): boolean\n      entitlements: []\n      canShare: false\n      syncing: true\n      isProUser: false\n      isAccountBanned: false\n      isUserAnIndividual: false\n      isFinancialPackageSubscriber: false\n    }\n\ntype UseUserReturn =\n  | {\n      isLoaded: false\n      isSignedIn: undefined\n      user: undefined\n    }\n  | {\n      isLoaded: true\n      isSignedIn: false\n      user: null\n    }\n  | {\n      isLoaded: true\n      isSignedIn: true\n      user: UserResource\n    }\n\ntype AccountProviderProps = {\n  useUser: () => UseUserReturn\n  useUserQuotas: UseUserQuotas\n  flagsStatus?: EnabledEntitlements\n  LoadingComponent: React.ReactNode\n  children: React.ReactNode\n  allLDFlags?: LaunchDarklyFlags\n}\n\nconst Context = React.createContext<Account | null>(null)\n\nfunction AccountProvider({\n  useUser,\n  useUserQuotas,\n  LoadingComponent,\n  flagsStatus,\n  children,\n}: AccountProviderProps) {\n  const { user, isLoaded } = useUser()\n  const { organization } = useOrganization()\n  const data = useUserQuotas(user?.id, organization?.id)\n\n  if (!isLoaded || data.isLoading) {\n    return LoadingComponent\n  }\n  const { data: quota } = data\n\n  if (!quota) {\n    // To be at this point we must have a user, but no quota.\n    // This happens when the user is first created and the BE\n    // hasn't synced the user's account yet.\n    return (\n      <Context.Provider\n        value={{\n          quota: null,\n          hasEntitlement: () => false,\n          hasSomeEntitlement: () => false,\n          entitlements: [],\n          canShare: false,\n          syncing: true,\n          isProUser: false,\n          isAccountBanned: false,\n          isUserAnIndividual: false,\n          isFinancialPackageSubscriber: false,\n        }}\n      >\n        {children}\n      </Context.Provider>\n    )\n  }\n\n  // Get the keys from entitlements in the quota response and populate them into the entitlements array\n  // to know which features the user has entitlements to.\n  const entitlements: Array<ApplicationEntitlement> = Object.keys(\n    quota.entitlements,\n  ) as Array<ApplicationEntitlement>\n\n  // These next two conditionals are injecting the extra entitlements into the application.\n  // We don't currently have a way to control these entitlements from the BE.\n  // Eventually they should be moved to the BE so that full access\n  // can be controlled in one location.\n  if (flagsStatus?.[\"extra:brief\"]) {\n    entitlements.push(\"extra:brief\")\n  }\n\n  const isIndividual = quota.subscriptionSource === \"INDIVIDUAL\" || !organization?.id\n\n  const isAccountBanned = quota.subscriptionStatus === \"BANNED\"\n\n  function hasEntitlement(entitlement: ApplicationEntitlement) {\n    return entitlements.includes(entitlement)\n  }\n\n  const isUserAnIndividual =\n    quota?.subscriptionStatus === \"SUBSCRIBED\" && quota?.subscriptionSource === \"INDIVIDUAL\"\n\n  const isFinancialPackageSubscriber = hasEntitlement(\"chat:pricing\")\n\n  return (\n    <Context.Provider\n      value={{\n        quota,\n        hasEntitlement,\n        hasSomeEntitlement(entitlements) {\n          return entitlements.some(entitlement => hasEntitlement(entitlement))\n        },\n        syncing: false,\n        entitlements,\n        isUserAnIndividual,\n        // It might be nice to make this a little more granular\n        // something like canShareWatchlist = hasEntitlement(\"watchlist:share\") && quota.watchlistMaxShared > 0\n        canShare: !isIndividual,\n        isAccountBanned: isAccountBanned,\n        isFinancialPackageSubscriber,\n        isProUser: quota?.subscriptionStatus === \"SUBSCRIBED\",\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nfunction useAccount() {\n  const ctx = React.useContext(Context)\n\n  if (ctx === null) {\n    throw new Error(\"useAccount must be used within an AccountProvider\")\n  }\n\n  return ctx\n}\n\nexport { AccountProvider, useAccount }\nexport type { ApplicationEntitlement, EnabledEntitlements }\n"],"names":["AccountProvider","useAccount","Context","React","createContext","useUser","useUserQuotas","LoadingComponent","flagsStatus","children","user","isLoaded","organization","useOrganization","data","id","isLoading","quota","Provider","value","hasEntitlement","hasSomeEntitlement","entitlements","canShare","syncing","isProUser","isAccountBanned","isUserAnIndividual","isFinancialPackageSubscriber","Object","keys","push","isIndividual","subscriptionSource","subscriptionStatus","entitlement","includes","some","ctx","useContext","Error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAoKSA,eAAe;eAAfA;;IAAiBC,UAAU;eAAVA;;;;8DApKR;4BACc;;;;;;AA4DhC,MAAMC,wBAAUC,cAAK,CAACC,aAAa,CAAiB;AAEpD,SAASJ,gBAAgB,EACvBK,OAAO,EACPC,aAAa,EACbC,gBAAgB,EAChBC,WAAW,EACXC,QAAQ,EACa;IACrB,MAAM,EAAEC,IAAI,EAAEC,QAAQ,EAAE,GAAGN;IAC3B,MAAM,EAAEO,YAAY,EAAE,GAAGC,IAAAA,2BAAe;IACxC,MAAMC,OAAOR,cAAcI,iBAAAA,2BAAAA,KAAMK,EAAE,EAAEH,yBAAAA,mCAAAA,aAAcG,EAAE;IAErD,IAAI,CAACJ,YAAYG,KAAKE,SAAS,EAAE;QAC/B,OAAOT;IACT;IACA,MAAM,EAAEO,MAAMG,KAAK,EAAE,GAAGH;IAExB,IAAI,CAACG,OAAO;QACV,yDAAyD;QACzD,yDAAyD;QACzD,wCAAwC;QACxC,qBACE,qBAACf,QAAQgB,QAAQ;YACfC,OAAO;gBACLF,OAAO;gBACPG,gBAAgB,IAAM;gBACtBC,oBAAoB,IAAM;gBAC1BC,cAAc,EAAE;gBAChBC,UAAU;gBACVC,SAAS;gBACTC,WAAW;gBACXC,iBAAiB;gBACjBC,oBAAoB;gBACpBC,8BAA8B;YAChC;sBAECnB;;IAGP;IAEA,qGAAqG;IACrG,uDAAuD;IACvD,MAAMa,eAA8CO,OAAOC,IAAI,CAC7Db,MAAMK,YAAY;IAGpB,yFAAyF;IACzF,2EAA2E;IAC3E,gEAAgE;IAChE,qCAAqC;IACrC,IAAId,wBAAAA,kCAAAA,WAAa,CAAC,cAAc,EAAE;QAChCc,aAAaS,IAAI,CAAC;IACpB;IAEA,MAAMC,eAAef,MAAMgB,kBAAkB,KAAK,gBAAgB,EAACrB,yBAAAA,mCAAAA,aAAcG,EAAE;IAEnF,MAAMW,kBAAkBT,MAAMiB,kBAAkB,KAAK;IAErD,SAASd,eAAee,WAAmC;QACzD,OAAOb,aAAac,QAAQ,CAACD;IAC/B;IAEA,MAAMR,qBACJV,CAAAA,kBAAAA,4BAAAA,MAAOiB,kBAAkB,MAAK,gBAAgBjB,CAAAA,kBAAAA,4BAAAA,MAAOgB,kBAAkB,MAAK;IAE9E,MAAML,+BAA+BR,eAAe;IAEpD,qBACE,qBAAClB,QAAQgB,QAAQ;QACfC,OAAO;YACLF;YACAG;YACAC,oBAAmBC,YAAY;gBAC7B,OAAOA,aAAae,IAAI,CAACF,CAAAA,cAAef,eAAee;YACzD;YACAX,SAAS;YACTF;YACAK;YACA,uDAAuD;YACvD,uGAAuG;YACvGJ,UAAU,CAACS;YACXN,iBAAiBA;YACjBE;YACAH,WAAWR,CAAAA,kBAAAA,4BAAAA,MAAOiB,kBAAkB,MAAK;QAC3C;kBAECzB;;AAGP;AAEA,SAASR;IACP,MAAMqC,MAAMnC,cAAK,CAACoC,UAAU,CAACrC;IAE7B,IAAIoC,QAAQ,MAAM;QAChB,MAAM,IAAIE,MAAM;IAClB;IAEA,OAAOF;AACT"}