{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/list.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n"],"names":["list","name","tokenize","tokenizeListStart","continuation","tokenizeListContinuation","exit","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","partial","indentConstruct","tokenizeIndent","effects","ok","nok","self","tail","events","length","initialSize","type","sliceSerialize","size","start","code","kind","containerState","marker","asciiDigit","enter","_container","check","thematicBreak","atMarker","interrupt","inside","consume","blankLine","onBlank","attempt","endOfPrefix","otherPrefix","initialBlankLine","markdownSpace","_closeFlow","undefined","notBlank","furtherBlankLines","factorySpace","notInCurrentItem","parser","constructs","disable","null","includes","afterPrefix"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}