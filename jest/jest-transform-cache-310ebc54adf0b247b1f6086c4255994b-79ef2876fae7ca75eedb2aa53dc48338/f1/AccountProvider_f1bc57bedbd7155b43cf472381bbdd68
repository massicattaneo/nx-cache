2b301464de7eeef2669f1f1af85c8a6b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AccountProvider: function() {
        return AccountProvider;
    },
    useAccount: function() {
        return useAccount;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _clerkreact = require("@clerk/clerk-react");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const Context = /*#__PURE__*/ _react.default.createContext(null);
function AccountProvider({ useUser, useUserQuotas, LoadingComponent, flagsStatus, children }) {
    const { user, isLoaded } = useUser();
    const { organization } = (0, _clerkreact.useOrganization)();
    const data = useUserQuotas(user === null || user === void 0 ? void 0 : user.id, organization === null || organization === void 0 ? void 0 : organization.id);
    if (!isLoaded || data.isLoading) {
        return LoadingComponent;
    }
    const { data: quota } = data;
    if (!quota) {
        // To be at this point we must have a user, but no quota.
        // This happens when the user is first created and the BE
        // hasn't synced the user's account yet.
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Context.Provider, {
            value: {
                quota: null,
                hasEntitlement: ()=>false,
                hasSomeEntitlement: ()=>false,
                entitlements: [],
                canShare: false,
                syncing: true,
                isProUser: false,
                isAccountBanned: false,
                isUserAnIndividual: false,
                isFinancialPackageSubscriber: false
            },
            children: children
        });
    }
    // Get the keys from entitlements in the quota response and populate them into the entitlements array
    // to know which features the user has entitlements to.
    const entitlements = Object.keys(quota.entitlements);
    // These next two conditionals are injecting the extra entitlements into the application.
    // We don't currently have a way to control these entitlements from the BE.
    // Eventually they should be moved to the BE so that full access
    // can be controlled in one location.
    if (flagsStatus === null || flagsStatus === void 0 ? void 0 : flagsStatus["extra:brief"]) {
        entitlements.push("extra:brief");
    }
    const isIndividual = quota.subscriptionSource === "INDIVIDUAL" || !(organization === null || organization === void 0 ? void 0 : organization.id);
    const isAccountBanned = quota.subscriptionStatus === "BANNED";
    function hasEntitlement(entitlement) {
        return entitlements.includes(entitlement);
    }
    const isUserAnIndividual = (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) === "SUBSCRIBED" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionSource) === "INDIVIDUAL";
    const isFinancialPackageSubscriber = hasEntitlement("chat:pricing");
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Context.Provider, {
        value: {
            quota,
            hasEntitlement,
            hasSomeEntitlement (entitlements) {
                return entitlements.some((entitlement)=>hasEntitlement(entitlement));
            },
            syncing: false,
            entitlements,
            isUserAnIndividual,
            // It might be nice to make this a little more granular
            // something like canShareWatchlist = hasEntitlement("watchlist:share") && quota.watchlistMaxShared > 0
            canShare: !isIndividual,
            isAccountBanned: isAccountBanned,
            isFinancialPackageSubscriber,
            isProUser: (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) === "SUBSCRIBED"
        },
        children: children
    });
}
function useAccount() {
    const ctx = _react.default.useContext(Context);
    if (ctx === null) {
        throw new Error("useAccount must be used within an AccountProvider");
    }
    return ctx;
}

//# sourceMappingURL=data:application/json;base64,