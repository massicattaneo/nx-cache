9a46d1494a3929a2bb782a8a8a64b588
// Packages
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StoryCardsContainer", {
    enumerable: true,
    get: function() {
        return StoryCardsContainer;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _apitypes = require("@rp/common/api-types");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _discoverypanel = require("@rp/react/web/discovery-sidebar/discovery-panel");
const _rpjson = require("@rp/react/web/rpjson");
const _StoryCard = require("./StoryCard");
const _ChunkStoryCard = require("./StoryCard/ChunkStoryCard");
const _StoryCardContainerstyles = require("./StoryCardContainer.styles");
const getDiscoveryPanelIndex = (stories, hasMore)=>{
    if (hasMore) return 2;
    return Math.min(stories.length - 1, 2);
};
const StoryCardsContainer = ({ stories, loading, hasMore, fetchNextPage, infiniteScrollContainerRef, className, highlights = [], toggleShowCluster, showCluster, keywords = [], searchQuery = {}, documentQuery, isFeedbackMode = false, queryId, onAddToWatchlist })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: className,
        ref: infiniteScrollContainerRef,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_rpjson.RpJsonAnnotationStyles, {
            highlights: highlights,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "ListInner",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                        items: stories,
                        loading: loading,
                        hasMore: hasMore,
                        rootMargin: "500px 0px 500px 0px",
                        fetchNextPage: fetchNextPage,
                        renderItem: (story, indexStory)=>{
                            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    (0, _apitypes.isChunkStory)(story) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChunkStoryCard.ChunkStoryCard, {
                                        keywords: keywords,
                                        story: story,
                                        index: indexStory,
                                        query: searchQuery,
                                        documentQuery: documentQuery,
                                        showCluster: showCluster === story.id,
                                        toggleShowCluster: toggleShowCluster,
                                        isFeedbackMode: isFeedbackMode,
                                        queryId: queryId
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_StoryCard.StoryCard, {
                                        keywords: keywords,
                                        story: story,
                                        index: indexStory,
                                        query: searchQuery,
                                        documentQuery: documentQuery,
                                        showCluster: showCluster === story.id,
                                        toggleShowCluster: toggleShowCluster,
                                        isFeedbackMode: isFeedbackMode,
                                        queryId: queryId
                                    }),
                                    isMobile && indexStory === getDiscoveryPanelIndex(stories, hasMore) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_discoverypanel.DiscoveryPanelMobile, {
                                        onAddToWatchlist: onAddToWatchlist,
                                        isFeedbackMode: isFeedbackMode
                                    })
                                ]
                            });
                        }
                    })
                }),
                !stories.length && !hasMore ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_StoryCardContainerstyles.LoadingMore, {
                    children: "No results matching your query"
                }) : null
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9yZXN1bHRzLXN0b3J5LWNhcmQvc3JjL1N0b3J5Q2FyZHNDb250YWluZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhY2thZ2VzXG5pbXBvcnQgeyBpc0NodW5rU3RvcnkgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgSW5maW5pdGVMaXN0IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IHVzZURldmljZUluZm8gfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vaG9va3NcIlxuaW1wb3J0IHsgRGlzY292ZXJ5UGFuZWxNb2JpbGUgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9kaXNjb3Zlcnktc2lkZWJhci9kaXNjb3ZlcnktcGFuZWxcIlxuaW1wb3J0IHsgUnBKc29uQW5ub3RhdGlvblN0eWxlcyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JwanNvblwiXG4vLyBDb21wb25lbnRzXG5pbXBvcnQgeyBTdG9yeUNhcmQgfSBmcm9tIFwiLi9TdG9yeUNhcmRcIlxuaW1wb3J0IHsgQ2h1bmtTdG9yeUNhcmQgfSBmcm9tIFwiLi9TdG9yeUNhcmQvQ2h1bmtTdG9yeUNhcmRcIlxuLy8gU3R5bGVzXG5pbXBvcnQgeyBMb2FkaW5nTW9yZSB9IGZyb20gXCIuL1N0b3J5Q2FyZENvbnRhaW5lci5zdHlsZXNcIlxuLy8gVHlwZXNcbmltcG9ydCB7IENhcmRDb250YWluZXJQcm9wcyB9IGZyb20gXCIuL1N0b3J5Q2FyZENvbnRhaW5lci50eXBlc1wiXG5cbmNvbnN0IGdldERpc2NvdmVyeVBhbmVsSW5kZXggPSAoc3RvcmllczogQXJyYXk8dW5rbm93bj4sIGhhc01vcmU6IGJvb2xlYW4gfCB1bmRlZmluZWQpID0+IHtcbiAgaWYgKGhhc01vcmUpIHJldHVybiAyXG4gIHJldHVybiBNYXRoLm1pbihzdG9yaWVzLmxlbmd0aCAtIDEsIDIpXG59XG5cbmNvbnN0IFN0b3J5Q2FyZHNDb250YWluZXIgPSAoe1xuICBzdG9yaWVzLFxuICBsb2FkaW5nLFxuICBoYXNNb3JlLFxuICBmZXRjaE5leHRQYWdlLFxuICBpbmZpbml0ZVNjcm9sbENvbnRhaW5lclJlZixcbiAgY2xhc3NOYW1lLFxuICBoaWdobGlnaHRzID0gW10sXG4gIHRvZ2dsZVNob3dDbHVzdGVyLFxuICBzaG93Q2x1c3RlcixcbiAga2V5d29yZHMgPSBbXSxcbiAgc2VhcmNoUXVlcnkgPSB7fSxcbiAgZG9jdW1lbnRRdWVyeSxcbiAgaXNGZWVkYmFja01vZGUgPSBmYWxzZSxcbiAgcXVlcnlJZCxcbiAgb25BZGRUb1dhdGNobGlzdCxcbn06IENhcmRDb250YWluZXJQcm9wcykgPT4ge1xuICBjb25zdCB7IGlzTW9iaWxlIH0gPSB1c2VEZXZpY2VJbmZvKClcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHJlZj17aW5maW5pdGVTY3JvbGxDb250YWluZXJSZWZ9PlxuICAgICAgPFJwSnNvbkFubm90YXRpb25TdHlsZXMgaGlnaGxpZ2h0cz17aGlnaGxpZ2h0c30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTGlzdElubmVyXCI+XG4gICAgICAgICAgPEluZmluaXRlTGlzdFxuICAgICAgICAgICAgaXRlbXM9e3N0b3JpZXN9XG4gICAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICAgICAgaGFzTW9yZT17aGFzTW9yZX1cbiAgICAgICAgICAgIHJvb3RNYXJnaW49XCI1MDBweCAwcHggNTAwcHggMHB4XCJcbiAgICAgICAgICAgIGZldGNoTmV4dFBhZ2U9e2ZldGNoTmV4dFBhZ2V9XG4gICAgICAgICAgICByZW5kZXJJdGVtPXsoc3RvcnksIGluZGV4U3RvcnkpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAge2lzQ2h1bmtTdG9yeShzdG9yeSkgPyAoXG4gICAgICAgICAgICAgICAgICAgIDxDaHVua1N0b3J5Q2FyZFxuICAgICAgICAgICAgICAgICAgICAgIGtleXdvcmRzPXtrZXl3b3Jkc31cbiAgICAgICAgICAgICAgICAgICAgICBzdG9yeT17c3Rvcnl9XG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2luZGV4U3Rvcnl9XG4gICAgICAgICAgICAgICAgICAgICAgcXVlcnk9e3NlYXJjaFF1ZXJ5fVxuICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50UXVlcnk9e2RvY3VtZW50UXVlcnl9XG4gICAgICAgICAgICAgICAgICAgICAgc2hvd0NsdXN0ZXI9e3Nob3dDbHVzdGVyID09PSBzdG9yeS5pZH1cbiAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVTaG93Q2x1c3Rlcj17dG9nZ2xlU2hvd0NsdXN0ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgaXNGZWVkYmFja01vZGU9e2lzRmVlZGJhY2tNb2RlfVxuICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5SWQ9e3F1ZXJ5SWR9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8U3RvcnlDYXJkXG4gICAgICAgICAgICAgICAgICAgICAga2V5d29yZHM9e2tleXdvcmRzfVxuICAgICAgICAgICAgICAgICAgICAgIHN0b3J5PXtzdG9yeX1cbiAgICAgICAgICAgICAgICAgICAgICBpbmRleD17aW5kZXhTdG9yeX1cbiAgICAgICAgICAgICAgICAgICAgICBxdWVyeT17c2VhcmNoUXVlcnl9XG4gICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRRdWVyeT17ZG9jdW1lbnRRdWVyeX1cbiAgICAgICAgICAgICAgICAgICAgICBzaG93Q2x1c3Rlcj17c2hvd0NsdXN0ZXIgPT09IHN0b3J5LmlkfVxuICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNob3dDbHVzdGVyPXt0b2dnbGVTaG93Q2x1c3Rlcn1cbiAgICAgICAgICAgICAgICAgICAgICBpc0ZlZWRiYWNrTW9kZT17aXNGZWVkYmFja01vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgcXVlcnlJZD17cXVlcnlJZH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICB7aXNNb2JpbGUgJiYgaW5kZXhTdG9yeSA9PT0gZ2V0RGlzY292ZXJ5UGFuZWxJbmRleChzdG9yaWVzLCBoYXNNb3JlKSAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxEaXNjb3ZlcnlQYW5lbE1vYmlsZVxuICAgICAgICAgICAgICAgICAgICAgIG9uQWRkVG9XYXRjaGxpc3Q9e29uQWRkVG9XYXRjaGxpc3R9XG4gICAgICAgICAgICAgICAgICAgICAgaXNGZWVkYmFja01vZGU9e2lzRmVlZGJhY2tNb2RlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgeyFzdG9yaWVzLmxlbmd0aCAmJiAhaGFzTW9yZSA/IChcbiAgICAgICAgICA8TG9hZGluZ01vcmU+Tm8gcmVzdWx0cyBtYXRjaGluZyB5b3VyIHF1ZXJ5PC9Mb2FkaW5nTW9yZT5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICA8L1JwSnNvbkFubm90YXRpb25TdHlsZXM+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IHsgU3RvcnlDYXJkc0NvbnRhaW5lciB9XG4iXSwibmFtZXMiOlsiU3RvcnlDYXJkc0NvbnRhaW5lciIsImdldERpc2NvdmVyeVBhbmVsSW5kZXgiLCJzdG9yaWVzIiwiaGFzTW9yZSIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJsb2FkaW5nIiwiZmV0Y2hOZXh0UGFnZSIsImluZmluaXRlU2Nyb2xsQ29udGFpbmVyUmVmIiwiY2xhc3NOYW1lIiwiaGlnaGxpZ2h0cyIsInRvZ2dsZVNob3dDbHVzdGVyIiwic2hvd0NsdXN0ZXIiLCJrZXl3b3JkcyIsInNlYXJjaFF1ZXJ5IiwiZG9jdW1lbnRRdWVyeSIsImlzRmVlZGJhY2tNb2RlIiwicXVlcnlJZCIsIm9uQWRkVG9XYXRjaGxpc3QiLCJpc01vYmlsZSIsInVzZURldmljZUluZm8iLCJkaXYiLCJyZWYiLCJScEpzb25Bbm5vdGF0aW9uU3R5bGVzIiwiSW5maW5pdGVMaXN0IiwiaXRlbXMiLCJyb290TWFyZ2luIiwicmVuZGVySXRlbSIsInN0b3J5IiwiaW5kZXhTdG9yeSIsImlzQ2h1bmtTdG9yeSIsIkNodW5rU3RvcnlDYXJkIiwiaW5kZXgiLCJxdWVyeSIsImlkIiwiU3RvcnlDYXJkIiwiRGlzY292ZXJ5UGFuZWxNb2JpbGUiLCJMb2FkaW5nTW9yZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXOzs7OzsrQkErRkZBOzs7ZUFBQUE7Ozs7MEJBOUZvQjtxQ0FDQTt1QkFDQztnQ0FDTzt3QkFDRTsyQkFFYjtnQ0FDSzswQ0FFSDtBQUk1QixNQUFNQyx5QkFBeUIsQ0FBQ0MsU0FBeUJDO0lBQ3ZELElBQUlBLFNBQVMsT0FBTztJQUNwQixPQUFPQyxLQUFLQyxHQUFHLENBQUNILFFBQVFJLE1BQU0sR0FBRyxHQUFHO0FBQ3RDO0FBRUEsTUFBTU4sc0JBQXNCLENBQUMsRUFDM0JFLE9BQU8sRUFDUEssT0FBTyxFQUNQSixPQUFPLEVBQ1BLLGFBQWEsRUFDYkMsMEJBQTBCLEVBQzFCQyxTQUFTLEVBQ1RDLGFBQWEsRUFBRSxFQUNmQyxpQkFBaUIsRUFDakJDLFdBQVcsRUFDWEMsV0FBVyxFQUFFLEVBQ2JDLGNBQWMsQ0FBQyxDQUFDLEVBQ2hCQyxhQUFhLEVBQ2JDLGlCQUFpQixLQUFLLEVBQ3RCQyxPQUFPLEVBQ1BDLGdCQUFnQixFQUNHO0lBQ25CLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdDLElBQUFBLG9CQUFhO0lBRWxDLHFCQUNFLHFCQUFDQztRQUFJWixXQUFXQTtRQUFXYSxLQUFLZDtrQkFDOUIsY0FBQSxzQkFBQ2UsOEJBQXNCO1lBQUNiLFlBQVlBOzs4QkFDbEMscUJBQUNXO29CQUFJWixXQUFVOzhCQUNiLGNBQUEscUJBQUNlLGlDQUFZO3dCQUNYQyxPQUFPeEI7d0JBQ1BLLFNBQVNBO3dCQUNUSixTQUFTQTt3QkFDVHdCLFlBQVc7d0JBQ1huQixlQUFlQTt3QkFDZm9CLFlBQVksQ0FBQ0MsT0FBT0M7NEJBQ2xCLHFCQUNFOztvQ0FDR0MsSUFBQUEsc0JBQVksRUFBQ0YsdUJBQ1oscUJBQUNHLDhCQUFjO3dDQUNibEIsVUFBVUE7d0NBQ1ZlLE9BQU9BO3dDQUNQSSxPQUFPSDt3Q0FDUEksT0FBT25CO3dDQUNQQyxlQUFlQTt3Q0FDZkgsYUFBYUEsZ0JBQWdCZ0IsTUFBTU0sRUFBRTt3Q0FDckN2QixtQkFBbUJBO3dDQUNuQkssZ0JBQWdCQTt3Q0FDaEJDLFNBQVNBO3VEQUdYLHFCQUFDa0Isb0JBQVM7d0NBQ1J0QixVQUFVQTt3Q0FDVmUsT0FBT0E7d0NBQ1BJLE9BQU9IO3dDQUNQSSxPQUFPbkI7d0NBQ1BDLGVBQWVBO3dDQUNmSCxhQUFhQSxnQkFBZ0JnQixNQUFNTSxFQUFFO3dDQUNyQ3ZCLG1CQUFtQkE7d0NBQ25CSyxnQkFBZ0JBO3dDQUNoQkMsU0FBU0E7O29DQUdaRSxZQUFZVSxlQUFlN0IsdUJBQXVCQyxTQUFTQywwQkFDMUQscUJBQUNrQyxvQ0FBb0I7d0NBQ25CbEIsa0JBQWtCQTt3Q0FDbEJGLGdCQUFnQkE7Ozs7d0JBSzFCOzs7Z0JBR0gsQ0FBQ2YsUUFBUUksTUFBTSxJQUFJLENBQUNILHdCQUNuQixxQkFBQ21DLHFDQUFXOzhCQUFDO3FCQUNYOzs7O0FBSVoifQ==