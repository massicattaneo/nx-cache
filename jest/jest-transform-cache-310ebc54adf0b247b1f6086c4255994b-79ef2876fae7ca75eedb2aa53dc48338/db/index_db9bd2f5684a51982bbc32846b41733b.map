{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/unist-util-position/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n"],"names":["pointEnd","pointStart","position","point","type","node","line","column","offset","undefined","start","end"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;;CAaC,GAED;;;;;;;CAOC;;;;;;;;;;;IACYA,QAAQ;eAARA;;IAUAC,UAAU;eAAVA;;IAgDGC,QAAQ;eAARA;;;AA1DT,MAAMF,WAAWG,MAAM;AAUvB,MAAMF,aAAaE,MAAM;AAEhC;;;;;;;CAOC,GACD,SAASA,MAAMC,IAAI;IACjB,OAAOD;IAEP;;;;;GAKC,GACD,SAASA,MAAME,IAAI;QACjB,MAAMF,QAAQ,AAACE,QAAQA,KAAKH,QAAQ,IAAIG,KAAKH,QAAQ,CAACE,KAAK,IAAK,CAAC;QAEjE,IACE,OAAOD,MAAMG,IAAI,KAAK,YACtBH,MAAMG,IAAI,GAAG,KACb,OAAOH,MAAMI,MAAM,KAAK,YACxBJ,MAAMI,MAAM,GAAG,GACf;YACA,OAAO;gBACLD,MAAMH,MAAMG,IAAI;gBAChBC,QAAQJ,MAAMI,MAAM;gBACpBC,QACE,OAAOL,MAAMK,MAAM,KAAK,YAAYL,MAAMK,MAAM,GAAG,CAAC,IAChDL,MAAMK,MAAM,GACZC;YACR;QACF;IACF;AACF;AAUO,SAASP,SAASG,IAAI;IAC3B,MAAMK,QAAQT,WAAWI;IACzB,MAAMM,MAAMX,SAASK;IAErB,IAAIK,SAASC,KAAK;QAChB,OAAO;YAACD;YAAOC;QAAG;IACpB;AACF"}