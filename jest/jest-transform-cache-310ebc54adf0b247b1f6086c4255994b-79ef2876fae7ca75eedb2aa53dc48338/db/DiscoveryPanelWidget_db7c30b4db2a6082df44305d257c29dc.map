{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/discovery-sidebar/discovery-panel/src/DiscoveryPanel/DiscoveryPanelWidget.tsx"],"sourcesContent":["import { CqsItem } from \"@rp/common/api-types\"\nimport { Watchlist } from \"@rp/common/api-types\"\nimport {\n  CategoryWidgetActions,\n  GenericGroup,\n  WidgetCategory,\n} from \"@rp/react/web/common/discovery-sidebar\"\nimport { MentionsPanel, MentionsPanelMobile } from \"@rp/react/web/common/discovery-sidebar\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { useQueryContext } from \"@rp/react/web/common/providers\"\nimport { tagManagerEvents } from \"@rp/react/web/common/vendors/utils\"\nimport { convertDiscoveryPanelItem } from \"@rp/react/web/cqs-query-context\"\n\ntype DiscoveryPanelWidgetProps = {\n  widgetCategory: WidgetCategory\n  widgetActions: CategoryWidgetActions\n  mentionsItem?: CqsItem | undefined\n  setMentionItem?: (category: string, value: CqsItem | undefined) => void\n  scrollToWidgetTop?: () => void\n  onAddToWatchlist?: (watchlist: Watchlist) => void\n  isFeedbackMode: boolean\n}\n\nconst DiscoveryPanelWidget = ({\n  widgetCategory,\n  widgetActions,\n  mentionsItem,\n  setMentionItem,\n  scrollToWidgetTop,\n  onAddToWatchlist,\n  isFeedbackMode,\n}: DiscoveryPanelWidgetProps) => {\n  const { isMobile } = useDeviceInfo()\n\n  const {\n    actions: { expression: queryCQSActions },\n    savedQuery: { saveStatus },\n    queryId,\n  } = useQueryContext()\n\n  const handleOnChange = (element: CqsItem) => {\n    const shouldRemove = element.queryRelationship === \"direct\"\n\n    tagManagerEvents.queryRefinement({\n      action: shouldRemove ? \"remove\" : \"add\",\n      component: \"discoveryPanel\",\n      queryId,\n      queryType: element.queryType,\n      savedStatus: saveStatus ?? \"unsaved\",\n    })\n\n    const filterItem = convertDiscoveryPanelItem(element)\n    if (shouldRemove) {\n      queryCQSActions.removeItem(filterItem)\n      return\n    }\n    queryCQSActions.addItem(filterItem)\n  }\n\n  const handleExclude = (element: CqsItem) => {\n    const shouldUpdate = element.queryRelationship === \"direct\"\n\n    tagManagerEvents.queryRefinement({\n      action: shouldUpdate ? \"changeOperation\" : \"add\",\n      component: \"discoveryPanel\",\n      queryId,\n      queryType: element.queryType,\n      savedStatus: saveStatus ?? \"unsaved\",\n    })\n\n    const filterItem = convertDiscoveryPanelItem(element)\n    queryCQSActions.excludeItemFromDP(filterItem, !shouldUpdate)\n  }\n\n  return mentionsItem !== undefined ? (\n    <div>\n      {isMobile ? (\n        <MentionsPanelMobile\n          isFeedbackMode={isFeedbackMode}\n          title={widgetCategory.label}\n          rowData={mentionsItem}\n          handleClose={() => setMentionItem?.(widgetCategory.id, undefined)}\n          onChange={() => handleOnChange(mentionsItem)}\n        />\n      ) : (\n        <MentionsPanel\n          isFeedbackMode={isFeedbackMode}\n          title={widgetCategory.label}\n          rowData={mentionsItem}\n          handleClose={() => setMentionItem?.(widgetCategory.id, undefined)}\n          onChange={() => handleOnChange(mentionsItem)}\n          onAddToWatchlist={onAddToWatchlist}\n          onExclude={handleExclude}\n        />\n      )}\n    </div>\n  ) : (\n    <GenericGroup\n      key={widgetCategory.label}\n      widgetCategory={widgetCategory}\n      onChange={handleOnChange}\n      onClick={(item: CqsItem) => {\n        setMentionItem?.(widgetCategory.id, item)\n        scrollToWidgetTop?.()\n      }}\n      onExclude={handleExclude}\n      widgetActions={widgetActions}\n      onAddToWatchlist={onAddToWatchlist}\n    />\n  )\n}\n\nexport { DiscoveryPanelWidget }\nexport type { DiscoveryPanelWidgetProps }\n"],"names":["DiscoveryPanelWidget","widgetCategory","widgetActions","mentionsItem","setMentionItem","scrollToWidgetTop","onAddToWatchlist","isFeedbackMode","isMobile","useDeviceInfo","actions","expression","queryCQSActions","savedQuery","saveStatus","queryId","useQueryContext","handleOnChange","element","shouldRemove","queryRelationship","tagManagerEvents","queryRefinement","action","component","queryType","savedStatus","filterItem","convertDiscoveryPanelItem","removeItem","addItem","handleExclude","shouldUpdate","excludeItemFromDP","undefined","div","MentionsPanelMobile","title","label","rowData","handleClose","id","onChange","MentionsPanel","onExclude","GenericGroup","onClick","item"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgHSA;;;eAAAA;;;;kCA1GF;uBAEuB;2BACE;uBACC;iCACS;AAY1C,MAAMA,uBAAuB,CAAC,EAC5BC,cAAc,EACdC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,iBAAiB,EACjBC,gBAAgB,EAChBC,cAAc,EACY;IAC1B,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAElC,MAAM,EACJC,SAAS,EAAEC,YAAYC,eAAe,EAAE,EACxCC,YAAY,EAAEC,UAAU,EAAE,EAC1BC,OAAO,EACR,GAAGC,IAAAA,0BAAe;IAEnB,MAAMC,iBAAiB,CAACC;QACtB,MAAMC,eAAeD,QAAQE,iBAAiB,KAAK;QAEnDC,uBAAgB,CAACC,eAAe,CAAC;YAC/BC,QAAQJ,eAAe,WAAW;YAClCK,WAAW;YACXT;YACAU,WAAWP,QAAQO,SAAS;YAC5BC,aAAaZ,uBAAAA,wBAAAA,aAAc;QAC7B;QAEA,MAAMa,aAAaC,IAAAA,0CAAyB,EAACV;QAC7C,IAAIC,cAAc;YAChBP,gBAAgBiB,UAAU,CAACF;YAC3B;QACF;QACAf,gBAAgBkB,OAAO,CAACH;IAC1B;IAEA,MAAMI,gBAAgB,CAACb;QACrB,MAAMc,eAAed,QAAQE,iBAAiB,KAAK;QAEnDC,uBAAgB,CAACC,eAAe,CAAC;YAC/BC,QAAQS,eAAe,oBAAoB;YAC3CR,WAAW;YACXT;YACAU,WAAWP,QAAQO,SAAS;YAC5BC,aAAaZ,uBAAAA,wBAAAA,aAAc;QAC7B;QAEA,MAAMa,aAAaC,IAAAA,0CAAyB,EAACV;QAC7CN,gBAAgBqB,iBAAiB,CAACN,YAAY,CAACK;IACjD;IAEA,OAAO7B,iBAAiB+B,0BACtB,qBAACC;kBACE3B,yBACC,qBAAC4B,qCAAmB;YAClB7B,gBAAgBA;YAChB8B,OAAOpC,eAAeqC,KAAK;YAC3BC,SAASpC;YACTqC,aAAa,IAAMpC,2BAAAA,qCAAAA,eAAiBH,eAAewC,EAAE,EAAEP;YACvDQ,UAAU,IAAMzB,eAAed;2BAGjC,qBAACwC,+BAAa;YACZpC,gBAAgBA;YAChB8B,OAAOpC,eAAeqC,KAAK;YAC3BC,SAASpC;YACTqC,aAAa,IAAMpC,2BAAAA,qCAAAA,eAAiBH,eAAewC,EAAE,EAAEP;YACvDQ,UAAU,IAAMzB,eAAed;YAC/BG,kBAAkBA;YAClBsC,WAAWb;;uBAKjB,qBAACc,8BAAY;QAEX5C,gBAAgBA;QAChByC,UAAUzB;QACV6B,SAAS,CAACC;YACR3C,2BAAAA,qCAAAA,eAAiBH,eAAewC,EAAE,EAAEM;YACpC1C,8BAAAA,wCAAAA;QACF;QACAuC,WAAWb;QACX7B,eAAeA;QACfI,kBAAkBA;OATbL,eAAeqC,KAAK;AAY/B"}