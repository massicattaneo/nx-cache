{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/hooks/useWatchlistsDataTabsFeatureFlag.ts"],"sourcesContent":["import { useCallback } from \"react\"\nimport { useAtom } from \"jotai\"\nimport { atomWithStorage } from \"jotai/utils\"\nimport { z } from \"zod\"\nimport { environment } from \"@rp/common/environment\"\nimport { ConfigEnvs } from \"@rp/common/environment/types\"\nimport { financeDataTabTablesSchema } from \"../financeDataTabTablesSchema\"\n\n/**\n * WatchlistDataTabs Feature Flag System\n *\n * This module controls which financial data tabs are available to users through a combination of:\n * 1. Environment-specific defaults\n * 2. User entitlements (especially \"chat:pricing\")\n * 3. Local storage persistence\n * 4. Admin controls\n *\n * ## Default Tab Availability\n *\n * By default, different environments expose different sets of data tabs:\n *\n * - **Internal Environment**: All 17 tabs available (includes smartGrid)\n * - **Production/Staging/Development**: 16 tabs available (includes custom, excludes smartGrid by default)\n *\n * The `active` array below defines the standard production set of tabs.\n *\n * ## Entitlement Requirements\n *\n * ### \"chat:pricing\" Entitlement\n *\n * Users must have the \"chat:pricing\" entitlement to access premium financial data tabs.\n * Without this entitlement:\n *\n * - Users see 5 entities and a unlock banners instead of data for premium tabs\n * - Financial data API requests are NOT yet blocked server-side\n * - Export functionality is restricted\n * - Advanced metrics are hidden\n *\n * ### Tab Access Levels\n *\n * - **Free Access**: pricing & sentiment\n * - **Premium Access (requires \"chat:pricing\")**: All financial tabs with full features\n *\n * ## Usage Integration\n *\n * This hook integrates with:\n * - WatchlistDataTabsToggles component for tab rendering\n * - Entitlement system for access control\n * - Feature flag admin tools\n * - Environment configuration\n */\n\ntype List = z.infer<typeof financeDataTabTablesSchema>\n\nconst WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY = \"watchlists.activeDataTabs\"\n\n/**\n * Standard production tab set (16 tabs)\n * Includes \"custom\" which is controlled by LaunchDarkly feature flag webBeEnableCustomDataViewsWe\n * Excludes \"smartGrid\" which is available only in internal environment by default\n * All tabs listed here require \"chat:pricing\" entitlement for full feature access\n */\nconst active = [\n  \"custom\" as const,\n  \"pricing\" as const,\n  \"sentiment\" as const,\n  \"earningsSurprise\" as const,\n  \"analysts\" as const,\n  \"incomeStatement\" as const,\n  \"cashFlow\" as const,\n  \"balanceSheet\" as const,\n  \"valuation\" as const,\n  \"returns\" as const,\n  \"perShare\" as const,\n  \"liquidity\" as const,\n  \"margins\" as const,\n  \"capitalSpending\" as const,\n  \"operationalEfficiency\" as const,\n  \"incomeQuality\" as const,\n]\n\n/**\n * Environment-specific default tab configurations\n *\n * - internal (localhost): All possible tabs (financeDataTabTablesSchema.options) - includes smartGrid\n * - development/staging/production: Standard set (active array) - includes custom, excludes smartGrid by default\n *\n * Note: Individual users can still enable/disable tabs via localStorage overrides\n * Admin tools can also modify these defaults per environment\n */\nconst activeDefault: Record<ConfigEnvs, Array<List>> = {\n  internal: financeDataTabTablesSchema.options,\n  development: active,\n  staging: active,\n  production: active,\n}\n\nconst atomFlags = atomWithStorage(\n  WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY,\n  activeDefault[environment.name] || [],\n)\n\n/**\n * Hook for managing watchlist data tab feature flags\n *\n * @returns {[Array<List>, Function, Function]} Tuple containing:\n * - active: Current array of enabled tab names\n * - setActive: Function to update active tabs\n * - restoreDefaults: Function to reset to environment defaults\n *\n * Usage:\n * ```typescript\n * const [activeTabs, setActiveTabs, restoreDefaults] = useWatchlistsDataTabsFeatureFlag()\n *\n * // Check if a specific tab is enabled\n * const isPricingEnabled = activeTabs.includes(\"pricing\")\n *\n * // Enable a new tab\n * setActiveTabs(prev => [...prev, \"newTab\"])\n *\n * // Reset to environment defaults\n * restoreDefaults()\n * ```\n *\n * Note: This hook only controls tab visibility. Access to tab data still requires\n * appropriate entitlements (e.g., \"chat:pricing\") which are validated server-side.\n */\nfunction useWatchlistsDataTabsFeatureFlag() {\n  const [active, setActive] = useAtom(atomFlags)\n  const restoreDefaults = useCallback(() => {\n    setActive(activeDefault[environment.name] || [])\n  }, [setActive])\n  return [active, setActive, restoreDefaults] as const\n}\n\nexport { useWatchlistsDataTabsFeatureFlag, WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY }\n"],"names":["WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY","useWatchlistsDataTabsFeatureFlag","active","activeDefault","internal","financeDataTabTablesSchema","options","development","staging","production","atomFlags","atomWithStorage","environment","name","setActive","useAtom","restoreDefaults","useCallback"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAuI2CA,sCAAsC;eAAtCA;;IAAlCC,gCAAgC;eAAhCA;;;uBAvImB;uBACJ;uBACQ;6BAEJ;4CAEe;AAgD3C,MAAMD,yCAAyC;AAE/C;;;;;CAKC,GACD,MAAME,SAAS;IACb;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED;;;;;;;;CAQC,GACD,MAAMC,gBAAiD;IACrDC,UAAUC,sDAA0B,CAACC,OAAO;IAC5CC,aAAaL;IACbM,SAASN;IACTO,YAAYP;AACd;AAEA,MAAMQ,YAAYC,IAAAA,sBAAe,EAC/BX,wCACAG,aAAa,CAACS,wBAAW,CAACC,IAAI,CAAC,IAAI,EAAE;AAGvC;;;;;;;;;;;;;;;;;;;;;;;;CAwBC,GACD,SAASZ;IACP,MAAM,CAACC,QAAQY,UAAU,GAAGC,IAAAA,cAAO,EAACL;IACpC,MAAMM,kBAAkBC,IAAAA,kBAAW,EAAC;QAClCH,UAAUX,aAAa,CAACS,wBAAW,CAACC,IAAI,CAAC,IAAI,EAAE;IACjD,GAAG;QAACC;KAAU;IACd,OAAO;QAACZ;QAAQY;QAAWE;KAAgB;AAC7C"}