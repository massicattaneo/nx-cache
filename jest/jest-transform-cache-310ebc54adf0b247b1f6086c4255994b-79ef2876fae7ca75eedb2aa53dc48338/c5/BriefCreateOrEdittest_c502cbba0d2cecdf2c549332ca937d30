886cfde373c81b21de86200ec187110b
"use strict";
jest.mock("@rp/react/web/brief", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/web/brief")), {
        usePreloadForCreateBriefFromWatchlistScreen: jest.fn(),
        usePreloadForEditBrief: jest.fn(),
        useBriefCreateOrEditSteps: jest.fn(),
        useCreateBriefCallbacks: jest.fn()
    }));
jest.mock("@rp/react/tanstack-api/watchlist", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/tanstack-api/watchlist")), {
        useWatchlist: jest.fn(),
        useAllWatchlists: jest.fn()
    }));
jest.mock("@rp/react/tanstack-api/brief", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/tanstack-api/brief")), {
        useUserBriefConfigs: jest.fn(),
        useBriefConfigById: jest.fn()
    }));
jest.mock("react-router-dom", ()=>_object_spread_props(_object_spread({}, jest.requireActual("react-router-dom")), {
        useNavigate: ()=>mockNavigate
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "mockWatchlists", {
    enumerable: true,
    get: function() {
        return mockWatchlists;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _brief = require("@rp/react/tanstack-api/brief");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _brief1 = require("@rp/react/web/brief");
const _tools = require("@rp/react/web/common/tools");
const _dom = require("@testing-library/dom");
const _BriefCreateOrEdit = require("./BriefCreateOrEdit");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const mockUseBriefCreateOrEditSteps = _brief1.useBriefCreateOrEditSteps;
const mockUseCreateBriefCallbacks = _brief1.useCreateBriefCallbacks;
const mockUseWatchlist = _watchlist.useWatchlist;
const mockUseAllWatchlists = _watchlist.useAllWatchlists;
const mockUseUserBriefConfigs = _brief.useUserBriefConfigs;
const mockUseBriefConfigById = _brief.useBriefConfigById;
const mockNavigate = jest.fn();
beforeEach(jest.clearAllMocks);
describe("BriefCreateOrEdit", ()=>{
    describe("rendering", ()=>{
        describe("empty data", ()=>{
            beforeEach(()=>{
                mockUseWatchlist.mockReturnValue({
                    data: [],
                    isError: false,
                    isLoading: false
                });
                mockUseUserBriefConfigs.mockReturnValue({
                    data: [],
                    isError: false,
                    isLoading: false
                });
                mockUseAllWatchlists.mockReturnValue({
                    data: [],
                    isLoading: false
                });
                mockUseBriefConfigById.mockReturnValue({
                    data: _brief.mockBriefConfigs[0],
                    isError: false,
                    isLoading: false
                });
                mockUseBriefCreateOrEditSteps.mockReturnValue({
                    step: mockStep,
                    setActiveStep: ()=>{},
                    activeStep: 0,
                    numSteps: 3
                });
                mockUseCreateBriefCallbacks.mockReturnValue({
                    isSaving: false
                });
                (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {}));
            });
            it("should not have loading spinner", ()=>{
                expect(_dom.screen.queryByTestId("loading-spinner-container")).not.toBeInTheDocument();
            });
            it("should have header", ()=>{
                expect(_dom.screen.getByRole("header", {
                    name: "brief page header"
                })).toBeInTheDocument();
            });
            it('should not have "brief limit reached" component', ()=>{
                expect(_dom.screen.queryByRole("article", {
                    name: "brief limit reached"
                })).not.toBeInTheDocument();
            });
            it('should have brief stepper container"', ()=>{
                expect(_dom.screen.getByRole("article", {
                    name: "brief stepper container"
                })).toBeInTheDocument();
            });
        });
        describe("loading", ()=>{
            describe("when isLoadingWatchlistPreload is true", ()=>{
                beforeEach(()=>{
                    mockUseWatchlist.mockReturnValue({
                        data: [],
                        isError: false,
                        isLoading: true
                    });
                    mockUseUserBriefConfigs.mockReturnValue({
                        data: [],
                        isError: false,
                        isLoading: false
                    });
                    mockUseBriefConfigById.mockReturnValue({
                        data: undefined,
                        isError: false,
                        isLoading: false
                    });
                    mockUseAllWatchlists.mockReturnValue({
                        data: [],
                        isLoading: false
                    });
                    mockUseBriefCreateOrEditSteps.mockReturnValue({
                        step: mockStep,
                        setActiveStep: ()=>{},
                        activeStep: 0,
                        numSteps: 3
                    });
                    mockUseCreateBriefCallbacks.mockReturnValue({
                        isSaving: false
                    });
                    (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {}));
                });
                it("should have header", ()=>{
                    expect(_dom.screen.queryByRole("header", {
                        name: "brief page header"
                    })).not.toBeInTheDocument();
                });
                it('should not have "brief limit reached" component', ()=>{
                    expect(_dom.screen.queryByRole("article", {
                        name: "brief limit reached"
                    })).not.toBeInTheDocument();
                });
                it('should have brief stepper container"', ()=>{
                    expect(_dom.screen.queryByRole("article", {
                        name: "brief stepper container"
                    })).not.toBeInTheDocument();
                });
            });
        });
        describe("with data", ()=>{
            describe("at step 0", ()=>{
                beforeEach(()=>{
                    mockUseWatchlist.mockReturnValue({
                        data: mockWatchlists,
                        isError: false,
                        isLoading: false
                    });
                    mockUseUserBriefConfigs.mockReturnValue({
                        data: _brief.mockBriefConfigs.slice(0, 2),
                        isError: false,
                        isLoading: false
                    });
                    mockUseBriefConfigById.mockReturnValue({
                        data: _brief.mockBriefConfigs[0],
                        isError: false,
                        isLoading: false
                    });
                    mockUseAllWatchlists.mockReturnValue({
                        data: mockWatchlists,
                        isLoading: false
                    });
                    mockUseBriefCreateOrEditSteps.mockReturnValue({
                        step: mockStep,
                        setActiveStep: ()=>{},
                        activeStep: 0,
                        numSteps: 3
                    });
                    mockUseCreateBriefCallbacks.mockReturnValue({
                        isSaving: false
                    });
                    (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {
                        isEdit: true
                    }));
                });
                it("should have loading spinner", ()=>{
                    expect(_dom.screen.queryByTestId("loading-spinner-container")).not.toBeInTheDocument();
                });
                it("should have header", async ()=>{
                    expect(_dom.screen.getByRole("header", {
                        name: "brief page header"
                    })).toBeInTheDocument();
                });
                it('should not have "brief limit reached" component', ()=>{
                    expect(_dom.screen.queryByRole("article", {
                        name: "brief limit reached"
                    })).not.toBeInTheDocument();
                });
                it('should have brief stepper container"', ()=>{
                    expect(_dom.screen.getByRole("article", {
                        name: "brief stepper container"
                    })).toBeInTheDocument();
                });
                it("should have variable styling on stepper container", ()=>{
                    expect(_dom.screen.getByRole("article", {
                        name: "brief stepper container"
                    })).toHaveStyle({
                        "margin-bottom": "60px",
                        "padding-bottom": "40px"
                    });
                });
            });
            describe("not at step 0", ()=>{
                beforeEach(()=>{
                    mockUseWatchlist.mockReturnValue({
                        data: mockWatchlists,
                        isError: false
                    });
                    mockUseUserBriefConfigs.mockReturnValue({
                        data: _brief.mockBriefConfigs.slice(0, 2),
                        isError: false
                    });
                    mockUseBriefConfigById.mockReturnValue({
                        data: _brief.mockBriefConfigs[0],
                        isError: false,
                        isLoading: false
                    });
                    mockUseAllWatchlists.mockReturnValue({
                        data: mockWatchlists,
                        isLoading: false
                    });
                    mockUseBriefCreateOrEditSteps.mockReturnValue({
                        step: mockStep,
                        setActiveStep: ()=>{},
                        activeStep: 1,
                        numSteps: 3
                    });
                    mockUseCreateBriefCallbacks.mockReturnValue({
                        isSaving: false
                    });
                    (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {
                        isEdit: true
                    }));
                });
                it("should have loading spinner", ()=>{
                    expect(_dom.screen.queryByTestId("loading-spinner-container")).not.toBeInTheDocument();
                });
                it("should have header", ()=>{
                    expect(_dom.screen.getByRole("header", {
                        name: "brief page header"
                    })).toBeInTheDocument();
                });
                it('should not have "brief limit reached" component', ()=>{
                    expect(_dom.screen.queryByRole("article", {
                        name: "brief limit reached"
                    })).not.toBeInTheDocument();
                });
                it('should have brief stepper container"', ()=>{
                    expect(_dom.screen.getByRole("article", {
                        name: "brief stepper container"
                    })).toBeInTheDocument();
                });
                it("should have variable styling on stepper container", ()=>{
                    expect(_dom.screen.getByRole("article", {
                        name: "brief stepper container"
                    })).toHaveStyle({
                        "margin-bottom": undefined,
                        "padding-bottom": undefined
                    });
                });
            });
            describe("on last step", ()=>{
                describe("when saving", ()=>{
                    beforeEach(()=>{
                        mockUseWatchlist.mockReturnValue({
                            data: mockWatchlists,
                            isError: false
                        });
                        mockUseUserBriefConfigs.mockReturnValue({
                            data: _brief.mockBriefConfigs.slice(0, 2),
                            isError: false
                        });
                        mockUseBriefConfigById.mockReturnValue({
                            data: _brief.mockBriefConfigs[0],
                            isError: false,
                            isLoading: false
                        });
                        mockUseAllWatchlists.mockReturnValue({
                            data: mockWatchlists,
                            isLoading: false
                        });
                        mockUseBriefCreateOrEditSteps.mockReturnValue({
                            step: mockStep,
                            setActiveStep: ()=>{},
                            activeStep: 2,
                            numSteps: 3
                        });
                        mockUseCreateBriefCallbacks.mockReturnValue({
                            isSaving: true
                        });
                        (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {
                            isEdit: true
                        }));
                    });
                    it("should complete button with spinner", ()=>{
                        expect((0, _dom.within)(_dom.screen.getByTestId("vertical-scroll-stepper-footer-button")).getByRole("progressbar")).toBeInTheDocument();
                    });
                });
                describe("when not saving, creating", ()=>{
                    beforeEach(()=>{
                        mockUseWatchlist.mockReturnValue({
                            data: mockWatchlists,
                            isError: false
                        });
                        mockUseUserBriefConfigs.mockReturnValue({
                            data: _brief.mockBriefConfigs.slice(0, 2),
                            isError: false
                        });
                        mockUseBriefConfigById.mockReturnValue({
                            data: _brief.mockBriefConfigs[0],
                            isError: false,
                            isLoading: false
                        });
                        mockUseAllWatchlists.mockReturnValue({
                            data: mockWatchlists,
                            isLoading: false
                        });
                        mockUseBriefCreateOrEditSteps.mockReturnValue({
                            step: mockStep,
                            setActiveStep: ()=>{},
                            activeStep: 2,
                            numSteps: 3
                        });
                        mockUseCreateBriefCallbacks.mockReturnValue({
                            isSaving: false
                        });
                        (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {
                            isEdit: false
                        }));
                    });
                    it("should complete button with spinner", ()=>{
                        expect(_dom.screen.getByTestId("vertical-scroll-stepper-footer-button")).toHaveTextContent("Create Brief");
                    });
                });
            });
        });
        describe("with data, exceed brief limit", ()=>{
            beforeEach(()=>{
                mockUseWatchlist.mockReturnValue({
                    data: mockWatchlists,
                    isError: false
                });
                mockUseUserBriefConfigs.mockReturnValue({
                    data: _brief.mockBriefConfigs,
                    isError: false
                });
                mockUseBriefConfigById.mockReturnValue({
                    data: _brief.mockBriefConfigs[0],
                    isError: false,
                    isLoading: false
                });
                mockUseAllWatchlists.mockReturnValue({
                    data: mockWatchlists,
                    isLoading: false
                });
                mockUseBriefCreateOrEditSteps.mockReturnValue({
                    step: mockStep,
                    setActiveStep: ()=>{},
                    activeStep: 1,
                    numSteps: 3
                });
                mockUseCreateBriefCallbacks.mockReturnValue({
                    isSaving: false
                });
                (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {
                    isEdit: false
                }));
            });
            it("should have loading spinner", ()=>{
                expect(_dom.screen.queryByTestId("loading-spinner-container")).not.toBeInTheDocument();
            });
            it("should have header", ()=>{
                expect(_dom.screen.getByRole("header", {
                    name: "brief page header"
                })).toBeInTheDocument();
            });
            it('should have "brief limit reached" component', ()=>{
                expect(_dom.screen.getByRole("article", {
                    name: "brief limit reached"
                })).toBeInTheDocument();
            });
            it('should not have brief stepper container"', ()=>{
                expect(_dom.screen.queryByRole("article", {
                    name: "brief stepper container"
                })).not.toBeInTheDocument();
            });
            it("should not have submit button with correct text", ()=>{
                expect(_dom.screen.queryByRole("button", {
                    name: "Next"
                })).not.toBeInTheDocument();
            });
        });
    });
    describe("functionality", ()=>{
        describe("click back", ()=>{
            beforeEach(()=>{
                mockUseWatchlist.mockReturnValue({
                    data: [],
                    isError: false
                });
                mockUseUserBriefConfigs.mockReturnValue({
                    data: [],
                    isError: false
                });
                mockUseBriefConfigById.mockReturnValue({
                    data: _brief.mockBriefConfigs[0],
                    isError: false,
                    isLoading: false
                });
                mockUseAllWatchlists.mockReturnValue({
                    data: [],
                    isLoading: false
                });
                (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefCreateOrEdit.BriefCreateOrEdit, {}));
                _dom.fireEvent.click(_dom.screen.getByRole("button", {
                    name: "back"
                }));
            });
            mockUseCreateBriefCallbacks.mockReturnValue({
                isSaving: false
            });
            it("should call navigate with correct param", ()=>{
                expect(mockNavigate).toHaveBeenCalledTimes(1);
                expect(mockNavigate).toHaveBeenCalledWith(-1);
            });
        });
    });
});
const mockStep = {
    component: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
        children: "this step"
    }),
    getIsStepDisabled: ()=>false,
    type: "watchlists"
};
const mockWatchlists = [
    {
        id: "id_123",
        name: "Watchlist 0",
        items: [
            "item1",
            "item2"
        ],
        ownerUserId: "user_0",
        dateCreated: "2021-09-01T00:00:00.000Z",
        lastUpdated: "2021-09-01T00:00:00.000Z",
        lastInteracted: "2021-09-01T00:00:00.000Z",
        ownerName: "John Doe",
        shared: {
            company: {
                organizationId: "org_2222",
                permission: "undefined"
            },
            users: []
        },
        isClientWatchlist: true,
        description: "description",
        imageUrl: "imageUrl",
        category: [
            "category"
        ],
        global: {
            type: "community",
            status: "archived",
            statusLastUpdated: "2021-09-01T00:00:00.000Z",
            isFeatured: true,
            author: {
                name: "John Doe",
                avatarUrl: "avatarUrl"
            }
        }
    },
    {
        id: "id_12345",
        name: "Watchlist 1",
        items: [
            "item1",
            "item2"
        ],
        ownerUserId: "user_0",
        dateCreated: "2021-09-01T00:00:00.000Z",
        lastUpdated: "2021-09-01T00:00:00.000Z",
        lastInteracted: "2021-09-01T00:00:00.000Z",
        ownerName: "John Doe",
        shared: {
            company: {
                organizationId: "org_1111",
                permission: "undefined"
            },
            users: []
        },
        isClientWatchlist: true,
        description: "description",
        imageUrl: "imageUrl",
        category: [
            "category"
        ],
        global: {
            type: "community",
            status: "archived",
            statusLastUpdated: "2021-09-01T00:00:00.000Z",
            isFeatured: true,
            author: {
                name: "John Doe",
                avatarUrl: "avatarUrl"
            }
        }
    }
];

//# sourceMappingURL=data:application/json;base64,