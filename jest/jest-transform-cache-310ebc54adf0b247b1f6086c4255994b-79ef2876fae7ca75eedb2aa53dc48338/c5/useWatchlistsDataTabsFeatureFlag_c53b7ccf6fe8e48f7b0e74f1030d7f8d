50a5573d72a5ab07879803e9f3b865cc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY: function() {
        return WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY;
    },
    useWatchlistsDataTabsFeatureFlag: function() {
        return useWatchlistsDataTabsFeatureFlag;
    }
});
const _react = require("react");
const _jotai = require("jotai");
const _utils = require("jotai/utils");
const _environment = require("@rp/common/environment");
const _financeDataTabTablesSchema = require("../financeDataTabTablesSchema");
const WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY = "watchlists.activeDataTabs";
/**
 * Standard production tab set (16 tabs)
 * Includes "custom" which is controlled by LaunchDarkly feature flag webBeEnableCustomDataViewsWe
 * Excludes "smartGrid" which is available only in internal environment by default
 * All tabs listed here require "chat:pricing" entitlement for full feature access
 */ const active = [
    "custom",
    "pricing",
    "sentiment",
    "earningsSurprise",
    "analysts",
    "incomeStatement",
    "cashFlow",
    "balanceSheet",
    "valuation",
    "returns",
    "perShare",
    "liquidity",
    "margins",
    "capitalSpending",
    "operationalEfficiency",
    "incomeQuality"
];
/**
 * Environment-specific default tab configurations
 *
 * - internal (localhost): All possible tabs (financeDataTabTablesSchema.options) - includes smartGrid
 * - development/staging/production: Standard set (active array) - includes custom, excludes smartGrid by default
 *
 * Note: Individual users can still enable/disable tabs via localStorage overrides
 * Admin tools can also modify these defaults per environment
 */ const activeDefault = {
    internal: _financeDataTabTablesSchema.financeDataTabTablesSchema.options,
    development: active,
    staging: active,
    production: active
};
const atomFlags = (0, _utils.atomWithStorage)(WATCHLISTS_DATA_TABS_LOCAL_STORAGE_KEY, activeDefault[_environment.environment.name] || []);
/**
 * Hook for managing watchlist data tab feature flags
 *
 * @returns {[Array<List>, Function, Function]} Tuple containing:
 * - active: Current array of enabled tab names
 * - setActive: Function to update active tabs
 * - restoreDefaults: Function to reset to environment defaults
 *
 * Usage:
 * ```typescript
 * const [activeTabs, setActiveTabs, restoreDefaults] = useWatchlistsDataTabsFeatureFlag()
 *
 * // Check if a specific tab is enabled
 * const isPricingEnabled = activeTabs.includes("pricing")
 *
 * // Enable a new tab
 * setActiveTabs(prev => [...prev, "newTab"])
 *
 * // Reset to environment defaults
 * restoreDefaults()
 * ```
 *
 * Note: This hook only controls tab visibility. Access to tab data still requires
 * appropriate entitlements (e.g., "chat:pricing") which are validated server-side.
 */ function useWatchlistsDataTabsFeatureFlag() {
    const [active, setActive] = (0, _jotai.useAtom)(atomFlags);
    const restoreDefaults = (0, _react.useCallback)(()=>{
        setActive(activeDefault[_environment.environment.name] || []);
    }, [
        setActive
    ]);
    return [
        active,
        setActive,
        restoreDefaults
    ];
}

//# sourceMappingURL=data:application/json;base64,