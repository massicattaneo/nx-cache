a70713f9057c9fd7ba77e4ab8b05fa02
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useWatchlistFiltering", {
    enumerable: true,
    get: function() {
        return useWatchlistFiltering;
    }
});
const _react = require("react");
const _constants = require("../constants");
function filterMyWatchlists(watchlists, userId) {
    return watchlists.filter((watchlist)=>watchlist.ownerUserId === userId);
}
function filterOrganizationWatchlists(watchlists, userId) {
    return watchlists.filter((watchlist)=>{
        var _watchlist_shared_company, _watchlist_shared;
        const hasCompanyPermission = ((_watchlist_shared = watchlist.shared) === null || _watchlist_shared === void 0 ? void 0 : (_watchlist_shared_company = _watchlist_shared.company) === null || _watchlist_shared_company === void 0 ? void 0 : _watchlist_shared_company.permission) !== "undefined";
        const isNotOwnedByUser = watchlist.ownerUserId !== userId;
        return hasCompanyPermission && isNotOwnedByUser;
    });
}
function filterCommunityWatchlists(watchlists) {
    return watchlists.filter((watchlist)=>{
        var _watchlist_global, _watchlist_global1;
        const isPublished = ((_watchlist_global = watchlist.global) === null || _watchlist_global === void 0 ? void 0 : _watchlist_global.status) === "published";
        const isCommunityType = ((_watchlist_global1 = watchlist.global) === null || _watchlist_global1 === void 0 ? void 0 : _watchlist_global1.type) === "community";
        return isPublished && isCommunityType;
    });
}
function filterThematicWatchlists(watchlists) {
    return watchlists.filter((watchlist)=>{
        var _watchlist_global, _watchlist_global1;
        const isPublished = ((_watchlist_global = watchlist.global) === null || _watchlist_global === void 0 ? void 0 : _watchlist_global.status) === "published";
        const isThematicType = ((_watchlist_global1 = watchlist.global) === null || _watchlist_global1 === void 0 ? void 0 : _watchlist_global1.type) === "thematic";
        return isPublished && isThematicType;
    });
}
function useWatchlistFiltering({ allWatchlists, activeTab, userId, isSearching }) {
    const filteredWatchlists = (0, _react.useMemo)(()=>{
        if (!allWatchlists.length) return _constants.EMPTY_WATCHLISTS;
        // If searching, return all watchlists (search will be applied in BriefUserWatchlists)
        if (isSearching) {
            return allWatchlists;
        }
        // Otherwise, filter by active tab
        switch(activeTab){
            case "my-watchlists":
                return filterMyWatchlists(allWatchlists, userId);
            case "public-watchlists":
                return filterOrganizationWatchlists(allWatchlists, userId);
            case "community-watchlists":
                return filterCommunityWatchlists(allWatchlists);
            case "thematic-watchlists":
                return filterThematicWatchlists(allWatchlists);
            case "favorites":
                return allWatchlists.filter((watchlist)=>watchlist.isFavorite);
            default:
                return _constants.EMPTY_WATCHLISTS;
        }
    }, [
        allWatchlists,
        activeTab,
        userId,
        isSearching
    ]);
    return {
        filteredWatchlists
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9jb21wb25lbnRzL2JyaWVmU3RlcHMvQnJpZWZXYXRjaGxpc3RTZWxlY3Rpb25TdGVwL2hvb2tzL3VzZVdhdGNobGlzdEZpbHRlcmluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IFdhdGNobGlzdCB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBXYXRjaGxpc3RzVGFiIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvd2F0Y2hsaXN0c1wiXG5pbXBvcnQgeyBFTVBUWV9XQVRDSExJU1RTIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiXG5cbnR5cGUgVXNlV2F0Y2hsaXN0RmlsdGVyaW5nUGFyYW1zID0ge1xuICBhbGxXYXRjaGxpc3RzOiBBcnJheTxXYXRjaGxpc3Q+XG4gIGFjdGl2ZVRhYjogV2F0Y2hsaXN0c1RhYlxuICB1c2VySWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxuICBpc1NlYXJjaGluZzogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBmaWx0ZXJNeVdhdGNobGlzdHMod2F0Y2hsaXN0czogQXJyYXk8V2F0Y2hsaXN0PiwgdXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgcmV0dXJuIHdhdGNobGlzdHMuZmlsdGVyKHdhdGNobGlzdCA9PiB3YXRjaGxpc3Qub3duZXJVc2VySWQgPT09IHVzZXJJZClcbn1cblxuZnVuY3Rpb24gZmlsdGVyT3JnYW5pemF0aW9uV2F0Y2hsaXN0cyh3YXRjaGxpc3RzOiBBcnJheTxXYXRjaGxpc3Q+LCB1c2VySWQ6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICByZXR1cm4gd2F0Y2hsaXN0cy5maWx0ZXIod2F0Y2hsaXN0ID0+IHtcbiAgICBjb25zdCBoYXNDb21wYW55UGVybWlzc2lvbiA9IHdhdGNobGlzdC5zaGFyZWQ/LmNvbXBhbnk/LnBlcm1pc3Npb24gIT09IFwidW5kZWZpbmVkXCJcbiAgICBjb25zdCBpc05vdE93bmVkQnlVc2VyID0gd2F0Y2hsaXN0Lm93bmVyVXNlcklkICE9PSB1c2VySWRcblxuICAgIHJldHVybiBoYXNDb21wYW55UGVybWlzc2lvbiAmJiBpc05vdE93bmVkQnlVc2VyXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbW11bml0eVdhdGNobGlzdHMod2F0Y2hsaXN0czogQXJyYXk8V2F0Y2hsaXN0Pikge1xuICByZXR1cm4gd2F0Y2hsaXN0cy5maWx0ZXIod2F0Y2hsaXN0ID0+IHtcbiAgICBjb25zdCBpc1B1Ymxpc2hlZCA9IHdhdGNobGlzdC5nbG9iYWw/LnN0YXR1cyA9PT0gXCJwdWJsaXNoZWRcIlxuICAgIGNvbnN0IGlzQ29tbXVuaXR5VHlwZSA9IHdhdGNobGlzdC5nbG9iYWw/LnR5cGUgPT09IFwiY29tbXVuaXR5XCJcblxuICAgIHJldHVybiBpc1B1Ymxpc2hlZCAmJiBpc0NvbW11bml0eVR5cGVcbiAgfSlcbn1cblxuZnVuY3Rpb24gZmlsdGVyVGhlbWF0aWNXYXRjaGxpc3RzKHdhdGNobGlzdHM6IEFycmF5PFdhdGNobGlzdD4pIHtcbiAgcmV0dXJuIHdhdGNobGlzdHMuZmlsdGVyKHdhdGNobGlzdCA9PiB7XG4gICAgY29uc3QgaXNQdWJsaXNoZWQgPSB3YXRjaGxpc3QuZ2xvYmFsPy5zdGF0dXMgPT09IFwicHVibGlzaGVkXCJcbiAgICBjb25zdCBpc1RoZW1hdGljVHlwZSA9IHdhdGNobGlzdC5nbG9iYWw/LnR5cGUgPT09IFwidGhlbWF0aWNcIlxuXG4gICAgcmV0dXJuIGlzUHVibGlzaGVkICYmIGlzVGhlbWF0aWNUeXBlXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VXYXRjaGxpc3RGaWx0ZXJpbmcoe1xuICBhbGxXYXRjaGxpc3RzLFxuICBhY3RpdmVUYWIsXG4gIHVzZXJJZCxcbiAgaXNTZWFyY2hpbmcsXG59OiBVc2VXYXRjaGxpc3RGaWx0ZXJpbmdQYXJhbXMpIHtcbiAgY29uc3QgZmlsdGVyZWRXYXRjaGxpc3RzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFhbGxXYXRjaGxpc3RzLmxlbmd0aCkgcmV0dXJuIEVNUFRZX1dBVENITElTVFNcblxuICAgIC8vIElmIHNlYXJjaGluZywgcmV0dXJuIGFsbCB3YXRjaGxpc3RzIChzZWFyY2ggd2lsbCBiZSBhcHBsaWVkIGluIEJyaWVmVXNlcldhdGNobGlzdHMpXG4gICAgaWYgKGlzU2VhcmNoaW5nKSB7XG4gICAgICByZXR1cm4gYWxsV2F0Y2hsaXN0c1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZmlsdGVyIGJ5IGFjdGl2ZSB0YWJcbiAgICBzd2l0Y2ggKGFjdGl2ZVRhYikge1xuICAgICAgY2FzZSBcIm15LXdhdGNobGlzdHNcIjpcbiAgICAgICAgcmV0dXJuIGZpbHRlck15V2F0Y2hsaXN0cyhhbGxXYXRjaGxpc3RzLCB1c2VySWQpXG4gICAgICBjYXNlIFwicHVibGljLXdhdGNobGlzdHNcIjpcbiAgICAgICAgcmV0dXJuIGZpbHRlck9yZ2FuaXphdGlvbldhdGNobGlzdHMoYWxsV2F0Y2hsaXN0cywgdXNlcklkKVxuICAgICAgY2FzZSBcImNvbW11bml0eS13YXRjaGxpc3RzXCI6XG4gICAgICAgIHJldHVybiBmaWx0ZXJDb21tdW5pdHlXYXRjaGxpc3RzKGFsbFdhdGNobGlzdHMpXG4gICAgICBjYXNlIFwidGhlbWF0aWMtd2F0Y2hsaXN0c1wiOlxuICAgICAgICByZXR1cm4gZmlsdGVyVGhlbWF0aWNXYXRjaGxpc3RzKGFsbFdhdGNobGlzdHMpXG4gICAgICBjYXNlIFwiZmF2b3JpdGVzXCI6XG4gICAgICAgIHJldHVybiBhbGxXYXRjaGxpc3RzLmZpbHRlcih3YXRjaGxpc3QgPT4gd2F0Y2hsaXN0LmlzRmF2b3JpdGUpXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gRU1QVFlfV0FUQ0hMSVNUU1xuICAgIH1cbiAgfSwgW2FsbFdhdGNobGlzdHMsIGFjdGl2ZVRhYiwgdXNlcklkLCBpc1NlYXJjaGluZ10pXG5cbiAgcmV0dXJuIHsgZmlsdGVyZWRXYXRjaGxpc3RzIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VXYXRjaGxpc3RGaWx0ZXJpbmciLCJmaWx0ZXJNeVdhdGNobGlzdHMiLCJ3YXRjaGxpc3RzIiwidXNlcklkIiwiZmlsdGVyIiwid2F0Y2hsaXN0Iiwib3duZXJVc2VySWQiLCJmaWx0ZXJPcmdhbml6YXRpb25XYXRjaGxpc3RzIiwiaGFzQ29tcGFueVBlcm1pc3Npb24iLCJzaGFyZWQiLCJjb21wYW55IiwicGVybWlzc2lvbiIsImlzTm90T3duZWRCeVVzZXIiLCJmaWx0ZXJDb21tdW5pdHlXYXRjaGxpc3RzIiwiaXNQdWJsaXNoZWQiLCJnbG9iYWwiLCJzdGF0dXMiLCJpc0NvbW11bml0eVR5cGUiLCJ0eXBlIiwiZmlsdGVyVGhlbWF0aWNXYXRjaGxpc3RzIiwiaXNUaGVtYXRpY1R5cGUiLCJhbGxXYXRjaGxpc3RzIiwiYWN0aXZlVGFiIiwiaXNTZWFyY2hpbmciLCJmaWx0ZXJlZFdhdGNobGlzdHMiLCJ1c2VNZW1vIiwibGVuZ3RoIiwiRU1QVFlfV0FUQ0hMSVNUUyIsImlzRmF2b3JpdGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkEyQ2dCQTs7O2VBQUFBOzs7dUJBM0NROzJCQUdTO0FBU2pDLFNBQVNDLG1CQUFtQkMsVUFBNEIsRUFBRUMsTUFBMEI7SUFDbEYsT0FBT0QsV0FBV0UsTUFBTSxDQUFDQyxDQUFBQSxZQUFhQSxVQUFVQyxXQUFXLEtBQUtIO0FBQ2xFO0FBRUEsU0FBU0ksNkJBQTZCTCxVQUE0QixFQUFFQyxNQUEwQjtJQUM1RixPQUFPRCxXQUFXRSxNQUFNLENBQUNDLENBQUFBO1lBQ01BLDJCQUFBQTtRQUE3QixNQUFNRyx1QkFBdUJILEVBQUFBLG9CQUFBQSxVQUFVSSxNQUFNLGNBQWhCSix5Q0FBQUEsNEJBQUFBLGtCQUFrQkssT0FBTyxjQUF6QkwsZ0RBQUFBLDBCQUEyQk0sVUFBVSxNQUFLO1FBQ3ZFLE1BQU1DLG1CQUFtQlAsVUFBVUMsV0FBVyxLQUFLSDtRQUVuRCxPQUFPSyx3QkFBd0JJO0lBQ2pDO0FBQ0Y7QUFFQSxTQUFTQywwQkFBMEJYLFVBQTRCO0lBQzdELE9BQU9BLFdBQVdFLE1BQU0sQ0FBQ0MsQ0FBQUE7WUFDSEEsbUJBQ0lBO1FBRHhCLE1BQU1TLGNBQWNULEVBQUFBLG9CQUFBQSxVQUFVVSxNQUFNLGNBQWhCVix3Q0FBQUEsa0JBQWtCVyxNQUFNLE1BQUs7UUFDakQsTUFBTUMsa0JBQWtCWixFQUFBQSxxQkFBQUEsVUFBVVUsTUFBTSxjQUFoQlYseUNBQUFBLG1CQUFrQmEsSUFBSSxNQUFLO1FBRW5ELE9BQU9KLGVBQWVHO0lBQ3hCO0FBQ0Y7QUFFQSxTQUFTRSx5QkFBeUJqQixVQUE0QjtJQUM1RCxPQUFPQSxXQUFXRSxNQUFNLENBQUNDLENBQUFBO1lBQ0hBLG1CQUNHQTtRQUR2QixNQUFNUyxjQUFjVCxFQUFBQSxvQkFBQUEsVUFBVVUsTUFBTSxjQUFoQlYsd0NBQUFBLGtCQUFrQlcsTUFBTSxNQUFLO1FBQ2pELE1BQU1JLGlCQUFpQmYsRUFBQUEscUJBQUFBLFVBQVVVLE1BQU0sY0FBaEJWLHlDQUFBQSxtQkFBa0JhLElBQUksTUFBSztRQUVsRCxPQUFPSixlQUFlTTtJQUN4QjtBQUNGO0FBRU8sU0FBU3BCLHNCQUFzQixFQUNwQ3FCLGFBQWEsRUFDYkMsU0FBUyxFQUNUbkIsTUFBTSxFQUNOb0IsV0FBVyxFQUNpQjtJQUM1QixNQUFNQyxxQkFBcUJDLElBQUFBLGNBQU8sRUFBQztRQUNqQyxJQUFJLENBQUNKLGNBQWNLLE1BQU0sRUFBRSxPQUFPQywyQkFBZ0I7UUFFbEQsc0ZBQXNGO1FBQ3RGLElBQUlKLGFBQWE7WUFDZixPQUFPRjtRQUNUO1FBRUEsa0NBQWtDO1FBQ2xDLE9BQVFDO1lBQ04sS0FBSztnQkFDSCxPQUFPckIsbUJBQW1Cb0IsZUFBZWxCO1lBQzNDLEtBQUs7Z0JBQ0gsT0FBT0ksNkJBQTZCYyxlQUFlbEI7WUFDckQsS0FBSztnQkFDSCxPQUFPVSwwQkFBMEJRO1lBQ25DLEtBQUs7Z0JBQ0gsT0FBT0YseUJBQXlCRTtZQUNsQyxLQUFLO2dCQUNILE9BQU9BLGNBQWNqQixNQUFNLENBQUNDLENBQUFBLFlBQWFBLFVBQVV1QixVQUFVO1lBQy9EO2dCQUNFLE9BQU9ELDJCQUFnQjtRQUMzQjtJQUNGLEdBQUc7UUFBQ047UUFBZUM7UUFBV25CO1FBQVFvQjtLQUFZO0lBRWxELE9BQU87UUFBRUM7SUFBbUI7QUFDOUIifQ==