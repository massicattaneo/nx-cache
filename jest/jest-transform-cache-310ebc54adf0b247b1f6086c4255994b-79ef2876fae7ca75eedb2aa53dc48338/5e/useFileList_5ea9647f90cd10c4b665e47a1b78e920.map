{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/files/src/lib/useFileList.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\"\nimport { FilesInfiniteOwnership, isFileStatusCompleted } from \"@rp/common/utils\"\nimport { FileRowType } from \"@rp/common/utils\"\nimport { useDebouncedState } from \"@rp/react/common/hooks\"\nimport { useUploadFilesContext } from \"@rp/react/common/providers\"\nimport { PrivateSharedContentOwner, useInfiniteFiles } from \"@rp/react/tanstack-api/file\"\nimport { usePageWithListSorter } from \"@rp/react/web/common/hooks\"\nimport { mapServerFilesForTable, mapUploadingFilesForTable, removeDuplicates } from \"./files.utils\"\n\ntype UseFileListProps = {\n  filterTerm: string\n  shared?: boolean\n  ownership?: FilesInfiniteOwnership\n  ownersSelected?: Array<{ value: string; label: string }>\n  ownersList?: Array<PrivateSharedContentOwner>\n}\n\nconst useFileList = ({\n  filterTerm,\n  shared,\n  ownership,\n  ownersSelected,\n  ownersList,\n}: UseFileListProps) => {\n  const [fileName, setDebounceFilterTerm] = useDebouncedState(filterTerm, 300)\n  const { sortBy, direction, onChange } = usePageWithListSorter(\"files\")\n  const {\n    isLoading: isLoadingFiles,\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isPlaceholderData,\n  } = useInfiniteFiles({\n    sortBy,\n    direction,\n    shared,\n    fileName,\n    ownership,\n    ownersSelected,\n    ownersList,\n  })\n\n  const { uploading, uploadError, doneIds } = useUploadFilesContext()\n  const rawFiles = useMemo(() => {\n    return data?.pages.flatMap(page => page.results) ?? []\n  }, [data])\n\n  const allFiles = useMemo(() => {\n    if (shared) return mapServerFilesForTable(rawFiles)\n    const serverFiles = mapServerFilesForTable(rawFiles)\n    const uploadingFiles = mapUploadingFilesForTable(uploading)\n    const errorFiles = mapUploadingFilesForTable(uploadError)\n    const filteredDone = serverFiles.map((file: FileRowType) => {\n      if (doneIds[file.id]) {\n        if (file.status === \"completed\") {\n          const fileCopy = { ...file }\n          fileCopy.status = \"done\"\n          return fileCopy\n        }\n      }\n      return file\n    })\n\n    const files = removeDuplicates<FileRowType>(\n      [...uploadingFiles, ...filteredDone].filter(file =>\n        errorFiles.every(error => error.id !== file.id),\n      ),\n      \"id\",\n    )\n\n    return files\n  }, [shared, rawFiles, uploading, uploadError, doneIds])\n\n  useEffect(() => {\n    setDebounceFilterTerm(filterTerm)\n  }, [filterTerm, setDebounceFilterTerm])\n\n  const completedFiltered = allFiles.filter(file => isFileStatusCompleted(file.status))\n\n  return {\n    isLoadingFiles,\n    filteredFiles: allFiles,\n    allFiles,\n    sortBy,\n    direction,\n    onChange,\n    uploading,\n    rawFiles,\n    completedFiltered,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isPlaceholderData: isPlaceholderData || fileName !== filterTerm,\n  }\n}\n\nexport { useFileList }\n"],"names":["useFileList","filterTerm","shared","ownership","ownersSelected","ownersList","fileName","setDebounceFilterTerm","useDebouncedState","sortBy","direction","onChange","usePageWithListSorter","isLoading","isLoadingFiles","data","fetchNextPage","hasNextPage","isFetchingNextPage","isPlaceholderData","useInfiniteFiles","uploading","uploadError","doneIds","useUploadFilesContext","rawFiles","useMemo","pages","flatMap","page","results","allFiles","mapServerFilesForTable","serverFiles","uploadingFiles","mapUploadingFilesForTable","errorFiles","filteredDone","map","file","id","status","fileCopy","files","removeDuplicates","filter","every","error","useEffect","completedFiltered","isFileStatusCompleted","filteredFiles"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAiGSA;;;eAAAA;;;uBAjG0B;uBAC2B;uBAE5B;2BACI;sBACsB;wBACtB;4BAC8C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUpF,MAAMA,cAAc,CAAC,EACnBC,UAAU,EACVC,MAAM,EACNC,SAAS,EACTC,cAAc,EACdC,UAAU,EACO;IACjB,MAAM,CAACC,UAAUC,sBAAsB,GAAGC,IAAAA,wBAAiB,EAACP,YAAY;IACxE,MAAM,EAAEQ,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,6BAAqB,EAAC;IAC9D,MAAM,EACJC,WAAWC,cAAc,EACzBC,IAAI,EACJC,aAAa,EACbC,WAAW,EACXC,kBAAkB,EAClBC,iBAAiB,EAClB,GAAGC,IAAAA,sBAAgB,EAAC;QACnBX;QACAC;QACAR;QACAI;QACAH;QACAC;QACAC;IACF;IAEA,MAAM,EAAEgB,SAAS,EAAEC,WAAW,EAAEC,OAAO,EAAE,GAAGC,IAAAA,gCAAqB;IACjE,MAAMC,WAAWC,IAAAA,cAAO,EAAC;YAChBX;QAAP,OAAOA,CAAAA,sBAAAA,iBAAAA,2BAAAA,KAAMY,KAAK,CAACC,OAAO,CAACC,CAAAA,OAAQA,KAAKC,OAAO,eAAxCf,iCAAAA,sBAA6C,EAAE;IACxD,GAAG;QAACA;KAAK;IAET,MAAMgB,WAAWL,IAAAA,cAAO,EAAC;QACvB,IAAIxB,QAAQ,OAAO8B,IAAAA,kCAAsB,EAACP;QAC1C,MAAMQ,cAAcD,IAAAA,kCAAsB,EAACP;QAC3C,MAAMS,iBAAiBC,IAAAA,qCAAyB,EAACd;QACjD,MAAMe,aAAaD,IAAAA,qCAAyB,EAACb;QAC7C,MAAMe,eAAeJ,YAAYK,GAAG,CAAC,CAACC;YACpC,IAAIhB,OAAO,CAACgB,KAAKC,EAAE,CAAC,EAAE;gBACpB,IAAID,KAAKE,MAAM,KAAK,aAAa;oBAC/B,MAAMC,WAAW,mBAAKH;oBACtBG,SAASD,MAAM,GAAG;oBAClB,OAAOC;gBACT;YACF;YACA,OAAOH;QACT;QAEA,MAAMI,QAAQC,IAAAA,4BAAgB,EAC5B;eAAIV;eAAmBG;SAAa,CAACQ,MAAM,CAACN,CAAAA,OAC1CH,WAAWU,KAAK,CAACC,CAAAA,QAASA,MAAMP,EAAE,KAAKD,KAAKC,EAAE,IAEhD;QAGF,OAAOG;IACT,GAAG;QAACzC;QAAQuB;QAAUJ;QAAWC;QAAaC;KAAQ;IAEtDyB,IAAAA,gBAAS,EAAC;QACRzC,sBAAsBN;IACxB,GAAG;QAACA;QAAYM;KAAsB;IAEtC,MAAM0C,oBAAoBlB,SAASc,MAAM,CAACN,CAAAA,OAAQW,IAAAA,4BAAqB,EAACX,KAAKE,MAAM;IAEnF,OAAO;QACL3B;QACAqC,eAAepB;QACfA;QACAtB;QACAC;QACAC;QACAU;QACAI;QACAwB;QACAjC;QACAC;QACAC;QACAC,mBAAmBA,qBAAqBb,aAAaL;IACvD;AACF"}