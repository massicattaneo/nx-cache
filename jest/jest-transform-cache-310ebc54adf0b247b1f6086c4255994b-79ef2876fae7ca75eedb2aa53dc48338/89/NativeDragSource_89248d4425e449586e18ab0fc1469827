58911c123cecd9f8294632893d95bb0c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NativeDragSource", {
    enumerable: true,
    get: function() {
        return NativeDragSource;
    }
});
class NativeDragSource {
    initializeExposedProperties() {
        Object.keys(this.config.exposeProperties).forEach((property)=>{
            Object.defineProperty(this.item, property, {
                configurable: true,
                enumerable: true,
                get () {
                    // eslint-disable-next-line no-console
                    console.warn(`Browser doesn't allow reading "${property}" until the drop event.`);
                    return null;
                }
            });
        });
    }
    loadDataTransfer(dataTransfer) {
        if (dataTransfer) {
            const newProperties = {};
            Object.keys(this.config.exposeProperties).forEach((property)=>{
                const propertyFn = this.config.exposeProperties[property];
                if (propertyFn != null) {
                    newProperties[property] = {
                        value: propertyFn(dataTransfer, this.config.matchesTypes),
                        configurable: true,
                        enumerable: true
                    };
                }
            });
            Object.defineProperties(this.item, newProperties);
        }
    }
    canDrag() {
        return true;
    }
    beginDrag() {
        return this.item;
    }
    isDragging(monitor, handle) {
        return handle === monitor.getSourceId();
    }
    endDrag() {
    // empty
    }
    constructor(config){
        this.config = config;
        this.item = {};
        this.initializeExposedProperties();
    }
} //# sourceMappingURL=NativeDragSource.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9OYXRpdmVEcmFnU291cmNlcy9OYXRpdmVEcmFnU291cmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRHJhZ0Ryb3BNb25pdG9yIH0gZnJvbSAnZG5kLWNvcmUnXG5cbmltcG9ydCB0eXBlIHsgTmF0aXZlSXRlbUNvbmZpZyB9IGZyb20gJy4vbmF0aXZlVHlwZXNDb25maWcuanMnXG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVEcmFnU291cmNlIHtcblx0cHVibGljIGl0ZW06IGFueVxuXHRwcml2YXRlIGNvbmZpZzogTmF0aXZlSXRlbUNvbmZpZ1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihjb25maWc6IE5hdGl2ZUl0ZW1Db25maWcpIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZ1xuXHRcdHRoaXMuaXRlbSA9IHt9XG5cdFx0dGhpcy5pbml0aWFsaXplRXhwb3NlZFByb3BlcnRpZXMoKVxuXHR9XG5cblx0cHJpdmF0ZSBpbml0aWFsaXplRXhwb3NlZFByb3BlcnRpZXMoKSB7XG5cdFx0T2JqZWN0LmtleXModGhpcy5jb25maWcuZXhwb3NlUHJvcGVydGllcykuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLml0ZW0sIHByb3BlcnR5LCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSwgLy8gVGhpcyBpcyBuZWVkZWQgdG8gYWxsb3cgcmVkZWZpbmluZyBpdCBsYXRlclxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRnZXQoKSB7XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFx0XHRgQnJvd3NlciBkb2Vzbid0IGFsbG93IHJlYWRpbmcgXCIke3Byb3BlcnR5fVwiIHVudGlsIHRoZSBkcm9wIGV2ZW50LmAsXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdHJldHVybiBudWxsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KVxuXHRcdH0pXG5cdH1cblxuXHRwdWJsaWMgbG9hZERhdGFUcmFuc2ZlcihkYXRhVHJhbnNmZXI6IERhdGFUcmFuc2ZlciB8IG51bGwgfCB1bmRlZmluZWQpOiB2b2lkIHtcblx0XHRpZiAoZGF0YVRyYW5zZmVyKSB7XG5cdFx0XHRjb25zdCBuZXdQcm9wZXJ0aWVzOiBQcm9wZXJ0eURlc2NyaXB0b3JNYXAgPSB7fVxuXHRcdFx0T2JqZWN0LmtleXModGhpcy5jb25maWcuZXhwb3NlUHJvcGVydGllcykuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcblx0XHRcdFx0Y29uc3QgcHJvcGVydHlGbiA9IHRoaXMuY29uZmlnLmV4cG9zZVByb3BlcnRpZXNbcHJvcGVydHldXG5cdFx0XHRcdGlmIChwcm9wZXJ0eUZuICE9IG51bGwpIHtcblx0XHRcdFx0XHRuZXdQcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IHtcblx0XHRcdFx0XHRcdHZhbHVlOiBwcm9wZXJ0eUZuKGRhdGFUcmFuc2ZlciwgdGhpcy5jb25maWcubWF0Y2hlc1R5cGVzKSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy5pdGVtLCBuZXdQcm9wZXJ0aWVzKVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBjYW5EcmFnKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0cnVlXG5cdH1cblxuXHRwdWJsaWMgYmVnaW5EcmFnKCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMuaXRlbVxuXHR9XG5cblx0cHVibGljIGlzRHJhZ2dpbmcobW9uaXRvcjogRHJhZ0Ryb3BNb25pdG9yLCBoYW5kbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBoYW5kbGUgPT09IG1vbml0b3IuZ2V0U291cmNlSWQoKVxuXHR9XG5cblx0cHVibGljIGVuZERyYWcoKTogdm9pZCB7XG5cdFx0Ly8gZW1wdHlcblx0fVxufVxuIl0sIm5hbWVzIjpbIk5hdGl2ZURyYWdTb3VyY2UiLCJpbml0aWFsaXplRXhwb3NlZFByb3BlcnRpZXMiLCJPYmplY3QiLCJrZXlzIiwiY29uZmlnIiwiZXhwb3NlUHJvcGVydGllcyIsImZvckVhY2giLCJwcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiaXRlbSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJjb25zb2xlIiwid2FybiIsImxvYWREYXRhVHJhbnNmZXIiLCJkYXRhVHJhbnNmZXIiLCJuZXdQcm9wZXJ0aWVzIiwicHJvcGVydHlGbiIsInZhbHVlIiwibWF0Y2hlc1R5cGVzIiwiZGVmaW5lUHJvcGVydGllcyIsImNhbkRyYWciLCJiZWdpbkRyYWciLCJpc0RyYWdnaW5nIiwibW9uaXRvciIsImhhbmRsZSIsImdldFNvdXJjZUlkIiwiZW5kRHJhZyIsImNvbnN0cnVjdG9yIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBSWFBOzs7ZUFBQUE7OztBQUFOLE1BQU1BO0lBVVpDLDhCQUFzQztRQUNyQ0MsT0FBT0MsSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxnQkFBZ0IsRUFBRUMsT0FBTyxDQUFDLENBQUNDO1lBQ2xETCxPQUFPTSxjQUFjLENBQUMsSUFBSSxDQUFDQyxJQUFJLEVBQUVGLFVBQVU7Z0JBQzFDRyxjQUFjO2dCQUNkQyxZQUFZO2dCQUNaQztvQkFDQyxzQ0FBc0M7b0JBQ3RDQyxRQUFRQyxJQUFJLENBQ1gsQ0FBQywrQkFBK0IsRUFBRVAsU0FBUyx1QkFBdUIsQ0FBQztvQkFFcEUsT0FBTzs7Ozs7SUFNWFEsaUJBQXdCQyxZQUE2QyxFQUFRO1FBQzVFLElBQUlBLGNBQWM7WUFDakIsTUFBTUMsZ0JBQXVDLENBQUE7WUFDN0NmLE9BQU9DLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsZ0JBQWdCLEVBQUVDLE9BQU8sQ0FBQyxDQUFDQztnQkFDbEQsTUFBTVcsYUFBYSxJQUFJLENBQUNkLE1BQU0sQ0FBQ0MsZ0JBQWdCLENBQUNFLFNBQVM7Z0JBQ3pELElBQUlXLGNBQWMsTUFBTTtvQkFDdkJELGFBQWEsQ0FBQ1YsU0FBUyxHQUFHO3dCQUN6QlksT0FBT0QsV0FBV0YsY0FBYyxJQUFJLENBQUNaLE1BQU0sQ0FBQ2dCLFlBQVk7d0JBQ3hEVixjQUFjO3dCQUNkQyxZQUFZOzs7O1lBSWZULE9BQU9tQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNaLElBQUksRUFBRVE7OztJQUlyQ0ssVUFBMEI7UUFDekIsT0FBTzs7SUFHUkMsWUFBd0I7UUFDdkIsT0FBTyxJQUFJLENBQUNkLElBQUk7O0lBR2pCZSxXQUFrQkMsT0FBd0IsRUFBRUMsTUFBYyxFQUFXO1FBQ3BFLE9BQU9BLFdBQVdELFFBQVFFLFdBQVc7O0lBR3RDQyxVQUF1QjtJQUN0QixRQUFROztJQXBEVEMsWUFBbUJ6QixNQUF3QixDQUFFO1FBQzVDLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0ssSUFBSSxHQUFHLENBQUE7UUFDWixJQUFJLENBQUNSLDJCQUEyQiJ9