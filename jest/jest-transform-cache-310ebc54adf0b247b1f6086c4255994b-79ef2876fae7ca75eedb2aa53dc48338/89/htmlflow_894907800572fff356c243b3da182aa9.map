{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/html-flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n"],"names":["htmlFlow","name","tokenize","tokenizeHtmlFlow","resolveTo","resolveToHtmlFlow","concrete","blankLineBefore","tokenizeBlankLineBefore","partial","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","events","index","length","type","start","splice","effects","ok","nok","self","marker","closingTag","buffer","markerB","code","before","enter","consume","open","declarationOpen","tagCloseStart","interrupt","continuationDeclarationInside","asciiAlpha","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","value","charCodeAt","continuation","markdownLineEndingOrSpace","slash","toLowerCase","htmlRawNames","includes","htmlBlockNames","basicSelfClosing","parser","lazy","now","line","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","markdownSpace","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","markdownLineEnding","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","exit","check","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","after","attempt","blankLine"],"rangeMappingsmappings":"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"}