{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/swiper/modules/grid/grid.js"],"sourcesContent":["export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const getSpaceBetween = () => {\n    let spaceBetween = swiper.params.spaceBetween;\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\n    } else if (typeof spaceBetween === 'string') {\n      spaceBetween = parseFloat(spaceBetween);\n    }\n    return spaceBetween;\n  };\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n    slidesPerRow = slidesNumberEvenToRows / rows;\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.row = row;\n    slide.column = column;\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const spaceBetween = getSpaceBetween();\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}"],"names":["Grid","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","getSpaceBetween","spaceBetween","params","indexOf","parseFloat","replace","size","initSlides","slidesLength","slidesPerView","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","style","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","wrapperEl","newSlidesGrid","length","slidesGridItem","push","splice"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}