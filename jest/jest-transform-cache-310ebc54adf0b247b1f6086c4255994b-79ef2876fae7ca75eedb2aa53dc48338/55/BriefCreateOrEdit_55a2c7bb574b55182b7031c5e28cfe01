410c0aa00efee8fb81228c65694e5d2d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BriefCreateOrEdit", {
    enumerable: true,
    get: function() {
        return BriefCreateOrEdit;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _brief = require("@rp/react/common/brief");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _brief1 = require("@rp/react/tanstack-api/brief");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _brief2 = require("@rp/react/web/brief");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _headercomponents = require("@rp/react/web/common/header-components");
const _hooks1 = require("@rp/react/web/common/hooks");
const _providers1 = require("@rp/react/web/common/providers");
const _documentviewer = require("@rp/react/web/document-viewer");
const _core = require("@rp/react/web/mui/core");
const _router = require("@rp/react/web/router");
const BriefCreateOrEdit = ({ isEdit = false })=>{
    const navigate = (0, _reactrouterdom.useNavigate)();
    const queryParams = (0, _hooks1.useQueryParams)();
    const initialWatchlistId = queryParams.get("watchlist-id");
    const { form, initializeForm, setForm, setWatchlistId, setName } = (0, _brief.useBriefConfigForm)();
    const { data: watchlist, isError, isLoading } = (0, _watchlist.useWatchlist)(initialWatchlistId !== null && initialWatchlistId !== void 0 ? initialWatchlistId : undefined);
    const { enqueueError } = (0, _providers1.useSnackbar)();
    const { quota } = (0, _providers.useAccount)();
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    (0, _react.useEffect)(()=>{
        if (isError) {
            enqueueError("Unable to load indicated watchlist");
            navigate(_router.BRIEF_ROUTE);
        }
    }, [
        enqueueError,
        isError,
        navigate
    ]);
    const { data: briefConfigs } = (0, _brief1.useUserBriefConfigs)();
    const isAtBriefLimit = !isEdit && !!briefConfigs && briefConfigs.length >= _settings.BRIEF_CONFIG_LIMIT;
    const isLoadingWatchlistPreload = !!initialWatchlistId && !watchlist && isLoading;
    const { isLoadingInitialBriefData, initialBriefData } = (0, _brief.useGetBriefInitialData)({
        isEdit
    });
    const isLoadingBriefConfigPreload = isLoadingInitialBriefData && isEdit;
    (0, _react.useEffect)(()=>{
        window.document.body.classList.add("scrollYlScroll");
        if (isEdit) {
            if (!initialBriefData) return;
            setForm(initialBriefData);
        } else {
            initializeForm();
            if (watchlist) {
                setWatchlistId(watchlist.id);
                var _watchlist_name;
                setName((_watchlist_name = watchlist === null || watchlist === void 0 ? void 0 : watchlist.name) !== null && _watchlist_name !== void 0 ? _watchlist_name : "");
            }
        }
        return ()=>{
            window.document.body.classList.remove("scrollYlScroll");
        };
    }, [
        initialBriefData,
        initialWatchlistId,
        initializeForm,
        isEdit,
        setForm,
        setName,
        setWatchlistId,
        watchlist
    ]);
    const { step, activeStep, setActiveStep, numSteps } = (0, _brief2.useBriefCreateOrEditSteps)({
        isEdit,
        initialWatchlistId,
        isLoadingWatchlistPreload
    });
    const { handleComplete, isSaving } = (0, _brief2.useCreateBriefCallbacks)({
        initialWatchlistId,
        isEdit
    });
    const hasMetBriefLimit = (0, _hooks.useIsBriefLimitMet)(quota, briefConfigs);
    const { isLoadingWatchlistEntities, isFetchingWatchlistEntities, hasCompanies } = (0, _brief2.useCreateBriefWatchlistCheck)();
    if (isLoadingBriefConfigPreload || isLoadingWatchlistPreload || isLoading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {});
    }
    const submitText = isEdit ? "Edit Brief" : "Create Brief";
    const isNextDisabled = isSaving || step.getIsStepDisabled(form, hasCompanies) || isLoadingWatchlistEntities || isFetchingWatchlistEntities || isAtBriefLimit;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_basecomponents.PageWrapperStyled, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_headercomponents.HtmlPageHead, {
                title: "Brief"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_brief2.BriefPageHeader, {
                onBackButtonClick: ()=>navigate(-1),
                title: isEdit ? "Edit Brief" : "New Brief"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.CardGradientBackground, {}),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_documentviewer.DocumentViewerPage, {
                contentContainerProps: {
                    style: {
                        overflow: "visible"
                    }
                },
                backTitle: "",
                disableBackButton: true,
                children: isAtBriefLimit ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_brief2.BriefLimitReached, {
                    limit: _settings.BRIEF_CONFIG_LIMIT
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                    sx: {
                        [`& .${_compositecomponents.VERTICAL_SCROLL_STEP_CLASS_NAME}`]: {
                            paddingBottom: "32px"
                        },
                        [`& .${_compositecomponents.VERTICAL_SCROLL_STEP_CLASS_NAME}:last-of-type`]: {
                            paddingBottom: "120px"
                        },
                        marginBottom: activeStep === 0 ? "60px" : undefined,
                        paddingBottom: activeStep === 0 ? "40px" : undefined
                    },
                    role: "article",
                    "aria-label": "brief stepper container",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.VerticalScrollStepper, {
                        activeStep: activeStep,
                        handleComplete: ()=>{
                            hasMetBriefLimit ? planComparisonHandleOpen(_settings.BRIEF_FEATURE_NAME) : handleComplete();
                        },
                        completeButtonText: isSaving ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {
                            size: 16,
                            color: "inherit"
                        }) : submitText,
                        steps: numSteps,
                        title: "Schedule a Brief",
                        offsetTop: _settings.HEADER_HEIGHT,
                        nextDisabled: isNextDisabled,
                        onStepChange: setActiveStep,
                        isNextLoading: isFetchingWatchlistEntities,
                        children: step.component
                    })
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,