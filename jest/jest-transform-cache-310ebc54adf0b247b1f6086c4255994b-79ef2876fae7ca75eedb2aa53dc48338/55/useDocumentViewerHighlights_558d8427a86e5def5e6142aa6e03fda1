6f79a7da04709283addf752912ce9f31
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDocumentViewerHighlights", {
    enumerable: true,
    get: function() {
        return useDocumentViewerHighlights;
    }
});
const _react = require("react");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _documentviewer = require("@rp/react/web/common/document-viewer");
const useDocumentViewerHighlights = (expression, getHighlightStyle)=>{
    // Get the keywords from the expression
    const keywords = (0, _react.useMemo)(()=>expression ? (0, _userdataqueries.getExpressionIds)(expression, {
            types: [
                "keyword"
            ],
            excludeNot: true
        }) : [], [
        expression
    ]);
    // Get the entities from the expression
    const queryEntities = expression ? (0, _userdataqueries.getExpressionIds)(expression, {
        types: [
            "entity",
            "rp_topic"
        ],
        excludeNot: true
    }) : [];
    // Get the entities from the watchlists
    const entitiesInWatchlist = (0, _watchlist.useEntitiesFromWatchlists)(expression);
    // All the entities to highlight
    const entities = [
        ...queryEntities,
        ...entitiesInWatchlist
    ];
    // Get the styles for the keywords and entities
    const keywordsStyles = (0, _documentviewer.useKeywordStyles)(keywords, "", getHighlightStyle);
    const entitiesStyles = (0, _documentviewer.useEntitiesStyles)(entities, true, getHighlightStyle);
    const highlights = [
        ...keywordsStyles,
        ...entitiesStyles
    ];
    return {
        highlights,
        keywords,
        entities
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2RvY3VtZW50LXZpZXdlci9zcmMvbGliL2hvb2tzL3VzZURvY3VtZW50Vmlld2VySGlnaGxpZ2h0cy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ1NTUHJvcGVydGllcywgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBScHFsRmlsdGVyIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IGdldEV4cHJlc3Npb25JZHMgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS91c2VyLWRhdGEtcXVlcmllc1wiXG5pbXBvcnQgeyB1c2VFbnRpdGllc0Zyb21XYXRjaGxpc3RzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvd2F0Y2hsaXN0XCJcbmltcG9ydCB7IFJQVGhlbWVQcm9wcyB9IGZyb20gXCJAcnAvcmVhY3QvdGhlbWVcIlxuaW1wb3J0IHsgdXNlRW50aXRpZXNTdHlsZXMsIHVzZUtleXdvcmRTdHlsZXMgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vZG9jdW1lbnQtdmlld2VyXCJcblxuY29uc3QgdXNlRG9jdW1lbnRWaWV3ZXJIaWdobGlnaHRzID0gKFxuICBleHByZXNzaW9uOiBScHFsRmlsdGVyIHwgdW5kZWZpbmVkLFxuICBnZXRIaWdobGlnaHRTdHlsZT86ICh0aGVtZTogUlBUaGVtZVByb3BzKSA9PiBDU1NQcm9wZXJ0aWVzLFxuKSA9PiB7XG4gIC8vIEdldCB0aGUga2V5d29yZHMgZnJvbSB0aGUgZXhwcmVzc2lvblxuICBjb25zdCBrZXl3b3JkczogQXJyYXk8c3RyaW5nPiA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGV4cHJlc3Npb24gPyBnZXRFeHByZXNzaW9uSWRzKGV4cHJlc3Npb24sIHsgdHlwZXM6IFtcImtleXdvcmRcIl0sIGV4Y2x1ZGVOb3Q6IHRydWUgfSkgOiBbXSxcbiAgICBbZXhwcmVzc2lvbl0sXG4gIClcblxuICAvLyBHZXQgdGhlIGVudGl0aWVzIGZyb20gdGhlIGV4cHJlc3Npb25cbiAgY29uc3QgcXVlcnlFbnRpdGllcyA9IGV4cHJlc3Npb25cbiAgICA/IGdldEV4cHJlc3Npb25JZHMoZXhwcmVzc2lvbiwgeyB0eXBlczogW1wiZW50aXR5XCIsIFwicnBfdG9waWNcIl0sIGV4Y2x1ZGVOb3Q6IHRydWUgfSlcbiAgICA6IFtdXG5cbiAgLy8gR2V0IHRoZSBlbnRpdGllcyBmcm9tIHRoZSB3YXRjaGxpc3RzXG4gIGNvbnN0IGVudGl0aWVzSW5XYXRjaGxpc3QgPSB1c2VFbnRpdGllc0Zyb21XYXRjaGxpc3RzKGV4cHJlc3Npb24pXG5cbiAgLy8gQWxsIHRoZSBlbnRpdGllcyB0byBoaWdobGlnaHRcbiAgY29uc3QgZW50aXRpZXMgPSBbLi4ucXVlcnlFbnRpdGllcywgLi4uZW50aXRpZXNJbldhdGNobGlzdF1cblxuICAvLyBHZXQgdGhlIHN0eWxlcyBmb3IgdGhlIGtleXdvcmRzIGFuZCBlbnRpdGllc1xuICBjb25zdCBrZXl3b3Jkc1N0eWxlcyA9IHVzZUtleXdvcmRTdHlsZXMoa2V5d29yZHMsIFwiXCIsIGdldEhpZ2hsaWdodFN0eWxlKVxuICBjb25zdCBlbnRpdGllc1N0eWxlcyA9IHVzZUVudGl0aWVzU3R5bGVzKGVudGl0aWVzLCB0cnVlLCBnZXRIaWdobGlnaHRTdHlsZSlcbiAgY29uc3QgaGlnaGxpZ2h0cyA9IFsuLi5rZXl3b3Jkc1N0eWxlcywgLi4uZW50aXRpZXNTdHlsZXNdXG5cbiAgcmV0dXJuIHsgaGlnaGxpZ2h0cywga2V5d29yZHMsIGVudGl0aWVzIH1cbn1cblxuZXhwb3J0IHsgdXNlRG9jdW1lbnRWaWV3ZXJIaWdobGlnaHRzIH1cbiJdLCJuYW1lcyI6WyJ1c2VEb2N1bWVudFZpZXdlckhpZ2hsaWdodHMiLCJleHByZXNzaW9uIiwiZ2V0SGlnaGxpZ2h0U3R5bGUiLCJrZXl3b3JkcyIsInVzZU1lbW8iLCJnZXRFeHByZXNzaW9uSWRzIiwidHlwZXMiLCJleGNsdWRlTm90IiwicXVlcnlFbnRpdGllcyIsImVudGl0aWVzSW5XYXRjaGxpc3QiLCJ1c2VFbnRpdGllc0Zyb21XYXRjaGxpc3RzIiwiZW50aXRpZXMiLCJrZXl3b3Jkc1N0eWxlcyIsInVzZUtleXdvcmRTdHlsZXMiLCJlbnRpdGllc1N0eWxlcyIsInVzZUVudGl0aWVzU3R5bGVzIiwiaGlnaGxpZ2h0cyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBcUNTQTs7O2VBQUFBOzs7dUJBckM4QjtpQ0FFTjsyQkFDUztnQ0FFVTtBQUVwRCxNQUFNQSw4QkFBOEIsQ0FDbENDLFlBQ0FDO0lBRUEsdUNBQXVDO0lBQ3ZDLE1BQU1DLFdBQTBCQyxJQUFBQSxjQUFPLEVBQ3JDLElBQ0VILGFBQWFJLElBQUFBLGlDQUFnQixFQUFDSixZQUFZO1lBQUVLLE9BQU87Z0JBQUM7YUFBVTtZQUFFQyxZQUFZO1FBQUssS0FBSyxFQUFFLEVBQzFGO1FBQUNOO0tBQVc7SUFHZCx1Q0FBdUM7SUFDdkMsTUFBTU8sZ0JBQWdCUCxhQUNsQkksSUFBQUEsaUNBQWdCLEVBQUNKLFlBQVk7UUFBRUssT0FBTztZQUFDO1lBQVU7U0FBVztRQUFFQyxZQUFZO0lBQUssS0FDL0UsRUFBRTtJQUVOLHVDQUF1QztJQUN2QyxNQUFNRSxzQkFBc0JDLElBQUFBLG9DQUF5QixFQUFDVDtJQUV0RCxnQ0FBZ0M7SUFDaEMsTUFBTVUsV0FBVztXQUFJSDtXQUFrQkM7S0FBb0I7SUFFM0QsK0NBQStDO0lBQy9DLE1BQU1HLGlCQUFpQkMsSUFBQUEsZ0NBQWdCLEVBQUNWLFVBQVUsSUFBSUQ7SUFDdEQsTUFBTVksaUJBQWlCQyxJQUFBQSxpQ0FBaUIsRUFBQ0osVUFBVSxNQUFNVDtJQUN6RCxNQUFNYyxhQUFhO1dBQUlKO1dBQW1CRTtLQUFlO0lBRXpELE9BQU87UUFBRUU7UUFBWWI7UUFBVVE7SUFBUztBQUMxQyJ9