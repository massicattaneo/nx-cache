{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/SuggestedPrompts/SuggestedPromptsFilters.tsx"],"sourcesContent":["import { useRef, useState } from \"react\"\nimport { t } from \"i18next\"\nimport { Dataset, DatasetScope, Task } from \"@rp/common/api-types\"\nimport {\n  Box,\n  ButtonBase,\n  Checkbox,\n  InputBase,\n  Menu,\n  MenuItem,\n  Typography,\n} from \"@rp/react/web/mui/core\"\nimport { ArrowDropDown, Close, Search } from \"@rp/react/web/mui/icons\"\n\ntype Props = {\n  textInputValue: string\n  onTextInputChange: (value: string) => void\n  selectedTopics: Record<string, boolean>\n  selectedTasks: Record<string, boolean>\n  selectedScopes: Record<DatasetScope, boolean>\n  onTopicsChange: (topics: Array<string>) => void\n  onSelectedTasks: (tasks: Array<string>) => void\n  onSelectedScopes: (tasks: Array<string>) => void\n  topics: Array<string>\n  enabledDatasets: Array<Dataset<DatasetScope>>\n}\n\nconst getButtonLabel = (values: Record<string, boolean>, emptyLabel: string) => {\n  const selectedLabels = Object.entries(values)\n    .filter(([_, value]) => value)\n    .map(entry => entry[0])\n\n  if (selectedLabels.length === 0) {\n    return [emptyLabel, \"\"]\n  }\n\n  return selectedLabels.length > 1\n    ? [`${selectedLabels[0]},`, ` +${selectedLabels.length - 1}`]\n    : [selectedLabels[0], \"\"]\n}\n\nconst SuggestedPromptsFilters = ({\n  textInputValue,\n  onTextInputChange,\n  selectedTasks,\n  selectedTopics,\n  selectedScopes,\n  onTopicsChange,\n  onSelectedTasks,\n  onSelectedScopes,\n  topics,\n  enabledDatasets,\n}: Props) => {\n  const [openMenu, setOpenMenu] = useState<\"topics\" | \"tasks\" | \"sources\" | undefined>()\n  const topicsMenuButtonRef = useRef<HTMLButtonElement>(null)\n  const tasksMenuButtonRef = useRef<HTMLButtonElement>(null)\n\n  const scopesMenuButtonRef = useRef<HTMLButtonElement>(null)\n  return (\n    <Box>\n      <InputBase\n        sx={{ backgroundColor: \"overlay.surface\", py: 1, pl: 1, pr: 2, borderRadius: 2, mb: 1.5 }}\n        startAdornment={<Search sx={{ p: 0.5, pt: 0.25, color: \"text.disabled\" }} />}\n        endAdornment={\n          textInputValue.length > 1 ? (\n            <ButtonBase sx={{ pl: 1 }} onClick={() => onTextInputChange(\"\")}>\n              <Close sx={{ fontSize: 18 }} />\n            </ButtonBase>\n          ) : null\n        }\n        placeholder={t(\"promptsLibrary.findAPrompt\")}\n        fullWidth\n        value={textInputValue}\n        onChange={event => onTextInputChange(event.target.value)}\n      />\n      {textInputValue.length === 0 ? (\n        <Box sx={{ display: \"flex\", gap: 1.5, py: 1.5 }}>\n          <ButtonBase\n            sx={{ bgcolor: \"overlay.surface\", py: 0.5, px: 1, borderRadius: 1 }}\n            ref={scopesMenuButtonRef}\n            onClick={() => setOpenMenu(\"sources\")}\n          >\n            <Typography sx={{ color: \"grey.300\", mr: 0.5 }}>\n              {getButtonLabel(\n                enabledDatasets.reduce((acc, val) => {\n                  return { ...acc, [val.label]: selectedScopes[val.id] ?? false }\n                }, {}),\n                \"Select a source\",\n              ).join(\"\")}\n            </Typography>\n            <ArrowDropDown />\n          </ButtonBase>\n          <Menu\n            open={openMenu === \"sources\"}\n            anchorEl={scopesMenuButtonRef.current}\n            onClose={() => setOpenMenu(undefined)}\n          >\n            {enabledDatasets.map(scope => (\n              <MenuItem\n                key={scope.id}\n                dense\n                sx={{\n                  pl: 0.5,\n                  fontSize: 16,\n                }}\n                onClick={() => onSelectedScopes([scope.id])}\n              >\n                <Checkbox\n                  checked={selectedScopes[scope.id] ?? false}\n                  sx={{ height: 32, width: 32, mx: 0.5 }}\n                />\n                {scope.label}\n              </MenuItem>\n            ))}\n          </Menu>\n          <ButtonBase\n            sx={{ bgcolor: \"overlay.surface\", py: 0.5, px: 1, borderRadius: 1 }}\n            ref={topicsMenuButtonRef}\n            onClick={() => setOpenMenu(\"topics\")}\n          >\n            <Typography sx={{ color: \"grey.300\", mr: 0.5 }}>\n              {getButtonLabel(selectedTopics, \"Select a topic\").join(\"\")}\n            </Typography>\n            <ArrowDropDown />\n          </ButtonBase>\n          <Menu\n            open={openMenu === \"topics\"}\n            anchorEl={topicsMenuButtonRef.current}\n            onClose={() => setOpenMenu(undefined)}\n            slotProps={{\n              paper: {\n                sx: theme => ({\n                  ...theme.onHoverScrollbarStyles,\n                  \"&:hover\": {\n                    ...theme.scrollbarStyles,\n                  },\n                }),\n              },\n            }}\n          >\n            {topics.map(topic => (\n              <MenuItem\n                key={topic}\n                dense\n                sx={{\n                  pl: 0.5,\n                  fontSize: 16,\n                }}\n                onClick={() => onTopicsChange([topic])}\n              >\n                <Checkbox\n                  checked={selectedTopics[topic] ?? false}\n                  sx={{ height: 32, width: 32, mx: 0.5 }}\n                />\n                {topic}\n              </MenuItem>\n            ))}\n          </Menu>\n          <>\n            <ButtonBase\n              sx={{ bgcolor: \"overlay.surface\", py: 0.5, px: 1, borderRadius: 1 }}\n              ref={tasksMenuButtonRef}\n              onClick={() => setOpenMenu(\"tasks\")}\n            >\n              <Typography sx={{ color: \"grey.300\", mr: 0.5 }}>\n                {getButtonLabel(selectedTasks, \"Select a task\").join(\"\")}\n              </Typography>\n              <ArrowDropDown />\n            </ButtonBase>\n            <Menu\n              open={openMenu === \"tasks\"}\n              anchorEl={tasksMenuButtonRef.current}\n              onClose={() => setOpenMenu(undefined)}\n            >\n              {Task.map(task => (\n                <MenuItem\n                  key={task}\n                  dense\n                  sx={{\n                    pl: 0.5,\n                    fontSize: 16,\n                  }}\n                  onClick={() => onSelectedTasks([task])}\n                >\n                  <Checkbox\n                    checked={selectedTasks[task] ?? false}\n                    sx={{ height: 32, width: 32, mx: 0.5 }}\n                  />\n                  {task}\n                </MenuItem>\n              ))}\n            </Menu>\n          </>\n        </Box>\n      ) : null}\n    </Box>\n  )\n}\nexport { SuggestedPromptsFilters, getButtonLabel }\n"],"names":["SuggestedPromptsFilters","getButtonLabel","values","emptyLabel","selectedLabels","Object","entries","filter","_","value","map","entry","length","textInputValue","onTextInputChange","selectedTasks","selectedTopics","selectedScopes","onTopicsChange","onSelectedTasks","onSelectedScopes","topics","enabledDatasets","openMenu","setOpenMenu","useState","topicsMenuButtonRef","useRef","tasksMenuButtonRef","scopesMenuButtonRef","Box","InputBase","sx","backgroundColor","py","pl","pr","borderRadius","mb","startAdornment","Search","p","pt","color","endAdornment","ButtonBase","onClick","Close","fontSize","placeholder","t","fullWidth","onChange","event","target","display","gap","bgcolor","px","ref","Typography","mr","reduce","acc","val","label","id","join","ArrowDropDown","Menu","open","anchorEl","current","onClose","undefined","scope","MenuItem","dense","Checkbox","checked","height","width","mx","slotProps","paper","theme","onHoverScrollbarStyles","scrollbarStyles","topic","Task","task"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAsMSA,uBAAuB;eAAvBA;;IAAyBC,cAAc;eAAdA;;;;uBAtMD;yBACf;0BAC0B;sBASrC;uBACsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAe7C,MAAMA,iBAAiB,CAACC,QAAiCC;IACvD,MAAMC,iBAAiBC,OAAOC,OAAO,CAACJ,QACnCK,MAAM,CAAC,CAAC,CAACC,GAAGC,MAAM,GAAKA,OACvBC,GAAG,CAACC,CAAAA,QAASA,KAAK,CAAC,EAAE;IAExB,IAAIP,eAAeQ,MAAM,KAAK,GAAG;QAC/B,OAAO;YAACT;YAAY;SAAG;IACzB;IAEA,OAAOC,eAAeQ,MAAM,GAAG,IAC3B;QAAC,CAAC,EAAER,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;QAAE,CAAC,EAAE,EAAEA,eAAeQ,MAAM,GAAG,EAAE,CAAC;KAAC,GAC3D;QAACR,cAAc,CAAC,EAAE;QAAE;KAAG;AAC7B;AAEA,MAAMJ,0BAA0B,CAAC,EAC/Ba,cAAc,EACdC,iBAAiB,EACjBC,aAAa,EACbC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,eAAe,EACfC,gBAAgB,EAChBC,MAAM,EACNC,eAAe,EACT;IACN,MAAM,CAACC,UAAUC,YAAY,GAAGC,IAAAA,eAAQ;IACxC,MAAMC,sBAAsBC,IAAAA,aAAM,EAAoB;IACtD,MAAMC,qBAAqBD,IAAAA,aAAM,EAAoB;IAErD,MAAME,sBAAsBF,IAAAA,aAAM,EAAoB;IACtD,qBACE,sBAACG,SAAG;;0BACF,qBAACC,eAAS;gBACRC,IAAI;oBAAEC,iBAAiB;oBAAmBC,IAAI;oBAAGC,IAAI;oBAAGC,IAAI;oBAAGC,cAAc;oBAAGC,IAAI;gBAAI;gBACxFC,8BAAgB,qBAACC,aAAM;oBAACR,IAAI;wBAAES,GAAG;wBAAKC,IAAI;wBAAMC,OAAO;oBAAgB;;gBACvEC,cACE/B,eAAeD,MAAM,GAAG,kBACtB,qBAACiC,gBAAU;oBAACb,IAAI;wBAAEG,IAAI;oBAAE;oBAAGW,SAAS,IAAMhC,kBAAkB;8BAC1D,cAAA,qBAACiC,YAAK;wBAACf,IAAI;4BAAEgB,UAAU;wBAAG;;qBAE1B;gBAENC,aAAaC,IAAAA,UAAC,EAAC;gBACfC,SAAS;gBACT1C,OAAOI;gBACPuC,UAAUC,CAAAA,QAASvC,kBAAkBuC,MAAMC,MAAM,CAAC7C,KAAK;;YAExDI,eAAeD,MAAM,KAAK,kBACzB,sBAACkB,SAAG;gBAACE,IAAI;oBAAEuB,SAAS;oBAAQC,KAAK;oBAAKtB,IAAI;gBAAI;;kCAC5C,sBAACW,gBAAU;wBACTb,IAAI;4BAAEyB,SAAS;4BAAmBvB,IAAI;4BAAKwB,IAAI;4BAAGrB,cAAc;wBAAE;wBAClEsB,KAAK9B;wBACLiB,SAAS,IAAMtB,YAAY;;0CAE3B,qBAACoC,gBAAU;gCAAC5B,IAAI;oCAAEW,OAAO;oCAAYkB,IAAI;gCAAI;0CAC1C5D,eACCqB,gBAAgBwC,MAAM,CAAC,CAACC,KAAKC;wCACG/C;oCAA9B,OAAO,wCAAK8C;wCAAK,CAACC,IAAIC,KAAK,CAAC,EAAEhD,CAAAA,yBAAAA,cAAc,CAAC+C,IAAIE,EAAE,CAAC,cAAtBjD,oCAAAA,yBAA0B;;gCAC1D,GAAG,CAAC,IACJ,mBACAkD,IAAI,CAAC;;0CAET,qBAACC,oBAAa;;;kCAEhB,qBAACC,UAAI;wBACHC,MAAM/C,aAAa;wBACnBgD,UAAU1C,oBAAoB2C,OAAO;wBACrCC,SAAS,IAAMjD,YAAYkD;kCAE1BpD,gBAAgBZ,GAAG,CAACiE,CAAAA;gCAWN1D;mCAVb,sBAAC2D,cAAQ;gCAEPC,KAAK;gCACL7C,IAAI;oCACFG,IAAI;oCACJa,UAAU;gCACZ;gCACAF,SAAS,IAAM1B,iBAAiB;wCAACuD,MAAMT,EAAE;qCAAC;;kDAE1C,qBAACY,cAAQ;wCACPC,SAAS9D,CAAAA,2BAAAA,cAAc,CAAC0D,MAAMT,EAAE,CAAC,cAAxBjD,sCAAAA,2BAA4B;wCACrCe,IAAI;4CAAEgD,QAAQ;4CAAIC,OAAO;4CAAIC,IAAI;wCAAI;;oCAEtCP,MAAMV,KAAK;;+BAZPU,MAAMT,EAAE;wBAaL;;kCAGd,sBAACrB,gBAAU;wBACTb,IAAI;4BAAEyB,SAAS;4BAAmBvB,IAAI;4BAAKwB,IAAI;4BAAGrB,cAAc;wBAAE;wBAClEsB,KAAKjC;wBACLoB,SAAS,IAAMtB,YAAY;;0CAE3B,qBAACoC,gBAAU;gCAAC5B,IAAI;oCAAEW,OAAO;oCAAYkB,IAAI;gCAAI;0CAC1C5D,eAAee,gBAAgB,kBAAkBmD,IAAI,CAAC;;0CAEzD,qBAACC,oBAAa;;;kCAEhB,qBAACC,UAAI;wBACHC,MAAM/C,aAAa;wBACnBgD,UAAU7C,oBAAoB8C,OAAO;wBACrCC,SAAS,IAAMjD,YAAYkD;wBAC3BS,WAAW;4BACTC,OAAO;gCACLpD,IAAIqD,CAAAA,QAAU,wCACTA,MAAMC,sBAAsB;wCAC/B,WAAW,mBACND,MAAME,eAAe;;4BAG9B;wBACF;kCAEClE,OAAOX,GAAG,CAAC8E,CAAAA;gCAWGxE;mCAVb,sBAAC4D,cAAQ;gCAEPC,KAAK;gCACL7C,IAAI;oCACFG,IAAI;oCACJa,UAAU;gCACZ;gCACAF,SAAS,IAAM5B,eAAe;wCAACsE;qCAAM;;kDAErC,qBAACV,cAAQ;wCACPC,SAAS/D,CAAAA,wBAAAA,cAAc,CAACwE,MAAM,cAArBxE,mCAAAA,wBAAyB;wCAClCgB,IAAI;4CAAEgD,QAAQ;4CAAIC,OAAO;4CAAIC,IAAI;wCAAI;;oCAEtCM;;+BAZIA;wBAaG;;kCAGd;;0CACE,sBAAC3C,gBAAU;gCACTb,IAAI;oCAAEyB,SAAS;oCAAmBvB,IAAI;oCAAKwB,IAAI;oCAAGrB,cAAc;gCAAE;gCAClEsB,KAAK/B;gCACLkB,SAAS,IAAMtB,YAAY;;kDAE3B,qBAACoC,gBAAU;wCAAC5B,IAAI;4CAAEW,OAAO;4CAAYkB,IAAI;wCAAI;kDAC1C5D,eAAec,eAAe,iBAAiBoD,IAAI,CAAC;;kDAEvD,qBAACC,oBAAa;;;0CAEhB,qBAACC,UAAI;gCACHC,MAAM/C,aAAa;gCACnBgD,UAAU3C,mBAAmB4C,OAAO;gCACpCC,SAAS,IAAMjD,YAAYkD;0CAE1Be,cAAI,CAAC/E,GAAG,CAACgF,CAAAA;wCAWK3E;2CAVb,sBAAC6D,cAAQ;wCAEPC,KAAK;wCACL7C,IAAI;4CACFG,IAAI;4CACJa,UAAU;wCACZ;wCACAF,SAAS,IAAM3B,gBAAgB;gDAACuE;6CAAK;;0DAErC,qBAACZ,cAAQ;gDACPC,SAAShE,CAAAA,sBAAAA,aAAa,CAAC2E,KAAK,cAAnB3E,iCAAAA,sBAAuB;gDAChCiB,IAAI;oDAAEgD,QAAQ;oDAAIC,OAAO;oDAAIC,IAAI;gDAAI;;4CAEtCQ;;uCAZIA;gCAaG;;;;;iBAKhB;;;AAGV"}