8872c95aab5378d39fe9facd1957d879
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AdvancedDropdown: function() {
        return AdvancedDropdown;
    },
    operationLabel: function() {
        return operationLabel;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _utils = require("@rp/common/utils");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _utils1 = require("@rp/react/web/common/vendors/utils");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _utils2 = require("@rp/web/utils");
const _NameDisplay = require("../NameDisplay");
const _QueryBarContext = require("../QueryBarContext");
const _typeHelper = require("../typeHelper");
const _CqsDropdownstyles = require("./CqsDropdown.styles");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const keywordLabel = (option, isSingleValue)=>{
    switch(option){
        case "in":
            return isSingleValue ? "May Include" : "Include at least one";
        case "all":
            return isSingleValue ? "Must Include" : "Must include all";
        case "not-in":
            return isSingleValue ? "Must Exclude" : "Exclude all";
    }
    return "";
};
const getOptions = (filter)=>{
    if (SINGULAR_FILTERS.includes(filter.type)) {
        return filter.operation === "in" ? [
            "in",
            "not-in"
        ] : [
            "in",
            "not-in"
        ];
    }
    return filter.value.length === 1 && filter.type !== "keyword" && filter.operation === "in" ? [
        "in",
        "not-in"
    ] : [
        "in",
        "all",
        "not-in"
    ];
};
const operationLabel = ({ option, isSingleValue, isKeyword, type })=>{
    if (isKeyword) {
        return keywordLabel(option, isSingleValue);
    }
    switch(option){
        case "in":
            if (type === "in") {
                return isSingleValue ? "Must Include" : "Include at least one";
            }
            return isSingleValue ? "May Include" : "Include at least one";
        case "all":
            return isSingleValue ? "Must Include" : "Must include all";
        case "not-in":
            return isSingleValue ? "Must Exclude" : "Exclude all";
    }
    return "";
};
// Certain filters can only have one match per document, because of this we remove the "all" option.
const SINGULAR_FILTERS = [
    "language",
    "source"
];
function AdvancedDropdown({ filter, onChange, icon, onRemove, individualChange, query }) {
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const theme = (0, _core.useTheme)();
    const { onHandleOpenModal } = (0, _QueryBarContext.useQueryBarContext)();
    const [edit, setEdit] = (0, _react.useState)({});
    const isKeyword = filter.type === "keyword";
    const isSource = filter.type === "source";
    const isLanguage = filter.type === "language";
    const handleClick = (id)=>{
        setEdit(_object_spread_props(_object_spread({}, edit), {
            [id]: true
        }));
    };
    const onSubmit = (newKeyword, prevKeyword)=>{
        setEdit(_object_spread_props(_object_spread({}, edit), {
            [prevKeyword]: false
        }));
        const parsedNewKeyword = (0, _utils.encodeQuotes)(newKeyword);
        if (parsedNewKeyword.trim() === "") return;
        if (filter.value.some((keyword)=>keyword === parsedNewKeyword)) return;
        var _query_saveStatus;
        _utils1.tagManagerEvents.queryRefinement({
            action: "changeOperation",
            component: "queryBar",
            queryId: query.id,
            queryType: filter.type,
            savedStatus: (_query_saveStatus = query.saveStatus) !== null && _query_saveStatus !== void 0 ? _query_saveStatus : "unsaved"
        });
        query.actions.expression.updateFilter(filter.id, (filter)=>{
            if (!Array.isArray(filter.value)) {
                return filter;
            }
            return _object_spread_props(_object_spread({}, filter), {
                value: filter.value.map((keyword)=>{
                    if (prevKeyword === keyword) {
                        return parsedNewKeyword;
                    }
                    return keyword;
                })
            });
        });
    };
    const handleEnter = (e, prevKeyword)=>{
        if (e.key === "Enter") {
            const newKeyword = e.target.value;
            onSubmit(newKeyword, prevKeyword);
        }
        if (e.key === "Escape") {
            e.stopPropagation() // prevent the dropdown from closing
            ;
            setEdit(_object_spread_props(_object_spread({}, edit), {
                [prevKeyword]: false
            }));
        }
    };
    const isSingleValue = filter.value.length === 1;
    const operation = filter.operation;
    const options = getOptions(filter);
    const entities = filter.value.map((entity)=>({
            key: entity
        }));
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_CqsDropdownstyles.DropdownContainer, {
        role: "menu",
        "aria-label": "Pill menu",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.FormControl, {
                sx: {
                    padding: "0 20px",
                    color: "red"
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.RadioGroup, {
                    defaultValue: "in",
                    name: "radio-buttons-group",
                    value: operation,
                    onChange: (event, value)=>onChange(value),
                    children: options.map((option)=>/*#__PURE__*/ {
                        var _operationLabel;
                        return (0, _jsxruntime.jsx)(_core.FormControlLabel, {
                            value: option,
                            control: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Radio, {
                                size: "small"
                            }),
                            label: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                sx: {
                                    fontSize: 14
                                },
                                children: (_operationLabel = operationLabel({
                                    isSingleValue,
                                    option,
                                    isKeyword,
                                    type: operation
                                })) !== null && _operationLabel !== void 0 ? _operationLabel : option
                            })
                        }, option);
                    })
                })
            }),
            !isSingleValue || isKeyword ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("hr", {
                        style: {
                            margin: "10px 0px 20px",
                            borderColor: theme.palette.grey[600]
                        }
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_CqsDropdownstyles.WatchlistTitleStyled, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_CqsDropdownstyles.DropdownTitle, {
                                sx: {
                                    marginBottom: 0,
                                    padding: "0"
                                },
                                children: [
                                    `${(0, _typeHelper.typeDescription)(icon, 2)} (${filter.value.length})`,
                                    " "
                                ]
                            }),
                            !isSource && !isKeyword && !isLanguage && /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.WatchlistMenu, {
                                zIndex: 1300,
                                iconSize: 20,
                                filter: entities,
                                onHandleOpenModal: onHandleOpenModal
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_CqsDropdownstyles.DropdownScroll, {
                        children: filter.value.map((id)=>/*#__PURE__*/ {
                            var _decodeString;
                            return (0, _jsxruntime.jsx)(_CqsDropdownstyles.DropdownItemContainer, {
                                children: isKeyword && edit[id] === true ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CqsDropdownstyles.EditInput, {
                                        "data-testid": "edit-input",
                                        defaultValue: (_decodeString = (0, _utils2.decodeString)(id)) !== null && _decodeString !== void 0 ? _decodeString : "",
                                        variant: "outlined",
                                        onBlur: (e)=>onSubmit(e.target.value, id),
                                        onKeyDown: (e)=>handleEnter(e, id),
                                        autoFocus: true
                                    })
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    onClick: ()=>handleClick(id),
                                    children: [
                                        isMobile ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_CqsDropdownstyles.MobileNameDisplay, {
                                            filterType: filter.type,
                                            entityId: id
                                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                                            tooltipStyles: {
                                                minWidth: "340px"
                                            },
                                            tooltipPlacement: "top-end",
                                            tooltipText: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NameDisplay.NameDisplay, {
                                                filterType: filter.type,
                                                entityId: id
                                            }),
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NameDisplay.NameDisplay, {
                                                filterType: filter.type,
                                                entityId: id
                                            })
                                        }),
                                        !isSingleValue && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_CqsDropdownstyles.ActionButtonsContainer, {
                                            children: [
                                                operation !== "in" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                                                    placement: "top",
                                                    title: "May Include",
                                                    enterDelay: 500,
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                                        "data-testid": `${id}-in`,
                                                        size: "small",
                                                        onClick: ()=>individualChange("in", id),
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.AddCircleOutline, {
                                                            sx: {
                                                                fontSize: 20
                                                            }
                                                        })
                                                    })
                                                }),
                                                operation !== "all" && !SINGULAR_FILTERS.includes(filter.type) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                                                    placement: "top",
                                                    title: "Must Include",
                                                    enterDelay: 500,
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                                        "data-testid": `${id}-all`,
                                                        onClick: ()=>individualChange("all", id),
                                                        size: "small",
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.CheckCircleOutlined, {
                                                            sx: {
                                                                fontSize: 20
                                                            }
                                                        })
                                                    })
                                                }) : null,
                                                operation !== "not-in" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                                                    placement: "top",
                                                    title: "Exclude",
                                                    enterDelay: 500,
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                                        "data-testid": `${id}-not-in`,
                                                        onClick: ()=>individualChange("not-in", id),
                                                        size: "small",
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Block, {
                                                            sx: {
                                                                fontSize: 20
                                                            }
                                                        })
                                                    })
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                                                    placement: "top",
                                                    title: "Remove",
                                                    enterDelay: 500,
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                                        "data-testid": `${id}-remove`,
                                                        onClick: ()=>onRemove(id),
                                                        size: "small",
                                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Close, {
                                                            sx: {
                                                                fontSize: 20
                                                            }
                                                        })
                                                    })
                                                })
                                            ]
                                        })
                                    ]
                                })
                            }, id);
                        })
                    })
                ]
            }) : null
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,