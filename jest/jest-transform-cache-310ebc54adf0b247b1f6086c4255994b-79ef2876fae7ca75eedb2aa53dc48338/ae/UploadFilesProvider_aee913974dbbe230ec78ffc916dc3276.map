{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/providers/src/lib/UploadFilesProvider/UploadFilesProvider.tsx"],"sourcesContent":["import React, {\n  PropsWithChildren,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\"\nimport { AxiosResponse } from \"axios\"\nimport { useTranslation } from \"react-i18next\"\nimport { useUser } from \"@clerk/clerk-react\"\nimport { adapters } from \"@rp/adapters\"\nimport {\n  FileCollection,\n  FileRowType,\n  NativeFile,\n  ServerFile,\n  UploadOptions,\n  Uploadable,\n  UploadingFilesTypes,\n  mapServerFile,\n} from \"@rp/common/utils\"\nimport { filesCustomerIo } from \"@rp/react/common/customer-io\"\nimport { filesQueryKeys } from \"@rp/react/tanstack-api/file\"\nimport {\n  FileParkingReturn,\n  useCreateParking,\n  useFileUploadMutation,\n  useProcessingFiles,\n  useQuota,\n} from \"@rp/react/tanstack-api/file\"\nimport { InfiniteData, useQueryClient } from \"@tanstack/react-query\"\nimport { fileUploadQueue } from \"./fileUploadQueue\"\nimport {\n  createNewUploadableFile,\n  createServerFileFromUploadable,\n  createUploadableFromServerFile,\n  recurrentCheckFileIndexStatus,\n  updateUploadFileProgress,\n} from \"./uploadFileProviderUtils\"\n\nconst UploadFilesContext = createContext<UploadingFilesTypes | undefined>(undefined)\n\ntype UploadFilesProviderProps = PropsWithChildren<{\n  onUploadError: (next: Uploadable) => void\n  onQuotaError: (message: string) => void\n}>\n\nconst isResponseError = (\n  response:\n    | AxiosResponse<unknown, unknown>\n    | {\n        error: unknown\n        isError: boolean\n      },\n): response is { error: unknown; isError: boolean } => {\n  return (response as { error: unknown; isError: boolean }).isError\n}\n\nconst queue = fileUploadQueue({ batch: 10 })\n\nconst UploadFilesProvider: React.FC<UploadFilesProviderProps> = ({\n  children,\n  onUploadError,\n  onQuotaError,\n}) => {\n  const queryClient = useQueryClient()\n  const { user } = useUser()\n  const { t } = useTranslation()\n  const { data } = useProcessingFiles()\n  const { isOverLimit, isSuccess: successfullyFetchedQuotaData, isError } = useQuota()\n  const [files, setFiles] = useState<Array<Uploadable>>([])\n  const [doneIds, setDoneIds] = useState<Record<string, boolean>>({})\n  const [uploading, setUploading] = useState<Array<Uploadable>>([])\n  const [uploadError, setUploadError] = useState<Array<Uploadable>>([])\n  const { mutateAsync: makeParking } = useCreateParking()\n  const { mutateAsync: upload } = useFileUploadMutation(updateUploadFileProgress(setUploading))\n\n  const updateToDone = useCallback(\n    (id: string, indexStatus: \"INDEXED\" | \"INDEXING_FAILED\" | \"ANALYZE_FAILED\" = \"INDEXED\") => {\n      setDoneIds(state => ({ ...state, [id]: true }))\n      setUploading(state => {\n        const uploading = state.find(file => file.fileId === id)\n        if (uploading) {\n          const file: ServerFile = createServerFileFromUploadable(uploading, indexStatus)\n          // update the metadata\n          const metadataQueryKey = filesQueryKeys.metadata(id)\n          queryClient.setQueryData<FileRowType>(metadataQueryKey, previousFile =>\n            !previousFile\n              ? mapServerFile(file)\n              : {\n                  ...previousFile,\n                  status: indexStatus === \"INDEXED\" ? \"completed\" : \"failed\",\n                },\n          )\n          // update the pages\n          const queryKey = [\"files-paginated\", false]\n          queryClient.setQueriesData<InfiniteData<FileCollection>>({ queryKey }, data => {\n            if (!data) return data\n            return {\n              ...data,\n              pages: data.pages.map(page => {\n                return {\n                  results: [file, ...page.results],\n                }\n              }),\n            }\n          })\n          queryClient.refetchQueries({ queryKey })\n          return state.filter(file => file.fileId !== id)\n        }\n        return state\n      })\n    },\n    [queryClient],\n  )\n\n  const removeCompleted = useCallback((src: string) => {\n    setUploading(state => state.filter(file => file.src !== src))\n  }, [])\n\n  const uploadErrorOccurred = useCallback(\n    (errorFile: Uploadable) => {\n      removeCompleted(errorFile.src)\n      setUploadError(state => [...state, errorFile])\n      onUploadError(errorFile)\n    },\n    [onUploadError, removeCompleted],\n  )\n\n  useEffect(() => {\n    if (!data) return\n    setUploading(prev => {\n      const toUpload = data.results.filter(file => !prev.find(f => f.fileId === file.file_id))\n      if (!toUpload.length) return prev\n      const mapped = toUpload.map(file => {\n        const id = file.file_id\n        queue.addTask(\n          () =>\n            new Promise(resolve => {\n              recurrentCheckFileIndexStatus(id).then(status => {\n                updateToDone(file.file_id, status)\n                resolve()\n              })\n            }),\n        )\n        return createUploadableFromServerFile(file)\n      })\n      return [...prev, ...mapped]\n    })\n  }, [data, updateToDone])\n\n  const fileUpload = useCallback(\n    async (\n      {\n        file,\n        startTime,\n        location,\n      }: { file: Uploadable; startTime: number; location: UploadOptions[\"location\"] },\n      onFileId?: (src: string, fileId: string) => void,\n    ) => {\n      const rawFileSize = await adapters.file.size(file.file)\n      try {\n        // First, POST for Parking\n        const { Location, file_id }: FileParkingReturn = await makeParking({\n          filename: file.file.name,\n        })\n        onFileId?.(file.src, file_id)\n        const endTime = Date.now()\n        filesCustomerIo.filesApi.uploaded({\n          fileId: file_id,\n          ownerId: user?.id ?? \"\",\n          updatedById: user?.id ?? \"\",\n          origin: adapters.platform.name,\n          mimeType: file.file.type ?? \"\",\n          rawFileSize,\n          uploadLocation: location,\n          uploadTimestamp: startTime * 1000,\n          resultsTimeStamp: endTime * 1000,\n          uploadDuration: (endTime - startTime) * 1000,\n          uploadError: \"\",\n        })\n        try {\n          // Then PUT for uploading\n          const res = await upload({ ...file, location: Location })\n          return res\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error)\n          uploadErrorOccurred(file)\n          // UPLOADING FAILED\n          filesCustomerIo.filesApi.uploaded({\n            fileId: file_id,\n            ownerId: user?.id ?? \"\",\n            updatedById: user?.id ?? \"\",\n            origin: adapters.platform.name,\n            mimeType: file.file.type ?? \"\",\n            rawFileSize,\n            uploadLocation: location,\n            uploadTimestamp: startTime * 1000,\n            resultsTimeStamp: endTime * 1000,\n            uploadDuration: (endTime - startTime) * 1000,\n            uploadError: errorMessage,\n          })\n          return { error, isError: true }\n        }\n      } catch (error) {\n        // PARKING FAILED\n        const errorMessage = error instanceof Error ? error.message : String(error)\n        const endTime = Date.now()\n        filesCustomerIo.filesApi.uploaded({\n          fileId: \"\",\n          ownerId: user?.id ?? \"\",\n          updatedById: user?.id ?? \"\",\n          origin: adapters.platform.name,\n          mimeType: file.file.type ?? \"\",\n          rawFileSize,\n          uploadLocation: location,\n          uploadTimestamp: startTime * 1000,\n          resultsTimeStamp: endTime * 1000,\n          uploadDuration: (endTime - startTime) * 1000,\n          uploadError: errorMessage,\n        })\n        uploadErrorOccurred(file)\n        return { error, isError: true }\n      }\n    },\n    [makeParking, upload, uploadErrorOccurred, user?.id],\n  )\n\n  const addToQueue = useCallback(\n    (files: Array<File | NativeFile>, options: UploadOptions): Array<Uploadable> => {\n      const newFiles = [...files].map(file => {\n        return createNewUploadableFile(file, user?.id ?? \"\")\n      })\n      setUploading(state => [...state, ...newFiles])\n      const startTime = Date.now()\n      newFiles.forEach(file => {\n        queue.addTask(\n          () =>\n            new Promise(resolve => {\n              setFiles(state => [...state, file])\n              fileUpload({ file, startTime, location: options.location }, (src, fileId) => {\n                setUploading(state =>\n                  state.map(file => {\n                    if (file.src === src) {\n                      return {\n                        ...file,\n                        fileId,\n                      }\n                    }\n                    return file\n                  }),\n                )\n                options.onFileId?.(src, fileId)\n                recurrentCheckFileIndexStatus(fileId).then(indexStatus => {\n                  updateToDone(fileId, indexStatus)\n                  resolve()\n                })\n              }).then(response => {\n                if (isResponseError(response)) resolve()\n              })\n            }),\n        )\n      })\n      return newFiles\n    },\n    [fileUpload, updateToDone, user?.id],\n  )\n\n  const addToUploadQueue = useCallback(\n    (files: Array<File | NativeFile>, options: UploadOptions): Array<Uploadable> => {\n      if (!isOverLimit && successfullyFetchedQuotaData) {\n        return addToQueue(files, options)\n      } else if (isError) {\n        onQuotaError(t(\"filePage.fileQuotaLimitError\"))\n      } else if (isOverLimit) {\n        onQuotaError(t(\"filePage.fileQuotaExceededError\"))\n      }\n      return []\n    },\n    [addToQueue, isError, isOverLimit, onQuotaError, successfullyFetchedQuotaData, t],\n  )\n\n  return (\n    <UploadFilesContext.Provider\n      value={{\n        files,\n        doneIds,\n        uploading,\n        uploadError,\n        removeCompleted,\n        updateToDone,\n        addToUploadQueue,\n      }}\n    >\n      {children}\n    </UploadFilesContext.Provider>\n  )\n}\n\nconst useUploadFilesContext = () => {\n  const context = useContext(UploadFilesContext)\n  const { t } = useTranslation()\n  if (!context) {\n    throw new Error(\n      t(\"common.providerError\", { hook: \"useUploadFilesContext\", provider: \"UploadFilesProvider\" }),\n    )\n  }\n  return context\n}\n\nexport { useUploadFilesContext, UploadFilesProvider }\n"],"names":["UploadFilesProvider","useUploadFilesContext","UploadFilesContext","createContext","undefined","isResponseError","response","isError","queue","fileUploadQueue","batch","children","onUploadError","onQuotaError","queryClient","useQueryClient","user","useUser","t","useTranslation","data","useProcessingFiles","isOverLimit","isSuccess","successfullyFetchedQuotaData","useQuota","files","setFiles","useState","doneIds","setDoneIds","uploading","setUploading","uploadError","setUploadError","mutateAsync","makeParking","useCreateParking","upload","useFileUploadMutation","updateUploadFileProgress","updateToDone","useCallback","id","indexStatus","state","find","file","fileId","createServerFileFromUploadable","metadataQueryKey","filesQueryKeys","metadata","setQueryData","previousFile","mapServerFile","status","queryKey","setQueriesData","pages","map","page","results","refetchQueries","filter","removeCompleted","src","uploadErrorOccurred","errorFile","useEffect","prev","toUpload","f","file_id","length","mapped","addTask","Promise","resolve","recurrentCheckFileIndexStatus","then","createUploadableFromServerFile","fileUpload","startTime","location","onFileId","rawFileSize","adapters","size","Location","filename","name","endTime","Date","now","filesCustomerIo","filesApi","uploaded","ownerId","updatedById","origin","platform","mimeType","type","uploadLocation","uploadTimestamp","resultsTimeStamp","uploadDuration","res","error","errorMessage","Error","message","String","addToQueue","options","newFiles","createNewUploadableFile","forEach","addToUploadQueue","Provider","value","context","useContext","hook","provider"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}