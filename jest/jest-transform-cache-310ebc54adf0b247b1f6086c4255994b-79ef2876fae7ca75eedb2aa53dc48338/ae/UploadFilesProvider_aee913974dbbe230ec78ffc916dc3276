778cb06ee3f53ac9c7f10db024b4b43d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UploadFilesProvider: function() {
        return UploadFilesProvider;
    },
    useUploadFilesContext: function() {
        return useUploadFilesContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _clerkreact = require("@clerk/clerk-react");
const _adapters = require("@rp/adapters");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _file = require("@rp/react/tanstack-api/file");
const _reactquery = require("@tanstack/react-query");
const _fileUploadQueue = require("./fileUploadQueue");
const _uploadFileProviderUtils = require("./uploadFileProviderUtils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const UploadFilesContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const isResponseError = (response)=>{
    return response.isError;
};
const queue = (0, _fileUploadQueue.fileUploadQueue)({
    batch: 10
});
const UploadFilesProvider = ({ children, onUploadError, onQuotaError })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const { user } = (0, _clerkreact.useUser)();
    const { t } = (0, _reacti18next.useTranslation)();
    const { data } = (0, _file.useProcessingFiles)();
    const { isOverLimit, isSuccess: successfullyFetchedQuotaData, isError } = (0, _file.useQuota)();
    const [files, setFiles] = (0, _react.useState)([]);
    const [doneIds, setDoneIds] = (0, _react.useState)({});
    const [uploading, setUploading] = (0, _react.useState)([]);
    const [uploadError, setUploadError] = (0, _react.useState)([]);
    const { mutateAsync: makeParking } = (0, _file.useCreateParking)();
    const { mutateAsync: upload } = (0, _file.useFileUploadMutation)((0, _uploadFileProviderUtils.updateUploadFileProgress)(setUploading));
    const updateToDone = (0, _react.useCallback)((id, indexStatus = "INDEXED")=>{
        setDoneIds((state)=>_object_spread_props(_object_spread({}, state), {
                [id]: true
            }));
        setUploading((state)=>{
            const uploading = state.find((file)=>file.fileId === id);
            if (uploading) {
                const file = (0, _uploadFileProviderUtils.createServerFileFromUploadable)(uploading, indexStatus);
                // update the metadata
                const metadataQueryKey = _file.filesQueryKeys.metadata(id);
                queryClient.setQueryData(metadataQueryKey, (previousFile)=>!previousFile ? (0, _utils.mapServerFile)(file) : _object_spread_props(_object_spread({}, previousFile), {
                        status: indexStatus === "INDEXED" ? "completed" : "failed"
                    }));
                // update the pages
                const queryKey = [
                    "files-paginated",
                    false
                ];
                queryClient.setQueriesData({
                    queryKey
                }, (data)=>{
                    if (!data) return data;
                    return _object_spread_props(_object_spread({}, data), {
                        pages: data.pages.map((page)=>{
                            return {
                                results: [
                                    file,
                                    ...page.results
                                ]
                            };
                        })
                    });
                });
                queryClient.refetchQueries({
                    queryKey
                });
                return state.filter((file)=>file.fileId !== id);
            }
            return state;
        });
    }, [
        queryClient
    ]);
    const removeCompleted = (0, _react.useCallback)((src)=>{
        setUploading((state)=>state.filter((file)=>file.src !== src));
    }, []);
    const uploadErrorOccurred = (0, _react.useCallback)((errorFile)=>{
        removeCompleted(errorFile.src);
        setUploadError((state)=>[
                ...state,
                errorFile
            ]);
        onUploadError(errorFile);
    }, [
        onUploadError,
        removeCompleted
    ]);
    (0, _react.useEffect)(()=>{
        if (!data) return;
        setUploading((prev)=>{
            const toUpload = data.results.filter((file)=>!prev.find((f)=>f.fileId === file.file_id));
            if (!toUpload.length) return prev;
            const mapped = toUpload.map((file)=>{
                const id = file.file_id;
                queue.addTask(()=>new Promise((resolve)=>{
                        (0, _uploadFileProviderUtils.recurrentCheckFileIndexStatus)(id).then((status)=>{
                            updateToDone(file.file_id, status);
                            resolve();
                        });
                    }));
                return (0, _uploadFileProviderUtils.createUploadableFromServerFile)(file);
            });
            return [
                ...prev,
                ...mapped
            ];
        });
    }, [
        data,
        updateToDone
    ]);
    const fileUpload = (0, _react.useCallback)(async ({ file, startTime, location }, onFileId)=>{
        const rawFileSize = await _adapters.adapters.file.size(file.file);
        try {
            // First, POST for Parking
            const { Location, file_id } = await makeParking({
                filename: file.file.name
            });
            onFileId === null || onFileId === void 0 ? void 0 : onFileId(file.src, file_id);
            const endTime = Date.now();
            var _user_id, _user_id1, _file_file_type;
            _customerio.filesCustomerIo.filesApi.uploaded({
                fileId: file_id,
                ownerId: (_user_id = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id !== void 0 ? _user_id : "",
                updatedById: (_user_id1 = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id1 !== void 0 ? _user_id1 : "",
                origin: _adapters.adapters.platform.name,
                mimeType: (_file_file_type = file.file.type) !== null && _file_file_type !== void 0 ? _file_file_type : "",
                rawFileSize,
                uploadLocation: location,
                uploadTimestamp: startTime * 1000,
                resultsTimeStamp: endTime * 1000,
                uploadDuration: (endTime - startTime) * 1000,
                uploadError: ""
            });
            try {
                // Then PUT for uploading
                const res = await upload(_object_spread_props(_object_spread({}, file), {
                    location: Location
                }));
                return res;
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                uploadErrorOccurred(file);
                var _user_id2, _user_id3, _file_file_type1;
                // UPLOADING FAILED
                _customerio.filesCustomerIo.filesApi.uploaded({
                    fileId: file_id,
                    ownerId: (_user_id2 = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id2 !== void 0 ? _user_id2 : "",
                    updatedById: (_user_id3 = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id3 !== void 0 ? _user_id3 : "",
                    origin: _adapters.adapters.platform.name,
                    mimeType: (_file_file_type1 = file.file.type) !== null && _file_file_type1 !== void 0 ? _file_file_type1 : "",
                    rawFileSize,
                    uploadLocation: location,
                    uploadTimestamp: startTime * 1000,
                    resultsTimeStamp: endTime * 1000,
                    uploadDuration: (endTime - startTime) * 1000,
                    uploadError: errorMessage
                });
                return {
                    error,
                    isError: true
                };
            }
        } catch (error) {
            // PARKING FAILED
            const errorMessage = error instanceof Error ? error.message : String(error);
            const endTime = Date.now();
            var _user_id4, _user_id5, _file_file_type2;
            _customerio.filesCustomerIo.filesApi.uploaded({
                fileId: "",
                ownerId: (_user_id4 = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id4 !== void 0 ? _user_id4 : "",
                updatedById: (_user_id5 = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id5 !== void 0 ? _user_id5 : "",
                origin: _adapters.adapters.platform.name,
                mimeType: (_file_file_type2 = file.file.type) !== null && _file_file_type2 !== void 0 ? _file_file_type2 : "",
                rawFileSize,
                uploadLocation: location,
                uploadTimestamp: startTime * 1000,
                resultsTimeStamp: endTime * 1000,
                uploadDuration: (endTime - startTime) * 1000,
                uploadError: errorMessage
            });
            uploadErrorOccurred(file);
            return {
                error,
                isError: true
            };
        }
    }, [
        makeParking,
        upload,
        uploadErrorOccurred,
        user === null || user === void 0 ? void 0 : user.id
    ]);
    const addToQueue = (0, _react.useCallback)((files, options)=>{
        const newFiles = [
            ...files
        ].map((file)=>{
            var _user_id;
            return (0, _uploadFileProviderUtils.createNewUploadableFile)(file, (_user_id = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id !== void 0 ? _user_id : "");
        });
        setUploading((state)=>[
                ...state,
                ...newFiles
            ]);
        const startTime = Date.now();
        newFiles.forEach((file)=>{
            queue.addTask(()=>new Promise((resolve)=>{
                    setFiles((state)=>[
                            ...state,
                            file
                        ]);
                    fileUpload({
                        file,
                        startTime,
                        location: options.location
                    }, (src, fileId)=>{
                        var _options_onFileId;
                        setUploading((state)=>state.map((file)=>{
                                if (file.src === src) {
                                    return _object_spread_props(_object_spread({}, file), {
                                        fileId
                                    });
                                }
                                return file;
                            }));
                        (_options_onFileId = options.onFileId) === null || _options_onFileId === void 0 ? void 0 : _options_onFileId.call(options, src, fileId);
                        (0, _uploadFileProviderUtils.recurrentCheckFileIndexStatus)(fileId).then((indexStatus)=>{
                            updateToDone(fileId, indexStatus);
                            resolve();
                        });
                    }).then((response)=>{
                        if (isResponseError(response)) resolve();
                    });
                }));
        });
        return newFiles;
    }, [
        fileUpload,
        updateToDone,
        user === null || user === void 0 ? void 0 : user.id
    ]);
    const addToUploadQueue = (0, _react.useCallback)((files, options)=>{
        if (!isOverLimit && successfullyFetchedQuotaData) {
            return addToQueue(files, options);
        } else if (isError) {
            onQuotaError(t("filePage.fileQuotaLimitError"));
        } else if (isOverLimit) {
            onQuotaError(t("filePage.fileQuotaExceededError"));
        }
        return [];
    }, [
        addToQueue,
        isError,
        isOverLimit,
        onQuotaError,
        successfullyFetchedQuotaData,
        t
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(UploadFilesContext.Provider, {
        value: {
            files,
            doneIds,
            uploading,
            uploadError,
            removeCompleted,
            updateToDone,
            addToUploadQueue
        },
        children: children
    });
};
const useUploadFilesContext = ()=>{
    const context = (0, _react.useContext)(UploadFilesContext);
    const { t } = (0, _reacti18next.useTranslation)();
    if (!context) {
        throw new Error(t("common.providerError", {
            hook: "useUploadFilesContext",
            provider: "UploadFilesProvider"
        }));
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,