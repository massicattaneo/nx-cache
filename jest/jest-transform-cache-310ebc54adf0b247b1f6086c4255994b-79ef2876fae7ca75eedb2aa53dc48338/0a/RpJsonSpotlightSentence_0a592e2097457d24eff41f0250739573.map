{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/components/RpJsonSpotlightSentence/RpJsonSpotlightSentence.tsx"],"sourcesContent":["import React from \"react\"\nimport { useCss } from \"react-use\"\nimport { uniqueIdIterator, useEnhancedDocument } from \"@rp/react/common/rpjson\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport { Statistics } from \"@rp/react/rpjson/types\"\nimport { CLASS_NAMES } from \"../../constants\"\nimport { createReactElements } from \"../../create-react-elements\"\nimport { getStatsParagraph } from \"../RpJsonParagraph/getStatsParagraph\"\nimport { getSpotlightSentenceContent } from \"./RpJsonSpotlightSentenceUtils\"\n\nconst getSentenceSelector = (pnum: number, snum: number) =>\n  `.${CLASS_NAMES.ID_PREFIX}${CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${pnum}-${snum}`\n\nconst getTextFromCoordinates = (stats: Statistics, pnum: number, snum: number) => {\n  const paragraph = getStatsParagraph(stats, pnum, snum)\n\n  if (!paragraph) return \"\"\n\n  const sentence = paragraph.sentences.find(sent => sent.sentenceNumber === snum)\n\n  if (!sentence) {\n    return paragraph.text\n  }\n\n  return paragraph.text.substring(sentence.start, sentence.end)\n}\n\ntype RpJsonSpotlightSentenceProps = {\n  rpjson: RpJsonDocument\n  sentences: Array<{ pnum: number; snum: number }>\n  finds?: Array<string | RegExp>\n  markupDetections?: boolean\n  color: string\n  href: string\n  className?: string\n  onLinkClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void\n}\n\n// This one is very similar to RpJsonParagraph.\n// This only adds previous and following sentence with a fade in/out\nconst RpJsonSpotlightSentence = ({\n  rpjson,\n  sentences,\n  finds = [],\n  markupDetections = false,\n  color,\n  href,\n  className,\n  onLinkClick,\n}: RpJsonSpotlightSentenceProps) => {\n  const { lastReactId, stats } = useEnhancedDocument(rpjson)\n  const idIterator = uniqueIdIterator(lastReactId)\n\n  const sentencesMerged = sentences.length ? sentences : [{ pnum: 1, snum: 1 }]\n  const { pnum: startParagraphNumber, snum: startSentenceNumber } = sentencesMerged[0]\n  const { pnum: endParagraphNumber, snum: endSentenceNumber } =\n    sentencesMerged[sentencesMerged.length - 1]\n\n  // SELECTED SENTENCE\n  const styles: Record<string, object> = {\n    \"& div\": { display: \"inline\" },\n    \"& div p\": {\n      display: \"inline\",\n    },\n    [`& .rpjson-type-sentence`]: {\n      display: \"none\",\n    },\n    [`& .rpjson-type-no-sentence`]: {\n      display: \"none\",\n    },\n    ...sentencesMerged.reduce((acc, { pnum, snum }) => {\n      return {\n        ...acc,\n        [`& ${getSentenceSelector(pnum, snum)}`]: {\n          display: \"initial\",\n        },\n      }\n    }, {}),\n  }\n\n  const commonStyles: React.CSSProperties = {\n    color: \"transparent\",\n    backgroundClip: \"text\",\n    WebkitBackgroundClip: \"text\",\n    userSelect: \"none\",\n  }\n\n  // PREVIOUS CONTENT\n  let previousContent = null\n  const previousStyles: React.CSSProperties = {\n    ...commonStyles,\n    backgroundImage: `linear-gradient(to right, transparent, ${color})`,\n    paddingRight: \"4px\",\n  }\n  const previousClassName = useCss(previousStyles)\n\n  // If there is a sentence before, in the same paragraph, we use that one\n  // CONTENT\n  const { content, hasReachedMaximumLength } = getSpotlightSentenceContent({ sentences, stats })\n\n  const prevParagraphs = stats.paragraphs[startParagraphNumber - 1]\n  if (startSentenceNumber > 1 && !hasReachedMaximumLength) {\n    previousContent = (\n      <span className={previousClassName}>\n        {getTextFromCoordinates(stats, startParagraphNumber, startSentenceNumber - 1)}\n      </span>\n    )\n  }\n  // Otherwise, try to use the last sentence of the previous paragraph\n  // (if the paragraph is not the headline)\n  else if (startParagraphNumber !== 1 && prevParagraphs && !hasReachedMaximumLength) {\n    const prevParagraph = prevParagraphs[prevParagraphs.length - 1]\n    previousContent = (\n      <p>\n        <span className={previousClassName}>\n          {getTextFromCoordinates(\n            stats,\n            startParagraphNumber - 1,\n            prevParagraph.sentences?.length || 1,\n          )}\n        </span>\n      </p>\n    )\n  }\n\n  // FOLLOWING CONTENT\n  let followingContent = null\n  const followingStyles: React.CSSProperties = {\n    ...commonStyles,\n    backgroundImage: `linear-gradient(to right, ${color}, transparent)`,\n  }\n  const followingClassName = useCss(followingStyles)\n\n  // If there is a following sentence in the same paragraph\n  const paragraph = getStatsParagraph(stats, endParagraphNumber, endSentenceNumber)\n  const nextSentence = paragraph?.sentences.find(\n    sent => sent.sentenceNumber === endSentenceNumber + 1,\n  )\n  if (nextSentence && !hasReachedMaximumLength) {\n    followingContent = (\n      <span className={followingClassName} style={{ paddingLeft: 4 }}>\n        {getTextFromCoordinates(stats, endParagraphNumber, endSentenceNumber + 1)}\n      </span>\n    )\n  }\n  // Otherwise, if there is a following paragraph, use first sentence\n  else if (stats.paragraphs[endParagraphNumber + 1] && !hasReachedMaximumLength) {\n    followingContent = (\n      <p>\n        <span className={followingClassName}>\n          {getTextFromCoordinates(stats, endParagraphNumber + 1, 1)}\n        </span>\n      </p>\n    )\n  }\n\n  const baseClassName = useCss(styles)\n  const toRender = { type: \"PAGE\", content, id: idIterator(), tree: [] }\n\n  return (\n    <div className={`${baseClassName} ${className ? className : \"\"}`}>\n      {previousContent}\n      <a href={href} target=\"_blank\" rel=\"noreferrer\" onClick={onLinkClick && onLinkClick}>\n        {createReactElements(\n          toRender,\n          {},\n          {\n            idIterator: idIterator,\n            finds,\n            performance: { markupSentences: true, markupDetections },\n          },\n        )}\n      </a>\n      {followingContent}\n    </div>\n  )\n}\n\nexport { RpJsonSpotlightSentence }\n"],"names":["RpJsonSpotlightSentence","getSentenceSelector","pnum","snum","CLASS_NAMES","ID_PREFIX","SENTENCE_NUMBER_PREFIX","getTextFromCoordinates","stats","paragraph","getStatsParagraph","sentence","sentences","find","sent","sentenceNumber","text","substring","start","end","rpjson","finds","markupDetections","color","href","className","onLinkClick","lastReactId","useEnhancedDocument","idIterator","uniqueIdIterator","sentencesMerged","length","startParagraphNumber","startSentenceNumber","endParagraphNumber","endSentenceNumber","styles","display","reduce","acc","commonStyles","backgroundClip","WebkitBackgroundClip","userSelect","previousContent","previousStyles","backgroundImage","paddingRight","previousClassName","useCss","content","hasReachedMaximumLength","getSpotlightSentenceContent","prevParagraphs","paragraphs","span","prevParagraph","p","followingContent","followingStyles","followingClassName","nextSentence","style","paddingLeft","baseClassName","toRender","type","id","tree","div","a","target","rel","onClick","createReactElements","performance","markupSentences"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}