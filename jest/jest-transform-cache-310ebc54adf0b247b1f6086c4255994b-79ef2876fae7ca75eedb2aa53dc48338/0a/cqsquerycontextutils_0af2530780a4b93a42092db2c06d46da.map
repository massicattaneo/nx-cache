{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/cqs-query-context/src/lib/cqs-query-context-utils/cqs-query-context-utils.ts"],"sourcesContent":["import { CqsCategories, CqsClusterSummaryStory, CqsItem, CqsStory } from \"@rp/common/api-types\"\nimport { CqsSearchQuery } from \"@rp/common/api-types\"\nimport { isRpqlFlatArrayFilter } from \"@rp/common/api-types\"\nimport { RpqlFlatMatchFilter } from \"@rp/common/api-types\"\nimport { QUERY_KEY_FEATURE_FLAG } from \"@rp/common/settings\"\nimport { encodeQuotes } from \"@rp/common/utils\"\nimport { useRavenPackQuery } from \"@rp/react/rpql\"\nimport {\n  EntityItem,\n  FilterItem,\n  GenericItem,\n  LanguageItem,\n  MacroSearchItem,\n  SourceItem,\n  TopicItem,\n} from \"@rp/react/tanstack-api/cqs-query-context\"\nimport {\n  EnhancedSuggestion,\n  KeywordSuggestion,\n  isEnhancedEntityAutoSuggestion,\n  isEnhancedMacroAutoSuggestion,\n  isKeywordAutoSuggestion,\n  isRecentSearchAutoSuggestion,\n} from \"@rp/react/tanstack-api/suggestion\"\nimport { QueryClient } from \"@tanstack/react-query\"\n\nconst convertDiscoveryPanelItem = (\n  item: CqsItem,\n): EntityItem | SourceItem | TopicItem | LanguageItem | GenericItem => {\n  if (item.queryType === \"entity\") {\n    return {\n      type: \"entity\",\n      entityType: item.entityType || \"\",\n      value: item.key,\n    }\n  }\n\n  return {\n    type: item.queryType,\n    value: item.key,\n  }\n}\n\nconst handleText = (item: KeywordSuggestion | string) => {\n  // TODO Review object values for keywords\n  const textString = typeof item === \"string\" ? item : item.text\n  const cleanString = textString.replace(/\\s+/g, \" \").trim()\n\n  return {\n    type: \"keyword\",\n    value: encodeQuotes(cleanString),\n  }\n}\n\nconst addLabelsToMacroItem = (item: MacroSearchItem, label: string): MacroSearchItem => {\n  const labels: Record<string, string> = {}\n\n  item.value.forEach(group => {\n    group.value.forEach(key => {\n      // The result would be something like {group1-Public: \"Public Companies\"}\n      const labelKey = `${group.type}-${key}`\n      labels[labelKey] = label\n    })\n  })\n\n  return { ...item, labels }\n}\n\nconst convertSuggestionItem = (item: EnhancedSuggestion): FilterItem => {\n  if (typeof item === \"string\" || isKeywordAutoSuggestion(item)) {\n    return handleText(item)\n  }\n\n  if (item.type === \"watchlist\") {\n    return {\n      type: \"watchlist\",\n      value: item.value,\n    }\n  }\n\n  if (isEnhancedEntityAutoSuggestion(item)) {\n    if (item.entityType === \"SRCE\") {\n      return {\n        type: \"source\",\n        value: item.value,\n      }\n    }\n\n    return {\n      type: \"entity\",\n      entityType: item.entityType,\n      value: item.value,\n    }\n  }\n\n  if (isEnhancedMacroAutoSuggestion(item)) {\n    const macroItem = {\n      type: item.type,\n      value: item.groups,\n      operation: \"all\" as const,\n    }\n\n    // TODO fix this\n    return addLabelsToMacroItem(macroItem, item.label)\n  }\n\n  if (isRecentSearchAutoSuggestion(item)) {\n    return {\n      type: item.type,\n      value: \"\",\n    }\n  }\n\n  return {\n    type: item.type,\n    value: item.value,\n  }\n}\n\nconst removeLastTick = (\n  discoveryPanelQueryKey: ReturnType<typeof discoveryPanelKey>,\n  queryClient: QueryClient,\n) => {\n  const category = queryClient?.getQueryData<CqsCategories>(discoveryPanelQueryKey) || {}\n  const modified: CqsCategories = {}\n\n  for (const [key, value] of Object.entries(category)) {\n    modified[key] = value.map(item => ({\n      ...item,\n      queryRelationship: \"result\",\n    }))\n  }\n  queryClient.setQueryData(discoveryPanelQueryKey, modified)\n}\n\nconst getDisplaySentence = (story: CqsStory | CqsClusterSummaryStory) => {\n  if (story.sentences[0].pnum === 0 && story.sentences.length > 1) return story.sentences[1]\n  return story.sentences[0]\n}\n\nconst mergeMacroSearches = (\n  builder: ReturnType<ReturnType<typeof useRavenPackQuery>[\"builder\"]>,\n  getFilter: ReturnType<typeof useRavenPackQuery>[\"getFilter\"],\n  parent: RpqlFlatMatchFilter,\n  item: MacroSearchItem,\n) => {\n  // Create a filter item for each filter inside macro\n  for (const group of item.value) {\n    let exists = false\n    // Check the children inside current macro, if group match, add items inside\n    for (const childId of parent.value) {\n      const filter = getFilter(childId)\n      if (filter && isRpqlFlatArrayFilter(filter) && filter.type === group.type) {\n        builder.update(filter.id, fil => ({\n          ...fil,\n          value: [...new Set([...filter.value, ...group.value])],\n        }))\n        exists = true\n      }\n    }\n    // If it is a new group, then add it inside macrosearch\n    if (!exists) {\n      builder.add(parent.id, { ...group, operation: group.operation ?? (\"in\" as const) })\n    }\n  }\n\n  // Add the new labels\n  builder.update<RpqlFlatMatchFilter>(parent.id, parent => ({\n    ...parent,\n    metadata: {\n      ...parent.metadata,\n      labels: {\n        ...parent.metadata?.labels,\n        ...item.labels,\n      },\n    },\n  }))\n}\n\nconst discoveryPanelKey = (search?: CqsSearchQuery) =>\n  [QUERY_KEY_FEATURE_FLAG, \"discovery-panel\", search] as const\n\nconst useDiscoveryPanelKey = () => {\n  return (search?: CqsSearchQuery) => discoveryPanelKey(search)\n}\n\nexport {\n  discoveryPanelKey,\n  useDiscoveryPanelKey,\n  convertDiscoveryPanelItem,\n  convertSuggestionItem,\n  encodeQuotes,\n  removeLastTick,\n  getDisplaySentence,\n  mergeMacroSearches,\n}\n"],"names":["convertDiscoveryPanelItem","convertSuggestionItem","discoveryPanelKey","encodeQuotes","getDisplaySentence","mergeMacroSearches","removeLastTick","useDiscoveryPanelKey","item","queryType","type","entityType","value","key","handleText","textString","text","cleanString","replace","trim","addLabelsToMacroItem","label","labels","forEach","group","labelKey","isKeywordAutoSuggestion","isEnhancedEntityAutoSuggestion","isEnhancedMacroAutoSuggestion","macroItem","groups","operation","isRecentSearchAutoSuggestion","discoveryPanelQueryKey","queryClient","category","getQueryData","modified","Object","entries","map","queryRelationship","setQueryData","story","sentences","pnum","length","builder","getFilter","parent","exists","childId","filter","isRpqlFlatArrayFilter","update","id","fil","Set","add","metadata","search","QUERY_KEY_FEATURE_FLAG"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}