dca5394725f05cc47fc5c8ba5ec4224e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    convertDiscoveryPanelItem: function() {
        return convertDiscoveryPanelItem;
    },
    convertSuggestionItem: function() {
        return convertSuggestionItem;
    },
    discoveryPanelKey: function() {
        return discoveryPanelKey;
    },
    encodeQuotes: function() {
        return _utils.encodeQuotes;
    },
    getDisplaySentence: function() {
        return getDisplaySentence;
    },
    mergeMacroSearches: function() {
        return mergeMacroSearches;
    },
    removeLastTick: function() {
        return removeLastTick;
    },
    useDiscoveryPanelKey: function() {
        return useDiscoveryPanelKey;
    }
});
const _apitypes = require("@rp/common/api-types");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const convertDiscoveryPanelItem = (item)=>{
    if (item.queryType === "entity") {
        return {
            type: "entity",
            entityType: item.entityType || "",
            value: item.key
        };
    }
    return {
        type: item.queryType,
        value: item.key
    };
};
const handleText = (item)=>{
    // TODO Review object values for keywords
    const textString = typeof item === "string" ? item : item.text;
    const cleanString = textString.replace(/\s+/g, " ").trim();
    return {
        type: "keyword",
        value: (0, _utils.encodeQuotes)(cleanString)
    };
};
const addLabelsToMacroItem = (item, label)=>{
    const labels = {};
    item.value.forEach((group)=>{
        group.value.forEach((key)=>{
            // The result would be something like {group1-Public: "Public Companies"}
            const labelKey = `${group.type}-${key}`;
            labels[labelKey] = label;
        });
    });
    return _object_spread_props(_object_spread({}, item), {
        labels
    });
};
const convertSuggestionItem = (item)=>{
    if (typeof item === "string" || (0, _suggestion.isKeywordAutoSuggestion)(item)) {
        return handleText(item);
    }
    if (item.type === "watchlist") {
        return {
            type: "watchlist",
            value: item.value
        };
    }
    if ((0, _suggestion.isEnhancedEntityAutoSuggestion)(item)) {
        if (item.entityType === "SRCE") {
            return {
                type: "source",
                value: item.value
            };
        }
        return {
            type: "entity",
            entityType: item.entityType,
            value: item.value
        };
    }
    if ((0, _suggestion.isEnhancedMacroAutoSuggestion)(item)) {
        const macroItem = {
            type: item.type,
            value: item.groups,
            operation: "all"
        };
        // TODO fix this
        return addLabelsToMacroItem(macroItem, item.label);
    }
    if ((0, _suggestion.isRecentSearchAutoSuggestion)(item)) {
        return {
            type: item.type,
            value: ""
        };
    }
    return {
        type: item.type,
        value: item.value
    };
};
const removeLastTick = (discoveryPanelQueryKey, queryClient)=>{
    const category = (queryClient === null || queryClient === void 0 ? void 0 : queryClient.getQueryData(discoveryPanelQueryKey)) || {};
    const modified = {};
    for (const [key, value] of Object.entries(category)){
        modified[key] = value.map((item)=>_object_spread_props(_object_spread({}, item), {
                queryRelationship: "result"
            }));
    }
    queryClient.setQueryData(discoveryPanelQueryKey, modified);
};
const getDisplaySentence = (story)=>{
    if (story.sentences[0].pnum === 0 && story.sentences.length > 1) return story.sentences[1];
    return story.sentences[0];
};
const mergeMacroSearches = (builder, getFilter, parent, item)=>{
    // Create a filter item for each filter inside macro
    for (const group of item.value){
        let exists = false;
        // Check the children inside current macro, if group match, add items inside
        for (const childId of parent.value){
            const filter = getFilter(childId);
            if (filter && (0, _apitypes.isRpqlFlatArrayFilter)(filter) && filter.type === group.type) {
                builder.update(filter.id, (fil)=>_object_spread_props(_object_spread({}, fil), {
                        value: [
                            ...new Set([
                                ...filter.value,
                                ...group.value
                            ])
                        ]
                    }));
                exists = true;
            }
        }
        // If it is a new group, then add it inside macrosearch
        if (!exists) {
            var _group_operation;
            builder.add(parent.id, _object_spread_props(_object_spread({}, group), {
                operation: (_group_operation = group.operation) !== null && _group_operation !== void 0 ? _group_operation : "in"
            }));
        }
    }
    // Add the new labels
    builder.update(parent.id, (parent)=>{
        var _parent_metadata;
        return _object_spread_props(_object_spread({}, parent), {
            metadata: _object_spread_props(_object_spread({}, parent.metadata), {
                labels: _object_spread({}, (_parent_metadata = parent.metadata) === null || _parent_metadata === void 0 ? void 0 : _parent_metadata.labels, item.labels)
            })
        });
    });
};
const discoveryPanelKey = (search)=>[
        _settings.QUERY_KEY_FEATURE_FLAG,
        "discovery-panel",
        search
    ];
const useDiscoveryPanelKey = ()=>{
    return (search)=>discoveryPanelKey(search);
};

//# sourceMappingURL=data:application/json;base64,