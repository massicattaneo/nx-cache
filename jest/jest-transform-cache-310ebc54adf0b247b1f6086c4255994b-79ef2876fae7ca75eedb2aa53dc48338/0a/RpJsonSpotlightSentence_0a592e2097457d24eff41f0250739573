d8600df49dfe81b2fc0f051760159e92
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RpJsonSpotlightSentence", {
    enumerable: true,
    get: function() {
        return RpJsonSpotlightSentence;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactuse = require("react-use");
const _rpjson = require("@rp/react/common/rpjson");
const _constants = require("../../constants");
const _createreactelements = require("../../create-react-elements");
const _getStatsParagraph = require("../RpJsonParagraph/getStatsParagraph");
const _RpJsonSpotlightSentenceUtils = require("./RpJsonSpotlightSentenceUtils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getSentenceSelector = (pnum, snum)=>`.${_constants.CLASS_NAMES.ID_PREFIX}${_constants.CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${pnum}-${snum}`;
const getTextFromCoordinates = (stats, pnum, snum)=>{
    const paragraph = (0, _getStatsParagraph.getStatsParagraph)(stats, pnum, snum);
    if (!paragraph) return "";
    const sentence = paragraph.sentences.find((sent)=>sent.sentenceNumber === snum);
    if (!sentence) {
        return paragraph.text;
    }
    return paragraph.text.substring(sentence.start, sentence.end);
};
// This one is very similar to RpJsonParagraph.
// This only adds previous and following sentence with a fade in/out
const RpJsonSpotlightSentence = ({ rpjson, sentences, finds = [], markupDetections = false, color, href, className, onLinkClick })=>{
    const { lastReactId, stats } = (0, _rpjson.useEnhancedDocument)(rpjson);
    const idIterator = (0, _rpjson.uniqueIdIterator)(lastReactId);
    const sentencesMerged = sentences.length ? sentences : [
        {
            pnum: 1,
            snum: 1
        }
    ];
    const { pnum: startParagraphNumber, snum: startSentenceNumber } = sentencesMerged[0];
    const { pnum: endParagraphNumber, snum: endSentenceNumber } = sentencesMerged[sentencesMerged.length - 1];
    // SELECTED SENTENCE
    const styles = _object_spread({
        "& div": {
            display: "inline"
        },
        "& div p": {
            display: "inline"
        },
        [`& .rpjson-type-sentence`]: {
            display: "none"
        },
        [`& .rpjson-type-no-sentence`]: {
            display: "none"
        }
    }, sentencesMerged.reduce((acc, { pnum, snum })=>{
        return _object_spread_props(_object_spread({}, acc), {
            [`& ${getSentenceSelector(pnum, snum)}`]: {
                display: "initial"
            }
        });
    }, {}));
    const commonStyles = {
        color: "transparent",
        backgroundClip: "text",
        WebkitBackgroundClip: "text",
        userSelect: "none"
    };
    // PREVIOUS CONTENT
    let previousContent = null;
    const previousStyles = _object_spread_props(_object_spread({}, commonStyles), {
        backgroundImage: `linear-gradient(to right, transparent, ${color})`,
        paddingRight: "4px"
    });
    const previousClassName = (0, _reactuse.useCss)(previousStyles);
    // If there is a sentence before, in the same paragraph, we use that one
    // CONTENT
    const { content, hasReachedMaximumLength } = (0, _RpJsonSpotlightSentenceUtils.getSpotlightSentenceContent)({
        sentences,
        stats
    });
    const prevParagraphs = stats.paragraphs[startParagraphNumber - 1];
    if (startSentenceNumber > 1 && !hasReachedMaximumLength) {
        previousContent = /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
            className: previousClassName,
            children: getTextFromCoordinates(stats, startParagraphNumber, startSentenceNumber - 1)
        });
    } else if (startParagraphNumber !== 1 && prevParagraphs && !hasReachedMaximumLength) {
        var _prevParagraph_sentences;
        const prevParagraph = prevParagraphs[prevParagraphs.length - 1];
        previousContent = /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: previousClassName,
                children: getTextFromCoordinates(stats, startParagraphNumber - 1, ((_prevParagraph_sentences = prevParagraph.sentences) === null || _prevParagraph_sentences === void 0 ? void 0 : _prevParagraph_sentences.length) || 1)
            })
        });
    }
    // FOLLOWING CONTENT
    let followingContent = null;
    const followingStyles = _object_spread_props(_object_spread({}, commonStyles), {
        backgroundImage: `linear-gradient(to right, ${color}, transparent)`
    });
    const followingClassName = (0, _reactuse.useCss)(followingStyles);
    // If there is a following sentence in the same paragraph
    const paragraph = (0, _getStatsParagraph.getStatsParagraph)(stats, endParagraphNumber, endSentenceNumber);
    const nextSentence = paragraph === null || paragraph === void 0 ? void 0 : paragraph.sentences.find((sent)=>sent.sentenceNumber === endSentenceNumber + 1);
    if (nextSentence && !hasReachedMaximumLength) {
        followingContent = /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
            className: followingClassName,
            style: {
                paddingLeft: 4
            },
            children: getTextFromCoordinates(stats, endParagraphNumber, endSentenceNumber + 1)
        });
    } else if (stats.paragraphs[endParagraphNumber + 1] && !hasReachedMaximumLength) {
        followingContent = /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                className: followingClassName,
                children: getTextFromCoordinates(stats, endParagraphNumber + 1, 1)
            })
        });
    }
    const baseClassName = (0, _reactuse.useCss)(styles);
    const toRender = {
        type: "PAGE",
        content,
        id: idIterator(),
        tree: []
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `${baseClassName} ${className ? className : ""}`,
        children: [
            previousContent,
            /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                target: "_blank",
                rel: "noreferrer",
                onClick: onLinkClick && onLinkClick,
                children: (0, _createreactelements.createReactElements)(toRender, {}, {
                    idIterator: idIterator,
                    finds,
                    performance: {
                        markupSentences: true,
                        markupDetections
                    }
                })
            }),
            followingContent
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,