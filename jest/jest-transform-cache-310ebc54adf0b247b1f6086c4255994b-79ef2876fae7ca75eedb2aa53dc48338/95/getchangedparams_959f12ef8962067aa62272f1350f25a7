9dd78d3d61fdf50260f419d573ef39a7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getChangedParams", {
    enumerable: true,
    get: function() {
        return getChangedParams;
    }
});
const _paramslist = require("./params-list.js");
const _utils = require("./utils.js");
function getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {
    const keys = [];
    if (!oldParams) return keys;
    const addKey = (key)=>{
        if (keys.indexOf(key) < 0) keys.push(key);
    };
    if (children && oldChildren) {
        const oldChildrenKeys = oldChildren.map(getKey);
        const childrenKeys = children.map(getKey);
        if (oldChildrenKeys.join('') !== childrenKeys.join('')) addKey('children');
        if (oldChildren.length !== children.length) addKey('children');
    }
    const watchParams = _paramslist.paramsList.filter((key)=>key[0] === '_').map((key)=>key.replace(/_/, ''));
    watchParams.forEach((key)=>{
        if (key in swiperParams && key in oldParams) {
            if ((0, _utils.isObject)(swiperParams[key]) && (0, _utils.isObject)(oldParams[key])) {
                const newKeys = Object.keys(swiperParams[key]);
                const oldKeys = Object.keys(oldParams[key]);
                if (newKeys.length !== oldKeys.length) {
                    addKey(key);
                } else {
                    newKeys.forEach((newKey)=>{
                        if (swiperParams[key][newKey] !== oldParams[key][newKey]) {
                            addKey(key);
                        }
                    });
                    oldKeys.forEach((oldKey)=>{
                        if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);
                    });
                }
            } else if (swiperParams[key] !== oldParams[key]) {
                addKey(key);
            }
        }
    });
    return keys;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29tcG9uZW50cy1zaGFyZWQvZ2V0LWNoYW5nZWQtcGFyYW1zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcmFtc0xpc3QgfSBmcm9tICcuL3BhcmFtcy1saXN0LmpzJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi91dGlscy5qcyc7XG5mdW5jdGlvbiBnZXRDaGFuZ2VkUGFyYW1zKHN3aXBlclBhcmFtcywgb2xkUGFyYW1zLCBjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIGdldEtleSkge1xuICBjb25zdCBrZXlzID0gW107XG4gIGlmICghb2xkUGFyYW1zKSByZXR1cm4ga2V5cztcbiAgY29uc3QgYWRkS2V5ID0ga2V5ID0+IHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPCAwKSBrZXlzLnB1c2goa2V5KTtcbiAgfTtcbiAgaWYgKGNoaWxkcmVuICYmIG9sZENoaWxkcmVuKSB7XG4gICAgY29uc3Qgb2xkQ2hpbGRyZW5LZXlzID0gb2xkQ2hpbGRyZW4ubWFwKGdldEtleSk7XG4gICAgY29uc3QgY2hpbGRyZW5LZXlzID0gY2hpbGRyZW4ubWFwKGdldEtleSk7XG4gICAgaWYgKG9sZENoaWxkcmVuS2V5cy5qb2luKCcnKSAhPT0gY2hpbGRyZW5LZXlzLmpvaW4oJycpKSBhZGRLZXkoJ2NoaWxkcmVuJyk7XG4gICAgaWYgKG9sZENoaWxkcmVuLmxlbmd0aCAhPT0gY2hpbGRyZW4ubGVuZ3RoKSBhZGRLZXkoJ2NoaWxkcmVuJyk7XG4gIH1cbiAgY29uc3Qgd2F0Y2hQYXJhbXMgPSBwYXJhbXNMaXN0LmZpbHRlcihrZXkgPT4ga2V5WzBdID09PSAnXycpLm1hcChrZXkgPT4ga2V5LnJlcGxhY2UoL18vLCAnJykpO1xuICB3YXRjaFBhcmFtcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleSBpbiBzd2lwZXJQYXJhbXMgJiYga2V5IGluIG9sZFBhcmFtcykge1xuICAgICAgaWYgKGlzT2JqZWN0KHN3aXBlclBhcmFtc1trZXldKSAmJiBpc09iamVjdChvbGRQYXJhbXNba2V5XSkpIHtcbiAgICAgICAgY29uc3QgbmV3S2V5cyA9IE9iamVjdC5rZXlzKHN3aXBlclBhcmFtc1trZXldKTtcbiAgICAgICAgY29uc3Qgb2xkS2V5cyA9IE9iamVjdC5rZXlzKG9sZFBhcmFtc1trZXldKTtcbiAgICAgICAgaWYgKG5ld0tleXMubGVuZ3RoICE9PSBvbGRLZXlzLmxlbmd0aCkge1xuICAgICAgICAgIGFkZEtleShrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0tleXMuZm9yRWFjaChuZXdLZXkgPT4ge1xuICAgICAgICAgICAgaWYgKHN3aXBlclBhcmFtc1trZXldW25ld0tleV0gIT09IG9sZFBhcmFtc1trZXldW25ld0tleV0pIHtcbiAgICAgICAgICAgICAgYWRkS2V5KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb2xkS2V5cy5mb3JFYWNoKG9sZEtleSA9PiB7XG4gICAgICAgICAgICBpZiAoc3dpcGVyUGFyYW1zW2tleV1bb2xkS2V5XSAhPT0gb2xkUGFyYW1zW2tleV1bb2xkS2V5XSkgYWRkS2V5KGtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyUGFyYW1zW2tleV0gIT09IG9sZFBhcmFtc1trZXldKSB7XG4gICAgICAgIGFkZEtleShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuZXhwb3J0IHsgZ2V0Q2hhbmdlZFBhcmFtcyB9OyJdLCJuYW1lcyI6WyJnZXRDaGFuZ2VkUGFyYW1zIiwic3dpcGVyUGFyYW1zIiwib2xkUGFyYW1zIiwiY2hpbGRyZW4iLCJvbGRDaGlsZHJlbiIsImdldEtleSIsImtleXMiLCJhZGRLZXkiLCJrZXkiLCJpbmRleE9mIiwicHVzaCIsIm9sZENoaWxkcmVuS2V5cyIsIm1hcCIsImNoaWxkcmVuS2V5cyIsImpvaW4iLCJsZW5ndGgiLCJ3YXRjaFBhcmFtcyIsInBhcmFtc0xpc3QiLCJmaWx0ZXIiLCJyZXBsYWNlIiwiZm9yRWFjaCIsImlzT2JqZWN0IiwibmV3S2V5cyIsIk9iamVjdCIsIm9sZEtleXMiLCJuZXdLZXkiLCJvbGRLZXkiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXVDU0E7OztlQUFBQTs7OzRCQXZDa0I7dUJBQ0Y7QUFDekIsU0FBU0EsaUJBQWlCQyxZQUFZLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLE1BQU07SUFDOUUsTUFBTUMsT0FBTyxFQUFFO0lBQ2YsSUFBSSxDQUFDSixXQUFXLE9BQU9JO0lBQ3ZCLE1BQU1DLFNBQVNDLENBQUFBO1FBQ2IsSUFBSUYsS0FBS0csT0FBTyxDQUFDRCxPQUFPLEdBQUdGLEtBQUtJLElBQUksQ0FBQ0Y7SUFDdkM7SUFDQSxJQUFJTCxZQUFZQyxhQUFhO1FBQzNCLE1BQU1PLGtCQUFrQlAsWUFBWVEsR0FBRyxDQUFDUDtRQUN4QyxNQUFNUSxlQUFlVixTQUFTUyxHQUFHLENBQUNQO1FBQ2xDLElBQUlNLGdCQUFnQkcsSUFBSSxDQUFDLFFBQVFELGFBQWFDLElBQUksQ0FBQyxLQUFLUCxPQUFPO1FBQy9ELElBQUlILFlBQVlXLE1BQU0sS0FBS1osU0FBU1ksTUFBTSxFQUFFUixPQUFPO0lBQ3JEO0lBQ0EsTUFBTVMsY0FBY0Msc0JBQVUsQ0FBQ0MsTUFBTSxDQUFDVixDQUFBQSxNQUFPQSxHQUFHLENBQUMsRUFBRSxLQUFLLEtBQUtJLEdBQUcsQ0FBQ0osQ0FBQUEsTUFBT0EsSUFBSVcsT0FBTyxDQUFDLEtBQUs7SUFDekZILFlBQVlJLE9BQU8sQ0FBQ1osQ0FBQUE7UUFDbEIsSUFBSUEsT0FBT1AsZ0JBQWdCTyxPQUFPTixXQUFXO1lBQzNDLElBQUltQixJQUFBQSxlQUFRLEVBQUNwQixZQUFZLENBQUNPLElBQUksS0FBS2EsSUFBQUEsZUFBUSxFQUFDbkIsU0FBUyxDQUFDTSxJQUFJLEdBQUc7Z0JBQzNELE1BQU1jLFVBQVVDLE9BQU9qQixJQUFJLENBQUNMLFlBQVksQ0FBQ08sSUFBSTtnQkFDN0MsTUFBTWdCLFVBQVVELE9BQU9qQixJQUFJLENBQUNKLFNBQVMsQ0FBQ00sSUFBSTtnQkFDMUMsSUFBSWMsUUFBUVAsTUFBTSxLQUFLUyxRQUFRVCxNQUFNLEVBQUU7b0JBQ3JDUixPQUFPQztnQkFDVCxPQUFPO29CQUNMYyxRQUFRRixPQUFPLENBQUNLLENBQUFBO3dCQUNkLElBQUl4QixZQUFZLENBQUNPLElBQUksQ0FBQ2lCLE9BQU8sS0FBS3ZCLFNBQVMsQ0FBQ00sSUFBSSxDQUFDaUIsT0FBTyxFQUFFOzRCQUN4RGxCLE9BQU9DO3dCQUNUO29CQUNGO29CQUNBZ0IsUUFBUUosT0FBTyxDQUFDTSxDQUFBQTt3QkFDZCxJQUFJekIsWUFBWSxDQUFDTyxJQUFJLENBQUNrQixPQUFPLEtBQUt4QixTQUFTLENBQUNNLElBQUksQ0FBQ2tCLE9BQU8sRUFBRW5CLE9BQU9DO29CQUNuRTtnQkFDRjtZQUNGLE9BQU8sSUFBSVAsWUFBWSxDQUFDTyxJQUFJLEtBQUtOLFNBQVMsQ0FBQ00sSUFBSSxFQUFFO2dCQUMvQ0QsT0FBT0M7WUFDVDtRQUNGO0lBQ0Y7SUFDQSxPQUFPRjtBQUNUIn0=