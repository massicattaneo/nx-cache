22092c7963c7a79eb423e5ffc037c1e7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    identifyDatadogUser: function() {
        return identifyDatadogUser;
    },
    initDatadog: function() {
        return initDatadog;
    }
});
const _datefnstz = require("date-fns-tz");
const _browserrum = require("@datadog/browser-rum");
const initDatadog = (environment)=>{
    var _process_env_NX_PUBLIC_VERSION_TIMESTAMP;
    _browserrum.datadogRum.init({
        applicationId: "5ce97988-9c75-4fdb-8c35-90e5daa35c7a",
        clientToken: "pub9f5dfbe9ff3a4876e161bb4016906243",
        // `site` refers to the Datadog site parameter of your organization
        // see https://docs.datadoghq.com/getting_started/site/
        site: "datadoghq.com",
        service: "[bigdata][frontend][web]-bigdata-web-frontend",
        env: environment,
        // Specify a version number to identify the deployed version of your application in Datadog
        version: `${environment}-${(0, _datefnstz.formatInTimeZone)(Number((_process_env_NX_PUBLIC_VERSION_TIMESTAMP = process.env["NX_PUBLIC_VERSION_TIMESTAMP"]) !== null && _process_env_NX_PUBLIC_VERSION_TIMESTAMP !== void 0 ? _process_env_NX_PUBLIC_VERSION_TIMESTAMP : 0), "Europe/Madrid", "yyyy.MM.dd-HH:mm")}`,
        sessionSampleRate: 100,
        sessionReplaySampleRate: environment === "production" ? 0 : 100,
        trackUserInteractions: true,
        trackResources: true,
        trackLongTasks: true,
        defaultPrivacyLevel: "mask-user-input"
    });
};
const identifyDatadogUser = (userInfo)=>{
    _browserrum.datadogRum.setUser({
        id: userInfo.id,
        companyId: userInfo.companyId
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi92ZW5kb3JzL3V0aWxzL3NyYy91dGlscy9kYXRhZG9nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdEluVGltZVpvbmUgfSBmcm9tIFwiZGF0ZS1mbnMtdHpcIlxuaW1wb3J0IHsgZGF0YWRvZ1J1bSB9IGZyb20gXCJAZGF0YWRvZy9icm93c2VyLXJ1bVwiXG5pbXBvcnQgeyBDb25maWdFbnZzIH0gZnJvbSBcIkBycC9jb21tb24vZW52aXJvbm1lbnQvdHlwZXNcIlxuXG5leHBvcnQgY29uc3QgaW5pdERhdGFkb2cgPSAoZW52aXJvbm1lbnQ6IENvbmZpZ0VudnMpID0+IHtcbiAgZGF0YWRvZ1J1bS5pbml0KHtcbiAgICBhcHBsaWNhdGlvbklkOiBcIjVjZTk3OTg4LTljNzUtNGZkYi04YzM1LTkwZTVkYWEzNWM3YVwiLFxuICAgIGNsaWVudFRva2VuOiBcInB1YjlmNWRmYmU5ZmYzYTQ4NzZlMTYxYmI0MDE2OTA2MjQzXCIsXG4gICAgLy8gYHNpdGVgIHJlZmVycyB0byB0aGUgRGF0YWRvZyBzaXRlIHBhcmFtZXRlciBvZiB5b3VyIG9yZ2FuaXphdGlvblxuICAgIC8vIHNlZSBodHRwczovL2RvY3MuZGF0YWRvZ2hxLmNvbS9nZXR0aW5nX3N0YXJ0ZWQvc2l0ZS9cbiAgICBzaXRlOiBcImRhdGFkb2docS5jb21cIixcbiAgICBzZXJ2aWNlOiBcIltiaWdkYXRhXVtmcm9udGVuZF1bd2ViXS1iaWdkYXRhLXdlYi1mcm9udGVuZFwiLFxuICAgIGVudjogZW52aXJvbm1lbnQsXG4gICAgLy8gU3BlY2lmeSBhIHZlcnNpb24gbnVtYmVyIHRvIGlkZW50aWZ5IHRoZSBkZXBsb3llZCB2ZXJzaW9uIG9mIHlvdXIgYXBwbGljYXRpb24gaW4gRGF0YWRvZ1xuICAgIHZlcnNpb246IGAke2Vudmlyb25tZW50fS0ke2Zvcm1hdEluVGltZVpvbmUoXG4gICAgICBOdW1iZXIocHJvY2Vzcy5lbnZbXCJOWF9QVUJMSUNfVkVSU0lPTl9USU1FU1RBTVBcIl0gPz8gMCksXG4gICAgICBcIkV1cm9wZS9NYWRyaWRcIixcbiAgICAgIFwieXl5eS5NTS5kZC1ISDptbVwiLFxuICAgICl9YCxcbiAgICBzZXNzaW9uU2FtcGxlUmF0ZTogMTAwLFxuICAgIHNlc3Npb25SZXBsYXlTYW1wbGVSYXRlOiBlbnZpcm9ubWVudCA9PT0gXCJwcm9kdWN0aW9uXCIgPyAwIDogMTAwLFxuICAgIHRyYWNrVXNlckludGVyYWN0aW9uczogdHJ1ZSxcbiAgICB0cmFja1Jlc291cmNlczogdHJ1ZSxcbiAgICB0cmFja0xvbmdUYXNrczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJpdmFjeUxldmVsOiBcIm1hc2stdXNlci1pbnB1dFwiLFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgaWRlbnRpZnlEYXRhZG9nVXNlciA9ICh1c2VySW5mbzogeyBpZDogc3RyaW5nOyBjb21wYW55SWQ6IHN0cmluZyB9KSA9PiB7XG4gIGRhdGFkb2dSdW0uc2V0VXNlcih7XG4gICAgaWQ6IHVzZXJJbmZvLmlkLFxuICAgIGNvbXBhbnlJZDogdXNlckluZm8uY29tcGFueUlkLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImlkZW50aWZ5RGF0YWRvZ1VzZXIiLCJpbml0RGF0YWRvZyIsImVudmlyb25tZW50IiwicHJvY2VzcyIsImRhdGFkb2dSdW0iLCJpbml0IiwiYXBwbGljYXRpb25JZCIsImNsaWVudFRva2VuIiwic2l0ZSIsInNlcnZpY2UiLCJlbnYiLCJ2ZXJzaW9uIiwiZm9ybWF0SW5UaW1lWm9uZSIsIk51bWJlciIsInNlc3Npb25TYW1wbGVSYXRlIiwic2Vzc2lvblJlcGxheVNhbXBsZVJhdGUiLCJ0cmFja1VzZXJJbnRlcmFjdGlvbnMiLCJ0cmFja1Jlc291cmNlcyIsInRyYWNrTG9uZ1Rhc2tzIiwiZGVmYXVsdFByaXZhY3lMZXZlbCIsInVzZXJJbmZvIiwic2V0VXNlciIsImlkIiwiY29tcGFueUlkIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUE0QmFBLG1CQUFtQjtlQUFuQkE7O0lBeEJBQyxXQUFXO2VBQVhBOzs7MkJBSm9COzRCQUNOO0FBR3BCLE1BQU1BLGNBQWMsQ0FBQ0M7UUFXZkM7SUFWWEMsc0JBQVUsQ0FBQ0MsSUFBSSxDQUFDO1FBQ2RDLGVBQWU7UUFDZkMsYUFBYTtRQUNiLG1FQUFtRTtRQUNuRSx1REFBdUQ7UUFDdkRDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxLQUFLUjtRQUNMLDJGQUEyRjtRQUMzRlMsU0FBUyxDQUFDLEVBQUVULFlBQVksQ0FBQyxFQUFFVSxJQUFBQSwyQkFBZ0IsRUFDekNDLE9BQU9WLENBQUFBLDJDQUFBQSxRQUFRTyxHQUFHLENBQUMsOEJBQThCLGNBQTFDUCxzREFBQUEsMkNBQThDLElBQ3JELGlCQUNBLG9CQUNBLENBQUM7UUFDSFcsbUJBQW1CO1FBQ25CQyx5QkFBeUJiLGdCQUFnQixlQUFlLElBQUk7UUFDNURjLHVCQUF1QjtRQUN2QkMsZ0JBQWdCO1FBQ2hCQyxnQkFBZ0I7UUFDaEJDLHFCQUFxQjtJQUN2QjtBQUNGO0FBRU8sTUFBTW5CLHNCQUFzQixDQUFDb0I7SUFDbENoQixzQkFBVSxDQUFDaUIsT0FBTyxDQUFDO1FBQ2pCQyxJQUFJRixTQUFTRSxFQUFFO1FBQ2ZDLFdBQVdILFNBQVNHLFNBQVM7SUFDL0I7QUFDRiJ9