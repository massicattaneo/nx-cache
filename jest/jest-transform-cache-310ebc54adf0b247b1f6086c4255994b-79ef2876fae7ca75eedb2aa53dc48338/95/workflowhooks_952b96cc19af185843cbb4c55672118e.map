{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/workflow/src/workflow.hooks.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\"\nimport { filterWorkflowSteps } from \"./filterWorkflowSteps\"\nimport { workflowsData } from \"./flowData\"\nimport { WorkflowFacet } from \"./workflow.types\"\n\ntype WorkflowFlags = {\n  enableCustomInstructions: boolean\n}\n\n// -----------------\n// Query Keys\n// -----------------\n\nconst workflowQueryKeys = {\n  all: () => [\"workflows\"],\n  facets: (facet?: WorkflowFacet) => [\"workflows\", facet?.category, facet?.group1] as const,\n  workflow: (flowId: string) => [\"workflow\", flowId] as const,\n}\n\n// -----------------\n// Network Requests\n// -----------------\n\nconst getFlow = (flowId: string) => {\n  const flow = workflowsData.find(flow => flow.id === flowId)\n\n  if (!flow) {\n    throw Error(`Workflow with id ${flowId} not found`)\n  }\n\n  return flow\n}\n\nconst getAllFlows = async (facet?: WorkflowFacet) => {\n  if (!facet) return workflowsData\n  return workflowsData.filter(workflow => {\n    return workflow.disjunctiveFacets?.some(inner => {\n      const sameCategory = facet.category === inner.category\n      const sameGroup1 = facet.group1 === inner.group1\n      return (!inner.group1 && sameCategory) || (sameCategory && sameGroup1)\n    })\n  })\n}\n\n// -----------------\n// Query Hooks\n// -----------------\n\nconst useWorkflowList = (facet?: WorkflowFacet) => {\n  return useQuery({\n    queryKey: workflowQueryKeys.facets(facet),\n    queryFn: () => getAllFlows(facet),\n  })\n}\n\nconst useWorkflow = (flowId: string, flags?: WorkflowFlags) => {\n  return useQuery({\n    queryKey: workflowQueryKeys.workflow(flowId),\n    queryFn: () => getFlow(flowId),\n    retry: false, //On error this avoids retries\n    select: data => {\n      const filteredFlow = filterWorkflowSteps(data, {\n        customInstructions: !flags?.enableCustomInstructions,\n      })\n\n      return filteredFlow\n    },\n  })\n}\n\nexport { useWorkflowList, useWorkflow }\n"],"names":["useWorkflow","useWorkflowList","workflowQueryKeys","all","facets","facet","category","group1","workflow","flowId","getFlow","flow","workflowsData","find","id","Error","getAllFlows","filter","disjunctiveFacets","some","inner","sameCategory","sameGroup1","useQuery","queryKey","queryFn","flags","retry","select","data","filteredFlow","filterWorkflowSteps","customInstructions","enableCustomInstructions"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAsE0BA,WAAW;eAAXA;;IAAjBC,eAAe;eAAfA;;;4BAtEgB;qCACW;0BACN;AAO9B,oBAAoB;AACpB,aAAa;AACb,oBAAoB;AAEpB,MAAMC,oBAAoB;IACxBC,KAAK,IAAM;YAAC;SAAY;IACxBC,QAAQ,CAACC,QAA0B;YAAC;YAAaA,kBAAAA,4BAAAA,MAAOC,QAAQ;YAAED,kBAAAA,4BAAAA,MAAOE,MAAM;SAAC;IAChFC,UAAU,CAACC,SAAmB;YAAC;YAAYA;SAAO;AACpD;AAEA,oBAAoB;AACpB,mBAAmB;AACnB,oBAAoB;AAEpB,MAAMC,UAAU,CAACD;IACf,MAAME,OAAOC,uBAAa,CAACC,IAAI,CAACF,CAAAA,OAAQA,KAAKG,EAAE,KAAKL;IAEpD,IAAI,CAACE,MAAM;QACT,MAAMI,MAAM,CAAC,iBAAiB,EAAEN,OAAO,UAAU,CAAC;IACpD;IAEA,OAAOE;AACT;AAEA,MAAMK,cAAc,OAAOX;IACzB,IAAI,CAACA,OAAO,OAAOO,uBAAa;IAChC,OAAOA,uBAAa,CAACK,MAAM,CAACT,CAAAA;YACnBA;QAAP,QAAOA,8BAAAA,SAASU,iBAAiB,cAA1BV,kDAAAA,4BAA4BW,IAAI,CAACC,CAAAA;YACtC,MAAMC,eAAehB,MAAMC,QAAQ,KAAKc,MAAMd,QAAQ;YACtD,MAAMgB,aAAajB,MAAME,MAAM,KAAKa,MAAMb,MAAM;YAChD,OAAO,AAAC,CAACa,MAAMb,MAAM,IAAIc,gBAAkBA,gBAAgBC;QAC7D;IACF;AACF;AAEA,oBAAoB;AACpB,cAAc;AACd,oBAAoB;AAEpB,MAAMrB,kBAAkB,CAACI;IACvB,OAAOkB,IAAAA,oBAAQ,EAAC;QACdC,UAAUtB,kBAAkBE,MAAM,CAACC;QACnCoB,SAAS,IAAMT,YAAYX;IAC7B;AACF;AAEA,MAAML,cAAc,CAACS,QAAgBiB;IACnC,OAAOH,IAAAA,oBAAQ,EAAC;QACdC,UAAUtB,kBAAkBM,QAAQ,CAACC;QACrCgB,SAAS,IAAMf,QAAQD;QACvBkB,OAAO;QACPC,QAAQC,CAAAA;YACN,MAAMC,eAAeC,IAAAA,wCAAmB,EAACF,MAAM;gBAC7CG,oBAAoB,EAACN,kBAAAA,4BAAAA,MAAOO,wBAAwB;YACtD;YAEA,OAAOH;QACT;IACF;AACF"}