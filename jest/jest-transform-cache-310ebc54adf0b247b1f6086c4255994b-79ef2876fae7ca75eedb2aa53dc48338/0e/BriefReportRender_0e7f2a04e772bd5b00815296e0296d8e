3ecb191056a44147f3f2d959957db984
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BriefReportRender", {
    enumerable: true,
    get: function() {
        return BriefReportRender;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _basecomponents = require("@rp/react/web/common/base-components");
const _core = require("@rp/react/web/mui/core");
const _BriefReportBody = require("./BriefReportBody");
const _BriefReportNotGenerated = require("./BriefReportBody/BriefReportNotGenerated");
const _BriefReportHeader = require("./BriefReportHeader");
const _BriefReportNoNews = require("./BriefReportNoNews");
const _BriefReportSubheader = require("./BriefReportSubheader");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const BriefReportRender = ({ briefReport, briefConfig, isBriefReportRetrying, onAddPrompt })=>{
    const title = isBriefReportRetrying ? "" : (briefReport === null || briefReport === void 0 ? void 0 : briefReport.reportTitle) || (briefConfig === null || briefConfig === void 0 ? void 0 : briefConfig.briefName) || "";
    const hasBriefReport = !!briefReport;
    const shouldShowNoNewsReport = hasBriefReport && briefReport.isEmpty;
    const shouldShowLoader = !hasBriefReport && !isBriefReportRetrying && !shouldShowNoNewsReport;
    const shouldShowNotGenerated = isBriefReportRetrying && !hasBriefReport && !shouldShowNoNewsReport;
    const shouldShowReport = !shouldShowLoader && !shouldShowNotGenerated && !shouldShowNoNewsReport;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            mt: 1,
            width: "100%",
            maxWidth: "750px",
            display: "flex",
            flex: 1,
            flexDirection: "column"
        },
        role: "document",
        "aria-label": "brief report",
        children: [
            shouldShowLoader && /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {}),
            shouldShowNotGenerated && /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefReportNotGenerated.BriefReportNotGenerated, {
                watchlistId: briefConfig === null || briefConfig === void 0 ? void 0 : briefConfig.watchlistIds[0]
            }),
            shouldShowNoNewsReport && /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefReportNoNews.BriefReportNoNews, {
                watchlistId: briefReport === null || briefReport === void 0 ? void 0 : briefReport.watchlistId
            }),
            shouldShowReport && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefReportHeader.BriefReportHeader, {
                        title: title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefReportSubheader.BriefReportSubheader, {
                        reportDate: briefReport === null || briefReport === void 0 ? void 0 : briefReport.reportDate
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefReportBody.BriefReportBody, {
                        isBriefReportRetrying: isBriefReportRetrying,
                        briefReport: briefReport,
                        onAddPrompt: onAddPrompt
                    })
                ]
            })
        ]
    }, title);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9jb21wb25lbnRzL0JyaWVmUmVwb3J0L0JyaWVmUmVwb3J0UmVuZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEJyaWVmQ29uZmlnLCBCcmllZlJlcG9ydCwgQnJpZWZSZXBvcnRDb21wYW55UmVwb3J0IH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvYnJpZWZcIlxuaW1wb3J0IHsgTG9hZGluZ1NwaW5uZXIgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vYmFzZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IEJveCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IEJyaWVmUmVwb3J0Qm9keSB9IGZyb20gXCIuL0JyaWVmUmVwb3J0Qm9keVwiXG5pbXBvcnQgeyBCcmllZlJlcG9ydE5vdEdlbmVyYXRlZCB9IGZyb20gXCIuL0JyaWVmUmVwb3J0Qm9keS9CcmllZlJlcG9ydE5vdEdlbmVyYXRlZFwiXG5pbXBvcnQgeyBCcmllZlJlcG9ydEhlYWRlciB9IGZyb20gXCIuL0JyaWVmUmVwb3J0SGVhZGVyXCJcbmltcG9ydCB7IEJyaWVmUmVwb3J0Tm9OZXdzIH0gZnJvbSBcIi4vQnJpZWZSZXBvcnROb05ld3NcIlxuaW1wb3J0IHsgQnJpZWZSZXBvcnRTdWJoZWFkZXIgfSBmcm9tIFwiLi9CcmllZlJlcG9ydFN1YmhlYWRlclwiXG5cbnR5cGUgQnJpZWZSZXBvcnRSZW5kZXJQcm9wcyA9IHtcbiAgYnJpZWZSZXBvcnQ6IEJyaWVmUmVwb3J0IHwgbnVsbFxuICBpc0JyaWVmUmVwb3J0UmV0cnlpbmc6IGJvb2xlYW5cbiAgYnJpZWZDb25maWc6IEJyaWVmQ29uZmlnIHwgbnVsbFxuICBvbkFkZFByb21wdDogKHRleHQ6IHN0cmluZywgZW50aXR5SW5mbz86IEJyaWVmUmVwb3J0Q29tcGFueVJlcG9ydFtcImVudGl0eUluZm9cIl0pID0+IHZvaWRcbn1cblxuY29uc3QgQnJpZWZSZXBvcnRSZW5kZXIgPSAoe1xuICBicmllZlJlcG9ydCxcbiAgYnJpZWZDb25maWcsXG4gIGlzQnJpZWZSZXBvcnRSZXRyeWluZyxcbiAgb25BZGRQcm9tcHQsXG59OiBCcmllZlJlcG9ydFJlbmRlclByb3BzKSA9PiB7XG4gIGNvbnN0IHRpdGxlID0gaXNCcmllZlJlcG9ydFJldHJ5aW5nXG4gICAgPyBcIlwiXG4gICAgOiBicmllZlJlcG9ydD8ucmVwb3J0VGl0bGUgfHwgYnJpZWZDb25maWc/LmJyaWVmTmFtZSB8fCBcIlwiXG5cbiAgY29uc3QgaGFzQnJpZWZSZXBvcnQgPSAhIWJyaWVmUmVwb3J0XG5cbiAgY29uc3Qgc2hvdWxkU2hvd05vTmV3c1JlcG9ydCA9IGhhc0JyaWVmUmVwb3J0ICYmIGJyaWVmUmVwb3J0LmlzRW1wdHlcbiAgY29uc3Qgc2hvdWxkU2hvd0xvYWRlciA9ICFoYXNCcmllZlJlcG9ydCAmJiAhaXNCcmllZlJlcG9ydFJldHJ5aW5nICYmICFzaG91bGRTaG93Tm9OZXdzUmVwb3J0XG4gIGNvbnN0IHNob3VsZFNob3dOb3RHZW5lcmF0ZWQgPSBpc0JyaWVmUmVwb3J0UmV0cnlpbmcgJiYgIWhhc0JyaWVmUmVwb3J0ICYmICFzaG91bGRTaG93Tm9OZXdzUmVwb3J0XG4gIGNvbnN0IHNob3VsZFNob3dSZXBvcnQgPSAhc2hvdWxkU2hvd0xvYWRlciAmJiAhc2hvdWxkU2hvd05vdEdlbmVyYXRlZCAmJiAhc2hvdWxkU2hvd05vTmV3c1JlcG9ydFxuXG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgc3g9e3tcbiAgICAgICAgbXQ6IDEsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgbWF4V2lkdGg6IFwiNzUwcHhcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICB9fVxuICAgICAga2V5PXt0aXRsZX1cbiAgICAgIHJvbGU9XCJkb2N1bWVudFwiXG4gICAgICBhcmlhLWxhYmVsPVwiYnJpZWYgcmVwb3J0XCJcbiAgICA+XG4gICAgICB7c2hvdWxkU2hvd0xvYWRlciAmJiA8TG9hZGluZ1NwaW5uZXIgLz59XG5cbiAgICAgIHtzaG91bGRTaG93Tm90R2VuZXJhdGVkICYmIChcbiAgICAgICAgPEJyaWVmUmVwb3J0Tm90R2VuZXJhdGVkIHdhdGNobGlzdElkPXticmllZkNvbmZpZz8ud2F0Y2hsaXN0SWRzWzBdfSAvPlxuICAgICAgKX1cblxuICAgICAge3Nob3VsZFNob3dOb05ld3NSZXBvcnQgJiYgPEJyaWVmUmVwb3J0Tm9OZXdzIHdhdGNobGlzdElkPXticmllZlJlcG9ydD8ud2F0Y2hsaXN0SWR9IC8+fVxuXG4gICAgICB7c2hvdWxkU2hvd1JlcG9ydCAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEJyaWVmUmVwb3J0SGVhZGVyIHRpdGxlPXt0aXRsZX0gLz5cblxuICAgICAgICAgIDxCcmllZlJlcG9ydFN1YmhlYWRlciByZXBvcnREYXRlPXticmllZlJlcG9ydD8ucmVwb3J0RGF0ZX0gLz5cblxuICAgICAgICAgIDxCcmllZlJlcG9ydEJvZHlcbiAgICAgICAgICAgIGlzQnJpZWZSZXBvcnRSZXRyeWluZz17aXNCcmllZlJlcG9ydFJldHJ5aW5nfVxuICAgICAgICAgICAgYnJpZWZSZXBvcnQ9e2JyaWVmUmVwb3J0fVxuICAgICAgICAgICAgb25BZGRQcm9tcHQ9e29uQWRkUHJvbXB0fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKVxufVxuXG5leHBvcnQgeyBCcmllZlJlcG9ydFJlbmRlciB9XG4iXSwibmFtZXMiOlsiQnJpZWZSZXBvcnRSZW5kZXIiLCJicmllZlJlcG9ydCIsImJyaWVmQ29uZmlnIiwiaXNCcmllZlJlcG9ydFJldHJ5aW5nIiwib25BZGRQcm9tcHQiLCJ0aXRsZSIsInJlcG9ydFRpdGxlIiwiYnJpZWZOYW1lIiwiaGFzQnJpZWZSZXBvcnQiLCJzaG91bGRTaG93Tm9OZXdzUmVwb3J0IiwiaXNFbXB0eSIsInNob3VsZFNob3dMb2FkZXIiLCJzaG91bGRTaG93Tm90R2VuZXJhdGVkIiwic2hvdWxkU2hvd1JlcG9ydCIsIkJveCIsInN4IiwibXQiLCJ3aWR0aCIsIm1heFdpZHRoIiwiZGlzcGxheSIsImZsZXgiLCJmbGV4RGlyZWN0aW9uIiwicm9sZSIsImFyaWEtbGFiZWwiLCJMb2FkaW5nU3Bpbm5lciIsIkJyaWVmUmVwb3J0Tm90R2VuZXJhdGVkIiwid2F0Y2hsaXN0SWQiLCJ3YXRjaGxpc3RJZHMiLCJCcmllZlJlcG9ydE5vTmV3cyIsIkJyaWVmUmVwb3J0SGVhZGVyIiwiQnJpZWZSZXBvcnRTdWJoZWFkZXIiLCJyZXBvcnREYXRlIiwiQnJpZWZSZXBvcnRCb2R5Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBeUVTQTs7O2VBQUFBOzs7OzhEQXpFUztnQ0FFYTtzQkFDWDtpQ0FDWTt5Q0FDUTttQ0FDTjttQ0FDQTtzQ0FDRzs7Ozs7O0FBU3JDLE1BQU1BLG9CQUFvQixDQUFDLEVBQ3pCQyxXQUFXLEVBQ1hDLFdBQVcsRUFDWEMscUJBQXFCLEVBQ3JCQyxXQUFXLEVBQ1k7SUFDdkIsTUFBTUMsUUFBUUYsd0JBQ1YsS0FDQUYsQ0FBQUEsd0JBQUFBLGtDQUFBQSxZQUFhSyxXQUFXLE1BQUlKLHdCQUFBQSxrQ0FBQUEsWUFBYUssU0FBUyxLQUFJO0lBRTFELE1BQU1DLGlCQUFpQixDQUFDLENBQUNQO0lBRXpCLE1BQU1RLHlCQUF5QkQsa0JBQWtCUCxZQUFZUyxPQUFPO0lBQ3BFLE1BQU1DLG1CQUFtQixDQUFDSCxrQkFBa0IsQ0FBQ0wseUJBQXlCLENBQUNNO0lBQ3ZFLE1BQU1HLHlCQUF5QlQseUJBQXlCLENBQUNLLGtCQUFrQixDQUFDQztJQUM1RSxNQUFNSSxtQkFBbUIsQ0FBQ0Ysb0JBQW9CLENBQUNDLDBCQUEwQixDQUFDSDtJQUUxRSxxQkFDRSxzQkFBQ0ssU0FBRztRQUNGQyxJQUFJO1lBQ0ZDLElBQUk7WUFDSkMsT0FBTztZQUNQQyxVQUFVO1lBQ1ZDLFNBQVM7WUFDVEMsTUFBTTtZQUNOQyxlQUFlO1FBQ2pCO1FBRUFDLE1BQUs7UUFDTEMsY0FBVzs7WUFFVlosa0NBQW9CLHFCQUFDYSw4QkFBYztZQUVuQ1osd0NBQ0MscUJBQUNhLGdEQUF1QjtnQkFBQ0MsV0FBVyxFQUFFeEIsd0JBQUFBLGtDQUFBQSxZQUFheUIsWUFBWSxDQUFDLEVBQUU7O1lBR25FbEIsd0NBQTBCLHFCQUFDbUIsb0NBQWlCO2dCQUFDRixXQUFXLEVBQUV6Qix3QkFBQUEsa0NBQUFBLFlBQWF5QixXQUFXOztZQUVsRmIsa0NBQ0M7O2tDQUNFLHFCQUFDZ0Isb0NBQWlCO3dCQUFDeEIsT0FBT0E7O2tDQUUxQixxQkFBQ3lCLDBDQUFvQjt3QkFBQ0MsVUFBVSxFQUFFOUIsd0JBQUFBLGtDQUFBQSxZQUFhOEIsVUFBVTs7a0NBRXpELHFCQUFDQyxnQ0FBZTt3QkFDZDdCLHVCQUF1QkE7d0JBQ3ZCRixhQUFhQTt3QkFDYkcsYUFBYUE7Ozs7O09BckJkQztBQTJCWCJ9