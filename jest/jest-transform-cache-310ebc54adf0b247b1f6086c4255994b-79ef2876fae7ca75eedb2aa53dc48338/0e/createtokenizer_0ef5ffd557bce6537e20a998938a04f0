3c351042a028e382b79c15408e519351
/**
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenType} TokenType
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ /**
 * @callback Restore
 * @returns {undefined}
 *
 * @typedef Info
 * @property {Restore} restore
 * @property {number} from
 *
 * @callback ReturnHandle
 *   Handle a successful run.
 * @param {Construct} construct
 * @param {Info} info
 * @returns {undefined}
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createTokenizer", {
    enumerable: true,
    get: function() {
        return createTokenizer;
    }
});
const _micromarkutilcharacter = require("micromark-util-character");
const _micromarkutilchunked = require("micromark-util-chunked");
const _micromarkutilresolveall = require("micromark-util-resolve-all");
function createTokenizer(parser, initialize, from) {
    /** @type {Point} */ let point = Object.assign(from ? Object.assign({}, from) : {
        line: 1,
        column: 1,
        offset: 0
    }, {
        _index: 0,
        _bufferIndex: -1
    });
    /** @type {Record<string, number>} */ const columnStart = {};
    /** @type {Array<Construct>} */ const resolveAllConstructs = [];
    /** @type {Array<Chunk>} */ let chunks = [];
    /** @type {Array<Token>} */ let stack = [];
    /** @type {boolean | undefined} */ let consumed = true;
    /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */ const effects = {
        consume,
        enter,
        exit,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
            interrupt: true
        })
    };
    /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */ const context = {
        previous: null,
        code: null,
        containerState: {},
        events: [],
        parser,
        sliceStream,
        sliceSerialize,
        now,
        defineSkip,
        write
    };
    /**
   * The state function.
   *
   * @type {State | undefined}
   */ let state = initialize.tokenize.call(context, effects);
    /**
   * Track which character we expect to be consumed, to catch bugs.
   *
   * @type {Code}
   */ let expectedCode;
    if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
    }
    return context;
    /** @type {TokenizeContext['write']} */ function write(slice) {
        chunks = (0, _micromarkutilchunked.push)(chunks, slice);
        main();
        // Exit if we’re not done, resolve might change stuff.
        if (chunks[chunks.length - 1] !== null) {
            return [];
        }
        addResult(initialize, 0);
        // Otherwise, resolve, and exit.
        context.events = (0, _micromarkutilresolveall.resolveAll)(resolveAllConstructs, context.events, context);
        return context.events;
    }
    //
    // Tools.
    //
    /** @type {TokenizeContext['sliceSerialize']} */ function sliceSerialize(token, expandTabs) {
        return serializeChunks(sliceStream(token), expandTabs);
    }
    /** @type {TokenizeContext['sliceStream']} */ function sliceStream(token) {
        return sliceChunks(chunks, token);
    }
    /** @type {TokenizeContext['now']} */ function now() {
        // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
        const { line, column, offset, _index, _bufferIndex } = point;
        return {
            line,
            column,
            offset,
            _index,
            _bufferIndex
        };
    }
    /** @type {TokenizeContext['defineSkip']} */ function defineSkip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
    }
    //
    // State management.
    //
    /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {undefined}
   */ function main() {
        /** @type {number} */ let chunkIndex;
        while(point._index < chunks.length){
            const chunk = chunks[point._index];
            // If we’re in a buffer chunk, loop through it.
            if (typeof chunk === 'string') {
                chunkIndex = point._index;
                if (point._bufferIndex < 0) {
                    point._bufferIndex = 0;
                }
                while(point._index === chunkIndex && point._bufferIndex < chunk.length){
                    go(chunk.charCodeAt(point._bufferIndex));
                }
            } else {
                go(chunk);
            }
        }
    }
    /**
   * Deal with one code.
   *
   * @param {Code} code
   * @returns {undefined}
   */ function go(code) {
        consumed = undefined;
        expectedCode = code;
        state = state(code);
    }
    /** @type {Effects['consume']} */ function consume(code) {
        if ((0, _micromarkutilcharacter.markdownLineEnding)(code)) {
            point.line++;
            point.column = 1;
            point.offset += code === -3 ? 2 : 1;
            accountForPotentialSkip();
        } else if (code !== -1) {
            point.column++;
            point.offset++;
        }
        // Not in a string chunk.
        if (point._bufferIndex < 0) {
            point._index++;
        } else {
            point._bufferIndex++;
            // At end of string chunk.
            // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
            // strings.
            if (point._bufferIndex === chunks[point._index].length) {
                point._bufferIndex = -1;
                point._index++;
            }
        }
        // Expose the previous character.
        context.previous = code;
        // Mark as consumed.
        consumed = true;
    }
    /** @type {Effects['enter']} */ function enter(type, fields) {
        /** @type {Token} */ // @ts-expect-error Patch instead of assign required fields to help GC.
        const token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push([
            'enter',
            token,
            context
        ]);
        stack.push(token);
        return token;
    }
    /** @type {Effects['exit']} */ function exit(type) {
        const token = stack.pop();
        token.end = now();
        context.events.push([
            'exit',
            token,
            context
        ]);
        return token;
    }
    /**
   * Use results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
    }
    /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */ function onsuccessfulcheck(_, info) {
        info.restore();
    }
    /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   * @param {{interrupt?: boolean | undefined} | undefined} [fields]
   */ function constructFactory(onreturn, fields) {
        return hook;
        /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Array<Construct> | Construct | ConstructRecord} constructs
     * @param {State} returnState
     * @param {State | undefined} [bogusState]
     * @returns {State}
     */ function hook(constructs, returnState, bogusState) {
            /** @type {Array<Construct>} */ let listOfConstructs;
            /** @type {number} */ let constructIndex;
            /** @type {Construct} */ let currentConstruct;
            /** @type {Info} */ let info;
            return Array.isArray(constructs) ? handleListOfConstructs(constructs) : 'tokenize' in constructs ? handleListOfConstructs([
                constructs
            ]) : handleMapOfConstructs(constructs);
            /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       * @returns {State}
       */ function handleMapOfConstructs(map) {
                return start;
                /** @type {State} */ function start(code) {
                    const def = code !== null && map[code];
                    const all = code !== null && map.null;
                    const list = [
                        // To do: add more extension tests.
                        /* c8 ignore next 2 */ ...Array.isArray(def) ? def : def ? [
                            def
                        ] : [],
                        ...Array.isArray(all) ? all : all ? [
                            all
                        ] : []
                    ];
                    return handleListOfConstructs(list)(code);
                }
            }
            /**
       * Handle a list of construct.
       *
       * @param {Array<Construct>} list
       * @returns {State}
       */ function handleListOfConstructs(list) {
                listOfConstructs = list;
                constructIndex = 0;
                if (list.length === 0) {
                    return bogusState;
                }
                return handleConstruct(list[constructIndex]);
            }
            /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       * @returns {State}
       */ function handleConstruct(construct) {
                return start;
                /** @type {State} */ function start(code) {
                    // To do: not needed to store if there is no bogus state, probably?
                    // Currently doesn’t work because `inspect` in document does a check
                    // w/o a bogus, which doesn’t make sense. But it does seem to help perf
                    // by not storing.
                    info = store();
                    currentConstruct = construct;
                    if (!construct.partial) {
                        context.currentConstruct = construct;
                    }
                    // Always populated by defaults.
                    if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
                        return nok(code);
                    }
                    return construct.tokenize.call(// If we do have fields, create an object w/ `context` as its
                    // prototype.
                    // This allows a “live binding”, which is needed for `interrupt`.
                    fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
                }
            }
            /** @type {State} */ function ok(code) {
                consumed = true;
                onreturn(currentConstruct, info);
                return returnState;
            }
            /** @type {State} */ function nok(code) {
                consumed = true;
                info.restore();
                if (++constructIndex < listOfConstructs.length) {
                    return handleConstruct(listOfConstructs[constructIndex]);
                }
                return bogusState;
            }
        }
    }
    /**
   * @param {Construct} construct
   * @param {number} from
   * @returns {undefined}
   */ function addResult(construct, from) {
        if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
            resolveAllConstructs.push(construct);
        }
        if (construct.resolve) {
            (0, _micromarkutilchunked.splice)(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
        }
        if (construct.resolveTo) {
            context.events = construct.resolveTo(context.events, context);
        }
    }
    /**
   * Store state.
   *
   * @returns {Info}
   */ function store() {
        const startPoint = now();
        const startPrevious = context.previous;
        const startCurrentConstruct = context.currentConstruct;
        const startEventsIndex = context.events.length;
        const startStack = Array.from(stack);
        return {
            restore,
            from: startEventsIndex
        };
        /**
     * Restore state.
     *
     * @returns {undefined}
     */ function restore() {
            point = startPoint;
            context.previous = startPrevious;
            context.currentConstruct = startCurrentConstruct;
            context.events.length = startEventsIndex;
            stack = startStack;
            accountForPotentialSkip();
        }
    }
    /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {undefined}
   */ function accountForPotentialSkip() {
        if (point.line in columnStart && point.column < 2) {
            point.column = columnStart[point.line];
            point.offset += columnStart[point.line] - 1;
        }
    }
}
/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {Array<Chunk>} chunks
 * @param {Pick<Token, 'end' | 'start'>} token
 * @returns {Array<Chunk>}
 */ function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    /** @type {Array<Chunk>} */ let view;
    if (startIndex === endIndex) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view = [
            chunks[startIndex].slice(startBufferIndex, endBufferIndex)
        ];
    } else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
            const head = view[0];
            if (typeof head === 'string') {
                view[0] = head.slice(startBufferIndex);
            } else {
                view.shift();
            }
        }
        if (endBufferIndex > 0) {
            // @ts-expect-error `_bufferIndex` is used on string chunks.
            view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
    }
    return view;
}
/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @param {boolean | undefined} [expandTabs=false]
 * @returns {string}
 */ function serializeChunks(chunks, expandTabs) {
    let index = -1;
    /** @type {Array<string>} */ const result = [];
    /** @type {boolean | undefined} */ let atTab;
    while(++index < chunks.length){
        const chunk = chunks[index];
        /** @type {string} */ let value;
        if (typeof chunk === 'string') {
            value = chunk;
        } else switch(chunk){
            case -5:
                {
                    value = '\r';
                    break;
                }
            case -4:
                {
                    value = '\n';
                    break;
                }
            case -3:
                {
                    value = '\r' + '\n';
                    break;
                }
            case -2:
                {
                    value = expandTabs ? ' ' : '\t';
                    break;
                }
            case -1:
                {
                    if (!expandTabs && atTab) continue;
                    value = ' ';
                    break;
                }
            default:
                {
                    // Currently only replacement character.
                    value = String.fromCharCode(chunk);
                }
        }
        atTab = chunk === -2;
        result.push(value);
    }
    return result.join('');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2NyZWF0ZS10b2tlbml6ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNodW5rfSBDaHVua1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdFJlY29yZH0gQ29uc3RydWN0UmVjb3JkXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVmZmVjdHN9IEVmZmVjdHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbENvbnN0cnVjdH0gSW5pdGlhbENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5QYXJzZUNvbnRleHR9IFBhcnNlQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Qb2ludH0gUG9pbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlblR5cGV9IFRva2VuVHlwZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIFJlc3RvcmVcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKlxuICogQHR5cGVkZWYgSW5mb1xuICogQHByb3BlcnR5IHtSZXN0b3JlfSByZXN0b3JlXG4gKiBAcHJvcGVydHkge251bWJlcn0gZnJvbVxuICpcbiAqIEBjYWxsYmFjayBSZXR1cm5IYW5kbGVcbiAqICAgSGFuZGxlIGEgc3VjY2Vzc2Z1bCBydW4uXG4gKiBAcGFyYW0ge0NvbnN0cnVjdH0gY29uc3RydWN0XG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7cHVzaCwgc3BsaWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaHVua2VkJ1xuaW1wb3J0IHtyZXNvbHZlQWxsfSBmcm9tICdtaWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbCdcbi8qKlxuICogQ3JlYXRlIGEgdG9rZW5pemVyLlxuICogVG9rZW5pemVycyBkZWFsIHdpdGggb25lIHR5cGUgb2YgZGF0YSAoZS5nLiwgY29udGFpbmVycywgZmxvdywgdGV4dCkuXG4gKiBUaGUgcGFyc2VyIGlzIHRoZSBvYmplY3QgZGVhbGluZyB3aXRoIGl0IGFsbC5cbiAqIGBpbml0aWFsaXplYCB3b3JrcyBsaWtlIG90aGVyIGNvbnN0cnVjdHMsIGV4Y2VwdCB0aGF0IG9ubHkgaXRzIGB0b2tlbml6ZWBcbiAqIGZ1bmN0aW9uIGlzIHVzZWQsIGluIHdoaWNoIGNhc2UgaXQgZG9lc27igJl0IHJlY2VpdmUgYW4gYG9rYCBvciBgbm9rYC5cbiAqIGBmcm9tYCBjYW4gYmUgZ2l2ZW4gdG8gc2V0IHRoZSBwb2ludCBiZWZvcmUgdGhlIGZpcnN0IGNoYXJhY3RlciwgYWx0aG91Z2hcbiAqIHdoZW4gZnVydGhlciBsaW5lcyBhcmUgaW5kZW50ZWQsIHRoZXkgbXVzdCBiZSBzZXQgd2l0aCBgZGVmaW5lU2tpcGAuXG4gKlxuICogQHBhcmFtIHtQYXJzZUNvbnRleHR9IHBhcnNlclxuICogQHBhcmFtIHtJbml0aWFsQ29uc3RydWN0fSBpbml0aWFsaXplXG4gKiBAcGFyYW0ge09taXQ8UG9pbnQsICdfYnVmZmVySW5kZXgnIHwgJ19pbmRleCc+IHwgdW5kZWZpbmVkfSBbZnJvbV1cbiAqIEByZXR1cm5zIHtUb2tlbml6ZUNvbnRleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsaXplLCBmcm9tKSB7XG4gIC8qKiBAdHlwZSB7UG9pbnR9ICovXG4gIGxldCBwb2ludCA9IE9iamVjdC5hc3NpZ24oXG4gICAgZnJvbVxuICAgICAgPyBPYmplY3QuYXNzaWduKHt9LCBmcm9tKVxuICAgICAgOiB7XG4gICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICBjb2x1bW46IDEsXG4gICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgIH0sXG4gICAge1xuICAgICAgX2luZGV4OiAwLFxuICAgICAgX2J1ZmZlckluZGV4OiAtMVxuICAgIH1cbiAgKVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIG51bWJlcj59ICovXG4gIGNvbnN0IGNvbHVtblN0YXJ0ID0ge31cbiAgLyoqIEB0eXBlIHtBcnJheTxDb25zdHJ1Y3Q+fSAqL1xuICBjb25zdCByZXNvbHZlQWxsQ29uc3RydWN0cyA9IFtdXG4gIC8qKiBAdHlwZSB7QXJyYXk8Q2h1bms+fSAqL1xuICBsZXQgY2h1bmtzID0gW11cbiAgLyoqIEB0eXBlIHtBcnJheTxUb2tlbj59ICovXG4gIGxldCBzdGFjayA9IFtdXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGNvbnN1bWVkID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBUb29scyB1c2VkIGZvciB0b2tlbml6aW5nLlxuICAgKlxuICAgKiBAdHlwZSB7RWZmZWN0c31cbiAgICovXG4gIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgY29uc3VtZSxcbiAgICBlbnRlcixcbiAgICBleGl0LFxuICAgIGF0dGVtcHQ6IGNvbnN0cnVjdEZhY3Rvcnkob25zdWNjZXNzZnVsY29uc3RydWN0KSxcbiAgICBjaGVjazogY29uc3RydWN0RmFjdG9yeShvbnN1Y2Nlc3NmdWxjaGVjayksXG4gICAgaW50ZXJydXB0OiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrLCB7XG4gICAgICBpbnRlcnJ1cHQ6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRlIGFuZCB0b29scyBmb3IgcmVzb2x2aW5nIGFuZCBzZXJpYWxpemluZy5cbiAgICpcbiAgICogQHR5cGUge1Rva2VuaXplQ29udGV4dH1cbiAgICovXG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgcHJldmlvdXM6IG51bGwsXG4gICAgY29kZTogbnVsbCxcbiAgICBjb250YWluZXJTdGF0ZToge30sXG4gICAgZXZlbnRzOiBbXSxcbiAgICBwYXJzZXIsXG4gICAgc2xpY2VTdHJlYW0sXG4gICAgc2xpY2VTZXJpYWxpemUsXG4gICAgbm93LFxuICAgIGRlZmluZVNraXAsXG4gICAgd3JpdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc3RhdGUgZnVuY3Rpb24uXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZSB8IHVuZGVmaW5lZH1cbiAgICovXG4gIGxldCBzdGF0ZSA9IGluaXRpYWxpemUudG9rZW5pemUuY2FsbChjb250ZXh0LCBlZmZlY3RzKVxuXG4gIC8qKlxuICAgKiBUcmFjayB3aGljaCBjaGFyYWN0ZXIgd2UgZXhwZWN0IHRvIGJlIGNvbnN1bWVkLCB0byBjYXRjaCBidWdzLlxuICAgKlxuICAgKiBAdHlwZSB7Q29kZX1cbiAgICovXG4gIGxldCBleHBlY3RlZENvZGVcbiAgaWYgKGluaXRpYWxpemUucmVzb2x2ZUFsbCkge1xuICAgIHJlc29sdmVBbGxDb25zdHJ1Y3RzLnB1c2goaW5pdGlhbGl6ZSlcbiAgfVxuICByZXR1cm4gY29udGV4dFxuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0Wyd3cml0ZSddfSAqL1xuICBmdW5jdGlvbiB3cml0ZShzbGljZSkge1xuICAgIGNodW5rcyA9IHB1c2goY2h1bmtzLCBzbGljZSlcbiAgICBtYWluKClcblxuICAgIC8vIEV4aXQgaWYgd2XigJlyZSBub3QgZG9uZSwgcmVzb2x2ZSBtaWdodCBjaGFuZ2Ugc3R1ZmYuXG4gICAgaWYgKGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV0gIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBhZGRSZXN1bHQoaW5pdGlhbGl6ZSwgMClcblxuICAgIC8vIE90aGVyd2lzZSwgcmVzb2x2ZSwgYW5kIGV4aXQuXG4gICAgY29udGV4dC5ldmVudHMgPSByZXNvbHZlQWxsKHJlc29sdmVBbGxDb25zdHJ1Y3RzLCBjb250ZXh0LmV2ZW50cywgY29udGV4dClcbiAgICByZXR1cm4gY29udGV4dC5ldmVudHNcbiAgfVxuXG4gIC8vXG4gIC8vIFRvb2xzLlxuICAvL1xuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0WydzbGljZVNlcmlhbGl6ZSddfSAqL1xuICBmdW5jdGlvbiBzbGljZVNlcmlhbGl6ZSh0b2tlbiwgZXhwYW5kVGFicykge1xuICAgIHJldHVybiBzZXJpYWxpemVDaHVua3Moc2xpY2VTdHJlYW0odG9rZW4pLCBleHBhbmRUYWJzKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ3NsaWNlU3RyZWFtJ119ICovXG4gIGZ1bmN0aW9uIHNsaWNlU3RyZWFtKHRva2VuKSB7XG4gICAgcmV0dXJuIHNsaWNlQ2h1bmtzKGNodW5rcywgdG9rZW4pXG4gIH1cblxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dFsnbm93J119ICovXG4gIGZ1bmN0aW9uIG5vdygpIHtcbiAgICAvLyBUaGlzIGlzIGEgaG90IHBhdGgsIHNvIHdlIGNsb25lIG1hbnVhbGx5IGluc3RlYWQgb2YgYE9iamVjdC5hc3NpZ24oe30sIHBvaW50KWBcbiAgICBjb25zdCB7bGluZSwgY29sdW1uLCBvZmZzZXQsIF9pbmRleCwgX2J1ZmZlckluZGV4fSA9IHBvaW50XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmUsXG4gICAgICBjb2x1bW4sXG4gICAgICBvZmZzZXQsXG4gICAgICBfaW5kZXgsXG4gICAgICBfYnVmZmVySW5kZXhcbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dFsnZGVmaW5lU2tpcCddfSAqL1xuICBmdW5jdGlvbiBkZWZpbmVTa2lwKHZhbHVlKSB7XG4gICAgY29sdW1uU3RhcnRbdmFsdWUubGluZV0gPSB2YWx1ZS5jb2x1bW5cbiAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gIH1cblxuICAvL1xuICAvLyBTdGF0ZSBtYW5hZ2VtZW50LlxuICAvL1xuXG4gIC8qKlxuICAgKiBNYWluIGxvb3AgKG5vdGUgdGhhdCBgX2luZGV4YCBhbmQgYF9idWZmZXJJbmRleGAgaW4gYHBvaW50YCBhcmUgbW9kaWZpZWQgYnlcbiAgICogYGNvbnN1bWVgKS5cbiAgICogSGVyZSBpcyB3aGVyZSB3ZSB3YWxrIHRocm91Z2ggdGhlIGNodW5rcywgd2hpY2ggZWl0aGVyIGluY2x1ZGUgc3RyaW5ncyBvZlxuICAgKiBzZXZlcmFsIGNoYXJhY3RlcnMsIG9yIG51bWVyaWNhbCBjaGFyYWN0ZXIgY29kZXMuXG4gICAqIFRoZSByZWFzb24gdG8gZG8gdGhpcyBpbiBhIGxvb3AgaW5zdGVhZCBvZiBhIGNhbGwgaXMgc28gdGhlIHN0YWNrIGNhblxuICAgKiBkcmFpbi5cbiAgICpcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgbGV0IGNodW5rSW5kZXhcbiAgICB3aGlsZSAocG9pbnQuX2luZGV4IDwgY2h1bmtzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbcG9pbnQuX2luZGV4XVxuXG4gICAgICAvLyBJZiB3ZeKAmXJlIGluIGEgYnVmZmVyIGNodW5rLCBsb29wIHRocm91Z2ggaXQuXG4gICAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgICBjaHVua0luZGV4ID0gcG9pbnQuX2luZGV4XG4gICAgICAgIGlmIChwb2ludC5fYnVmZmVySW5kZXggPCAwKSB7XG4gICAgICAgICAgcG9pbnQuX2J1ZmZlckluZGV4ID0gMFxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICBwb2ludC5faW5kZXggPT09IGNodW5rSW5kZXggJiZcbiAgICAgICAgICBwb2ludC5fYnVmZmVySW5kZXggPCBjaHVuay5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgZ28oY2h1bmsuY2hhckNvZGVBdChwb2ludC5fYnVmZmVySW5kZXgpKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbyhjaHVuaylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVhbCB3aXRoIG9uZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICovXG4gIGZ1bmN0aW9uIGdvKGNvZGUpIHtcbiAgICBjb25zdW1lZCA9IHVuZGVmaW5lZFxuICAgIGV4cGVjdGVkQ29kZSA9IGNvZGVcbiAgICBzdGF0ZSA9IHN0YXRlKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2NvbnN1bWUnXX0gKi9cbiAgZnVuY3Rpb24gY29uc3VtZShjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcG9pbnQubGluZSsrXG4gICAgICBwb2ludC5jb2x1bW4gPSAxXG4gICAgICBwb2ludC5vZmZzZXQgKz0gY29kZSA9PT0gLTMgPyAyIDogMVxuICAgICAgYWNjb3VudEZvclBvdGVudGlhbFNraXAoKVxuICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gLTEpIHtcbiAgICAgIHBvaW50LmNvbHVtbisrXG4gICAgICBwb2ludC5vZmZzZXQrK1xuICAgIH1cblxuICAgIC8vIE5vdCBpbiBhIHN0cmluZyBjaHVuay5cbiAgICBpZiAocG9pbnQuX2J1ZmZlckluZGV4IDwgMCkge1xuICAgICAgcG9pbnQuX2luZGV4KytcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnQuX2J1ZmZlckluZGV4KytcblxuICAgICAgLy8gQXQgZW5kIG9mIHN0cmluZyBjaHVuay5cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgUG9pbnRzIHcvIG5vbi1uZWdhdGl2ZSBgX2J1ZmZlckluZGV4YCByZWZlcmVuY2VcbiAgICAgIC8vIHN0cmluZ3MuXG4gICAgICBpZiAocG9pbnQuX2J1ZmZlckluZGV4ID09PSBjaHVua3NbcG9pbnQuX2luZGV4XS5sZW5ndGgpIHtcbiAgICAgICAgcG9pbnQuX2J1ZmZlckluZGV4ID0gLTFcbiAgICAgICAgcG9pbnQuX2luZGV4KytcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgdGhlIHByZXZpb3VzIGNoYXJhY3Rlci5cbiAgICBjb250ZXh0LnByZXZpb3VzID0gY29kZVxuXG4gICAgLy8gTWFyayBhcyBjb25zdW1lZC5cbiAgICBjb25zdW1lZCA9IHRydWVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWZmZWN0c1snZW50ZXInXX0gKi9cbiAgZnVuY3Rpb24gZW50ZXIodHlwZSwgZmllbGRzKSB7XG4gICAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoIGluc3RlYWQgb2YgYXNzaWduIHJlcXVpcmVkIGZpZWxkcyB0byBoZWxwIEdDLlxuICAgIGNvbnN0IHRva2VuID0gZmllbGRzIHx8IHt9XG4gICAgdG9rZW4udHlwZSA9IHR5cGVcbiAgICB0b2tlbi5zdGFydCA9IG5vdygpXG4gICAgY29udGV4dC5ldmVudHMucHVzaChbJ2VudGVyJywgdG9rZW4sIGNvbnRleHRdKVxuICAgIHN0YWNrLnB1c2godG9rZW4pXG4gICAgcmV0dXJuIHRva2VuXG4gIH1cblxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2V4aXQnXX0gKi9cbiAgZnVuY3Rpb24gZXhpdCh0eXBlKSB7XG4gICAgY29uc3QgdG9rZW4gPSBzdGFjay5wb3AoKVxuICAgIHRva2VuLmVuZCA9IG5vdygpXG4gICAgY29udGV4dC5ldmVudHMucHVzaChbJ2V4aXQnLCB0b2tlbiwgY29udGV4dF0pXG4gICAgcmV0dXJuIHRva2VuXG4gIH1cblxuICAvKipcbiAgICogVXNlIHJlc3VsdHMuXG4gICAqXG4gICAqIEB0eXBlIHtSZXR1cm5IYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbnN1Y2Nlc3NmdWxjb25zdHJ1Y3QoY29uc3RydWN0LCBpbmZvKSB7XG4gICAgYWRkUmVzdWx0KGNvbnN0cnVjdCwgaW5mby5mcm9tKVxuICB9XG5cbiAgLyoqXG4gICAqIERpc2NhcmQgcmVzdWx0cy5cbiAgICpcbiAgICogQHR5cGUge1JldHVybkhhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uc3VjY2Vzc2Z1bGNoZWNrKF8sIGluZm8pIHtcbiAgICBpbmZvLnJlc3RvcmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEZhY3RvcnkgdG8gYXR0ZW1wdC9jaGVjay9pbnRlcnJ1cHQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmV0dXJuSGFuZGxlfSBvbnJldHVyblxuICAgKiBAcGFyYW0ge3tpbnRlcnJ1cHQ/OiBib29sZWFuIHwgdW5kZWZpbmVkfSB8IHVuZGVmaW5lZH0gW2ZpZWxkc11cbiAgICovXG4gIGZ1bmN0aW9uIGNvbnN0cnVjdEZhY3Rvcnkob25yZXR1cm4sIGZpZWxkcykge1xuICAgIHJldHVybiBob29rXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgZWl0aGVyIGFuIG9iamVjdCBtYXBwaW5nIGNvZGVzIHRvIGNvbnN0cnVjdHMsIGEgbGlzdCBvZlxuICAgICAqIGNvbnN0cnVjdHMsIG9yIGEgc2luZ2xlIGNvbnN0cnVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXk8Q29uc3RydWN0PiB8IENvbnN0cnVjdCB8IENvbnN0cnVjdFJlY29yZH0gY29uc3RydWN0c1xuICAgICAqIEBwYXJhbSB7U3RhdGV9IHJldHVyblN0YXRlXG4gICAgICogQHBhcmFtIHtTdGF0ZSB8IHVuZGVmaW5lZH0gW2JvZ3VzU3RhdGVdXG4gICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhvb2soY29uc3RydWN0cywgcmV0dXJuU3RhdGUsIGJvZ3VzU3RhdGUpIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Q29uc3RydWN0Pn0gKi9cbiAgICAgIGxldCBsaXN0T2ZDb25zdHJ1Y3RzXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgIGxldCBjb25zdHJ1Y3RJbmRleFxuICAgICAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG4gICAgICBsZXQgY3VycmVudENvbnN0cnVjdFxuICAgICAgLyoqIEB0eXBlIHtJbmZvfSAqL1xuICAgICAgbGV0IGluZm9cbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNvbnN0cnVjdHMpIC8qIGM4IGlnbm9yZSBuZXh0IDEgKi9cbiAgICAgICAgPyBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKGNvbnN0cnVjdHMpXG4gICAgICAgIDogJ3Rva2VuaXplJyBpbiBjb25zdHJ1Y3RzXG4gICAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvciBMb29rcyBsaWtlIGEgY29uc3RydWN0LlxuICAgICAgICAgIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMoW2NvbnN0cnVjdHNdKVxuICAgICAgICA6IGhhbmRsZU1hcE9mQ29uc3RydWN0cyhjb25zdHJ1Y3RzKVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIGxpc3Qgb2YgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Q29uc3RydWN0UmVjb3JkfSBtYXBcbiAgICAgICAqIEByZXR1cm5zIHtTdGF0ZX1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaGFuZGxlTWFwT2ZDb25zdHJ1Y3RzKG1hcCkge1xuICAgICAgICByZXR1cm4gc3RhcnRcblxuICAgICAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgICAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICAgICAgY29uc3QgZGVmID0gY29kZSAhPT0gbnVsbCAmJiBtYXBbY29kZV1cbiAgICAgICAgICBjb25zdCBhbGwgPSBjb2RlICE9PSBudWxsICYmIG1hcC5udWxsXG4gICAgICAgICAgY29uc3QgbGlzdCA9IFtcbiAgICAgICAgICAgIC8vIFRvIGRvOiBhZGQgbW9yZSBleHRlbnNpb24gdGVzdHMuXG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShkZWYpID8gZGVmIDogZGVmID8gW2RlZl0gOiBbXSksXG4gICAgICAgICAgICAuLi4oQXJyYXkuaXNBcnJheShhbGwpID8gYWxsIDogYWxsID8gW2FsbF0gOiBbXSlcbiAgICAgICAgICBdXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMobGlzdCkoY29kZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIGxpc3Qgb2YgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXk8Q29uc3RydWN0Pn0gbGlzdFxuICAgICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKGxpc3QpIHtcbiAgICAgICAgbGlzdE9mQ29uc3RydWN0cyA9IGxpc3RcbiAgICAgICAgY29uc3RydWN0SW5kZXggPSAwXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBib2d1c1N0YXRlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhbmRsZUNvbnN0cnVjdChsaXN0W2NvbnN0cnVjdEluZGV4XSlcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgYSBzaW5nbGUgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Q29uc3RydWN0fSBjb25zdHJ1Y3RcbiAgICAgICAqIEByZXR1cm5zIHtTdGF0ZX1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaGFuZGxlQ29uc3RydWN0KGNvbnN0cnVjdCkge1xuICAgICAgICByZXR1cm4gc3RhcnRcblxuICAgICAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgICAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICAgICAgLy8gVG8gZG86IG5vdCBuZWVkZWQgdG8gc3RvcmUgaWYgdGhlcmUgaXMgbm8gYm9ndXMgc3RhdGUsIHByb2JhYmx5P1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBkb2VzbuKAmXQgd29yayBiZWNhdXNlIGBpbnNwZWN0YCBpbiBkb2N1bWVudCBkb2VzIGEgY2hlY2tcbiAgICAgICAgICAvLyB3L28gYSBib2d1cywgd2hpY2ggZG9lc27igJl0IG1ha2Ugc2Vuc2UuIEJ1dCBpdCBkb2VzIHNlZW0gdG8gaGVscCBwZXJmXG4gICAgICAgICAgLy8gYnkgbm90IHN0b3JpbmcuXG4gICAgICAgICAgaW5mbyA9IHN0b3JlKClcbiAgICAgICAgICBjdXJyZW50Q29uc3RydWN0ID0gY29uc3RydWN0XG4gICAgICAgICAgaWYgKCFjb25zdHJ1Y3QucGFydGlhbCkge1xuICAgICAgICAgICAgY29udGV4dC5jdXJyZW50Q29uc3RydWN0ID0gY29uc3RydWN0XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWx3YXlzIHBvcHVsYXRlZCBieSBkZWZhdWx0cy5cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnN0cnVjdC5uYW1lICYmXG4gICAgICAgICAgICBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcyhjb25zdHJ1Y3QubmFtZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBub2soY29kZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdC50b2tlbml6ZS5jYWxsKFxuICAgICAgICAgICAgLy8gSWYgd2UgZG8gaGF2ZSBmaWVsZHMsIGNyZWF0ZSBhbiBvYmplY3Qgdy8gYGNvbnRleHRgIGFzIGl0c1xuICAgICAgICAgICAgLy8gcHJvdG90eXBlLlxuICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgYSDigJxsaXZlIGJpbmRpbmfigJ0sIHdoaWNoIGlzIG5lZWRlZCBmb3IgYGludGVycnVwdGAuXG4gICAgICAgICAgICBmaWVsZHMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoY29udGV4dCksIGZpZWxkcykgOiBjb250ZXh0LFxuICAgICAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgICAgIG9rLFxuICAgICAgICAgICAgbm9rXG4gICAgICAgICAgKShjb2RlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgICBmdW5jdGlvbiBvayhjb2RlKSB7XG4gICAgICAgIGNvbnN1bWVkID0gdHJ1ZVxuICAgICAgICBvbnJldHVybihjdXJyZW50Q29uc3RydWN0LCBpbmZvKVxuICAgICAgICByZXR1cm4gcmV0dXJuU3RhdGVcbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICAgIGZ1bmN0aW9uIG5vayhjb2RlKSB7XG4gICAgICAgIGNvbnN1bWVkID0gdHJ1ZVxuICAgICAgICBpbmZvLnJlc3RvcmUoKVxuICAgICAgICBpZiAoKytjb25zdHJ1Y3RJbmRleCA8IGxpc3RPZkNvbnN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUNvbnN0cnVjdChsaXN0T2ZDb25zdHJ1Y3RzW2NvbnN0cnVjdEluZGV4XSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm9ndXNTdGF0ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbnN0cnVjdH0gY29uc3RydWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqL1xuICBmdW5jdGlvbiBhZGRSZXN1bHQoY29uc3RydWN0LCBmcm9tKSB7XG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlQWxsICYmICFyZXNvbHZlQWxsQ29uc3RydWN0cy5pbmNsdWRlcyhjb25zdHJ1Y3QpKSB7XG4gICAgICByZXNvbHZlQWxsQ29uc3RydWN0cy5wdXNoKGNvbnN0cnVjdClcbiAgICB9XG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlKSB7XG4gICAgICBzcGxpY2UoXG4gICAgICAgIGNvbnRleHQuZXZlbnRzLFxuICAgICAgICBmcm9tLFxuICAgICAgICBjb250ZXh0LmV2ZW50cy5sZW5ndGggLSBmcm9tLFxuICAgICAgICBjb25zdHJ1Y3QucmVzb2x2ZShjb250ZXh0LmV2ZW50cy5zbGljZShmcm9tKSwgY29udGV4dClcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlVG8pIHtcbiAgICAgIGNvbnRleHQuZXZlbnRzID0gY29uc3RydWN0LnJlc29sdmVUbyhjb250ZXh0LmV2ZW50cywgY29udGV4dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcmUgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmZvfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RvcmUoKSB7XG4gICAgY29uc3Qgc3RhcnRQb2ludCA9IG5vdygpXG4gICAgY29uc3Qgc3RhcnRQcmV2aW91cyA9IGNvbnRleHQucHJldmlvdXNcbiAgICBjb25zdCBzdGFydEN1cnJlbnRDb25zdHJ1Y3QgPSBjb250ZXh0LmN1cnJlbnRDb25zdHJ1Y3RcbiAgICBjb25zdCBzdGFydEV2ZW50c0luZGV4ID0gY29udGV4dC5ldmVudHMubGVuZ3RoXG4gICAgY29uc3Qgc3RhcnRTdGFjayA9IEFycmF5LmZyb20oc3RhY2spXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RvcmUsXG4gICAgICBmcm9tOiBzdGFydEV2ZW50c0luZGV4XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzdG9yZSBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIHBvaW50ID0gc3RhcnRQb2ludFxuICAgICAgY29udGV4dC5wcmV2aW91cyA9IHN0YXJ0UHJldmlvdXNcbiAgICAgIGNvbnRleHQuY3VycmVudENvbnN0cnVjdCA9IHN0YXJ0Q3VycmVudENvbnN0cnVjdFxuICAgICAgY29udGV4dC5ldmVudHMubGVuZ3RoID0gc3RhcnRFdmVudHNJbmRleFxuICAgICAgc3RhY2sgPSBzdGFydFN0YWNrXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdGhlIGN1cnJlbnQgcG9pbnQgYSBiaXQgZm9yd2FyZCBpbiB0aGUgbGluZSB3aGVuIGl04oCZcyBvbiBhIGNvbHVtblxuICAgKiBza2lwLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKi9cbiAgZnVuY3Rpb24gYWNjb3VudEZvclBvdGVudGlhbFNraXAoKSB7XG4gICAgaWYgKHBvaW50LmxpbmUgaW4gY29sdW1uU3RhcnQgJiYgcG9pbnQuY29sdW1uIDwgMikge1xuICAgICAgcG9pbnQuY29sdW1uID0gY29sdW1uU3RhcnRbcG9pbnQubGluZV1cbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2x1bW5TdGFydFtwb2ludC5saW5lXSAtIDFcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNodW5rcyBmcm9tIGEgc2xpY2Ugb2YgY2h1bmtzIGluIHRoZSByYW5nZSBvZiBhIHRva2VuLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8Q2h1bms+fSBjaHVua3NcbiAqIEBwYXJhbSB7UGljazxUb2tlbiwgJ2VuZCcgfCAnc3RhcnQnPn0gdG9rZW5cbiAqIEByZXR1cm5zIHtBcnJheTxDaHVuaz59XG4gKi9cbmZ1bmN0aW9uIHNsaWNlQ2h1bmtzKGNodW5rcywgdG9rZW4pIHtcbiAgY29uc3Qgc3RhcnRJbmRleCA9IHRva2VuLnN0YXJ0Ll9pbmRleFxuICBjb25zdCBzdGFydEJ1ZmZlckluZGV4ID0gdG9rZW4uc3RhcnQuX2J1ZmZlckluZGV4XG4gIGNvbnN0IGVuZEluZGV4ID0gdG9rZW4uZW5kLl9pbmRleFxuICBjb25zdCBlbmRCdWZmZXJJbmRleCA9IHRva2VuLmVuZC5fYnVmZmVySW5kZXhcbiAgLyoqIEB0eXBlIHtBcnJheTxDaHVuaz59ICovXG4gIGxldCB2aWV3XG4gIGlmIChzdGFydEluZGV4ID09PSBlbmRJbmRleCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYF9idWZmZXJJbmRleGAgaXMgdXNlZCBvbiBzdHJpbmcgY2h1bmtzLlxuICAgIHZpZXcgPSBbY2h1bmtzW3N0YXJ0SW5kZXhdLnNsaWNlKHN0YXJ0QnVmZmVySW5kZXgsIGVuZEJ1ZmZlckluZGV4KV1cbiAgfSBlbHNlIHtcbiAgICB2aWV3ID0gY2h1bmtzLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuICAgIGlmIChzdGFydEJ1ZmZlckluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGhlYWQgPSB2aWV3WzBdXG4gICAgICBpZiAodHlwZW9mIGhlYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZpZXdbMF0gPSBoZWFkLnNsaWNlKHN0YXJ0QnVmZmVySW5kZXgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2aWV3LnNoaWZ0KClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuZEJ1ZmZlckluZGV4ID4gMCkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgX2J1ZmZlckluZGV4YCBpcyB1c2VkIG9uIHN0cmluZyBjaHVua3MuXG4gICAgICB2aWV3LnB1c2goY2h1bmtzW2VuZEluZGV4XS5zbGljZSgwLCBlbmRCdWZmZXJJbmRleCkpXG4gICAgfVxuICB9XG4gIHJldHVybiB2aWV3XG59XG5cbi8qKlxuICogR2V0IHRoZSBzdHJpbmcgdmFsdWUgb2YgYSBzbGljZSBvZiBjaHVua3MuXG4gKlxuICogQHBhcmFtIHtBcnJheTxDaHVuaz59IGNodW5rc1xuICogQHBhcmFtIHtib29sZWFuIHwgdW5kZWZpbmVkfSBbZXhwYW5kVGFicz1mYWxzZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZUNodW5rcyhjaHVua3MsIGV4cGFuZFRhYnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCByZXN1bHQgPSBbXVxuICAvKiogQHR5cGUge2Jvb2xlYW4gfCB1bmRlZmluZWR9ICovXG4gIGxldCBhdFRhYlxuICB3aGlsZSAoKytpbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICBjb25zdCBjaHVuayA9IGNodW5rc1tpbmRleF1cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgdmFsdWVcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBjaHVua1xuICAgIH0gZWxzZVxuICAgICAgc3dpdGNoIChjaHVuaykge1xuICAgICAgICBjYXNlIC01OiB7XG4gICAgICAgICAgdmFsdWUgPSAnXFxyJ1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAtNDoge1xuICAgICAgICAgIHZhbHVlID0gJ1xcbidcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgLTM6IHtcbiAgICAgICAgICB2YWx1ZSA9ICdcXHInICsgJ1xcbidcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgLTI6IHtcbiAgICAgICAgICB2YWx1ZSA9IGV4cGFuZFRhYnMgPyAnICcgOiAnXFx0J1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAtMToge1xuICAgICAgICAgIGlmICghZXhwYW5kVGFicyAmJiBhdFRhYikgY29udGludWVcbiAgICAgICAgICB2YWx1ZSA9ICcgJ1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBvbmx5IHJlcGxhY2VtZW50IGNoYXJhY3Rlci5cbiAgICAgICAgICB2YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2h1bmspXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBhdFRhYiA9IGNodW5rID09PSAtMlxuICAgIHJlc3VsdC5wdXNoKHZhbHVlKVxuICB9XG4gIHJldHVybiByZXN1bHQuam9pbignJylcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVUb2tlbml6ZXIiLCJwYXJzZXIiLCJpbml0aWFsaXplIiwiZnJvbSIsInBvaW50IiwiT2JqZWN0IiwiYXNzaWduIiwibGluZSIsImNvbHVtbiIsIm9mZnNldCIsIl9pbmRleCIsIl9idWZmZXJJbmRleCIsImNvbHVtblN0YXJ0IiwicmVzb2x2ZUFsbENvbnN0cnVjdHMiLCJjaHVua3MiLCJzdGFjayIsImNvbnN1bWVkIiwiZWZmZWN0cyIsImNvbnN1bWUiLCJlbnRlciIsImV4aXQiLCJhdHRlbXB0IiwiY29uc3RydWN0RmFjdG9yeSIsIm9uc3VjY2Vzc2Z1bGNvbnN0cnVjdCIsImNoZWNrIiwib25zdWNjZXNzZnVsY2hlY2siLCJpbnRlcnJ1cHQiLCJjb250ZXh0IiwicHJldmlvdXMiLCJjb2RlIiwiY29udGFpbmVyU3RhdGUiLCJldmVudHMiLCJzbGljZVN0cmVhbSIsInNsaWNlU2VyaWFsaXplIiwibm93IiwiZGVmaW5lU2tpcCIsIndyaXRlIiwic3RhdGUiLCJ0b2tlbml6ZSIsImNhbGwiLCJleHBlY3RlZENvZGUiLCJyZXNvbHZlQWxsIiwicHVzaCIsInNsaWNlIiwibWFpbiIsImxlbmd0aCIsImFkZFJlc3VsdCIsInRva2VuIiwiZXhwYW5kVGFicyIsInNlcmlhbGl6ZUNodW5rcyIsInNsaWNlQ2h1bmtzIiwidmFsdWUiLCJhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCIsImNodW5rSW5kZXgiLCJjaHVuayIsImdvIiwiY2hhckNvZGVBdCIsInVuZGVmaW5lZCIsIm1hcmtkb3duTGluZUVuZGluZyIsInR5cGUiLCJmaWVsZHMiLCJzdGFydCIsInBvcCIsImVuZCIsImNvbnN0cnVjdCIsImluZm8iLCJfIiwicmVzdG9yZSIsIm9ucmV0dXJuIiwiaG9vayIsImNvbnN0cnVjdHMiLCJyZXR1cm5TdGF0ZSIsImJvZ3VzU3RhdGUiLCJsaXN0T2ZDb25zdHJ1Y3RzIiwiY29uc3RydWN0SW5kZXgiLCJjdXJyZW50Q29uc3RydWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiaGFuZGxlTGlzdE9mQ29uc3RydWN0cyIsImhhbmRsZU1hcE9mQ29uc3RydWN0cyIsIm1hcCIsImRlZiIsImFsbCIsIm51bGwiLCJsaXN0IiwiaGFuZGxlQ29uc3RydWN0Iiwic3RvcmUiLCJwYXJ0aWFsIiwibmFtZSIsImRpc2FibGUiLCJpbmNsdWRlcyIsIm5vayIsImNyZWF0ZSIsIm9rIiwicmVzb2x2ZSIsInNwbGljZSIsInJlc29sdmVUbyIsInN0YXJ0UG9pbnQiLCJzdGFydFByZXZpb3VzIiwic3RhcnRDdXJyZW50Q29uc3RydWN0Iiwic3RhcnRFdmVudHNJbmRleCIsInN0YXJ0U3RhY2siLCJzdGFydEluZGV4Iiwic3RhcnRCdWZmZXJJbmRleCIsImVuZEluZGV4IiwiZW5kQnVmZmVySW5kZXgiLCJ2aWV3IiwiaGVhZCIsInNoaWZ0IiwiaW5kZXgiLCJyZXN1bHQiLCJhdFRhYiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImpvaW4iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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