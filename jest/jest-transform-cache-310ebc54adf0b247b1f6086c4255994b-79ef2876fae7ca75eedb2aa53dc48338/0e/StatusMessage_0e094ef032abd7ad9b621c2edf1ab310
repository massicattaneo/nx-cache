35a3c82061767552db334609a5d474ef
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StatusMessage", {
    enumerable: true,
    get: function() {
        return StatusMessage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _material = require("@mui/material");
const UPDATE_INTERVAL = 500;
const getMessageToDisplay = (message, currentMessage)=>{
    if (message === undefined) {
        return "";
    }
    if (typeof message === "string") {
        return message;
    }
    if (message.length === 1) {
        return message[0];
    }
    let newMessage = undefined;
    while(newMessage === undefined || newMessage === currentMessage){
        const randomIndex = Math.floor(Math.random() * message.length);
        newMessage = message[randomIndex];
    }
    return newMessage;
};
const StatusMessage = ({ message, completed })=>{
    const [displayMessage, setDisplaymessage] = (0, _react.useState)(getMessageToDisplay(message, undefined));
    (0, _react.useEffect)(()=>{
        let intervalId;
        if (!completed) {
            intervalId = setInterval(()=>setDisplaymessage((prev)=>getMessageToDisplay(message, prev)), UPDATE_INTERVAL);
        }
        if (completed) {
            setDisplaymessage((prev)=>getMessageToDisplay(message, prev));
        }
        return ()=>clearInterval(intervalId);
    }, [
        completed,
        message
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_material.Typography, {
        children: [
            " ",
            displayMessage
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L0NoYXQvQ2hhdFJlc3BvbnNlL1JlYWxUaW1lQXVkaXQvU3RhdHVzTWVzc2FnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIlxuXG5jb25zdCBVUERBVEVfSU5URVJWQUwgPSA1MDBcblxudHlwZSBTdGF0dXNNZXNzYWdlVGV4dCA9IHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCB1bmRlZmluZWRcblxudHlwZSBQcm9wcyA9IHtcbiAgbWVzc2FnZTogU3RhdHVzTWVzc2FnZVRleHRcbiAgY29tcGxldGVkOiBib29sZWFuXG59XG5cbmNvbnN0IGdldE1lc3NhZ2VUb0Rpc3BsYXkgPSAobWVzc2FnZTogU3RhdHVzTWVzc2FnZVRleHQsIGN1cnJlbnRNZXNzYWdlOiBTdGF0dXNNZXNzYWdlVGV4dCkgPT4ge1xuICBpZiAobWVzc2FnZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFwiXCJcbiAgfVxuXG4gIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cblxuICBpZiAobWVzc2FnZS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gbWVzc2FnZVswXVxuICB9XG5cbiAgbGV0IG5ld01lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxuICB3aGlsZSAobmV3TWVzc2FnZSA9PT0gdW5kZWZpbmVkIHx8IG5ld01lc3NhZ2UgPT09IGN1cnJlbnRNZXNzYWdlKSB7XG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtZXNzYWdlLmxlbmd0aClcbiAgICBuZXdNZXNzYWdlID0gbWVzc2FnZVtyYW5kb21JbmRleF1cbiAgfVxuXG4gIHJldHVybiBuZXdNZXNzYWdlXG59XG5cbmNvbnN0IFN0YXR1c01lc3NhZ2UgPSAoeyBtZXNzYWdlLCBjb21wbGV0ZWQgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgW2Rpc3BsYXlNZXNzYWdlLCBzZXREaXNwbGF5bWVzc2FnZV0gPSB1c2VTdGF0ZShnZXRNZXNzYWdlVG9EaXNwbGF5KG1lc3NhZ2UsIHVuZGVmaW5lZCkpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaW50ZXJ2YWxJZDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0SW50ZXJ2YWw+XG4gICAgaWYgKCFjb21wbGV0ZWQpIHtcbiAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgKCkgPT4gc2V0RGlzcGxheW1lc3NhZ2UocHJldiA9PiBnZXRNZXNzYWdlVG9EaXNwbGF5KG1lc3NhZ2UsIHByZXYpKSxcbiAgICAgICAgVVBEQVRFX0lOVEVSVkFMLFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgIHNldERpc3BsYXltZXNzYWdlKHByZXYgPT4gZ2V0TWVzc2FnZVRvRGlzcGxheShtZXNzYWdlLCBwcmV2KSlcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKVxuICB9LCBbY29tcGxldGVkLCBtZXNzYWdlXSlcblxuICByZXR1cm4gPFR5cG9ncmFwaHk+IHtkaXNwbGF5TWVzc2FnZX08L1R5cG9ncmFwaHk+XG59XG5cbmV4cG9ydCB7IFN0YXR1c01lc3NhZ2UgfVxuIl0sIm5hbWVzIjpbIlN0YXR1c01lc3NhZ2UiLCJVUERBVEVfSU5URVJWQUwiLCJnZXRNZXNzYWdlVG9EaXNwbGF5IiwibWVzc2FnZSIsImN1cnJlbnRNZXNzYWdlIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwibmV3TWVzc2FnZSIsInJhbmRvbUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY29tcGxldGVkIiwiZGlzcGxheU1lc3NhZ2UiLCJzZXREaXNwbGF5bWVzc2FnZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiaW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwicHJldiIsImNsZWFySW50ZXJ2YWwiLCJUeXBvZ3JhcGh5Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBd0RTQTs7O2VBQUFBOzs7O3VCQXhEMkI7MEJBQ1Q7QUFFM0IsTUFBTUMsa0JBQWtCO0FBU3hCLE1BQU1DLHNCQUFzQixDQUFDQyxTQUE0QkM7SUFDdkQsSUFBSUQsWUFBWUUsV0FBVztRQUN6QixPQUFPO0lBQ1Q7SUFFQSxJQUFJLE9BQU9GLFlBQVksVUFBVTtRQUMvQixPQUFPQTtJQUNUO0lBRUEsSUFBSUEsUUFBUUcsTUFBTSxLQUFLLEdBQUc7UUFDeEIsT0FBT0gsT0FBTyxDQUFDLEVBQUU7SUFDbkI7SUFFQSxJQUFJSSxhQUFpQ0Y7SUFDckMsTUFBT0UsZUFBZUYsYUFBYUUsZUFBZUgsZUFBZ0I7UUFDaEUsTUFBTUksY0FBY0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtSLFFBQVFHLE1BQU07UUFDN0RDLGFBQWFKLE9BQU8sQ0FBQ0ssWUFBWTtJQUNuQztJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxNQUFNUCxnQkFBZ0IsQ0FBQyxFQUFFRyxPQUFPLEVBQUVTLFNBQVMsRUFBUztJQUNsRCxNQUFNLENBQUNDLGdCQUFnQkMsa0JBQWtCLEdBQUdDLElBQUFBLGVBQVEsRUFBQ2Isb0JBQW9CQyxTQUFTRTtJQUVsRlcsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUlDO1FBQ0osSUFBSSxDQUFDTCxXQUFXO1lBQ2RLLGFBQWFDLFlBQ1gsSUFBTUosa0JBQWtCSyxDQUFBQSxPQUFRakIsb0JBQW9CQyxTQUFTZ0IsUUFDN0RsQjtRQUVKO1FBRUEsSUFBSVcsV0FBVztZQUNiRSxrQkFBa0JLLENBQUFBLE9BQVFqQixvQkFBb0JDLFNBQVNnQjtRQUN6RDtRQUVBLE9BQU8sSUFBTUMsY0FBY0g7SUFDN0IsR0FBRztRQUFDTDtRQUFXVDtLQUFRO0lBRXZCLHFCQUFPLHNCQUFDa0Isb0JBQVU7O1lBQUM7WUFBRVI7OztBQUN2QiJ9