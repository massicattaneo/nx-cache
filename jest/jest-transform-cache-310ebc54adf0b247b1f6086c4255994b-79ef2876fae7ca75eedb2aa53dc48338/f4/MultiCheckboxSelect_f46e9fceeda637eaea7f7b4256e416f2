243a2a79d8e5890515b2bb60653f24b5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MultiCheckboxSelect", {
    enumerable: true,
    get: function() {
        return MultiCheckboxSelect;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _InfiniteList = require("../InfiniteList");
const _MultiCheckboxSelectstyles = require("./MultiCheckboxSelect.styles");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const PADDING_X = 8;
function getLabelText(values) {
    if (!values.length) return "All";
    if (values.length === 1) return values[0].label;
    return `${values[0].label} +${values.length - 1}`;
}
function equalsCheck(a, b) {
    const idsA = a.map((i)=>i.value);
    const idsB = b.map((i)=>i.value);
    return idsA.length === idsB.length && idsA.every((id)=>idsB.includes(id));
}
function MultiCheckboxSelect({ label, placeholder, items, renderItem, onChange, value = [], sx, isLoading = false, initialElements, search = "", onSearch }) {
    const [anchorEl, setAnchorEl] = (0, _react.useState)(null);
    const [notConfirmed, setNotConfirmed] = (0, _react.useState)([]);
    const [open, setOpen] = (0, _react.useState)(false);
    const [width, setWidth] = (0, _react.useState)();
    const ref = (0, _react.useRef)(null);
    const close = ()=>{
        setWidth(undefined);
    };
    const toggle = (0, _react.useCallback)((item)=>{
        setNotConfirmed((prev)=>{
            const index = prev.findIndex((conf)=>conf.value === item.value);
            if (index !== -1) {
                prev.splice(index, 1);
                return [
                    ...prev
                ];
            }
            return [
                ...prev,
                item
            ];
        });
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: sx,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_MultiCheckboxSelectstyles.MultiCheckboxSelectWrapper, {
                className: open ? "expanded" : "",
                ref: setAnchorEl,
                onClick: ()=>{
                    setOpen((prev)=>{
                        if (prev) close();
                        return !prev;
                    });
                    setNotConfirmed([
                        ...value
                    ]);
                    onSearch === null || onSearch === void 0 ? void 0 : onSearch("");
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputLabel, {
                        children: label
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        children: getLabelText(value)
                    }),
                    open ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowDropUp, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowDropDown, {})
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_MultiCheckboxSelectstyles.PopoverStyled, {
                sx: {
                    "& .MuiPopover-paper": {
                        width,
                        px: `${PADDING_X}px`
                    }
                },
                open: open,
                anchorEl: anchorEl,
                anchorOrigin: {
                    vertical: "bottom",
                    horizontal: "left"
                },
                transformOrigin: {
                    horizontal: "left",
                    vertical: "top"
                },
                onClose: ()=>{
                    setOpen(false);
                    close();
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TextField, {
                        size: "small",
                        placeholder: placeholder,
                        sx: {
                            marginY: "8px"
                        },
                        InputProps: {
                            startAdornment: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {})
                        },
                        onChange: (ev)=>onSearch === null || onSearch === void 0 ? void 0 : onSearch(ev.target.value),
                        onFocus: ()=>{
                            if (ref.current) {
                                setWidth(ref.current.offsetWidth + PADDING_X * 2);
                            }
                        },
                        value: search
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_MultiCheckboxSelectstyles.ListContainer, {
                        ref: ref,
                        children: [
                            value.filter((item)=>item.label.toLowerCase().includes(search.toLowerCase())).map((val, index)=>{
                                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                                    sx: {
                                        display: "flex",
                                        alignItems: "center"
                                    },
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                                            checked: !!notConfirmed.find((conf)=>conf.value === val.value),
                                            onChange: ()=>toggle(val),
                                            name: val.value,
                                            id: val.value
                                        }),
                                        renderItem(val, index, search, toggle)
                                    ]
                                }, index);
                            }),
                            value.length ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Divider, {
                                sx: {
                                    mr: 1,
                                    ml: 1.1
                                }
                            }) : null,
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_InfiniteList.InfiniteList, {
                                initialElements: initialElements,
                                loaderSize: 24,
                                loading: isLoading,
                                items: items.filter((item)=>item.label.toLowerCase().includes(search.toLowerCase())).map((i)=>_object_spread({
                                        id: i.value
                                    }, i)),
                                renderItem: (item, index)=>{
                                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                                        sx: {
                                            display: "flex",
                                            alignItems: "center"
                                        },
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                                                checked: !!notConfirmed.find((conf)=>conf.value === item.value),
                                                onChange: ()=>toggle(item),
                                                name: item.value,
                                                id: item.value
                                            }),
                                            renderItem(item, index, search, toggle)
                                        ]
                                    });
                                }
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            display: "flex",
                            justifyContent: "right"
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                            disabled: equalsCheck(notConfirmed, value),
                            onClick: ()=>{
                                setOpen(false);
                                close();
                                const toAdd = [
                                    ...notConfirmed
                                ];
                                // after popover closes
                                setTimeout(()=>onChange === null || onChange === void 0 ? void 0 : onChange(toAdd), 200);
                            },
                            children: "APPLY"
                        })
                    })
                ]
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,