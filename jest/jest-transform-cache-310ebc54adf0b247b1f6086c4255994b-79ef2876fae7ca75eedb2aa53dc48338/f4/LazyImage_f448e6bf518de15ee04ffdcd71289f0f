634fb11ea3ea9dc234c24040e5141cf2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LazyImage", {
    enumerable: true,
    get: function() {
        return LazyImage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _reactquery = require("@tanstack/react-query");
const loadImage = (src)=>{
    return new Promise((resolve, reject)=>{
        const img = new Image();
        img.src = src;
        img.onload = ()=>resolve(src);
        img.onerror = reject;
    });
};
const LazyImage = ({ loadingFallback, fallback, src = "", alt, width, height, loading, addRoundedBorderTop })=>{
    const { isLoading, data: srcResolved } = (0, _reactquery.useQuery)({
        queryKey: [
            "image",
            src
        ],
        queryFn: ()=>loadImage(src),
        enabled: !!src,
        retry: 0
    });
    const [hadCache] = (0, _react.useState)(srcResolved === src);
    if (isLoading || loading) return loadingFallback;
    if (!srcResolved && fallback) return fallback;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Fade, {
        in: true,
        timeout: hadCache ? 0 : 500,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            style: addRoundedBorderTop ? {
                borderTopRightRadius: "12px",
                borderTopLeftRadius: "12px"
            } : {},
            src: srcResolved,
            alt: alt,
            width: width,
            height: height
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHMvc3JjL0xhenlJbWFnZS9MYXp5SW1hZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0RWxlbWVudCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgRmFkZSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGZhbGxiYWNrPzogUmVhY3RFbGVtZW50XG4gIGxvYWRpbmdGYWxsYmFjaz86IFJlYWN0RWxlbWVudFxuICBzcmM/OiBzdHJpbmdcbiAgYWx0Pzogc3RyaW5nXG4gIHdpZHRoPzogbnVtYmVyIHwgc3RyaW5nXG4gIGhlaWdodD86IG51bWJlciB8IHN0cmluZ1xuICBsb2FkaW5nPzogYm9vbGVhblxuICBhZGRSb3VuZGVkQm9yZGVyVG9wPzogYm9vbGVhblxufVxuXG5jb25zdCBsb2FkSW1hZ2UgPSAoc3JjOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpXG4gICAgaW1nLnNyYyA9IHNyY1xuICAgIGltZy5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKHNyYylcbiAgICBpbWcub25lcnJvciA9IHJlamVjdFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgTGF6eUltYWdlID0gKHtcbiAgbG9hZGluZ0ZhbGxiYWNrLFxuICBmYWxsYmFjayxcbiAgc3JjID0gXCJcIixcbiAgYWx0LFxuICB3aWR0aCxcbiAgaGVpZ2h0LFxuICBsb2FkaW5nLFxuICBhZGRSb3VuZGVkQm9yZGVyVG9wLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGE6IHNyY1Jlc29sdmVkIH0gPSB1c2VRdWVyeSh7XG4gICAgcXVlcnlLZXk6IFtcImltYWdlXCIsIHNyY10sXG4gICAgcXVlcnlGbjogKCkgPT4gbG9hZEltYWdlKHNyYyksXG4gICAgZW5hYmxlZDogISFzcmMsXG4gICAgcmV0cnk6IDAsXG4gIH0pXG4gIGNvbnN0IFtoYWRDYWNoZV0gPSB1c2VTdGF0ZShzcmNSZXNvbHZlZCA9PT0gc3JjKVxuXG4gIGlmIChpc0xvYWRpbmcgfHwgbG9hZGluZykgcmV0dXJuIGxvYWRpbmdGYWxsYmFja1xuICBpZiAoIXNyY1Jlc29sdmVkICYmIGZhbGxiYWNrKSByZXR1cm4gZmFsbGJhY2tcbiAgcmV0dXJuIChcbiAgICA8RmFkZSBpbiB0aW1lb3V0PXtoYWRDYWNoZSA/IDAgOiA1MDB9PlxuICAgICAgPGltZ1xuICAgICAgICBzdHlsZT17XG4gICAgICAgICAgYWRkUm91bmRlZEJvcmRlclRvcCA/IHsgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IFwiMTJweFwiLCBib3JkZXJUb3BMZWZ0UmFkaXVzOiBcIjEycHhcIiB9IDoge31cbiAgICAgICAgfVxuICAgICAgICBzcmM9e3NyY1Jlc29sdmVkfVxuICAgICAgICBhbHQ9e2FsdH1cbiAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICBoZWlnaHQ9e2hlaWdodH1cbiAgICAgIC8+XG4gICAgPC9GYWRlPlxuICApXG59XG4iXSwibmFtZXMiOlsiTGF6eUltYWdlIiwibG9hZEltYWdlIiwic3JjIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJsb2FkaW5nRmFsbGJhY2siLCJmYWxsYmFjayIsImFsdCIsIndpZHRoIiwiaGVpZ2h0IiwibG9hZGluZyIsImFkZFJvdW5kZWRCb3JkZXJUb3AiLCJpc0xvYWRpbmciLCJkYXRhIiwic3JjUmVzb2x2ZWQiLCJ1c2VRdWVyeSIsInF1ZXJ5S2V5IiwicXVlcnlGbiIsImVuYWJsZWQiLCJyZXRyeSIsImhhZENhY2hlIiwidXNlU3RhdGUiLCJGYWRlIiwiaW4iLCJ0aW1lb3V0Iiwic3R5bGUiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlclRvcExlZnRSYWRpdXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF3QmFBOzs7ZUFBQUE7Ozs7dUJBeEIwQjtzQkFDbEI7NEJBQ0k7QUFhekIsTUFBTUMsWUFBWSxDQUFDQztJQUNqQixPQUFPLElBQUlDLFFBQWdCLENBQUNDLFNBQVNDO1FBQ25DLE1BQU1DLE1BQU0sSUFBSUM7UUFDaEJELElBQUlKLEdBQUcsR0FBR0E7UUFDVkksSUFBSUUsTUFBTSxHQUFHLElBQU1KLFFBQVFGO1FBQzNCSSxJQUFJRyxPQUFPLEdBQUdKO0lBQ2hCO0FBQ0Y7QUFFTyxNQUFNTCxZQUFZLENBQUMsRUFDeEJVLGVBQWUsRUFDZkMsUUFBUSxFQUNSVCxNQUFNLEVBQUUsRUFDUlUsR0FBRyxFQUNIQyxLQUFLLEVBQ0xDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxtQkFBbUIsRUFDYjtJQUNOLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxNQUFNQyxXQUFXLEVBQUUsR0FBR0MsSUFBQUEsb0JBQVEsRUFBQztRQUNoREMsVUFBVTtZQUFDO1lBQVNuQjtTQUFJO1FBQ3hCb0IsU0FBUyxJQUFNckIsVUFBVUM7UUFDekJxQixTQUFTLENBQUMsQ0FBQ3JCO1FBQ1hzQixPQUFPO0lBQ1Q7SUFDQSxNQUFNLENBQUNDLFNBQVMsR0FBR0MsSUFBQUEsZUFBUSxFQUFDUCxnQkFBZ0JqQjtJQUU1QyxJQUFJZSxhQUFhRixTQUFTLE9BQU9MO0lBQ2pDLElBQUksQ0FBQ1MsZUFBZVIsVUFBVSxPQUFPQTtJQUNyQyxxQkFDRSxxQkFBQ2dCLFVBQUk7UUFBQ0MsRUFBRTtRQUFDQyxTQUFTSixXQUFXLElBQUk7a0JBQy9CLGNBQUEscUJBQUNuQjtZQUNDd0IsT0FDRWQsc0JBQXNCO2dCQUFFZSxzQkFBc0I7Z0JBQVFDLHFCQUFxQjtZQUFPLElBQUksQ0FBQztZQUV6RjlCLEtBQUtpQjtZQUNMUCxLQUFLQTtZQUNMQyxPQUFPQTtZQUNQQyxRQUFRQTs7O0FBSWhCIn0=