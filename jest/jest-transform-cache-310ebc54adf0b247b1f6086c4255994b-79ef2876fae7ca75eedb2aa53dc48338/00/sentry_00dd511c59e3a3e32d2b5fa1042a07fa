e8bd2190d1177393982fb150be6bb171
/* eslint-disable no-undef */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    identifySentryUser: function() {
        return identifySentryUser;
    },
    initSentry: function() {
        return initSentry;
    },
    reportError: function() {
        return reportError;
    }
});
const _datefnstz = require("date-fns-tz");
const _adapters = require("@rp/adapters");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("@sentry/react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const initSentry = (config, environment)=>{
    if (_adapters.adapters.isLocalEnv() || !config.enabled) {
        return;
    }
    var _process_env_NX_PUBLIC_VERSION_TIMESTAMP;
    _react.init({
        dsn: config.dsn,
        environment: environment,
        // This has been deprecated but is what "sentry-pre" recommends using.
        integrations: [
            _react.browserTracingIntegration(),
            _react.replayIntegration({
                // Additional Replay configuration goes in here, for example:
                maskAllText: false,
                blockAllMedia: true
            })
        ],
        // Record all errors
        replaysOnErrorSampleRate: 1.0,
        // This sets the sample rate to be 10%. You may want this to be 100% while
        // in development and sample at a lower rate in production
        replaysSessionSampleRate: 0.1,
        // Set tracesSampleRate to 1.0 to capture 100%
        // of transactions for performance monitoring.
        // We recommend adjusting this value in production
        tracesSampleRate: 1.0,
        // This is a unique release identifier that allows Sentry to track the release of the app
        // example: production-2024.12.25-17:10
        release: `${environment}-${(0, _datefnstz.formatInTimeZone)(Number((_process_env_NX_PUBLIC_VERSION_TIMESTAMP = process.env["NX_PUBLIC_VERSION_TIMESTAMP"]) !== null && _process_env_NX_PUBLIC_VERSION_TIMESTAMP !== void 0 ? _process_env_NX_PUBLIC_VERSION_TIMESTAMP : 0), "Europe/Madrid", "yyyy.MM.dd-HH:mm")}`
    });
};
const identifySentryUser = (userInfo)=>{
    _react.setUser(userInfo);
};
const reportError = (error, errorInfo, onSuccess)=>{
    if (errorInfo) {
        _react.withScope((scope)=>{
            scope.setExtras(errorInfo);
            const eventId = _react.captureException(error);
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(eventId);
        });
    } else {
        const eventId = _react.captureException(error);
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(eventId);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi92ZW5kb3JzL3V0aWxzL3NyYy91dGlscy9zZW50cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbmltcG9ydCB7IGZvcm1hdEluVGltZVpvbmUgfSBmcm9tIFwiZGF0ZS1mbnMtdHpcIlxuaW1wb3J0IHsgYWRhcHRlcnMgfSBmcm9tIFwiQHJwL2FkYXB0ZXJzXCJcbmltcG9ydCAqIGFzIFNlbnRyeSBmcm9tIFwiQHNlbnRyeS9yZWFjdFwiXG5pbXBvcnQgeyBFeHRyYXMgfSBmcm9tIFwiQHNlbnRyeS90eXBlc1wiXG5pbXBvcnQgeyBTZW50cnlDb25maWcgfSBmcm9tIFwiLi90eXBlc1wiXG5cbmV4cG9ydCBjb25zdCBpbml0U2VudHJ5ID0gKGNvbmZpZzogU2VudHJ5Q29uZmlnLCBlbnZpcm9ubWVudDogc3RyaW5nKSA9PiB7XG4gIGlmIChhZGFwdGVycy5pc0xvY2FsRW52KCkgfHwgIWNvbmZpZy5lbmFibGVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBTZW50cnkuaW5pdCh7XG4gICAgZHNuOiBjb25maWcuZHNuLFxuICAgIGVudmlyb25tZW50OiBlbnZpcm9ubWVudCxcbiAgICAvLyBUaGlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYnV0IGlzIHdoYXQgXCJzZW50cnktcHJlXCIgcmVjb21tZW5kcyB1c2luZy5cbiAgICBpbnRlZ3JhdGlvbnM6IFtcbiAgICAgIFNlbnRyeS5icm93c2VyVHJhY2luZ0ludGVncmF0aW9uKCksXG4gICAgICBTZW50cnkucmVwbGF5SW50ZWdyYXRpb24oe1xuICAgICAgICAvLyBBZGRpdGlvbmFsIFJlcGxheSBjb25maWd1cmF0aW9uIGdvZXMgaW4gaGVyZSwgZm9yIGV4YW1wbGU6XG4gICAgICAgIG1hc2tBbGxUZXh0OiBmYWxzZSxcbiAgICAgICAgYmxvY2tBbGxNZWRpYTogdHJ1ZSxcbiAgICAgIH0pLFxuICAgIF0sXG4gICAgLy8gUmVjb3JkIGFsbCBlcnJvcnNcbiAgICByZXBsYXlzT25FcnJvclNhbXBsZVJhdGU6IDEuMCxcbiAgICAvLyBUaGlzIHNldHMgdGhlIHNhbXBsZSByYXRlIHRvIGJlIDEwJS4gWW91IG1heSB3YW50IHRoaXMgdG8gYmUgMTAwJSB3aGlsZVxuICAgIC8vIGluIGRldmVsb3BtZW50IGFuZCBzYW1wbGUgYXQgYSBsb3dlciByYXRlIGluIHByb2R1Y3Rpb25cbiAgICByZXBsYXlzU2Vzc2lvblNhbXBsZVJhdGU6IDAuMSxcbiAgICAvLyBTZXQgdHJhY2VzU2FtcGxlUmF0ZSB0byAxLjAgdG8gY2FwdHVyZSAxMDAlXG4gICAgLy8gb2YgdHJhbnNhY3Rpb25zIGZvciBwZXJmb3JtYW5jZSBtb25pdG9yaW5nLlxuICAgIC8vIFdlIHJlY29tbWVuZCBhZGp1c3RpbmcgdGhpcyB2YWx1ZSBpbiBwcm9kdWN0aW9uXG4gICAgdHJhY2VzU2FtcGxlUmF0ZTogMS4wLFxuICAgIC8vIFRoaXMgaXMgYSB1bmlxdWUgcmVsZWFzZSBpZGVudGlmaWVyIHRoYXQgYWxsb3dzIFNlbnRyeSB0byB0cmFjayB0aGUgcmVsZWFzZSBvZiB0aGUgYXBwXG4gICAgLy8gZXhhbXBsZTogcHJvZHVjdGlvbi0yMDI0LjEyLjI1LTE3OjEwXG4gICAgcmVsZWFzZTogYCR7ZW52aXJvbm1lbnR9LSR7Zm9ybWF0SW5UaW1lWm9uZShcbiAgICAgIE51bWJlcihwcm9jZXNzLmVudltcIk5YX1BVQkxJQ19WRVJTSU9OX1RJTUVTVEFNUFwiXSA/PyAwKSxcbiAgICAgIFwiRXVyb3BlL01hZHJpZFwiLFxuICAgICAgXCJ5eXl5Lk1NLmRkLUhIOm1tXCIsXG4gICAgKX1gLFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgaWRlbnRpZnlTZW50cnlVc2VyID0gKHVzZXJJbmZvOiB7IGlkOiBzdHJpbmc7IGNvbXBhbnlJZDogc3RyaW5nIH0pID0+IHtcbiAgU2VudHJ5LnNldFVzZXIodXNlckluZm8pXG59XG5cbmNvbnN0IHJlcG9ydEVycm9yID0gKGVycm9yOiBFcnJvciwgZXJyb3JJbmZvPzogRXh0cmFzLCBvblN1Y2Nlc3M/OiAoaWQ6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICBpZiAoZXJyb3JJbmZvKSB7XG4gICAgU2VudHJ5LndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgICBzY29wZS5zZXRFeHRyYXMoZXJyb3JJbmZvKVxuICAgICAgY29uc3QgZXZlbnRJZCA9IFNlbnRyeS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yKVxuICAgICAgb25TdWNjZXNzPy4oZXZlbnRJZClcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGV2ZW50SWQgPSBTZW50cnkuY2FwdHVyZUV4Y2VwdGlvbihlcnJvcilcbiAgICBvblN1Y2Nlc3M/LihldmVudElkKVxuICB9XG59XG5cbmV4cG9ydCB7IHJlcG9ydEVycm9yIH1cbiJdLCJuYW1lcyI6WyJpZGVudGlmeVNlbnRyeVVzZXIiLCJpbml0U2VudHJ5IiwicmVwb3J0RXJyb3IiLCJjb25maWciLCJlbnZpcm9ubWVudCIsImFkYXB0ZXJzIiwiaXNMb2NhbEVudiIsImVuYWJsZWQiLCJwcm9jZXNzIiwiU2VudHJ5IiwiaW5pdCIsImRzbiIsImludGVncmF0aW9ucyIsImJyb3dzZXJUcmFjaW5nSW50ZWdyYXRpb24iLCJyZXBsYXlJbnRlZ3JhdGlvbiIsIm1hc2tBbGxUZXh0IiwiYmxvY2tBbGxNZWRpYSIsInJlcGxheXNPbkVycm9yU2FtcGxlUmF0ZSIsInJlcGxheXNTZXNzaW9uU2FtcGxlUmF0ZSIsInRyYWNlc1NhbXBsZVJhdGUiLCJyZWxlYXNlIiwiZm9ybWF0SW5UaW1lWm9uZSIsIk51bWJlciIsImVudiIsInVzZXJJbmZvIiwic2V0VXNlciIsImVycm9yIiwiZXJyb3JJbmZvIiwib25TdWNjZXNzIiwid2l0aFNjb3BlIiwic2NvcGUiLCJzZXRFeHRyYXMiLCJldmVudElkIiwiY2FwdHVyZUV4Y2VwdGlvbiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCOzs7Ozs7Ozs7OztJQTJDZEEsa0JBQWtCO2VBQWxCQTs7SUFwQ0FDLFVBQVU7ZUFBVkE7O0lBcURKQyxXQUFXO2VBQVhBOzs7MkJBM0R3QjswQkFDUjsrREFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSWpCLE1BQU1ELGFBQWEsQ0FBQ0UsUUFBc0JDO0lBQy9DLElBQUlDLGtCQUFRLENBQUNDLFVBQVUsTUFBTSxDQUFDSCxPQUFPSSxPQUFPLEVBQUU7UUFDNUM7SUFDRjtRQTBCV0M7SUF4QlhDLE9BQU9DLElBQUksQ0FBQztRQUNWQyxLQUFLUixPQUFPUSxHQUFHO1FBQ2ZQLGFBQWFBO1FBQ2Isc0VBQXNFO1FBQ3RFUSxjQUFjO1lBQ1pILE9BQU9JLHlCQUF5QjtZQUNoQ0osT0FBT0ssaUJBQWlCLENBQUM7Z0JBQ3ZCLDZEQUE2RDtnQkFDN0RDLGFBQWE7Z0JBQ2JDLGVBQWU7WUFDakI7U0FDRDtRQUNELG9CQUFvQjtRQUNwQkMsMEJBQTBCO1FBQzFCLDBFQUEwRTtRQUMxRSwwREFBMEQ7UUFDMURDLDBCQUEwQjtRQUMxQiw4Q0FBOEM7UUFDOUMsOENBQThDO1FBQzlDLGtEQUFrRDtRQUNsREMsa0JBQWtCO1FBQ2xCLHlGQUF5RjtRQUN6Rix1Q0FBdUM7UUFDdkNDLFNBQVMsQ0FBQyxFQUFFaEIsWUFBWSxDQUFDLEVBQUVpQixJQUFBQSwyQkFBZ0IsRUFDekNDLE9BQU9kLENBQUFBLDJDQUFBQSxRQUFRZSxHQUFHLENBQUMsOEJBQThCLGNBQTFDZixzREFBQUEsMkNBQThDLElBQ3JELGlCQUNBLG9CQUNBLENBQUM7SUFDTDtBQUNGO0FBRU8sTUFBTVIscUJBQXFCLENBQUN3QjtJQUNqQ2YsT0FBT2dCLE9BQU8sQ0FBQ0Q7QUFDakI7QUFFQSxNQUFNdEIsY0FBYyxDQUFDd0IsT0FBY0MsV0FBb0JDO0lBQ3JELElBQUlELFdBQVc7UUFDYmxCLE9BQU9vQixTQUFTLENBQUNDLENBQUFBO1lBQ2ZBLE1BQU1DLFNBQVMsQ0FBQ0o7WUFDaEIsTUFBTUssVUFBVXZCLE9BQU93QixnQkFBZ0IsQ0FBQ1A7WUFDeENFLHNCQUFBQSxnQ0FBQUEsVUFBWUk7UUFDZDtJQUNGLE9BQU87UUFDTCxNQUFNQSxVQUFVdkIsT0FBT3dCLGdCQUFnQixDQUFDUDtRQUN4Q0Usc0JBQUFBLGdDQUFBQSxVQUFZSTtJQUNkO0FBQ0YifQ==