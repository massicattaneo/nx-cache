{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/vendors/utils/src/utils/sentry.ts"],"sourcesContent":["/* eslint-disable no-undef */\nimport { formatInTimeZone } from \"date-fns-tz\"\nimport { adapters } from \"@rp/adapters\"\nimport * as Sentry from \"@sentry/react\"\nimport { Extras } from \"@sentry/types\"\nimport { SentryConfig } from \"./types\"\n\nexport const initSentry = (config: SentryConfig, environment: string) => {\n  if (adapters.isLocalEnv() || !config.enabled) {\n    return\n  }\n\n  Sentry.init({\n    dsn: config.dsn,\n    environment: environment,\n    // This has been deprecated but is what \"sentry-pre\" recommends using.\n    integrations: [\n      Sentry.browserTracingIntegration(),\n      Sentry.replayIntegration({\n        // Additional Replay configuration goes in here, for example:\n        maskAllText: false,\n        blockAllMedia: true,\n      }),\n    ],\n    // Record all errors\n    replaysOnErrorSampleRate: 1.0,\n    // This sets the sample rate to be 10%. You may want this to be 100% while\n    // in development and sample at a lower rate in production\n    replaysSessionSampleRate: 0.1,\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: 1.0,\n    // This is a unique release identifier that allows Sentry to track the release of the app\n    // example: production-2024.12.25-17:10\n    release: `${environment}-${formatInTimeZone(\n      Number(process.env[\"NX_PUBLIC_VERSION_TIMESTAMP\"] ?? 0),\n      \"Europe/Madrid\",\n      \"yyyy.MM.dd-HH:mm\",\n    )}`,\n  })\n}\n\nexport const identifySentryUser = (userInfo: { id: string; companyId: string }) => {\n  Sentry.setUser(userInfo)\n}\n\nconst reportError = (error: Error, errorInfo?: Extras, onSuccess?: (id: string) => void) => {\n  if (errorInfo) {\n    Sentry.withScope(scope => {\n      scope.setExtras(errorInfo)\n      const eventId = Sentry.captureException(error)\n      onSuccess?.(eventId)\n    })\n  } else {\n    const eventId = Sentry.captureException(error)\n    onSuccess?.(eventId)\n  }\n}\n\nexport { reportError }\n"],"names":["identifySentryUser","initSentry","reportError","config","environment","adapters","isLocalEnv","enabled","process","Sentry","init","dsn","integrations","browserTracingIntegration","replayIntegration","maskAllText","blockAllMedia","replaysOnErrorSampleRate","replaysSessionSampleRate","tracesSampleRate","release","formatInTimeZone","Number","env","userInfo","setUser","error","errorInfo","onSuccess","withScope","scope","setExtras","eventId","captureException"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,2BAA2B;;;;;;;;;;;IA2CdA,kBAAkB;eAAlBA;;IApCAC,UAAU;eAAVA;;IAqDJC,WAAW;eAAXA;;;2BA3DwB;0BACR;+DACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIjB,MAAMD,aAAa,CAACE,QAAsBC;IAC/C,IAAIC,kBAAQ,CAACC,UAAU,MAAM,CAACH,OAAOI,OAAO,EAAE;QAC5C;IACF;QA0BWC;IAxBXC,OAAOC,IAAI,CAAC;QACVC,KAAKR,OAAOQ,GAAG;QACfP,aAAaA;QACb,sEAAsE;QACtEQ,cAAc;YACZH,OAAOI,yBAAyB;YAChCJ,OAAOK,iBAAiB,CAAC;gBACvB,6DAA6D;gBAC7DC,aAAa;gBACbC,eAAe;YACjB;SACD;QACD,oBAAoB;QACpBC,0BAA0B;QAC1B,0EAA0E;QAC1E,0DAA0D;QAC1DC,0BAA0B;QAC1B,8CAA8C;QAC9C,8CAA8C;QAC9C,kDAAkD;QAClDC,kBAAkB;QAClB,yFAAyF;QACzF,uCAAuC;QACvCC,SAAS,CAAC,EAAEhB,YAAY,CAAC,EAAEiB,IAAAA,2BAAgB,EACzCC,OAAOd,CAAAA,2CAAAA,QAAQe,GAAG,CAAC,8BAA8B,cAA1Cf,sDAAAA,2CAA8C,IACrD,iBACA,oBACA,CAAC;IACL;AACF;AAEO,MAAMR,qBAAqB,CAACwB;IACjCf,OAAOgB,OAAO,CAACD;AACjB;AAEA,MAAMtB,cAAc,CAACwB,OAAcC,WAAoBC;IACrD,IAAID,WAAW;QACblB,OAAOoB,SAAS,CAACC,CAAAA;YACfA,MAAMC,SAAS,CAACJ;YAChB,MAAMK,UAAUvB,OAAOwB,gBAAgB,CAACP;YACxCE,sBAAAA,gCAAAA,UAAYI;QACd;IACF,OAAO;QACL,MAAMA,UAAUvB,OAAOwB,gBAAgB,CAACP;QACxCE,sBAAAA,gCAAAA,UAAYI;IACd;AACF"}