0c85d475489dd27bb03d383f113da2ba
/**
 * @typedef {import('mdast').Link} Link
 * @typedef {import('../types.js').State} State
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "formatLinkAsAutolink", {
    enumerable: true,
    get: function() {
        return formatLinkAsAutolink;
    }
});
const _mdastutiltostring = require("mdast-util-to-string");
function formatLinkAsAutolink(node, state) {
    const raw = (0, _mdastutiltostring.toString)(node);
    return Boolean(!state.options.resourceLink && // If there’s a url…
    node.url && // And there’s a no title…
    !node.title && // And the content of `node` is a single text node…
    node.children && node.children.length === 1 && node.children[0].type === 'text' && // And if the url is the same as the content…
    (raw === node.url || 'mailto:' + raw === node.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node.url));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2Zvcm1hdC1saW5rLWFzLWF1dG9saW5rLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaW5rfSBMaW5rXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7dG9TdHJpbmd9IGZyb20gJ21kYXN0LXV0aWwtdG8tc3RyaW5nJ1xuXG4vKipcbiAqIEBwYXJhbSB7TGlua30gbm9kZVxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TGlua0FzQXV0b2xpbmsobm9kZSwgc3RhdGUpIHtcbiAgY29uc3QgcmF3ID0gdG9TdHJpbmcobm9kZSlcblxuICByZXR1cm4gQm9vbGVhbihcbiAgICAhc3RhdGUub3B0aW9ucy5yZXNvdXJjZUxpbmsgJiZcbiAgICAgIC8vIElmIHRoZXJl4oCZcyBhIHVybOKAplxuICAgICAgbm9kZS51cmwgJiZcbiAgICAgIC8vIEFuZCB0aGVyZeKAmXMgYSBubyB0aXRsZeKAplxuICAgICAgIW5vZGUudGl0bGUgJiZcbiAgICAgIC8vIEFuZCB0aGUgY29udGVudCBvZiBgbm9kZWAgaXMgYSBzaW5nbGUgdGV4dCBub2Rl4oCmXG4gICAgICBub2RlLmNoaWxkcmVuICYmXG4gICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgbm9kZS5jaGlsZHJlblswXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgIC8vIEFuZCBpZiB0aGUgdXJsIGlzIHRoZSBzYW1lIGFzIHRoZSBjb250ZW504oCmXG4gICAgICAocmF3ID09PSBub2RlLnVybCB8fCAnbWFpbHRvOicgKyByYXcgPT09IG5vZGUudXJsKSAmJlxuICAgICAgLy8gQW5kIHRoYXQgc3RhcnRzIHcvIGEgcHJvdG9jb2zigKZcbiAgICAgIC9eW2Etel1bYS16Ky4tXSs6L2kudGVzdChub2RlLnVybCkgJiZcbiAgICAgIC8vIEFuZCB0aGF0IGRvZXNu4oCZdCBjb250YWluIEFTQ0lJIGNvbnRyb2wgY29kZXMgKGNoYXJhY3RlciBlc2NhcGVzIGFuZFxuICAgICAgLy8gcmVmZXJlbmNlcyBkb27igJl0IHdvcmspLCBzcGFjZSwgb3IgYW5nbGUgYnJhY2tldHPigKZcbiAgICAgICEvW1xcMC0gPD5cXHUwMDdGXS8udGVzdChub2RlLnVybClcbiAgKVxufVxuIl0sIm5hbWVzIjpbImZvcm1hdExpbmtBc0F1dG9saW5rIiwibm9kZSIsInN0YXRlIiwicmF3IiwidG9TdHJpbmciLCJCb29sZWFuIiwib3B0aW9ucyIsInJlc291cmNlTGluayIsInVybCIsInRpdGxlIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJ0eXBlIiwidGVzdCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQzs7OzsrQkFTZUE7OztlQUFBQTs7O21DQVBPO0FBT2hCLFNBQVNBLHFCQUFxQkMsSUFBSSxFQUFFQyxLQUFLO0lBQzlDLE1BQU1DLE1BQU1DLElBQUFBLDJCQUFRLEVBQUNIO0lBRXJCLE9BQU9JLFFBQ0wsQ0FBQ0gsTUFBTUksT0FBTyxDQUFDQyxZQUFZLElBQ3pCLG9CQUFvQjtJQUNwQk4sS0FBS08sR0FBRyxJQUNSLDBCQUEwQjtJQUMxQixDQUFDUCxLQUFLUSxLQUFLLElBQ1gsbURBQW1EO0lBQ25EUixLQUFLUyxRQUFRLElBQ2JULEtBQUtTLFFBQVEsQ0FBQ0MsTUFBTSxLQUFLLEtBQ3pCVixLQUFLUyxRQUFRLENBQUMsRUFBRSxDQUFDRSxJQUFJLEtBQUssVUFDMUIsNkNBQTZDO0lBQzVDVCxDQUFBQSxRQUFRRixLQUFLTyxHQUFHLElBQUksWUFBWUwsUUFBUUYsS0FBS08sR0FBRyxBQUFELEtBQ2hELGlDQUFpQztJQUNqQyxvQkFBb0JLLElBQUksQ0FBQ1osS0FBS08sR0FBRyxLQUNqQyxzRUFBc0U7SUFDdEUsb0RBQW9EO0lBQ3BELENBQUMsaUJBQWlCSyxJQUFJLENBQUNaLEtBQUtPLEdBQUc7QUFFckMifQ==