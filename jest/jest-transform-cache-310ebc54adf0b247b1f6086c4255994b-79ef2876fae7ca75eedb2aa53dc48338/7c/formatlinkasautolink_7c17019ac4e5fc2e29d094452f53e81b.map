{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n"],"names":["formatLinkAsAutolink","node","state","raw","toString","Boolean","options","resourceLink","url","title","children","length","type","test"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;CAGC;;;;+BASeA;;;eAAAA;;;mCAPO;AAOhB,SAASA,qBAAqBC,IAAI,EAAEC,KAAK;IAC9C,MAAMC,MAAMC,IAAAA,2BAAQ,EAACH;IAErB,OAAOI,QACL,CAACH,MAAMI,OAAO,CAACC,YAAY,IACzB,oBAAoB;IACpBN,KAAKO,GAAG,IACR,0BAA0B;IAC1B,CAACP,KAAKQ,KAAK,IACX,mDAAmD;IACnDR,KAAKS,QAAQ,IACbT,KAAKS,QAAQ,CAACC,MAAM,KAAK,KACzBV,KAAKS,QAAQ,CAAC,EAAE,CAACE,IAAI,KAAK,UAC1B,6CAA6C;IAC5CT,CAAAA,QAAQF,KAAKO,GAAG,IAAI,YAAYL,QAAQF,KAAKO,GAAG,AAAD,KAChD,iCAAiC;IACjC,oBAAoBK,IAAI,CAACZ,KAAKO,GAAG,KACjC,sEAAsE;IACtE,oDAAoD;IACpD,CAAC,iBAAiBK,IAAI,CAACZ,KAAKO,GAAG;AAErC"}