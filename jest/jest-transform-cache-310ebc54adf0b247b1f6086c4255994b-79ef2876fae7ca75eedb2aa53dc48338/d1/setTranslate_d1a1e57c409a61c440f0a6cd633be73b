8dbcd22aa0c03a18644cfd7ca12102d4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return setTranslate;
    }
});
function setTranslate(translate, byController) {
    const swiper = this;
    const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;
    let x = 0;
    let y = 0;
    const z = 0;
    if (swiper.isHorizontal()) {
        x = rtl ? -translate : translate;
    } else {
        y = translate;
    }
    if (params.roundLengths) {
        x = Math.floor(x);
        y = Math.floor(y);
    }
    swiper.previousTranslate = swiper.translate;
    swiper.translate = swiper.isHorizontal() ? x : y;
    if (params.cssMode) {
        wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
    } else if (!params.virtualTranslate) {
        if (swiper.isHorizontal()) {
            x -= swiper.cssOverflowAdjustment();
        } else {
            y -= swiper.cssOverflowAdjustment();
        }
        wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;
    }
    // Check if we need to update progress
    let newProgress;
    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
    if (translatesDiff === 0) {
        newProgress = 0;
    } else {
        newProgress = (translate - swiper.minTranslate()) / translatesDiff;
    }
    if (newProgress !== progress) {
        swiper.updateProgress(translate);
    }
    swiper.emit('setTranslate', swiper.translate, byController);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvc2V0VHJhbnNsYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4IC09IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsICR7en1weClgO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59Il0sIm5hbWVzIjpbInNldFRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsInN3aXBlciIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsInBhcmFtcyIsIndyYXBwZXJFbCIsInByb2dyZXNzIiwieCIsInkiLCJ6IiwiaXNIb3Jpem9udGFsIiwicm91bmRMZW5ndGhzIiwiTWF0aCIsImZsb29yIiwicHJldmlvdXNUcmFuc2xhdGUiLCJjc3NNb2RlIiwidmlydHVhbFRyYW5zbGF0ZSIsImNzc092ZXJmbG93QWRqdXN0bWVudCIsInN0eWxlIiwidHJhbnNmb3JtIiwibmV3UHJvZ3Jlc3MiLCJ0cmFuc2xhdGVzRGlmZiIsIm1heFRyYW5zbGF0ZSIsIm1pblRyYW5zbGF0ZSIsInVwZGF0ZVByb2dyZXNzIiwiZW1pdCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQUFBOzs7ZUFBd0JBOzs7QUFBVCxTQUFTQSxhQUFhQyxTQUFTLEVBQUVDLFlBQVk7SUFDMUQsTUFBTUMsU0FBUyxJQUFJO0lBQ25CLE1BQU0sRUFDSkMsY0FBY0MsR0FBRyxFQUNqQkMsTUFBTSxFQUNOQyxTQUFTLEVBQ1RDLFFBQVEsRUFDVCxHQUFHTDtJQUNKLElBQUlNLElBQUk7SUFDUixJQUFJQyxJQUFJO0lBQ1IsTUFBTUMsSUFBSTtJQUNWLElBQUlSLE9BQU9TLFlBQVksSUFBSTtRQUN6QkgsSUFBSUosTUFBTSxDQUFDSixZQUFZQTtJQUN6QixPQUFPO1FBQ0xTLElBQUlUO0lBQ047SUFDQSxJQUFJSyxPQUFPTyxZQUFZLEVBQUU7UUFDdkJKLElBQUlLLEtBQUtDLEtBQUssQ0FBQ047UUFDZkMsSUFBSUksS0FBS0MsS0FBSyxDQUFDTDtJQUNqQjtJQUNBUCxPQUFPYSxpQkFBaUIsR0FBR2IsT0FBT0YsU0FBUztJQUMzQ0UsT0FBT0YsU0FBUyxHQUFHRSxPQUFPUyxZQUFZLEtBQUtILElBQUlDO0lBQy9DLElBQUlKLE9BQU9XLE9BQU8sRUFBRTtRQUNsQlYsU0FBUyxDQUFDSixPQUFPUyxZQUFZLEtBQUssZUFBZSxZQUFZLEdBQUdULE9BQU9TLFlBQVksS0FBSyxDQUFDSCxJQUFJLENBQUNDO0lBQ2hHLE9BQU8sSUFBSSxDQUFDSixPQUFPWSxnQkFBZ0IsRUFBRTtRQUNuQyxJQUFJZixPQUFPUyxZQUFZLElBQUk7WUFDekJILEtBQUtOLE9BQU9nQixxQkFBcUI7UUFDbkMsT0FBTztZQUNMVCxLQUFLUCxPQUFPZ0IscUJBQXFCO1FBQ25DO1FBQ0FaLFVBQVVhLEtBQUssQ0FBQ0MsU0FBUyxHQUFHLENBQUMsWUFBWSxFQUFFWixFQUFFLElBQUksRUFBRUMsRUFBRSxJQUFJLEVBQUVDLEVBQUUsR0FBRyxDQUFDO0lBQ25FO0lBRUEsc0NBQXNDO0lBQ3RDLElBQUlXO0lBQ0osTUFBTUMsaUJBQWlCcEIsT0FBT3FCLFlBQVksS0FBS3JCLE9BQU9zQixZQUFZO0lBQ2xFLElBQUlGLG1CQUFtQixHQUFHO1FBQ3hCRCxjQUFjO0lBQ2hCLE9BQU87UUFDTEEsY0FBYyxBQUFDckIsQ0FBQUEsWUFBWUUsT0FBT3NCLFlBQVksRUFBQyxJQUFLRjtJQUN0RDtJQUNBLElBQUlELGdCQUFnQmQsVUFBVTtRQUM1QkwsT0FBT3VCLGNBQWMsQ0FBQ3pCO0lBQ3hCO0lBQ0FFLE9BQU93QixJQUFJLENBQUMsZ0JBQWdCeEIsT0FBT0YsU0FBUyxFQUFFQztBQUNoRCJ9