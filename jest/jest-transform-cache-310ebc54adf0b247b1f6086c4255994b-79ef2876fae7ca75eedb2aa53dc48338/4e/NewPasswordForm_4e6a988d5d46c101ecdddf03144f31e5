e1ba760e5ea86b9b6064b09d6430fad9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NewPasswordForm", {
    enumerable: true,
    get: function() {
        return NewPasswordForm;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _core = require("@rp/react/web/mui/core");
const _Login = require("../Login");
const _constants = require("./constants");
function NewPasswordForm({ formRef, showPassword, isLoading, isSubmitDisabled, validation, onSubmit, onInvalid, onNewPasswordChange, onConfirmPasswordChange, handleShowHidePassword, handleMouseDownPassword, handleBackToLogin }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
        id: "formPassword",
        ref: formRef,
        onSubmit: onSubmit,
        autoComplete: "off",
        onInvalid: onInvalid,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputLabel, {
                htmlFor: "code",
                children: "Please enter the reset code sent to your email"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TextField, {
                variant: "outlined",
                placeholder: "Reset Code",
                required: true,
                name: "code",
                type: "text",
                autoFocus: true,
                autoComplete: "wibble"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Login.LoginPasswordField, {
                placeholder: "New Password",
                name: "new-password",
                label: "New Password",
                autoComplete: "new-password",
                showPassword: showPassword,
                handleClickShowPassword: handleShowHidePassword,
                handleMouseDownPassword: handleMouseDownPassword,
                onChange: onNewPasswordChange
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    display: "flex",
                    flexDirection: "column",
                    justifyContent: "center",
                    marginTop: 1
                },
                children: _constants.PASSWORD_HINTS.map(({ hint, validationType })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_Login.LoginHintText, {
                        hint: hint,
                        validation: validation,
                        validationType: validationType
                    }, validationType))
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Login.LoginPasswordField, {
                showPassword: showPassword,
                handleClickShowPassword: handleShowHidePassword,
                handleMouseDownPassword: handleMouseDownPassword,
                placeholder: "Confirm New Password",
                label: "Confirm New Password",
                name: "confirm-password",
                autoComplete: "nope",
                onChange: onConfirmPasswordChange
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    marginTop: 1
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Login.LoginHintText, {
                    hint: "Ensure that the passwords entered in both fields match for confirmation.",
                    validation: validation,
                    validationType: "matchPasswords"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_Login.FormButtons, {
                submitLabel: "Change Password",
                handleBackButton: handleBackToLogin,
                isLoading: isLoading,
                submitDisabled: isSubmitDisabled
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvTmV3UGFzc3dvcmRGb3JtL05ld1Bhc3N3b3JkRm9ybS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFuZ2VFdmVudCwgRm9ybUV2ZW50LCBNb3VzZUV2ZW50LCBSZWYgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgVmFsaWRhdGlvblR5cGUgfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyBCb3gsIElucHV0TGFiZWwsIFRleHRGaWVsZCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IEZvcm1CdXR0b25zLCBMb2dpbkhpbnRUZXh0LCBMb2dpblBhc3N3b3JkRmllbGQgfSBmcm9tIFwiLi4vTG9naW5cIlxuaW1wb3J0IHsgUEFTU1dPUkRfSElOVFMgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG50eXBlIFByb3BzID0ge1xuICBmb3JtUmVmOiBSZWY8SFRNTEZvcm1FbGVtZW50PlxuICBzaG93UGFzc3dvcmQ6IGJvb2xlYW5cbiAgdmFsaWRhdGlvbjogVmFsaWRhdGlvblR5cGVcbiAgaXNMb2FkaW5nOiBib29sZWFuXG4gIGlzU3VibWl0RGlzYWJsZWQ6IGJvb2xlYW5cbiAgb25JbnZhbGlkOiAoZTogRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+IHZvaWRcbiAgb25TdWJtaXQ6IChlOiBGb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4gdm9pZFxuICBoYW5kbGVTaG93SGlkZVBhc3N3b3JkOiAoKSA9PiB2b2lkXG4gIGhhbmRsZUJhY2tUb0xvZ2luOiAoKSA9PiB2b2lkXG4gIGhhbmRsZU1vdXNlRG93blBhc3N3b3JkOiAoZXZlbnQ6IE1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+KSA9PiB2b2lkXG4gIG9uTmV3UGFzc3dvcmRDaGFuZ2U6IChlOiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHZvaWRcbiAgb25Db25maXJtUGFzc3dvcmRDaGFuZ2U6IChlOiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHZvaWRcbn1cblxuZnVuY3Rpb24gTmV3UGFzc3dvcmRGb3JtKHtcbiAgZm9ybVJlZixcbiAgc2hvd1Bhc3N3b3JkLFxuICBpc0xvYWRpbmcsXG4gIGlzU3VibWl0RGlzYWJsZWQsXG4gIHZhbGlkYXRpb24sXG4gIG9uU3VibWl0LFxuICBvbkludmFsaWQsXG4gIG9uTmV3UGFzc3dvcmRDaGFuZ2UsXG4gIG9uQ29uZmlybVBhc3N3b3JkQ2hhbmdlLFxuICBoYW5kbGVTaG93SGlkZVBhc3N3b3JkLFxuICBoYW5kbGVNb3VzZURvd25QYXNzd29yZCxcbiAgaGFuZGxlQmFja1RvTG9naW4sXG59OiBQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxmb3JtXG4gICAgICBpZD1cImZvcm1QYXNzd29yZFwiXG4gICAgICByZWY9e2Zvcm1SZWZ9XG4gICAgICBvblN1Ym1pdD17b25TdWJtaXR9XG4gICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgb25JbnZhbGlkPXtvbkludmFsaWR9XG4gICAgPlxuICAgICAgPElucHV0TGFiZWwgaHRtbEZvcj1cImNvZGVcIj5QbGVhc2UgZW50ZXIgdGhlIHJlc2V0IGNvZGUgc2VudCB0byB5b3VyIGVtYWlsPC9JbnB1dExhYmVsPlxuICAgICAgPFRleHRGaWVsZFxuICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIlJlc2V0IENvZGVcIlxuICAgICAgICByZXF1aXJlZFxuICAgICAgICBuYW1lPVwiY29kZVwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgIGF1dG9Db21wbGV0ZT1cIndpYmJsZVwiXG4gICAgICAvPlxuXG4gICAgICA8TG9naW5QYXNzd29yZEZpZWxkXG4gICAgICAgIHBsYWNlaG9sZGVyPVwiTmV3IFBhc3N3b3JkXCJcbiAgICAgICAgbmFtZT1cIm5ldy1wYXNzd29yZFwiXG4gICAgICAgIGxhYmVsPVwiTmV3IFBhc3N3b3JkXCJcbiAgICAgICAgYXV0b0NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCJcbiAgICAgICAgc2hvd1Bhc3N3b3JkPXtzaG93UGFzc3dvcmR9XG4gICAgICAgIGhhbmRsZUNsaWNrU2hvd1Bhc3N3b3JkPXtoYW5kbGVTaG93SGlkZVBhc3N3b3JkfVxuICAgICAgICBoYW5kbGVNb3VzZURvd25QYXNzd29yZD17aGFuZGxlTW91c2VEb3duUGFzc3dvcmR9XG4gICAgICAgIG9uQ2hhbmdlPXtvbk5ld1Bhc3N3b3JkQ2hhbmdlfVxuICAgICAgLz5cbiAgICAgIDxCb3hcbiAgICAgICAgc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLCBtYXJnaW5Ub3A6IDEgfX1cbiAgICAgID5cbiAgICAgICAge1BBU1NXT1JEX0hJTlRTLm1hcCgoeyBoaW50LCB2YWxpZGF0aW9uVHlwZSB9KSA9PiAoXG4gICAgICAgICAgPExvZ2luSGludFRleHRcbiAgICAgICAgICAgIGtleT17dmFsaWRhdGlvblR5cGV9XG4gICAgICAgICAgICBoaW50PXtoaW50fVxuICAgICAgICAgICAgdmFsaWRhdGlvbj17dmFsaWRhdGlvbn1cbiAgICAgICAgICAgIHZhbGlkYXRpb25UeXBlPXt2YWxpZGF0aW9uVHlwZX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvQm94PlxuICAgICAgPExvZ2luUGFzc3dvcmRGaWVsZFxuICAgICAgICBzaG93UGFzc3dvcmQ9e3Nob3dQYXNzd29yZH1cbiAgICAgICAgaGFuZGxlQ2xpY2tTaG93UGFzc3dvcmQ9e2hhbmRsZVNob3dIaWRlUGFzc3dvcmR9XG4gICAgICAgIGhhbmRsZU1vdXNlRG93blBhc3N3b3JkPXtoYW5kbGVNb3VzZURvd25QYXNzd29yZH1cbiAgICAgICAgcGxhY2Vob2xkZXI9XCJDb25maXJtIE5ldyBQYXNzd29yZFwiXG4gICAgICAgIGxhYmVsPVwiQ29uZmlybSBOZXcgUGFzc3dvcmRcIlxuICAgICAgICBuYW1lPVwiY29uZmlybS1wYXNzd29yZFwiXG4gICAgICAgIGF1dG9Db21wbGV0ZT1cIm5vcGVcIlxuICAgICAgICBvbkNoYW5nZT17b25Db25maXJtUGFzc3dvcmRDaGFuZ2V9XG4gICAgICAvPlxuICAgICAgPEJveCBzeD17eyBtYXJnaW5Ub3A6IDEgfX0+XG4gICAgICAgIDxMb2dpbkhpbnRUZXh0XG4gICAgICAgICAgaGludD17XCJFbnN1cmUgdGhhdCB0aGUgcGFzc3dvcmRzIGVudGVyZWQgaW4gYm90aCBmaWVsZHMgbWF0Y2ggZm9yIGNvbmZpcm1hdGlvbi5cIn1cbiAgICAgICAgICB2YWxpZGF0aW9uPXt2YWxpZGF0aW9ufVxuICAgICAgICAgIHZhbGlkYXRpb25UeXBlPXtcIm1hdGNoUGFzc3dvcmRzXCJ9XG4gICAgICAgIC8+XG4gICAgICA8L0JveD5cblxuICAgICAgPEZvcm1CdXR0b25zXG4gICAgICAgIHN1Ym1pdExhYmVsPVwiQ2hhbmdlIFBhc3N3b3JkXCJcbiAgICAgICAgaGFuZGxlQmFja0J1dHRvbj17aGFuZGxlQmFja1RvTG9naW59XG4gICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgICBzdWJtaXREaXNhYmxlZD17aXNTdWJtaXREaXNhYmxlZH1cbiAgICAgIC8+XG4gICAgPC9mb3JtPlxuICApXG59XG5cbmV4cG9ydCB7IE5ld1Bhc3N3b3JkRm9ybSB9XG4iXSwibmFtZXMiOlsiTmV3UGFzc3dvcmRGb3JtIiwiZm9ybVJlZiIsInNob3dQYXNzd29yZCIsImlzTG9hZGluZyIsImlzU3VibWl0RGlzYWJsZWQiLCJ2YWxpZGF0aW9uIiwib25TdWJtaXQiLCJvbkludmFsaWQiLCJvbk5ld1Bhc3N3b3JkQ2hhbmdlIiwib25Db25maXJtUGFzc3dvcmRDaGFuZ2UiLCJoYW5kbGVTaG93SGlkZVBhc3N3b3JkIiwiaGFuZGxlTW91c2VEb3duUGFzc3dvcmQiLCJoYW5kbGVCYWNrVG9Mb2dpbiIsImZvcm0iLCJpZCIsInJlZiIsImF1dG9Db21wbGV0ZSIsIklucHV0TGFiZWwiLCJodG1sRm9yIiwiVGV4dEZpZWxkIiwidmFyaWFudCIsInBsYWNlaG9sZGVyIiwicmVxdWlyZWQiLCJuYW1lIiwidHlwZSIsImF1dG9Gb2N1cyIsIkxvZ2luUGFzc3dvcmRGaWVsZCIsImxhYmVsIiwiaGFuZGxlQ2xpY2tTaG93UGFzc3dvcmQiLCJvbkNoYW5nZSIsIkJveCIsInN4IiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJqdXN0aWZ5Q29udGVudCIsIm1hcmdpblRvcCIsIlBBU1NXT1JEX0hJTlRTIiwibWFwIiwiaGludCIsInZhbGlkYXRpb25UeXBlIiwiTG9naW5IaW50VGV4dCIsIkZvcm1CdXR0b25zIiwic3VibWl0TGFiZWwiLCJoYW5kbGVCYWNrQnV0dG9uIiwic3VibWl0RGlzYWJsZWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBd0dTQTs7O2VBQUFBOzs7O3NCQXRHa0M7dUJBQ29COzJCQUNoQztBQWlCL0IsU0FBU0EsZ0JBQWdCLEVBQ3ZCQyxPQUFPLEVBQ1BDLFlBQVksRUFDWkMsU0FBUyxFQUNUQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDVkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLG1CQUFtQixFQUNuQkMsdUJBQXVCLEVBQ3ZCQyxzQkFBc0IsRUFDdEJDLHVCQUF1QixFQUN2QkMsaUJBQWlCLEVBQ1g7SUFDTixxQkFDRSxzQkFBQ0M7UUFDQ0MsSUFBRztRQUNIQyxLQUFLZDtRQUNMSyxVQUFVQTtRQUNWVSxjQUFhO1FBQ2JULFdBQVdBOzswQkFFWCxxQkFBQ1UsZ0JBQVU7Z0JBQUNDLFNBQVE7MEJBQU87OzBCQUMzQixxQkFBQ0MsZUFBUztnQkFDUkMsU0FBUTtnQkFDUkMsYUFBWTtnQkFDWkMsUUFBUTtnQkFDUkMsTUFBSztnQkFDTEMsTUFBSztnQkFDTEMsU0FBUztnQkFDVFQsY0FBYTs7MEJBR2YscUJBQUNVLHlCQUFrQjtnQkFDakJMLGFBQVk7Z0JBQ1pFLE1BQUs7Z0JBQ0xJLE9BQU07Z0JBQ05YLGNBQWE7Z0JBQ2JkLGNBQWNBO2dCQUNkMEIseUJBQXlCbEI7Z0JBQ3pCQyx5QkFBeUJBO2dCQUN6QmtCLFVBQVVyQjs7MEJBRVoscUJBQUNzQixTQUFHO2dCQUNGQyxJQUFJO29CQUFFQyxTQUFTO29CQUFRQyxlQUFlO29CQUFVQyxnQkFBZ0I7b0JBQVVDLFdBQVc7Z0JBQUU7MEJBRXRGQyx5QkFBYyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVDLGNBQWMsRUFBRSxpQkFDM0MscUJBQUNDLG9CQUFhO3dCQUVaRixNQUFNQTt3QkFDTmpDLFlBQVlBO3dCQUNaa0MsZ0JBQWdCQTt1QkFIWEE7OzBCQU9YLHFCQUFDYix5QkFBa0I7Z0JBQ2pCeEIsY0FBY0E7Z0JBQ2QwQix5QkFBeUJsQjtnQkFDekJDLHlCQUF5QkE7Z0JBQ3pCVSxhQUFZO2dCQUNaTSxPQUFNO2dCQUNOSixNQUFLO2dCQUNMUCxjQUFhO2dCQUNiYSxVQUFVcEI7OzBCQUVaLHFCQUFDcUIsU0FBRztnQkFBQ0MsSUFBSTtvQkFBRUksV0FBVztnQkFBRTswQkFDdEIsY0FBQSxxQkFBQ0ssb0JBQWE7b0JBQ1pGLE1BQU07b0JBQ05qQyxZQUFZQTtvQkFDWmtDLGdCQUFnQjs7OzBCQUlwQixxQkFBQ0Usa0JBQVc7Z0JBQ1ZDLGFBQVk7Z0JBQ1pDLGtCQUFrQi9CO2dCQUNsQlQsV0FBV0E7Z0JBQ1h5QyxnQkFBZ0J4Qzs7OztBQUl4QiJ9