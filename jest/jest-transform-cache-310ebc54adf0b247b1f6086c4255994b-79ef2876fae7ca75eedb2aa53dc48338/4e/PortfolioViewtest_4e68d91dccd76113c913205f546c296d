da3c0ba14289747245743afc1a3e8311
"use strict";
jest.mock("@rp/react/tanstack-api/watchlist", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/tanstack-api/watchlist")), {
        useWatchlist: jest.fn(),
        useWatchlistsActions: jest.fn()
    }));
jest.mock("@rp/react/tanstack-api/cqs-by-ids", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/tanstack-api/cqs-by-ids")), {
        useCqsByIdsContext: jest.fn()
    }));
jest.mock("react-router-dom", ()=>_object_spread_props(_object_spread({}, jest.requireActual("react-router-dom")), {
        useNavigate: ()=>mockHistoryPush
    }));
jest.mock("@rp/react/common/providers", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/common/providers")), {
        useAccount: jest.fn(()=>({
                canShare: true,
                hasEntitlement: jest.fn(()=>true)
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _tools = require("@rp/react/web/common/tools");
const _icons = require("@rp/react/web/icons");
const _react = require("@testing-library/react");
const _PortfolioView = require("./PortfolioView");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const mockUseCqsByIdsContext = _cqsbyids.useCqsByIdsContext;
const mockUseWatchlist = _watchlist.useWatchlist;
const mockHistoryPush = jest.fn();
const dummyWatchlist = {
    dateCreated: "2021-07-19T13:38:14.556394",
    lastUpdated: "2021-07-30T15:02:31.600256",
    name: "Tesla and Apple",
    subType: "comp:public",
    items: [
        "DD3BB1",
        "D8442A"
    ],
    id: "19b2a02d-10ea-4f87-ac34-768ffb8e454d",
    owner: "test@test.com",
    shared: {
        company: {
            permission: "read",
            id: "RavenPack"
        },
        users: []
    }
};
const mockByIds = {
    ids: {
        DD3BB1: {
            data: {
                key: "DD3BB1",
                name: "Bibble",
                queryType: "entity",
                volume: 0,
                queryRelationship: "direct"
            },
            isLoading: false,
            isError: false,
            startLoading: false
        },
        D8442A: {
            data: {
                key: "D8442A",
                name: "Wibble",
                queryType: "entity",
                volume: 0,
                queryRelationship: "direct"
            },
            isLoading: false,
            isError: false,
            startLoading: false
        }
    },
    addByIds: jest.fn()
};
const props = {
    icon: _icons.WatchlistIcon,
    iconFill: "#5DADFF",
    iconSize: 24,
    id: dummyWatchlist.id,
    runSearch: jest.fn(),
    onShare: jest.fn()
};
test("should render the watchlist editor", ()=>{
    mockUseCqsByIdsContext.mockReturnValue(mockByIds);
    mockUseWatchlist.mockReturnValue({
        data: dummyWatchlist,
        isLoading: false
    });
    const { getByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PortfolioView.PortfolioView, _object_spread({}, props)));
    expect(getByText("Tesla and Apple")).toBeInTheDocument();
});
test("should render the watchlist editor with no items", ()=>{
    mockUseWatchlist.mockReturnValue({
        data: _object_spread_props(_object_spread({}, dummyWatchlist), {
            items: []
        }),
        isLoading: false
    });
    mockUseCqsByIdsContext.mockReturnValue(mockByIds);
    const { findByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PortfolioView.PortfolioView, _object_spread({}, props)));
    (0, _react.waitFor)(()=>expect(findByText("We couldn't find any results that match your search criteria. Please try again with different keywords.")).toBeInTheDocument());
});
test("should render the watchlist editor loading", ()=>{
    mockUseWatchlist.mockReturnValue({
        isLoading: true
    });
    const { getByTestId } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PortfolioView.PortfolioView, _object_spread({}, props)));
    expect(getByTestId("loading-spinner")).toBeInTheDocument();
});

//# sourceMappingURL=data:application/json;base64,