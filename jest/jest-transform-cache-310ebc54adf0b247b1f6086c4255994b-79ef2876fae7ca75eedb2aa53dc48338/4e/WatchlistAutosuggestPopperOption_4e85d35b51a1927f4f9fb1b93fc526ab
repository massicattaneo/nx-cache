72c0cbb4c6f833c3c13659764e00fcfb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistAutosuggestPopperOption", {
    enumerable: true,
    get: function() {
        return WatchlistAutosuggestPopperOption;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _match = /*#__PURE__*/ _interop_require_default(require("autosuggest-highlight/match"));
const _parse = /*#__PURE__*/ _interop_require_default(require("autosuggest-highlight/parse"));
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _icons = require("@rp/react/web/icons");
const _core = require("@rp/react/web/mui/core");
const _SuggestionInput = require("../SuggestionInput");
const _WatchlistNestedSuggestedIcon = require("./WatchlistNestedSuggestedIcon");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const Icon = (0, _core.styled)(_icons.IconEntity)(({ theme })=>({
        color: theme.palette.grey[200],
        width: 20,
        height: 20
    }));
const style = {
    ml: 1,
    fontSize: 14,
    width: 70,
    fontWeight: 700
};
const ItemIcon = ({ entity, isChecked })=>{
    var _entity_entityType;
    const icon = entity.category === "ETFs" ? "ETF" : (_entity_entityType = entity.entityType) !== null && _entity_entityType !== void 0 ? _entity_entityType : "COMP";
    if (isChecked) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                "& p": {
                    fontSize: 16,
                    px: "2px"
                }
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.PrimaryCheckedLabel, {
                label: ""
            })
        });
    }
    return entity.metadata4 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LazyImage, {
        src: entity.metadata4,
        alt: entity.name,
        width: 20,
        height: 20,
        loadingFallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                width: 20,
                height: 20
            }
        }),
        fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(Icon, {
            icon: icon
        })
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(Icon, {
        icon: icon
    });
};
const isEntitySuggestionWithSubsidiaries = (suggestion)=>{
    return "entityType" in suggestion;
};
const WatchlistAutosuggestPopperOption = ({ entity, onClick, toggleSubsidiaries, highlightValue, selectedOption, showTicker, backgroundColor, isChecked, id })=>{
    var _entity_subsidiaries, _entity_subsidiaries1, _entity_parent1, _entity_subsidiaries2, _entity_subsidiaries3;
    if (!isEntitySuggestionWithSubsidiaries(entity)) return null;
    const displayLabel = entity.name || entity.label;
    const matches = (0, _match.default)(displayLabel, highlightValue);
    const parts = (0, _parse.default)(displayLabel, matches);
    const hasTicker = ((0, _suggestion.isCompanySuggestion)(entity) || (0, _suggestion.isETFSuggestion)(entity)) && entity.ticker;
    const onToggleClick = (event)=>{
        event.stopPropagation();
        event.preventDefault();
        toggleSubsidiaries === null || toggleSubsidiaries === void 0 ? void 0 : toggleSubsidiaries(id);
    };
    const isSubsidiary = (0, _suggestion.isCompanySuggestion)(entity) && !(((_entity_subsidiaries = entity.subsidiaries) === null || _entity_subsidiaries === void 0 ? void 0 : _entity_subsidiaries.length) > 0 && !!entity.parent1) && entity.typeDesc === "Subsidiary" && ((_entity_subsidiaries1 = entity.subsidiaries) === null || _entity_subsidiaries1 === void 0 ? void 0 : _entity_subsidiaries1[0].key) !== ((_entity_parent1 = entity.parent1) === null || _entity_parent1 === void 0 ? void 0 : _entity_parent1.key) || entity.nested;
    var _entity_nested;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        id: id,
        onClick: ()=>onClick(entity),
        sx: (theme)=>({
                display: "flex",
                alignItems: "center",
                position: "relative",
                p: 1,
                pl: isSubsidiary ? showTicker ? 13 : 3 : 1,
                cursor: "pointer",
                "&:hover": {
                    backgroundColor: (0, _core.lighten)(backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : theme.palette.elevation.dp24, 0.1)
                },
                background: selectedOption === entity.id ? (0, _core.lighten)(backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : theme.palette.elevation.dp24, 0.1) : "transparent"
            }),
        children: [
            isSubsidiary ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistNestedSuggestedIcon.WatchlistNestedSuggestionIcon, {
                showTicker: showTicker,
                type: (_entity_nested = entity.nested) !== null && _entity_nested !== void 0 ? _entity_nested : "default"
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    alignItems: "center",
                    pl: 1
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(ItemIcon, {
                        entity: entity,
                        isChecked: isChecked
                    }),
                    hasTicker && showTicker && !isSubsidiary && /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                        tooltipText: entity.ticker,
                        typographyProps: style,
                        children: entity.ticker
                    }),
                    !hasTicker && showTicker && !isSubsidiary && /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        sx: style,
                        children: "Â "
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_compositecomponents.EllipsisTooltip, {
                tooltipText: displayLabel,
                typographyProps: {
                    flexGrow: 1,
                    ml: 2,
                    fontSize: 14
                },
                children: [
                    parts.map((part, i)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_SuggestionInput.HightLightText, {
                            component: "span",
                            highlight: part.highlight,
                            children: part.text
                        }, i)),
                    ((_entity_subsidiaries2 = entity.subsidiaries) === null || _entity_subsidiaries2 === void 0 ? void 0 : _entity_subsidiaries2.length) ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.ButtonBase, {
                        onClick: onToggleClick,
                        sx: (theme)=>({
                                fontSize: 12,
                                fontFamily: theme.typography.fontFamily,
                                color: theme.palette.primary.light,
                                marginLeft: theme.spacing(1.5),
                                p: 0.5,
                                ":hover": {
                                    textDecoration: "underline"
                                }
                            }),
                        children: [
                            (_entity_subsidiaries3 = entity.subsidiaries) === null || _entity_subsidiaries3 === void 0 ? void 0 : _entity_subsidiaries3.length,
                            " related"
                        ]
                    }) : null
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                sx: {
                    fontSize: 12,
                    color: "text.secondary"
                },
                children: entity.typeDesc
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,