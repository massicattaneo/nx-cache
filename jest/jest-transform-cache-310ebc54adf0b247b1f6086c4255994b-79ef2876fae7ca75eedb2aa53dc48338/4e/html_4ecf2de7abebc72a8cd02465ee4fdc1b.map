{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-extension-gfm-footnote/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string | null | undefined} [label='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string | null | undefined} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label (default: `'class=\"sr-only\"'`).\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string | null | undefined} [backLabel]\n *   Textual label to describe the backreference back to references (default:\n *   `defaultBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions\n  const label = config.label || 'Footnotes'\n  const labelTagName = config.labelTagName || 'h2'\n  const labelAttributes =\n    config.labelAttributes === null || config.labelAttributes === undefined\n      ? 'class=\"sr-only\"'\n      : config.labelAttributes\n  const backLabel = config.backLabel || defaultBackLabel\n  const clobberPrefix =\n    config.clobberPrefix === null || config.clobberPrefix === undefined\n      ? 'user-content-'\n      : config.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack')\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions')\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack')\n        const tightStack = this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack')\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder')\n        let counts = this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || []\n        const counts = this.getData('gfmFootnoteCallCounts') || {}\n        const definitions = this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><' +\n              labelTagName +\n              ' id=\"footnote-label\"' +\n              (labelAttributes ? ' ' + labelAttributes : '') +\n              '>'\n          )\n          this.raw(this.encode(label))\n          this.tag('</' + labelTagName + '>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" aria-label=\"' +\n                this.encode(\n                  typeof backLabel === 'string'\n                    ? backLabel\n                    : backLabel(index, referenceIndex)\n                ) +\n                '\" class=\"data-footnote-backref\">‚Ü©' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n              injected = true\n              return ' ' + reference + $0\n            })\n          )\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"],"names":["defaultBackLabel","gfmFootnoteHtml","own","hasOwnProperty","emptyOptions","referenceIndex","rereferenceIndex","options","config","label","labelTagName","labelAttributes","undefined","backLabel","clobberPrefix","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","normalizeIdentifier","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","sanitizeUri","toLowerCase","length","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","references","reference","join","injected","replace","$0"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}