{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/providers/src/Snackbar/CustomSnackbar/CustomSnackbar.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\"\nimport { SnackbarKey, SnackbarMessage as SnackbarMessageType, VariantType } from \"notistack\"\nimport { Box, Typography } from \"@rp/react/web/mui/core\"\nimport { Close } from \"@rp/react/web/mui/icons\"\n// Styles\nimport {\n  CloseButtonStyled,\n  SnackbarContentStyled,\n  SnackbarMessageStyled,\n} from \"./CustomSnackbar.styles\"\n\ntype Props = {\n  children: SnackbarMessageType\n  id: SnackbarKey\n  action: React.ReactNode\n  Icon: React.FC\n  disableClose?: boolean\n  variant: VariantType\n  closeSnackbar: (key: SnackbarKey) => void\n}\n\ntype SnackbarMessageProps = Pick<Props, \"children\" | \"Icon\" | \"disableClose\">\ntype SnackbarActionProps = Pick<Props, \"action\" | \"id\" | \"closeSnackbar\">\n\nconst capitalize = (string: string): string => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst SnackbarMessage = ({ children, Icon, disableClose }: SnackbarMessageProps) => (\n  <SnackbarMessageStyled disableClose={disableClose}>\n    <Icon />\n    {typeof children === \"string\" ? (\n      <Typography variant=\"body2\">{capitalize(children)}</Typography>\n    ) : (\n      children\n    )}\n  </SnackbarMessageStyled>\n)\n\nconst SnackbarAction = ({ action, id, closeSnackbar }: SnackbarActionProps) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n      }}\n    >\n      {action}\n      <CloseButtonStyled\n        size=\"small\"\n        disableRipple\n        onClick={() => closeSnackbar(id)}\n        data-testid={`close-snackbar-${id}`}\n      >\n        <Close />\n      </CloseButtonStyled>\n    </Box>\n  )\n}\n\nconst CustomSnackbar = forwardRef<HTMLDivElement, Props>(\n  ({ children, id, action, Icon, variant, disableClose, closeSnackbar }, ref) => (\n    <SnackbarContentStyled\n      ref={ref}\n      disableClose={disableClose}\n      message={\n        <SnackbarMessage disableClose={disableClose} Icon={Icon}>\n          {children}\n        </SnackbarMessage>\n      }\n      action={\n        !disableClose ? (\n          <SnackbarAction closeSnackbar={closeSnackbar} action={action} id={id} />\n        ) : undefined\n      }\n      variantName={variant}\n    />\n  ),\n)\n\nexport { CustomSnackbar }\n"],"names":["CustomSnackbar","capitalize","string","charAt","toUpperCase","slice","SnackbarMessage","children","Icon","disableClose","SnackbarMessageStyled","Typography","variant","SnackbarAction","action","id","closeSnackbar","Box","sx","display","alignItems","CloseButtonStyled","size","disableRipple","onClick","data-testid","Close","forwardRef","ref","SnackbarContentStyled","message","undefined","variantName"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgFSA;;;eAAAA;;;;+DAhFyB;sBAEF;uBACV;sCAMf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeP,MAAMC,aAAa,CAACC;IAClB,OAAOA,OAAOC,MAAM,CAAC,GAAGC,WAAW,KAAKF,OAAOG,KAAK,CAAC;AACvD;AAEA,MAAMC,kBAAkB,CAAC,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,YAAY,EAAwB,iBAC7E,sBAACC,2CAAqB;QAACD,cAAcA;;0BACnC,qBAACD;YACA,OAAOD,aAAa,yBACnB,qBAACI,gBAAU;gBAACC,SAAQ;0BAASX,WAAWM;iBAExCA;;;AAKN,MAAMM,iBAAiB,CAAC,EAAEC,MAAM,EAAEC,EAAE,EAAEC,aAAa,EAAuB;IACxE,qBACE,sBAACC,SAAG;QACFC,IAAI;YACFC,SAAS;YACTC,YAAY;QACd;;YAECN;0BACD,qBAACO,uCAAiB;gBAChBC,MAAK;gBACLC,aAAa;gBACbC,SAAS,IAAMR,cAAcD;gBAC7BU,eAAa,CAAC,eAAe,EAAEV,GAAG,CAAC;0BAEnC,cAAA,qBAACW,YAAK;;;;AAId;AAEA,MAAM1B,+BAAiB2B,IAAAA,iBAAU,EAC/B,CAAC,EAAEpB,QAAQ,EAAEQ,EAAE,EAAED,MAAM,EAAEN,IAAI,EAAEI,OAAO,EAAEH,YAAY,EAAEO,aAAa,EAAE,EAAEY,oBACrE,qBAACC,2CAAqB;QACpBD,KAAKA;QACLnB,cAAcA;QACdqB,uBACE,qBAACxB;YAAgBG,cAAcA;YAAcD,MAAMA;sBAChDD;;QAGLO,QACE,CAACL,6BACC,qBAACI;YAAeG,eAAeA;YAAeF,QAAQA;YAAQC,IAAIA;aAChEgB;QAENC,aAAapB"}