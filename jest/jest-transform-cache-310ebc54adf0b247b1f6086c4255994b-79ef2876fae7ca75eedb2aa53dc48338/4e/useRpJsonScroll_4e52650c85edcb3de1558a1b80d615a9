3071d1d19e21164aa0aadcccd0074ec1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useRpjsonScroll", {
    enumerable: true,
    get: function() {
        return useRpjsonScroll;
    }
});
const _react = require("react");
const _constants = require("../constants");
const getOffset = (el, scrollBody, previous = 0)=>{
    if (scrollBody) {
        return el.offsetTop;
    }
    if (!el) return previous;
    if (el.className === _constants.SCROLLER_ROOT_CLASSNAME) return previous;
    return getOffset(el.offsetParent, scrollBody, el.offsetTop + previous);
};
const scrollToParagraph = (ref, offset, paragraphIndex, scrollBody)=>{
    if (!ref.current) return;
    const item = ref.current.querySelector(`.${_constants.CLASS_NAMES.PARAGRAPH_NUMBER_PREFIX}${paragraphIndex}`);
    if (!item) return;
    const top = getOffset(item, scrollBody);
    scrollBody ? window.scroll({
        top: top + offset,
        behavior: "smooth"
    }) : ref.current.scroll({
        top: top + offset,
        behavior: "smooth"
    });
};
const scrollToSentence = (ref, offset, paragraphIndex, sentenceIndex, scrollBody)=>{
    if (!ref.current) return;
    const item = ref.current.querySelector(`.${_constants.CLASS_NAMES.ID_PREFIX}${_constants.CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${paragraphIndex}-${sentenceIndex}`);
    if (!item) return;
    const top = getOffset(item, scrollBody);
    scrollBody ? window.scroll({
        top: top + offset,
        behavior: "smooth"
    }) : ref.current.scroll({
        top: top + offset,
        behavior: "smooth"
    });
};
const scrollToFind = (ref, offset, findIndex, findCount, scrollBody)=>{
    if (!ref.current) return;
    const item = ref.current.querySelector(`.${_constants.CLASS_NAMES.ID_PREFIX}${_constants.CLASS_NAMES.FIND_PREFIX}${findIndex}-${findCount}`);
    if (!item) return;
    const top = getOffset(item, scrollBody);
    scrollBody ? window.scroll({
        top: top + offset,
        behavior: "smooth"
    }) : ref.current.scroll({
        top: top + offset,
        behavior: "smooth"
    });
};
const useRpjsonScroll = ({ offset = 0, scrollBody = false } = {})=>{
    const ref = (0, _react.useRef)(null);
    return {
        ref,
        scrollToSentence: (0, _react.useCallback)((paragraphIndex, sentenceIndex)=>scrollToSentence(ref, offset, paragraphIndex, sentenceIndex, scrollBody), [
            offset,
            scrollBody
        ]),
        scrollToParagraph: (0, _react.useCallback)((paragraphIndex)=>scrollToParagraph(ref, offset, paragraphIndex, scrollBody), [
            offset,
            scrollBody
        ]),
        scrollToFind: (0, _react.useCallback)((index, count)=>scrollToFind(ref, offset, index, count, scrollBody), [
            offset,
            scrollBody
        ])
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3JwanNvbi9zcmMvbGliL2hvb2tzL3VzZVJwSnNvblNjcm9sbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVmT2JqZWN0LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENMQVNTX05BTUVTLCBTQ1JPTExFUl9ST09UX0NMQVNTTkFNRSB9IGZyb20gXCIuLi9jb25zdGFudHNcIlxuXG5jb25zdCBnZXRPZmZzZXQgPSAoZWw6IEhUTUxEaXZFbGVtZW50LCBzY3JvbGxCb2R5OiBib29sZWFuLCBwcmV2aW91cyA9IDApOiBudW1iZXIgPT4ge1xuICBpZiAoc2Nyb2xsQm9keSkge1xuICAgIHJldHVybiBlbC5vZmZzZXRUb3BcbiAgfVxuXG4gIGlmICghZWwpIHJldHVybiBwcmV2aW91c1xuICBpZiAoZWwuY2xhc3NOYW1lID09PSBTQ1JPTExFUl9ST09UX0NMQVNTTkFNRSkgcmV0dXJuIHByZXZpb3VzXG4gIHJldHVybiBnZXRPZmZzZXQoZWwub2Zmc2V0UGFyZW50IGFzIEhUTUxEaXZFbGVtZW50LCBzY3JvbGxCb2R5LCBlbC5vZmZzZXRUb3AgKyBwcmV2aW91cylcbn1cblxuY29uc3Qgc2Nyb2xsVG9QYXJhZ3JhcGggPSAoXG4gIHJlZjogUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50IHwgbnVsbD4sXG4gIG9mZnNldDogbnVtYmVyLFxuICBwYXJhZ3JhcGhJbmRleDogbnVtYmVyLFxuICBzY3JvbGxCb2R5OiBib29sZWFuLFxuKSA9PiB7XG4gIGlmICghcmVmLmN1cnJlbnQpIHJldHVyblxuICBjb25zdCBpdGVtID0gcmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcbiAgICBgLiR7Q0xBU1NfTkFNRVMuUEFSQUdSQVBIX05VTUJFUl9QUkVGSVh9JHtwYXJhZ3JhcGhJbmRleH1gLFxuICApIGFzIEhUTUxEaXZFbGVtZW50XG5cbiAgaWYgKCFpdGVtKSByZXR1cm5cblxuICBjb25zdCB0b3AgPSBnZXRPZmZzZXQoaXRlbSwgc2Nyb2xsQm9keSlcbiAgc2Nyb2xsQm9keVxuICAgID8gd2luZG93LnNjcm9sbCh7IHRvcDogdG9wICsgb2Zmc2V0LCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KVxuICAgIDogcmVmLmN1cnJlbnQuc2Nyb2xsKHsgdG9wOiB0b3AgKyBvZmZzZXQsIGJlaGF2aW9yOiBcInNtb290aFwiIH0pXG59XG5cbmNvbnN0IHNjcm9sbFRvU2VudGVuY2UgPSAoXG4gIHJlZjogUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50IHwgbnVsbD4sXG4gIG9mZnNldDogbnVtYmVyLFxuICBwYXJhZ3JhcGhJbmRleDogbnVtYmVyLFxuICBzZW50ZW5jZUluZGV4OiBudW1iZXIsXG4gIHNjcm9sbEJvZHk6IGJvb2xlYW4sXG4pID0+IHtcbiAgaWYgKCFyZWYuY3VycmVudCkgcmV0dXJuXG4gIGNvbnN0IGl0ZW0gPSByZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKFxuICAgIGAuJHtDTEFTU19OQU1FUy5JRF9QUkVGSVh9JHtDTEFTU19OQU1FUy5TRU5URU5DRV9OVU1CRVJfUFJFRklYfSR7cGFyYWdyYXBoSW5kZXh9LSR7c2VudGVuY2VJbmRleH1gLFxuICApIGFzIEhUTUxEaXZFbGVtZW50XG5cbiAgaWYgKCFpdGVtKSByZXR1cm5cblxuICBjb25zdCB0b3AgPSBnZXRPZmZzZXQoaXRlbSwgc2Nyb2xsQm9keSlcbiAgc2Nyb2xsQm9keVxuICAgID8gd2luZG93LnNjcm9sbCh7IHRvcDogdG9wICsgb2Zmc2V0LCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KVxuICAgIDogcmVmLmN1cnJlbnQuc2Nyb2xsKHsgdG9wOiB0b3AgKyBvZmZzZXQsIGJlaGF2aW9yOiBcInNtb290aFwiIH0pXG59XG5cbmNvbnN0IHNjcm9sbFRvRmluZCA9IChcbiAgcmVmOiBSZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQgfCBudWxsPixcbiAgb2Zmc2V0OiBudW1iZXIsXG4gIGZpbmRJbmRleDogbnVtYmVyLFxuICBmaW5kQ291bnQ6IG51bWJlcixcbiAgc2Nyb2xsQm9keTogYm9vbGVhbixcbikgPT4ge1xuICBpZiAoIXJlZi5jdXJyZW50KSByZXR1cm5cbiAgY29uc3QgaXRlbSA9IHJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgYC4ke0NMQVNTX05BTUVTLklEX1BSRUZJWH0ke0NMQVNTX05BTUVTLkZJTkRfUFJFRklYfSR7ZmluZEluZGV4fS0ke2ZpbmRDb3VudH1gLFxuICApIGFzIEhUTUxEaXZFbGVtZW50XG5cbiAgaWYgKCFpdGVtKSByZXR1cm5cblxuICBjb25zdCB0b3AgPSBnZXRPZmZzZXQoaXRlbSwgc2Nyb2xsQm9keSlcbiAgc2Nyb2xsQm9keVxuICAgID8gd2luZG93LnNjcm9sbCh7IHRvcDogdG9wICsgb2Zmc2V0LCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KVxuICAgIDogcmVmLmN1cnJlbnQuc2Nyb2xsKHsgdG9wOiB0b3AgKyBvZmZzZXQsIGJlaGF2aW9yOiBcInNtb290aFwiIH0pXG59XG5cbmV4cG9ydCBjb25zdCB1c2VScGpzb25TY3JvbGwgPSAoe1xuICBvZmZzZXQgPSAwLFxuICBzY3JvbGxCb2R5ID0gZmFsc2UsXG59OiB7IG9mZnNldD86IG51bWJlcjsgc2Nyb2xsQm9keT86IGJvb2xlYW4gfSA9IHt9KSA9PiB7XG4gIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcbiAgcmV0dXJuIHtcbiAgICByZWYsXG4gICAgc2Nyb2xsVG9TZW50ZW5jZTogdXNlQ2FsbGJhY2soXG4gICAgICAocGFyYWdyYXBoSW5kZXg6IG51bWJlciwgc2VudGVuY2VJbmRleDogbnVtYmVyKSA9PlxuICAgICAgICBzY3JvbGxUb1NlbnRlbmNlKHJlZiwgb2Zmc2V0LCBwYXJhZ3JhcGhJbmRleCwgc2VudGVuY2VJbmRleCwgc2Nyb2xsQm9keSksXG4gICAgICBbb2Zmc2V0LCBzY3JvbGxCb2R5XSxcbiAgICApLFxuICAgIHNjcm9sbFRvUGFyYWdyYXBoOiB1c2VDYWxsYmFjayhcbiAgICAgIChwYXJhZ3JhcGhJbmRleDogbnVtYmVyKSA9PiBzY3JvbGxUb1BhcmFncmFwaChyZWYsIG9mZnNldCwgcGFyYWdyYXBoSW5kZXgsIHNjcm9sbEJvZHkpLFxuICAgICAgW29mZnNldCwgc2Nyb2xsQm9keV0sXG4gICAgKSxcbiAgICBzY3JvbGxUb0ZpbmQ6IHVzZUNhbGxiYWNrKFxuICAgICAgKGluZGV4OiBudW1iZXIsIGNvdW50OiBudW1iZXIpID0+IHNjcm9sbFRvRmluZChyZWYsIG9mZnNldCwgaW5kZXgsIGNvdW50LCBzY3JvbGxCb2R5KSxcbiAgICAgIFtvZmZzZXQsIHNjcm9sbEJvZHldLFxuICAgICksXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VScGpzb25TY3JvbGwiLCJnZXRPZmZzZXQiLCJlbCIsInNjcm9sbEJvZHkiLCJwcmV2aW91cyIsIm9mZnNldFRvcCIsImNsYXNzTmFtZSIsIlNDUk9MTEVSX1JPT1RfQ0xBU1NOQU1FIiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG9QYXJhZ3JhcGgiLCJyZWYiLCJvZmZzZXQiLCJwYXJhZ3JhcGhJbmRleCIsImN1cnJlbnQiLCJpdGVtIiwicXVlcnlTZWxlY3RvciIsIkNMQVNTX05BTUVTIiwiUEFSQUdSQVBIX05VTUJFUl9QUkVGSVgiLCJ0b3AiLCJ3aW5kb3ciLCJzY3JvbGwiLCJiZWhhdmlvciIsInNjcm9sbFRvU2VudGVuY2UiLCJzZW50ZW5jZUluZGV4IiwiSURfUFJFRklYIiwiU0VOVEVOQ0VfTlVNQkVSX1BSRUZJWCIsInNjcm9sbFRvRmluZCIsImZpbmRJbmRleCIsImZpbmRDb3VudCIsIkZJTkRfUFJFRklYIiwidXNlUmVmIiwidXNlQ2FsbGJhY2siLCJpbmRleCIsImNvdW50Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Iiwi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