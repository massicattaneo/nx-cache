67a95b4c1d522acff0361706cb046d20
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useRavenPackQuery", {
    enumerable: true,
    get: function() {
        return useRavenPackQuery;
    }
});
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _helpers = require("./helpers");
const _addFilterToMap = require("./rpql-utils/addFilterToMap");
const _buildQueryFromMap = require("./rpql-utils/buildQueryFromMap");
const _collectFiltersFromLogicalGroups = require("./rpql-utils/collectFiltersFromLogicalGroups");
const _flattenQuery = require("./rpql-utils/flattenQuery");
const _generateMapBuilder = require("./rpql-utils/generateMapBuilder");
const _getFilterFromMap = require("./rpql-utils/getFilterFromMap");
const _removeFiltersFromMap = require("./rpql-utils/removeFiltersFromMap");
const _updateFilterInMap = require("./rpql-utils/updateFilterInMap");
const useRavenPackQuery = (query)=>{
    const flat = (0, _react.useMemo)(()=>(0, _flattenQuery.flattenQuery)(query), [
        query
    ]);
    const [filterMap, setFilterMap] = (0, _react.useState)(flat.filterMap);
    const [root, setRoot] = (0, _react.useState)(flat.root);
    const [expression, setExpression] = (0, _react.useState)((0, _buildQueryFromMap.buildQueryFromMap)(root, filterMap));
    const getFilter = (id)=>(0, _getFilterFromMap.getFilterFromMap)(id, filterMap);
    const findChild = (nodeId, condition)=>{
        const rootNode = getFilter(nodeId);
        if (rootNode === null) {
            throw new Error("Attempting to find child to non-existant node");
        }
        if (!(0, _apitypes.isRpqlFlatLogicalGroup)(rootNode)) {
            throw new Error("Unable to find child in non-logical filters");
        }
        const childId = rootNode.value.find((cid)=>{
            const childFilter = getFilter(cid);
            if (childFilter === null) {
                // This is another case where this should never happen since everything
                // is handled internally
                return false;
            }
            return condition(childFilter);
        });
        if (childId === undefined) {
            return null;
        }
        return getFilter(childId);
    };
    const addFilter = (parentId, filter)=>{
        const parentFilter = getFilter(parentId);
        const { map, error } = (0, _addFilterToMap.addFilterToMap)(filterMap, parentFilter, filter);
        if (error) throw new Error(error);
        setFilterMap(map);
        return (0, _buildQueryFromMap.buildQueryFromMap)(root, map);
    };
    const removeFilter = (idToRemove)=>{
        const allFilters = (0, _collectFiltersFromLogicalGroups.collectFiltersFromLogicalGroups)([
            idToRemove
        ], getFilter);
        const { map, error } = (0, _removeFiltersFromMap.removeFiltersFromMap)(filterMap, allFilters, root);
        if (error) throw new Error(error);
        setFilterMap(map);
        return (0, _buildQueryFromMap.buildQueryFromMap)(root, map);
    };
    const updateFilter = (filterId, update)=>{
        const filter = getFilter(filterId);
        const { map, error } = (0, _updateFilterInMap.updateFilterInMap)(filterMap, filter, update);
        if (error) throw new Error(error);
        setFilterMap(map);
        return (0, _buildQueryFromMap.buildQueryFromMap)(root, map);
    };
    const clear = ()=>{
        const newRoot = (0, _helpers.generateId)();
        setRoot(newRoot);
        const newFilterMap = {
            [newRoot]: {
                id: newRoot,
                type: "and",
                value: []
            }
        };
        setFilterMap(newFilterMap);
        return (0, _buildQueryFromMap.buildQueryFromMap)(newRoot, newFilterMap);
    };
    const resetExpression = (newExpression)=>{
        const flat = (0, _flattenQuery.flattenQuery)(newExpression);
        setFilterMap(flat.filterMap);
        setRoot(flat.root);
        return (0, _buildQueryFromMap.buildQueryFromMap)(root, filterMap);
    };
    const builder = (0, _generateMapBuilder.generateMapBuilder)(root, filterMap, setFilterMap);
    (0, _react.useEffect)(()=>{
        setExpression((0, _buildQueryFromMap.buildQueryFromMap)(root, filterMap));
    }, [
        root,
        filterMap
    ]);
    return {
        root,
        filterMap,
        expression,
        resetExpression,
        getFilter,
        addFilter,
        findChild,
        removeFilter,
        updateFilter,
        clear,
        builder
    };
};

//# sourceMappingURL=data:application/json;base64,