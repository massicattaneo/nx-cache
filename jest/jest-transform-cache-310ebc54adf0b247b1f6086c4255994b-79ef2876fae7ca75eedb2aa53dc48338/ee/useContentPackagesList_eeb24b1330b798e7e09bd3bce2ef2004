0f959c56c492f8ff4841e5a73f8bc142
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useContentPackagesList", {
    enumerable: true,
    get: function() {
        return useContentPackagesList;
    }
});
const _react = require("react");
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _content = require("@rp/react/tanstack-api/content");
const _providers = require("@rp/react/web/common/providers");
const _getAllContentPackagesFromResponsePages = require("../utils/getAllContentPackagesFromResponsePages");
function useContentPackagesList() {
    const { data, isLoading, isFetchingNextPage, hasNextPage, fetchNextPage, isError } = (0, _content.useInfiniteContentPackages)();
    const { enqueueError } = (0, _providers.useSnackbar)();
    const { enableContentPackagesFullCatalog } = (0, _launchdarklyreactclientsdk.useFlags)();
    (0, _react.useEffect)(()=>{
        if (isError) {
            enqueueError("There was an error while loading packages");
        }
    }, [
        enqueueError,
        isError
    ]);
    const allContentPackages = (0, _react.useMemo)(()=>(0, _getAllContentPackagesFromResponsePages.getAllContentPackagesFromResponsePages)({
            pages: data === null || data === void 0 ? void 0 : data.pages,
            isPermittedFullCatalog: enableContentPackagesFullCatalog
        }), [
        data === null || data === void 0 ? void 0 : data.pages,
        enableContentPackagesFullCatalog
    ]);
    return {
        isLoadingContentPackages: isLoading,
        allContentPackages,
        isFetchingNextPage,
        hasNextPage,
        fetchNextPage,
        hasError: isError
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL3NvdXJjZS1zZWxlY3Rvci9zcmMvaG9va3MvdXNlQ29udGVudFBhY2thZ2VzTGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgdXNlRmxhZ3MgfSBmcm9tIFwibGF1bmNoZGFya2x5LXJlYWN0LWNsaWVudC1zZGtcIlxuaW1wb3J0IHsgQ29udGVudFBhY2thZ2UsIHVzZUluZmluaXRlQ29udGVudFBhY2thZ2VzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvY29udGVudFwiXG5pbXBvcnQgeyB1c2VTbmFja2JhciB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgZ2V0QWxsQ29udGVudFBhY2thZ2VzRnJvbVJlc3BvbnNlUGFnZXMgfSBmcm9tIFwiLi4vdXRpbHMvZ2V0QWxsQ29udGVudFBhY2thZ2VzRnJvbVJlc3BvbnNlUGFnZXNcIlxuXG50eXBlIFVzZUNvbnRlbnRQYWNrYWdlc0xpc3RTdGF0ZSA9IHtcbiAgaXNMb2FkaW5nQ29udGVudFBhY2thZ2VzOiBib29sZWFuXG4gIGFsbENvbnRlbnRQYWNrYWdlczogQXJyYXk8Q29udGVudFBhY2thZ2U+XG4gIGlzRmV0Y2hpbmdOZXh0UGFnZTogYm9vbGVhblxuICBoYXNOZXh0UGFnZTogYm9vbGVhblxuICBmZXRjaE5leHRQYWdlOiAoKSA9PiB2b2lkXG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbmZ1bmN0aW9uIHVzZUNvbnRlbnRQYWNrYWdlc0xpc3QoKTogVXNlQ29udGVudFBhY2thZ2VzTGlzdFN0YXRlIHtcbiAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcsIGlzRmV0Y2hpbmdOZXh0UGFnZSwgaGFzTmV4dFBhZ2UsIGZldGNoTmV4dFBhZ2UsIGlzRXJyb3IgfSA9XG4gICAgdXNlSW5maW5pdGVDb250ZW50UGFja2FnZXMoKVxuICBjb25zdCB7IGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuXG4gIGNvbnN0IHsgZW5hYmxlQ29udGVudFBhY2thZ2VzRnVsbENhdGFsb2cgfSA9IHVzZUZsYWdzPHtcbiAgICBlbmFibGVDb250ZW50UGFja2FnZXNGdWxsQ2F0YWxvZzogYm9vbGVhblxuICB9PigpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNFcnJvcikge1xuICAgICAgZW5xdWV1ZUVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGxvYWRpbmcgcGFja2FnZXNcIilcbiAgICB9XG4gIH0sIFtlbnF1ZXVlRXJyb3IsIGlzRXJyb3JdKVxuXG4gIGNvbnN0IGFsbENvbnRlbnRQYWNrYWdlczogQXJyYXk8Q29udGVudFBhY2thZ2U+ID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgZ2V0QWxsQ29udGVudFBhY2thZ2VzRnJvbVJlc3BvbnNlUGFnZXMoe1xuICAgICAgICBwYWdlczogZGF0YT8ucGFnZXMsXG4gICAgICAgIGlzUGVybWl0dGVkRnVsbENhdGFsb2c6IGVuYWJsZUNvbnRlbnRQYWNrYWdlc0Z1bGxDYXRhbG9nLFxuICAgICAgfSksXG4gICAgW2RhdGE/LnBhZ2VzLCBlbmFibGVDb250ZW50UGFja2FnZXNGdWxsQ2F0YWxvZ10sXG4gIClcblxuICByZXR1cm4ge1xuICAgIGlzTG9hZGluZ0NvbnRlbnRQYWNrYWdlczogaXNMb2FkaW5nLFxuICAgIGFsbENvbnRlbnRQYWNrYWdlcyxcbiAgICBpc0ZldGNoaW5nTmV4dFBhZ2UsXG4gICAgaGFzTmV4dFBhZ2UsXG4gICAgZmV0Y2hOZXh0UGFnZSxcbiAgICBoYXNFcnJvcjogaXNFcnJvcixcbiAgfVxufVxuXG5leHBvcnQgeyB1c2VDb250ZW50UGFja2FnZXNMaXN0IH1cbmV4cG9ydCB0eXBlIHsgVXNlQ29udGVudFBhY2thZ2VzTGlzdFN0YXRlIH1cbiJdLCJuYW1lcyI6WyJ1c2VDb250ZW50UGFja2FnZXNMaXN0IiwiZGF0YSIsImlzTG9hZGluZyIsImlzRmV0Y2hpbmdOZXh0UGFnZSIsImhhc05leHRQYWdlIiwiZmV0Y2hOZXh0UGFnZSIsImlzRXJyb3IiLCJ1c2VJbmZpbml0ZUNvbnRlbnRQYWNrYWdlcyIsImVucXVldWVFcnJvciIsInVzZVNuYWNrYmFyIiwiZW5hYmxlQ29udGVudFBhY2thZ2VzRnVsbENhdGFsb2ciLCJ1c2VGbGFncyIsInVzZUVmZmVjdCIsImFsbENvbnRlbnRQYWNrYWdlcyIsInVzZU1lbW8iLCJnZXRBbGxDb250ZW50UGFja2FnZXNGcm9tUmVzcG9uc2VQYWdlcyIsInBhZ2VzIiwiaXNQZXJtaXR0ZWRGdWxsQ2F0YWxvZyIsImlzTG9hZGluZ0NvbnRlbnRQYWNrYWdlcyIsImhhc0Vycm9yIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFpRFNBOzs7ZUFBQUE7Ozt1QkFqRDBCOzRDQUNWO3lCQUNrQzsyQkFDL0I7d0RBQzJCO0FBV3ZELFNBQVNBO0lBQ1AsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRUMsa0JBQWtCLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxPQUFPLEVBQUUsR0FDaEZDLElBQUFBLG1DQUEwQjtJQUM1QixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSxzQkFBVztJQUVwQyxNQUFNLEVBQUVDLGdDQUFnQyxFQUFFLEdBQUdDLElBQUFBLG9DQUFRO0lBSXJEQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSU4sU0FBUztZQUNYRSxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNBO1FBQWNGO0tBQVE7SUFFMUIsTUFBTU8scUJBQTRDQyxJQUFBQSxjQUFPLEVBQ3ZELElBQ0VDLElBQUFBLDhFQUFzQyxFQUFDO1lBQ3JDQyxLQUFLLEVBQUVmLGlCQUFBQSwyQkFBQUEsS0FBTWUsS0FBSztZQUNsQkMsd0JBQXdCUDtRQUMxQixJQUNGO1FBQUNULGlCQUFBQSwyQkFBQUEsS0FBTWUsS0FBSztRQUFFTjtLQUFpQztJQUdqRCxPQUFPO1FBQ0xRLDBCQUEwQmhCO1FBQzFCVztRQUNBVjtRQUNBQztRQUNBQztRQUNBYyxVQUFVYjtJQUNaO0FBQ0YifQ==