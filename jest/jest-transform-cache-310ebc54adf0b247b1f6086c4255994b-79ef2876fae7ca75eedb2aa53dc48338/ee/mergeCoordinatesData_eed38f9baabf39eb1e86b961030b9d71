42c1c2c824dde6136a5365dfc4d37b26
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "mergeCoordinatesData", {
    enumerable: true,
    get: function() {
        return mergeCoordinatesData;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function mergeCoordinatesData(prevCoordinates, grounding) {
    const coordinatesData = _object_spread({}, prevCoordinates);
    for (const reference of grounding.references){
        var _coordinatesData, _coordinatesId;
        const coordinatesId = `${reference.start}-${reference.end}`;
        var _;
        (_ = (_coordinatesData = coordinatesData)[_coordinatesId = coordinatesId]) !== null && _ !== void 0 ? _ : _coordinatesData[_coordinatesId] = {
            type: reference.end - reference.start === 0 ? "point" : "text",
            references: []
        };
        coordinatesData[coordinatesId].references.push(reference);
    }
    return coordinatesData;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlQWdlbnQvdXRpbHMvbWVyZ2VDb29yZGluYXRlc0RhdGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdW5kaW5nQ29vcmRpbmF0ZXMsIEdyb3VuZGluZ01lc3NhZ2UgfSBmcm9tIFwiLi4vdXNlQWdlbnQudHlwZXNcIlxuXG5mdW5jdGlvbiBtZXJnZUNvb3JkaW5hdGVzRGF0YShcbiAgcHJldkNvb3JkaW5hdGVzOiBHcm91bmRpbmdDb29yZGluYXRlcyB8IHVuZGVmaW5lZCxcbiAgZ3JvdW5kaW5nOiBHcm91bmRpbmdNZXNzYWdlLFxuKSB7XG4gIGNvbnN0IGNvb3JkaW5hdGVzRGF0YTogR3JvdW5kaW5nQ29vcmRpbmF0ZXMgPSB7IC4uLnByZXZDb29yZGluYXRlcyB9XG5cbiAgZm9yIChjb25zdCByZWZlcmVuY2Ugb2YgZ3JvdW5kaW5nLnJlZmVyZW5jZXMpIHtcbiAgICBjb25zdCBjb29yZGluYXRlc0lkID0gYCR7cmVmZXJlbmNlLnN0YXJ0fS0ke3JlZmVyZW5jZS5lbmR9YFxuICAgIGNvb3JkaW5hdGVzRGF0YVtjb29yZGluYXRlc0lkXSA/Pz0ge1xuICAgICAgdHlwZTogcmVmZXJlbmNlLmVuZCAtIHJlZmVyZW5jZS5zdGFydCA9PT0gMCA/IFwicG9pbnRcIiA6IFwidGV4dFwiLFxuICAgICAgcmVmZXJlbmNlczogW10sXG4gICAgfVxuXG4gICAgY29vcmRpbmF0ZXNEYXRhW2Nvb3JkaW5hdGVzSWRdLnJlZmVyZW5jZXMucHVzaChyZWZlcmVuY2UpXG4gIH1cblxuICByZXR1cm4gY29vcmRpbmF0ZXNEYXRhXG59XG5cbmV4cG9ydCB7IG1lcmdlQ29vcmRpbmF0ZXNEYXRhIH1cbiJdLCJuYW1lcyI6WyJtZXJnZUNvb3JkaW5hdGVzRGF0YSIsInByZXZDb29yZGluYXRlcyIsImdyb3VuZGluZyIsImNvb3JkaW5hdGVzRGF0YSIsInJlZmVyZW5jZSIsInJlZmVyZW5jZXMiLCJjb29yZGluYXRlc0lkIiwic3RhcnQiLCJlbmQiLCJ0eXBlIiwicHVzaCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBcUJTQTs7O2VBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbkJULFNBQVNBLHFCQUNQQyxlQUFpRCxFQUNqREMsU0FBMkI7SUFFM0IsTUFBTUMsa0JBQXdDLG1CQUFLRjtJQUVuRCxLQUFLLE1BQU1HLGFBQWFGLFVBQVVHLFVBQVUsQ0FBRTtZQUU1Q0Ysa0JBQWdCRztRQURoQixNQUFNQSxnQkFBZ0IsQ0FBQyxFQUFFRixVQUFVRyxLQUFLLENBQUMsQ0FBQyxFQUFFSCxVQUFVSSxHQUFHLENBQUMsQ0FBQzs7UUFDM0RMLE1BQUFBLG1CQUFBQSxnQkFBZSxDQUFDRyxpQkFBQUEsY0FBYyxpQ0FBOUJILGdCQUFlLENBQUNHLGVBQWMsR0FBSztZQUNqQ0csTUFBTUwsVUFBVUksR0FBRyxHQUFHSixVQUFVRyxLQUFLLEtBQUssSUFBSSxVQUFVO1lBQ3hERixZQUFZLEVBQUU7UUFDaEI7UUFFQUYsZUFBZSxDQUFDRyxjQUFjLENBQUNELFVBQVUsQ0FBQ0ssSUFBSSxDQUFDTjtJQUNqRDtJQUVBLE9BQU9EO0FBQ1QifQ==