1abebc0b9d4fc53b2f885d8e1ed04e18
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ScopeCollection", {
    enumerable: true,
    get: function() {
        return ScopeCollection;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reactrouterdom = require("react-router-dom");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _router = require("@rp/react/web/router");
const ScopeItem = ({ icon, title, handle, description, onClick, selected, isBeta, isBlocked })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const baseBackgroundColor = isMobile ? "elevation.dp01" : undefined;
    const baseBorderColor = isMobile ? "transparent" : "outline.border";
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            border: "1px solid",
            borderColor: selected ? "primary.main" : baseBorderColor,
            flexBasis: isMobile ? "100%" : "calc(33% - 12px)",
            cursor: "pointer",
            borderRadius: 2,
            backgroundColor: selected ? "primary.background" : baseBackgroundColor,
            transition: "background-color 0.2s",
            minHeight: isMobile ? undefined : 121,
            "&:hover": {
                backgroundColor: selected ? "primary.background" : "overlay.surface"
            }
        },
        onClick: onClick,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    position: "absolute",
                    right: 8,
                    top: 8,
                    gap: 0.5,
                    display: "flex"
                },
                children: [
                    isBeta ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            height: 20,
                            width: 44,
                            fontSize: 12,
                            backgroundColor: "primary.background",
                            color: "primary.main",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            flexShrink: 0,
                            borderRadius: 1,
                            px: 2
                        },
                        children: "BETA"
                    }) : null,
                    isBlocked ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            px: 0.5,
                            py: 0.5,
                            bgcolor: "#C9AC1233",
                            borderRadius: 1,
                            display: "flex",
                            "& > svg": {
                                color: "#C9AC12",
                                fontSize: 12
                            }
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Lock, {})
                    }) : null
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    gap: 2,
                    paddingLeft: 1,
                    paddingRight: 1,
                    paddingBottom: 1,
                    paddingTop: 1
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            height: 32,
                            width: 32,
                            backgroundColor: "primary.background",
                            color: "primary.main",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            flexShrink: 0,
                            borderRadius: 1,
                            "& > svg": {
                                height: 20,
                                width: 20
                            }
                        },
                        children: icon
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        sx: {
                            display: "flex",
                            flexDirection: "column"
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                "data-testid": title,
                                sx: {
                                    fontWeight: 700
                                },
                                children: title
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                                component: "span",
                                sx: {
                                    fontSize: 14,
                                    color: isMobile ? "text.secondary" : "text.200"
                                },
                                children: [
                                    "@",
                                    handle
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                sx: {
                                    fontSize: 14,
                                    color: "grey.300"
                                },
                                children: description
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
const ScopeCollection = ({ data, onDatasetClick, selectedDataset })=>{
    const navigate = (0, _reactrouterdom.useNavigate)();
    if (data.type === "searchResults") {
        return data.value.length > 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                display: "flex",
                gap: 1.5,
                flexWrap: "wrap"
            },
            children: data.value.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScopeItem, {
                    icon: item.icon,
                    title: item.label,
                    handle: item.handle,
                    description: item.description,
                    onClick: ()=>item.blocked ? ()=>{
                            navigate(_router.CONTACT_SALES_ROUTE);
                        } : onDatasetClick(item.id),
                    selected: item.id === selectedDataset,
                    isBeta: item.betaLabel,
                    isBlocked: item.blocked
                }, item.id))
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                height: "100%",
                "& > div": {
                    height: "100%",
                    width: "100%"
                }
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.FindNoResults, {
                text: "No source found for your search."
            })
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            display: "flex",
            gap: 1.5,
            flexWrap: "wrap"
        },
        children: data.value.map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(ScopeItem, {
                icon: item.icon,
                title: item.label,
                description: item.description,
                onClick: ()=>item.blocked ? navigate(_router.CONTACT_SALES_ROUTE) : onDatasetClick(item.id),
                selected: item.id === selectedDataset,
                handle: item.handle,
                isBeta: item.betaLabel ? true : false,
                isBlocked: item.blocked
            }, item.id))
    });
};

//# sourceMappingURL=data:application/json;base64,