{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/chat/src/lib/Chat/ScopeSelectorModal/ScopeCollection.tsx"],"sourcesContent":["import { useNavigate } from \"react-router-dom\"\nimport { DatasetScope } from \"@rp/common/api-types\"\nimport { FindNoResults } from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { Box, Typography } from \"@rp/react/web/mui/core\"\nimport { Lock } from \"@rp/react/web/mui/icons\"\nimport { CONTACT_SALES_ROUTE } from \"@rp/react/web/router\"\nimport { filterDatasets } from \"../ChatInput/DatasetPopper\"\n\ntype ItemProps = {\n  icon: React.ReactNode\n  title: string\n  handle: string\n  description: string\n  onClick: () => void\n  selected: boolean\n  isBeta: boolean\n  isBlocked: boolean\n}\nconst ScopeItem = ({\n  icon,\n  title,\n  handle,\n  description,\n  onClick,\n  selected,\n  isBeta,\n  isBlocked,\n}: ItemProps) => {\n  const { isMobile } = useDeviceInfo()\n  const baseBackgroundColor = isMobile ? \"elevation.dp01\" : undefined\n  const baseBorderColor = isMobile ? \"transparent\" : \"outline.border\"\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"relative\",\n        border: \"1px solid\",\n        borderColor: selected ? \"primary.main\" : baseBorderColor,\n        flexBasis: isMobile ? \"100%\" : \"calc(33% - 12px)\",\n        cursor: \"pointer\",\n        borderRadius: 2,\n        backgroundColor: selected ? \"primary.background\" : baseBackgroundColor,\n        transition: \"background-color 0.2s\",\n        minHeight: isMobile ? undefined : 121,\n        \"&:hover\": {\n          backgroundColor: selected ? \"primary.background\" : \"overlay.surface\",\n        },\n      }}\n      onClick={onClick}\n    >\n      <Box\n        sx={{\n          position: \"absolute\",\n          right: 8,\n          top: 8,\n          gap: 0.5,\n          display: \"flex\",\n        }}\n      >\n        {isBeta ? (\n          <Box\n            sx={{\n              height: 20,\n              width: 44,\n              fontSize: 12,\n              backgroundColor: \"primary.background\",\n              color: \"primary.main\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              flexShrink: 0,\n              borderRadius: 1,\n              px: 2,\n            }}\n          >\n            BETA\n          </Box>\n        ) : null}\n        {isBlocked ? (\n          <Box\n            sx={{\n              px: 0.5,\n              py: 0.5,\n              bgcolor: \"#C9AC1233\",\n              borderRadius: 1,\n              display: \"flex\",\n              \"& > svg\": {\n                color: \"#C9AC12\",\n                fontSize: 12,\n              },\n            }}\n          >\n            <Lock />\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        sx={{\n          display: \"flex\",\n          gap: 2,\n          paddingLeft: 1,\n          paddingRight: 1,\n          paddingBottom: 1,\n          paddingTop: 1,\n        }}\n      >\n        <Box\n          sx={{\n            height: 32,\n            width: 32,\n            backgroundColor: \"primary.background\",\n            color: \"primary.main\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            flexShrink: 0,\n            borderRadius: 1,\n\n            \"& > svg\": {\n              height: 20,\n              width: 20,\n            },\n          }}\n        >\n          {icon}\n        </Box>\n        <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\n          <Typography data-testid={title} sx={{ fontWeight: 700 }}>\n            {title}\n          </Typography>\n          <Typography\n            component=\"span\"\n            sx={{ fontSize: 14, color: isMobile ? \"text.secondary\" : \"text.200\" }}\n          >\n            @{handle}\n          </Typography>\n          <Typography sx={{ fontSize: 14, color: \"grey.300\" }}>{description}</Typography>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\ntype Props = {\n  data: ReturnType<typeof filterDatasets>\n  selectedDataset?: DatasetScope\n  onDatasetClick: (datasetScope: DatasetScope) => void\n}\n\nconst ScopeCollection = ({ data, onDatasetClick, selectedDataset }: Props) => {\n  const navigate = useNavigate()\n\n  if (data.type === \"searchResults\") {\n    return data.value.length > 0 ? (\n      <Box sx={{ display: \"flex\", gap: 1.5, flexWrap: \"wrap\" }}>\n        {data.value.map(item => (\n          <ScopeItem\n            key={item.id}\n            icon={item.icon}\n            title={item.label}\n            handle={item.handle}\n            description={item.description}\n            onClick={() =>\n              item.blocked\n                ? () => {\n                    navigate(CONTACT_SALES_ROUTE)\n                  }\n                : onDatasetClick(item.id)\n            }\n            selected={item.id === selectedDataset}\n            isBeta={item.betaLabel}\n            isBlocked={item.blocked}\n          />\n        ))}\n      </Box>\n    ) : (\n      <Box\n        sx={{\n          height: \"100%\",\n          \"& > div\": {\n            height: \"100%\",\n            width: \"100%\",\n          },\n        }}\n      >\n        <FindNoResults text=\"No source found for your search.\" />\n      </Box>\n    )\n  }\n\n  return (\n    <Box sx={{ display: \"flex\", gap: 1.5, flexWrap: \"wrap\" }}>\n      {data.value.map(item => (\n        <ScopeItem\n          key={item.id}\n          icon={item.icon}\n          title={item.label}\n          description={item.description}\n          onClick={() => (item.blocked ? navigate(CONTACT_SALES_ROUTE) : onDatasetClick(item.id))}\n          selected={item.id === selectedDataset}\n          handle={item.handle}\n          isBeta={item.betaLabel ? true : false}\n          isBlocked={item.blocked}\n        />\n      ))}\n    </Box>\n  )\n}\nexport { ScopeCollection }\n"],"names":["ScopeCollection","ScopeItem","icon","title","handle","description","onClick","selected","isBeta","isBlocked","isMobile","useDeviceInfo","baseBackgroundColor","undefined","baseBorderColor","Box","sx","display","flexDirection","position","border","borderColor","flexBasis","cursor","borderRadius","backgroundColor","transition","minHeight","right","top","gap","height","width","fontSize","color","alignItems","justifyContent","flexShrink","px","py","bgcolor","Lock","paddingLeft","paddingRight","paddingBottom","paddingTop","Typography","data-testid","fontWeight","component","data","onDatasetClick","selectedDataset","navigate","useNavigate","type","value","length","flexWrap","map","item","label","blocked","CONTACT_SALES_ROUTE","id","betaLabel","FindNoResults","text"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}