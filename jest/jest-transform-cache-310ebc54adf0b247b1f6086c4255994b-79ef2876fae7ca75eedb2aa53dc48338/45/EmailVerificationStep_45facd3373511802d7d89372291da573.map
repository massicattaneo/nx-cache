{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/SignUp/Steps/EmailVerificationStep.tsx"],"sourcesContent":["import { useForm } from \"react-hook-form\"\nimport { z } from \"zod\"\nimport { useSignUp } from \"@clerk/clerk-react\"\nimport { datadogRum } from \"@datadog/browser-rum\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport {\n  Box,\n  Button,\n  FormHelperText,\n  InputLabel,\n  Link,\n  OutlinedInput,\n  Stack,\n  Typography,\n} from \"@mui/material\"\nimport { adapters } from \"@rp/adapters\"\nimport { displayError } from \"@rp/common/utils\"\nimport { LoginContainer } from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport { MarkEmailReadOutlined } from \"@rp/react/web/mui/icons\"\n\nconst FormSchema = z.object({\n  code: z\n    .string()\n    .length(6, \"The verification code must be 6 characters long\")\n    .regex(/^\\d+$/, \"The value must only contain numbers\"),\n})\n\ntype FormValues = z.infer<typeof FormSchema>\n\nconst EmailVerificationStep = () => {\n  const { enqueueError } = useSnackbar()\n  const { isLoaded, signUp, setActive } = useSignUp()\n  const { isMobile } = useDeviceInfo()\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(FormSchema),\n  })\n\n  async function handleVerification({ code }: FormValues) {\n    if (!isLoaded) {\n      return\n    }\n\n    try {\n      const initialLoginId = signUp.unsafeMetadata?.initialLoginId\n      datadogRum.addAction(\"Create User Custom Action Start\", { initialLoginId })\n      const completeSignUp = await signUp.attemptEmailAddressVerification({ code })\n\n      if (completeSignUp.status === \"complete\") {\n        setActive({ session: completeSignUp.createdSessionId })\n        window.location.replace(adapters.location.getAbsoluteBaseUrl())\n      }\n    } catch (error: unknown) {\n      enqueueError(displayError(error))\n      return\n    }\n  }\n\n  async function handleResendCode() {\n    if (!isLoaded) {\n      return\n    }\n\n    try {\n      // Send the user an email with the verification code\n      await signUp.prepareEmailAddressVerification({\n        strategy: \"email_code\",\n      })\n    } catch (error: unknown) {\n      reportError(error as Error)\n      enqueueError(displayError(error))\n      return\n    }\n  }\n\n  const hasError = form.formState.errors.code !== undefined\n\n  return (\n    <LoginContainer pageTitle={\"\"} title={\"\"}>\n      <Stack my={13} alignItems=\"center\" justifyContent=\"center\" flexGrow={1} width=\"100%\">\n        <Stack alignItems=\"center\" justifyContent=\"center\" flexGrow={1} gap={2} width=\"100%\">\n          <Box\n            p=\"2px\"\n            sx={{ background: \"rgba(5,152,255,0.2)\" }}\n            width={50}\n            height={50}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"content\"\n            borderRadius=\"10%\"\n            color=\"primary.main\"\n          >\n            <MarkEmailReadOutlined style={{ margin: \"0 auto\" }} />\n          </Box>\n          <Typography\n            variant=\"moderno\"\n            sx={{ fontSize: isMobile ? 34 : 48 }}\n            mb={2}\n            textAlign=\"center\"\n          >\n            Please verify your email\n          </Typography>\n          <form\n            key=\"verify-form\"\n            onSubmit={form.handleSubmit(handleVerification)}\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Stack\n              width=\"100%\"\n              maxWidth=\"450px\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              gap={2}\n            >\n              <Stack style={{ width: \"100%\" }} gap=\"11px\">\n                <InputLabel htmlFor=\"code\" sx={{ color: \"text.primary\" }}>\n                  Verification Code\n                </InputLabel>\n                <OutlinedInput\n                  id=\"code\"\n                  placeholder=\"Enter your verification code\"\n                  required\n                  sx={{ width: \"100%\", height: \"42px\" }}\n                  {...form.register(\"code\")}\n                  error={hasError}\n                />\n                {form.formState.errors.code ? (\n                  <FormHelperText error>{form.formState.errors.code.message}</FormHelperText>\n                ) : null}\n                <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\">\n                  Have you not received your email?\n                  <Link>\n                    <Button\n                      sx={{\n                        padding: 0,\n                        textTransform: \"none\",\n                        mb: 0.25,\n                        mx: 0,\n                        minWidth: 0,\n                        \"&:hover\": {\n                          textDecorationLine: \"underline\",\n                          background: \"none\",\n                        },\n                      }}\n                      onClick={() => {\n                        handleResendCode()\n                      }}\n                    >\n                      Resend\n                    </Button>{\" \"}\n                  </Link>\n                </Typography>\n              </Stack>\n              <Button\n                variant=\"contained\"\n                sx={{ fontSize: 16, marginTop: 2, width: \"100%\" }}\n                type=\"submit\"\n                fullWidth\n              >\n                Verify\n              </Button>\n            </Stack>\n          </form>\n        </Stack>\n      </Stack>\n    </LoginContainer>\n  )\n}\n\nexport { EmailVerificationStep }\n"],"names":["EmailVerificationStep","FormSchema","z","object","code","string","length","regex","enqueueError","useSnackbar","isLoaded","signUp","setActive","useSignUp","isMobile","useDeviceInfo","form","useForm","resolver","zodResolver","handleVerification","initialLoginId","unsafeMetadata","datadogRum","addAction","completeSignUp","attemptEmailAddressVerification","status","session","createdSessionId","window","location","replace","adapters","getAbsoluteBaseUrl","error","displayError","handleResendCode","prepareEmailAddressVerification","strategy","reportError","hasError","formState","errors","undefined","LoginContainer","pageTitle","title","Stack","my","alignItems","justifyContent","flexGrow","width","gap","Box","p","sx","background","height","display","borderRadius","color","MarkEmailReadOutlined","style","margin","Typography","variant","fontSize","mb","textAlign","onSubmit","handleSubmit","maxWidth","InputLabel","htmlFor","OutlinedInput","id","placeholder","required","register","FormHelperText","message","Link","Button","padding","textTransform","mx","minWidth","textDecorationLine","onClick","marginTop","type","fullWidth"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgLSA;;;eAAAA;;;;+BAhLe;qBACN;4BACQ;4BACC;sBACC;0BAUrB;0BACkB;uBACI;qCACE;uBACD;2BACF;uBACU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,MAAMC,aAAaC,MAAC,CAACC,MAAM,CAAC;IAC1BC,MAAMF,MAAC,CACJG,MAAM,GACNC,MAAM,CAAC,GAAG,mDACVC,KAAK,CAAC,SAAS;AACpB;AAIA,MAAMP,wBAAwB;IAC5B,MAAM,EAAEQ,YAAY,EAAE,GAAGC,IAAAA,sBAAW;IACpC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAE,GAAGC,IAAAA,qBAAS;IACjD,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAElC,MAAMC,OAAOC,IAAAA,sBAAO,EAAa;QAC/BC,UAAUC,IAAAA,iBAAW,EAAClB;IACxB;IAEA,eAAemB,mBAAmB,EAAEhB,IAAI,EAAc;QACpD,IAAI,CAACM,UAAU;YACb;QACF;QAEA,IAAI;gBACqBC;YAAvB,MAAMU,kBAAiBV,yBAAAA,OAAOW,cAAc,cAArBX,6CAAAA,uBAAuBU,cAAc;YAC5DE,sBAAU,CAACC,SAAS,CAAC,mCAAmC;gBAAEH;YAAe;YACzE,MAAMI,iBAAiB,MAAMd,OAAOe,+BAA+B,CAAC;gBAAEtB;YAAK;YAE3E,IAAIqB,eAAeE,MAAM,KAAK,YAAY;gBACxCf,UAAU;oBAAEgB,SAASH,eAAeI,gBAAgB;gBAAC;gBACrDC,OAAOC,QAAQ,CAACC,OAAO,CAACC,kBAAQ,CAACF,QAAQ,CAACG,kBAAkB;YAC9D;QACF,EAAE,OAAOC,OAAgB;YACvB3B,aAAa4B,IAAAA,mBAAY,EAACD;YAC1B;QACF;IACF;IAEA,eAAeE;QACb,IAAI,CAAC3B,UAAU;YACb;QACF;QAEA,IAAI;YACF,oDAAoD;YACpD,MAAMC,OAAO2B,+BAA+B,CAAC;gBAC3CC,UAAU;YACZ;QACF,EAAE,OAAOJ,OAAgB;YACvBK,YAAYL;YACZ3B,aAAa4B,IAAAA,mBAAY,EAACD;YAC1B;QACF;IACF;IAEA,MAAMM,WAAWzB,KAAK0B,SAAS,CAACC,MAAM,CAACvC,IAAI,KAAKwC;IAEhD,qBACE,qBAACC,mCAAc;QAACC,WAAW;QAAIC,OAAO;kBACpC,cAAA,qBAACC,eAAK;YAACC,IAAI;YAAIC,YAAW;YAASC,gBAAe;YAASC,UAAU;YAAGC,OAAM;sBAC5E,cAAA,sBAACL,eAAK;gBAACE,YAAW;gBAASC,gBAAe;gBAASC,UAAU;gBAAGE,KAAK;gBAAGD,OAAM;;kCAC5E,qBAACE,aAAG;wBACFC,GAAE;wBACFC,IAAI;4BAAEC,YAAY;wBAAsB;wBACxCL,OAAO;wBACPM,QAAQ;wBACRC,SAAQ;wBACRV,YAAW;wBACXC,gBAAe;wBACfU,cAAa;wBACbC,OAAM;kCAEN,cAAA,qBAACC,4BAAqB;4BAACC,OAAO;gCAAEC,QAAQ;4BAAS;;;kCAEnD,qBAACC,oBAAU;wBACTC,SAAQ;wBACRV,IAAI;4BAAEW,UAAUtD,WAAW,KAAK;wBAAG;wBACnCuD,IAAI;wBACJC,WAAU;kCACX;;kCAGD,qBAACtD;wBAECuD,UAAUvD,KAAKwD,YAAY,CAACpD;wBAC5B4C,OAAO;4BACLX,OAAO;4BACPO,SAAS;4BACTV,YAAY;4BACZC,gBAAgB;wBAClB;kCAEA,cAAA,sBAACH,eAAK;4BACJK,OAAM;4BACNoB,UAAS;4BACTvB,YAAW;4BACXC,gBAAe;4BACfG,KAAK;;8CAEL,sBAACN,eAAK;oCAACgB,OAAO;wCAAEX,OAAO;oCAAO;oCAAGC,KAAI;;sDACnC,qBAACoB,oBAAU;4CAACC,SAAQ;4CAAOlB,IAAI;gDAAEK,OAAO;4CAAe;sDAAG;;sDAG1D,qBAACc,uBAAa;4CACZC,IAAG;4CACHC,aAAY;4CACZC,QAAQ;4CACRtB,IAAI;gDAAEJ,OAAO;gDAAQM,QAAQ;4CAAO;2CAChC3C,KAAKgE,QAAQ,CAAC;4CAClB7C,OAAOM;;wCAERzB,KAAK0B,SAAS,CAACC,MAAM,CAACvC,IAAI,iBACzB,qBAAC6E,wBAAc;4CAAC9C,KAAK;sDAAEnB,KAAK0B,SAAS,CAACC,MAAM,CAACvC,IAAI,CAAC8E,OAAO;6CACvD;sDACJ,sBAAChB,oBAAU;4CAACC,SAAQ;4CAAQL,OAAM;4CAAiBQ,WAAU;;gDAAS;8DAEpE,sBAACa,cAAI;;sEACH,qBAACC,gBAAM;4DACL3B,IAAI;gEACF4B,SAAS;gEACTC,eAAe;gEACfjB,IAAI;gEACJkB,IAAI;gEACJC,UAAU;gEACV,WAAW;oEACTC,oBAAoB;oEACpB/B,YAAY;gEACd;4DACF;4DACAgC,SAAS;gEACPrD;4DACF;sEACD;;wDAES;;;;;;;8CAIhB,qBAAC+C,gBAAM;oCACLjB,SAAQ;oCACRV,IAAI;wCAAEW,UAAU;wCAAIuB,WAAW;wCAAGtC,OAAO;oCAAO;oCAChDuC,MAAK;oCACLC,SAAS;8CACV;;;;uBA5DC;;;;;AAqEhB"}