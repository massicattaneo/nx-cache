b1577bd02aa4e31c794ac2ee16d12ce4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useHandleCqsChange", {
    enumerable: true,
    get: function() {
        return useHandleCqsChange;
    }
});
const _providers = require("@rp/react/web/common/providers");
const _utils = require("@rp/react/web/common/vendors/utils");
const _cqsquerycontext = require("@rp/react/web/cqs-query-context");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const useHandleCqsChange = ()=>{
    const { actions: actionsCQS, savedQuery: { saveStatus }, queryId } = (0, _providers.useQueryContext)();
    const handleCQSChange = (item)=>{
        const convertedItem = (0, _cqsquerycontext.convertSuggestionItem)(item);
        // TODO: Fix mess with types, why we transform into filters on Search.tsx, but not here
        if ((0, _cqsquerycontext.isMacroSearchItem)(convertedItem)) {
            convertedItem.value = convertedItem.value.map((item)=>_object_spread_props(_object_spread({}, item), {
                    operation: "in"
                }));
        }
        _utils.tagManagerEvents.queryRefinement({
            action: "add",
            component: "autoSuggest",
            queryId,
            queryType: convertedItem.type,
            savedStatus: saveStatus !== null && saveStatus !== void 0 ? saveStatus : "unsaved"
        });
        if (convertedItem.type === "sentence") {
            return;
        }
        actionsCQS.expression.addItem(convertedItem);
    };
    return handleCQSChange;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL2hvb2tzL3VzZUhhbmRsZUNxc0NoYW5nZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW5oYW5jZWRTdWdnZXN0aW9uIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvc3VnZ2VzdGlvblwiXG5pbXBvcnQgeyB1c2VRdWVyeUNvbnRleHQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IHRhZ01hbmFnZXJFdmVudHMgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vdmVuZG9ycy91dGlsc1wiXG5pbXBvcnQgeyBjb252ZXJ0U3VnZ2VzdGlvbkl0ZW0sIGlzTWFjcm9TZWFyY2hJdGVtIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY3FzLXF1ZXJ5LWNvbnRleHRcIlxuXG5leHBvcnQgY29uc3QgdXNlSGFuZGxlQ3FzQ2hhbmdlID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgYWN0aW9uczogYWN0aW9uc0NRUyxcbiAgICBzYXZlZFF1ZXJ5OiB7IHNhdmVTdGF0dXMgfSxcbiAgICBxdWVyeUlkLFxuICB9ID0gdXNlUXVlcnlDb250ZXh0KClcblxuICBjb25zdCBoYW5kbGVDUVNDaGFuZ2UgPSAoaXRlbTogRW5oYW5jZWRTdWdnZXN0aW9uKSA9PiB7XG4gICAgY29uc3QgY29udmVydGVkSXRlbSA9IGNvbnZlcnRTdWdnZXN0aW9uSXRlbShpdGVtKVxuICAgIC8vIFRPRE86IEZpeCBtZXNzIHdpdGggdHlwZXMsIHdoeSB3ZSB0cmFuc2Zvcm0gaW50byBmaWx0ZXJzIG9uIFNlYXJjaC50c3gsIGJ1dCBub3QgaGVyZVxuICAgIGlmIChpc01hY3JvU2VhcmNoSXRlbShjb252ZXJ0ZWRJdGVtKSkge1xuICAgICAgY29udmVydGVkSXRlbS52YWx1ZSA9IGNvbnZlcnRlZEl0ZW0udmFsdWUubWFwKGl0ZW0gPT4gKHsgLi4uaXRlbSwgb3BlcmF0aW9uOiBcImluXCIgfSkpXG4gICAgfVxuXG4gICAgdGFnTWFuYWdlckV2ZW50cy5xdWVyeVJlZmluZW1lbnQoe1xuICAgICAgYWN0aW9uOiBcImFkZFwiLFxuICAgICAgY29tcG9uZW50OiBcImF1dG9TdWdnZXN0XCIsXG4gICAgICBxdWVyeUlkLFxuICAgICAgcXVlcnlUeXBlOiBjb252ZXJ0ZWRJdGVtLnR5cGUsXG4gICAgICBzYXZlZFN0YXR1czogc2F2ZVN0YXR1cyA/PyBcInVuc2F2ZWRcIixcbiAgICB9KVxuXG4gICAgaWYgKGNvbnZlcnRlZEl0ZW0udHlwZSA9PT0gXCJzZW50ZW5jZVwiKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBhY3Rpb25zQ1FTLmV4cHJlc3Npb24uYWRkSXRlbShjb252ZXJ0ZWRJdGVtKVxuICB9XG5cbiAgcmV0dXJuIGhhbmRsZUNRU0NoYW5nZVxufVxuIl0sIm5hbWVzIjpbInVzZUhhbmRsZUNxc0NoYW5nZSIsImFjdGlvbnMiLCJhY3Rpb25zQ1FTIiwic2F2ZWRRdWVyeSIsInNhdmVTdGF0dXMiLCJxdWVyeUlkIiwidXNlUXVlcnlDb250ZXh0IiwiaGFuZGxlQ1FTQ2hhbmdlIiwiaXRlbSIsImNvbnZlcnRlZEl0ZW0iLCJjb252ZXJ0U3VnZ2VzdGlvbkl0ZW0iLCJpc01hY3JvU2VhcmNoSXRlbSIsInZhbHVlIiwibWFwIiwib3BlcmF0aW9uIiwidGFnTWFuYWdlckV2ZW50cyIsInF1ZXJ5UmVmaW5lbWVudCIsImFjdGlvbiIsImNvbXBvbmVudCIsInF1ZXJ5VHlwZSIsInR5cGUiLCJzYXZlZFN0YXR1cyIsImV4cHJlc3Npb24iLCJhZGRJdGVtIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBS2FBOzs7ZUFBQUE7OzsyQkFKbUI7dUJBQ0M7aUNBQ3dCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVsRCxNQUFNQSxxQkFBcUI7SUFDaEMsTUFBTSxFQUNKQyxTQUFTQyxVQUFVLEVBQ25CQyxZQUFZLEVBQUVDLFVBQVUsRUFBRSxFQUMxQkMsT0FBTyxFQUNSLEdBQUdDLElBQUFBLDBCQUFlO0lBRW5CLE1BQU1DLGtCQUFrQixDQUFDQztRQUN2QixNQUFNQyxnQkFBZ0JDLElBQUFBLHNDQUFxQixFQUFDRjtRQUM1Qyx1RkFBdUY7UUFDdkYsSUFBSUcsSUFBQUEsa0NBQWlCLEVBQUNGLGdCQUFnQjtZQUNwQ0EsY0FBY0csS0FBSyxHQUFHSCxjQUFjRyxLQUFLLENBQUNDLEdBQUcsQ0FBQ0wsQ0FBQUEsT0FBUyx3Q0FBS0E7b0JBQU1NLFdBQVc7O1FBQy9FO1FBRUFDLHVCQUFnQixDQUFDQyxlQUFlLENBQUM7WUFDL0JDLFFBQVE7WUFDUkMsV0FBVztZQUNYYjtZQUNBYyxXQUFXVixjQUFjVyxJQUFJO1lBQzdCQyxhQUFhakIsdUJBQUFBLHdCQUFBQSxhQUFjO1FBQzdCO1FBRUEsSUFBSUssY0FBY1csSUFBSSxLQUFLLFlBQVk7WUFDckM7UUFDRjtRQUVBbEIsV0FBV29CLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDZDtJQUNoQztJQUVBLE9BQU9GO0FBQ1QifQ==