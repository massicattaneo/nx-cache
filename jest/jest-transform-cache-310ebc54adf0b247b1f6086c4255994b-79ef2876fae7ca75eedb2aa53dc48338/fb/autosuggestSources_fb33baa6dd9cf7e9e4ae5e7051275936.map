{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/content/src/__mocks__/autosuggestSources.ts"],"sourcesContent":["import type {\n  AutosuggestSource,\n  AutosuggestSourceDTO,\n  AutosuggestSourcesResponse,\n  AutosuggestSourcesResponseDTO,\n} from \"../content.types\"\n\nconst NUMBER_OF_MOCK_AUTOSUGGEST_SOURCES = 20\n\nconst otherPackages = [\"public\", \"content-package-1\", \"content-package-2\", \"content-package-3\"]\nconst getPackages = (idx: number): Array<string> => {\n  const contentPackages = [\"all\", \"public\"]\n\n  if (idx % 7 === 0) return contentPackages\n\n  for (let i = 0; i < otherPackages.length; i++) {\n    if (idx % i !== 0) {\n      contentPackages.push(otherPackages[i])\n    }\n  }\n\n  return contentPackages\n}\n\nconst mockAutosuggestSourcesDTO: Array<AutosuggestSourceDTO> = new Array(\n  NUMBER_OF_MOCK_AUTOSUGGEST_SOURCES,\n)\n  .fill(null)\n  .map((_, idx) => {\n    return {\n      key: `id-${idx}`,\n      description: `This is the mock description of the content source of index ${idx}`,\n      entityType: \"SRCE\",\n      name: `Source Name ${idx}`,\n      queryType: \"source\",\n      typeDesc: \"Source\",\n      category: \"Sources\",\n      group1: \"News\",\n      group2: \"English\",\n      group3: \"United States\",\n      group4: \"1\",\n      group5: \"2Y\",\n      metadata1: `METADATA1-${idx}`,\n      metadata2: `METADATA1-${idx}`,\n      metadata3: `METADATA1-${idx}`,\n      metadata5: `METADATA1-${idx}`,\n      metadata7: getPackages(idx),\n      rpPackageId: getPackages(idx),\n      sourceCategory: [`category-${idx}`],\n      entitled: idx % 3 !== 0,\n    }\n  })\n\nconst mockAutosuggestSources: Array<AutosuggestSource> = mockAutosuggestSourcesDTO.map(source => ({\n  ...source,\n  id: source.key,\n}))\n\nconst mockAutosuggestSourcesResponseDTO: AutosuggestSourcesResponseDTO = {\n  count: 20,\n  page: 1,\n  results: mockAutosuggestSourcesDTO,\n}\n\nconst mockAutosuggestSourcesResponse: AutosuggestSourcesResponse = {\n  count: 20,\n  page: 1,\n  results: mockAutosuggestSources,\n}\n\nexport {\n  mockAutosuggestSourcesResponseDTO,\n  mockAutosuggestSourcesDTO,\n  mockAutosuggestSourcesResponse,\n  mockAutosuggestSources,\n}\n"],"names":["mockAutosuggestSources","mockAutosuggestSourcesDTO","mockAutosuggestSourcesResponse","mockAutosuggestSourcesResponseDTO","NUMBER_OF_MOCK_AUTOSUGGEST_SOURCES","otherPackages","getPackages","idx","contentPackages","i","length","push","Array","fill","map","_","key","description","entityType","name","queryType","typeDesc","category","group1","group2","group3","group4","group5","metadata1","metadata2","metadata3","metadata5","metadata7","rpPackageId","sourceCategory","entitled","source","id","count","page","results"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA0EEA,sBAAsB;eAAtBA;;IAFAC,yBAAyB;eAAzBA;;IACAC,8BAA8B;eAA9BA;;IAFAC,iCAAiC;eAAjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhEF,MAAMC,qCAAqC;AAE3C,MAAMC,gBAAgB;IAAC;IAAU;IAAqB;IAAqB;CAAoB;AAC/F,MAAMC,cAAc,CAACC;IACnB,MAAMC,kBAAkB;QAAC;QAAO;KAAS;IAEzC,IAAID,MAAM,MAAM,GAAG,OAAOC;IAE1B,IAAK,IAAIC,IAAI,GAAGA,IAAIJ,cAAcK,MAAM,EAAED,IAAK;QAC7C,IAAIF,MAAME,MAAM,GAAG;YACjBD,gBAAgBG,IAAI,CAACN,aAAa,CAACI,EAAE;QACvC;IACF;IAEA,OAAOD;AACT;AAEA,MAAMP,4BAAyD,IAAIW,MACjER,oCAECS,IAAI,CAAC,MACLC,GAAG,CAAC,CAACC,GAAGR;IACP,OAAO;QACLS,KAAK,CAAC,GAAG,EAAET,IAAI,CAAC;QAChBU,aAAa,CAAC,4DAA4D,EAAEV,IAAI,CAAC;QACjFW,YAAY;QACZC,MAAM,CAAC,YAAY,EAAEZ,IAAI,CAAC;QAC1Ba,WAAW;QACXC,UAAU;QACVC,UAAU;QACVC,QAAQ;QACRC,QAAQ;QACRC,QAAQ;QACRC,QAAQ;QACRC,QAAQ;QACRC,WAAW,CAAC,UAAU,EAAErB,IAAI,CAAC;QAC7BsB,WAAW,CAAC,UAAU,EAAEtB,IAAI,CAAC;QAC7BuB,WAAW,CAAC,UAAU,EAAEvB,IAAI,CAAC;QAC7BwB,WAAW,CAAC,UAAU,EAAExB,IAAI,CAAC;QAC7ByB,WAAW1B,YAAYC;QACvB0B,aAAa3B,YAAYC;QACzB2B,gBAAgB;YAAC,CAAC,SAAS,EAAE3B,IAAI,CAAC;SAAC;QACnC4B,UAAU5B,MAAM,MAAM;IACxB;AACF;AAEF,MAAMP,yBAAmDC,0BAA0Ba,GAAG,CAACsB,CAAAA,SAAW,wCAC7FA;QACHC,IAAID,OAAOpB,GAAG;;AAGhB,MAAMb,oCAAmE;IACvEmC,OAAO;IACPC,MAAM;IACNC,SAASvC;AACX;AAEA,MAAMC,iCAA6D;IACjEoC,OAAO;IACPC,MAAM;IACNC,SAASxC;AACX"}