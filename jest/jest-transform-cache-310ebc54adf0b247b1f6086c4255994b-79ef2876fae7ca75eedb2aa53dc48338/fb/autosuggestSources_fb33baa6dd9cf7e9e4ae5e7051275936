6fc0ee7b6b8fed0e2c78dc5b64bdc654
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockAutosuggestSources: function() {
        return mockAutosuggestSources;
    },
    mockAutosuggestSourcesDTO: function() {
        return mockAutosuggestSourcesDTO;
    },
    mockAutosuggestSourcesResponse: function() {
        return mockAutosuggestSourcesResponse;
    },
    mockAutosuggestSourcesResponseDTO: function() {
        return mockAutosuggestSourcesResponseDTO;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const NUMBER_OF_MOCK_AUTOSUGGEST_SOURCES = 20;
const otherPackages = [
    "public",
    "content-package-1",
    "content-package-2",
    "content-package-3"
];
const getPackages = (idx)=>{
    const contentPackages = [
        "all",
        "public"
    ];
    if (idx % 7 === 0) return contentPackages;
    for(let i = 0; i < otherPackages.length; i++){
        if (idx % i !== 0) {
            contentPackages.push(otherPackages[i]);
        }
    }
    return contentPackages;
};
const mockAutosuggestSourcesDTO = new Array(NUMBER_OF_MOCK_AUTOSUGGEST_SOURCES).fill(null).map((_, idx)=>{
    return {
        key: `id-${idx}`,
        description: `This is the mock description of the content source of index ${idx}`,
        entityType: "SRCE",
        name: `Source Name ${idx}`,
        queryType: "source",
        typeDesc: "Source",
        category: "Sources",
        group1: "News",
        group2: "English",
        group3: "United States",
        group4: "1",
        group5: "2Y",
        metadata1: `METADATA1-${idx}`,
        metadata2: `METADATA1-${idx}`,
        metadata3: `METADATA1-${idx}`,
        metadata5: `METADATA1-${idx}`,
        metadata7: getPackages(idx),
        rpPackageId: getPackages(idx),
        sourceCategory: [
            `category-${idx}`
        ],
        entitled: idx % 3 !== 0
    };
});
const mockAutosuggestSources = mockAutosuggestSourcesDTO.map((source)=>_object_spread_props(_object_spread({}, source), {
        id: source.key
    }));
const mockAutosuggestSourcesResponseDTO = {
    count: 20,
    page: 1,
    results: mockAutosuggestSourcesDTO
};
const mockAutosuggestSourcesResponse = {
    count: 20,
    page: 1,
    results: mockAutosuggestSources
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2NvbnRlbnQvc3JjL19fbW9ja3NfXy9hdXRvc3VnZ2VzdFNvdXJjZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBBdXRvc3VnZ2VzdFNvdXJjZSxcbiAgQXV0b3N1Z2dlc3RTb3VyY2VEVE8sXG4gIEF1dG9zdWdnZXN0U291cmNlc1Jlc3BvbnNlLFxuICBBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZURUTyxcbn0gZnJvbSBcIi4uL2NvbnRlbnQudHlwZXNcIlxuXG5jb25zdCBOVU1CRVJfT0ZfTU9DS19BVVRPU1VHR0VTVF9TT1VSQ0VTID0gMjBcblxuY29uc3Qgb3RoZXJQYWNrYWdlcyA9IFtcInB1YmxpY1wiLCBcImNvbnRlbnQtcGFja2FnZS0xXCIsIFwiY29udGVudC1wYWNrYWdlLTJcIiwgXCJjb250ZW50LXBhY2thZ2UtM1wiXVxuY29uc3QgZ2V0UGFja2FnZXMgPSAoaWR4OiBudW1iZXIpOiBBcnJheTxzdHJpbmc+ID0+IHtcbiAgY29uc3QgY29udGVudFBhY2thZ2VzID0gW1wiYWxsXCIsIFwicHVibGljXCJdXG5cbiAgaWYgKGlkeCAlIDcgPT09IDApIHJldHVybiBjb250ZW50UGFja2FnZXNcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG90aGVyUGFja2FnZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaWR4ICUgaSAhPT0gMCkge1xuICAgICAgY29udGVudFBhY2thZ2VzLnB1c2gob3RoZXJQYWNrYWdlc1tpXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29udGVudFBhY2thZ2VzXG59XG5cbmNvbnN0IG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNEVE86IEFycmF5PEF1dG9zdWdnZXN0U291cmNlRFRPPiA9IG5ldyBBcnJheShcbiAgTlVNQkVSX09GX01PQ0tfQVVUT1NVR0dFU1RfU09VUkNFUyxcbilcbiAgLmZpbGwobnVsbClcbiAgLm1hcCgoXywgaWR4KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogYGlkLSR7aWR4fWAsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoaXMgaXMgdGhlIG1vY2sgZGVzY3JpcHRpb24gb2YgdGhlIGNvbnRlbnQgc291cmNlIG9mIGluZGV4ICR7aWR4fWAsXG4gICAgICBlbnRpdHlUeXBlOiBcIlNSQ0VcIixcbiAgICAgIG5hbWU6IGBTb3VyY2UgTmFtZSAke2lkeH1gLFxuICAgICAgcXVlcnlUeXBlOiBcInNvdXJjZVwiLFxuICAgICAgdHlwZURlc2M6IFwiU291cmNlXCIsXG4gICAgICBjYXRlZ29yeTogXCJTb3VyY2VzXCIsXG4gICAgICBncm91cDE6IFwiTmV3c1wiLFxuICAgICAgZ3JvdXAyOiBcIkVuZ2xpc2hcIixcbiAgICAgIGdyb3VwMzogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBncm91cDQ6IFwiMVwiLFxuICAgICAgZ3JvdXA1OiBcIjJZXCIsXG4gICAgICBtZXRhZGF0YTE6IGBNRVRBREFUQTEtJHtpZHh9YCxcbiAgICAgIG1ldGFkYXRhMjogYE1FVEFEQVRBMS0ke2lkeH1gLFxuICAgICAgbWV0YWRhdGEzOiBgTUVUQURBVEExLSR7aWR4fWAsXG4gICAgICBtZXRhZGF0YTU6IGBNRVRBREFUQTEtJHtpZHh9YCxcbiAgICAgIG1ldGFkYXRhNzogZ2V0UGFja2FnZXMoaWR4KSxcbiAgICAgIHJwUGFja2FnZUlkOiBnZXRQYWNrYWdlcyhpZHgpLFxuICAgICAgc291cmNlQ2F0ZWdvcnk6IFtgY2F0ZWdvcnktJHtpZHh9YF0sXG4gICAgICBlbnRpdGxlZDogaWR4ICUgMyAhPT0gMCxcbiAgICB9XG4gIH0pXG5cbmNvbnN0IG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXM6IEFycmF5PEF1dG9zdWdnZXN0U291cmNlPiA9IG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNEVE8ubWFwKHNvdXJjZSA9PiAoe1xuICAuLi5zb3VyY2UsXG4gIGlkOiBzb3VyY2Uua2V5LFxufSkpXG5cbmNvbnN0IG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZURUTzogQXV0b3N1Z2dlc3RTb3VyY2VzUmVzcG9uc2VEVE8gPSB7XG4gIGNvdW50OiAyMCxcbiAgcGFnZTogMSxcbiAgcmVzdWx0czogbW9ja0F1dG9zdWdnZXN0U291cmNlc0RUTyxcbn1cblxuY29uc3QgbW9ja0F1dG9zdWdnZXN0U291cmNlc1Jlc3BvbnNlOiBBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZSA9IHtcbiAgY291bnQ6IDIwLFxuICBwYWdlOiAxLFxuICByZXN1bHRzOiBtb2NrQXV0b3N1Z2dlc3RTb3VyY2VzLFxufVxuXG5leHBvcnQge1xuICBtb2NrQXV0b3N1Z2dlc3RTb3VyY2VzUmVzcG9uc2VEVE8sXG4gIG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNEVE8sXG4gIG1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZSxcbiAgbW9ja0F1dG9zdWdnZXN0U291cmNlcyxcbn1cbiJdLCJuYW1lcyI6WyJtb2NrQXV0b3N1Z2dlc3RTb3VyY2VzIiwibW9ja0F1dG9zdWdnZXN0U291cmNlc0RUTyIsIm1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZSIsIm1vY2tBdXRvc3VnZ2VzdFNvdXJjZXNSZXNwb25zZURUTyIsIk5VTUJFUl9PRl9NT0NLX0FVVE9TVUdHRVNUX1NPVVJDRVMiLCJvdGhlclBhY2thZ2VzIiwiZ2V0UGFja2FnZXMiLCJpZHgiLCJjb250ZW50UGFja2FnZXMiLCJpIiwibGVuZ3RoIiwicHVzaCIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIl8iLCJrZXkiLCJkZXNjcmlwdGlvbiIsImVudGl0eVR5cGUiLCJuYW1lIiwicXVlcnlUeXBlIiwidHlwZURlc2MiLCJjYXRlZ29yeSIsImdyb3VwMSIsImdyb3VwMiIsImdyb3VwMyIsImdyb3VwNCIsImdyb3VwNSIsIm1ldGFkYXRhMSIsIm1ldGFkYXRhMiIsIm1ldGFkYXRhMyIsIm1ldGFkYXRhNSIsIm1ldGFkYXRhNyIsInJwUGFja2FnZUlkIiwic291cmNlQ2F0ZWdvcnkiLCJlbnRpdGxlZCIsInNvdXJjZSIsImlkIiwiY291bnQiLCJwYWdlIiwicmVzdWx0cyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUEwRUVBLHNCQUFzQjtlQUF0QkE7O0lBRkFDLHlCQUF5QjtlQUF6QkE7O0lBQ0FDLDhCQUE4QjtlQUE5QkE7O0lBRkFDLGlDQUFpQztlQUFqQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFoRUYsTUFBTUMscUNBQXFDO0FBRTNDLE1BQU1DLGdCQUFnQjtJQUFDO0lBQVU7SUFBcUI7SUFBcUI7Q0FBb0I7QUFDL0YsTUFBTUMsY0FBYyxDQUFDQztJQUNuQixNQUFNQyxrQkFBa0I7UUFBQztRQUFPO0tBQVM7SUFFekMsSUFBSUQsTUFBTSxNQUFNLEdBQUcsT0FBT0M7SUFFMUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLGNBQWNLLE1BQU0sRUFBRUQsSUFBSztRQUM3QyxJQUFJRixNQUFNRSxNQUFNLEdBQUc7WUFDakJELGdCQUFnQkcsSUFBSSxDQUFDTixhQUFhLENBQUNJLEVBQUU7UUFDdkM7SUFDRjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxNQUFNUCw0QkFBeUQsSUFBSVcsTUFDakVSLG9DQUVDUyxJQUFJLENBQUMsTUFDTEMsR0FBRyxDQUFDLENBQUNDLEdBQUdSO0lBQ1AsT0FBTztRQUNMUyxLQUFLLENBQUMsR0FBRyxFQUFFVCxJQUFJLENBQUM7UUFDaEJVLGFBQWEsQ0FBQyw0REFBNEQsRUFBRVYsSUFBSSxDQUFDO1FBQ2pGVyxZQUFZO1FBQ1pDLE1BQU0sQ0FBQyxZQUFZLEVBQUVaLElBQUksQ0FBQztRQUMxQmEsV0FBVztRQUNYQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFFBQVE7UUFDUkMsUUFBUTtRQUNSQyxRQUFRO1FBQ1JDLFdBQVcsQ0FBQyxVQUFVLEVBQUVyQixJQUFJLENBQUM7UUFDN0JzQixXQUFXLENBQUMsVUFBVSxFQUFFdEIsSUFBSSxDQUFDO1FBQzdCdUIsV0FBVyxDQUFDLFVBQVUsRUFBRXZCLElBQUksQ0FBQztRQUM3QndCLFdBQVcsQ0FBQyxVQUFVLEVBQUV4QixJQUFJLENBQUM7UUFDN0J5QixXQUFXMUIsWUFBWUM7UUFDdkIwQixhQUFhM0IsWUFBWUM7UUFDekIyQixnQkFBZ0I7WUFBQyxDQUFDLFNBQVMsRUFBRTNCLElBQUksQ0FBQztTQUFDO1FBQ25DNEIsVUFBVTVCLE1BQU0sTUFBTTtJQUN4QjtBQUNGO0FBRUYsTUFBTVAseUJBQW1EQywwQkFBMEJhLEdBQUcsQ0FBQ3NCLENBQUFBLFNBQVcsd0NBQzdGQTtRQUNIQyxJQUFJRCxPQUFPcEIsR0FBRzs7QUFHaEIsTUFBTWIsb0NBQW1FO0lBQ3ZFbUMsT0FBTztJQUNQQyxNQUFNO0lBQ05DLFNBQVN2QztBQUNYO0FBRUEsTUFBTUMsaUNBQTZEO0lBQ2pFb0MsT0FBTztJQUNQQyxNQUFNO0lBQ05DLFNBQVN4QztBQUNYIn0=