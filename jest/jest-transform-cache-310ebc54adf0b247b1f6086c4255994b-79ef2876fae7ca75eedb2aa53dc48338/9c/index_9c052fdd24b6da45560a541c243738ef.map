{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-util-chunked/index.js"],"sourcesContent":["/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n"],"names":["push","splice","list","start","remove","items","end","length","chunkStart","parameters","Array","from","unshift","slice"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;CAqBC;;;;;;;;;;;IAqDeA,IAAI;eAAJA;;IApDAC,MAAM;eAANA;;;AAAT,SAASA,OAAOC,IAAI,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK;IAC/C,MAAMC,MAAMJ,KAAKK,MAAM;IACvB,IAAIC,aAAa;IACjB,2BAA2B,GAC3B,IAAIC;IAEJ,gDAAgD;IAChD,IAAIN,QAAQ,GAAG;QACbA,QAAQ,CAACA,QAAQG,MAAM,IAAIA,MAAMH;IACnC,OAAO;QACLA,QAAQA,QAAQG,MAAMA,MAAMH;IAC9B;IACAC,SAASA,SAAS,IAAIA,SAAS;IAE/B,mEAAmE;IACnE,IAAIC,MAAME,MAAM,GAAG,OAAO;QACxBE,aAAaC,MAAMC,IAAI,CAACN;QACxBI,WAAWG,OAAO,CAACT,OAAOC;QAC1B,oCAAoC;QACpCF,KAAKD,MAAM,IAAIQ;IACjB,OAAO;QACL,8CAA8C;QAC9C,IAAIL,QAAQF,KAAKD,MAAM,CAACE,OAAOC;QAE/B,2DAA2D;QAC3D,MAAOI,aAAaH,MAAME,MAAM,CAAE;YAChCE,aAAaJ,MAAMQ,KAAK,CAACL,YAAYA,aAAa;YAClDC,WAAWG,OAAO,CAACT,OAAO;YAC1B,oCAAoC;YACpCD,KAAKD,MAAM,IAAIQ;YACfD,cAAc;YACdL,SAAS;QACX;IACF;AACF;AAkBO,SAASH,KAAKE,IAAI,EAAEG,KAAK;IAC9B,IAAIH,KAAKK,MAAM,GAAG,GAAG;QACnBN,OAAOC,MAAMA,KAAKK,MAAM,EAAE,GAAGF;QAC7B,OAAOH;IACT;IACA,OAAOG;AACT"}