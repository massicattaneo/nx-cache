2077fc7a506240e02014ea338f40087e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useHandleKeyDown", {
    enumerable: true,
    get: function() {
        return useHandleKeyDown;
    }
});
const _react = require("react");
const getOptionIndex = (optionId, options)=>{
    return options.findIndex(({ id })=>id === optionId);
};
const useHandleKeyDown = (options, callbacks)=>{
    const { onArrowDown, onArrowUp, onArrowLeft, onArrowRight, onEnter, onEscape, autoSelectFirstOption } = callbacks;
    const [selectedOption, setSelectedOption] = (0, _react.useState)(null);
    const selected = (0, _react.useMemo)(()=>{
        if (selectedOption) return selectedOption;
        if (!autoSelectFirstOption) return null;
        if (options.length > 0) return options[0].id;
        return null;
    }, [
        autoSelectFirstOption,
        options,
        selectedOption
    ]);
    const handleInputKeydown = (0, _react.useCallback)((event)=>{
        const selectedIndex = selected ? getOptionIndex(selected, options) : null;
        switch(event.key){
            case "ArrowDown":
                var _options_;
                event.preventDefault();
                event.stopPropagation();
                var _options__id;
                // eslint-disable-next-line no-case-declarations
                const idDown = selectedIndex !== null && selectedIndex !== options.length - 1 ? options[selectedIndex + 1].id : (_options__id = (_options_ = options[0]) === null || _options_ === void 0 ? void 0 : _options_.id) !== null && _options__id !== void 0 ? _options__id : null;
                setSelectedOption(idDown);
                onArrowDown(idDown);
                break;
            case "ArrowUp":
                event.preventDefault();
                event.stopPropagation();
                // eslint-disable-next-line no-case-declarations
                const idUp = selectedIndex !== null && selectedIndex !== 0 ? options[selectedIndex - 1].id : options[options.length - 1].id;
                setSelectedOption(idUp);
                onArrowUp(idUp);
                break;
            case "ArrowLeft":
                onArrowLeft === null || onArrowLeft === void 0 ? void 0 : onArrowLeft();
                break;
            case "ArrowRight":
                onArrowRight === null || onArrowRight === void 0 ? void 0 : onArrowRight();
                break;
            case "Escape":
                event.preventDefault();
                event.stopPropagation();
                setSelectedOption(null);
                onEscape();
                break;
            case "Enter":
                event.preventDefault();
                event.stopPropagation();
                setSelectedOption(null);
                onEnter(selectedIndex);
                break;
        }
    }, [
        onArrowDown,
        onArrowUp,
        onArrowLeft,
        onArrowRight,
        onEnter,
        onEscape,
        options,
        selected
    ]);
    return {
        handleInputKeydown,
        selectedOption: selected,
        setSelectedOption
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9zZWFyY2gtYXV0b3N1Z2dlc3QtaW5wdXQvc3JjL2xpYi9VbmlmaWVkU2VhcmNoL3VzZUhhbmRsZUtleURvd24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcblxudHlwZSBDYWxsYmFja3MgPSB7XG4gIGF1dG9TZWxlY3RGaXJzdE9wdGlvbj86IGJvb2xlYW5cbiAgb25BcnJvd0Rvd246IChpZDogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZFxuICBvbkFycm93VXA6IChpZDogc3RyaW5nIHwgbnVsbCkgPT4gdm9pZFxuICBvbkFycm93TGVmdD86ICgpID0+IHZvaWRcbiAgb25BcnJvd1JpZ2h0PzogKCkgPT4gdm9pZFxuICBvbkVzY2FwZTogKCkgPT4gdm9pZFxuICBvbkVudGVyOiAoc2VsZWN0ZWRJbmRleDogbnVtYmVyIHwgbnVsbCkgPT4gdm9pZFxufVxuXG5jb25zdCBnZXRPcHRpb25JbmRleCA9IDxUIGV4dGVuZHMgeyBpZDogc3RyaW5nIH0+KG9wdGlvbklkOiBzdHJpbmcsIG9wdGlvbnM6IEFycmF5PFQ+KSA9PiB7XG4gIHJldHVybiBvcHRpb25zLmZpbmRJbmRleCgoeyBpZCB9KSA9PiBpZCA9PT0gb3B0aW9uSWQpXG59XG5cbmV4cG9ydCBjb25zdCB1c2VIYW5kbGVLZXlEb3duID0gPFQgZXh0ZW5kcyB7IGlkOiBzdHJpbmcgfT4oXG4gIG9wdGlvbnM6IEFycmF5PFQ+LFxuICBjYWxsYmFja3M6IENhbGxiYWNrcyxcbikgPT4ge1xuICBjb25zdCB7XG4gICAgb25BcnJvd0Rvd24sXG4gICAgb25BcnJvd1VwLFxuICAgIG9uQXJyb3dMZWZ0LFxuICAgIG9uQXJyb3dSaWdodCxcbiAgICBvbkVudGVyLFxuICAgIG9uRXNjYXBlLFxuICAgIGF1dG9TZWxlY3RGaXJzdE9wdGlvbixcbiAgfSA9IGNhbGxiYWNrc1xuICBjb25zdCBbc2VsZWN0ZWRPcHRpb24sIHNldFNlbGVjdGVkT3B0aW9uXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG5cbiAgY29uc3Qgc2VsZWN0ZWQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRPcHRpb24pIHJldHVybiBzZWxlY3RlZE9wdGlvblxuICAgIGlmICghYXV0b1NlbGVjdEZpcnN0T3B0aW9uKSByZXR1cm4gbnVsbFxuICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHJldHVybiBvcHRpb25zWzBdLmlkXG4gICAgcmV0dXJuIG51bGxcbiAgfSwgW2F1dG9TZWxlY3RGaXJzdE9wdGlvbiwgb3B0aW9ucywgc2VsZWN0ZWRPcHRpb25dKVxuXG4gIGNvbnN0IGhhbmRsZUlucHV0S2V5ZG93biA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudDogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGVkID8gZ2V0T3B0aW9uSW5kZXgoc2VsZWN0ZWQsIG9wdGlvbnMpIDogbnVsbFxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgY29uc3QgaWREb3duID1cbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggIT09IG51bGwgJiYgc2VsZWN0ZWRJbmRleCAhPT0gb3B0aW9ucy5sZW5ndGggLSAxXG4gICAgICAgICAgICAgID8gb3B0aW9uc1tzZWxlY3RlZEluZGV4ICsgMV0uaWRcbiAgICAgICAgICAgICAgOiBvcHRpb25zWzBdPy5pZCA/PyBudWxsXG4gICAgICAgICAgc2V0U2VsZWN0ZWRPcHRpb24oaWREb3duKVxuICAgICAgICAgIG9uQXJyb3dEb3duKGlkRG93bilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgICAgIGNvbnN0IGlkVXAgPVxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCAhPT0gbnVsbCAmJiBzZWxlY3RlZEluZGV4ICE9PSAwXG4gICAgICAgICAgICAgID8gb3B0aW9uc1tzZWxlY3RlZEluZGV4IC0gMV0uaWRcbiAgICAgICAgICAgICAgOiBvcHRpb25zW29wdGlvbnMubGVuZ3RoIC0gMV0uaWRcbiAgICAgICAgICBzZXRTZWxlY3RlZE9wdGlvbihpZFVwKVxuICAgICAgICAgIG9uQXJyb3dVcChpZFVwKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgICBvbkFycm93TGVmdD8uKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICAgIG9uQXJyb3dSaWdodD8uKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgc2V0U2VsZWN0ZWRPcHRpb24obnVsbClcbiAgICAgICAgICBvbkVzY2FwZSgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgc2V0U2VsZWN0ZWRPcHRpb24obnVsbClcbiAgICAgICAgICBvbkVudGVyKHNlbGVjdGVkSW5kZXgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvbkFycm93RG93biwgb25BcnJvd1VwLCBvbkFycm93TGVmdCwgb25BcnJvd1JpZ2h0LCBvbkVudGVyLCBvbkVzY2FwZSwgb3B0aW9ucywgc2VsZWN0ZWRdLFxuICApXG5cbiAgcmV0dXJuIHsgaGFuZGxlSW5wdXRLZXlkb3duLCBzZWxlY3RlZE9wdGlvbjogc2VsZWN0ZWQsIHNldFNlbGVjdGVkT3B0aW9uIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VIYW5kbGVLZXlEb3duIiwiZ2V0T3B0aW9uSW5kZXgiLCJvcHRpb25JZCIsIm9wdGlvbnMiLCJmaW5kSW5kZXgiLCJpZCIsImNhbGxiYWNrcyIsIm9uQXJyb3dEb3duIiwib25BcnJvd1VwIiwib25BcnJvd0xlZnQiLCJvbkFycm93UmlnaHQiLCJvbkVudGVyIiwib25Fc2NhcGUiLCJhdXRvU2VsZWN0Rmlyc3RPcHRpb24iLCJzZWxlY3RlZE9wdGlvbiIsInNldFNlbGVjdGVkT3B0aW9uIiwidXNlU3RhdGUiLCJzZWxlY3RlZCIsInVzZU1lbW8iLCJsZW5ndGgiLCJoYW5kbGVJbnB1dEtleWRvd24iLCJ1c2VDYWxsYmFjayIsImV2ZW50Iiwic2VsZWN0ZWRJbmRleCIsImtleSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiaWREb3duIiwiaWRVcCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWdCYUE7OztlQUFBQTs7O3VCQWhCa0M7QUFZL0MsTUFBTUMsaUJBQWlCLENBQTJCQyxVQUFrQkM7SUFDbEUsT0FBT0EsUUFBUUMsU0FBUyxDQUFDLENBQUMsRUFBRUMsRUFBRSxFQUFFLEdBQUtBLE9BQU9IO0FBQzlDO0FBRU8sTUFBTUYsbUJBQW1CLENBQzlCRyxTQUNBRztJQUVBLE1BQU0sRUFDSkMsV0FBVyxFQUNYQyxTQUFTLEVBQ1RDLFdBQVcsRUFDWEMsWUFBWSxFQUNaQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMscUJBQXFCLEVBQ3RCLEdBQUdQO0lBQ0osTUFBTSxDQUFDUSxnQkFBZ0JDLGtCQUFrQixHQUFHQyxJQUFBQSxlQUFRLEVBQWdCO0lBRXBFLE1BQU1DLFdBQVdDLElBQUFBLGNBQU8sRUFBQztRQUN2QixJQUFJSixnQkFBZ0IsT0FBT0E7UUFDM0IsSUFBSSxDQUFDRCx1QkFBdUIsT0FBTztRQUNuQyxJQUFJVixRQUFRZ0IsTUFBTSxHQUFHLEdBQUcsT0FBT2hCLE9BQU8sQ0FBQyxFQUFFLENBQUNFLEVBQUU7UUFDNUMsT0FBTztJQUNULEdBQUc7UUFBQ1E7UUFBdUJWO1FBQVNXO0tBQWU7SUFFbkQsTUFBTU0scUJBQXFCQyxJQUFBQSxrQkFBVyxFQUNwQyxDQUFDQztRQUNDLE1BQU1DLGdCQUFnQk4sV0FBV2hCLGVBQWVnQixVQUFVZCxXQUFXO1FBRXJFLE9BQVFtQixNQUFNRSxHQUFHO1lBQ2YsS0FBSztvQkFPR3JCO2dCQU5ObUIsTUFBTUcsY0FBYztnQkFDcEJILE1BQU1JLGVBQWU7b0JBS2Z2QjtnQkFKTixnREFBZ0Q7Z0JBQ2hELE1BQU13QixTQUNKSixrQkFBa0IsUUFBUUEsa0JBQWtCcEIsUUFBUWdCLE1BQU0sR0FBRyxJQUN6RGhCLE9BQU8sQ0FBQ29CLGdCQUFnQixFQUFFLENBQUNsQixFQUFFLEdBQzdCRixDQUFBQSxnQkFBQUEsWUFBQUEsT0FBTyxDQUFDLEVBQUUsY0FBVkEsZ0NBQUFBLFVBQVlFLEVBQUUsY0FBZEYsMEJBQUFBLGVBQWtCO2dCQUN4Qlksa0JBQWtCWTtnQkFDbEJwQixZQUFZb0I7Z0JBQ1o7WUFDRixLQUFLO2dCQUNITCxNQUFNRyxjQUFjO2dCQUNwQkgsTUFBTUksZUFBZTtnQkFDckIsZ0RBQWdEO2dCQUNoRCxNQUFNRSxPQUNKTCxrQkFBa0IsUUFBUUEsa0JBQWtCLElBQ3hDcEIsT0FBTyxDQUFDb0IsZ0JBQWdCLEVBQUUsQ0FBQ2xCLEVBQUUsR0FDN0JGLE9BQU8sQ0FBQ0EsUUFBUWdCLE1BQU0sR0FBRyxFQUFFLENBQUNkLEVBQUU7Z0JBQ3BDVSxrQkFBa0JhO2dCQUNsQnBCLFVBQVVvQjtnQkFDVjtZQUNGLEtBQUs7Z0JBQ0huQix3QkFBQUEsa0NBQUFBO2dCQUNBO1lBQ0YsS0FBSztnQkFDSEMseUJBQUFBLG1DQUFBQTtnQkFDQTtZQUNGLEtBQUs7Z0JBQ0hZLE1BQU1HLGNBQWM7Z0JBQ3BCSCxNQUFNSSxlQUFlO2dCQUNyQlgsa0JBQWtCO2dCQUNsQkg7Z0JBQ0E7WUFDRixLQUFLO2dCQUNIVSxNQUFNRyxjQUFjO2dCQUNwQkgsTUFBTUksZUFBZTtnQkFDckJYLGtCQUFrQjtnQkFDbEJKLFFBQVFZO2dCQUNSO1FBQ0o7SUFDRixHQUNBO1FBQUNoQjtRQUFhQztRQUFXQztRQUFhQztRQUFjQztRQUFTQztRQUFVVDtRQUFTYztLQUFTO0lBRzNGLE9BQU87UUFBRUc7UUFBb0JOLGdCQUFnQkc7UUFBVUY7SUFBa0I7QUFDM0UifQ==