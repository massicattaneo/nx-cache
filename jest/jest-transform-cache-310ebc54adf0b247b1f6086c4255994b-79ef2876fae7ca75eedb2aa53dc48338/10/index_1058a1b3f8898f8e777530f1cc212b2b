fa7f3ef571905196dfb4ad37dd337584
/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Options} Options
 * @typedef {import('micromark-util-types').Value} Value
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    compile: function() {
        return _compile.compile;
    },
    micromark: function() {
        return micromark;
    },
    parse: function() {
        return _parse.parse;
    },
    postprocess: function() {
        return _postprocess.postprocess;
    },
    preprocess: function() {
        return _preprocess.preprocess;
    }
});
const _compile = require("./lib/compile.js");
const _parse = require("./lib/parse.js");
const _postprocess = require("./lib/postprocess.js");
const _preprocess = require("./lib/preprocess.js");
function micromark(value, encoding, options) {
    if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
    }
    return (0, _compile.compile)(options)((0, _postprocess.postprocess)((0, _parse.parse)(options).document().write((0, _preprocess.preprocess)()(value, encoding, true))));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taWNyb21hcmsvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVuY29kaW5nfSBFbmNvZGluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5PcHRpb25zfSBPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlZhbHVlfSBWYWx1ZVxuICovXG5cbmltcG9ydCB7Y29tcGlsZX0gZnJvbSAnLi9saWIvY29tcGlsZS5qcydcbmltcG9ydCB7cGFyc2V9IGZyb20gJy4vbGliL3BhcnNlLmpzJ1xuaW1wb3J0IHtwb3N0cHJvY2Vzc30gZnJvbSAnLi9saWIvcG9zdHByb2Nlc3MuanMnXG5pbXBvcnQge3ByZXByb2Nlc3N9IGZyb20gJy4vbGliL3ByZXByb2Nlc3MuanMnXG5leHBvcnQge2NvbXBpbGV9IGZyb20gJy4vbGliL2NvbXBpbGUuanMnXG5leHBvcnQge3BhcnNlfSBmcm9tICcuL2xpYi9wYXJzZS5qcydcbmV4cG9ydCB7cG9zdHByb2Nlc3N9IGZyb20gJy4vbGliL3Bvc3Rwcm9jZXNzLmpzJ1xuZXhwb3J0IHtwcmVwcm9jZXNzfSBmcm9tICcuL2xpYi9wcmVwcm9jZXNzLmpzJ1xuXG4vKipcbiAqIENvbXBpbGUgbWFya2Rvd24gdG8gSFRNTC5cbiAqXG4gKiA+IE5vdGU6IHdoaWNoIGVuY29kaW5ncyBhcmUgc3VwcG9ydGVkIGRlcGVuZHMgb24gdGhlIGVuZ2luZS5cbiAqID4gRm9yIGluZm8gb24gTm9kZS5qcywgc2VlOlxuICogPiA8aHR0cHM6Ly9ub2RlanMub3JnL2FwaS91dGlsLmh0bWwjd2hhdHdnLXN1cHBvcnRlZC1lbmNvZGluZ3M+LlxuICpcbiAqIEBvdmVybG9hZFxuICogQHBhcmFtIHtWYWx1ZX0gdmFsdWVcbiAqICAgTWFya2Rvd24gdG8gcGFyc2UgKGBzdHJpbmdgIG9yIGBVaW50OEFycmF5YCkuXG4gKiBAcGFyYW0ge0VuY29kaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gZW5jb2RpbmdcbiAqICAgQ2hhcmFjdGVyIGVuY29kaW5nIHRvIHVuZGVyc3RhbmQgYHZhbHVlYCBhcyB3aGVuIGl04oCZcyBhIGBVaW50OEFycmF5YFxuICogICAoYHN0cmluZ2AsIGRlZmF1bHQ6IGAndXRmOCdgKS5cbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgQ29tcGlsZWQgSFRNTC5cbiAqXG4gKiBAb3ZlcmxvYWRcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiAgIE1hcmtkb3duIHRvIHBhcnNlIChgc3RyaW5nYCBvciBgVWludDhBcnJheWApLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBDb21waWxlZCBIVE1MLlxuICpcbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlXG4gKiAgIE1hcmtkb3duIHRvIHBhcnNlIChgc3RyaW5nYCBvciBgVWludDhBcnJheWApLlxuICogQHBhcmFtIHtFbmNvZGluZyB8IE9wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5jb2RpbmddXG4gKiAgIENoYXJhY3RlciBlbmNvZGluZyB0byB1bmRlcnN0YW5kIGB2YWx1ZWAgYXMgd2hlbiBpdOKAmXMgYSBgVWludDhBcnJheWBcbiAqICAgKGBzdHJpbmdgLCBkZWZhdWx0OiBgJ3V0ZjgnYCkuXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIENvbXBpbGVkIEhUTUwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWNyb21hcmsodmFsdWUsIGVuY29kaW5nLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IGVuY29kaW5nXG4gICAgZW5jb2RpbmcgPSB1bmRlZmluZWRcbiAgfVxuICByZXR1cm4gY29tcGlsZShvcHRpb25zKShcbiAgICBwb3N0cHJvY2VzcyhcbiAgICAgIHBhcnNlKG9wdGlvbnMpLmRvY3VtZW50KCkud3JpdGUocHJlcHJvY2VzcygpKHZhbHVlLCBlbmNvZGluZywgdHJ1ZSkpXG4gICAgKVxuICApXG59XG4iXSwibmFtZXMiOlsiY29tcGlsZSIsIm1pY3JvbWFyayIsInBhcnNlIiwicG9zdHByb2Nlc3MiLCJwcmVwcm9jZXNzIiwidmFsdWUiLCJlbmNvZGluZyIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJkb2N1bWVudCIsIndyaXRlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDOzs7Ozs7Ozs7OztJQU1PQSxPQUFPO2VBQVBBLGdCQUFPOztJQXlDQ0MsU0FBUztlQUFUQTs7SUF4Q1JDLEtBQUs7ZUFBTEEsWUFBSzs7SUFDTEMsV0FBVztlQUFYQSx3QkFBVzs7SUFDWEMsVUFBVTtlQUFWQSxzQkFBVTs7O3lCQVBJO3VCQUNGOzZCQUNNOzRCQUNEO0FBMENsQixTQUFTSCxVQUFVSSxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztJQUNoRCxJQUFJLE9BQU9ELGFBQWEsVUFBVTtRQUNoQ0MsVUFBVUQ7UUFDVkEsV0FBV0U7SUFDYjtJQUNBLE9BQU9SLElBQUFBLGdCQUFPLEVBQUNPLFNBQ2JKLElBQUFBLHdCQUFXLEVBQ1RELElBQUFBLFlBQUssRUFBQ0ssU0FBU0UsUUFBUSxHQUFHQyxLQUFLLENBQUNOLElBQUFBLHNCQUFVLElBQUdDLE9BQU9DLFVBQVU7QUFHcEUifQ==