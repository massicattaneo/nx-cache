f6d699c19749b2bcbbcd95c088fc2188
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _handleFileRowClickRowFunc = require("./handleFileRowClickRowFunc");
const mockSelectedFiles = [
    {
        id: "file-id-1",
        shared: true
    },
    {
        id: "file-id-2",
        shared: false
    },
    {
        id: "file-id-3",
        shared: true
    }
];
const mockActions = {
    open: {
        onClick: jest.fn()
    },
    close: {
        onClick: jest.fn()
    },
    view: {
        onClick: jest.fn()
    }
};
const mockOpenChatPane = jest.fn();
let selectedFilesSetterResponse;
const mockSetSelectedFiles = jest.fn().mockImplementation((cb)=>{
    selectedFilesSetterResponse = cb(mockSelectedFiles);
});
const mockItem = {
    id: "123",
    name: "test",
    status: "completed",
    shared: true,
    size: 321,
    date: "2025-01-01",
    type: "pdf",
    sharedWith: [
        "Alice"
    ],
    owner: "Bob"
};
beforeEach(jest.clearAllMocks);
describe("handleFileRowCheckboxChangeFunc", ()=>{
    describe("!isSelected ", ()=>{
        const isSelected = false;
        beforeEach(()=>{
            (0, _handleFileRowClickRowFunc.handleFileRowClickRowFunc)({
                actions: mockActions,
                isSelected,
                isThisFileOpen: true,
                item: mockItem,
                openChatPane: mockOpenChatPane,
                setSelectedFiles: mockSetSelectedFiles,
                shared: true
            });
        });
        it("should call setSelected and setState properly", ()=>{
            expect(mockSetSelectedFiles).toHaveBeenCalled();
            expect(selectedFilesSetterResponse).toStrictEqual([
                {
                    id: "123",
                    shared: true
                },
                ...mockSelectedFiles
            ]);
        });
        it("should call actions.open.onClick", ()=>{
            expect(mockActions.open.onClick).toHaveBeenCalledTimes(1);
            expect(mockActions.open.onClick).toHaveBeenCalledWith(mockItem);
        });
        it("should not call actions.close.onClick", ()=>{
            expect(mockActions.close.onClick).not.toHaveBeenCalled();
        });
        it("should not call openChatPane", ()=>{
            expect(mockOpenChatPane).not.toHaveBeenCalled();
        });
    });
    describe("isSelected && isFileOpen", ()=>{
        const isSelected = true;
        const isThisFileOpen = true;
        beforeEach(()=>{
            (0, _handleFileRowClickRowFunc.handleFileRowClickRowFunc)({
                actions: mockActions,
                isSelected,
                isThisFileOpen,
                item: mockItem,
                openChatPane: mockOpenChatPane,
                setSelectedFiles: mockSetSelectedFiles,
                shared: true
            });
        });
        it("should not call setSelected", ()=>{
            expect(mockSetSelectedFiles).not.toHaveBeenCalled();
        });
        it("should call actions.close.onClick", ()=>{
            expect(mockActions.close.onClick).toHaveBeenCalledTimes(1);
        });
        it("should not call actions.open.onClick", ()=>{
            expect(mockActions.open.onClick).not.toHaveBeenCalled();
        });
        it("should not call openChatPane", ()=>{
            expect(mockOpenChatPane).not.toHaveBeenCalled();
        });
    });
    describe("isSelected && !isFileOpen", ()=>{
        const isSelected = true;
        const isThisFileOpen = false;
        beforeEach(()=>{
            (0, _handleFileRowClickRowFunc.handleFileRowClickRowFunc)({
                actions: mockActions,
                isSelected,
                isThisFileOpen,
                item: mockItem,
                openChatPane: mockOpenChatPane,
                setSelectedFiles: mockSetSelectedFiles,
                shared: true
            });
        });
        it("should not call setSelected", ()=>{
            expect(mockSetSelectedFiles).not.toHaveBeenCalled();
        });
        it("should not call actions.close.onClick", ()=>{
            expect(mockActions.close.onClick).not.toHaveBeenCalled();
        });
        it("should call actions.open.onClick with the correct arguments", ()=>{
            expect(mockActions.open.onClick).toHaveBeenCalledTimes(1);
            expect(mockActions.open.onClick).toHaveBeenCalledWith(mockItem);
        });
        it("should call openChatPane", ()=>{
            expect(mockOpenChatPane).toHaveBeenCalledTimes(1);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,