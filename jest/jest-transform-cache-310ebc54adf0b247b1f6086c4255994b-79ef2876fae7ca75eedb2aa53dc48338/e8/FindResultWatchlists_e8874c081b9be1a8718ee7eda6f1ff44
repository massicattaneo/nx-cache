8408fe530944b892ddb453ee04413e9e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FindResultWatchlists", {
    enumerable: true,
    get: function() {
        return FindResultWatchlists;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _NewWatchlistButtonContainer = require("../NewWatchlistButtonContainer");
const _FindResultWatchlistsItem = require("./FindResultWatchlistsItem");
const COLUMNS_WIDTH = [
    "calc(50%)",
    "calc(50% - 322px)",
    "250px"
];
const FindResultWatchlists = ({ filterTerm })=>{
    const { data = [], isLoading: isLoadingQueries } = (0, _watchlist.useAllWatchlists)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const filteredResults = (0, _react.useMemo)(()=>data.filter((item)=>item.name.toLowerCase().includes(filterTerm.toLowerCase())).sort((watchlistA, watchlistB)=>watchlistA.name.localeCompare(watchlistB.name)), [
        filterTerm,
        data
    ]);
    if (isLoadingQueries) return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {});
    if (filteredResults.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewWatchlistButtonContainer.NewWatchlistButtonContainer, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.FindNoResults, {})
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_NewWatchlistButtonContainer.NewWatchlistButtonContainer, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
            sx: {
                width: 1
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    sx: {
                        my: 2
                    },
                    children: filteredResults.length === 1 ? "There is 1 result matching your search." : `There are ${filteredResults.length} results matching your search.`
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
                    sx: {
                        backgroundColor: "transparent",
                        height: isMobile ? 0 : 35
                    },
                    columnsWidth: COLUMNS_WIDTH,
                    columns: [
                        {
                            node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubHeadCell, {
                                label: "NAME"
                            })
                        },
                        {
                            node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubHeadCell, {
                                label: "OWNER"
                            })
                        },
                        {
                            node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                                children: "Â "
                            })
                        }
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                    rootMargin: "0px 0px 200px 0px",
                    initialElements: 20,
                    items: filteredResults,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_FindResultWatchlistsItem.FindResultWatchlistsItem, {
                            filterTerm: filterTerm,
                            item: item,
                            columnsWidth: COLUMNS_WIDTH
                        })
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL2NvbXBvbmVudHMvSHViL1dhdGNobGlzdHMvRmluZFJlc3VsdFdhdGNobGlzdHMvRmluZFJlc3VsdFdhdGNobGlzdHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgdXNlQWxsV2F0Y2hsaXN0cyB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3dhdGNobGlzdFwiXG5pbXBvcnQgeyBMb2FkaW5nU3Bpbm5lciB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgRmluZE5vUmVzdWx0cywgSHViSGVhZENlbGwsIEh1YlRhYmxlUm93IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IEluZmluaXRlTGlzdCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyB1c2VEZXZpY2VJbmZvIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IEJveCwgVHlwb2dyYXBoeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IE5ld1dhdGNobGlzdEJ1dHRvbkNvbnRhaW5lciB9IGZyb20gXCIuLi9OZXdXYXRjaGxpc3RCdXR0b25Db250YWluZXJcIlxuaW1wb3J0IHsgRmluZFJlc3VsdFdhdGNobGlzdHNJdGVtIH0gZnJvbSBcIi4vRmluZFJlc3VsdFdhdGNobGlzdHNJdGVtXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgZmlsdGVyVGVybTogc3RyaW5nXG59XG5cbmNvbnN0IENPTFVNTlNfV0lEVEggPSBbXCJjYWxjKDUwJSlcIiwgXCJjYWxjKDUwJSAtIDMyMnB4KVwiLCBcIjI1MHB4XCJdXG5cbmNvbnN0IEZpbmRSZXN1bHRXYXRjaGxpc3RzID0gKHsgZmlsdGVyVGVybSB9OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGRhdGEgPSBbXSwgaXNMb2FkaW5nOiBpc0xvYWRpbmdRdWVyaWVzIH0gPSB1c2VBbGxXYXRjaGxpc3RzKClcbiAgY29uc3QgeyBpc01vYmlsZSB9ID0gdXNlRGV2aWNlSW5mbygpXG5cbiAgY29uc3QgZmlsdGVyZWRSZXN1bHRzID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgZGF0YVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyVGVybS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLnNvcnQoKHdhdGNobGlzdEEsIHdhdGNobGlzdEIpID0+IHdhdGNobGlzdEEubmFtZS5sb2NhbGVDb21wYXJlKHdhdGNobGlzdEIubmFtZSkpLFxuICAgIFtmaWx0ZXJUZXJtLCBkYXRhXSxcbiAgKVxuXG4gIGlmIChpc0xvYWRpbmdRdWVyaWVzKSByZXR1cm4gPExvYWRpbmdTcGlubmVyIC8+XG5cbiAgaWYgKGZpbHRlcmVkUmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE5ld1dhdGNobGlzdEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgPEZpbmROb1Jlc3VsdHMgLz5cbiAgICAgIDwvTmV3V2F0Y2hsaXN0QnV0dG9uQ29udGFpbmVyPlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE5ld1dhdGNobGlzdEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgIDxCb3ggc3g9e3sgd2lkdGg6IDEgfX0+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IG15OiAyIH19PlxuICAgICAgICAgIHtmaWx0ZXJlZFJlc3VsdHMubGVuZ3RoID09PSAxXG4gICAgICAgICAgICA/IFwiVGhlcmUgaXMgMSByZXN1bHQgbWF0Y2hpbmcgeW91ciBzZWFyY2guXCJcbiAgICAgICAgICAgIDogYFRoZXJlIGFyZSAke2ZpbHRlcmVkUmVzdWx0cy5sZW5ndGh9IHJlc3VsdHMgbWF0Y2hpbmcgeW91ciBzZWFyY2guYH1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8SHViVGFibGVSb3dcbiAgICAgICAgICBzeD17eyBiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIiwgaGVpZ2h0OiBpc01vYmlsZSA/IDAgOiAzNSB9fVxuICAgICAgICAgIGNvbHVtbnNXaWR0aD17Q09MVU1OU19XSURUSH1cbiAgICAgICAgICBjb2x1bW5zPXtbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGU6IDxIdWJIZWFkQ2VsbCBsYWJlbD1cIk5BTUVcIiAvPixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGU6IDxIdWJIZWFkQ2VsbCBsYWJlbD1cIk9XTkVSXCIgLz4sXG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB7IG5vZGU6IDw+Jm5ic3A7PC8+IH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgLz5cbiAgICAgICAgPEluZmluaXRlTGlzdFxuICAgICAgICAgIHJvb3RNYXJnaW49e1wiMHB4IDBweCAyMDBweCAwcHhcIn1cbiAgICAgICAgICBpbml0aWFsRWxlbWVudHM9ezIwfVxuICAgICAgICAgIGl0ZW1zPXtmaWx0ZXJlZFJlc3VsdHN9XG4gICAgICAgICAgcmVuZGVySXRlbT17aXRlbSA9PiAoXG4gICAgICAgICAgICA8RmluZFJlc3VsdFdhdGNobGlzdHNJdGVtXG4gICAgICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAgICAgIGNvbHVtbnNXaWR0aD17Q09MVU1OU19XSURUSH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgIDwvQm94PlxuICAgIDwvTmV3V2F0Y2hsaXN0QnV0dG9uQ29udGFpbmVyPlxuICApXG59XG5cbmV4cG9ydCB7IEZpbmRSZXN1bHRXYXRjaGxpc3RzIH1cbiJdLCJuYW1lcyI6WyJGaW5kUmVzdWx0V2F0Y2hsaXN0cyIsIkNPTFVNTlNfV0lEVEgiLCJmaWx0ZXJUZXJtIiwiZGF0YSIsImlzTG9hZGluZyIsImlzTG9hZGluZ1F1ZXJpZXMiLCJ1c2VBbGxXYXRjaGxpc3RzIiwiaXNNb2JpbGUiLCJ1c2VEZXZpY2VJbmZvIiwiZmlsdGVyZWRSZXN1bHRzIiwidXNlTWVtbyIsImZpbHRlciIsIml0ZW0iLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInNvcnQiLCJ3YXRjaGxpc3RBIiwid2F0Y2hsaXN0QiIsImxvY2FsZUNvbXBhcmUiLCJMb2FkaW5nU3Bpbm5lciIsImxlbmd0aCIsIk5ld1dhdGNobGlzdEJ1dHRvbkNvbnRhaW5lciIsIkZpbmROb1Jlc3VsdHMiLCJCb3giLCJzeCIsIndpZHRoIiwiVHlwb2dyYXBoeSIsIm15IiwiSHViVGFibGVSb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJoZWlnaHQiLCJjb2x1bW5zV2lkdGgiLCJjb2x1bW5zIiwibm9kZSIsIkh1YkhlYWRDZWxsIiwibGFiZWwiLCJJbmZpbml0ZUxpc3QiLCJyb290TWFyZ2luIiwiaW5pdGlhbEVsZW1lbnRzIiwiaXRlbXMiLCJyZW5kZXJJdGVtIiwiRmluZFJlc3VsdFdhdGNobGlzdHNJdGVtIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTZFU0E7OztlQUFBQTs7Ozt1QkE3RWU7MkJBQ1M7Z0NBQ0Y7cUNBQ3lCO3VCQUUxQjtzQkFDRTs2Q0FDWTswQ0FDSDtBQU16QyxNQUFNQyxnQkFBZ0I7SUFBQztJQUFhO0lBQXFCO0NBQVE7QUFFakUsTUFBTUQsdUJBQXVCLENBQUMsRUFBRUUsVUFBVSxFQUFTO0lBQ2pELE1BQU0sRUFBRUMsT0FBTyxFQUFFLEVBQUVDLFdBQVdDLGdCQUFnQixFQUFFLEdBQUdDLElBQUFBLDJCQUFnQjtJQUNuRSxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHQyxJQUFBQSxvQkFBYTtJQUVsQyxNQUFNQyxrQkFBa0JDLElBQUFBLGNBQU8sRUFDN0IsSUFDRVAsS0FDR1EsTUFBTSxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxJQUFJLENBQUNDLFdBQVcsR0FBR0MsUUFBUSxDQUFDYixXQUFXWSxXQUFXLEtBQ3RFRSxJQUFJLENBQUMsQ0FBQ0MsWUFBWUMsYUFBZUQsV0FBV0osSUFBSSxDQUFDTSxhQUFhLENBQUNELFdBQVdMLElBQUksSUFDbkY7UUFBQ1g7UUFBWUM7S0FBSztJQUdwQixJQUFJRSxrQkFBa0IscUJBQU8scUJBQUNlLDhCQUFjO0lBRTVDLElBQUlYLGdCQUFnQlksTUFBTSxLQUFLLEdBQUc7UUFDaEMscUJBQ0UscUJBQUNDLHdEQUEyQjtzQkFDMUIsY0FBQSxxQkFBQ0Msa0NBQWE7O0lBR3BCO0lBRUEscUJBQ0UscUJBQUNELHdEQUEyQjtrQkFDMUIsY0FBQSxzQkFBQ0UsU0FBRztZQUFDQyxJQUFJO2dCQUFFQyxPQUFPO1lBQUU7OzhCQUNsQixxQkFBQ0MsZ0JBQVU7b0JBQUNGLElBQUk7d0JBQUVHLElBQUk7b0JBQUU7OEJBQ3JCbkIsZ0JBQWdCWSxNQUFNLEtBQUssSUFDeEIsNENBQ0EsQ0FBQyxVQUFVLEVBQUVaLGdCQUFnQlksTUFBTSxDQUFDLDhCQUE4QixDQUFDOzs4QkFFekUscUJBQUNRLGdDQUFXO29CQUNWSixJQUFJO3dCQUFFSyxpQkFBaUI7d0JBQWVDLFFBQVF4QixXQUFXLElBQUk7b0JBQUc7b0JBQ2hFeUIsY0FBYy9CO29CQUNkZ0MsU0FBUzt3QkFDUDs0QkFDRUMsb0JBQU0scUJBQUNDLGdDQUFXO2dDQUFDQyxPQUFNOzt3QkFDM0I7d0JBQ0E7NEJBQ0VGLG9CQUFNLHFCQUFDQyxnQ0FBVztnQ0FBQ0MsT0FBTTs7d0JBQzNCO3dCQUVBOzRCQUFFRixvQkFBTTswQ0FBRTs7d0JBQVU7cUJBQ3JCOzs4QkFFSCxxQkFBQ0csaUNBQVk7b0JBQ1hDLFlBQVk7b0JBQ1pDLGlCQUFpQjtvQkFDakJDLE9BQU8vQjtvQkFDUGdDLFlBQVk3QixDQUFBQSxxQkFDVixxQkFBQzhCLGtEQUF3Qjs0QkFDdkJ4QyxZQUFZQTs0QkFDWlUsTUFBTUE7NEJBQ05vQixjQUFjL0I7Ozs7OztBQU81QiJ9