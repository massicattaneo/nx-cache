26ca2949b30d6cac0793fc3b04b9002d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AutoCompleteMobile", {
    enumerable: true,
    get: function() {
        return AutoCompleteMobile;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _AutosuggestInput = require("./AutosuggestInput");
const _constants = require("./constants");
const AutoCompleteMobile = ({ onClose, onChange, selectedItems, searchActions, excludeQueryTypes, placeholder = _constants.placeholderText, forceShowRecentSearches })=>{
    const { isOpen, setIsOpen } = searchActions;
    // Make really sure that the overflow is back
    (0, _react.useEffect)(()=>{
        return ()=>{
            document.body.style.removeProperty("overflow");
        };
    }, []);
    const handleClose = ()=>{
        setIsOpen(false);
        document.body.style.removeProperty("overflow");
        onClose === null || onClose === void 0 ? void 0 : onClose();
    };
    // We need to close manually the popover after the change
    const handleChange = async (suggestion)=>{
        await onChange(suggestion);
        handleClose();
    };
    return isOpen ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            backgroundColor: "surface.main",
            position: "fixed",
            width: "100%",
            top: 0,
            zIndex: 1051,
            height: "100vh",
            left: 0
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AutosuggestInput.AutosuggestInput, {
            forceShowRecentSearches: forceShowRecentSearches,
            placeholder: placeholder,
            onChange: handleChange,
            selectedItems: selectedItems,
            excludeQueryTypes: excludeQueryTypes,
            onSearchClick: handleClose,
            variant: "search",
            onClose: handleClose,
            keepOpen: true
        })
    }) : null;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9zZWFyY2gtYXV0b3N1Z2dlc3QtaW5wdXQvc3JjL2xpYi9VbmlmaWVkU2VhcmNoL0F1dG9Db21wbGV0ZU1vYmlsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEVuaGFuY2VkU3VnZ2VzdGlvbiB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3N1Z2dlc3Rpb25cIlxuaW1wb3J0IHsgQm94IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgQXV0b3N1Z2dlc3RJbnB1dCB9IGZyb20gXCIuL0F1dG9zdWdnZXN0SW5wdXRcIlxuaW1wb3J0IHsgcGxhY2Vob2xkZXJUZXh0IH0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IHR5cGUgQXV0b2NvbXBsZXRlTW9iaWxlUHJvcHMgPSB7XG4gIG9uQ2hhbmdlOiAoaXRlbTogRW5oYW5jZWRTdWdnZXN0aW9uKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZFxuICBzaXplPzogXCJtZWRpdW1cIiB8IFwic21hbGxcIlxuICBzZWxlY3RlZEl0ZW1zPzogQXJyYXk8c3RyaW5nPlxuICBzZWFyY2hBY3Rpb25zOiB7XG4gICAgaXNPcGVuOiBib29sZWFuXG4gICAgc2V0SXNPcGVuOiAoc2V0T3BlbjogYm9vbGVhbikgPT4gdm9pZFxuICB9XG4gIG9mZnNldD86IG51bWJlclxuICBwbGFjZWhvbGRlcj86IHN0cmluZ1xuICBvbkNsb3NlPzogKCkgPT4gdm9pZFxuICBleGNsdWRlUXVlcnlUeXBlcz86IEFycmF5PHN0cmluZz5cbiAgZm9yY2VTaG93UmVjZW50U2VhcmNoZXM/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBBdXRvQ29tcGxldGVNb2JpbGUgPSAoe1xuICBvbkNsb3NlLFxuICBvbkNoYW5nZSxcbiAgc2VsZWN0ZWRJdGVtcyxcbiAgc2VhcmNoQWN0aW9ucyxcbiAgZXhjbHVkZVF1ZXJ5VHlwZXMsXG4gIHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXJUZXh0LFxuICBmb3JjZVNob3dSZWNlbnRTZWFyY2hlcyxcbn06IEF1dG9jb21wbGV0ZU1vYmlsZVByb3BzKSA9PiB7XG4gIGNvbnN0IHsgaXNPcGVuLCBzZXRJc09wZW4gfSA9IHNlYXJjaEFjdGlvbnNcblxuICAvLyBNYWtlIHJlYWxseSBzdXJlIHRoYXQgdGhlIG92ZXJmbG93IGlzIGJhY2tcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm92ZXJmbG93XCIpXG4gICAgfVxuICB9LCBbXSlcblxuICBjb25zdCBoYW5kbGVDbG9zZSA9ICgpID0+IHtcbiAgICBzZXRJc09wZW4oZmFsc2UpXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcIm92ZXJmbG93XCIpXG4gICAgb25DbG9zZT8uKClcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gY2xvc2UgbWFudWFsbHkgdGhlIHBvcG92ZXIgYWZ0ZXIgdGhlIGNoYW5nZVxuICBjb25zdCBoYW5kbGVDaGFuZ2U6IHR5cGVvZiBvbkNoYW5nZSA9IGFzeW5jIHN1Z2dlc3Rpb24gPT4ge1xuICAgIGF3YWl0IG9uQ2hhbmdlKHN1Z2dlc3Rpb24pXG4gICAgaGFuZGxlQ2xvc2UoKVxuICB9XG5cbiAgcmV0dXJuIGlzT3BlbiA/IChcbiAgICA8Qm94XG4gICAgICBzeD17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwic3VyZmFjZS5tYWluXCIsXG4gICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICB6SW5kZXg6IDEwNTEsXG4gICAgICAgIGhlaWdodDogXCIxMDB2aFwiLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8QXV0b3N1Z2dlc3RJbnB1dFxuICAgICAgICBmb3JjZVNob3dSZWNlbnRTZWFyY2hlcz17Zm9yY2VTaG93UmVjZW50U2VhcmNoZXN9XG4gICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgc2VsZWN0ZWRJdGVtcz17c2VsZWN0ZWRJdGVtc31cbiAgICAgICAgZXhjbHVkZVF1ZXJ5VHlwZXM9e2V4Y2x1ZGVRdWVyeVR5cGVzfVxuICAgICAgICBvblNlYXJjaENsaWNrPXtoYW5kbGVDbG9zZX1cbiAgICAgICAgdmFyaWFudD1cInNlYXJjaFwiXG4gICAgICAgIG9uQ2xvc2U9e2hhbmRsZUNsb3NlfVxuICAgICAgICBrZWVwT3Blbj17dHJ1ZX1cbiAgICAgIC8+XG4gICAgPC9Cb3g+XG4gICkgOiBudWxsXG59XG4iXSwibmFtZXMiOlsiQXV0b0NvbXBsZXRlTW9iaWxlIiwib25DbG9zZSIsIm9uQ2hhbmdlIiwic2VsZWN0ZWRJdGVtcyIsInNlYXJjaEFjdGlvbnMiLCJleGNsdWRlUXVlcnlUeXBlcyIsInBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJUZXh0IiwiZm9yY2VTaG93UmVjZW50U2VhcmNoZXMiLCJpc09wZW4iLCJzZXRJc09wZW4iLCJ1c2VFZmZlY3QiLCJkb2N1bWVudCIsImJvZHkiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5IiwiaGFuZGxlQ2xvc2UiLCJoYW5kbGVDaGFuZ2UiLCJzdWdnZXN0aW9uIiwiQm94Iiwic3giLCJiYWNrZ3JvdW5kQ29sb3IiLCJwb3NpdGlvbiIsIndpZHRoIiwidG9wIiwiekluZGV4IiwiaGVpZ2h0IiwibGVmdCIsIkF1dG9zdWdnZXN0SW5wdXQiLCJvblNlYXJjaENsaWNrIiwidmFyaWFudCIsImtlZXBPcGVuIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBcUJhQTs7O2VBQUFBOzs7O3VCQXJCYTtzQkFFTjtrQ0FDYTsyQkFDRDtBQWlCekIsTUFBTUEscUJBQXFCLENBQUMsRUFDakNDLE9BQU8sRUFDUEMsUUFBUSxFQUNSQyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsaUJBQWlCLEVBQ2pCQyxjQUFjQywwQkFBZSxFQUM3QkMsdUJBQXVCLEVBQ0M7SUFDeEIsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHTjtJQUU5Qiw2Q0FBNkM7SUFDN0NPLElBQUFBLGdCQUFTLEVBQUM7UUFDUixPQUFPO1lBQ0xDLFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxjQUFjLENBQUM7UUFDckM7SUFDRixHQUFHLEVBQUU7SUFFTCxNQUFNQyxjQUFjO1FBQ2xCTixVQUFVO1FBQ1ZFLFNBQVNDLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxjQUFjLENBQUM7UUFDbkNkLG9CQUFBQSw4QkFBQUE7SUFDRjtJQUVBLHlEQUF5RDtJQUN6RCxNQUFNZ0IsZUFBZ0MsT0FBTUM7UUFDMUMsTUFBTWhCLFNBQVNnQjtRQUNmRjtJQUNGO0lBRUEsT0FBT1AsdUJBQ0wscUJBQUNVLFNBQUc7UUFDRkMsSUFBSTtZQUNGQyxpQkFBaUI7WUFDakJDLFVBQVU7WUFDVkMsT0FBTztZQUNQQyxLQUFLO1lBQ0xDLFFBQVE7WUFDUkMsUUFBUTtZQUNSQyxNQUFNO1FBQ1I7a0JBRUEsY0FBQSxxQkFBQ0Msa0NBQWdCO1lBQ2ZwQix5QkFBeUJBO1lBQ3pCRixhQUFhQTtZQUNiSixVQUFVZTtZQUNWZCxlQUFlQTtZQUNmRSxtQkFBbUJBO1lBQ25Cd0IsZUFBZWI7WUFDZmMsU0FBUTtZQUNSN0IsU0FBU2U7WUFDVGUsVUFBVTs7U0FHWjtBQUNOIn0=