57eab1ce553d82e087a21a4a3bcbd71d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "trpcTextAnalyticsApiRouter", {
    enumerable: true,
    get: function() {
        return trpcTextAnalyticsApiRouter;
    }
});
const _zod = require("zod");
const _server = require("@trpc/server");
const _database = require("../../database");
const _generateRpJson = require("../../database/generators/generateRpJson");
const _trpcMocks = require("../../msw/trpcMocks");
const _textanalyticsapiprocedure = require("./text-analytics-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const UPLOAD_PATH = "/1.0/files-upload/:id";
const trpcTextAnalyticsApiRouter = _textanalyticsapiprocedure.trpcTextAnalyticsApiServer.router({
    files: {
        get: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "GET",
                path: "/1.0/files/"
            }
        }).input(_zod.z.object({
            status: _zod.z.string().optional(),
            shared: _zod.z.boolean().optional(),
            file_name: _zod.z.string().optional()
        })).query(async ({ ctx, input })=>{
            const shared = input.shared === true;
            if (input.status === "PROCESSING") return {
                results: []
            };
            const results = (await ctx.db.collection("files").find((item)=>{
                var _item_file_shared_with;
                const sharedWith = (_item_file_shared_with = item.file.shared_with) !== null && _item_file_shared_with !== void 0 ? _item_file_shared_with : [];
                if (!shared) return item.file.owner === _database.userOwner.ownerUserId;
                return sharedWith.includes(_database.userOwner.organization.id) && item.file.owner !== _database.userOwner.ownerUserId;
            })).filter((item)=>{
                var _input_file_name;
                var _input_file_name_toLocaleLowerCase;
                return item.file.file_name.toLocaleLowerCase().includes((_input_file_name_toLocaleLowerCase = (_input_file_name = input.file_name) === null || _input_file_name === void 0 ? void 0 : _input_file_name.toLocaleLowerCase()) !== null && _input_file_name_toLocaleLowerCase !== void 0 ? _input_file_name_toLocaleLowerCase : "");
            }).map((item)=>item.file);
            return {
                results
            };
        }),
        post: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "POST",
                path: "/1.0/files"
            }
        }).input(_zod.z.object({
            file_name: _zod.z.string()
        })).mutation(async ({ ctx, input })=>{
            const file = (0, _database.generateFile)({
                name: input.file_name
            });
            await ctx.db.collection("files").insertOne(file);
            const Location = `${ctx.request.url.origin}${UPLOAD_PATH.replace(":id", file.id)}`;
            return {
                Location,
                file_id: file.id
            };
        }),
        patch: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "PATCH",
                path: "/1.0/files"
            }
        }).input(_zod.z.object({
            action: _zod.z.string(),
            files: _zod.z.array(_zod.z.string())
        })).mutation(async ({ ctx, input })=>{
            if (input.action === "DELETE") {
                await Promise.all(input.files.map((id)=>ctx.db.collection("files").deleteOne({
                        id
                    })));
            }
            const data = {
                metadata: {
                    total: input.files.length,
                    success: input.files.length
                }
            };
            return {
                message: "Accepted",
                data
            };
        }),
        patchMetadata: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "PATCH",
                path: "/1.0/files/:id/metadata"
            }
        }).input(_zod.z.object({
            shared_with: _zod.z.array(_zod.z.string()),
            id: _zod.z.string()
        })).mutation(async ({ ctx, input })=>{
            const file = await ctx.db.collection("files").updateOne({
                id: input.id
            }, (prev)=>_object_spread_props(_object_spread({}, prev), {
                    file: _object_spread_props(_object_spread({}, prev.file), {
                        shared_with: input.shared_with
                    })
                }));
            return file === null || file === void 0 ? void 0 : file.file;
        }),
        putUpload: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "PUT",
                path: UPLOAD_PATH
            }
        }).input(_zod.z.object({
            id: _zod.z.string()
        })).mutation(async ({ ctx })=>{
            const cqsItems = await ctx.db.collection("cqs").find();
            const id = ctx.request.url.pathname.split("/").pop() || "";
            const file = await ctx.db.collection("files").updateOne({
                id
            }, (prev)=>{
                const content = ctx.request.rawBody;
                const rpjson = (0, _generateRpJson.generateRpJsonFromFile)({
                    content,
                    name: prev.file.file_name
                }, cqsItems);
                return _object_spread_props(_object_spread({}, prev), {
                    content,
                    rpjson
                });
            });
            return file === null || file === void 0 ? void 0 : file.file;
        }),
        getStatus: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "GET",
                path: "/1.0/files/:id/index-status"
            }
        }).input(_zod.z.object({
            id: _zod.z.string()
        })).query(()=>({
                status: "INDEXED"
            })),
        annotated: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
            openapi: {
                method: "GET",
                path: "/1.0/files/:id/annotated"
            }
        }).input(_zod.z.object({
            id: _zod.z.string()
        })).query(({ input, ctx })=>{
            return {
                Location: `${ctx.request.url.origin}${UPLOAD_PATH.replace(":id", input.id)}`
            };
        })
    },
    quota: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/1.0/quota"
        }
    }).query(()=>_trpcMocks.trpcMocks.textAnalyticsQuota()),
    rpjson: _textanalyticsapiprocedure.textAnalyticsApiProcedure.meta({
        openapi: {
            method: "GET",
            path: UPLOAD_PATH
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).query(async ({ ctx, input })=>{
        const file = await ctx.db.collection("files").findOne({
            id: input.id
        });
        if (!file || !file.rpjson) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return file.rpjson;
    })
});

//# sourceMappingURL=data:application/json;base64,