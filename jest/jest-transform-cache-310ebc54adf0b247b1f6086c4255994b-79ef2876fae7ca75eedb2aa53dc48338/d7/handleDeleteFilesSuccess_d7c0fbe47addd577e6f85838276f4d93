d4b78a65cee9dec7a9789f0d4bfd9afa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handleDeleteFilesSuccess: function() {
        return handleDeleteFilesSuccess;
    },
    updateFilesCustomerIo: function() {
        return updateFilesCustomerIo;
    }
});
const _adapters = require("@rp/adapters");
const _customerio = require("@rp/react/common/customer-io");
const _services = require("../services");
const _filesQueryKeys = require("./filesQueryKeys");
const updateFilesCustomerIo = (files, user)=>files.forEach((file)=>{
        var _user_id;
        _customerio.filesCustomerIo.filesApi.deleted({
            fileId: file.id,
            ownerId: file.owner,
            updatedById: (_user_id = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id !== void 0 ? _user_id : "",
            origin: _adapters.adapters.platform.name,
            timestamp: Date.now() * 1000
        });
    });
const handleDeleteFilesSuccess = async (fileIds, user, queryClient)=>{
    Promise.all(fileIds.map((id)=>(0, _services.getMetadata)(id, queryClient))).then((files)=>updateFilesCustomerIo(files, user));
    await queryClient.refetchQueries({
        queryKey: _filesQueryKeys.filesQueryKeys.file,
        exact: true
    });
    await queryClient.refetchQueries({
        queryKey: _filesQueryKeys.filesQueryKeys.paginated()
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2ZpbGUvc3JjL3V0aWxzL2hhbmRsZURlbGV0ZUZpbGVzU3VjY2Vzcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyUmVzb3VyY2UgfSBmcm9tIFwiQGNsZXJrL3R5cGVzXCJcbmltcG9ydCB7IGFkYXB0ZXJzIH0gZnJvbSBcIkBycC9hZGFwdGVyc1wiXG5pbXBvcnQgeyBGaWxlUm93VHlwZSB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IGZpbGVzQ3VzdG9tZXJJbyB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2N1c3RvbWVyLWlvXCJcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyBnZXRNZXRhZGF0YSB9IGZyb20gXCIuLi9zZXJ2aWNlc1wiXG5pbXBvcnQgeyBmaWxlc1F1ZXJ5S2V5cyB9IGZyb20gXCIuL2ZpbGVzUXVlcnlLZXlzXCJcblxuY29uc3QgdXBkYXRlRmlsZXNDdXN0b21lcklvID0gKGZpbGVzOiBBcnJheTxGaWxlUm93VHlwZT4sIHVzZXI6IFVzZXJSZXNvdXJjZSB8IG51bGwgfCB1bmRlZmluZWQpID0+XG4gIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgZmlsZXNDdXN0b21lcklvLmZpbGVzQXBpLmRlbGV0ZWQoe1xuICAgICAgZmlsZUlkOiBmaWxlLmlkLFxuICAgICAgb3duZXJJZDogZmlsZS5vd25lcixcbiAgICAgIHVwZGF0ZWRCeUlkOiB1c2VyPy5pZCA/PyBcIlwiLFxuICAgICAgb3JpZ2luOiBhZGFwdGVycy5wbGF0Zm9ybS5uYW1lLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpICogMTAwMCxcbiAgICB9KVxuICB9KVxuXG5jb25zdCBoYW5kbGVEZWxldGVGaWxlc1N1Y2Nlc3MgPSBhc3luYyAoXG4gIGZpbGVJZHM6IEFycmF5PHN0cmluZz4sXG4gIHVzZXI6IFVzZXJSZXNvdXJjZSB8IG51bGwgfCB1bmRlZmluZWQsXG4gIHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudCxcbikgPT4ge1xuICBQcm9taXNlLmFsbChmaWxlSWRzLm1hcChpZCA9PiBnZXRNZXRhZGF0YShpZCwgcXVlcnlDbGllbnQpKSkudGhlbihmaWxlcyA9PlxuICAgIHVwZGF0ZUZpbGVzQ3VzdG9tZXJJbyhmaWxlcywgdXNlciksXG4gIClcbiAgYXdhaXQgcXVlcnlDbGllbnQucmVmZXRjaFF1ZXJpZXMoeyBxdWVyeUtleTogZmlsZXNRdWVyeUtleXMuZmlsZSwgZXhhY3Q6IHRydWUgfSlcbiAgYXdhaXQgcXVlcnlDbGllbnQucmVmZXRjaFF1ZXJpZXMoeyBxdWVyeUtleTogZmlsZXNRdWVyeUtleXMucGFnaW5hdGVkKCkgfSlcbn1cblxuZXhwb3J0IHsgaGFuZGxlRGVsZXRlRmlsZXNTdWNjZXNzLCB1cGRhdGVGaWxlc0N1c3RvbWVySW8gfVxuIl0sIm5hbWVzIjpbImhhbmRsZURlbGV0ZUZpbGVzU3VjY2VzcyIsInVwZGF0ZUZpbGVzQ3VzdG9tZXJJbyIsImZpbGVzIiwidXNlciIsImZvckVhY2giLCJmaWxlIiwiZmlsZXNDdXN0b21lcklvIiwiZmlsZXNBcGkiLCJkZWxldGVkIiwiZmlsZUlkIiwiaWQiLCJvd25lcklkIiwib3duZXIiLCJ1cGRhdGVkQnlJZCIsIm9yaWdpbiIsImFkYXB0ZXJzIiwicGxhdGZvcm0iLCJuYW1lIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImZpbGVJZHMiLCJxdWVyeUNsaWVudCIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJnZXRNZXRhZGF0YSIsInRoZW4iLCJyZWZldGNoUXVlcmllcyIsInF1ZXJ5S2V5IiwiZmlsZXNRdWVyeUtleXMiLCJleGFjdCIsInBhZ2luYXRlZCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUErQlNBLHdCQUF3QjtlQUF4QkE7O0lBQTBCQyxxQkFBcUI7ZUFBckJBOzs7MEJBOUJWOzRCQUVPOzBCQUVKO2dDQUNHO0FBRS9CLE1BQU1BLHdCQUF3QixDQUFDQyxPQUEyQkMsT0FDeERELE1BQU1FLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFJR0Y7UUFIZkcsMkJBQWUsQ0FBQ0MsUUFBUSxDQUFDQyxPQUFPLENBQUM7WUFDL0JDLFFBQVFKLEtBQUtLLEVBQUU7WUFDZkMsU0FBU04sS0FBS08sS0FBSztZQUNuQkMsYUFBYVYsQ0FBQUEsV0FBQUEsaUJBQUFBLDJCQUFBQSxLQUFNTyxFQUFFLGNBQVJQLHNCQUFBQSxXQUFZO1lBQ3pCVyxRQUFRQyxrQkFBUSxDQUFDQyxRQUFRLENBQUNDLElBQUk7WUFDOUJDLFdBQVdDLEtBQUtDLEdBQUcsS0FBSztRQUMxQjtJQUNGO0FBRUYsTUFBTXBCLDJCQUEyQixPQUMvQnFCLFNBQ0FsQixNQUNBbUI7SUFFQUMsUUFBUUMsR0FBRyxDQUFDSCxRQUFRSSxHQUFHLENBQUNmLENBQUFBLEtBQU1nQixJQUFBQSxxQkFBVyxFQUFDaEIsSUFBSVksZUFBZUssSUFBSSxDQUFDekIsQ0FBQUEsUUFDaEVELHNCQUFzQkMsT0FBT0M7SUFFL0IsTUFBTW1CLFlBQVlNLGNBQWMsQ0FBQztRQUFFQyxVQUFVQyw4QkFBYyxDQUFDekIsSUFBSTtRQUFFMEIsT0FBTztJQUFLO0lBQzlFLE1BQU1ULFlBQVlNLGNBQWMsQ0FBQztRQUFFQyxVQUFVQyw4QkFBYyxDQUFDRSxTQUFTO0lBQUc7QUFDMUUifQ==