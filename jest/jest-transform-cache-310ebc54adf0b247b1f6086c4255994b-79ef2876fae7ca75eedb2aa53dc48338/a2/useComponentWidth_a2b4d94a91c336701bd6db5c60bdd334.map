{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/hooks/src/useComponentWidth.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useLayoutEffect, useState } from \"react\"\nimport { observerResize } from \"./utils/observerResize\"\n\n// a hook that will respond to changes in component width\n\ntype UseComponentWidthState = {\n  setComponentRef: Dispatch<SetStateAction<HTMLDivElement | null>>\n  width: number\n}\n\nfunction useComponentWidth(): UseComponentWidthState {\n  const [width, setWidth] = useState<number>(0)\n  const [componentRef, setComponentRef] = useState<HTMLDivElement | null>(null)\n\n  useLayoutEffect(() => {\n    if (!componentRef) return\n\n    const resizeObserver = new ResizeObserver(() => observerResize({ setWidth, componentRef }))\n    resizeObserver.observe(componentRef)\n\n    return () => resizeObserver.disconnect()\n  }, [componentRef])\n\n  return { width, setComponentRef }\n}\n\nexport { useComponentWidth, observerResize }\n"],"names":["observerResize","useComponentWidth","width","setWidth","useState","componentRef","setComponentRef","useLayoutEffect","resizeObserver","ResizeObserver","observe","disconnect"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA0B4BA,cAAc;eAAdA,8BAAc;;IAAjCC,iBAAiB;eAAjBA;;;uBA1B2D;gCACrC;AAS/B,SAASA;IACP,MAAM,CAACC,OAAOC,SAAS,GAAGC,IAAAA,eAAQ,EAAS;IAC3C,MAAM,CAACC,cAAcC,gBAAgB,GAAGF,IAAAA,eAAQ,EAAwB;IAExEG,IAAAA,sBAAe,EAAC;QACd,IAAI,CAACF,cAAc;QAEnB,MAAMG,iBAAiB,IAAIC,eAAe,IAAMT,IAAAA,8BAAc,EAAC;gBAAEG;gBAAUE;YAAa;QACxFG,eAAeE,OAAO,CAACL;QAEvB,OAAO,IAAMG,eAAeG,UAAU;IACxC,GAAG;QAACN;KAAa;IAEjB,OAAO;QAAEH;QAAOI;IAAgB;AAClC"}