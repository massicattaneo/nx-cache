{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/development/src/lib/trpc/bigdata-api/procedures/user-data/queries-procedures.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { CqsSavedQuery, CqsUserQuery } from \"@rp/common/api-types\"\nimport { getUuid } from \"@rp/common/utils\"\nimport { TRPCError } from \"@trpc/server\"\nimport { userOwner } from \"../../../../database\"\nimport { bigdataApiProcedure } from \"../../bigdata-api-procedure\"\n\nexport const userDataQueriesProcedures = {\n  list: bigdataApiProcedure\n    .meta({ openapi: { method: \"GET\", path: \"/user-data/queries\" } })\n    .input(\n      z.object({\n        save_status: z.enum([\"saved\", \"unsaved\"]).optional(),\n        owned: z.boolean().optional(),\n        shared: z.enum([\"company\"]).optional(),\n      }),\n    )\n    .output(z.custom<Array<CqsUserQuery>>())\n    .query(async ({ ctx }) => {\n      const queries = await ctx.db.collection(\"queries\").find()\n      return queries.map(item => ({\n        ...item,\n        pinIndex: null,\n        pinned: null,\n        lastExecuted: item.lastExecuted || new Date().toISOString(),\n      }))\n    }),\n  save: bigdataApiProcedure\n    .meta({ openapi: { method: \"POST\", path: \"/user-data/queries/:id\" } })\n    .input(z.object({ id: z.string(), name: z.string(), query: z.any() }))\n    .output(z.custom<CqsSavedQuery>())\n    .mutation(async opts => {\n      const item = await opts.ctx.db\n        .collection(\"queries\")\n        .updateOne({ id: opts.input.id }, opts.input)\n      if (!item) throw new TRPCError({ code: \"NOT_FOUND\" })\n      return item\n    }),\n  create: bigdataApiProcedure\n    .meta({ openapi: { method: \"POST\", path: \"/user-data/queries\" } })\n    .input(z.object({ name: z.string(), query: z.any() }))\n    .output(z.custom<CqsSavedQuery>())\n    .mutation(async opts => {\n      const item = await opts.ctx.db.collection(\"queries\").insertOne({\n        id: getUuid(),\n        name: opts.input.name,\n        query: opts.input.query,\n        saveStatus: \"saved\",\n        dateCreated: new Date().toISOString(),\n        lastExecuted: new Date().toISOString(),\n        lastUpdated: new Date().toISOString(),\n        ownerUserId: userOwner.ownerUserId,\n        ownerName: userOwner.ownerName,\n        shared: {\n          company: {\n            organizationId: userOwner.organization.id,\n            permission: \"undefined\",\n          },\n          users: [],\n        },\n      })\n      if (!item) throw new TRPCError({ code: \"NOT_FOUND\" })\n      return item\n    }),\n  id: bigdataApiProcedure\n    .meta({ openapi: { method: \"GET\", path: \"/user-data/queries/{id}\" } })\n    .input(z.object({ id: z.string() }))\n    .output(z.custom<CqsSavedQuery>())\n    .query(async opts => {\n      const query = await opts.ctx.db.collection(\"queries\").findOne({ id: opts.input.id })\n      if (!query) throw new TRPCError({ code: \"NOT_FOUND\" })\n      return query\n    }),\n}\n"],"names":["userDataQueriesProcedures","list","bigdataApiProcedure","meta","openapi","method","path","input","z","object","save_status","enum","optional","owned","boolean","shared","output","custom","query","ctx","queries","db","collection","find","map","item","pinIndex","pinned","lastExecuted","Date","toISOString","save","id","string","name","any","mutation","opts","updateOne","TRPCError","code","create","insertOne","getUuid","saveStatus","dateCreated","lastUpdated","ownerUserId","userOwner","ownerName","company","organizationId","organization","permission","users","findOne"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}