{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/RadioMenu/RadioMenu.tsx"],"sourcesContent":["import React, { useState } from \"react\"\nimport {\n  ButtonBase,\n  FormControlLabel,\n  Menu,\n  Radio,\n  RadioGroup,\n  Typography,\n} from \"@rp/react/web/mui/core\"\nimport { ArrowDropDown } from \"@rp/react/web/mui/icons\"\n\ntype Props<TValue> = {\n  value: TValue\n  items: Array<{ value: TValue; label: string }>\n  onChange: (value: TValue) => void\n}\nconst RadioMenu = <TValue extends string>({ value, items, onChange }: Props<TValue>) => {\n  const [isMenuOpen, setIsMenuOpen] = useState<HTMLButtonElement | null>(null)\n\n  const handleChange = (value: TValue) => {\n    setIsMenuOpen(null)\n    onChange(value)\n  }\n\n  return (\n    <>\n      <ButtonBase\n        disableRipple\n        onClick={event => setIsMenuOpen(event.currentTarget)}\n        sx={{ borderRadius: 1, width: \"100%\", justifyContent: \"flex-start\" }}\n      >\n        <Typography\n          sx={{\n            textOverflow: \"ellipsis\",\n            overflow: \"hidden\",\n            whiteSpace: \"nowrap\",\n          }}\n        >\n          {items.find(item => item.value === value)?.label}\n        </Typography>\n        <ArrowDropDown\n          sx={{\n            transform: isMenuOpen ? \"rotateZ(180deg)\" : undefined,\n            transition: \"transform 0.2s\",\n          }}\n        />\n      </ButtonBase>\n      <Menu open={isMenuOpen !== null} anchorEl={isMenuOpen} onClose={() => setIsMenuOpen(null)}>\n        <RadioGroup value={value} onChange={event => handleChange(event.target.value as TValue)}>\n          {items.map(item => (\n            <FormControlLabel\n              key={item.value}\n              value={item.value}\n              control={<Radio />}\n              label={item.label}\n              sx={{\n                pl: 2,\n                pr: 2,\n                width: \"100%\",\n                \"& .MuiFormControlLabel-label\": {\n                  textOverflow: \"ellipsis\",\n                  overflow: \"hidden\",\n                  whiteSpace: \"nowrap\",\n                },\n              }}\n            />\n          ))}\n        </RadioGroup>\n      </Menu>\n    </>\n  )\n}\n\nexport { RadioMenu }\n"],"names":["RadioMenu","value","items","onChange","isMenuOpen","setIsMenuOpen","useState","handleChange","ButtonBase","disableRipple","onClick","event","currentTarget","sx","borderRadius","width","justifyContent","Typography","textOverflow","overflow","whiteSpace","find","item","label","ArrowDropDown","transform","undefined","transition","Menu","open","anchorEl","onClose","RadioGroup","target","map","FormControlLabel","control","Radio","pl","pr"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAyESA;;;eAAAA;;;;+DAzEuB;sBAQzB;uBACuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO9B,MAAMA,YAAY,CAAwB,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAiB;QAsBxED;IArBT,MAAM,CAACE,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAA2B;IAEvE,MAAMC,eAAe,CAACN;QACpBI,cAAc;QACdF,SAASF;IACX;IAEA,qBACE;;0BACE,sBAACO,gBAAU;gBACTC,aAAa;gBACbC,SAASC,CAAAA,QAASN,cAAcM,MAAMC,aAAa;gBACnDC,IAAI;oBAAEC,cAAc;oBAAGC,OAAO;oBAAQC,gBAAgB;gBAAa;;kCAEnE,qBAACC,gBAAU;wBACTJ,IAAI;4BACFK,cAAc;4BACdC,UAAU;4BACVC,YAAY;wBACd;mCAEClB,cAAAA,MAAMmB,IAAI,CAACC,CAAAA,OAAQA,KAAKrB,KAAK,KAAKA,oBAAlCC,kCAAAA,YAA0CqB,KAAK;;kCAElD,qBAACC,oBAAa;wBACZX,IAAI;4BACFY,WAAWrB,aAAa,oBAAoBsB;4BAC5CC,YAAY;wBACd;;;;0BAGJ,qBAACC,UAAI;gBAACC,MAAMzB,eAAe;gBAAM0B,UAAU1B;gBAAY2B,SAAS,IAAM1B,cAAc;0BAClF,cAAA,qBAAC2B,gBAAU;oBAAC/B,OAAOA;oBAAOE,UAAUQ,CAAAA,QAASJ,aAAaI,MAAMsB,MAAM,CAAChC,KAAK;8BACzEC,MAAMgC,GAAG,CAACZ,CAAAA,qBACT,qBAACa,sBAAgB;4BAEflC,OAAOqB,KAAKrB,KAAK;4BACjBmC,uBAAS,qBAACC,WAAK;4BACfd,OAAOD,KAAKC,KAAK;4BACjBV,IAAI;gCACFyB,IAAI;gCACJC,IAAI;gCACJxB,OAAO;gCACP,gCAAgC;oCAC9BG,cAAc;oCACdC,UAAU;oCACVC,YAAY;gCACd;4BACF;2BAbKE,KAAKrB,KAAK;;;;;AAoB7B"}