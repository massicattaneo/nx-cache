687e82da2b7683b48403e3825c3878a2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "VerticalScrollStepperBar", {
    enumerable: true,
    get: function() {
        return VerticalScrollStepperBar;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _core = require("@rp/react/web/mui/core");
const LineStep = ({ activeStep, index })=>{
    const theme = (0, _core.useTheme)();
    const opacity = index === activeStep ? 0.32 : 1;
    const color = index <= activeStep ? (0, _core.alpha)(theme.palette.primary.main, opacity) : theme.palette.elevation.dp24;
    if (index <= activeStep) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.LinearProgress, {
            variant: "determinate",
            value: index === activeStep ? -1 : 100,
            sx: {
                height: 4,
                width: "100%"
            }
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            backgroundColor: color,
            height: 4,
            width: "100%"
        }
    });
};
const VerticalScrollStepperBar = ({ steps, activeStep })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            display: "flex",
            height: "4px",
            alignItems: "center",
            my: 1,
            gap: 1,
            "& div:nth-of-type(1)": {
                borderRadius: "4px 0 0 4px"
            },
            "& div:last-of-type": {
                borderRadius: "0 4px 4px 0"
            }
        },
        children: new Array(steps).fill(0).map((_, index)=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(LineStep, {
                activeStep: activeStep,
                index: index
            }, index);
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvVmVydGljYWxTY3JvbGxTdGVwcGVyL1ZlcnRpY2FsU2Nyb2xsU3RlcHBlckJhci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm94LCBMaW5lYXJQcm9ncmVzcywgYWxwaGEsIHVzZVRoZW1lIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG5jb25zdCBMaW5lU3RlcCA9ICh7IGFjdGl2ZVN0ZXAsIGluZGV4IH06IHsgYWN0aXZlU3RlcDogbnVtYmVyOyBpbmRleDogbnVtYmVyIH0pID0+IHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpXG4gIGNvbnN0IG9wYWNpdHkgPSBpbmRleCA9PT0gYWN0aXZlU3RlcCA/IDAuMzIgOiAxXG4gIGNvbnN0IGNvbG9yID1cbiAgICBpbmRleCA8PSBhY3RpdmVTdGVwID8gYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIG9wYWNpdHkpIDogdGhlbWUucGFsZXR0ZS5lbGV2YXRpb24uZHAyNFxuXG4gIGlmIChpbmRleCA8PSBhY3RpdmVTdGVwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaW5lYXJQcm9ncmVzc1xuICAgICAgICB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcIlxuICAgICAgICB2YWx1ZT17aW5kZXggPT09IGFjdGl2ZVN0ZXAgPyAtMSA6IDEwMH1cbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBoZWlnaHQ6IDQsXG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3hcbiAgICAgIHN4PXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICAgIGhlaWdodDogNCxcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgfX1cbiAgICAvPlxuICApXG59XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHN0ZXBzOiBudW1iZXJcbiAgYWN0aXZlU3RlcDogbnVtYmVyXG59XG5cbmNvbnN0IFZlcnRpY2FsU2Nyb2xsU3RlcHBlckJhciA9ICh7IHN0ZXBzLCBhY3RpdmVTdGVwIH06IFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgc3g9e3tcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGhlaWdodDogXCI0cHhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgbXk6IDEsXG4gICAgICAgIGdhcDogMSxcbiAgICAgICAgXCImIGRpdjpudGgtb2YtdHlwZSgxKVwiOiB7IGJvcmRlclJhZGl1czogXCI0cHggMCAwIDRweFwiIH0sXG4gICAgICAgIFwiJiBkaXY6bGFzdC1vZi10eXBlXCI6IHsgYm9yZGVyUmFkaXVzOiBcIjAgNHB4IDRweCAwXCIgfSxcbiAgICAgIH19XG4gICAgPlxuICAgICAge25ldyBBcnJheShzdGVwcykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiA8TGluZVN0ZXAga2V5PXtpbmRleH0gYWN0aXZlU3RlcD17YWN0aXZlU3RlcH0gaW5kZXg9e2luZGV4fSAvPlxuICAgICAgfSl9XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuZXhwb3J0IHsgVmVydGljYWxTY3JvbGxTdGVwcGVyQmFyIH1cbiJdLCJuYW1lcyI6WyJWZXJ0aWNhbFNjcm9sbFN0ZXBwZXJCYXIiLCJMaW5lU3RlcCIsImFjdGl2ZVN0ZXAiLCJpbmRleCIsInRoZW1lIiwidXNlVGhlbWUiLCJvcGFjaXR5IiwiY29sb3IiLCJhbHBoYSIsInBhbGV0dGUiLCJwcmltYXJ5IiwibWFpbiIsImVsZXZhdGlvbiIsImRwMjQiLCJMaW5lYXJQcm9ncmVzcyIsInZhcmlhbnQiLCJ2YWx1ZSIsInN4IiwiaGVpZ2h0Iiwid2lkdGgiLCJCb3giLCJiYWNrZ3JvdW5kQ29sb3IiLCJzdGVwcyIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwibXkiLCJnYXAiLCJib3JkZXJSYWRpdXMiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJfIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXlEU0E7OztlQUFBQTs7OztzQkF6RDRDO0FBRXJELE1BQU1DLFdBQVcsQ0FBQyxFQUFFQyxVQUFVLEVBQUVDLEtBQUssRUFBeUM7SUFDNUUsTUFBTUMsUUFBUUMsSUFBQUEsY0FBUTtJQUN0QixNQUFNQyxVQUFVSCxVQUFVRCxhQUFhLE9BQU87SUFDOUMsTUFBTUssUUFDSkosU0FBU0QsYUFBYU0sSUFBQUEsV0FBSyxFQUFDSixNQUFNSyxPQUFPLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxFQUFFTCxXQUFXRixNQUFNSyxPQUFPLENBQUNHLFNBQVMsQ0FBQ0MsSUFBSTtJQUVqRyxJQUFJVixTQUFTRCxZQUFZO1FBQ3ZCLHFCQUNFLHFCQUFDWSxvQkFBYztZQUNiQyxTQUFRO1lBQ1JDLE9BQU9iLFVBQVVELGFBQWEsQ0FBQyxJQUFJO1lBQ25DZSxJQUFJO2dCQUNGQyxRQUFRO2dCQUNSQyxPQUFPO1lBQ1Q7O0lBR047SUFFQSxxQkFDRSxxQkFBQ0MsU0FBRztRQUNGSCxJQUFJO1lBQ0ZJLGlCQUFpQmQ7WUFDakJXLFFBQVE7WUFDUkMsT0FBTztRQUNUOztBQUdOO0FBT0EsTUFBTW5CLDJCQUEyQixDQUFDLEVBQUVzQixLQUFLLEVBQUVwQixVQUFVLEVBQVM7SUFDNUQscUJBQ0UscUJBQUNrQixTQUFHO1FBQ0ZILElBQUk7WUFDRk0sU0FBUztZQUNUTCxRQUFRO1lBQ1JNLFlBQVk7WUFDWkMsSUFBSTtZQUNKQyxLQUFLO1lBQ0wsd0JBQXdCO2dCQUFFQyxjQUFjO1lBQWM7WUFDdEQsc0JBQXNCO2dCQUFFQSxjQUFjO1lBQWM7UUFDdEQ7a0JBRUMsSUFBSUMsTUFBTU4sT0FBT08sSUFBSSxDQUFDLEdBQUdDLEdBQUcsQ0FBQyxDQUFDQyxHQUFHNUI7WUFDaEMscUJBQU8scUJBQUNGO2dCQUFxQkMsWUFBWUE7Z0JBQVlDLE9BQU9BO2VBQXRDQTtRQUN4Qjs7QUFHTiJ9