847712a0a9827cd4731d46b24118cfb7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useBriefReportLoadError", {
    enumerable: true,
    get: function() {
        return useBriefReportLoadError;
    }
});
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _brief = require("@rp/react/tanstack-api/brief");
const _providers = require("@rp/react/web/common/providers");
const _router = require("@rp/react/web/router");
const useBriefReportLoadError = ({ briefConfigError, historicalBriefReportResponse, latestBriefReportResponse })=>{
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { enqueueError } = (0, _providers.useSnackbar)();
    (0, _react.useEffect)(()=>{
        var _historicalBriefReportResponse_error, _latestBriefReportResponse_error, _briefConfigError_response;
        const historicalErrorMessage = ((_historicalBriefReportResponse_error = historicalBriefReportResponse.error) === null || _historicalBriefReportResponse_error === void 0 ? void 0 : _historicalBriefReportResponse_error.message) || null;
        const latestErrorMessage = ((_latestBriefReportResponse_error = latestBriefReportResponse.error) === null || _latestBriefReportResponse_error === void 0 ? void 0 : _latestBriefReportResponse_error.message) || null;
        const hasError = !!briefConfigError || !!historicalErrorMessage || !!latestErrorMessage;
        if (!hasError) return;
        if ((briefConfigError === null || briefConfigError === void 0 ? void 0 : (_briefConfigError_response = briefConfigError.response) === null || _briefConfigError_response === void 0 ? void 0 : _briefConfigError_response.status) === 404) {
            enqueueError("Brief does not exist");
            navigate(_router.BRIEF_ROUTE);
            return;
        }
        if ([
            historicalErrorMessage,
            latestErrorMessage
        ].includes(_brief.BriefAPIError.BRIEF_REPORT_NOT_FOUND)) {
            enqueueError("Brief report does not exist");
            navigate(_router.BRIEF_ROUTE);
            return;
        }
        enqueueError("Could not load brief report, try again later");
        navigate(_router.BRIEF_ROUTE);
    }, [
        briefConfigError,
        enqueueError,
        historicalBriefReportResponse,
        latestBriefReportResponse,
        navigate
    ]);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9ob29rcy91c2VCcmllZlJlcG9ydExvYWRFcnJvci91c2VCcmllZlJlcG9ydExvYWRFcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgQXhpb3NFcnJvciB9IGZyb20gXCJheGlvc1wiXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJcbmltcG9ydCB7IEJyaWVmQVBJRXJyb3IsIEJyaWVmUmVwb3J0LCBCcmllZlJlcG9ydEdldFJlc3BvbnNlIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvYnJpZWZcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IEJSSUVGX1JPVVRFIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvcm91dGVyXCJcbmltcG9ydCB7IFVzZVF1ZXJ5UmVzdWx0IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5cbnR5cGUgVXNlQnJpZWZSZXBvcnRMb2FkRXJyb3JQcm9wcyA9IHtcbiAgYnJpZWZDb25maWdFcnJvcjogQXhpb3NFcnJvciB8IG51bGxcbiAgaGlzdG9yaWNhbEJyaWVmUmVwb3J0UmVzcG9uc2U6IFVzZVF1ZXJ5UmVzdWx0PEJyaWVmUmVwb3J0IHwgbnVsbCwgRXJyb3I+XG4gIGxhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2U6IFVzZVF1ZXJ5UmVzdWx0PEJyaWVmUmVwb3J0R2V0UmVzcG9uc2UgfCBudWxsLCBFcnJvcj5cbn1cblxuY29uc3QgdXNlQnJpZWZSZXBvcnRMb2FkRXJyb3IgPSAoe1xuICBicmllZkNvbmZpZ0Vycm9yLFxuICBoaXN0b3JpY2FsQnJpZWZSZXBvcnRSZXNwb25zZSxcbiAgbGF0ZXN0QnJpZWZSZXBvcnRSZXNwb25zZSxcbn06IFVzZUJyaWVmUmVwb3J0TG9hZEVycm9yUHJvcHMpOiB2b2lkID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG4gIGNvbnN0IHsgZW5xdWV1ZUVycm9yIH0gPSB1c2VTbmFja2JhcigpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoaXN0b3JpY2FsRXJyb3JNZXNzYWdlID0gaGlzdG9yaWNhbEJyaWVmUmVwb3J0UmVzcG9uc2UuZXJyb3I/Lm1lc3NhZ2UgfHwgbnVsbFxuICAgIGNvbnN0IGxhdGVzdEVycm9yTWVzc2FnZSA9IGxhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2UuZXJyb3I/Lm1lc3NhZ2UgfHwgbnVsbFxuXG4gICAgY29uc3QgaGFzRXJyb3IgPSAhIWJyaWVmQ29uZmlnRXJyb3IgfHwgISFoaXN0b3JpY2FsRXJyb3JNZXNzYWdlIHx8ICEhbGF0ZXN0RXJyb3JNZXNzYWdlXG5cbiAgICBpZiAoIWhhc0Vycm9yKSByZXR1cm5cblxuICAgIGlmIChicmllZkNvbmZpZ0Vycm9yPy5yZXNwb25zZT8uc3RhdHVzID09PSA0MDQpIHtcbiAgICAgIGVucXVldWVFcnJvcihcIkJyaWVmIGRvZXMgbm90IGV4aXN0XCIpXG4gICAgICBuYXZpZ2F0ZShCUklFRl9ST1VURSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIFtoaXN0b3JpY2FsRXJyb3JNZXNzYWdlLCBsYXRlc3RFcnJvck1lc3NhZ2VdLmluY2x1ZGVzKEJyaWVmQVBJRXJyb3IuQlJJRUZfUkVQT1JUX05PVF9GT1VORClcbiAgICApIHtcbiAgICAgIGVucXVldWVFcnJvcihcIkJyaWVmIHJlcG9ydCBkb2VzIG5vdCBleGlzdFwiKVxuICAgICAgbmF2aWdhdGUoQlJJRUZfUk9VVEUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlbnF1ZXVlRXJyb3IoXCJDb3VsZCBub3QgbG9hZCBicmllZiByZXBvcnQsIHRyeSBhZ2FpbiBsYXRlclwiKVxuICAgIG5hdmlnYXRlKEJSSUVGX1JPVVRFKVxuICB9LCBbXG4gICAgYnJpZWZDb25maWdFcnJvcixcbiAgICBlbnF1ZXVlRXJyb3IsXG4gICAgaGlzdG9yaWNhbEJyaWVmUmVwb3J0UmVzcG9uc2UsXG4gICAgbGF0ZXN0QnJpZWZSZXBvcnRSZXNwb25zZSxcbiAgICBuYXZpZ2F0ZSxcbiAgXSlcbn1cblxuZXhwb3J0IHsgdXNlQnJpZWZSZXBvcnRMb2FkRXJyb3IgfVxuZXhwb3J0IHR5cGUgeyBVc2VCcmllZlJlcG9ydExvYWRFcnJvclByb3BzIH1cbiJdLCJuYW1lcyI6WyJ1c2VCcmllZlJlcG9ydExvYWRFcnJvciIsImJyaWVmQ29uZmlnRXJyb3IiLCJoaXN0b3JpY2FsQnJpZWZSZXBvcnRSZXNwb25zZSIsImxhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2UiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwiZW5xdWV1ZUVycm9yIiwidXNlU25hY2tiYXIiLCJ1c2VFZmZlY3QiLCJoaXN0b3JpY2FsRXJyb3JNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwibGF0ZXN0RXJyb3JNZXNzYWdlIiwiaGFzRXJyb3IiLCJyZXNwb25zZSIsInN0YXR1cyIsIkJSSUVGX1JPVVRFIiwiaW5jbHVkZXMiLCJCcmllZkFQSUVycm9yIiwiQlJJRUZfUkVQT1JUX05PVF9GT1VORCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXVEU0E7OztlQUFBQTs7O3VCQXZEaUI7Z0NBRUU7dUJBQ3VDOzJCQUN2Qzt3QkFDQTtBQVM1QixNQUFNQSwwQkFBMEIsQ0FBQyxFQUMvQkMsZ0JBQWdCLEVBQ2hCQyw2QkFBNkIsRUFDN0JDLHlCQUF5QixFQUNJO0lBQzdCLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFXO0lBQzVCLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUdDLElBQUFBLHNCQUFXO0lBRXBDQyxJQUFBQSxnQkFBUyxFQUFDO1lBQ3VCTixzQ0FDSkMsa0NBTXZCRjtRQVBKLE1BQU1RLHlCQUF5QlAsRUFBQUEsdUNBQUFBLDhCQUE4QlEsS0FBSyxjQUFuQ1IsMkRBQUFBLHFDQUFxQ1MsT0FBTyxLQUFJO1FBQy9FLE1BQU1DLHFCQUFxQlQsRUFBQUEsbUNBQUFBLDBCQUEwQk8sS0FBSyxjQUEvQlAsdURBQUFBLGlDQUFpQ1EsT0FBTyxLQUFJO1FBRXZFLE1BQU1FLFdBQVcsQ0FBQyxDQUFDWixvQkFBb0IsQ0FBQyxDQUFDUSwwQkFBMEIsQ0FBQyxDQUFDRztRQUVyRSxJQUFJLENBQUNDLFVBQVU7UUFFZixJQUFJWixDQUFBQSw2QkFBQUEsd0NBQUFBLDZCQUFBQSxpQkFBa0JhLFFBQVEsY0FBMUJiLGlEQUFBQSwyQkFBNEJjLE1BQU0sTUFBSyxLQUFLO1lBQzlDVCxhQUFhO1lBQ2JGLFNBQVNZLG1CQUFXO1lBQ3BCO1FBQ0Y7UUFFQSxJQUNFO1lBQUNQO1lBQXdCRztTQUFtQixDQUFDSyxRQUFRLENBQUNDLG9CQUFhLENBQUNDLHNCQUFzQixHQUMxRjtZQUNBYixhQUFhO1lBQ2JGLFNBQVNZLG1CQUFXO1lBQ3BCO1FBQ0Y7UUFFQVYsYUFBYTtRQUNiRixTQUFTWSxtQkFBVztJQUN0QixHQUFHO1FBQ0RmO1FBQ0FLO1FBQ0FKO1FBQ0FDO1FBQ0FDO0tBQ0Q7QUFDSCJ9