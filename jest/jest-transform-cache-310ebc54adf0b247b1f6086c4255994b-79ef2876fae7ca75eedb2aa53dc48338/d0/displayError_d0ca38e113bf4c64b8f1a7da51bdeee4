3b27a4dba97c9d5e74862cf63c27a881
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "displayError", {
    enumerable: true,
    get: function() {
        return displayError;
    }
});
const _axios = require("axios");
const _i18next = /*#__PURE__*/ _interop_require_default(require("i18next"));
const _errors = require("@clerk/clerk-react/errors");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const displayError = (error, backup)=>{
    const DEFAULT_ERROR_MESSAGE = _i18next.default.t("common.defaultError");
    if (error instanceof _axios.AxiosError) {
        var _error_response_data, _error_response;
        var _error_response_data_message;
        return (_error_response_data_message = (_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) !== null && _error_response_data_message !== void 0 ? _error_response_data_message : DEFAULT_ERROR_MESSAGE;
    }
    if (error instanceof Object && (0, _errors.isClerkAPIResponseError)(error)) {
        if (error.errors[0].code === "client_state_invalid") {
            return error.errors[0].message;
        }
        return error.errors.map((e)=>{
            var _e_longMessage;
            return (_e_longMessage = e.longMessage) !== null && _e_longMessage !== void 0 ? _e_longMessage : e.message;
        }).join(". ");
    }
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === "string" && error !== "") {
        return error;
    }
    return backup !== null && backup !== void 0 ? backup : DEFAULT_ERROR_MESSAGE;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3V0aWxzL3NyYy9saWIvZGlzcGxheUVycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IGkxOG5leHQgZnJvbSBcImkxOG5leHRcIlxuaW1wb3J0IHsgaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IgfSBmcm9tIFwiQGNsZXJrL2NsZXJrLXJlYWN0L2Vycm9yc1wiXG5cbmNvbnN0IGRpc3BsYXlFcnJvciA9IChlcnJvcjogdW5rbm93biwgYmFja3VwPzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IERFRkFVTFRfRVJST1JfTUVTU0FHRSA9IGkxOG5leHQudChcImNvbW1vbi5kZWZhdWx0RXJyb3JcIilcblxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBeGlvc0Vycm9yKSB7XG4gICAgcmV0dXJuIChlcnJvci5yZXNwb25zZT8uZGF0YT8ubWVzc2FnZSBhcyBzdHJpbmcpID8/IERFRkFVTFRfRVJST1JfTUVTU0FHRVxuICB9XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIE9iamVjdCAmJiBpc0NsZXJrQVBJUmVzcG9uc2VFcnJvcihlcnJvcikpIHtcbiAgICBpZiAoZXJyb3IuZXJyb3JzWzBdLmNvZGUgPT09IFwiY2xpZW50X3N0YXRlX2ludmFsaWRcIikge1xuICAgICAgcmV0dXJuIGVycm9yLmVycm9yc1swXS5tZXNzYWdlXG4gICAgfVxuICAgIHJldHVybiBlcnJvci5lcnJvcnMubWFwKGUgPT4gZS5sb25nTWVzc2FnZSA/PyBlLm1lc3NhZ2UpLmpvaW4oXCIuIFwiKVxuICB9XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yLm1lc3NhZ2VcbiAgfVxuICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiICYmIGVycm9yICE9PSBcIlwiKSB7XG4gICAgcmV0dXJuIGVycm9yXG4gIH1cbiAgcmV0dXJuIGJhY2t1cCA/PyBERUZBVUxUX0VSUk9SX01FU1NBR0Vcbn1cblxuZXhwb3J0IHsgZGlzcGxheUVycm9yIH1cbiJdLCJuYW1lcyI6WyJkaXNwbGF5RXJyb3IiLCJlcnJvciIsImJhY2t1cCIsIkRFRkFVTFRfRVJST1JfTUVTU0FHRSIsImkxOG5leHQiLCJ0IiwiQXhpb3NFcnJvciIsInJlc3BvbnNlIiwiZGF0YSIsIm1lc3NhZ2UiLCJPYmplY3QiLCJpc0NsZXJrQVBJUmVzcG9uc2VFcnJvciIsImVycm9ycyIsImNvZGUiLCJtYXAiLCJlIiwibG9uZ01lc3NhZ2UiLCJqb2luIiwiRXJyb3IiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBeUJTQTs7O2VBQUFBOzs7dUJBekJrQjtnRUFDUDt3QkFDb0I7Ozs7OztBQUV4QyxNQUFNQSxlQUFlLENBQUNDLE9BQWdCQztJQUNwQyxNQUFNQyx3QkFBd0JDLGdCQUFPLENBQUNDLENBQUMsQ0FBQztJQUV4QyxJQUFJSixpQkFBaUJLLGlCQUFVLEVBQUU7WUFDdkJMLHNCQUFBQTtZQUFBQTtRQUFSLE9BQU8sQ0FBQ0EsZ0NBQUFBLGtCQUFBQSxNQUFNTSxRQUFRLGNBQWROLHVDQUFBQSx1QkFBQUEsZ0JBQWdCTyxJQUFJLGNBQXBCUCwyQ0FBQUEscUJBQXNCUSxPQUFPLGNBQTdCUiwwQ0FBQUEsK0JBQTRDRTtJQUN0RDtJQUNBLElBQUlGLGlCQUFpQlMsVUFBVUMsSUFBQUEsK0JBQXVCLEVBQUNWLFFBQVE7UUFDN0QsSUFBSUEsTUFBTVcsTUFBTSxDQUFDLEVBQUUsQ0FBQ0MsSUFBSSxLQUFLLHdCQUF3QjtZQUNuRCxPQUFPWixNQUFNVyxNQUFNLENBQUMsRUFBRSxDQUFDSCxPQUFPO1FBQ2hDO1FBQ0EsT0FBT1IsTUFBTVcsTUFBTSxDQUFDRSxHQUFHLENBQUNDLENBQUFBO2dCQUFLQTttQkFBQUEsQ0FBQUEsaUJBQUFBLEVBQUVDLFdBQVcsY0FBYkQsNEJBQUFBLGlCQUFpQkEsRUFBRU4sT0FBTztRQUFELEdBQUdRLElBQUksQ0FBQztJQUNoRTtJQUNBLElBQUloQixpQkFBaUJpQixPQUFPO1FBQzFCLE9BQU9qQixNQUFNUSxPQUFPO0lBQ3RCO0lBQ0EsSUFBSSxPQUFPUixVQUFVLFlBQVlBLFVBQVUsSUFBSTtRQUM3QyxPQUFPQTtJQUNUO0lBQ0EsT0FBT0MsbUJBQUFBLG9CQUFBQSxTQUFVQztBQUNuQiJ9