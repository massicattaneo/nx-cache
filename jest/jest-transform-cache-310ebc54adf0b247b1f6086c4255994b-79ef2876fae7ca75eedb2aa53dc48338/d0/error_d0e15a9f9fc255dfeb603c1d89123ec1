7281606a0eb58e286300795765fac3ef
"use strict";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/error.ts
var error_exports = {};
__export(error_exports, {
    ClerkAPIResponseError: ()=>ClerkAPIResponseError,
    ClerkRuntimeError: ()=>ClerkRuntimeError,
    ClerkWebAuthnError: ()=>ClerkWebAuthnError,
    EmailLinkError: ()=>EmailLinkError,
    EmailLinkErrorCode: ()=>EmailLinkErrorCode,
    EmailLinkErrorCodeStatus: ()=>EmailLinkErrorCodeStatus,
    buildErrorThrower: ()=>buildErrorThrower,
    errorToJSON: ()=>errorToJSON,
    is4xxError: ()=>is4xxError,
    isCaptchaError: ()=>isCaptchaError,
    isClerkAPIResponseError: ()=>isClerkAPIResponseError,
    isClerkRuntimeError: ()=>isClerkRuntimeError,
    isEmailLinkError: ()=>isEmailLinkError,
    isKnownError: ()=>isKnownError,
    isMetamaskError: ()=>isMetamaskError,
    isNetworkError: ()=>isNetworkError,
    isPasswordPwnedError: ()=>isPasswordPwnedError,
    isUnauthorizedError: ()=>isUnauthorizedError,
    isUserLockedError: ()=>isUserLockedError,
    parseError: ()=>parseError,
    parseErrors: ()=>parseErrors
});
module.exports = __toCommonJS(error_exports);
function isUnauthorizedError(e) {
    var _e_errors_, _e_errors;
    const status = e === null || e === void 0 ? void 0 : e.status;
    const code = e === null || e === void 0 ? void 0 : (_e_errors = e.errors) === null || _e_errors === void 0 ? void 0 : (_e_errors_ = _e_errors[0]) === null || _e_errors_ === void 0 ? void 0 : _e_errors_.code;
    return code === "authentication_invalid" && status === 401;
}
function isCaptchaError(e) {
    return [
        "captcha_invalid",
        "captcha_not_enabled",
        "captcha_missing_token"
    ].includes(e.errors[0].code);
}
function is4xxError(e) {
    const status = e === null || e === void 0 ? void 0 : e.status;
    return !!status && status >= 400 && status < 500;
}
function isNetworkError(e) {
    const message = (`${e.message}${e.name}` || "").toLowerCase().replace(/\s+/g, "");
    return message.includes("networkerror");
}
function isKnownError(error) {
    return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);
}
function isClerkAPIResponseError(err) {
    return "clerkError" in err;
}
function isClerkRuntimeError(err) {
    return "clerkRuntimeError" in err;
}
function isMetamaskError(err) {
    return "code" in err && [
        4001,
        32602,
        32603
    ].includes(err.code) && "message" in err;
}
function isUserLockedError(err) {
    var _err_errors_, _err_errors;
    return isClerkAPIResponseError(err) && ((_err_errors = err.errors) === null || _err_errors === void 0 ? void 0 : (_err_errors_ = _err_errors[0]) === null || _err_errors_ === void 0 ? void 0 : _err_errors_.code) === "user_locked";
}
function isPasswordPwnedError(err) {
    var _err_errors_, _err_errors;
    return isClerkAPIResponseError(err) && ((_err_errors = err.errors) === null || _err_errors === void 0 ? void 0 : (_err_errors_ = _err_errors[0]) === null || _err_errors_ === void 0 ? void 0 : _err_errors_.code) === "form_password_pwned";
}
function parseErrors(data = []) {
    return data.length > 0 ? data.map(parseError) : [];
}
function parseError(error) {
    var _error_meta, _error_meta1, _error_meta2, _error_meta3, _error_meta4;
    return {
        code: error.code,
        message: error.message,
        longMessage: error.long_message,
        meta: {
            paramName: error === null || error === void 0 ? void 0 : (_error_meta = error.meta) === null || _error_meta === void 0 ? void 0 : _error_meta.param_name,
            sessionId: error === null || error === void 0 ? void 0 : (_error_meta1 = error.meta) === null || _error_meta1 === void 0 ? void 0 : _error_meta1.session_id,
            emailAddresses: error === null || error === void 0 ? void 0 : (_error_meta2 = error.meta) === null || _error_meta2 === void 0 ? void 0 : _error_meta2.email_addresses,
            identifiers: error === null || error === void 0 ? void 0 : (_error_meta3 = error.meta) === null || _error_meta3 === void 0 ? void 0 : _error_meta3.identifiers,
            zxcvbn: error === null || error === void 0 ? void 0 : (_error_meta4 = error.meta) === null || _error_meta4 === void 0 ? void 0 : _error_meta4.zxcvbn
        }
    };
}
function errorToJSON(error) {
    var _error_meta, _error_meta1, _error_meta2, _error_meta3, _error_meta4;
    return {
        code: (error === null || error === void 0 ? void 0 : error.code) || "",
        message: (error === null || error === void 0 ? void 0 : error.message) || "",
        long_message: error === null || error === void 0 ? void 0 : error.longMessage,
        meta: {
            param_name: error === null || error === void 0 ? void 0 : (_error_meta = error.meta) === null || _error_meta === void 0 ? void 0 : _error_meta.paramName,
            session_id: error === null || error === void 0 ? void 0 : (_error_meta1 = error.meta) === null || _error_meta1 === void 0 ? void 0 : _error_meta1.sessionId,
            email_addresses: error === null || error === void 0 ? void 0 : (_error_meta2 = error.meta) === null || _error_meta2 === void 0 ? void 0 : _error_meta2.emailAddresses,
            identifiers: error === null || error === void 0 ? void 0 : (_error_meta3 = error.meta) === null || _error_meta3 === void 0 ? void 0 : _error_meta3.identifiers,
            zxcvbn: error === null || error === void 0 ? void 0 : (_error_meta4 = error.meta) === null || _error_meta4 === void 0 ? void 0 : _error_meta4.zxcvbn
        }
    };
}
var ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {
    constructor(message, { data, status, clerkTraceId }){
        super(message);
        this.toString = ()=>{
            let message = `[${this.name}]
Message:${this.message}
Status:${this.status}
Serialized errors: ${this.errors.map((e)=>JSON.stringify(e))}`;
            if (this.clerkTraceId) {
                message += `
Clerk Trace ID: ${this.clerkTraceId}`;
            }
            return message;
        };
        Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);
        this.status = status;
        this.message = message;
        this.clerkTraceId = clerkTraceId;
        this.clerkError = true;
        this.errors = parseErrors(data);
    }
};
var ClerkRuntimeError = class _ClerkRuntimeError extends Error {
    constructor(message, { code }){
        const prefix = "\u{1F512} Clerk:";
        const regex = new RegExp(prefix.replace(" ", "\\s*"), "i");
        const sanitized = message.replace(regex, "");
        const _message = `${prefix} ${sanitized.trim()}

(code="${code}")
`;
        super(_message);
        /**
     * Returns a string representation of the error.
     *
     * @returns {string} A formatted string with the error name and message.
     * @memberof ClerkRuntimeError
     */ this.toString = ()=>{
            return `[${this.name}]
Message:${this.message}`;
        };
        Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);
        this.code = code;
        this.message = _message;
        this.clerkRuntimeError = true;
        this.name = "ClerkRuntimeError";
    }
};
var EmailLinkError = class _EmailLinkError extends Error {
    constructor(code){
        super(code);
        this.code = code;
        this.name = "EmailLinkError";
        Object.setPrototypeOf(this, _EmailLinkError.prototype);
    }
};
function isEmailLinkError(err) {
    return err.name === "EmailLinkError";
}
var EmailLinkErrorCode = {
    Expired: "expired",
    Failed: "failed",
    ClientMismatch: "client_mismatch"
};
var EmailLinkErrorCodeStatus = {
    Expired: "expired",
    Failed: "failed",
    ClientMismatch: "client_mismatch"
};
var DefaultMessages = Object.freeze({
    InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,
    InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,
    MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,
    MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,
    MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`
});
function buildErrorThrower({ packageName, customMessages }) {
    let pkg = packageName;
    const messages = _object_spread({}, DefaultMessages, customMessages);
    function buildMessage(rawMessage, replacements) {
        if (!replacements) {
            return `${pkg}: ${rawMessage}`;
        }
        let msg = rawMessage;
        const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);
        for (const match of matches){
            const replacement = (replacements[match[1]] || "").toString();
            msg = msg.replace(`{{${match[1]}}}`, replacement);
        }
        return `${pkg}: ${msg}`;
    }
    return {
        setPackageName ({ packageName: packageName2 }) {
            if (typeof packageName2 === "string") {
                pkg = packageName2;
            }
            return this;
        },
        setMessages ({ customMessages: customMessages2 }) {
            Object.assign(messages, customMessages2 || {});
            return this;
        },
        throwInvalidPublishableKeyError (params) {
            throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));
        },
        throwInvalidProxyUrl (params) {
            throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));
        },
        throwMissingPublishableKeyError () {
            throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));
        },
        throwMissingSecretKeyError () {
            throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));
        },
        throwMissingClerkProviderError (params) {
            throw new Error(buildMessage(messages.MissingClerkProvider, params));
        },
        throw (message) {
            throw new Error(buildMessage(message));
        }
    };
}
var ClerkWebAuthnError = class extends ClerkRuntimeError {
    constructor(message, { code }){
        super(message, {
            code
        });
        this.code = code;
    }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    ClerkAPIResponseError,
    ClerkRuntimeError,
    ClerkWebAuthnError,
    EmailLinkError,
    EmailLinkErrorCode,
    EmailLinkErrorCodeStatus,
    buildErrorThrower,
    errorToJSON,
    is4xxError,
    isCaptchaError,
    isClerkAPIResponseError,
    isClerkRuntimeError,
    isEmailLinkError,
    isKnownError,
    isMetamaskError,
    isNetworkError,
    isPasswordPwnedError,
    isUnauthorizedError,
    isUserLockedError,
    parseError,
    parseErrors
}); //# sourceMappingURL=error.js.map

//# sourceMappingURL=data:application/json;base64,