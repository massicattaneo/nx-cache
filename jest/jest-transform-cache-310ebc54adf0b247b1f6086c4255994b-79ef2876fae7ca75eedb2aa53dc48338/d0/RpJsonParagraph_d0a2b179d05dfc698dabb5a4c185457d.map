{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/components/RpJsonParagraph/RpJsonParagraph.tsx"],"sourcesContent":["import { styled } from \"@mui/material\"\nimport { uniqueIdIterator, useEnhancedDocument } from \"@rp/react/common/rpjson\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport { CLASS_NAMES } from \"../../constants\"\nimport { createReactElements } from \"../../create-react-elements\"\nimport { RpJsonAnnotationStyles } from \"../RpJsonAnnotationStyles\"\nimport { getStatsParagraph } from \"./getStatsParagraph\"\n\ntype RpJsonParagraphProps = {\n  rpjson: RpJsonDocument\n  paragraphNumber: number\n  sentenceNumber: number\n  finds?: Array<string>\n  markupDetections?: boolean\n  className?: string\n}\n\nconst BaseRpJsonParagraph = ({\n  rpjson,\n  paragraphNumber,\n  className,\n  finds = [],\n  markupDetections = false,\n  sentenceNumber,\n}: RpJsonParagraphProps) => {\n  const { lastReactId, stats } = useEnhancedDocument(rpjson)\n  const idIterator = uniqueIdIterator(lastReactId)\n  const paragraph = getStatsParagraph(stats, paragraphNumber, sentenceNumber)\n  const toRender = {\n    type: \"PAGE\",\n    content: paragraph ? [paragraph] : [],\n    id: idIterator(),\n    tree: [],\n  }\n  return (\n    <div className={className}>\n      <RpJsonAnnotationStyles highlights={[]}>\n        {createReactElements(\n          toRender,\n          {},\n          {\n            idIterator: idIterator,\n            finds,\n            performance: { markupSentences: true, markupDetections },\n          },\n        )}\n      </RpJsonAnnotationStyles>\n    </div>\n  )\n}\n\nconst RpJsonParagraph = styled(BaseRpJsonParagraph)(({ paragraphNumber, sentenceNumber }) => ({\n  [`& .rpjson-type-sentence`]: {\n    display: \"none\",\n  },\n  [`& .rpjson-type-no-sentence`]: {\n    display: \"none\",\n  },\n  [`& .${CLASS_NAMES.ID_PREFIX}${CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${paragraphNumber}-${sentenceNumber}`]:\n    {\n      display: \"initial\",\n    },\n}))\n\nexport { RpJsonParagraph }\n"],"names":["RpJsonParagraph","BaseRpJsonParagraph","rpjson","paragraphNumber","className","finds","markupDetections","sentenceNumber","lastReactId","stats","useEnhancedDocument","idIterator","uniqueIdIterator","paragraph","getStatsParagraph","toRender","type","content","id","tree","div","RpJsonAnnotationStyles","highlights","createReactElements","performance","markupSentences","styled","display","CLASS_NAMES","ID_PREFIX","SENTENCE_NUMBER_PREFIX"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgESA;;;eAAAA;;;;0BAhEc;wBAC+B;2BAE1B;qCACQ;wCACG;mCACL;AAWlC,MAAMC,sBAAsB,CAAC,EAC3BC,MAAM,EACNC,eAAe,EACfC,SAAS,EACTC,QAAQ,EAAE,EACVC,mBAAmB,KAAK,EACxBC,cAAc,EACO;IACrB,MAAM,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGC,IAAAA,2BAAmB,EAACR;IACnD,MAAMS,aAAaC,IAAAA,wBAAgB,EAACJ;IACpC,MAAMK,YAAYC,IAAAA,oCAAiB,EAACL,OAAON,iBAAiBI;IAC5D,MAAMQ,WAAW;QACfC,MAAM;QACNC,SAASJ,YAAY;YAACA;SAAU,GAAG,EAAE;QACrCK,IAAIP;QACJQ,MAAM,EAAE;IACV;IACA,qBACE,qBAACC;QAAIhB,WAAWA;kBACd,cAAA,qBAACiB,8CAAsB;YAACC,YAAY,EAAE;sBACnCC,IAAAA,wCAAmB,EAClBR,UACA,CAAC,GACD;gBACEJ,YAAYA;gBACZN;gBACAmB,aAAa;oBAAEC,iBAAiB;oBAAMnB;gBAAiB;YACzD;;;AAKV;AAEA,MAAMN,kBAAkB0B,IAAAA,gBAAM,EAACzB,qBAAqB,CAAC,EAAEE,eAAe,EAAEI,cAAc,EAAE,GAAM,CAAA;QAC5F,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAE;YAC3BoB,SAAS;QACX;QACA,CAAC,CAAC,0BAA0B,CAAC,CAAC,EAAE;YAC9BA,SAAS;QACX;QACA,CAAC,CAAC,GAAG,EAAEC,sBAAW,CAACC,SAAS,CAAC,EAAED,sBAAW,CAACE,sBAAsB,CAAC,EAAE3B,gBAAgB,CAAC,EAAEI,eAAe,CAAC,CAAC,EACtG;YACEoB,SAAS;QACX;IACJ,CAAA"}