{"version":3,"sources":["../src/error.ts"],"sourcesContent":["import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function isCaptchaError(e: ClerkAPIResponseError): boolean {\n  return ['captcha_invalid', 'captcha_not_enabled', 'captcha_missing_token'].includes(e.errors[0].code);\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any): error is ClerkAPIResponseError | ClerkRuntimeError | MetamaskError {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport function errorToJSON(error: ClerkAPIError | null): ClerkAPIErrorJSON {\n  return {\n    code: error?.code || '',\n    message: error?.message || '',\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    const prefix = 'ðŸ”’ Clerk:';\n    const regex = new RegExp(prefix.replace(' ', '\\\\s*'), 'i');\n    const sanitized = message.replace(regex, '');\n    const _message = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n    super(_message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = 'ClerkRuntimeError';\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   * @memberof ClerkRuntimeError\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    this.name = 'EmailLinkError' as const;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err.name === 'EmailLinkError';\n}\n\n/** @deprecated Please use `EmailLinkErrorCodeStatus` instead.*/\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nexport const EmailLinkErrorCodeStatus = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n} as const;\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n\ntype ClerkWebAuthnErrorCode =\n  // Generic\n  | 'passkey_not_supported'\n  | 'passkey_pa_not_supported'\n  | 'passkey_invalid_rpID_or_domain'\n  | 'passkey_already_exists'\n  | 'passkey_operation_aborted'\n  // Retrieval\n  | 'passkey_retrieval_cancelled'\n  | 'passkey_retrieval_failed'\n  // Registration\n  | 'passkey_registration_cancelled'\n  | 'passkey_registration_failed';\n\nexport class ClerkWebAuthnError extends ClerkRuntimeError {\n  /**\n   * A unique code identifying the error, can be used for localization.\n   */\n  code: ClerkWebAuthnErrorCode;\n\n  constructor(message: string, { code }: { code: ClerkWebAuthnErrorCode }) {\n    super(message, { code });\n    this.code = code;\n  }\n}\n"],"names":["error_exports","__export","ClerkAPIResponseError","ClerkRuntimeError","ClerkWebAuthnError","EmailLinkError","EmailLinkErrorCode","EmailLinkErrorCodeStatus","buildErrorThrower","errorToJSON","is4xxError","isCaptchaError","isClerkAPIResponseError","isClerkRuntimeError","isEmailLinkError","isKnownError","isMetamaskError","isNetworkError","isPasswordPwnedError","isUnauthorizedError","isUserLockedError","parseError","parseErrors","module","exports","__toCommonJS","e","status","code","errors","includes","message","name","toLowerCase","replace","error","err","data","length","map","longMessage","long_message","meta","paramName","param_name","sessionId","session_id","emailAddresses","email_addresses","identifiers","zxcvbn","_ClerkAPIResponseError","Error","constructor","clerkTraceId","toString","JSON","stringify","Object","setPrototypeOf","prototype","clerkError","_ClerkRuntimeError","prefix","regex","RegExp","sanitized","_message","trim","clerkRuntimeError","_EmailLinkError","Expired","Failed","ClientMismatch","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","packageName","customMessages","pkg","messages","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","setPackageName","setMessages","assign","throwInvalidPublishableKeyError","params","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}