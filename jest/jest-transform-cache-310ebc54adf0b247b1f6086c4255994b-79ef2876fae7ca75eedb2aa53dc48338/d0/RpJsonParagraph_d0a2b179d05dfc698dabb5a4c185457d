9ca0a36b8995029e16e1c1ec29abde9b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RpJsonParagraph", {
    enumerable: true,
    get: function() {
        return RpJsonParagraph;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _material = require("@mui/material");
const _rpjson = require("@rp/react/common/rpjson");
const _constants = require("../../constants");
const _createreactelements = require("../../create-react-elements");
const _RpJsonAnnotationStyles = require("../RpJsonAnnotationStyles");
const _getStatsParagraph = require("./getStatsParagraph");
const BaseRpJsonParagraph = ({ rpjson, paragraphNumber, className, finds = [], markupDetections = false, sentenceNumber })=>{
    const { lastReactId, stats } = (0, _rpjson.useEnhancedDocument)(rpjson);
    const idIterator = (0, _rpjson.uniqueIdIterator)(lastReactId);
    const paragraph = (0, _getStatsParagraph.getStatsParagraph)(stats, paragraphNumber, sentenceNumber);
    const toRender = {
        type: "PAGE",
        content: paragraph ? [
            paragraph
        ] : [],
        id: idIterator(),
        tree: []
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: className,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_RpJsonAnnotationStyles.RpJsonAnnotationStyles, {
            highlights: [],
            children: (0, _createreactelements.createReactElements)(toRender, {}, {
                idIterator: idIterator,
                finds,
                performance: {
                    markupSentences: true,
                    markupDetections
                }
            })
        })
    });
};
const RpJsonParagraph = (0, _material.styled)(BaseRpJsonParagraph)(({ paragraphNumber, sentenceNumber })=>({
        [`& .rpjson-type-sentence`]: {
            display: "none"
        },
        [`& .rpjson-type-no-sentence`]: {
            display: "none"
        },
        [`& .${_constants.CLASS_NAMES.ID_PREFIX}${_constants.CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${paragraphNumber}-${sentenceNumber}`]: {
            display: "initial"
        }
    }));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3JwanNvbi9zcmMvbGliL2NvbXBvbmVudHMvUnBKc29uUGFyYWdyYXBoL1JwSnNvblBhcmFncmFwaC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIlxuaW1wb3J0IHsgdW5pcXVlSWRJdGVyYXRvciwgdXNlRW5oYW5jZWREb2N1bWVudCB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL3JwanNvblwiXG5pbXBvcnQgeyBScEpzb25Eb2N1bWVudCB9IGZyb20gXCJAcnAvcmVhY3QvcnBqc29uL3R5cGVzXCJcbmltcG9ydCB7IENMQVNTX05BTUVTIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50c1wiXG5pbXBvcnQgeyBjcmVhdGVSZWFjdEVsZW1lbnRzIH0gZnJvbSBcIi4uLy4uL2NyZWF0ZS1yZWFjdC1lbGVtZW50c1wiXG5pbXBvcnQgeyBScEpzb25Bbm5vdGF0aW9uU3R5bGVzIH0gZnJvbSBcIi4uL1JwSnNvbkFubm90YXRpb25TdHlsZXNcIlxuaW1wb3J0IHsgZ2V0U3RhdHNQYXJhZ3JhcGggfSBmcm9tIFwiLi9nZXRTdGF0c1BhcmFncmFwaFwiXG5cbnR5cGUgUnBKc29uUGFyYWdyYXBoUHJvcHMgPSB7XG4gIHJwanNvbjogUnBKc29uRG9jdW1lbnRcbiAgcGFyYWdyYXBoTnVtYmVyOiBudW1iZXJcbiAgc2VudGVuY2VOdW1iZXI6IG51bWJlclxuICBmaW5kcz86IEFycmF5PHN0cmluZz5cbiAgbWFya3VwRGV0ZWN0aW9ucz86IGJvb2xlYW5cbiAgY2xhc3NOYW1lPzogc3RyaW5nXG59XG5cbmNvbnN0IEJhc2VScEpzb25QYXJhZ3JhcGggPSAoe1xuICBycGpzb24sXG4gIHBhcmFncmFwaE51bWJlcixcbiAgY2xhc3NOYW1lLFxuICBmaW5kcyA9IFtdLFxuICBtYXJrdXBEZXRlY3Rpb25zID0gZmFsc2UsXG4gIHNlbnRlbmNlTnVtYmVyLFxufTogUnBKc29uUGFyYWdyYXBoUHJvcHMpID0+IHtcbiAgY29uc3QgeyBsYXN0UmVhY3RJZCwgc3RhdHMgfSA9IHVzZUVuaGFuY2VkRG9jdW1lbnQocnBqc29uKVxuICBjb25zdCBpZEl0ZXJhdG9yID0gdW5pcXVlSWRJdGVyYXRvcihsYXN0UmVhY3RJZClcbiAgY29uc3QgcGFyYWdyYXBoID0gZ2V0U3RhdHNQYXJhZ3JhcGgoc3RhdHMsIHBhcmFncmFwaE51bWJlciwgc2VudGVuY2VOdW1iZXIpXG4gIGNvbnN0IHRvUmVuZGVyID0ge1xuICAgIHR5cGU6IFwiUEFHRVwiLFxuICAgIGNvbnRlbnQ6IHBhcmFncmFwaCA/IFtwYXJhZ3JhcGhdIDogW10sXG4gICAgaWQ6IGlkSXRlcmF0b3IoKSxcbiAgICB0cmVlOiBbXSxcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgPFJwSnNvbkFubm90YXRpb25TdHlsZXMgaGlnaGxpZ2h0cz17W119PlxuICAgICAgICB7Y3JlYXRlUmVhY3RFbGVtZW50cyhcbiAgICAgICAgICB0b1JlbmRlcixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZEl0ZXJhdG9yOiBpZEl0ZXJhdG9yLFxuICAgICAgICAgICAgZmluZHMsXG4gICAgICAgICAgICBwZXJmb3JtYW5jZTogeyBtYXJrdXBTZW50ZW5jZXM6IHRydWUsIG1hcmt1cERldGVjdGlvbnMgfSxcbiAgICAgICAgICB9LFxuICAgICAgICApfVxuICAgICAgPC9ScEpzb25Bbm5vdGF0aW9uU3R5bGVzPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IFJwSnNvblBhcmFncmFwaCA9IHN0eWxlZChCYXNlUnBKc29uUGFyYWdyYXBoKSgoeyBwYXJhZ3JhcGhOdW1iZXIsIHNlbnRlbmNlTnVtYmVyIH0pID0+ICh7XG4gIFtgJiAucnBqc29uLXR5cGUtc2VudGVuY2VgXToge1xuICAgIGRpc3BsYXk6IFwibm9uZVwiLFxuICB9LFxuICBbYCYgLnJwanNvbi10eXBlLW5vLXNlbnRlbmNlYF06IHtcbiAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgfSxcbiAgW2AmIC4ke0NMQVNTX05BTUVTLklEX1BSRUZJWH0ke0NMQVNTX05BTUVTLlNFTlRFTkNFX05VTUJFUl9QUkVGSVh9JHtwYXJhZ3JhcGhOdW1iZXJ9LSR7c2VudGVuY2VOdW1iZXJ9YF06XG4gICAge1xuICAgICAgZGlzcGxheTogXCJpbml0aWFsXCIsXG4gICAgfSxcbn0pKVxuXG5leHBvcnQgeyBScEpzb25QYXJhZ3JhcGggfVxuIl0sIm5hbWVzIjpbIlJwSnNvblBhcmFncmFwaCIsIkJhc2VScEpzb25QYXJhZ3JhcGgiLCJycGpzb24iLCJwYXJhZ3JhcGhOdW1iZXIiLCJjbGFzc05hbWUiLCJmaW5kcyIsIm1hcmt1cERldGVjdGlvbnMiLCJzZW50ZW5jZU51bWJlciIsImxhc3RSZWFjdElkIiwic3RhdHMiLCJ1c2VFbmhhbmNlZERvY3VtZW50IiwiaWRJdGVyYXRvciIsInVuaXF1ZUlkSXRlcmF0b3IiLCJwYXJhZ3JhcGgiLCJnZXRTdGF0c1BhcmFncmFwaCIsInRvUmVuZGVyIiwidHlwZSIsImNvbnRlbnQiLCJpZCIsInRyZWUiLCJkaXYiLCJScEpzb25Bbm5vdGF0aW9uU3R5bGVzIiwiaGlnaGxpZ2h0cyIsImNyZWF0ZVJlYWN0RWxlbWVudHMiLCJwZXJmb3JtYW5jZSIsIm1hcmt1cFNlbnRlbmNlcyIsInN0eWxlZCIsImRpc3BsYXkiLCJDTEFTU19OQU1FUyIsIklEX1BSRUZJWCIsIlNFTlRFTkNFX05VTUJFUl9QUkVGSVgiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWdFU0E7OztlQUFBQTs7OzswQkFoRWM7d0JBQytCOzJCQUUxQjtxQ0FDUTt3Q0FDRzttQ0FDTDtBQVdsQyxNQUFNQyxzQkFBc0IsQ0FBQyxFQUMzQkMsTUFBTSxFQUNOQyxlQUFlLEVBQ2ZDLFNBQVMsRUFDVEMsUUFBUSxFQUFFLEVBQ1ZDLG1CQUFtQixLQUFLLEVBQ3hCQyxjQUFjLEVBQ087SUFDckIsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxJQUFBQSwyQkFBbUIsRUFBQ1I7SUFDbkQsTUFBTVMsYUFBYUMsSUFBQUEsd0JBQWdCLEVBQUNKO0lBQ3BDLE1BQU1LLFlBQVlDLElBQUFBLG9DQUFpQixFQUFDTCxPQUFPTixpQkFBaUJJO0lBQzVELE1BQU1RLFdBQVc7UUFDZkMsTUFBTTtRQUNOQyxTQUFTSixZQUFZO1lBQUNBO1NBQVUsR0FBRyxFQUFFO1FBQ3JDSyxJQUFJUDtRQUNKUSxNQUFNLEVBQUU7SUFDVjtJQUNBLHFCQUNFLHFCQUFDQztRQUFJaEIsV0FBV0E7a0JBQ2QsY0FBQSxxQkFBQ2lCLDhDQUFzQjtZQUFDQyxZQUFZLEVBQUU7c0JBQ25DQyxJQUFBQSx3Q0FBbUIsRUFDbEJSLFVBQ0EsQ0FBQyxHQUNEO2dCQUNFSixZQUFZQTtnQkFDWk47Z0JBQ0FtQixhQUFhO29CQUFFQyxpQkFBaUI7b0JBQU1uQjtnQkFBaUI7WUFDekQ7OztBQUtWO0FBRUEsTUFBTU4sa0JBQWtCMEIsSUFBQUEsZ0JBQU0sRUFBQ3pCLHFCQUFxQixDQUFDLEVBQUVFLGVBQWUsRUFBRUksY0FBYyxFQUFFLEdBQU0sQ0FBQTtRQUM1RixDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxFQUFFO1lBQzNCb0IsU0FBUztRQUNYO1FBQ0EsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsRUFBRTtZQUM5QkEsU0FBUztRQUNYO1FBQ0EsQ0FBQyxDQUFDLEdBQUcsRUFBRUMsc0JBQVcsQ0FBQ0MsU0FBUyxDQUFDLEVBQUVELHNCQUFXLENBQUNFLHNCQUFzQixDQUFDLEVBQUUzQixnQkFBZ0IsQ0FBQyxFQUFFSSxlQUFlLENBQUMsQ0FBQyxFQUN0RztZQUNFb0IsU0FBUztRQUNYO0lBQ0osQ0FBQSJ9