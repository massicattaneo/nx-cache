6085c8b49ce8c61e5c1cbecd82e0d407
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CompanySearchAutocomplete", {
    enumerable: true,
    get: function() {
        return CompanySearchAutocomplete;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _isEmpty = /*#__PURE__*/ _interop_require_default(require("lodash/isEmpty"));
const _utils = require("@rp/common/utils");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _chat = require("@rp/react/web/chat");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _searchautosuggestinput = require("@rp/react/web/common/search-autosuggest-input");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const MAX_OPTIONS = 1;
const CompanySearchAutocomplete = ({ companies, workflowDescription, handleCompanySelection, disjunctiveFacets })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [inputValue, setInputValue] = (0, _react.useState)("");
    // Check if max options limit is reached
    const isMaxOptionsReached = companies && companies.length >= MAX_OPTIONS;
    const isCompanyAlreadySelected = (company)=>{
        return companies === null || companies === void 0 ? void 0 : companies.some((c)=>c.key === company.id);
    };
    const handleCompanySelect = (company)=>{
        if (((0, _suggestion.isCompanySuggestion)(company) || (0, _suggestion.isETFSuggestion)(company)) && !isMaxOptionsReached && !isCompanyAlreadySelected(company) && !(0, _isEmpty.default)(company.key)) {
            handleCompanySelection([
                ...companies !== null && companies !== void 0 ? companies : [],
                {
                    key: company.key,
                    name: company.name,
                    type: company.entityType
                }
            ]);
            setInputValue("");
        }
    };
    const handleClear = ()=>{
        setInputValue("");
        handleCompanySelection([]);
    };
    // Handle company removal
    const handleCompanyRemove = (companyId)=>{
        var _companies_filter;
        handleCompanySelection((_companies_filter = companies === null || companies === void 0 ? void 0 : companies.filter((company)=>company.key !== companyId)) !== null && _companies_filter !== void 0 ? _companies_filter : []);
    };
    var _companies_map;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_compositecomponents.BriefStepsLegend, {
                sx: {
                    alignItems: "flex-start",
                    mb: 2
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        children: "Which company would you like me to analyze?"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        mt: "14px",
                        children: workflowDescription
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                bgcolor: "elevation.dp01",
                p: 2,
                borderRadius: 1,
                mt: 1.5,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        bgcolor: "elevation.dp08",
                        borderRadius: 0.5,
                        display: "flex",
                        alignItems: "center",
                        mb: 1.5,
                        width: "fit-content",
                        py: 0.25,
                        px: 0.5,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Apartment, {
                                sx: {
                                    mr: 1,
                                    height: "20px",
                                    width: "20px"
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                "data-testid": "company-search-autocomplete-title",
                                fontSize: "14px",
                                fontWeight: "bold",
                                children: MAX_OPTIONS > 1 ? "Companies" : "Company"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautosuggestinput.AutosuggestInputWithChips, {
                        variant: "search",
                        forceShowRecentSearches: false,
                        chips: companies === null || companies === void 0 ? void 0 : companies.map((company)=>{
                            return {
                                id: company.key,
                                name: company.name,
                                type: company.type
                            };
                        }),
                        excludeQueryTypes: [
                            "savedSearch"
                        ],
                        hideTextInput: isMaxOptionsReached,
                        placeholder: "Search for companies",
                        selectedItems: (_companies_map = companies === null || companies === void 0 ? void 0 : companies.map((company)=>company.key)) !== null && _companies_map !== void 0 ? _companies_map : [],
                        renderChips: (chips)=>{
                            if (!chips.length) return null;
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                display: "flex",
                                flexWrap: "wrap",
                                alignItems: "center",
                                gap: 1,
                                children: chips.map((chip)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_chat.ChatFilterChip, {
                                        onClose: ()=>handleCompanyRemove(chip.id),
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Apartment, {}),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                                whiteSpace: "nowrap",
                                                textOverflow: "ellipsis",
                                                overflow: "hidden",
                                                maxWidth: isMobile ? "90%" : undefined,
                                                children: chip.name && (0, _utils.truncateString)(chip.name, 20)
                                            })
                                        ]
                                    }, chip.id))
                            });
                        },
                        onChange: handleCompanySelect,
                        disjunctiveFacets: disjunctiveFacets,
                        startAdornment: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                            position: "start",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {
                                sx: {
                                    color: "text.primary",
                                    width: 2,
                                    height: 2
                                }
                            })
                        }),
                        endAdornment: inputValue || !(0, _isEmpty.default)(companies) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                            position: "end",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Clear, {
                                "data-testid": "end-adornment",
                                sx: {
                                    cursor: "pointer",
                                    color: "text.primary",
                                    "&:hover": {
                                        opacity: 0.8
                                    },
                                    width: isMobile ? 20 : 2,
                                    height: isMobile ? 20 : 2
                                },
                                onClick: handleClear
                            })
                        }) : null
                    })
                ]
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,