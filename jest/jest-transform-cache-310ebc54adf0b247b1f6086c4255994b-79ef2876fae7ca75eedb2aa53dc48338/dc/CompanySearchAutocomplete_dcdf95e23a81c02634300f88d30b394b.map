{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/workflow/src/lib/CompanySearchAutocomplete/CompanySearchAutocomplete.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport isEmpty from \"lodash/isEmpty\"\nimport { ChatWatchlistEntity } from \"@rp/common/api-types\"\nimport { truncateString } from \"@rp/common/utils\"\nimport {\n  EnhancedCompanySuggestion,\n  EnhancedSuggestion,\n  isCompanySuggestion,\n  isETFSuggestion,\n} from \"@rp/react/tanstack-api/suggestion\"\nimport { ChatFilterChip } from \"@rp/react/web/chat\"\nimport { BriefStepsLegend } from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport {\n  AutosuggestInputWithChips,\n  WatchlistFacet,\n} from \"@rp/react/web/common/search-autosuggest-input\"\nimport { Box, InputAdornment, Typography } from \"@rp/react/web/mui/core\"\nimport { Apartment, Clear, Search } from \"@rp/react/web/mui/icons\"\n\nconst MAX_OPTIONS = 1\n\ntype CompanySearchAutocompleteProps = {\n  workflowDescription: string\n  companies?: Array<ChatWatchlistEntity>\n  handleCompanySelection: (companies: Array<ChatWatchlistEntity>) => void\n  disjunctiveFacets?: Array<WatchlistFacet>\n}\n\nconst CompanySearchAutocomplete = ({\n  companies,\n  workflowDescription,\n  handleCompanySelection,\n  disjunctiveFacets,\n}: CompanySearchAutocompleteProps) => {\n  const { isMobile } = useDeviceInfo()\n  const [inputValue, setInputValue] = useState(\"\")\n  // Check if max options limit is reached\n  const isMaxOptionsReached = companies && companies.length >= MAX_OPTIONS\n\n  const isCompanyAlreadySelected = (company: EnhancedSuggestion) => {\n    return companies?.some(c => c.key === company.id)\n  }\n\n  const handleCompanySelect = (company: EnhancedSuggestion) => {\n    if (\n      (isCompanySuggestion(company) || isETFSuggestion(company)) &&\n      !isMaxOptionsReached &&\n      !isCompanyAlreadySelected(company) &&\n      !isEmpty(company.key)\n    ) {\n      handleCompanySelection([\n        ...(companies ?? []),\n        {\n          key: company.key,\n          name: company.name,\n          type: company.entityType,\n        },\n      ])\n      setInputValue(\"\")\n    }\n  }\n\n  const handleClear = () => {\n    setInputValue(\"\")\n    handleCompanySelection([])\n  }\n\n  // Handle company removal\n  const handleCompanyRemove = (companyId: string) => {\n    handleCompanySelection(companies?.filter(company => company.key !== companyId) ?? [])\n  }\n\n  return (\n    <>\n      <BriefStepsLegend sx={{ alignItems: \"flex-start\", mb: 2 }}>\n        <Typography>Which company would you like me to analyze?</Typography>\n        <Typography mt={\"14px\"}>{workflowDescription}</Typography>\n      </BriefStepsLegend>\n      <Box bgcolor={\"elevation.dp01\"} p={2} borderRadius={1} mt={1.5}>\n        <Box\n          bgcolor={\"elevation.dp08\"}\n          borderRadius={0.5}\n          display={\"flex\"}\n          alignItems={\"center\"}\n          mb={1.5}\n          width={\"fit-content\"}\n          py={0.25}\n          px={0.5}\n        >\n          <Apartment sx={{ mr: 1, height: \"20px\", width: \"20px\" }} />\n          <Typography\n            data-testid=\"company-search-autocomplete-title\"\n            fontSize={\"14px\"}\n            fontWeight={\"bold\"}\n          >\n            {MAX_OPTIONS > 1 ? \"Companies\" : \"Company\"}\n          </Typography>\n        </Box>\n        <AutosuggestInputWithChips\n          variant=\"search\"\n          forceShowRecentSearches={false}\n          chips={\n            companies?.map(company => {\n              return {\n                id: company.key,\n                name: company.name,\n                type: company.type,\n              }\n            }) as Array<EnhancedCompanySuggestion>\n          }\n          excludeQueryTypes={[\"savedSearch\"]}\n          hideTextInput={isMaxOptionsReached}\n          placeholder={\"Search for companies\"}\n          selectedItems={companies?.map(company => company.key) ?? []}\n          renderChips={chips => {\n            if (!chips.length) return null\n            return (\n              <Box display={\"flex\"} flexWrap={\"wrap\"} alignItems={\"center\"} gap={1}>\n                {(chips as Array<EnhancedCompanySuggestion>).map(chip => (\n                  <ChatFilterChip key={chip.id} onClose={() => handleCompanyRemove(chip.id)}>\n                    <Apartment />\n                    <Typography\n                      whiteSpace={\"nowrap\"}\n                      textOverflow={\"ellipsis\"}\n                      overflow={\"hidden\"}\n                      maxWidth={isMobile ? \"90%\" : undefined}\n                    >\n                      {chip.name && truncateString(chip.name, 20)}\n                    </Typography>\n                  </ChatFilterChip>\n                ))}\n              </Box>\n            )\n          }}\n          onChange={handleCompanySelect}\n          disjunctiveFacets={disjunctiveFacets}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <Search sx={{ color: \"text.primary\", width: 2, height: 2 }} />\n            </InputAdornment>\n          }\n          endAdornment={\n            inputValue || !isEmpty(companies) ? (\n              <InputAdornment position=\"end\">\n                <Clear\n                  data-testid=\"end-adornment\"\n                  sx={{\n                    cursor: \"pointer\",\n                    color: \"text.primary\",\n                    \"&:hover\": { opacity: 0.8 },\n                    width: isMobile ? 20 : 2,\n                    height: isMobile ? 20 : 2,\n                  }}\n                  onClick={handleClear}\n                />\n              </InputAdornment>\n            ) : null\n          }\n        />\n      </Box>\n    </>\n  )\n}\n\nexport { CompanySearchAutocomplete }\n"],"names":["CompanySearchAutocomplete","MAX_OPTIONS","companies","workflowDescription","handleCompanySelection","disjunctiveFacets","isMobile","useDeviceInfo","inputValue","setInputValue","useState","isMaxOptionsReached","length","isCompanyAlreadySelected","company","some","c","key","id","handleCompanySelect","isCompanySuggestion","isETFSuggestion","isEmpty","name","type","entityType","handleClear","handleCompanyRemove","companyId","filter","BriefStepsLegend","sx","alignItems","mb","Typography","mt","Box","bgcolor","p","borderRadius","display","width","py","px","Apartment","mr","height","data-testid","fontSize","fontWeight","AutosuggestInputWithChips","variant","forceShowRecentSearches","chips","map","excludeQueryTypes","hideTextInput","placeholder","selectedItems","renderChips","flexWrap","gap","chip","ChatFilterChip","onClose","whiteSpace","textOverflow","overflow","maxWidth","undefined","truncateString","onChange","startAdornment","InputAdornment","position","Search","color","endAdornment","Clear","cursor","opacity","onClick"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}