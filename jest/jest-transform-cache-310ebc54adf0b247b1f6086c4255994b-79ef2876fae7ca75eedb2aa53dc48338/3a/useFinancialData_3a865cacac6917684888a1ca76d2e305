8a0d54cacf9ed468c49ea75dae0799f4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFinancialData", {
    enumerable: true,
    get: function() {
        return useFinancialData;
    }
});
const _react = require("react");
const _axios = require("axios");
const _financialdata = require("@rp/common/zod-contracts/financial-data");
const _reactquery = require("@tanstack/react-query");
const _bulkFetcher = require("./bulkFetcher");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const staleTime = {
    companyQuote: 1000 * 60,
    companyLatestSurprise: 1000 * 60 * 60 * 3,
    companyPriceChanges: 1000 * 60,
    companySentiment: 1000 * 60 * 60 * 24,
    companyPriceTarget: 1000 * 60 * 60 * 3,
    companyAnalystRatings: 1000 * 60 * 60 * 3,
    companyIncomeStatement: 1000 * 60 * 60 * 3,
    companyCashFlowStatement: 1000 * 60 * 60 * 3,
    companyBalanceStatement: 1000 * 60 * 60 * 3,
    companyKeyMetrics: 1000 * 60 * 60 * 3,
    companyRatios: 1000 * 60 * 60 * 3,
    companyCurrency: 1000 * 60 * 60 * 24
};
const bulkFetchers = _financialdata.financialDataEndpoints.options.reduce((acc, endpoint)=>{
    return _object_spread_props(_object_spread({}, acc), {
        [endpoint]: (0, _bulkFetcher.bulkFetcher)(endpoint)
    });
}, {});
function useFinancialData(body) {
    const allQueries = (0, _react.useMemo)(()=>{
        return _financialdata.financialDataEndpoints.options.flatMap((endpoint)=>{
            var _body_endpoint;
            var _body_endpoint_entityIds;
            const entityIds = (_body_endpoint_entityIds = (_body_endpoint = body[endpoint]) === null || _body_endpoint === void 0 ? void 0 : _body_endpoint.entityIds) !== null && _body_endpoint_entityIds !== void 0 ? _body_endpoint_entityIds : [];
            return entityIds.map((entityId)=>({
                    queryKey: [
                        "financial-data",
                        endpoint,
                        entityId
                    ],
                    queryFn: async ()=>bulkFetchers[endpoint](entityId),
                    staleTime: staleTime[endpoint],
                    refetchInterval: staleTime[endpoint],
                    refetchOnWindowFocus: true,
                    keepPreviousData: true,
                    retry: (attempt, error)=>{
                        var _error_response;
                        if (!(error instanceof _axios.AxiosError)) return true;
                        var _error_response_status;
                        return attempt < 3 && [
                            500,
                            502,
                            503,
                            504,
                            408,
                            429
                        ].includes((_error_response_status = (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) !== null && _error_response_status !== void 0 ? _error_response_status : 0);
                    },
                    retryDelay: (attempt, error)=>{
                        var _error_response;
                        if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 429) return 1000 * 60 // 1 minute for rate limiting
                        ;
                        return Math.min(2000 * 1.5 ** attempt, 5000);
                    }
                }));
        });
    }, [
        body
    ]);
    const results = (0, _reactquery.useQueries)({
        queries: allQueries
    });
    return (0, _react.useMemo)(()=>{
        const ids = _financialdata.financialDataEndpoints.options.map((ep)=>{
            var _body_ep;
            var _body_ep_entityIds;
            return (_body_ep_entityIds = (_body_ep = body[ep]) === null || _body_ep === void 0 ? void 0 : _body_ep.entityIds) !== null && _body_ep_entityIds !== void 0 ? _body_ep_entityIds : [];
        }).flat().filter((value, index, self)=>self.indexOf(value) === index);
        return ids.reduce((acc, entityId)=>{
            return _object_spread_props(_object_spread({}, acc), {
                [entityId]: _financialdata.financialDataEndpoints.options.reduce((endpointAcc, endpoint)=>{
                    const index = allQueries.findIndex((item)=>item.queryKey[1] === endpoint && item.queryKey[2] === entityId);
                    const result = results[index];
                    if (!result) return endpointAcc;
                    return Object.assign(endpointAcc, {
                        [endpoint]: result
                    });
                }, {})
            });
        }, {});
    }, [
        allQueries,
        body,
        results
    ]);
}

//# sourceMappingURL=data:application/json;base64,