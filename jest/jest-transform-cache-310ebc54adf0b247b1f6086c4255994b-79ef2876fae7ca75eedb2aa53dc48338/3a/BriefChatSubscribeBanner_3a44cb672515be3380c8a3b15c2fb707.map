{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/chat/src/lib/BriefChatSubscribeBanner/BriefChatSubscribeBanner.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { Box } from \"@mui/material\"\nimport { useUserBriefConfigs } from \"@rp/react/tanstack-api/brief\"\nimport { useWatchlistEntities } from \"@rp/react/tanstack-api/watchlist\"\nimport { useIntersectionObserver } from \"@rp/react/web/common/hooks\"\nimport { Button, IconButton, Slide, Typography } from \"@rp/react/web/mui/core\"\nimport { Close, NotificationAddOutlined } from \"@rp/react/web/mui/icons\"\nimport { BRIEF_ROUTE_CREATE } from \"@rp/react/web/router\"\n\ntype Props = {\n  show: boolean\n  watchlistId: string | undefined\n  parentScrollContainer: HTMLDivElement | null\n  rootMargin?: string\n}\n\nconst sessionKey = (watchlistId: string | undefined) =>\n  `brief-chat-subscribe-banner-${watchlistId || \"\"}`\n\nexport const BriefChatSubscribeBanner = ({\n  show,\n  watchlistId = \"\",\n  parentScrollContainer,\n  rootMargin,\n}: Props) => {\n  const [closed, setClosed] = useState(false)\n  const navigate = useNavigate()\n  const { data: briefConfigs } = useUserBriefConfigs()\n  const { entities, isLoadingWatchlist, isLoadingEntities } = useWatchlistEntities(watchlistId)\n  const hasCompanies = entities.some(item => item.category === \"Companies\")\n  const [ref, setRef] = useState<HTMLDivElement | null>(null)\n  const subscribedBrief = briefConfigs?.find(brief => brief.watchlistIds.includes(watchlistId))\n  const isBannerClosed = sessionStorage.getItem(sessionKey(watchlistId)) === \"true\"\n  const [isOnScreen, setIsOnScreen] = useState(false)\n  const onIntersectionChange = useCallback(([entry]: Array<IntersectionObserverEntry>) => {\n    setIsOnScreen(prev => prev || entry.isIntersecting)\n  }, [])\n\n  useIntersectionObserver(\n    ref,\n    {\n      root: parentScrollContainer,\n      rootMargin,\n    },\n    onIntersectionChange,\n  )\n\n  if (\n    !show ||\n    subscribedBrief ||\n    isBannerClosed ||\n    closed ||\n    isLoadingWatchlist ||\n    isLoadingEntities ||\n    !hasCompanies\n  )\n    return null\n\n  return (\n    <Box ref={setRef}>\n      <Slide direction=\"right\" in={isOnScreen} mountOnEnter unmountOnExit timeout={500}>\n        <Box\n          sx={{\n            backgroundColor: \"elevation.dp06\",\n            mx: 2,\n            p: 1.5,\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: 1,\n            borderRadius: 2,\n            my: 3,\n          }}\n        >\n          <Typography sx={{ fontSize: 14, flexGrow: 1, pl: 1 }}>\n            Get email updates on your watchlist.\n          </Typography>\n          <Button\n            sx={{ height: 28 }}\n            startIcon={<NotificationAddOutlined />}\n            variant=\"contained-light\"\n            size=\"small\"\n            onClick={() => navigate(`${BRIEF_ROUTE_CREATE}?watchlist-id=${watchlistId}`)}\n          >\n            Subscribe\n          </Button>\n          <IconButton\n            size=\"small\"\n            onClick={() => {\n              sessionStorage.setItem(sessionKey(watchlistId), \"true\")\n              setClosed(true)\n            }}\n          >\n            <Close />\n          </IconButton>\n        </Box>\n      </Slide>\n    </Box>\n  )\n}\n"],"names":["BriefChatSubscribeBanner","sessionKey","watchlistId","show","parentScrollContainer","rootMargin","closed","setClosed","useState","navigate","useNavigate","data","briefConfigs","useUserBriefConfigs","entities","isLoadingWatchlist","isLoadingEntities","useWatchlistEntities","hasCompanies","some","item","category","ref","setRef","subscribedBrief","find","brief","watchlistIds","includes","isBannerClosed","sessionStorage","getItem","isOnScreen","setIsOnScreen","onIntersectionChange","useCallback","entry","prev","isIntersecting","useIntersectionObserver","root","Box","Slide","direction","in","mountOnEnter","unmountOnExit","timeout","sx","backgroundColor","mx","p","display","alignItems","gap","borderRadius","my","Typography","fontSize","flexGrow","pl","Button","height","startIcon","NotificationAddOutlined","variant","size","onClick","BRIEF_ROUTE_CREATE","IconButton","setItem","Close"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoBaA;;;eAAAA;;;;uBApByB;gCACV;0BACR;uBACgB;2BACC;uBACG;sBACc;uBACP;wBACZ;AASnC,MAAMC,aAAa,CAACC,cAClB,CAAC,4BAA4B,EAAEA,eAAe,GAAG,CAAC;AAE7C,MAAMF,2BAA2B,CAAC,EACvCG,IAAI,EACJD,cAAc,EAAE,EAChBE,qBAAqB,EACrBC,UAAU,EACJ;IACN,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,eAAQ,EAAC;IACrC,MAAMC,WAAWC,IAAAA,2BAAW;IAC5B,MAAM,EAAEC,MAAMC,YAAY,EAAE,GAAGC,IAAAA,0BAAmB;IAClD,MAAM,EAAEC,QAAQ,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAE,GAAGC,IAAAA,+BAAoB,EAACf;IACjF,MAAMgB,eAAeJ,SAASK,IAAI,CAACC,CAAAA,OAAQA,KAAKC,QAAQ,KAAK;IAC7D,MAAM,CAACC,KAAKC,OAAO,GAAGf,IAAAA,eAAQ,EAAwB;IACtD,MAAMgB,kBAAkBZ,yBAAAA,mCAAAA,aAAca,IAAI,CAACC,CAAAA,QAASA,MAAMC,YAAY,CAACC,QAAQ,CAAC1B;IAChF,MAAM2B,iBAAiBC,eAAeC,OAAO,CAAC9B,WAAWC,kBAAkB;IAC3E,MAAM,CAAC8B,YAAYC,cAAc,GAAGzB,IAAAA,eAAQ,EAAC;IAC7C,MAAM0B,uBAAuBC,IAAAA,kBAAW,EAAC,CAAC,CAACC,MAAwC;QACjFH,cAAcI,CAAAA,OAAQA,QAAQD,MAAME,cAAc;IACpD,GAAG,EAAE;IAELC,IAAAA,8BAAuB,EACrBjB,KACA;QACEkB,MAAMpC;QACNC;IACF,GACA6B;IAGF,IACE,CAAC/B,QACDqB,mBACAK,kBACAvB,UACAS,sBACAC,qBACA,CAACE,cAED,OAAO;IAET,qBACE,qBAACuB,aAAG;QAACnB,KAAKC;kBACR,cAAA,qBAACmB,WAAK;YAACC,WAAU;YAAQC,IAAIZ;YAAYa,YAAY;YAACC,aAAa;YAACC,SAAS;sBAC3E,cAAA,sBAACN,aAAG;gBACFO,IAAI;oBACFC,iBAAiB;oBACjBC,IAAI;oBACJC,GAAG;oBACHC,SAAS;oBACTC,YAAY;oBACZC,KAAK;oBACLC,cAAc;oBACdC,IAAI;gBACN;;kCAEA,qBAACC,gBAAU;wBAACT,IAAI;4BAAEU,UAAU;4BAAIC,UAAU;4BAAGC,IAAI;wBAAE;kCAAG;;kCAGtD,qBAACC,YAAM;wBACLb,IAAI;4BAAEc,QAAQ;wBAAG;wBACjBC,yBAAW,qBAACC,8BAAuB;wBACnCC,SAAQ;wBACRC,MAAK;wBACLC,SAAS,IAAM1D,SAAS,CAAC,EAAE2D,0BAAkB,CAAC,cAAc,EAAElE,YAAY,CAAC;kCAC5E;;kCAGD,qBAACmE,gBAAU;wBACTH,MAAK;wBACLC,SAAS;4BACPrC,eAAewC,OAAO,CAACrE,WAAWC,cAAc;4BAChDK,UAAU;wBACZ;kCAEA,cAAA,qBAACgE,YAAK;;;;;;AAMlB"}