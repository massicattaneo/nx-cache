af1bee4fe1998afe5f198382b561db6d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAutosuggestInput", {
    enumerable: true,
    get: function() {
        return useAutosuggestInput;
    }
});
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _hooks = require("@rp/react/common/hooks");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _utils = require("@rp/react/web/common/vendors/utils");
const _router = require("@rp/react/web/router");
const _reactquery = require("@tanstack/react-query");
const _useHandleKeyDown = require("./useHandleKeyDown");
const filterByQueryTypes = (data, exclude)=>{
    if (!exclude) return data;
    return data.filter((item)=>{
        return !(exclude.includes("savedSearch") && (0, _suggestion.isSavedSearchSuggestion)(item) || exclude.includes("source") && (0, _suggestion.isSourceSuggestion)(item));
    });
};
const useAutosuggestInput = ({ onChange, forceShowRecentSearches, onSearchClick, selectedItems, excludeQueryTypes, keepOpen = false, useSuggestionsHook = _suggestion.useSuggestions, categories, group1, perPage = 20, includeSearches = true, includeKeyword = true })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const [open, setOpen] = (0, _react.useState)(keepOpen);
    const [visibleSubsidiaries, setVisibleSubsidiaries] = (0, _react.useState)([]);
    const navigate = (0, _reactrouterdom.useNavigate)();
    const location = (0, _reactrouterdom.useLocation)();
    const closePopper = (0, _react.useCallback)(()=>{
        !keepOpen && setOpen(false);
    }, [
        keepOpen
    ]);
    // Debounce the typed value in the search input and trim
    const [searchValue, setSearchValue, inputValue] = (0, _hooks.useDebouncedState)("", 140);
    // Handling the selected search items after a change (Select suggestion or add keyword)
    const handleChange = (0, _react.useCallback)((value)=>{
        if (!value) return;
        closePopper();
        setSearchValue("");
        // Go to recent search
        if (value.type === "recent") {
            _utils.tagManagerEvents.queryRevisit({
                origin: "autosuggest-recent",
                queryId: value.id
            });
            navigate(`${_router.SEARCH_ROUTE}/${value.id}`);
            onSearchClick === null || onSearchClick === void 0 ? void 0 : onSearchClick();
            return;
        }
        // Go to saved search
        if (value.type === "savedSearch") {
            queryClient.removeQueries({
                queryKey: [
                    "query"
                ]
            }) // This forces a refetch and resets the queryContext
            ;
            var _value_key;
            _utils.tagManagerEvents.queryRevisit({
                origin: "autosuggest-saved",
                queryId: (_value_key = value === null || value === void 0 ? void 0 : value.key) !== null && _value_key !== void 0 ? _value_key : ""
            });
            navigate(`${_router.SEARCH_ROUTE}/${value === null || value === void 0 ? void 0 : value.key}`);
            onSearchClick === null || onSearchClick === void 0 ? void 0 : onSearchClick();
            return;
        }
        onChange(value);
    }, [
        closePopper,
        navigate,
        onChange,
        onSearchClick,
        queryClient,
        setSearchValue
    ]);
    // Recent Searches
    const { data: { results: recentSearches = [] } = {} } = (0, _userdataqueries.useUserQueries)(undefined, "user", includeSearches);
    const showRecentSearches = recentSearches.length > 0 && searchValue === "" && (location.pathname === _router.HOME_ROUTE || forceShowRecentSearches);
    const recentSearchOptions = (0, _react.useMemo)(()=>{
        return recentSearches.sort((a, b)=>{
            var _b_lastExecuted, _a_lastExecuted;
            return Date.parse((_b_lastExecuted = b === null || b === void 0 ? void 0 : b.lastExecuted) !== null && _b_lastExecuted !== void 0 ? _b_lastExecuted : b.lastUpdated) - Date.parse((_a_lastExecuted = a === null || a === void 0 ? void 0 : a.lastExecuted) !== null && _a_lastExecuted !== void 0 ? _a_lastExecuted : a.lastUpdated);
        }).map(({ id, name })=>({
                id,
                type: "recent",
                label: name,
                isKeyword: false,
                value: id
            })).slice(0, 5);
    }, [
        recentSearches
    ]);
    // Fetch suggestions and cache them
    const { data } = useSuggestionsHook({
        query: searchValue,
        category: categories,
        group1: group1,
        perPage
    });
    const filtered = (0, _react.useMemo)(()=>{
        const removeSelected = (data === null || data === void 0 ? void 0 : data.filter((suggestion)=>!(selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.includes(suggestion.id)))) || [];
        return filterByQueryTypes(removeSelected, excludeQueryTypes);
    }, [
        excludeQueryTypes,
        selectedItems,
        data
    ]);
    const grouped = (0, _react.useMemo)(()=>{
        const showCompanySuggestions = searchValue.split(" ").filter((singleElement)=>singleElement).length <= 4;
        const groupedArray = searchValue ? [
            ...(0, _suggestion.groupCompanySuggestions)(filtered, visibleSubsidiaries, showCompanySuggestions)
        ] : [];
        if (searchValue && includeKeyword) {
            groupedArray.push({
                id: (0, _suggestion.makeSuggestionId)(searchValue, "keyword"),
                type: "keyword",
                label: searchValue,
                text: searchValue,
                isKeyword: true
            });
        }
        return groupedArray;
    }, [
        filtered,
        includeKeyword,
        searchValue,
        visibleSubsidiaries
    ]);
    // Final options
    const options = (0, _react.useMemo)(()=>{
        return showRecentSearches ? recentSearchOptions : grouped;
    }, [
        grouped,
        recentSearchOptions,
        showRecentSearches
    ]);
    const onEnter = (0, _react.useCallback)((selectedIndex)=>{
        if (selectedIndex === null && searchValue !== "") {
            handleChange({
                id: (0, _suggestion.makeSuggestionId)(searchValue, "keyword"),
                label: searchValue,
                text: searchValue,
                type: "keyword",
                isKeyword: true
            });
            return;
        }
        if (selectedIndex !== null) {
            handleChange(options[selectedIndex]);
        }
    }, [
        handleChange,
        options,
        searchValue
    ]);
    const { handleInputKeydown, selectedOption, setSelectedOption } = (0, _useHandleKeyDown.useHandleKeyDown)(options, {
        onArrowDown: (0, _react.useCallback)(()=>setOpen(true), []),
        onArrowUp: (0, _react.useCallback)(()=>setOpen(true), []),
        onEscape: (0, _react.useCallback)(()=>setOpen(false), []),
        onEnter
    });
    // Suggestions
    // Invalidate the queryClient when the component is mounted
    (0, _react.useEffect)(()=>{
        queryClient.removeQueries({
            queryKey: [
                _suggestion.SUGGESTIONS_QUERY_KEY
            ]
        });
    }, [
        queryClient
    ]);
    // Prevent scrolling when the popper is open
    (0, _react.useEffect)(()=>{
        if (open && options.length > 0) {
            const hasScrollbar = Math.abs(window.innerHeight - document.body.scrollHeight) > 1;
            hasScrollbar ? document.body.classList.add("freezeScroll", "withScrollBar") : document.body.classList.add("freezeScroll");
        }
        return ()=>{
            document.body.classList.remove("freezeScroll", "withScrollBar");
        };
    }, [
        open,
        options.length
    ]);
    (0, _react.useEffect)(()=>{
        if (options.length) {
            setSelectedOption(options[0].id);
        }
    }, [
        options,
        setSelectedOption
    ]);
    const handleInputChange = (0, _react.useCallback)((event)=>{
        setOpen(true);
        setSelectedOption(null);
        setSearchValue(event.target.value);
        setVisibleSubsidiaries([]);
    }, [
        setSearchValue,
        setSelectedOption
    ]);
    // Toggle to show and hide subsidiaries inside the dropdown
    const toggleSubsidiaries = (0, _react.useCallback)((parentId)=>{
        setSelectedOption(parentId);
        const isCurrentlyOpen = visibleSubsidiaries.includes(parentId);
        if (isCurrentlyOpen) {
            setVisibleSubsidiaries((prev)=>prev.filter((id)=>id !== parentId));
        } else {
            setVisibleSubsidiaries((prev)=>[
                    ...prev,
                    parentId
                ]);
        }
    }, [
        setSelectedOption,
        visibleSubsidiaries
    ]);
    return {
        options,
        value: inputValue,
        showRecentSearches,
        searchValue,
        selectedOption,
        setSelectedOption,
        toggleSubsidiaries,
        handleChange,
        handleInputChange,
        closePopper,
        handleInputKeydown,
        open,
        setOpen
    };
};

//# sourceMappingURL=data:application/json;base64,