7181d68a359e4469e288d1f2674eda65
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CqsClusterAffinityEmbEnum: function() {
        return CqsClusterAffinityEmbEnum;
    },
    CqsQueryScopeEnum: function() {
        return CqsQueryScopeEnum;
    },
    CqsQuerySortEnum: function() {
        return CqsQuerySortEnum;
    },
    CqsScopeSchema: function() {
        return CqsScopeSchema;
    }
});
const _zod = require("zod");
var CqsQueryScopeEnum;
(function(CqsQueryScopeEnum) {
    CqsQueryScopeEnum["All"] = "all";
    CqsQueryScopeEnum["News"] = "news";
    CqsQueryScopeEnum["Transcripts"] = "transcripts";
    CqsQueryScopeEnum["Files"] = "files";
})(CqsQueryScopeEnum || (CqsQueryScopeEnum = {}));
var CqsQuerySortEnum;
(function(CqsQuerySortEnum) {
    CqsQuerySortEnum["Relevance"] = "relevance";
    CqsQuerySortEnum["Date"] = "date";
})(CqsQuerySortEnum || (CqsQuerySortEnum = {}));
const CqsScopeSchema = _zod.z.enum([
    "news",
    "transcripts",
    "files",
    "filings",
    "market_intelligence",
    "earnings_calls",
    "quartr_pro",
    "market_narratives",
    "crypto_markets",
    "middle_eastern_markets",
    "financial_times",
    "expert_networks"
]);
var CqsClusterAffinityEmbEnum;
(function(CqsClusterAffinityEmbEnum) {
    CqsClusterAffinityEmbEnum["SENTENCE"] = "sentence";
    CqsClusterAffinityEmbEnum["HEADLINE"] = "headline";
    CqsClusterAffinityEmbEnum["AVERAGE"] = "average";
})(CqsClusterAffinityEmbEnum || (CqsClusterAffinityEmbEnum = {}));

//# sourceMappingURL=data:application/json;base64,