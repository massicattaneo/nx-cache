{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/search-autosuggest-input/src/lib/UnifiedSearch/useAutosuggestInput.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\nimport { useDebouncedState } from \"@rp/react/common/hooks\"\nimport {\n  EnhancedSuggestion,\n  SUGGESTIONS_QUERY_KEY,\n  groupCompanySuggestions,\n  isSavedSearchSuggestion,\n  isSourceSuggestion,\n  useSuggestions,\n} from \"@rp/react/tanstack-api/suggestion\"\nimport { makeSuggestionId } from \"@rp/react/tanstack-api/suggestion\"\nimport { useUserQueries } from \"@rp/react/tanstack-api/user-data-queries\"\nimport { tagManagerEvents } from \"@rp/react/web/common/vendors/utils\"\nimport { HOME_ROUTE, SEARCH_ROUTE } from \"@rp/react/web/router\"\nimport { useQueryClient } from \"@tanstack/react-query\"\nimport { TypesenseSearchInputProps } from \"./UnifiedSearch.types\"\nimport { useHandleKeyDown } from \"./useHandleKeyDown\"\n\nconst filterByQueryTypes = (\n  data: Array<EnhancedSuggestion>,\n  exclude: Array<string> | undefined,\n) => {\n  if (!exclude) return data\n\n  return data.filter(item => {\n    return !(\n      (exclude.includes(\"savedSearch\") && isSavedSearchSuggestion(item)) ||\n      (exclude.includes(\"source\") && isSourceSuggestion(item))\n    )\n  })\n}\n\ntype Props = {\n  onChange: TypesenseSearchInputProps[\"onChange\"]\n  forceShowRecentSearches?: TypesenseSearchInputProps[\"forceShowRecentSearches\"]\n  onSearchClick?: TypesenseSearchInputProps[\"onSearchClick\"]\n  selectedItems?: TypesenseSearchInputProps[\"selectedItems\"]\n  excludeQueryTypes?: TypesenseSearchInputProps[\"excludeQueryTypes\"]\n  keepOpen?: TypesenseSearchInputProps[\"keepOpen\"]\n  useSuggestionsHook?: typeof useSuggestions\n  categories?: Array<string>\n  group1?: Array<string>\n  perPage?: number\n  includeSearches?: boolean\n  includeKeyword?: boolean\n}\n\nconst useAutosuggestInput = ({\n  onChange,\n  forceShowRecentSearches,\n  onSearchClick,\n  selectedItems,\n  excludeQueryTypes,\n  keepOpen = false,\n  useSuggestionsHook = useSuggestions,\n  categories,\n  group1,\n  perPage = 20,\n  includeSearches = true,\n  includeKeyword = true,\n}: Props) => {\n  const queryClient = useQueryClient()\n  const [open, setOpen] = useState(keepOpen)\n  const [visibleSubsidiaries, setVisibleSubsidiaries] = useState<Array<string>>([])\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  const closePopper = useCallback(() => {\n    !keepOpen && setOpen(false)\n  }, [keepOpen])\n\n  // Debounce the typed value in the search input and trim\n  const [searchValue, setSearchValue, inputValue] = useDebouncedState(\"\", 140)\n\n  // Handling the selected search items after a change (Select suggestion or add keyword)\n  const handleChange = useCallback(\n    (value: EnhancedSuggestion) => {\n      if (!value) return\n      closePopper()\n      setSearchValue(\"\")\n      // Go to recent search\n      if (value.type === \"recent\") {\n        tagManagerEvents.queryRevisit({ origin: \"autosuggest-recent\", queryId: value.id })\n        navigate(`${SEARCH_ROUTE}/${value.id}`)\n        onSearchClick?.()\n        return\n      }\n\n      // Go to saved search\n      if (value.type === \"savedSearch\") {\n        queryClient.removeQueries({\n          queryKey: [\"query\"],\n        }) // This forces a refetch and resets the queryContext\n        tagManagerEvents.queryRevisit({ origin: \"autosuggest-saved\", queryId: value?.key ?? \"\" })\n        navigate(`${SEARCH_ROUTE}/${value?.key}`)\n        onSearchClick?.()\n        return\n      }\n      onChange(value)\n    },\n    [closePopper, navigate, onChange, onSearchClick, queryClient, setSearchValue],\n  )\n\n  // Recent Searches\n  const { data: { results: recentSearches = [] } = {} } = useUserQueries(\n    undefined,\n    \"user\",\n    includeSearches,\n  )\n\n  const showRecentSearches =\n    recentSearches.length > 0 &&\n    searchValue === \"\" &&\n    (location.pathname === HOME_ROUTE || forceShowRecentSearches)\n\n  const recentSearchOptions = useMemo(() => {\n    return recentSearches\n      .sort(\n        (a, b) =>\n          Date.parse(b?.lastExecuted ?? b.lastUpdated) -\n          Date.parse(a?.lastExecuted ?? a.lastUpdated),\n      )\n      .map(({ id, name }) => ({\n        id,\n        type: \"recent\" as const,\n        label: name,\n        isKeyword: false,\n        value: id,\n      }))\n      .slice(0, 5)\n  }, [recentSearches])\n\n  // Fetch suggestions and cache them\n  const { data } = useSuggestionsHook({\n    query: searchValue,\n    category: categories,\n    group1: group1,\n    perPage,\n  })\n\n  const filtered = useMemo(() => {\n    const removeSelected = data?.filter(suggestion => !selectedItems?.includes(suggestion.id)) || []\n    return filterByQueryTypes(removeSelected, excludeQueryTypes)\n  }, [excludeQueryTypes, selectedItems, data])\n\n  const grouped = useMemo(() => {\n    const showCompanySuggestions =\n      searchValue.split(\" \").filter(singleElement => singleElement).length <= 4\n    const groupedArray = searchValue\n      ? [...groupCompanySuggestions(filtered, visibleSubsidiaries, showCompanySuggestions)]\n      : []\n\n    if (searchValue && includeKeyword) {\n      groupedArray.push({\n        id: makeSuggestionId(searchValue, \"keyword\"),\n        type: \"keyword\" as const,\n        label: searchValue,\n        text: searchValue,\n        isKeyword: true,\n      })\n    }\n    return groupedArray\n  }, [filtered, includeKeyword, searchValue, visibleSubsidiaries])\n\n  // Final options\n  const options = useMemo(() => {\n    return showRecentSearches ? recentSearchOptions : grouped\n  }, [grouped, recentSearchOptions, showRecentSearches])\n\n  const onEnter = useCallback(\n    (selectedIndex: number | null) => {\n      if (selectedIndex === null && searchValue !== \"\") {\n        handleChange({\n          id: makeSuggestionId(searchValue, \"keyword\"),\n          label: searchValue,\n          text: searchValue,\n          type: \"keyword\",\n          isKeyword: true,\n        })\n        return\n      }\n\n      if (selectedIndex !== null) {\n        handleChange(options[selectedIndex])\n      }\n    },\n    [handleChange, options, searchValue],\n  )\n\n  const { handleInputKeydown, selectedOption, setSelectedOption } = useHandleKeyDown<\n    typeof options[0]\n  >(options, {\n    onArrowDown: useCallback(() => setOpen(true), []),\n    onArrowUp: useCallback(() => setOpen(true), []),\n    onEscape: useCallback(() => setOpen(false), []),\n    onEnter,\n  })\n\n  // Suggestions\n  // Invalidate the queryClient when the component is mounted\n  useEffect(() => {\n    queryClient.removeQueries({\n      queryKey: [SUGGESTIONS_QUERY_KEY],\n    })\n  }, [queryClient])\n\n  // Prevent scrolling when the popper is open\n  useEffect(() => {\n    if (open && options.length > 0) {\n      const hasScrollbar = Math.abs(window.innerHeight - document.body.scrollHeight) > 1\n      hasScrollbar\n        ? document.body.classList.add(\"freezeScroll\", \"withScrollBar\")\n        : document.body.classList.add(\"freezeScroll\")\n    }\n    return () => {\n      document.body.classList.remove(\"freezeScroll\", \"withScrollBar\")\n    }\n  }, [open, options.length])\n\n  useEffect(() => {\n    if (options.length) {\n      setSelectedOption(options[0].id)\n    }\n  }, [options, setSelectedOption])\n\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setOpen(true)\n      setSelectedOption(null)\n      setSearchValue(event.target.value)\n      setVisibleSubsidiaries([])\n    },\n    [setSearchValue, setSelectedOption],\n  )\n\n  // Toggle to show and hide subsidiaries inside the dropdown\n  const toggleSubsidiaries = useCallback(\n    (parentId: string) => {\n      setSelectedOption(parentId)\n      const isCurrentlyOpen = visibleSubsidiaries.includes(parentId)\n\n      if (isCurrentlyOpen) {\n        setVisibleSubsidiaries(prev => prev.filter(id => id !== parentId))\n      } else {\n        setVisibleSubsidiaries(prev => [...prev, parentId])\n      }\n    },\n    [setSelectedOption, visibleSubsidiaries],\n  )\n\n  return {\n    options,\n    value: inputValue,\n    showRecentSearches,\n    searchValue,\n    selectedOption,\n    setSelectedOption,\n    toggleSubsidiaries,\n    handleChange,\n    handleInputChange,\n    closePopper,\n    handleInputKeydown,\n    open,\n    setOpen,\n  }\n}\n\nexport { useAutosuggestInput }\n"],"names":["useAutosuggestInput","filterByQueryTypes","data","exclude","filter","item","includes","isSavedSearchSuggestion","isSourceSuggestion","onChange","forceShowRecentSearches","onSearchClick","selectedItems","excludeQueryTypes","keepOpen","useSuggestionsHook","useSuggestions","categories","group1","perPage","includeSearches","includeKeyword","queryClient","useQueryClient","open","setOpen","useState","visibleSubsidiaries","setVisibleSubsidiaries","navigate","useNavigate","location","useLocation","closePopper","useCallback","searchValue","setSearchValue","inputValue","useDebouncedState","handleChange","value","type","tagManagerEvents","queryRevisit","origin","queryId","id","SEARCH_ROUTE","removeQueries","queryKey","key","results","recentSearches","useUserQueries","undefined","showRecentSearches","length","pathname","HOME_ROUTE","recentSearchOptions","useMemo","sort","a","b","Date","parse","lastExecuted","lastUpdated","map","name","label","isKeyword","slice","query","category","filtered","removeSelected","suggestion","grouped","showCompanySuggestions","split","singleElement","groupedArray","groupCompanySuggestions","push","makeSuggestionId","text","options","onEnter","selectedIndex","handleInputKeydown","selectedOption","setSelectedOption","useHandleKeyDown","onArrowDown","onArrowUp","onEscape","useEffect","SUGGESTIONS_QUERY_KEY","hasScrollbar","Math","abs","window","innerHeight","document","body","scrollHeight","classList","add","remove","handleInputChange","event","target","toggleSubsidiaries","parentId","isCurrentlyOpen","prev"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}