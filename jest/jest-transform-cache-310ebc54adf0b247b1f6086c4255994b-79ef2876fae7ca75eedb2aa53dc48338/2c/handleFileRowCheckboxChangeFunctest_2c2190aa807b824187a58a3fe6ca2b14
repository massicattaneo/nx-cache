2c72439f7f3f78329e421cf5fdbed9e7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _handleFileRowCheckboxChangeFunc = require("./handleFileRowCheckboxChangeFunc");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const mockSelectedFiles = [
    {
        id: "file-id-1",
        shared: true
    },
    {
        id: "file-id-2",
        shared: false
    },
    {
        id: "file-id-3",
        shared: true
    }
];
const mockActions = {
    open: {
        onClick: jest.fn()
    },
    close: {
        onClick: jest.fn()
    }
};
const mockOpenChatPane = jest.fn();
let selectedFilesSetterResponse;
const mockSetSelectedFiles = jest.fn().mockImplementation((cb)=>{
    selectedFilesSetterResponse = cb(mockSelectedFiles);
});
const mockItem = {
    id: "123",
    name: "test",
    status: "completed",
    shared: true,
    size: 321,
    date: "2025-01-01",
    type: "pdf",
    sharedWith: [
        "Alice"
    ],
    owner: "Bob"
};
beforeEach(jest.clearAllMocks);
describe("handleFileRowCheckboxChangeFunc", ()=>{
    describe("isSelected and isFileOpen", ()=>{
        const isSelected = true;
        const isThisFileOpen = true;
        beforeEach(()=>{
            (0, _handleFileRowCheckboxChangeFunc.handleFileRowCheckboxChangeFunc)({
                actions: mockActions,
                checked: true,
                isSelected,
                isThisFileOpen,
                item: mockItem,
                openChatPane: mockOpenChatPane,
                setSelectedFiles: mockSetSelectedFiles,
                shared: true
            });
        });
        it("should call actions.close.onClick", ()=>{
            expect(mockActions.close.onClick).toHaveBeenCalledTimes(1);
        });
        it("should not call actions.open.onClick", ()=>{
            expect(mockActions.open.onClick).not.toHaveBeenCalled();
        });
        it("should not call openChatPane", ()=>{
            expect(mockOpenChatPane).not.toHaveBeenCalled();
        });
        it("should call setSelected and setState properly", ()=>{
            expect(mockSetSelectedFiles).toHaveBeenCalled();
            expect(selectedFilesSetterResponse).toStrictEqual([
                ...mockSelectedFiles,
                {
                    id: "123",
                    shared: true
                }
            ]);
        });
    });
    describe("!isSelected", ()=>{
        const isSelected = false;
        beforeEach(()=>{
            (0, _handleFileRowCheckboxChangeFunc.handleFileRowCheckboxChangeFunc)({
                actions: mockActions,
                checked: true,
                isSelected,
                isThisFileOpen: true,
                item: mockItem,
                openChatPane: mockOpenChatPane,
                setSelectedFiles: mockSetSelectedFiles,
                shared: true
            });
        });
        it("should not call actions.close.onClick", ()=>{
            expect(mockActions.close.onClick).not.toHaveBeenCalled();
        });
        it("should call actions.open.onClick with the correct arguments", ()=>{
            expect(mockActions.open.onClick).toHaveBeenCalledTimes(1);
            expect(mockActions.open.onClick).toHaveBeenCalledWith(mockItem);
        });
        it("should call openChatPane", ()=>{
            expect(mockOpenChatPane).toHaveBeenCalledTimes(1);
        });
        it("should call setSelected and setState properly", ()=>{
            expect(mockSetSelectedFiles).toHaveBeenCalled();
            expect(selectedFilesSetterResponse).toStrictEqual([
                ...mockSelectedFiles,
                {
                    id: "123",
                    shared: true
                }
            ]);
        });
    });
    describe("isSelected and !isFileOpen", ()=>{
        describe("checked", ()=>{
            const isSelected = true;
            const isThisFileOpen = false;
            const checked = true;
            beforeEach(()=>{
                (0, _handleFileRowCheckboxChangeFunc.handleFileRowCheckboxChangeFunc)({
                    actions: mockActions,
                    checked,
                    isSelected,
                    isThisFileOpen,
                    item: mockItem,
                    openChatPane: mockOpenChatPane,
                    setSelectedFiles: mockSetSelectedFiles,
                    shared: true
                });
            });
            it("should not call actions.close.onClick", ()=>{
                expect(mockActions.close.onClick).not.toHaveBeenCalled();
            });
            it("should not call actions.open.onClick", ()=>{
                expect(mockActions.open.onClick).not.toHaveBeenCalled();
            });
            it("should not call openChatPane", ()=>{
                expect(mockOpenChatPane).not.toHaveBeenCalled();
            });
            it("should call setSelected and setState properly", ()=>{
                expect(mockSetSelectedFiles).toHaveBeenCalled();
                expect(selectedFilesSetterResponse).toStrictEqual([
                    ...mockSelectedFiles,
                    {
                        id: "123",
                        shared: true
                    }
                ]);
            });
        });
        describe("!checked", ()=>{
            const isSelected = true;
            const isThisFileOpen = false;
            const checked = false;
            beforeEach(()=>{
                (0, _handleFileRowCheckboxChangeFunc.handleFileRowCheckboxChangeFunc)({
                    actions: mockActions,
                    checked,
                    isSelected,
                    isThisFileOpen,
                    item: _object_spread_props(_object_spread({}, mockItem), {
                        id: mockSelectedFiles[1].id
                    }),
                    openChatPane: mockOpenChatPane,
                    setSelectedFiles: mockSetSelectedFiles,
                    shared: true
                });
            });
            it("should not call actions.close.onClick", ()=>{
                expect(mockActions.close.onClick).not.toHaveBeenCalled();
            });
            it("should not call actions.open.onClick", ()=>{
                expect(mockActions.open.onClick).not.toHaveBeenCalled();
            });
            it("should not call openChatPane", ()=>{
                expect(mockOpenChatPane).not.toHaveBeenCalled();
            });
            it("should call setSelected and setState properly", ()=>{
                expect(mockSetSelectedFiles).toHaveBeenCalled();
                expect(selectedFilesSetterResponse).toStrictEqual([
                    mockSelectedFiles[0],
                    mockSelectedFiles[2]
                ]);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,