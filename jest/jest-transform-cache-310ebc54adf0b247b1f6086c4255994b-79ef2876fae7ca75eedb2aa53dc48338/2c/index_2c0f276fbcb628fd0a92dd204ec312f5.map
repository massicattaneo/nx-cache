{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-factory-space/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n"],"names":["factorySpace","effects","ok","type","max","limit","Number","POSITIVE_INFINITY","size","start","code","markdownSpace","enter","prefix","consume","exit"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;CAIC;;;;+BAsCeA;;;eAAAA;;;wCApCY;AAoCrB,SAASA,aAAaC,OAAO,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG;IACjD,MAAMC,QAAQD,MAAMA,MAAM,IAAIE,OAAOC,iBAAiB;IACtD,IAAIC,OAAO;IACX,OAAOC;IAEP,kBAAkB,GAClB,SAASA,MAAMC,IAAI;QACjB,IAAIC,IAAAA,qCAAa,EAACD,OAAO;YACvBT,QAAQW,KAAK,CAACT;YACd,OAAOU,OAAOH;QAChB;QACA,OAAOR,GAAGQ;IACZ;IAEA,kBAAkB,GAClB,SAASG,OAAOH,IAAI;QAClB,IAAIC,IAAAA,qCAAa,EAACD,SAASF,SAASH,OAAO;YACzCJ,QAAQa,OAAO,CAACJ;YAChB,OAAOG;QACT;QACAZ,QAAQc,IAAI,CAACZ;QACb,OAAOD,GAAGQ;IACZ;AACF"}