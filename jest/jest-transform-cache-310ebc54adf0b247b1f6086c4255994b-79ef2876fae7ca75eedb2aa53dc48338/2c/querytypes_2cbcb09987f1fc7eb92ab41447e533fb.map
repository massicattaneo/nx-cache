{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/api-types/src/lib/query.types.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { BaseCqsItem } from \"./by-ids.types\"\nimport { NotificationSchedule } from \"./notifications.types\"\nimport { RpqlDateFilter, RpqlFilter } from \"./rpql-types/api.types\"\nimport { SharedData } from \"./user-data\"\n\ntype CqsQueryRanking = string\n\ntype CqsQueryScope = keyof typeof CqsQueryScopeEnum\n\ntype QueryPagination = {\n  limit: number\n  cursor?: number\n}\n\ntype CqsSearchQuery = {\n  queryId?: string\n  expression?: RpqlFilter\n  pagination?: QueryPagination\n  ranking?: CqsQueryRanking\n  scope?: CqsQueryScopeEnum\n  trainingThreshold?: number\n  sort?: CqsQuerySortEnum\n  date?: Array<RpqlDateFilter> | null\n  debug?: boolean\n  hybrid?: boolean\n  feedRanker?: boolean\n  searchChain?: \"clustering\"\n}\n\ntype CqsSavedStatus = \"saved\" | \"unsaved\"\n\ntype CqsUserQuery = {\n  dateCreated: string\n  id: string\n  lastExecuted: string\n  lastUpdated: string\n  name: string\n  owner?: string\n  ownerUserId: string\n  ownerName: string\n  saveStatus: CqsSavedStatus\n  pinned: boolean | null\n  pinIndex: number | null\n  shared: SharedData\n  schedules?: Array<NotificationSchedule>\n}\n\ntype PromptProperties = {\n  userInstructions?: string\n  language?: string\n  tone?: string\n}\n\n// TODO: Change this type, it is super confusing\ntype CqsSavedQuery = {\n  // Can be patched\n  query: CqsSearchQuery\n  name: string\n  saveStatus: CqsSavedStatus\n  // Server data\n  id: string\n  ownerUserId: string\n  ownerName: string\n  dateCreated: string\n  lastUpdated: string\n  lastExecuted: string | null\n  shared: SharedData\n  promptProperties?: PromptProperties\n  schedules?: Array<NotificationSchedule>\n}\n\nenum CqsQueryScopeEnum {\n  All = \"all\",\n  News = \"news\",\n  Transcripts = \"transcripts\",\n  Files = \"files\",\n}\n\nenum CqsQuerySortEnum {\n  Relevance = \"relevance\",\n  Date = \"date\",\n}\n\ntype CqsUserDataQueriesGetResponse = {\n  results: Array<CqsUserQuery>\n}\n\ntype CqsUserDataQueriesPostRequest = {\n  name?: string\n  query?: CqsSearchQuery\n  saveStatus?: CqsSavedStatus\n  promptProperties?: PromptProperties\n  schedules?: Array<NotificationSchedule>\n}\n\nconst CqsScopeSchema = z.enum([\n  \"news\",\n  \"transcripts\",\n  \"files\",\n  \"filings\",\n  \"market_intelligence\",\n  \"earnings_calls\",\n  \"quartr_pro\",\n  \"market_narratives\",\n  \"crypto_markets\",\n  \"middle_eastern_markets\",\n  \"financial_times\",\n  \"expert_networks\",\n])\n\ntype CqsScope = z.infer<typeof CqsScopeSchema>\n\ntype CqsSentence = {\n  pnum: number\n  snum: number\n  text: string\n}\n\ntype CqsSentenceEntity = {\n  key: string\n  queryType: \"entity\" | \"rp_topic\"\n  start: number\n  end: number\n}\n\ntype CqsStorySentence = {\n  pnum: number\n  snum: number\n  text: string\n  entities?: Array<CqsSentenceEntity>\n  probability?: number\n}\n\ntype CqsStoryClusterSentence = CqsStorySentence & { deduplicationCount?: number }\n\ntype CqsStorySentences = { [0]: CqsStorySentence } & Array<CqsStorySentence>\ntype CqsStoryClusterSentences = { [0]: CqsStoryClusterSentence } & Array<CqsStoryClusterSentence>\n\ntype CqsStory = {\n  documentScope: CqsScope\n  id: string\n  hd: string\n  language: string | undefined\n  sentences: CqsStorySentences\n  srcKey: string\n  srcName: string | undefined\n  ts: string\n  sourceRank?: number\n  rankFeatures?: Record<string, number>\n  summaryFeatures?: Record<string, number>\n  contentType?: string\n  url?: string\n  rpProviderId?: string\n}\n\ntype CqsClusterDetailStory = CqsStory & {\n  clusterDetails?: Array<number>\n  sentences: CqsStoryClusterSentences\n}\n\ntype CqsClusterSummaryStory = CqsStory & {\n  clusterSummary?: {\n    nTotalSentences: 98\n    nUniqueSentences: 4\n  }\n  cluster: Array<CqsClusterDetailStory>\n  sentences: CqsStoryClusterSentences\n}\n\ntype CqsChunkSentence = {\n  pnum: number\n  snum: number\n}\n\ntype BoundingBox = {\n  page: number\n  top: number\n  bottom: number\n  left: number\n  right: number\n}\n\ntype CqsChunk = {\n  cnum: number\n  deduplicationCount: number\n  entities: Array<CqsSentenceEntity>\n  label: string\n  sentences: Array<CqsChunkSentence>\n  sentiment: number\n  text: string\n  boundingBoxes?: Array<BoundingBox>\n  // This ID might be only present on chat\n  id?: string\n  relevance?: number\n}\n\ntype CqsChunkStory = Omit<CqsStory, \"sentences\"> & {\n  cluster?: Array<Omit<CqsChunkStory, \"cluster\">>\n  chunks: Array<CqsChunk>\n}\n\ntype CqsCoverage = {\n  coverage: number\n  documents: number\n  full: boolean\n  nodes: number\n  results: number\n  resultsFull: number\n}\n\ntype CqsQueryPostResponse = {\n  documentCount: number\n  coverage: CqsCoverage\n  nextCursor: number\n  stories: Array<CqsStory>\n  timing: { querytime: number; searchtime: number; summaryfetchtime: number }\n  training_statistics?: {\n    accuracy: number\n    accuracyGamifiedPerformance: number\n    accuracyHistogram: Array<number>\n    accuracyStd: number\n    auc: number\n    precision: number\n  }\n  yql?: {\n    yql: string\n    \"clustering.threshold\": number\n  }\n}\n\ntype DocumentCqsItem = BaseCqsItem & {\n  relevance: number\n  entityType: string\n}\n\ntype CqsDocumentQueryPostResponse = CqsQueryPostResponse & {\n  detections: Array<DocumentCqsItem>\n  imageUrls: Array<string>\n}\n\ntype CqsQueryChunksPostResponse = CqsQueryPostResponse & {\n  stories: Array<CqsChunkStory>\n}\n\ntype CqsQueryClustersPostResponse = CqsQueryPostResponse & {\n  clusterMetrics?: {\n    interClusterOverlap: number\n    intraClusterVariance: number\n    silhouetteScore: number\n  }\n  threshold: number\n  stories: Array<CqsClusterSummaryStory>\n}\n\nenum CqsClusterAffinityEmbEnum {\n  SENTENCE = \"sentence\",\n  HEADLINE = \"headline\",\n  AVERAGE = \"average\",\n}\n\ntype CqsQueryClusterPostQueryParams = {\n  clustering_emb?: CqsClusterAffinityEmbEnum\n  threshold?: number\n  debug?: boolean\n}\n\ntype CqsSummaryPostResponse = { text: string }\n\ntype CqsSavedQueryContext = Partial<Omit<CqsSavedQuery, \"query\" | \"id\">> &\n  Pick<CqsSavedQuery, \"query\" | \"id\">\n\ntype CqsUserQueryOrContextQuery = CqsUserQuery | CqsSavedQueryContext\n\nexport { CqsScopeSchema, CqsQueryScopeEnum, CqsQuerySortEnum, CqsClusterAffinityEmbEnum }\n\nexport type {\n  BoundingBox,\n  CqsUserQueryOrContextQuery,\n  CqsStory,\n  CqsChunkStory,\n  CqsStorySentence,\n  CqsStorySentences,\n  CqsQueryPostResponse,\n  CqsSearchQuery,\n  CqsQueryRanking,\n  CqsQueryScope,\n  CqsSavedQuery,\n  CqsSavedStatus,\n  CqsUserDataQueriesGetResponse,\n  CqsUserDataQueriesPostRequest,\n  CqsScope,\n  CqsQueryClustersPostResponse,\n  CqsClusterSummaryStory,\n  CqsClusterDetailStory,\n  CqsQueryClusterPostQueryParams,\n  CqsSentenceEntity,\n  CqsCoverage,\n  CqsDocumentQueryPostResponse,\n  DocumentCqsItem,\n  CqsSummaryPostResponse,\n  CqsUserQuery,\n  PromptProperties,\n  CqsSavedQueryContext,\n  CqsQueryChunksPostResponse,\n  CqsChunk,\n  CqsChunkSentence,\n  CqsSentence,\n}\n"],"names":["CqsClusterAffinityEmbEnum","CqsQueryScopeEnum","CqsQuerySortEnum","CqsScopeSchema","z","enum"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAkR8DA,yBAAyB;eAAzBA;;IAArCC,iBAAiB;eAAjBA;;IAAmBC,gBAAgB;eAAhBA;;IAAnCC,cAAc;eAAdA;;;qBAlRS;;UAwEbF;;;;;GAAAA,sBAAAA;;UAOAC;;;GAAAA,qBAAAA;AAiBL,MAAMC,iBAAiBC,MAAC,CAACC,IAAI,CAAC;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;;UAkJIL;;;;GAAAA,8BAAAA"}