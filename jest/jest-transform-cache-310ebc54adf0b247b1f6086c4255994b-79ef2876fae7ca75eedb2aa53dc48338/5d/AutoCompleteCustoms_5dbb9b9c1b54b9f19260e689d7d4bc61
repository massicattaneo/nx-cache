8d74740ecad938262e158e9a38dd0160
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AUTOCOMPLETE_HEIGHT: function() {
        return AUTOCOMPLETE_HEIGHT;
    },
    DropdownPaper: function() {
        return DropdownPaper;
    },
    RecentSearchTitle: function() {
        return RecentSearchTitle;
    },
    ResultsAutosuggestInputStyled: function() {
        return ResultsAutosuggestInputStyled;
    },
    ResultsAutosuggestInputWithChipsStyled: function() {
        return ResultsAutosuggestInputWithChipsStyled;
    },
    StyledPopper: function() {
        return StyledPopper;
    },
    autosuggestInputClasses: function() {
        return autosuggestInputClasses;
    },
    customOption: function() {
        return customOption;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _theme = require("@rp/react/theme");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _SuggestionInput = require("../SuggestionInput");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const inputDefaults = {
    minHeight: 44,
    borderRadius: 4,
    paddingLeft: 16,
    width: "100%",
    height: "100%"
};
const autosuggestInputClasses = {
    inputRoot: "MainSearch-inputRoot",
    input: "MainSearch-input",
    adornment: "MainSearch-adornment",
    chips: "MainSearch-chips"
};
const useAutosuggestStyles = ({ theme, inputVariant, isPopperOpen })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const borderRadius = inputVariant === "search" ? theme.spacing(1) : theme.spacing(0.5);
    return {
        [`& .${autosuggestInputClasses.inputRoot}`]: {
            backgroundColor: "transparent",
            border: 0,
            padding: 0
        },
        [`& .${autosuggestInputClasses.input}`]: _object_spread_props(_object_spread({}, inputDefaults), {
            backgroundColor: theme.palette.overlay.surface,
            minHeight: 32,
            paddingTop: inputVariant === "results" ? theme.spacing(0.5) : undefined,
            paddingBottom: inputVariant === "results" ? theme.spacing(0.5) : undefined,
            borderRadius: isMobile ? 0 : borderRadius,
            "&::placeholder": {
                textOverflow: "ellipsis !important",
                color: theme.palette.text.secondary
            }
        }),
        "& fieldset": {
            borderWidth: 2,
            borderColor: "transparent"
        },
        "&:hover fieldset": {
            borderColor: "rgba(255, 255, 255, 0.3) !important"
        },
        "& .Mui-disabled fieldset": {
            borderColor: "transparent !important",
            pointer: ""
        },
        "& .Mui-focused fieldset": {
            borderColor: "rgba(255, 255, 255, 0.3) !important",
            borderBottomColor: !isMobile && isPopperOpen ? "transparent !important" : undefined,
            borderBottomLeftRadius: !isMobile && isPopperOpen ? 0 : undefined,
            borderBottomRightRadius: !isMobile && isPopperOpen ? 0 : undefined
        },
        [`& .Mui-focused.${autosuggestInputClasses.input}`]: {
            borderBottomLeftRadius: !isMobile && isPopperOpen ? 0 : undefined,
            borderBottomRightRadius: !isMobile && isPopperOpen ? 0 : undefined
        },
        "& input": {
            padding: inputVariant === "results" ? "0px !important" : undefined
        },
        "& svg": {
            color: theme.palette.text.secondary,
            width: isMobile ? undefined : 16,
            height: isMobile ? undefined : 16
        }
    };
};
const ResultsAutosuggestInputStyled = (0, _theme.styled)(_core.TextField, {
    shouldForwardProp: (prop)=>prop !== "inputVariant" && prop !== "isPopperOpen"
})(useAutosuggestStyles);
const ResultsAutosuggestInputWithChipsStyled = (0, _theme.styled)(_core.Box, {
    shouldForwardProp: (prop)=>prop !== "inputVariant" && prop !== "isPopperOpen"
})(({ theme, isPopperOpen, inputVariant })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const styles = useAutosuggestStyles({
        theme,
        isPopperOpen,
        inputVariant
    });
    return _object_spread_props(_object_spread({}, styles), {
        cursor: "text",
        backgroundColor: theme.palette.elevation.dp03,
        [`& .${autosuggestInputClasses.inputRoot}`]: {
            width: "100%",
            padding: theme.spacing(1),
            border: `2px solid ${isPopperOpen ? "rgba(255, 255, 255, 0.3)" : "rgba(255, 255, 255, 0.2)"}`,
            borderRadius: "8px",
            display: "flex",
            alignItems: "center",
            minHeight: 52
        },
        [`& .${autosuggestInputClasses.inputRoot}:hover`]: {
            border: `2px solid rgba(255, 255, 255, 0.3)`
        },
        [`& .${autosuggestInputClasses.input} .MuiInputAdornment-root`]: {
            marginRight: 0
        },
        [`& .${autosuggestInputClasses.input}`]: {
            flexGrow: 1
        },
        [`& .${autosuggestInputClasses.input} input`]: {
            padding: 0,
            marginRight: "4px",
            overflow: "hidden",
            whiteSpace: "nowrap",
            textOverflow: "ellipsis",
            "&::placeholder": {
                overflow: "hidden",
                whiteSpace: "nowrap",
                textOverflow: "ellipsis",
                color: theme.palette.text.secondary
            }
        },
        [`& .${autosuggestInputClasses.adornment}`]: {
            display: "flex",
            alignItems: "center",
            cursor: "pointer"
        },
        [`& .${autosuggestInputClasses.chips}`]: {
            width: "100%",
            flexFlow: "wrap",
            display: "flex",
            alignItems: "center",
            gap: theme.spacing(isMobile ? 0.5 : 1),
            "& .MuiChip-root": {
                height: isMobile ? 30 : undefined
            },
            "& .MuiChip-root .MuiTypography-root": {
                fontSize: isMobile ? 14 : undefined
            }
        }
    });
});
const DropdownPaper = (0, _theme.styled)(_core.Paper, {
    name: "DropdownPaper"
})(({ theme })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    return _object_spread({
        backgroundColor: isMobile ? "transparent" : theme.palette.grey[800],
        borderRadius: 0,
        borderBottomLeftRadius: 8,
        borderBottomRightRadius: 8,
        border: isMobile ? undefined : "2px solid rgba(255, 255, 255, 0.3)",
        borderTopWidth: 1,
        minHeight: 35,
        overflowY: "auto",
        marginTop: -1,
        ul: {
            margin: 0,
            padding: 0,
            listStyle: "none"
        },
        li: {
            padding: "6px 16px",
            WebkitTapHighlightColor: "transparent",
            cursor: "pointer",
            position: "relative",
            "&:hover, &[aria-selected='true']": {
                backgroundColor: theme.palette.overlay.surface
            }
        }
    }, theme.scrollbarStyles);
});
const RecentSearchTitle = (0, _theme.styled)(_core.Typography, {
    name: "RecentSearchTitle"
})(({ theme })=>({
        fontSize: 12,
        letterSpacing: 1,
        paddingLeft: 20,
        paddingTop: 20,
        color: theme.palette.text.secondary
    }));
const AUTOCOMPLETE_HEIGHT = 56;
const hasKey = (obj)=>"key" in obj;
// renderOption for MUI Autocomplete
const customOption = ({ searchValue, toggleSubsidiaries, hideKeywordsHint })=>(optionProps, option)=>{
        if ((0, _suggestion.isEnhancedSuggestionWithSubsidiaries)(option) && option.subsidiaries.length > 0) {
            return /*#__PURE__*/ (0, _react.createElement)(_SuggestionInput.NestedSuggestionOption, _object_spread_props(_object_spread({}, option), {
                showTickers: true,
                highlightValue: searchValue,
                optionProps: optionProps,
                key: optionProps.id,
                toggleSubsidiariesDisplay: toggleSubsidiaries
            }));
        }
        const _ref = hasKey(option) ? option : _object_spread({
            key: option.id
        }, option), { key: _ } = _ref, rest = _object_without_properties(_ref, [
            "key"
        ]);
        // If hideKeywordsHint is true, hide the keyword option
        if (hideKeywordsHint && rest.type === "keyword") {
            return null;
        }
        return /*#__PURE__*/ (0, _react.createElement)("li", _object_spread_props(_object_spread({}, optionProps), {
            key: optionProps.id
        }), /*#__PURE__*/ (0, _jsxruntime.jsx)(_SuggestionInput.SuggestionOption, _object_spread({
            highlightValue: searchValue,
            showTickers: true
        }, rest)));
    };
// Customize the rendering of the options in the dropdown
const StyledPopper = (0, _theme.styled)(_core.Popper, {
    shouldForwardProp: (prop)=>prop !== "deviceHeight"
})(({ theme, deviceHeight })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    return {
        touchAction: "none",
        overscrollBehavior: "contain",
        backgroundColor: "transparent",
        zIndex: theme.zIndex.modal,
        "& > div": {
            overscrollBehavior: "contain",
            boxShadow: isMobile ? "0 0 0" : undefined,
            height: isMobile ? deviceHeight - AUTOCOMPLETE_HEIGHT : ""
        },
        "& .MuiAutocomplete-listbox": {
            overscrollBehavior: "contain",
            backgroundColor: "transparent",
            maxHeight: isMobile ? "none" : undefined
        }
    };
});

//# sourceMappingURL=data:application/json;base64,