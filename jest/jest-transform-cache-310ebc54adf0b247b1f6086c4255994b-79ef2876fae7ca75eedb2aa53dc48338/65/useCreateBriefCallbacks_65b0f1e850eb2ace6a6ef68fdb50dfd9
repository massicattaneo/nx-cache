b9cb218fb009887a5fa59274204ea138
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCreateBriefCallbacks", {
    enumerable: true,
    get: function() {
        return useCreateBriefCallbacks;
    }
});
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _brief = require("@rp/react/common/brief");
const _providers = require("@rp/react/web/common/providers");
const _router = require("@rp/react/web/router");
const useCreateBriefCallbacks = ({ initialWatchlistId, isEdit, isBriefPage = true })=>{
    const { enqueueError } = (0, _providers.useSnackbar)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { form } = (0, _brief.useBriefConfigForm)();
    const onSubmitCreateSuccess = (0, _react.useCallback)(()=>isBriefPage ? navigate(_router.BRIEF_ROUTE_CREATE_SUCCESS, {
            replace: true,
            state: {
                initialWatchlistId
            }
        }) : null, [
        initialWatchlistId,
        isBriefPage,
        navigate
    ]);
    const onSubmitEditSuccess = (0, _react.useCallback)(()=>navigate(_router.BRIEF_ROUTE_EDIT_SUCCESS, {
            replace: true
        }), [
        navigate
    ]);
    const onSubmitError = (0, _react.useCallback)(()=>enqueueError("Brief submission failed, please try again."), [
        enqueueError
    ]);
    const { submitNewBrief, isSaving: isSavingSubmitCreated } = (0, _brief.useBriefCreateSubmission)({
        onSubmitSuccess: onSubmitCreateSuccess,
        onSubmitError
    });
    const { submitEditedBrief, isSaving: isSavingSubmitEdited } = (0, _brief.useBriefEditSubmission)({
        onSubmitSuccess: onSubmitEditSuccess,
        onSubmitError
    });
    const handleComplete = (0, _react.useCallback)(async ()=>{
        if (isEdit) {
            submitEditedBrief(form);
        } else {
            submitNewBrief(form);
        }
    }, [
        isEdit,
        submitEditedBrief,
        form,
        submitNewBrief
    ]);
    const isSaving = isSavingSubmitCreated || isSavingSubmitEdited;
    return {
        isSaving,
        handleComplete
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9ob29rcy91c2VDcmVhdGVCcmllZkNhbGxiYWNrcy91c2VDcmVhdGVCcmllZkNhbGxiYWNrcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJcbmltcG9ydCB7XG4gIHVzZUJyaWVmQ29uZmlnRm9ybSxcbiAgdXNlQnJpZWZDcmVhdGVTdWJtaXNzaW9uLFxuICB1c2VCcmllZkVkaXRTdWJtaXNzaW9uLFxufSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9icmllZlwiXG5pbXBvcnQgeyB1c2VTbmFja2JhciB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgQlJJRUZfUk9VVEVfQ1JFQVRFX1NVQ0NFU1MsIEJSSUVGX1JPVVRFX0VESVRfU1VDQ0VTUyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JvdXRlclwiXG5cbnR5cGUgVXNlQ3JlYXRlQnJpZWZDYWxsYmFja3NQcm9wcyA9IHtcbiAgaW5pdGlhbFdhdGNobGlzdElkOiBzdHJpbmcgfCBudWxsXG4gIGlzRWRpdDogYm9vbGVhblxuICBpc0JyaWVmUGFnZT86IGJvb2xlYW5cbn1cblxudHlwZSBVc2VDcmVhdGVCcmllZkNhbGxiYWNrc1N0YXRlID0ge1xuICBoYW5kbGVDb21wbGV0ZTogKCkgPT4gdm9pZFxuICBpc1NhdmluZzogYm9vbGVhblxufVxuXG5jb25zdCB1c2VDcmVhdGVCcmllZkNhbGxiYWNrcyA9ICh7XG4gIGluaXRpYWxXYXRjaGxpc3RJZCxcbiAgaXNFZGl0LFxuICBpc0JyaWVmUGFnZSA9IHRydWUsXG59OiBVc2VDcmVhdGVCcmllZkNhbGxiYWNrc1Byb3BzKTogVXNlQ3JlYXRlQnJpZWZDYWxsYmFja3NTdGF0ZSA9PiB7XG4gIGNvbnN0IHsgZW5xdWV1ZUVycm9yIH0gPSB1c2VTbmFja2JhcigpXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKVxuICBjb25zdCB7IGZvcm0gfSA9IHVzZUJyaWVmQ29uZmlnRm9ybSgpXG5cbiAgY29uc3Qgb25TdWJtaXRDcmVhdGVTdWNjZXNzID0gdXNlQ2FsbGJhY2soXG4gICAgKCkgPT5cbiAgICAgIGlzQnJpZWZQYWdlXG4gICAgICAgID8gbmF2aWdhdGUoQlJJRUZfUk9VVEVfQ1JFQVRFX1NVQ0NFU1MsIHtcbiAgICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgICBzdGF0ZTogeyBpbml0aWFsV2F0Y2hsaXN0SWQgfSxcbiAgICAgICAgICB9KVxuICAgICAgICA6IG51bGwsXG4gICAgW2luaXRpYWxXYXRjaGxpc3RJZCwgaXNCcmllZlBhZ2UsIG5hdmlnYXRlXSxcbiAgKVxuXG4gIGNvbnN0IG9uU3VibWl0RWRpdFN1Y2Nlc3MgPSB1c2VDYWxsYmFjayhcbiAgICAoKSA9PiBuYXZpZ2F0ZShCUklFRl9ST1VURV9FRElUX1NVQ0NFU1MsIHsgcmVwbGFjZTogdHJ1ZSB9KSxcbiAgICBbbmF2aWdhdGVdLFxuICApXG5cbiAgY29uc3Qgb25TdWJtaXRFcnJvciA9IHVzZUNhbGxiYWNrKFxuICAgICgpID0+IGVucXVldWVFcnJvcihcIkJyaWVmIHN1Ym1pc3Npb24gZmFpbGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiKSxcbiAgICBbZW5xdWV1ZUVycm9yXSxcbiAgKVxuXG4gIGNvbnN0IHsgc3VibWl0TmV3QnJpZWYsIGlzU2F2aW5nOiBpc1NhdmluZ1N1Ym1pdENyZWF0ZWQgfSA9IHVzZUJyaWVmQ3JlYXRlU3VibWlzc2lvbih7XG4gICAgb25TdWJtaXRTdWNjZXNzOiBvblN1Ym1pdENyZWF0ZVN1Y2Nlc3MsXG4gICAgb25TdWJtaXRFcnJvcixcbiAgfSlcblxuICBjb25zdCB7IHN1Ym1pdEVkaXRlZEJyaWVmLCBpc1NhdmluZzogaXNTYXZpbmdTdWJtaXRFZGl0ZWQgfSA9IHVzZUJyaWVmRWRpdFN1Ym1pc3Npb24oe1xuICAgIG9uU3VibWl0U3VjY2Vzczogb25TdWJtaXRFZGl0U3VjY2VzcyxcbiAgICBvblN1Ym1pdEVycm9yLFxuICB9KVxuXG4gIGNvbnN0IGhhbmRsZUNvbXBsZXRlID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc0VkaXQpIHtcbiAgICAgIHN1Ym1pdEVkaXRlZEJyaWVmKGZvcm0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Ym1pdE5ld0JyaWVmKGZvcm0pXG4gICAgfVxuICB9LCBbaXNFZGl0LCBzdWJtaXRFZGl0ZWRCcmllZiwgZm9ybSwgc3VibWl0TmV3QnJpZWZdKVxuXG4gIGNvbnN0IGlzU2F2aW5nID0gaXNTYXZpbmdTdWJtaXRDcmVhdGVkIHx8IGlzU2F2aW5nU3VibWl0RWRpdGVkXG5cbiAgcmV0dXJuIHsgaXNTYXZpbmcsIGhhbmRsZUNvbXBsZXRlIH1cbn1cblxuZXhwb3J0IHsgdXNlQ3JlYXRlQnJpZWZDYWxsYmFja3MgfVxuZXhwb3J0IHR5cGUgeyBVc2VDcmVhdGVCcmllZkNhbGxiYWNrc1N0YXRlLCBVc2VDcmVhdGVCcmllZkNhbGxiYWNrc1Byb3BzIH1cbiJdLCJuYW1lcyI6WyJ1c2VDcmVhdGVCcmllZkNhbGxiYWNrcyIsImluaXRpYWxXYXRjaGxpc3RJZCIsImlzRWRpdCIsImlzQnJpZWZQYWdlIiwiZW5xdWV1ZUVycm9yIiwidXNlU25hY2tiYXIiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwiZm9ybSIsInVzZUJyaWVmQ29uZmlnRm9ybSIsIm9uU3VibWl0Q3JlYXRlU3VjY2VzcyIsInVzZUNhbGxiYWNrIiwiQlJJRUZfUk9VVEVfQ1JFQVRFX1NVQ0NFU1MiLCJyZXBsYWNlIiwic3RhdGUiLCJvblN1Ym1pdEVkaXRTdWNjZXNzIiwiQlJJRUZfUk9VVEVfRURJVF9TVUNDRVNTIiwib25TdWJtaXRFcnJvciIsInN1Ym1pdE5ld0JyaWVmIiwiaXNTYXZpbmciLCJpc1NhdmluZ1N1Ym1pdENyZWF0ZWQiLCJ1c2VCcmllZkNyZWF0ZVN1Ym1pc3Npb24iLCJvblN1Ym1pdFN1Y2Nlc3MiLCJzdWJtaXRFZGl0ZWRCcmllZiIsImlzU2F2aW5nU3VibWl0RWRpdGVkIiwidXNlQnJpZWZFZGl0U3VibWlzc2lvbiIsImhhbmRsZUNvbXBsZXRlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTBFU0E7OztlQUFBQTs7O3VCQTFFbUI7Z0NBQ0E7dUJBS3JCOzJCQUNxQjt3QkFDeUM7QUFhckUsTUFBTUEsMEJBQTBCLENBQUMsRUFDL0JDLGtCQUFrQixFQUNsQkMsTUFBTSxFQUNOQyxjQUFjLElBQUksRUFDVztJQUM3QixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSxzQkFBVztJQUNwQyxNQUFNQyxXQUFXQyxJQUFBQSwyQkFBVztJQUM1QixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHQyxJQUFBQSx5QkFBa0I7SUFFbkMsTUFBTUMsd0JBQXdCQyxJQUFBQSxrQkFBVyxFQUN2QyxJQUNFUixjQUNJRyxTQUFTTSxrQ0FBMEIsRUFBRTtZQUNuQ0MsU0FBUztZQUNUQyxPQUFPO2dCQUFFYjtZQUFtQjtRQUM5QixLQUNBLE1BQ047UUFBQ0E7UUFBb0JFO1FBQWFHO0tBQVM7SUFHN0MsTUFBTVMsc0JBQXNCSixJQUFBQSxrQkFBVyxFQUNyQyxJQUFNTCxTQUFTVSxnQ0FBd0IsRUFBRTtZQUFFSCxTQUFTO1FBQUssSUFDekQ7UUFBQ1A7S0FBUztJQUdaLE1BQU1XLGdCQUFnQk4sSUFBQUEsa0JBQVcsRUFDL0IsSUFBTVAsYUFBYSwrQ0FDbkI7UUFBQ0E7S0FBYTtJQUdoQixNQUFNLEVBQUVjLGNBQWMsRUFBRUMsVUFBVUMscUJBQXFCLEVBQUUsR0FBR0MsSUFBQUEsK0JBQXdCLEVBQUM7UUFDbkZDLGlCQUFpQlo7UUFDakJPO0lBQ0Y7SUFFQSxNQUFNLEVBQUVNLGlCQUFpQixFQUFFSixVQUFVSyxvQkFBb0IsRUFBRSxHQUFHQyxJQUFBQSw2QkFBc0IsRUFBQztRQUNuRkgsaUJBQWlCUDtRQUNqQkU7SUFDRjtJQUVBLE1BQU1TLGlCQUFpQmYsSUFBQUEsa0JBQVcsRUFBQztRQUNqQyxJQUFJVCxRQUFRO1lBQ1ZxQixrQkFBa0JmO1FBQ3BCLE9BQU87WUFDTFUsZUFBZVY7UUFDakI7SUFDRixHQUFHO1FBQUNOO1FBQVFxQjtRQUFtQmY7UUFBTVU7S0FBZTtJQUVwRCxNQUFNQyxXQUFXQyx5QkFBeUJJO0lBRTFDLE9BQU87UUFBRUw7UUFBVU87SUFBZTtBQUNwQyJ9