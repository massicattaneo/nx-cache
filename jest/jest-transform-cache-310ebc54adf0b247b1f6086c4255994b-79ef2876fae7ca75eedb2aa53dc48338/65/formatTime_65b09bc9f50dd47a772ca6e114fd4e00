4edb6d74af2a0ca80fa026052eec28e5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatISODate: function() {
        return formatISODate;
    },
    formatTime: function() {
        return formatTime;
    },
    getValidDateOrStringDateFromValue: function() {
        return getValidDateOrStringDateFromValue;
    }
});
const _format = /*#__PURE__*/ _interop_require_default(require("date-fns/format"));
const _intlFormat = /*#__PURE__*/ _interop_require_default(require("date-fns/intlFormat"));
const _isToday = /*#__PURE__*/ _interop_require_default(require("date-fns/isToday"));
const _parseISO = /*#__PURE__*/ _interop_require_default(require("date-fns/parseISO"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const formatTime = (ts, localeOptions)=>{
    const date = new Date(ts);
    return (0, _isToday.default)(date) ? (0, _intlFormat.default)(date, {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false
    }, localeOptions) : (0, _intlFormat.default)(date, {
        day: "2-digit",
        month: "short",
        year: "numeric"
    }, localeOptions);
};
const formatISODate = (input, formatString = "yyyy-MM-dd HH:mm:ss.SSS")=>{
    const date = (0, _parseISO.default)(input);
    return (0, _format.default)(date, formatString);
};
const getValidDateOrStringDateFromValue = (date)=>{
    if (!date) return "";
    if (typeof date === "string") return date;
    return formatISODate(date.toISOString());
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3V0aWxzL3NyYy9saWIvZm9ybWF0VGltZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZm9ybWF0IGZyb20gXCJkYXRlLWZucy9mb3JtYXRcIlxuaW1wb3J0IGludGxGb3JtYXQgZnJvbSBcImRhdGUtZm5zL2ludGxGb3JtYXRcIlxuaW1wb3J0IGlzVG9kYXkgZnJvbSBcImRhdGUtZm5zL2lzVG9kYXlcIlxuaW1wb3J0IHBhcnNlSVNPIGZyb20gXCJkYXRlLWZucy9wYXJzZUlTT1wiXG5cbmNvbnN0IGZvcm1hdFRpbWUgPSAodHM6IHN0cmluZywgbG9jYWxlT3B0aW9ucz86IHsgbG9jYWxlOiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+IH0pID0+IHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKVxuICByZXR1cm4gaXNUb2RheShkYXRlKVxuICAgID8gaW50bEZvcm1hdChkYXRlLCB7IGhvdXI6IFwiMi1kaWdpdFwiLCBtaW51dGU6IFwiMi1kaWdpdFwiLCBob3VyMTI6IGZhbHNlIH0sIGxvY2FsZU9wdGlvbnMpXG4gICAgOiBpbnRsRm9ybWF0KGRhdGUsIHsgZGF5OiBcIjItZGlnaXRcIiwgbW9udGg6IFwic2hvcnRcIiwgeWVhcjogXCJudW1lcmljXCIgfSwgbG9jYWxlT3B0aW9ucylcbn1cblxuY29uc3QgZm9ybWF0SVNPRGF0ZSA9IChpbnB1dDogc3RyaW5nLCBmb3JtYXRTdHJpbmcgPSBcInl5eXktTU0tZGQgSEg6bW06c3MuU1NTXCIpID0+IHtcbiAgY29uc3QgZGF0ZSA9IHBhcnNlSVNPKGlucHV0KVxuXG4gIHJldHVybiBmb3JtYXQoZGF0ZSwgZm9ybWF0U3RyaW5nKVxufVxuXG5jb25zdCBnZXRWYWxpZERhdGVPclN0cmluZ0RhdGVGcm9tVmFsdWUgPSAoZGF0ZTogRGF0ZSB8IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyA9PiB7XG4gIGlmICghZGF0ZSkgcmV0dXJuIFwiXCJcbiAgaWYgKHR5cGVvZiBkYXRlID09PSBcInN0cmluZ1wiKSByZXR1cm4gZGF0ZVxuICByZXR1cm4gZm9ybWF0SVNPRGF0ZShkYXRlLnRvSVNPU3RyaW5nKCkpXG59XG5cbmV4cG9ydCB7IGZvcm1hdFRpbWUsIGZvcm1hdElTT0RhdGUsIGdldFZhbGlkRGF0ZU9yU3RyaW5nRGF0ZUZyb21WYWx1ZSB9XG4iXSwibmFtZXMiOlsiZm9ybWF0SVNPRGF0ZSIsImZvcm1hdFRpbWUiLCJnZXRWYWxpZERhdGVPclN0cmluZ0RhdGVGcm9tVmFsdWUiLCJ0cyIsImxvY2FsZU9wdGlvbnMiLCJkYXRlIiwiRGF0ZSIsImlzVG9kYXkiLCJpbnRsRm9ybWF0IiwiaG91ciIsIm1pbnV0ZSIsImhvdXIxMiIsImRheSIsIm1vbnRoIiwieWVhciIsImlucHV0IiwiZm9ybWF0U3RyaW5nIiwicGFyc2VJU08iLCJmb3JtYXQiLCJ0b0lTT1N0cmluZyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF3QnFCQSxhQUFhO2VBQWJBOztJQUFaQyxVQUFVO2VBQVZBOztJQUEyQkMsaUNBQWlDO2VBQWpDQTs7OytEQXhCakI7bUVBQ0k7Z0VBQ0g7aUVBQ0M7Ozs7OztBQUVyQixNQUFNRCxhQUFhLENBQUNFLElBQVlDO0lBQzlCLE1BQU1DLE9BQU8sSUFBSUMsS0FBS0g7SUFDdEIsT0FBT0ksSUFBQUEsZ0JBQU8sRUFBQ0YsUUFDWEcsSUFBQUEsbUJBQVUsRUFBQ0gsTUFBTTtRQUFFSSxNQUFNO1FBQVdDLFFBQVE7UUFBV0MsUUFBUTtJQUFNLEdBQUdQLGlCQUN4RUksSUFBQUEsbUJBQVUsRUFBQ0gsTUFBTTtRQUFFTyxLQUFLO1FBQVdDLE9BQU87UUFBU0MsTUFBTTtJQUFVLEdBQUdWO0FBQzVFO0FBRUEsTUFBTUosZ0JBQWdCLENBQUNlLE9BQWVDLGVBQWUseUJBQXlCO0lBQzVFLE1BQU1YLE9BQU9ZLElBQUFBLGlCQUFRLEVBQUNGO0lBRXRCLE9BQU9HLElBQUFBLGVBQU0sRUFBQ2IsTUFBTVc7QUFDdEI7QUFFQSxNQUFNZCxvQ0FBb0MsQ0FBQ0c7SUFDekMsSUFBSSxDQUFDQSxNQUFNLE9BQU87SUFDbEIsSUFBSSxPQUFPQSxTQUFTLFVBQVUsT0FBT0E7SUFDckMsT0FBT0wsY0FBY0ssS0FBS2MsV0FBVztBQUN2QyJ9