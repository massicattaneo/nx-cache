ddaf1ce091e63e521c127d1b92ba4b20
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _theme = require("@rp/react/theme");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const setSessionValue = (storage)=>{
    switch(storage.key){
        case "sortBy":
            var _storage_value;
            window.sessionStorage.setItem(`bigdata.${storage.queryId}.sortBy`, (_storage_value = storage.value) !== null && _storage_value !== void 0 ? _storage_value : "");
            break;
        default:
            break;
    }
};
const getSessionValue = (storage)=>{
    switch(storage.key){
        case "sortBy":
            return window.sessionStorage.getItem(`bigdata.${storage.queryId}.sortBy`);
        default:
            return "";
    }
};
const PREFIX = "StorySorter";
const classes = {
    sorter: `${PREFIX}-sorter`,
    sortPicker: `${PREFIX}-sortPicker`,
    checkIcon: `${PREFIX}-checkIcon`,
    tr: `${PREFIX}-tr`
};
const StorySorterStyled = (0, _theme.styled)("div")(({ theme })=>({
        [`&.${classes.sorter}`]: {
            color: theme.palette.grey[300],
            alignItems: "center",
            display: "flex",
            minWidth: "150px",
            flexGrow: 0
        },
        [`& .${classes.sortPicker}`]: {
            background: "transparent",
            padding: 0,
            marginLeft: 3,
            minHeight: 0,
            color: theme.palette.common.white,
            fontSize: 14,
            "&::after": {
                content: '""',
                border: 0
            },
            "& div": {
                padding: 0,
                "&:focus": {
                    background: "transparent"
                }
            }
        }
    }));
const StorySorter = ({ sorterOptions, sort, setSort, queryId })=>{
    var _getSessionValue;
    const sortValue = (_getSessionValue = getSessionValue({
        key: "sortBy",
        queryId
    })) !== null && _getSessionValue !== void 0 ? _getSessionValue : sort;
    const toCapitalize = (string)=>{
        if (!string) return "";
        return string.charAt(0).toUpperCase() + string.slice(1);
    };
    const handleChange = (event)=>{
        setSessionValue({
            key: "sortBy",
            queryId,
            value: event.target.value
        });
        setSort(event.target.value);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(StorySorterStyled, {
        className: classes.sorter,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                variant: "body2",
                children: "Sort by:"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Select, {
                variant: "standard",
                disableUnderline: true,
                value: sortValue,
                onChange: handleChange,
                className: classes.sortPicker,
                renderValue: (value)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        children: toCapitalize(sorterOptions.find((type)=>type === value))
                    }),
                "data-testid": "sort-picker",
                IconComponent: _icons.KeyboardArrowDown,
                children: sorterOptions.map((value)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.MenuItem, {
                        value: value,
                        children: [
                            toCapitalize(value),
                            sortValue === value && /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Check, {
                                sx: {
                                    ml: 2
                                }
                            })
                        ]
                    }, value))
            })
        ]
    });
};
const _default = StorySorter;

//# sourceMappingURL=data:application/json;base64,