3812dff328f443cd6ddab738054bbff3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    extractParams: function() {
        return extractParams;
    },
    getTrpcRouterPaths: function() {
        return getTrpcRouterPaths;
    },
    isOpenApiMeta: function() {
        return isOpenApiMeta;
    },
    isProcedure: function() {
        return isProcedure;
    },
    matchPattern: function() {
        return matchPattern;
    }
});
const isProcedure = (obj)=>{
    return "_def" in obj;
};
const isOpenApiMeta = (meta)=>{
    return typeof meta === "object" && meta !== null && "openapi" in meta;
};
function getTrpcRouterPaths(router) {
    if (router._def && router._def.procedures) {
        return Object.entries(router._def.procedures).map(([path, procedure])=>{
            return {
                procedure: procedure,
                path
            };
        });
    }
    return [];
}
function matchPattern(url, pattern) {
    // Convert the pattern into a regular expression
    const paramNames = [];
    const regexPattern = pattern.replace(/:[a-zA-Z0-9-_]+/g, (match)=>{
        const paramName = match.substring(1);
        paramNames.push(paramName);
        return "([^/]+)" // Capture everything between slashes
        ;
    }).replace(/::/g, "([^/]+)") // Handle cases like ::subId
    ;
    const regex = new RegExp(`^${regexPattern}$`);
    var _url_match;
    return {
        match: !!url.match(regex),
        paramNames,
        matches: (_url_match = url.match(regex)) !== null && _url_match !== void 0 ? _url_match : []
    };
}
function extractParams(url, pattern) {
    const { matches, match, paramNames } = matchPattern(url, pattern);
    if (match) {
        // Extract the parameter values using the captured groups
        const params = {};
        paramNames.forEach((paramName, index)=>{
            params[paramName] = matches[index + 1] // match[0] is the full URL match, params start at index 1
            ;
        });
        return params;
    }
    return null // Return null if no match
    ;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3RycGMvc3JjL2xpYi90cnBjQWRhcHRlcnNVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnlUUlBDUHJvY2VkdXJlIH0gZnJvbSBcIkB0cnBjL3NlcnZlclwiXG5pbXBvcnQgeyBQcm9jZWR1cmUsIFJvdXRlciB9IGZyb20gXCJAdHJwYy9zZXJ2ZXIvZGlzdC91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnRcIlxuXG5leHBvcnQgdHlwZSBDdXN0b21Qcm9jZWR1cmUgPSBQcm9jZWR1cmU8XG4gIFwibXV0YXRpb25cIiB8IFwicXVlcnlcIiB8IFwic3Vic2NyaXB0aW9uXCIsXG4gIHtcbiAgICBpbnB1dDogdW5rbm93blxuICAgIG91dHB1dDogdW5rbm93blxuICB9XG4+XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tUm91dGVyUmVjb3JkIHtcbiAgW2tleTogc3RyaW5nXTogQ3VzdG9tUHJvY2VkdXJlIHwgQ3VzdG9tUm91dGVyUmVjb3JkXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgdHlwZSBDdXN0b21Sb3V0ZXIgPSBSb3V0ZXI8YW55LCBDdXN0b21Sb3V0ZXJSZWNvcmQ+XG5cbmV4cG9ydCBjb25zdCBpc1Byb2NlZHVyZSA9IChvYmo6IEN1c3RvbVJvdXRlclJlY29yZCB8IEN1c3RvbVByb2NlZHVyZSk6IG9iaiBpcyBDdXN0b21Qcm9jZWR1cmUgPT4ge1xuICByZXR1cm4gXCJfZGVmXCIgaW4gb2JqXG59XG5cbmV4cG9ydCBjb25zdCBpc09wZW5BcGlNZXRhID0gKFxuICBtZXRhOiB1bmtub3duLFxuKTogbWV0YSBpcyB7IG9wZW5hcGk6IHsgbWV0aG9kOiBzdHJpbmc7IHBhdGg6IHN0cmluZyB9IH0gPT4ge1xuICByZXR1cm4gdHlwZW9mIG1ldGEgPT09IFwib2JqZWN0XCIgJiYgbWV0YSAhPT0gbnVsbCAmJiBcIm9wZW5hcGlcIiBpbiBtZXRhXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcnBjUm91dGVyUGF0aHM8VCBleHRlbmRzIEN1c3RvbVJvdXRlcj4oXG4gIHJvdXRlcjogVCxcbik6IEFycmF5PHtcbiAgcHJvY2VkdXJlOiBDdXN0b21Qcm9jZWR1cmVcbiAgcGF0aDogc3RyaW5nXG59PiB7XG4gIGlmIChyb3V0ZXIuX2RlZiAmJiByb3V0ZXIuX2RlZi5wcm9jZWR1cmVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJvdXRlci5fZGVmLnByb2NlZHVyZXMpLm1hcCgoW3BhdGgsIHByb2NlZHVyZV0pID0+IHtcbiAgICAgIHJldHVybiB7IHByb2NlZHVyZTogcHJvY2VkdXJlIGFzIEFueVRSUENQcm9jZWR1cmUsIHBhdGggfVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIFtdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFBhdHRlcm4odXJsOiBzdHJpbmcsIHBhdHRlcm46IHN0cmluZykge1xuICAvLyBDb252ZXJ0IHRoZSBwYXR0ZXJuIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgY29uc3QgcGFyYW1OYW1lczogQXJyYXk8c3RyaW5nPiA9IFtdXG4gIGNvbnN0IHJlZ2V4UGF0dGVybiA9IHBhdHRlcm5cbiAgICAucmVwbGFjZSgvOlthLXpBLVowLTktX10rL2csIG1hdGNoID0+IHtcbiAgICAgIGNvbnN0IHBhcmFtTmFtZSA9IG1hdGNoLnN1YnN0cmluZygxKVxuICAgICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSlcbiAgICAgIHJldHVybiBcIihbXi9dKylcIiAvLyBDYXB0dXJlIGV2ZXJ5dGhpbmcgYmV0d2VlbiBzbGFzaGVzXG4gICAgfSlcbiAgICAucmVwbGFjZSgvOjovZywgXCIoW14vXSspXCIpIC8vIEhhbmRsZSBjYXNlcyBsaWtlIDo6c3ViSWRcblxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke3JlZ2V4UGF0dGVybn0kYClcbiAgcmV0dXJuIHtcbiAgICBtYXRjaDogISF1cmwubWF0Y2gocmVnZXgpLFxuICAgIHBhcmFtTmFtZXMsXG4gICAgbWF0Y2hlczogdXJsLm1hdGNoKHJlZ2V4KSA/PyBbXSxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhcmFtcyh1cmw6IHN0cmluZywgcGF0dGVybjogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwge1xuICBjb25zdCB7IG1hdGNoZXMsIG1hdGNoLCBwYXJhbU5hbWVzIH0gPSBtYXRjaFBhdHRlcm4odXJsLCBwYXR0ZXJuKVxuXG4gIGlmIChtYXRjaCkge1xuICAgIC8vIEV4dHJhY3QgdGhlIHBhcmFtZXRlciB2YWx1ZXMgdXNpbmcgdGhlIGNhcHR1cmVkIGdyb3Vwc1xuICAgIGNvbnN0IHBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9XG4gICAgcGFyYW1OYW1lcy5mb3JFYWNoKChwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgICBwYXJhbXNbcGFyYW1OYW1lXSA9IG1hdGNoZXNbaW5kZXggKyAxXSAvLyBtYXRjaFswXSBpcyB0aGUgZnVsbCBVUkwgbWF0Y2gsIHBhcmFtcyBzdGFydCBhdCBpbmRleCAxXG4gICAgfSlcbiAgICByZXR1cm4gcGFyYW1zXG4gIH1cblxuICByZXR1cm4gbnVsbCAvLyBSZXR1cm4gbnVsbCBpZiBubyBtYXRjaFxufVxuIl0sIm5hbWVzIjpbImV4dHJhY3RQYXJhbXMiLCJnZXRUcnBjUm91dGVyUGF0aHMiLCJpc09wZW5BcGlNZXRhIiwiaXNQcm9jZWR1cmUiLCJtYXRjaFBhdHRlcm4iLCJvYmoiLCJtZXRhIiwicm91dGVyIiwiX2RlZiIsInByb2NlZHVyZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwicGF0aCIsInByb2NlZHVyZSIsInVybCIsInBhdHRlcm4iLCJwYXJhbU5hbWVzIiwicmVnZXhQYXR0ZXJuIiwicmVwbGFjZSIsIm1hdGNoIiwicGFyYW1OYW1lIiwic3Vic3RyaW5nIiwicHVzaCIsInJlZ2V4IiwiUmVnRXhwIiwibWF0Y2hlcyIsInBhcmFtcyIsImZvckVhY2giLCJpbmRleCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBNkRnQkEsYUFBYTtlQUFiQTs7SUFqQ0FDLGtCQUFrQjtlQUFsQkE7O0lBTkhDLGFBQWE7ZUFBYkE7O0lBSkFDLFdBQVc7ZUFBWEE7O0lBd0JHQyxZQUFZO2VBQVpBOzs7QUF4QlQsTUFBTUQsY0FBYyxDQUFDRTtJQUMxQixPQUFPLFVBQVVBO0FBQ25CO0FBRU8sTUFBTUgsZ0JBQWdCLENBQzNCSTtJQUVBLE9BQU8sT0FBT0EsU0FBUyxZQUFZQSxTQUFTLFFBQVEsYUFBYUE7QUFDbkU7QUFFTyxTQUFTTCxtQkFDZE0sTUFBUztJQUtULElBQUlBLE9BQU9DLElBQUksSUFBSUQsT0FBT0MsSUFBSSxDQUFDQyxVQUFVLEVBQUU7UUFDekMsT0FBT0MsT0FBT0MsT0FBTyxDQUFDSixPQUFPQyxJQUFJLENBQUNDLFVBQVUsRUFBRUcsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsTUFBTUMsVUFBVTtZQUNsRSxPQUFPO2dCQUFFQSxXQUFXQTtnQkFBK0JEO1lBQUs7UUFDMUQ7SUFDRjtJQUNBLE9BQU8sRUFBRTtBQUNYO0FBRU8sU0FBU1QsYUFBYVcsR0FBVyxFQUFFQyxPQUFlO0lBQ3ZELGdEQUFnRDtJQUNoRCxNQUFNQyxhQUE0QixFQUFFO0lBQ3BDLE1BQU1DLGVBQWVGLFFBQ2xCRyxPQUFPLENBQUMsb0JBQW9CQyxDQUFBQTtRQUMzQixNQUFNQyxZQUFZRCxNQUFNRSxTQUFTLENBQUM7UUFDbENMLFdBQVdNLElBQUksQ0FBQ0Y7UUFDaEIsT0FBTyxVQUFVLHFDQUFxQzs7SUFDeEQsR0FDQ0YsT0FBTyxDQUFDLE9BQU8sV0FBVyw0QkFBNEI7O0lBRXpELE1BQU1LLFFBQVEsSUFBSUMsT0FBTyxDQUFDLENBQUMsRUFBRVAsYUFBYSxDQUFDLENBQUM7UUFJakNIO0lBSFgsT0FBTztRQUNMSyxPQUFPLENBQUMsQ0FBQ0wsSUFBSUssS0FBSyxDQUFDSTtRQUNuQlA7UUFDQVMsU0FBU1gsQ0FBQUEsYUFBQUEsSUFBSUssS0FBSyxDQUFDSSxvQkFBVlQsd0JBQUFBLGFBQW9CLEVBQUU7SUFDakM7QUFDRjtBQUVPLFNBQVNmLGNBQWNlLEdBQVcsRUFBRUMsT0FBZTtJQUN4RCxNQUFNLEVBQUVVLE9BQU8sRUFBRU4sS0FBSyxFQUFFSCxVQUFVLEVBQUUsR0FBR2IsYUFBYVcsS0FBS0M7SUFFekQsSUFBSUksT0FBTztRQUNULHlEQUF5RDtRQUN6RCxNQUFNTyxTQUFpQyxDQUFDO1FBQ3hDVixXQUFXVyxPQUFPLENBQUMsQ0FBQ1AsV0FBV1E7WUFDN0JGLE1BQU0sQ0FBQ04sVUFBVSxHQUFHSyxPQUFPLENBQUNHLFFBQVEsRUFBRSxDQUFDLDBEQUEwRDs7UUFDbkc7UUFDQSxPQUFPRjtJQUNUO0lBRUEsT0FBTyxLQUFLLDBCQUEwQjs7QUFDeEMifQ==