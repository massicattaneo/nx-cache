2e85b7b0d068ebb27fece44d67573b75
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "clerkApiRouter", {
    enumerable: true,
    get: function() {
        return clerkApiRouter;
    }
});
const _zod = require("zod");
const _clerkClient = require("../../msw/mocks/clerk/clerkClient");
const _clerkEnvironment = require("../../msw/mocks/clerk/clerkEnvironment");
const _clerkOrganizationIdMembership = require("../../msw/mocks/clerk/clerkOrganizationIdMembership");
const _clerkSession = require("../../msw/mocks/clerk/clerkSession");
const _clerkSignUp = require("../../msw/mocks/clerk/clerkSignUp");
const _clerkTouch = require("../../msw/mocks/clerk/clerkTouch");
const _clerkapiprocedure = require("./clerk-api-procedure");
const clerkApiRouter = _clerkapiprocedure.trpcClerkApiServer.router({
    me: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/me"
        }
    }).query(async ()=>_clerkClient.clerkClient),
    environment: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/v1/environment"
        }
    }).mutation(async ()=>_clerkEnvironment.clerkEnvironment),
    signup: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sign_ups"
        }
    }).input(_zod.z.object({
        email_address: _zod.z.string()
    })).mutation(async ({ input })=>(0, _clerkSignUp.clerkSignUp)({
            email: input.email_address
        })),
    finishSignUp: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sign_ups/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string(),
        first_name: _zod.z.string(),
        last_name: _zod.z.string(),
        password: _zod.z.string(),
        legal_accepted: _zod.z.string(),
        unsafe_metadata: _zod.z.string()
    })).mutation(async ({ input })=>(0, _clerkSignUp.clerkSignUp)({
            id: input.id
        })),
    prepareVerification: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sign_ups/:id/prepare_verification"
        }
    }).input(_zod.z.object({
        id: _zod.z.string(),
        strategy: _zod.z.literal("email_code")
    })).mutation(async ({ input })=>{
        return (0, _clerkSignUp.clerkSignUp)({
            id: input.id
        });
    }),
    attemptVerification: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sign_ups/:id/attempt_verification"
        }
    }).input(_zod.z.object({
        id: _zod.z.string(),
        strategy: _zod.z.literal("email_code"),
        code: _zod.z.string()
    })).mutation(async ()=>null),
    client: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/v1/client"
        }
    }).query(async ()=>_clerkClient.clerkClient),
    sessions: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sessions"
        }
    }).mutation(async ()=>(0, _clerkSession.clerkSession)()),
    sessionsTouch: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sessions/:id/touch"
        }
    }).mutation(async ()=>_clerkTouch.clerkTouch),
    templateTokens: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sessions/:id/tokens/bigdata_web"
        }
    }).mutation(async ()=>(0, _clerkSession.clerkSession)()),
    tokens: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/v1/client/sessions/:id/tokens"
        }
    }).mutation(async ()=>(0, _clerkSession.clerkSession)()),
    organizationMemberships: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/v1/me/organization_memberships"
        }
    }).query(async ()=>_clerkOrganizationIdMembership.clerkOrganizationIdMembership),
    organizationIdMemberships: _clerkapiprocedure.clerkApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/v1/organizations/:id/memberships"
        }
    }).query(async ()=>_clerkOrganizationIdMembership.clerkOrganizationIdMembership)
});

//# sourceMappingURL=data:application/json;base64,