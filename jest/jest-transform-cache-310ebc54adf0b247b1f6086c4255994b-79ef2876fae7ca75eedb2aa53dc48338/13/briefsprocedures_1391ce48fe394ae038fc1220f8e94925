2b806f4003519b0045273f471090b8cd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "briefsProcedures", {
    enumerable: true,
    get: function() {
        return briefsProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _server = require("@trpc/server");
const _database = require("../../../database");
const _bigdataapiprocedure = require("../bigdata-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const createInputSchema = _zod.z.object({
    brief_name: _zod.z.string(),
    watchlist_ids: _zod.z.array(_zod.z.string()),
    email: _zod.z.string(),
    delivery_modes: _zod.z.array(_contracts.bigdataSchemas.st_briefs_DeliveryDestination),
    schedule: _contracts.bigdataSchemas.st_briefs_Schedule
});
const briefsProcedures = {
    list: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/briefs"
        }
    }).input(_zod.z.object({})).output(_contracts.bigdataSchemas.st_briefs_ListBriefConfigsResponse_Input).query(async ({ ctx })=>{
        return {
            results: await ctx.db.collection("briefs").find()
        };
    }),
    get: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/briefs/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_briefs_BriefConfigResponse_Input).query(async ({ ctx, input })=>{
        const found = await ctx.db.collection("briefs").findOne({
            id: input.id
        });
        if (!found) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return found;
    }),
    latest: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/briefs/:id/reports/latest"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_briefs_LatestBriefReportResponse_Input).query(async ({ ctx, input })=>{
        const brief = await ctx.db.collection("briefs").findOne({
            id: input.id
        });
        if (!brief) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        const [watchlistId] = brief.watchlistIds;
        const watchlist = await ctx.db.collection("watchlists").findOne({
            id: watchlistId
        });
        if (!watchlist) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        const entities = (await ctx.db.collection("cqs").find((item)=>watchlist.items.includes(item.key))).map((item)=>_object_spread_props(_object_spread({}, item), {
                id: item.key
            }));
        return (0, _database.generateReport)({
            watchlist,
            brief,
            entities
        });
    }),
    create: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/briefs"
        }
    }).input(createInputSchema).output(_contracts.bigdataSchemas.st_briefs_BriefConfigResponse_Input).mutation(async ({ ctx, input })=>{
        return ctx.db.collection("briefs").insertOne((0, _database.generateBrief)(_object_spread({
            briefName: input.brief_name,
            watchlistIds: input.watchlist_ids
        }, input)));
    }),
    update: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PUT",
            path: "/briefs/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    }).merge(createInputSchema)).output(_contracts.bigdataSchemas.st_briefs_BriefConfigResponse_Input).mutation(async ({ ctx, input })=>{
        const found = await ctx.db.collection("briefs").updateOne({
            id: input.id
        }, _object_spread({
            briefName: input.brief_name,
            watchlistIds: input.watchlist_ids
        }, input));
        if (!found) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return found;
    }),
    delete: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "DELETE",
            path: "/briefs/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_zod.z.null()).mutation(async ({ ctx, input })=>{
        const found = await ctx.db.collection("briefs").deleteOne({
            id: input.id
        });
        if (!found) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return null;
    })
};

//# sourceMappingURL=data:application/json;base64,