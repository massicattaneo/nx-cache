7359e63e3fc8c3dea301db768bc2cffd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getParams", {
    enumerable: true,
    get: function() {
        return getParams;
    }
});
const _swiper = /*#__PURE__*/ _interop_require_default(require("swiper"));
const _utils = require("./utils.js");
const _paramslist = require("./params-list.js");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getParams(obj = {}, splitEvents = true) {
    const params = {
        on: {}
    };
    const events = {};
    const passedParams = {};
    (0, _utils.extend)(params, _swiper.default.defaults);
    (0, _utils.extend)(params, _swiper.default.extendedDefaults);
    params._emitClasses = true;
    params.init = false;
    const rest = {};
    const allowedParams = _paramslist.paramsList.map((key)=>key.replace(/_/, ''));
    const plainObj = Object.assign({}, obj);
    Object.keys(plainObj).forEach((key)=>{
        if (typeof obj[key] === 'undefined') return;
        if (allowedParams.indexOf(key) >= 0) {
            if ((0, _utils.isObject)(obj[key])) {
                params[key] = {};
                passedParams[key] = {};
                (0, _utils.extend)(params[key], obj[key]);
                (0, _utils.extend)(passedParams[key], obj[key]);
            } else {
                params[key] = obj[key];
                passedParams[key] = obj[key];
            }
        } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === 'function') {
            if (splitEvents) {
                events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
            } else {
                params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];
            }
        } else {
            rest[key] = obj[key];
        }
    });
    [
        'navigation',
        'pagination',
        'scrollbar'
    ].forEach((key)=>{
        if (params[key] === true) params[key] = {};
        if (params[key] === false) delete params[key];
    });
    return {
        params,
        passedParams,
        rest,
        events
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29tcG9uZW50cy1zaGFyZWQvZ2V0LXBhcmFtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XG5pbXBvcnQgeyBpc09iamVjdCwgZXh0ZW5kIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBwYXJhbXNMaXN0IH0gZnJvbSAnLi9wYXJhbXMtbGlzdC5qcyc7XG5mdW5jdGlvbiBnZXRQYXJhbXMob2JqID0ge30sIHNwbGl0RXZlbnRzID0gdHJ1ZSkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgb246IHt9XG4gIH07XG4gIGNvbnN0IGV2ZW50cyA9IHt9O1xuICBjb25zdCBwYXNzZWRQYXJhbXMgPSB7fTtcbiAgZXh0ZW5kKHBhcmFtcywgU3dpcGVyLmRlZmF1bHRzKTtcbiAgZXh0ZW5kKHBhcmFtcywgU3dpcGVyLmV4dGVuZGVkRGVmYXVsdHMpO1xuICBwYXJhbXMuX2VtaXRDbGFzc2VzID0gdHJ1ZTtcbiAgcGFyYW1zLmluaXQgPSBmYWxzZTtcbiAgY29uc3QgcmVzdCA9IHt9O1xuICBjb25zdCBhbGxvd2VkUGFyYW1zID0gcGFyYW1zTGlzdC5tYXAoa2V5ID0+IGtleS5yZXBsYWNlKC9fLywgJycpKTtcbiAgY29uc3QgcGxhaW5PYmogPSBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xuICBPYmplY3Qua2V5cyhwbGFpbk9iaikuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgaWYgKGFsbG93ZWRQYXJhbXMuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgIGlmIChpc09iamVjdChvYmpba2V5XSkpIHtcbiAgICAgICAgcGFyYW1zW2tleV0gPSB7fTtcbiAgICAgICAgcGFzc2VkUGFyYW1zW2tleV0gPSB7fTtcbiAgICAgICAgZXh0ZW5kKHBhcmFtc1trZXldLCBvYmpba2V5XSk7XG4gICAgICAgIGV4dGVuZChwYXNzZWRQYXJhbXNba2V5XSwgb2JqW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgcGFzc2VkUGFyYW1zW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleS5zZWFyY2goL29uW0EtWl0vKSA9PT0gMCAmJiB0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChzcGxpdEV2ZW50cykge1xuICAgICAgICBldmVudHNbYCR7a2V5WzJdLnRvTG93ZXJDYXNlKCl9JHtrZXkuc3Vic3RyKDMpfWBdID0gb2JqW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMub25bYCR7a2V5WzJdLnRvTG93ZXJDYXNlKCl9JHtrZXkuc3Vic3RyKDMpfWBdID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3Rba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgfSk7XG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAocGFyYW1zW2tleV0gPT09IHRydWUpIHBhcmFtc1trZXldID0ge307XG4gICAgaWYgKHBhcmFtc1trZXldID09PSBmYWxzZSkgZGVsZXRlIHBhcmFtc1trZXldO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGFzc2VkUGFyYW1zLFxuICAgIHJlc3QsXG4gICAgZXZlbnRzXG4gIH07XG59XG5leHBvcnQgeyBnZXRQYXJhbXMgfTsiXSwibmFtZXMiOlsiZ2V0UGFyYW1zIiwib2JqIiwic3BsaXRFdmVudHMiLCJwYXJhbXMiLCJvbiIsImV2ZW50cyIsInBhc3NlZFBhcmFtcyIsImV4dGVuZCIsIlN3aXBlciIsImRlZmF1bHRzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIl9lbWl0Q2xhc3NlcyIsImluaXQiLCJyZXN0IiwiYWxsb3dlZFBhcmFtcyIsInBhcmFtc0xpc3QiLCJtYXAiLCJrZXkiLCJyZXBsYWNlIiwicGxhaW5PYmoiLCJPYmplY3QiLCJhc3NpZ24iLCJrZXlzIiwiZm9yRWFjaCIsImluZGV4T2YiLCJpc09iamVjdCIsInNlYXJjaCIsInRvTG93ZXJDYXNlIiwic3Vic3RyIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBaURTQTs7O2VBQUFBOzs7K0RBakRVO3VCQUNjOzRCQUNOOzs7Ozs7QUFDM0IsU0FBU0EsVUFBVUMsTUFBTSxDQUFDLENBQUMsRUFBRUMsY0FBYyxJQUFJO0lBQzdDLE1BQU1DLFNBQVM7UUFDYkMsSUFBSSxDQUFDO0lBQ1A7SUFDQSxNQUFNQyxTQUFTLENBQUM7SUFDaEIsTUFBTUMsZUFBZSxDQUFDO0lBQ3RCQyxJQUFBQSxhQUFNLEVBQUNKLFFBQVFLLGVBQU0sQ0FBQ0MsUUFBUTtJQUM5QkYsSUFBQUEsYUFBTSxFQUFDSixRQUFRSyxlQUFNLENBQUNFLGdCQUFnQjtJQUN0Q1AsT0FBT1EsWUFBWSxHQUFHO0lBQ3RCUixPQUFPUyxJQUFJLEdBQUc7SUFDZCxNQUFNQyxPQUFPLENBQUM7SUFDZCxNQUFNQyxnQkFBZ0JDLHNCQUFVLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBT0EsSUFBSUMsT0FBTyxDQUFDLEtBQUs7SUFDN0QsTUFBTUMsV0FBV0MsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR3BCO0lBQ25DbUIsT0FBT0UsSUFBSSxDQUFDSCxVQUFVSSxPQUFPLENBQUNOLENBQUFBO1FBQzVCLElBQUksT0FBT2hCLEdBQUcsQ0FBQ2dCLElBQUksS0FBSyxhQUFhO1FBQ3JDLElBQUlILGNBQWNVLE9BQU8sQ0FBQ1AsUUFBUSxHQUFHO1lBQ25DLElBQUlRLElBQUFBLGVBQVEsRUFBQ3hCLEdBQUcsQ0FBQ2dCLElBQUksR0FBRztnQkFDdEJkLE1BQU0sQ0FBQ2MsSUFBSSxHQUFHLENBQUM7Z0JBQ2ZYLFlBQVksQ0FBQ1csSUFBSSxHQUFHLENBQUM7Z0JBQ3JCVixJQUFBQSxhQUFNLEVBQUNKLE1BQU0sQ0FBQ2MsSUFBSSxFQUFFaEIsR0FBRyxDQUFDZ0IsSUFBSTtnQkFDNUJWLElBQUFBLGFBQU0sRUFBQ0QsWUFBWSxDQUFDVyxJQUFJLEVBQUVoQixHQUFHLENBQUNnQixJQUFJO1lBQ3BDLE9BQU87Z0JBQ0xkLE1BQU0sQ0FBQ2MsSUFBSSxHQUFHaEIsR0FBRyxDQUFDZ0IsSUFBSTtnQkFDdEJYLFlBQVksQ0FBQ1csSUFBSSxHQUFHaEIsR0FBRyxDQUFDZ0IsSUFBSTtZQUM5QjtRQUNGLE9BQU8sSUFBSUEsSUFBSVMsTUFBTSxDQUFDLGVBQWUsS0FBSyxPQUFPekIsR0FBRyxDQUFDZ0IsSUFBSSxLQUFLLFlBQVk7WUFDeEUsSUFBSWYsYUFBYTtnQkFDZkcsTUFBTSxDQUFDLENBQUMsRUFBRVksR0FBRyxDQUFDLEVBQUUsQ0FBQ1UsV0FBVyxHQUFHLEVBQUVWLElBQUlXLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHM0IsR0FBRyxDQUFDZ0IsSUFBSTtZQUM5RCxPQUFPO2dCQUNMZCxPQUFPQyxFQUFFLENBQUMsQ0FBQyxFQUFFYSxHQUFHLENBQUMsRUFBRSxDQUFDVSxXQUFXLEdBQUcsRUFBRVYsSUFBSVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUczQixHQUFHLENBQUNnQixJQUFJO1lBQ2pFO1FBQ0YsT0FBTztZQUNMSixJQUFJLENBQUNJLElBQUksR0FBR2hCLEdBQUcsQ0FBQ2dCLElBQUk7UUFDdEI7SUFDRjtJQUNBO1FBQUM7UUFBYztRQUFjO0tBQVksQ0FBQ00sT0FBTyxDQUFDTixDQUFBQTtRQUNoRCxJQUFJZCxNQUFNLENBQUNjLElBQUksS0FBSyxNQUFNZCxNQUFNLENBQUNjLElBQUksR0FBRyxDQUFDO1FBQ3pDLElBQUlkLE1BQU0sQ0FBQ2MsSUFBSSxLQUFLLE9BQU8sT0FBT2QsTUFBTSxDQUFDYyxJQUFJO0lBQy9DO0lBQ0EsT0FBTztRQUNMZDtRQUNBRztRQUNBTztRQUNBUjtJQUNGO0FBQ0YifQ==