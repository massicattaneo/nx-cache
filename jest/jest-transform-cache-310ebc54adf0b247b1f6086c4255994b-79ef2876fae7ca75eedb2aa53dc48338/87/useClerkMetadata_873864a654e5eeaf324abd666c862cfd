7969524279db88b620259848184bc473
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useClerkPublicMetadata: function() {
        return useClerkPublicMetadata;
    },
    useClerkUnsafeMetadata: function() {
        return useClerkUnsafeMetadata;
    },
    useUpdateClerkUnsafeMetadata: function() {
        return useUpdateClerkUnsafeMetadata;
    }
});
const _clerkreact = require("@clerk/clerk-react");
const _utils = require("@rp/common/utils");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const useClerkUnsafeMetadata = ()=>{
    const { user, loaded } = (0, _clerkreact.useClerk)();
    if (!loaded) {
        return {
            data: undefined,
            isLoading: true,
            user: undefined
        };
    }
    if (!user) {
        return {
            data: undefined,
            isLoading: false,
            user: null
        };
    }
    return {
        data: (0, _utils.transformUnsafeMetadata)(user.unsafeMetadata),
        isLoading: false,
        user
    };
};
const useClerkPublicMetadata = ()=>{
    const { user, loaded } = (0, _clerkreact.useClerk)();
    if (!loaded) {
        return {
            data: undefined,
            isLoading: true,
            user: undefined
        };
    }
    if (!user) {
        return {
            data: undefined,
            isLoading: false,
            user: null
        };
    }
    return {
        data: (0, _utils.transformPublicMetadata)(user.publicMetadata),
        isLoading: false,
        user
    };
};
const useUpdateClerkUnsafeMetadata = ()=>{
    const { user, data } = useClerkUnsafeMetadata();
    return (0, _reactquery.useMutation)({
        mutationFn: async (metadata)=>{
            if (!user || !data) return;
            await user.update({
                unsafeMetadata: _object_spread({}, user.unsafeMetadata, metadata)
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlQ2xlcmtNZXRhZGF0YS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDbGVyayB9IGZyb20gXCJAY2xlcmsvY2xlcmstcmVhY3RcIlxuaW1wb3J0IHtcbiAgVW5zYWZlQ2xlcmtNZXRhZGF0YSxcbiAgdHJhbnNmb3JtUHVibGljTWV0YWRhdGEsXG4gIHRyYW5zZm9ybVVuc2FmZU1ldGFkYXRhLFxufSBmcm9tIFwiQHJwL2NvbW1vbi91dGlsc1wiXG5pbXBvcnQgeyB1c2VNdXRhdGlvbiB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuXG5jb25zdCB1c2VDbGVya1Vuc2FmZU1ldGFkYXRhID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXIsIGxvYWRlZCB9ID0gdXNlQ2xlcmsoKVxuXG4gIGlmICghbG9hZGVkKSB7XG4gICAgcmV0dXJuIHsgZGF0YTogdW5kZWZpbmVkLCBpc0xvYWRpbmc6IHRydWUsIHVzZXI6IHVuZGVmaW5lZCB9XG4gIH1cblxuICBpZiAoIXVzZXIpIHtcbiAgICByZXR1cm4geyBkYXRhOiB1bmRlZmluZWQsIGlzTG9hZGluZzogZmFsc2UsIHVzZXI6IG51bGwgfVxuICB9XG5cbiAgcmV0dXJuIHsgZGF0YTogdHJhbnNmb3JtVW5zYWZlTWV0YWRhdGEodXNlci51bnNhZmVNZXRhZGF0YSksIGlzTG9hZGluZzogZmFsc2UsIHVzZXIgfVxufVxuXG5jb25zdCB1c2VDbGVya1B1YmxpY01ldGFkYXRhID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXIsIGxvYWRlZCB9ID0gdXNlQ2xlcmsoKVxuXG4gIGlmICghbG9hZGVkKSB7XG4gICAgcmV0dXJuIHsgZGF0YTogdW5kZWZpbmVkLCBpc0xvYWRpbmc6IHRydWUsIHVzZXI6IHVuZGVmaW5lZCB9XG4gIH1cblxuICBpZiAoIXVzZXIpIHtcbiAgICByZXR1cm4geyBkYXRhOiB1bmRlZmluZWQsIGlzTG9hZGluZzogZmFsc2UsIHVzZXI6IG51bGwgfVxuICB9XG5cbiAgcmV0dXJuIHsgZGF0YTogdHJhbnNmb3JtUHVibGljTWV0YWRhdGEodXNlci5wdWJsaWNNZXRhZGF0YSksIGlzTG9hZGluZzogZmFsc2UsIHVzZXIgfVxufVxuXG5jb25zdCB1c2VVcGRhdGVDbGVya1Vuc2FmZU1ldGFkYXRhID0gKCkgPT4ge1xuICBjb25zdCB7IHVzZXIsIGRhdGEgfSA9IHVzZUNsZXJrVW5zYWZlTWV0YWRhdGEoKVxuICByZXR1cm4gdXNlTXV0YXRpb24oe1xuICAgIG11dGF0aW9uRm46IGFzeW5jIChtZXRhZGF0YTogUGFydGlhbDxVbnNhZmVDbGVya01ldGFkYXRhPikgPT4ge1xuICAgICAgaWYgKCF1c2VyIHx8ICFkYXRhKSByZXR1cm5cbiAgICAgIGF3YWl0IHVzZXIudXBkYXRlKHtcbiAgICAgICAgdW5zYWZlTWV0YWRhdGE6IHtcbiAgICAgICAgICAuLi51c2VyLnVuc2FmZU1ldGFkYXRhLFxuICAgICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgeyB1c2VDbGVya1Vuc2FmZU1ldGFkYXRhLCB1c2VDbGVya1B1YmxpY01ldGFkYXRhLCB1c2VVcGRhdGVDbGVya1Vuc2FmZU1ldGFkYXRhIH1cbiJdLCJuYW1lcyI6WyJ1c2VDbGVya1B1YmxpY01ldGFkYXRhIiwidXNlQ2xlcmtVbnNhZmVNZXRhZGF0YSIsInVzZVVwZGF0ZUNsZXJrVW5zYWZlTWV0YWRhdGEiLCJ1c2VyIiwibG9hZGVkIiwidXNlQ2xlcmsiLCJkYXRhIiwidW5kZWZpbmVkIiwiaXNMb2FkaW5nIiwidHJhbnNmb3JtVW5zYWZlTWV0YWRhdGEiLCJ1bnNhZmVNZXRhZGF0YSIsInRyYW5zZm9ybVB1YmxpY01ldGFkYXRhIiwicHVibGljTWV0YWRhdGEiLCJ1c2VNdXRhdGlvbiIsIm11dGF0aW9uRm4iLCJtZXRhZGF0YSIsInVwZGF0ZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQW1EaUNBLHNCQUFzQjtlQUF0QkE7O0lBQXhCQyxzQkFBc0I7ZUFBdEJBOztJQUFnREMsNEJBQTRCO2VBQTVCQTs7OzRCQW5EaEM7dUJBS2xCOzRCQUNxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFNUIsTUFBTUQseUJBQXlCO0lBQzdCLE1BQU0sRUFBRUUsSUFBSSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsb0JBQVE7SUFFakMsSUFBSSxDQUFDRCxRQUFRO1FBQ1gsT0FBTztZQUFFRSxNQUFNQztZQUFXQyxXQUFXO1lBQU1MLE1BQU1JO1FBQVU7SUFDN0Q7SUFFQSxJQUFJLENBQUNKLE1BQU07UUFDVCxPQUFPO1lBQUVHLE1BQU1DO1lBQVdDLFdBQVc7WUFBT0wsTUFBTTtRQUFLO0lBQ3pEO0lBRUEsT0FBTztRQUFFRyxNQUFNRyxJQUFBQSw4QkFBdUIsRUFBQ04sS0FBS08sY0FBYztRQUFHRixXQUFXO1FBQU9MO0lBQUs7QUFDdEY7QUFFQSxNQUFNSCx5QkFBeUI7SUFDN0IsTUFBTSxFQUFFRyxJQUFJLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxJQUFBQSxvQkFBUTtJQUVqQyxJQUFJLENBQUNELFFBQVE7UUFDWCxPQUFPO1lBQUVFLE1BQU1DO1lBQVdDLFdBQVc7WUFBTUwsTUFBTUk7UUFBVTtJQUM3RDtJQUVBLElBQUksQ0FBQ0osTUFBTTtRQUNULE9BQU87WUFBRUcsTUFBTUM7WUFBV0MsV0FBVztZQUFPTCxNQUFNO1FBQUs7SUFDekQ7SUFFQSxPQUFPO1FBQUVHLE1BQU1LLElBQUFBLDhCQUF1QixFQUFDUixLQUFLUyxjQUFjO1FBQUdKLFdBQVc7UUFBT0w7SUFBSztBQUN0RjtBQUVBLE1BQU1ELCtCQUErQjtJQUNuQyxNQUFNLEVBQUVDLElBQUksRUFBRUcsSUFBSSxFQUFFLEdBQUdMO0lBQ3ZCLE9BQU9ZLElBQUFBLHVCQUFXLEVBQUM7UUFDakJDLFlBQVksT0FBT0M7WUFDakIsSUFBSSxDQUFDWixRQUFRLENBQUNHLE1BQU07WUFDcEIsTUFBTUgsS0FBS2EsTUFBTSxDQUFDO2dCQUNoQk4sZ0JBQWdCLG1CQUNYUCxLQUFLTyxjQUFjLEVBQ25CSztZQUVQO1FBQ0Y7SUFDRjtBQUNGIn0=