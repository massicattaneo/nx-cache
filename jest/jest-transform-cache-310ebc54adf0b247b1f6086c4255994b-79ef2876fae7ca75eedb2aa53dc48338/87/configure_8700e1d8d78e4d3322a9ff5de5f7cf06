89c990155f90f466a1907a212c3dcb50
/**
 * @typedef {import('./types.js').Options} Options
 * @typedef {import('./types.js').State} State
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "configure", {
    enumerable: true,
    get: function() {
        return configure;
    }
});
const own = {}.hasOwnProperty;
function configure(base, extension) {
    let index = -1;
    /** @type {keyof Options} */ let key;
    // First do subextensions.
    if (extension.extensions) {
        while(++index < extension.extensions.length){
            configure(base, extension.extensions[index]);
        }
    }
    for(key in extension){
        if (own.call(extension, key)) {
            switch(key){
                case 'extensions':
                    {
                        break;
                    }
                /* c8 ignore next 4 */ case 'unsafe':
                    {
                        list(base[key], extension[key]);
                        break;
                    }
                case 'join':
                    {
                        list(base[key], extension[key]);
                        break;
                    }
                case 'handlers':
                    {
                        map(base[key], extension[key]);
                        break;
                    }
                default:
                    {
                        // @ts-expect-error: matches.
                        base.options[key] = extension[key];
                    }
            }
        }
    }
    return base;
}
/**
 * @template T
 * @param {Array<T>} left
 * @param {Array<T> | null | undefined} right
 */ function list(left, right) {
    if (right) {
        left.push(...right);
    }
}
/**
 * @template T
 * @param {Record<string, T>} left
 * @param {Record<string, T> | null | undefined} right
 */ function map(left, right) {
    if (right) {
        Object.assign(left, right);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi9jb25maWd1cmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzLmpzJykuT3B0aW9uc30gT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcy5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8qKlxuICogQHBhcmFtIHtTdGF0ZX0gYmFzZVxuICogQHBhcmFtIHtPcHRpb25zfSBleHRlbnNpb25cbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZShiYXNlLCBleHRlbnNpb24pIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtrZXlvZiBPcHRpb25zfSAqL1xuICBsZXQga2V5XG5cbiAgLy8gRmlyc3QgZG8gc3ViZXh0ZW5zaW9ucy5cbiAgaWYgKGV4dGVuc2lvbi5leHRlbnNpb25zKSB7XG4gICAgd2hpbGUgKCsraW5kZXggPCBleHRlbnNpb24uZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICAgIGNvbmZpZ3VyZShiYXNlLCBleHRlbnNpb24uZXh0ZW5zaW9uc1tpbmRleF0pXG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gZXh0ZW5zaW9uKSB7XG4gICAgaWYgKG93bi5jYWxsKGV4dGVuc2lvbiwga2V5KSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnZXh0ZW5zaW9ucyc6IHtcbiAgICAgICAgICAvLyBFbXB0eS5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgLyogYzggaWdub3JlIG5leHQgNCAqL1xuICAgICAgICBjYXNlICd1bnNhZmUnOiB7XG4gICAgICAgICAgbGlzdChiYXNlW2tleV0sIGV4dGVuc2lvbltrZXldKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdqb2luJzoge1xuICAgICAgICAgIGxpc3QoYmFzZVtrZXldLCBleHRlbnNpb25ba2V5XSlcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnaGFuZGxlcnMnOiB7XG4gICAgICAgICAgbWFwKGJhc2Vba2V5XSwgZXh0ZW5zaW9uW2tleV0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtYXRjaGVzLlxuICAgICAgICAgIGJhc2Uub3B0aW9uc1trZXldID0gZXh0ZW5zaW9uW2tleV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBiYXNlXG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXk8VD59IGxlZnRcbiAqIEBwYXJhbSB7QXJyYXk8VD4gfCBudWxsIHwgdW5kZWZpbmVkfSByaWdodFxuICovXG5mdW5jdGlvbiBsaXN0KGxlZnQsIHJpZ2h0KSB7XG4gIGlmIChyaWdodCkge1xuICAgIGxlZnQucHVzaCguLi5yaWdodClcbiAgfVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFQ+fSBsZWZ0XG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIFQ+IHwgbnVsbCB8IHVuZGVmaW5lZH0gcmlnaHRcbiAqL1xuZnVuY3Rpb24gbWFwKGxlZnQsIHJpZ2h0KSB7XG4gIGlmIChyaWdodCkge1xuICAgIE9iamVjdC5hc3NpZ24obGVmdCwgcmlnaHQpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjb25maWd1cmUiLCJvd24iLCJoYXNPd25Qcm9wZXJ0eSIsImJhc2UiLCJleHRlbnNpb24iLCJpbmRleCIsImtleSIsImV4dGVuc2lvbnMiLCJsZW5ndGgiLCJjYWxsIiwibGlzdCIsIm1hcCIsIm9wdGlvbnMiLCJsZWZ0IiwicmlnaHQiLCJwdXNoIiwiT2JqZWN0IiwiYXNzaWduIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDOzs7OytCQVNlQTs7O2VBQUFBOzs7QUFQaEIsTUFBTUMsTUFBTSxDQUFDLEVBQUVDLGNBQWM7QUFPdEIsU0FBU0YsVUFBVUcsSUFBSSxFQUFFQyxTQUFTO0lBQ3ZDLElBQUlDLFFBQVEsQ0FBQztJQUNiLDBCQUEwQixHQUMxQixJQUFJQztJQUVKLDBCQUEwQjtJQUMxQixJQUFJRixVQUFVRyxVQUFVLEVBQUU7UUFDeEIsTUFBTyxFQUFFRixRQUFRRCxVQUFVRyxVQUFVLENBQUNDLE1BQU0sQ0FBRTtZQUM1Q1IsVUFBVUcsTUFBTUMsVUFBVUcsVUFBVSxDQUFDRixNQUFNO1FBQzdDO0lBQ0Y7SUFFQSxJQUFLQyxPQUFPRixVQUFXO1FBQ3JCLElBQUlILElBQUlRLElBQUksQ0FBQ0wsV0FBV0UsTUFBTTtZQUM1QixPQUFRQTtnQkFDTixLQUFLO29CQUFjO3dCQUVqQjtvQkFDRjtnQkFFQSxvQkFBb0IsR0FDcEIsS0FBSztvQkFBVTt3QkFDYkksS0FBS1AsSUFBSSxDQUFDRyxJQUFJLEVBQUVGLFNBQVMsQ0FBQ0UsSUFBSTt3QkFDOUI7b0JBQ0Y7Z0JBRUEsS0FBSztvQkFBUTt3QkFDWEksS0FBS1AsSUFBSSxDQUFDRyxJQUFJLEVBQUVGLFNBQVMsQ0FBQ0UsSUFBSTt3QkFDOUI7b0JBQ0Y7Z0JBRUEsS0FBSztvQkFBWTt3QkFDZkssSUFBSVIsSUFBSSxDQUFDRyxJQUFJLEVBQUVGLFNBQVMsQ0FBQ0UsSUFBSTt3QkFDN0I7b0JBQ0Y7Z0JBRUE7b0JBQVM7d0JBQ1AsNkJBQTZCO3dCQUM3QkgsS0FBS1MsT0FBTyxDQUFDTixJQUFJLEdBQUdGLFNBQVMsQ0FBQ0UsSUFBSTtvQkFDcEM7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxPQUFPSDtBQUNUO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNPLEtBQUtHLElBQUksRUFBRUMsS0FBSztJQUN2QixJQUFJQSxPQUFPO1FBQ1RELEtBQUtFLElBQUksSUFBSUQ7SUFDZjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNELFNBQVNILElBQUlFLElBQUksRUFBRUMsS0FBSztJQUN0QixJQUFJQSxPQUFPO1FBQ1RFLE9BQU9DLE1BQU0sQ0FBQ0osTUFBTUM7SUFDdEI7QUFDRiJ9