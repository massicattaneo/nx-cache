61b38b0b8f2fb79cc063d21a220b705a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DndProvider", {
    enumerable: true,
    get: function() {
        return DndProvider;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _dndcore = require("dnd-core");
const _react = require("react");
const _DndContext = require("./DndContext.js");
function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
let refCount = 0;
const INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__');
var DndProvider = /*#__PURE__*/ (0, _react.memo)(function DndProvider(_param) {
    var { children } = _param, props = _objectWithoutProperties(_param, [
        "children"
    ]);
    const [manager, isGlobalInstance] = getDndContextValue(props) // memoized from props
    ;
    /**
		 * If the global context was used to store the DND context
		 * then where theres no more references to it we should
		 * clean it up to avoid memory leaks
		 */ (0, _react.useEffect)(()=>{
        if (isGlobalInstance) {
            const context = getGlobalContext();
            ++refCount;
            return ()=>{
                if (--refCount === 0) {
                    context[INSTANCE_SYM] = null;
                }
            };
        }
        return;
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DndContext.DndContext.Provider, {
        value: manager,
        children: children
    });
});
function getDndContextValue(props) {
    if ('manager' in props) {
        const manager = {
            dragDropManager: props.manager
        };
        return [
            manager,
            false
        ];
    }
    const manager = createSingletonDndContext(props.backend, props.context, props.options, props.debugMode);
    const isGlobalInstance = !props.context;
    return [
        manager,
        isGlobalInstance
    ];
}
function createSingletonDndContext(backend, context = getGlobalContext(), options, debugMode) {
    const ctx = context;
    if (!ctx[INSTANCE_SYM]) {
        ctx[INSTANCE_SYM] = {
            dragDropManager: (0, _dndcore.createDragDropManager)(backend, context, options, debugMode)
        };
    }
    return ctx[INSTANCE_SYM];
}
function getGlobalContext() {
    return typeof global !== 'undefined' ? global : window;
} //# sourceMappingURL=DndProvider.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL0RuZFByb3ZpZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEJhY2tlbmRGYWN0b3J5LCBEcmFnRHJvcE1hbmFnZXIgfSBmcm9tICdkbmQtY29yZSdcbmltcG9ydCB7IGNyZWF0ZURyYWdEcm9wTWFuYWdlciB9IGZyb20gJ2RuZC1jb3JlJ1xuaW1wb3J0IHR5cGUgeyBGQywgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBtZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHsgRG5kQ29udGV4dCB9IGZyb20gJy4vRG5kQ29udGV4dC5qcydcblxuZXhwb3J0IHR5cGUgRG5kUHJvdmlkZXJQcm9wczxCYWNrZW5kQ29udGV4dCwgQmFja2VuZE9wdGlvbnM+ID1cblx0fCB7XG5cdFx0XHRjaGlsZHJlbj86IFJlYWN0Tm9kZVxuXHRcdFx0bWFuYWdlcjogRHJhZ0Ryb3BNYW5hZ2VyXG5cdCAgfVxuXHR8IHtcblx0XHRcdGJhY2tlbmQ6IEJhY2tlbmRGYWN0b3J5XG5cdFx0XHRjaGlsZHJlbj86IFJlYWN0Tm9kZVxuXHRcdFx0Y29udGV4dD86IEJhY2tlbmRDb250ZXh0XG5cdFx0XHRvcHRpb25zPzogQmFja2VuZE9wdGlvbnNcblx0XHRcdGRlYnVnTW9kZT86IGJvb2xlYW5cblx0ICB9XG5cbmxldCByZWZDb3VudCA9IDBcbmNvbnN0IElOU1RBTkNFX1NZTSA9IFN5bWJvbC5mb3IoJ19fUkVBQ1RfRE5EX0NPTlRFWFRfSU5TVEFOQ0VfXycpXG5cbi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdGhhdCBwcm92aWRlcyB0aGUgUmVhY3QtRG5EIGNvbnRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IERuZFByb3ZpZGVyOiBGQzxEbmRQcm92aWRlclByb3BzPHVua25vd24sIHVua25vd24+PiA9IG1lbW8oXG5cdGZ1bmN0aW9uIERuZFByb3ZpZGVyKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcblx0XHRjb25zdCBbbWFuYWdlciwgaXNHbG9iYWxJbnN0YW5jZV0gPSBnZXREbmRDb250ZXh0VmFsdWUocHJvcHMpIC8vIG1lbW9pemVkIGZyb20gcHJvcHNcblx0XHQvKipcblx0XHQgKiBJZiB0aGUgZ2xvYmFsIGNvbnRleHQgd2FzIHVzZWQgdG8gc3RvcmUgdGhlIERORCBjb250ZXh0XG5cdFx0ICogdGhlbiB3aGVyZSB0aGVyZXMgbm8gbW9yZSByZWZlcmVuY2VzIHRvIGl0IHdlIHNob3VsZFxuXHRcdCAqIGNsZWFuIGl0IHVwIHRvIGF2b2lkIG1lbW9yeSBsZWFrc1xuXHRcdCAqL1xuXHRcdHVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0XHRpZiAoaXNHbG9iYWxJbnN0YW5jZSkge1xuXHRcdFx0XHRjb25zdCBjb250ZXh0ID0gZ2V0R2xvYmFsQ29udGV4dCgpXG5cdFx0XHRcdCsrcmVmQ291bnRcblxuXHRcdFx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0XHRcdGlmICgtLXJlZkNvdW50ID09PSAwKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0W0lOU1RBTkNFX1NZTV0gPSBudWxsXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm5cblx0XHR9LCBbXSlcblxuXHRcdHJldHVybiA8RG5kQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bWFuYWdlcn0+e2NoaWxkcmVufTwvRG5kQ29udGV4dC5Qcm92aWRlcj5cblx0fSxcbilcblxuZnVuY3Rpb24gZ2V0RG5kQ29udGV4dFZhbHVlKHByb3BzOiBEbmRQcm92aWRlclByb3BzPHVua25vd24sIHVua25vd24+KSB7XG5cdGlmICgnbWFuYWdlcicgaW4gcHJvcHMpIHtcblx0XHRjb25zdCBtYW5hZ2VyID0geyBkcmFnRHJvcE1hbmFnZXI6IHByb3BzLm1hbmFnZXIgfVxuXHRcdHJldHVybiBbbWFuYWdlciwgZmFsc2VdXG5cdH1cblxuXHRjb25zdCBtYW5hZ2VyID0gY3JlYXRlU2luZ2xldG9uRG5kQ29udGV4dChcblx0XHRwcm9wcy5iYWNrZW5kLFxuXHRcdHByb3BzLmNvbnRleHQsXG5cdFx0cHJvcHMub3B0aW9ucyxcblx0XHRwcm9wcy5kZWJ1Z01vZGUsXG5cdClcblx0Y29uc3QgaXNHbG9iYWxJbnN0YW5jZSA9ICFwcm9wcy5jb250ZXh0XG5cblx0cmV0dXJuIFttYW5hZ2VyLCBpc0dsb2JhbEluc3RhbmNlXVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGV0b25EbmRDb250ZXh0PEJhY2tlbmRDb250ZXh0LCBCYWNrZW5kT3B0aW9ucz4oXG5cdGJhY2tlbmQ6IEJhY2tlbmRGYWN0b3J5LFxuXHRjb250ZXh0OiBCYWNrZW5kQ29udGV4dCA9IGdldEdsb2JhbENvbnRleHQoKSxcblx0b3B0aW9uczogQmFja2VuZE9wdGlvbnMsXG5cdGRlYnVnTW9kZT86IGJvb2xlYW4sXG4pIHtcblx0Y29uc3QgY3R4ID0gY29udGV4dCBhcyBhbnlcblx0aWYgKCFjdHhbSU5TVEFOQ0VfU1lNXSkge1xuXHRcdGN0eFtJTlNUQU5DRV9TWU1dID0ge1xuXHRcdFx0ZHJhZ0Ryb3BNYW5hZ2VyOiBjcmVhdGVEcmFnRHJvcE1hbmFnZXIoXG5cdFx0XHRcdGJhY2tlbmQsXG5cdFx0XHRcdGNvbnRleHQsXG5cdFx0XHRcdG9wdGlvbnMsXG5cdFx0XHRcdGRlYnVnTW9kZSxcblx0XHRcdCksXG5cdFx0fVxuXHR9XG5cdHJldHVybiBjdHhbSU5TVEFOQ0VfU1lNXVxufVxuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbDogYW55XG5mdW5jdGlvbiBnZXRHbG9iYWxDb250ZXh0KCkge1xuXHRyZXR1cm4gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiAod2luZG93IGFzIGFueSlcbn1cbiJdLCJuYW1lcyI6WyJEbmRQcm92aWRlciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZSIsImV4Y2x1ZGVkIiwicmVmQ291bnQiLCJJTlNUQU5DRV9TWU0iLCJTeW1ib2wiLCJmb3IiLCJtZW1vIiwiX3BhcmFtIiwiY2hpbGRyZW4iLCJwcm9wcyIsIm1hbmFnZXIiLCJpc0dsb2JhbEluc3RhbmNlIiwiZ2V0RG5kQ29udGV4dFZhbHVlIiwidXNlRWZmZWN0IiwiY29udGV4dCIsImdldEdsb2JhbENvbnRleHQiLCJfanN4IiwiRG5kQ29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJkcmFnRHJvcE1hbmFnZXIiLCJjcmVhdGVTaW5nbGV0b25EbmRDb250ZXh0IiwiYmFja2VuZCIsIm9wdGlvbnMiLCJkZWJ1Z01vZGUiLCJjdHgiLCJjcmVhdGVEcmFnRHJvcE1hbmFnZXIiLCJnbG9iYWwiLCJ3aW5kb3ciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkEwQkFBOzs7ZUFBQUE7Ozs7eUJBekJzQzt1QkFFTjs0QkFFTDtBQUwzQixTQUFBQyx5QkFBQUMsTUFBQSxFQUFBQyxRQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsSUFBSUMsV0FBVztBQUNmLE1BQU1DLGVBQWVDLE9BQU9DLEdBQUcsQ0FBQztJQUtuQlAsY0FBVyxXQUFBLEdBQTJDUSxJQUFBQSxXQUFJLEVBQ3RFLFNBQVNSLFlBQVlTLE1BQXNCO1FBQXRCLEVBQUVDLFFBQVEsRUFBWSxHQUF0QkQsUUFBZUUsUUFBS1YseUJBQXBCUSxRQUFzQjtRQUFwQkM7O0lBQ3RCLE1BQU0sQ0FBQ0UsU0FBU0MsaUJBQWlCLEdBQUdDLG1CQUFtQkgsT0FBTyxzQkFBc0I7O0lBQ3BGOzs7O01BS0FJLElBQUFBLGdCQUFTLEVBQUM7UUFDVCxJQUFJRixrQkFBa0I7WUFDckIsTUFBTUcsVUFBVUM7WUFDaEIsRUFBRWI7WUFFRixPQUFPO2dCQUNOLElBQUksRUFBRUEsYUFBYSxHQUFHO29CQUNyQlksT0FBTyxDQUFDWCxhQUFhLEdBQUc7Ozs7UUFJM0I7T0FDRSxFQUFFO0lBRUwsT0FBQSxXQUFBLEdBQU9hLElBQUFBLGVBQUEsRUFBQ0Msc0JBQVUsQ0FBQ0MsUUFBUSxFQUFBO1FBQUNDLE9BQU9UO2tCQUFVRjs7O0FBSS9DLFNBQVNJLG1CQUFtQkgsS0FBeUM7SUFDcEUsSUFBSSxhQUFhQSxPQUFPO1FBQ3ZCLE1BQU1DLFVBQVU7WUFBRVUsaUJBQWlCWCxNQUFNQyxPQUFPOztRQUNoRCxPQUFPO1lBQUNBO1lBQVM7U0FBTTs7SUFHeEIsTUFBTUEsVUFBVVcsMEJBQ2ZaLE1BQU1hLE9BQU8sRUFDYmIsTUFBTUssT0FBTyxFQUNiTCxNQUFNYyxPQUFPLEVBQ2JkLE1BQU1lLFNBQVM7SUFFaEIsTUFBTWIsbUJBQW1CLENBQUNGLE1BQU1LLE9BQU87SUFFdkMsT0FBTztRQUFDSjtRQUFTQztLQUFpQjs7QUFHbkMsU0FBU1UsMEJBQ1JDLE9BQXVCLEVBQ3ZCUixVQUEwQkMsa0JBQWtCLEVBQzVDUSxPQUF1QixFQUN2QkMsU0FBbUI7SUFFbkIsTUFBTUMsTUFBTVg7SUFDWixJQUFJLENBQUNXLEdBQUcsQ0FBQ3RCLGFBQWEsRUFBRTtRQUN2QnNCLEdBQUcsQ0FBQ3RCLGFBQWEsR0FBRztZQUNuQmlCLGlCQUFpQk0sSUFBQUEsOEJBQXFCLEVBQ3JDSixTQUNBUixTQUNBUyxTQUNBQzs7O0lBSUgsT0FBT0MsR0FBRyxDQUFDdEIsYUFBYTs7QUFJekIsU0FBU1k7SUFDUixPQUFPLE9BQU9ZLFdBQVcsY0FBY0EsU0FBVUMifQ==