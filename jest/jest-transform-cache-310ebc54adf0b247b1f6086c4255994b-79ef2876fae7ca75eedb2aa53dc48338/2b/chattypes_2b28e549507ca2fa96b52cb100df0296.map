{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/chat/src/chat.types.ts"],"sourcesContent":["import { DatasetScope } from \"@rp/common/api-types\"\nimport {\n  LLMFollowUpMessage,\n  LlmAuditTraceMessage,\n  LlmSourcesMessage,\n  LlmSummarySource,\n  ResponseBlock,\n  StoredResponseBlockList,\n} from \"@rp/react/tanstack-api/llm-summary\"\n\ntype OriginSources = LlmSourcesMessage[\"originSources\"]\ntype StoredAuditTrace = LlmAuditTraceMessage[\"trace\"]\n\ntype BaseInteraction = {\n  interactionTimestamp: string\n  inputMessage: string\n  responseBlock: ResponseBlock\n  responseBlocks: StoredResponseBlockList\n  auditBlocks: StoredResponseBlockList\n  originSources: OriginSources\n  originSourcesMetadata?: LlmSourcesMessage[\"metadata\"]\n  dateCreated: string\n  lastUpdated: string\n}\n\ntype ChatFile = {\n  id: string\n  fileName: string\n  rawSize: number\n  uploadTs: string\n}\n\ntype ChatInteractionType =\n  | \"trending\"\n  | \"feed\"\n  | \"user_message\"\n  | \"empty_message\"\n  | \"flow\"\n  | \"watchlist\"\n  | \"brief\"\n\ntype UserInteraction = BaseInteraction & {\n  origin: {\n    type: ChatInteractionType\n  }\n  auditTraces?: Array<StoredAuditTrace>\n  scope?: DatasetScope\n  scopeDocuments?: Array<ChatFile>\n  scopeWatchlistId?: string\n  followUpQuestions?: LLMFollowUpMessage[\"followUp\"][\"queries\"]\n}\n\ntype SeededInteraction = BaseInteraction & {\n  origin: {\n    type: \"trending\" | \"feed\"\n    queryId?: string\n  }\n  responseMessage: string\n  sources: Array<LlmSummarySource> //Todo figure what field do we need to pass to create a chat\n}\n\ntype ChatListObject = {\n  id: string\n  name: string\n  userId: string\n  dateCreated: string\n  lastUpdated: string\n  scopeWatchlistId?: string\n  isPublic: boolean\n}\n\ntype ChatObject = ChatListObject & {\n  interactions: Array<UserInteraction | SeededInteraction>\n  isPublic: boolean\n}\n\ntype ReducedChatObject = Pick<ChatObject, \"id\" | \"name\" | \"userId\" | \"dateCreated\" | \"lastUpdated\">\n\ntype CreateChat = {\n  name: string\n  scopeWatchlistId?: string\n  interaction?: Pick<SeededInteraction, \"origin\" | \"inputMessage\" | \"responseMessage\" | \"sources\">\n}\n\ntype ShareChatBody = {\n  id: string\n  isPublic: boolean\n}\n\ntype ShareChatResponse = {\n  id: string\n  isPublic: boolean\n  userId: string\n  lastUpdated: string\n}\n\ntype ChatPatch = Pick<ChatListObject, \"id\" | \"name\">\n\ntype UpdateContext = {\n  previousChat?: ChatListObject\n}\n\nconst isUserInteraction = (\n  interaction: UserInteraction | SeededInteraction,\n): interaction is UserInteraction => {\n  return (\n    interaction.origin.type === \"user_message\" ||\n    interaction.origin.type === \"empty_message\" ||\n    interaction.origin.type === \"flow\" ||\n    interaction.origin.type === \"watchlist\" ||\n    interaction.origin.type === \"brief\"\n  )\n}\n\nexport type PaginatedChatListResponse = {\n  items: Array<ChatListObject>\n  total: number\n  limit?: number\n  cursor?: string\n}\n\nexport type ListChatsParams = {\n  limit?: number\n  cursor?: string\n  orderDirection?: \"asc\" | \"desc\"\n}\n\nexport type {\n  ReducedChatObject,\n  ChatObject,\n  CreateChat,\n  UserInteraction,\n  ChatListObject,\n  ChatFile,\n  ChatPatch,\n  UpdateContext,\n  StoredAuditTrace,\n  OriginSources,\n  ResponseBlock,\n  SeededInteraction,\n  ChatInteractionType,\n  ShareChatBody,\n  ShareChatResponse,\n  StoredResponseBlockList,\n}\n\nexport { isUserInteraction }\n"],"names":["isUserInteraction","interaction","origin","type"],"rangeMappings":";;;;;;;;;;;;","mappings":";;;;+BAkJSA;;;eAAAA;;;AA5CT,MAAMA,oBAAoB,CACxBC;IAEA,OACEA,YAAYC,MAAM,CAACC,IAAI,KAAK,kBAC5BF,YAAYC,MAAM,CAACC,IAAI,KAAK,mBAC5BF,YAAYC,MAAM,CAACC,IAAI,KAAK,UAC5BF,YAAYC,MAAM,CAACC,IAAI,KAAK,eAC5BF,YAAYC,MAAM,CAACC,IAAI,KAAK;AAEhC"}