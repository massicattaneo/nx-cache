{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-hast/lib/handlers/table-row.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"],"names":["tableRow","state","node","parent","siblings","children","undefined","rowIndex","indexOf","tagName","align","type","length","cellIndex","cells","cell","properties","alignValue","result","all","patch","applyData","push","wrap"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;CAOC,GAED,mDAAmD;AACnD;;;;;+BAcgBA;;;eAAAA;;;AAAT,SAASA,SAASC,KAAK,EAAEC,IAAI,EAAEC,MAAM;IAC1C,MAAMC,WAAWD,SAASA,OAAOE,QAAQ,GAAGC;IAC5C,2CAA2C;IAC3C,MAAMC,WAAWH,WAAWA,SAASI,OAAO,CAACN,QAAQ;IACrD,MAAMO,UAAUF,aAAa,IAAI,OAAO;IACxC,gCAAgC;IAChC,MAAMG,QAAQP,UAAUA,OAAOQ,IAAI,KAAK,UAAUR,OAAOO,KAAK,GAAGJ;IACjE,MAAMM,SAASF,QAAQA,MAAME,MAAM,GAAGV,KAAKG,QAAQ,CAACO,MAAM;IAC1D,IAAIC,YAAY,CAAC;IACjB,kCAAkC,GAClC,MAAMC,QAAQ,EAAE;IAEhB,MAAO,EAAED,YAAYD,OAAQ;QAC3B,+BAA+B;QAC/B,MAAMG,OAAOb,KAAKG,QAAQ,CAACQ,UAAU;QACrC,uBAAuB,GACvB,MAAMG,aAAa,CAAC;QACpB,MAAMC,aAAaP,QAAQA,KAAK,CAACG,UAAU,GAAGP;QAE9C,IAAIW,YAAY;YACdD,WAAWN,KAAK,GAAGO;QACrB;QAEA,oBAAoB,GACpB,IAAIC,SAAS;YAACP,MAAM;YAAWF;YAASO;YAAYX,UAAU,EAAE;QAAA;QAEhE,IAAIU,MAAM;YACRG,OAAOb,QAAQ,GAAGJ,MAAMkB,GAAG,CAACJ;YAC5Bd,MAAMmB,KAAK,CAACL,MAAMG;YAClBA,SAASjB,MAAMoB,SAAS,CAACN,MAAMG;QACjC;QAEAJ,MAAMQ,IAAI,CAACJ;IACb;IAEA,oBAAoB,GACpB,MAAMA,SAAS;QACbP,MAAM;QACNF,SAAS;QACTO,YAAY,CAAC;QACbX,UAAUJ,MAAMsB,IAAI,CAACT,OAAO;IAC9B;IACAb,MAAMmB,KAAK,CAAClB,MAAMgB;IAClB,OAAOjB,MAAMoB,SAAS,CAACnB,MAAMgB;AAC/B"}