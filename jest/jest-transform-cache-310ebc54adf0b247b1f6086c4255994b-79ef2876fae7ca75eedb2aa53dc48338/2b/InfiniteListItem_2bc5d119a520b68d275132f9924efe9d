9ef422a4fdd1e9ed23478648b3d07954
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InfiniteListItem", {
    enumerable: true,
    get: function() {
        return InfiniteListItem;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
function InfiniteListItem({ ariaLabel, renderItem, virtualized = false, root = window.document, item, index, intersect }) {
    const [isVisible, setIsVisible] = (0, _react.useState)(true);
    const [height, setHeight] = (0, _react.useState)(0);
    const [ref, setRef] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        if (!virtualized) return;
        const observer = new IntersectionObserver(([entry])=>{
            setHeight(entry.boundingClientRect.height);
            setIsVisible(entry.isIntersecting);
        }, {
            root: root,
            rootMargin: "150px"
        });
        const el = ref;
        if (el) {
            observer.observe(el);
        }
        return ()=>{
            if (el) {
                observer.unobserve(el);
            }
        };
    }, [
        virtualized,
        root,
        ref
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "aria-label": ariaLabel,
        "data-index": index,
        className: "infinite-list-item",
        role: "listitem",
        ref: intersect ? (node)=>intersect(node) : undefined,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            ref: setRef,
            children: !virtualized || isVisible ? renderItem(item, index, intersect) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                style: {
                    height
                }
            })
        })
    }, item.id);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvSW5maW5pdGVMaXN0L0luZmluaXRlTGlzdEl0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuXG50eXBlIFByb3BzPEl0ZW1UeXBlPiA9IHtcbiAgaXRlbTogSXRlbVR5cGVcbiAgcmVuZGVySXRlbTogKFxuICAgIGl0ZW06IEl0ZW1UeXBlLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgaW50ZXJzZWN0OiAoPEVsZW1lbnRUeXBlIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KG5vZGU6IEVsZW1lbnRUeXBlKSA9PiB2b2lkKSB8IHVuZGVmaW5lZCxcbiAgKSA9PiBSZWFjdC5SZWFjdE5vZGVcbiAgdmlydHVhbGl6ZWQ/OiBib29sZWFuXG4gIHJvb3Q/OiBFbGVtZW50IHwgRG9jdW1lbnQgfCBudWxsXG4gIGluZGV4OiBudW1iZXJcbiAgaW50ZXJzZWN0OiAoPEVsZW1lbnRUeXBlIGV4dGVuZHMgSFRNTEVsZW1lbnQ+KG5vZGU6IEVsZW1lbnRUeXBlKSA9PiB2b2lkKSB8IHVuZGVmaW5lZFxuICBhcmlhTGFiZWw/OiBzdHJpbmdcbn1cblxuZnVuY3Rpb24gSW5maW5pdGVMaXN0SXRlbTxJdGVtVHlwZSBleHRlbmRzIHsgaWQ6IHN0cmluZyB9Pih7XG4gIGFyaWFMYWJlbCxcbiAgcmVuZGVySXRlbSxcbiAgdmlydHVhbGl6ZWQgPSBmYWxzZSxcbiAgcm9vdCA9IHdpbmRvdy5kb2N1bWVudCxcbiAgaXRlbSxcbiAgaW5kZXgsXG4gIGludGVyc2VjdCxcbn06IFByb3BzPEl0ZW1UeXBlPikge1xuICBjb25zdCBbaXNWaXNpYmxlLCBzZXRJc1Zpc2libGVdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2hlaWdodCwgc2V0SGVpZ2h0XSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IFtyZWYsIHNldFJlZl0gPSB1c2VTdGF0ZTxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXZpcnR1YWxpemVkKSByZXR1cm5cbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcbiAgICAgIChbZW50cnldKSA9PiB7XG4gICAgICAgIHNldEhlaWdodChlbnRyeS5ib3VuZGluZ0NsaWVudFJlY3QuaGVpZ2h0KVxuICAgICAgICBzZXRJc1Zpc2libGUoZW50cnkuaXNJbnRlcnNlY3RpbmcpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByb290OiByb290LFxuICAgICAgICByb290TWFyZ2luOiBcIjE1MHB4XCIsXG4gICAgICB9LFxuICAgIClcbiAgICBjb25zdCBlbCA9IHJlZlxuICAgIGlmIChlbCkge1xuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbClcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWwpXG4gICAgICB9XG4gICAgfVxuICB9LCBbdmlydHVhbGl6ZWQsIHJvb3QsIHJlZl0pXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgICBkYXRhLWluZGV4PXtpbmRleH1cbiAgICAgIGNsYXNzTmFtZT17XCJpbmZpbml0ZS1saXN0LWl0ZW1cIn1cbiAgICAgIGtleT17aXRlbS5pZH1cbiAgICAgIHJvbGU9XCJsaXN0aXRlbVwiXG4gICAgICByZWY9e2ludGVyc2VjdCA/IChub2RlOiBIVE1MRGl2RWxlbWVudCkgPT4gaW50ZXJzZWN0KG5vZGUpIDogdW5kZWZpbmVkfVxuICAgID5cbiAgICAgIDxkaXYgcmVmPXtzZXRSZWZ9PlxuICAgICAgICB7IXZpcnR1YWxpemVkIHx8IGlzVmlzaWJsZSA/IChcbiAgICAgICAgICByZW5kZXJJdGVtKGl0ZW0sIGluZGV4LCBpbnRlcnNlY3QpXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQgfX0+PC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgeyBJbmZpbml0ZUxpc3RJdGVtIH1cbiJdLCJuYW1lcyI6WyJJbmZpbml0ZUxpc3RJdGVtIiwiYXJpYUxhYmVsIiwicmVuZGVySXRlbSIsInZpcnR1YWxpemVkIiwicm9vdCIsIndpbmRvdyIsImRvY3VtZW50IiwiaXRlbSIsImluZGV4IiwiaW50ZXJzZWN0IiwiaXNWaXNpYmxlIiwic2V0SXNWaXNpYmxlIiwidXNlU3RhdGUiLCJoZWlnaHQiLCJzZXRIZWlnaHQiLCJyZWYiLCJzZXRSZWYiLCJ1c2VFZmZlY3QiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cnkiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJpc0ludGVyc2VjdGluZyIsInJvb3RNYXJnaW4iLCJlbCIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJkaXYiLCJhcmlhLWxhYmVsIiwiZGF0YS1pbmRleCIsImNsYXNzTmFtZSIsInJvbGUiLCJub2RlIiwidW5kZWZpbmVkIiwic3R5bGUiLCJpZCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBd0VTQTs7O2VBQUFBOzs7O3VCQXhFMkI7QUFnQnBDLFNBQVNBLGlCQUFrRCxFQUN6REMsU0FBUyxFQUNUQyxVQUFVLEVBQ1ZDLGNBQWMsS0FBSyxFQUNuQkMsT0FBT0MsT0FBT0MsUUFBUSxFQUN0QkMsSUFBSSxFQUNKQyxLQUFLLEVBQ0xDLFNBQVMsRUFDTztJQUNoQixNQUFNLENBQUNDLFdBQVdDLGFBQWEsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBQzNDLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHRixJQUFBQSxlQUFRLEVBQUM7SUFDckMsTUFBTSxDQUFDRyxLQUFLQyxPQUFPLEdBQUdKLElBQUFBLGVBQVEsRUFBd0I7SUFFdERLLElBQUFBLGdCQUFTLEVBQUM7UUFDUixJQUFJLENBQUNkLGFBQWE7UUFDbEIsTUFBTWUsV0FBVyxJQUFJQyxxQkFDbkIsQ0FBQyxDQUFDQyxNQUFNO1lBQ05OLFVBQVVNLE1BQU1DLGtCQUFrQixDQUFDUixNQUFNO1lBQ3pDRixhQUFhUyxNQUFNRSxjQUFjO1FBQ25DLEdBQ0E7WUFDRWxCLE1BQU1BO1lBQ05tQixZQUFZO1FBQ2Q7UUFFRixNQUFNQyxLQUFLVDtRQUNYLElBQUlTLElBQUk7WUFDTk4sU0FBU08sT0FBTyxDQUFDRDtRQUNuQjtRQUNBLE9BQU87WUFDTCxJQUFJQSxJQUFJO2dCQUNOTixTQUFTUSxTQUFTLENBQUNGO1lBQ3JCO1FBQ0Y7SUFDRixHQUFHO1FBQUNyQjtRQUFhQztRQUFNVztLQUFJO0lBRTNCLHFCQUNFLHFCQUFDWTtRQUNDQyxjQUFZM0I7UUFDWjRCLGNBQVlyQjtRQUNac0IsV0FBVztRQUVYQyxNQUFLO1FBQ0xoQixLQUFLTixZQUFZLENBQUN1QixPQUF5QnZCLFVBQVV1QixRQUFRQztrQkFFN0QsY0FBQSxxQkFBQ047WUFBSVosS0FBS0M7c0JBQ1AsQ0FBQ2IsZUFBZU8sWUFDZlIsV0FBV0ssTUFBTUMsT0FBT0MsMkJBRXhCLHFCQUFDa0I7Z0JBQUlPLE9BQU87b0JBQUVyQjtnQkFBTzs7O09BUnBCTixLQUFLNEIsRUFBRTtBQWFsQiJ9