5df60fed2292c08ae72b736fa4ed82c9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isRpqlArrayFilter: function() {
        return isRpqlArrayFilter;
    },
    isRpqlArrayIdFilter: function() {
        return isRpqlArrayIdFilter;
    },
    isRpqlDateFilter: function() {
        return isRpqlDateFilter;
    },
    isRpqlFlatArrayFilter: function() {
        return isRpqlFlatArrayFilter;
    },
    isRpqlFlatArrayIdFilter: function() {
        return isRpqlFlatArrayIdFilter;
    },
    isRpqlFlatDateFilter: function() {
        return isRpqlFlatDateFilter;
    },
    isRpqlFlatExclusiveArrayBaseFilter: function() {
        return isRpqlFlatExclusiveArrayBaseFilter;
    },
    isRpqlFlatExclusiveArrayIdBaseFilter: function() {
        return isRpqlFlatExclusiveArrayIdBaseFilter;
    },
    isRpqlFlatExclusiveLogicFilter: function() {
        return isRpqlFlatExclusiveLogicFilter;
    },
    isRpqlFlatLogicalGroup: function() {
        return isRpqlFlatLogicalGroup;
    },
    isRpqlFlatLogicalNot: function() {
        return isRpqlFlatLogicalNot;
    },
    isRpqlFlatMatchFilter: function() {
        return isRpqlFlatMatchFilter;
    },
    isRpqlFlatRangeFilter: function() {
        return isRpqlFlatRangeFilter;
    },
    isRpqlLogicalGroup: function() {
        return isRpqlLogicalGroup;
    },
    isRpqlLogicalNot: function() {
        return isRpqlLogicalNot;
    },
    isRpqlMatchFilter: function() {
        return isRpqlMatchFilter;
    },
    isRpqlRangeFilter: function() {
        return isRpqlRangeFilter;
    }
});
const isRpqlLogicalGroup = (obj)=>{
    return [
        "and",
        "or"
    ].includes(obj.type);
};
const isRpqlFlatLogicalGroup = (obj)=>{
    return [
        "and",
        "or",
        "not-and",
        "not-or"
    ].includes(obj.type);
};
const isRpqlRangeFilter = (obj)=>{
    return "start" in obj && "end" in obj;
};
const isRpqlDateFilter = (obj)=>obj.type === "date";
const isRpqlLogicalNot = (obj)=>obj.type === "not";
const isRpqlFlatLogicalNot = (obj)=>obj.type === "not";
const isRpqlArrayFilter = (obj)=>!isRpqlRangeFilter(obj) && !isRpqlDateFilter(obj) && Array.isArray(obj.value) && "operation" in obj && [
        "in",
        "all"
    ].includes(obj.operation);
const isRpqlFlatArrayFilter = (obj)=>Array.isArray(obj.value) && "operation" in obj && !isRpqlFlatDateFilter(obj) && [
        "in",
        "all",
        "not-in",
        "not-all"
    ].includes(obj.operation);
const isRpqlFlatExclusiveLogicFilter = (obj)=>{
    return isRpqlFlatLogicalGroup(obj) && obj.type.startsWith("not-");
};
const isRpqlFlatExclusiveArrayBaseFilter = (obj)=>{
    return isRpqlFlatArrayFilter(obj) && obj.operation.startsWith("not-");
};
const isRpqlArrayIdFilter = (obj)=>!isRpqlDateFilter(obj) && "value" in obj && typeof obj.value === "string" && "operation" in obj && [
        "in",
        "all"
    ].includes(obj.operation);
const isRpqlFlatArrayIdFilter = (obj)=>typeof obj.value === "string" && "operation" in obj && !isRpqlFlatDateFilter(obj) && [
        "in",
        "all",
        "not-in",
        "not-all"
    ].includes(obj.operation);
const isRpqlFlatExclusiveArrayIdBaseFilter = (obj)=>{
    return isRpqlFlatArrayIdFilter(obj) && obj.operation.startsWith("not-");
};
const isRpqlFlatRangeFilter = (obj)=>{
    return obj.type !== "date" && "operation" in obj && !isRpqlFlatDateFilter(obj) && [
        "between",
        "not-between"
    ].includes(obj.operation);
};
const isRpqlFlatDateFilter = (obj)=>{
    return obj.type === "date";
};
const isRpqlMatchFilter = (obj)=>{
    return "value" in obj && Array.isArray(obj.value) && obj.value.length > 0 && typeof obj.value[0] !== "string" && isRpqlArrayFilter(obj.value[0]);
};
const isRpqlFlatMatchFilter = (obj)=>{
    return(// TODO: There is no other way for now to distinguish
    obj.type.slice(0, 6) === "macro_");
};

//# sourceMappingURL=data:application/json;base64,