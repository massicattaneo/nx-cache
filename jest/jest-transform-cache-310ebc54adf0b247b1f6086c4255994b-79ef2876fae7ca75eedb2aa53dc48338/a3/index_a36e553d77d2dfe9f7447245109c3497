5d77017dd408e01373e9d7debc517a95
/// <reference types="remark-parse" />
/// <reference types="remark-stringify" />
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-gfm').Options} MdastOptions
 * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions
 * @typedef {import('unified').Processor<Root>} Processor
 */ /**
 * @typedef {MicromarkOptions & MdastOptions} Options
 *   Configuration.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * Add support GFM (autolink literals, footnotes, strikethrough, tables,
 * tasklists).
 *
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {undefined}
 *   Nothing.
 */ "default", {
    enumerable: true,
    get: function() {
        return remarkGfm;
    }
});
const _mdastutilgfm = require("mdast-util-gfm");
const _micromarkextensiongfm = require("micromark-extension-gfm");
/** @type {Options} */ const emptyOptions = {};
function remarkGfm(options) {
    // @ts-expect-error: TS is wrong about `this`.
    // eslint-disable-next-line unicorn/no-this-assignment
    const self = /** @type {Processor} */ this;
    const settings = options || emptyOptions;
    const data = self.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push((0, _micromarkextensiongfm.gfm)(settings));
    fromMarkdownExtensions.push((0, _mdastutilgfm.gfmFromMarkdown)());
    toMarkdownExtensions.push((0, _mdastutilgfm.gfmToMarkdown)(settings));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9yZW1hcmstZ2ZtL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cInJlbWFyay1wYXJzZVwiIC8+XG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cInJlbWFyay1zdHJpbmdpZnlcIiAvPlxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC1nZm0nKS5PcHRpb25zfSBNZGFzdE9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay1leHRlbnNpb24tZ2ZtJykuT3B0aW9uc30gTWljcm9tYXJrT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgndW5pZmllZCcpLlByb2Nlc3NvcjxSb290Pn0gUHJvY2Vzc29yXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7TWljcm9tYXJrT3B0aW9ucyAmIE1kYXN0T3B0aW9uc30gT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICovXG5cbmltcG9ydCB7Z2ZtRnJvbU1hcmtkb3duLCBnZm1Ub01hcmtkb3dufSBmcm9tICdtZGFzdC11dGlsLWdmbSdcbmltcG9ydCB7Z2ZtfSBmcm9tICdtaWNyb21hcmstZXh0ZW5zaW9uLWdmbSdcblxuLyoqIEB0eXBlIHtPcHRpb25zfSAqL1xuY29uc3QgZW1wdHlPcHRpb25zID0ge31cblxuLyoqXG4gKiBBZGQgc3VwcG9ydCBHRk0gKGF1dG9saW5rIGxpdGVyYWxzLCBmb290bm90ZXMsIHN0cmlrZXRocm91Z2gsIHRhYmxlcyxcbiAqIHRhc2tsaXN0cykuXG4gKlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbWFya0dmbShvcHRpb25zKSB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGlzIHdyb25nIGFib3V0IGB0aGlzYC5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhpcy1hc3NpZ25tZW50XG4gIGNvbnN0IHNlbGYgPSAvKiogQHR5cGUge1Byb2Nlc3Nvcn0gKi8gKHRoaXMpXG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCBlbXB0eU9wdGlvbnNcbiAgY29uc3QgZGF0YSA9IHNlbGYuZGF0YSgpXG5cbiAgY29uc3QgbWljcm9tYXJrRXh0ZW5zaW9ucyA9XG4gICAgZGF0YS5taWNyb21hcmtFeHRlbnNpb25zIHx8IChkYXRhLm1pY3JvbWFya0V4dGVuc2lvbnMgPSBbXSlcbiAgY29uc3QgZnJvbU1hcmtkb3duRXh0ZW5zaW9ucyA9XG4gICAgZGF0YS5mcm9tTWFya2Rvd25FeHRlbnNpb25zIHx8IChkYXRhLmZyb21NYXJrZG93bkV4dGVuc2lvbnMgPSBbXSlcbiAgY29uc3QgdG9NYXJrZG93bkV4dGVuc2lvbnMgPVxuICAgIGRhdGEudG9NYXJrZG93bkV4dGVuc2lvbnMgfHwgKGRhdGEudG9NYXJrZG93bkV4dGVuc2lvbnMgPSBbXSlcblxuICBtaWNyb21hcmtFeHRlbnNpb25zLnB1c2goZ2ZtKHNldHRpbmdzKSlcbiAgZnJvbU1hcmtkb3duRXh0ZW5zaW9ucy5wdXNoKGdmbUZyb21NYXJrZG93bigpKVxuICB0b01hcmtkb3duRXh0ZW5zaW9ucy5wdXNoKGdmbVRvTWFya2Rvd24oc2V0dGluZ3MpKVxufVxuIl0sIm5hbWVzIjpbInJlbWFya0dmbSIsImVtcHR5T3B0aW9ucyIsIm9wdGlvbnMiLCJzZWxmIiwic2V0dGluZ3MiLCJkYXRhIiwibWljcm9tYXJrRXh0ZW5zaW9ucyIsImZyb21NYXJrZG93bkV4dGVuc2lvbnMiLCJ0b01hcmtkb3duRXh0ZW5zaW9ucyIsInB1c2giLCJnZm0iLCJnZm1Gcm9tTWFya2Rvd24iLCJnZm1Ub01hcmtkb3duIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUN0QywwQ0FBMEM7QUFFMUM7Ozs7O0NBS0MsR0FFRDs7O0NBR0M7Ozs7K0JBUUQ7Ozs7Ozs7O0NBUUMsR0FDRDs7O2VBQXdCQTs7OzhCQWZxQjt1Q0FDM0I7QUFFbEIsb0JBQW9CLEdBQ3BCLE1BQU1DLGVBQWUsQ0FBQztBQVdQLFNBQVNELFVBQVVFLE9BQU87SUFDdkMsOENBQThDO0lBQzlDLHNEQUFzRDtJQUN0RCxNQUFNQyxPQUFPLHNCQUFzQixHQUFJLElBQUk7SUFDM0MsTUFBTUMsV0FBV0YsV0FBV0Q7SUFDNUIsTUFBTUksT0FBT0YsS0FBS0UsSUFBSTtJQUV0QixNQUFNQyxzQkFDSkQsS0FBS0MsbUJBQW1CLElBQUtELENBQUFBLEtBQUtDLG1CQUFtQixHQUFHLEVBQUUsQUFBRDtJQUMzRCxNQUFNQyx5QkFDSkYsS0FBS0Usc0JBQXNCLElBQUtGLENBQUFBLEtBQUtFLHNCQUFzQixHQUFHLEVBQUUsQUFBRDtJQUNqRSxNQUFNQyx1QkFDSkgsS0FBS0csb0JBQW9CLElBQUtILENBQUFBLEtBQUtHLG9CQUFvQixHQUFHLEVBQUUsQUFBRDtJQUU3REYsb0JBQW9CRyxJQUFJLENBQUNDLElBQUFBLDBCQUFHLEVBQUNOO0lBQzdCRyx1QkFBdUJFLElBQUksQ0FBQ0UsSUFBQUEsNkJBQWU7SUFDM0NILHFCQUFxQkMsSUFBSSxDQUFDRyxJQUFBQSwyQkFBYSxFQUFDUjtBQUMxQyJ9