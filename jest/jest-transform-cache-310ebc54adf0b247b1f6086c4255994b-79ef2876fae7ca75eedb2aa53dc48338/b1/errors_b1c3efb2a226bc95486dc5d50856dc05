b35f9da84bea1f6fb865c55b181ccded
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/errors.ts
var errors_exports = {};
__export(errors_exports, {
    EmailLinkErrorCode: ()=>import_error.EmailLinkErrorCode,
    EmailLinkErrorCodeStatus: ()=>import_error.EmailLinkErrorCodeStatus,
    isClerkAPIResponseError: ()=>import_error.isClerkAPIResponseError,
    isClerkRuntimeError: ()=>import_error.isClerkRuntimeError,
    isEmailLinkError: ()=>import_error.isEmailLinkError,
    isKnownError: ()=>import_error.isKnownError,
    isMetamaskError: ()=>import_error.isMetamaskError
});
module.exports = __toCommonJS(errors_exports);
var import_error = require("@clerk/shared/error");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    EmailLinkErrorCode,
    EmailLinkErrorCodeStatus,
    isClerkAPIResponseError,
    isClerkRuntimeError,
    isEmailLinkError,
    isKnownError,
    isMetamaskError
}); //# sourceMappingURL=errors.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtcbiAgaXNDbGVya0FQSVJlc3BvbnNlRXJyb3IsXG4gIGlzQ2xlcmtSdW50aW1lRXJyb3IsXG4gIGlzRW1haWxMaW5rRXJyb3IsXG4gIGlzS25vd25FcnJvcixcbiAgaXNNZXRhbWFza0Vycm9yLFxuICBFbWFpbExpbmtFcnJvckNvZGUsXG4gIEVtYWlsTGlua0Vycm9yQ29kZVN0YXR1cyxcbn0gZnJvbSAnQGNsZXJrL3NoYXJlZC9lcnJvcic7XG4iXSwibmFtZXMiOlsiZXJyb3JzX2V4cG9ydHMiLCJfX2V4cG9ydCIsIkVtYWlsTGlua0Vycm9yQ29kZSIsImltcG9ydF9lcnJvciIsIkVtYWlsTGlua0Vycm9yQ29kZVN0YXR1cyIsImlzQ2xlcmtBUElSZXNwb25zZUVycm9yIiwiaXNDbGVya1J1bnRpbWVFcnJvciIsImlzRW1haWxMaW5rRXJyb3IiLCJpc0tub3duRXJyb3IiLCJpc01ldGFtYXNrRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiX190b0NvbW1vbkpTIiwicmVxdWlyZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsaUJBQUEsQ0FBQTtBQUFBQyxTQUFBRCxnQkFBQTtJQUFBRSxvQkFBQSxJQUFBQyxhQUFBRCxrQkFBQTtJQUFBRSwwQkFBQSxJQUFBRCxhQUFBQyx3QkFBQTtJQUFBQyx5QkFBQSxJQUFBRixhQUFBRSx1QkFBQTtJQUFBQyxxQkFBQSxJQUFBSCxhQUFBRyxtQkFBQTtJQUFBQyxrQkFBQSxJQUFBSixhQUFBSSxnQkFBQTtJQUFBQyxjQUFBLElBQUFMLGFBQUFLLFlBQUE7SUFBQUMsaUJBQUEsSUFBQU4sYUFBQU0sZUFBQTtBQUFBO0FBQUFDLE9BQUFDLE9BQUEsR0FBQUMsYUFBQVo7QUFBQSxJQUFBRyxlQVFPVSxRQUFBIn0=