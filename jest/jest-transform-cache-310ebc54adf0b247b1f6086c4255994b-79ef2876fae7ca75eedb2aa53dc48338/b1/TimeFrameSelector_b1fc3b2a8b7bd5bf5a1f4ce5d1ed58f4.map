{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/workflow/src/lib/TimeFrameSelector/TimeFrameSelector.tsx"],"sourcesContent":["import { useCallback, useMemo, useState } from \"react\"\nimport { RpqlDateFilter } from \"@rp/common/api-types\"\nimport { formatISODate, getValidDateOrStringDateFromValue } from \"@rp/common/utils\"\nimport { DATE_OPTIONS } from \"@rp/common/utils\"\nimport { TimeframeOption } from \"@rp/react/common/workflow\"\nimport {\n  BriefStepsLegend,\n  Datepicker,\n  formatInitialDates,\n} from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { Box, SxProps, ToggleButton, Typography } from \"@rp/react/web/mui/core\"\nimport { QueryBuilder } from \"@rp/react/web/mui/icons\"\n\nconst CUSTOM_DATE_TYPE = \"Custom\"\n\nconst toogleButtonStyles = {\n  fontSize: \"16px\",\n  color: \"text.primary\",\n  textTransform: \"none\",\n  textSizeAdjust: \"auto\",\n}\n\nconst getWrapperSx = (isMobile: boolean): SxProps => ({\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexWrap: \"wrap\",\n  gap: 1,\n  mt: 1,\n  \"& button\": {\n    fontSize: isMobile ? 14 : 16,\n    borderRadius: 6,\n    height: isMobile ? 28 : 40,\n    width: \"45%\",\n  },\n})\n\ntype Props = {\n  timeframe?: TimeframeOption\n  handleTimeframeSelection: (timeframe: TimeframeOption) => void\n}\nconst TimeframeSelector = ({ handleTimeframeSelection, timeframe }: Props) => {\n  const { isMobile } = useDeviceInfo()\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false)\n\n  const handleTimeframeChange = useCallback(\n    (timeframe: { label: string; start: Date | string; end: Date | string }) => {\n      handleTimeframeSelection({\n        ...timeframe,\n        end: getValidDateOrStringDateFromValue(timeframe.end),\n        start: getValidDateOrStringDateFromValue(timeframe.start),\n      })\n    },\n    [handleTimeframeSelection],\n  )\n\n  const handleDatePickerSubmit = (dates: RpqlDateFilter) => {\n    if (dates.value && Array.isArray(dates.value) && dates.value.length === 2) {\n      handleTimeframeChange({\n        label: CUSTOM_DATE_TYPE,\n        start: formatISODate(dates.value[0]),\n        end: formatISODate(dates.value[1]),\n      })\n    }\n    handleCloseDatePicker()\n  }\n\n  const handleCloseDatePicker = () => {\n    setIsDatePickerOpen(false)\n  }\n\n  const handleOpenDatePicker = () => {\n    setIsDatePickerOpen(true)\n  }\n\n  const renderStandardTimeRanges = () =>\n    Object.entries(DATE_OPTIONS)\n      .slice(4, 11)\n      .map(([key, option]) => (\n        <ToggleButton\n          key={key}\n          fullWidth\n          value={key}\n          selected={timeframe?.label === option.label}\n          size=\"small\"\n          onClick={() =>\n            handleTimeframeChange({\n              label: option.label,\n              start: getValidDateOrStringDateFromValue(option.start()),\n              end: getValidDateOrStringDateFromValue(option.end()),\n            })\n          }\n          sx={toogleButtonStyles}\n        >\n          {option.label}\n        </ToggleButton>\n      ))\n\n  const adaptedDateOptions = useMemo(\n    () =>\n      Object.fromEntries(\n        Object.entries(DATE_OPTIONS).map(([key, option]) => [\n          key,\n          {\n            label: option.label,\n            start: option.start(),\n            end: option.end(),\n          },\n        ]),\n      ),\n    [],\n  )\n\n  return (\n    <>\n      <BriefStepsLegend sx={{ alignItems: \"center\", mb: 2 }}>\n        <Typography>{\"Select a time range for your analysis:\"}</Typography>\n      </BriefStepsLegend>\n      <Box\n        bgcolor={\"elevation.dp01\"}\n        p={2}\n        borderRadius={1}\n        mt={1.5}\n        ml={!isMobile ? 7 : undefined}\n      >\n        <Box\n          bgcolor={\"elevation.dp08\"}\n          borderRadius={0.5}\n          display={\"flex\"}\n          alignItems={\"center\"}\n          mb={1.5}\n          width={\"fit-content\"}\n          py={0.25}\n          px={0.5}\n        >\n          <QueryBuilder sx={{ mr: 1, height: \"20px\", width: \"20px\" }} />\n          <Typography fontSize={\"14px\"} fontWeight={\"bold\"}>\n            Timeframe\n          </Typography>\n        </Box>\n        <Box mt={1}>\n          <Box sx={getWrapperSx(isMobile)}>\n            {renderStandardTimeRanges()}\n            <ToggleButton\n              data-testid=\"custom-date-toggle-button\"\n              fullWidth\n              value={CUSTOM_DATE_TYPE}\n              selected={timeframe?.label === CUSTOM_DATE_TYPE}\n              size=\"small\"\n              onClick={handleOpenDatePicker}\n              sx={toogleButtonStyles}\n            >\n              {CUSTOM_DATE_TYPE}\n            </ToggleButton>\n          </Box>\n        </Box>\n        <Box mb={-2}>\n          <Datepicker\n            hideInput\n            date={formatInitialDates(\n              {\n                type: \"date\",\n                operation: \"between\",\n                value: [\n                  getValidDateOrStringDateFromValue(timeframe?.start),\n                  getValidDateOrStringDateFromValue(timeframe?.end),\n                ],\n              },\n              adaptedDateOptions,\n            )}\n            defaultOption={\"custom\"}\n            options={adaptedDateOptions}\n            onSubmit={handleDatePickerSubmit}\n            open={isDatePickerOpen}\n            onClose={handleCloseDatePicker}\n            monthsToShown={isMobile ? 1 : 2}\n            withRangeList={false}\n          />\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport { TimeframeSelector }\n"],"names":["TimeframeSelector","CUSTOM_DATE_TYPE","toogleButtonStyles","fontSize","color","textTransform","textSizeAdjust","getWrapperSx","isMobile","display","justifyContent","flexWrap","gap","mt","borderRadius","height","width","handleTimeframeSelection","timeframe","useDeviceInfo","isDatePickerOpen","setIsDatePickerOpen","useState","handleTimeframeChange","useCallback","end","getValidDateOrStringDateFromValue","start","handleDatePickerSubmit","dates","value","Array","isArray","length","label","formatISODate","handleCloseDatePicker","handleOpenDatePicker","renderStandardTimeRanges","Object","entries","DATE_OPTIONS","slice","map","key","option","ToggleButton","fullWidth","selected","size","onClick","sx","adaptedDateOptions","useMemo","fromEntries","BriefStepsLegend","alignItems","mb","Typography","Box","bgcolor","p","ml","undefined","py","px","QueryBuilder","mr","fontWeight","data-testid","Datepicker","hideInput","date","formatInitialDates","type","operation","defaultOption","options","onSubmit","open","onClose","monthsToShown","withRangeList"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}