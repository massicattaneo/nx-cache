285537bb180d97bcf7600836531dc28a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TimeframeSelector", {
    enumerable: true,
    get: function() {
        return TimeframeSelector;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _utils = require("@rp/common/utils");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const CUSTOM_DATE_TYPE = "Custom";
const toogleButtonStyles = {
    fontSize: "16px",
    color: "text.primary",
    textTransform: "none",
    textSizeAdjust: "auto"
};
const getWrapperSx = (isMobile)=>({
        display: "flex",
        justifyContent: "center",
        flexWrap: "wrap",
        gap: 1,
        mt: 1,
        "& button": {
            fontSize: isMobile ? 14 : 16,
            borderRadius: 6,
            height: isMobile ? 28 : 40,
            width: "45%"
        }
    });
const TimeframeSelector = ({ handleTimeframeSelection, timeframe })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [isDatePickerOpen, setIsDatePickerOpen] = (0, _react.useState)(false);
    const handleTimeframeChange = (0, _react.useCallback)((timeframe)=>{
        handleTimeframeSelection(_object_spread_props(_object_spread({}, timeframe), {
            end: (0, _utils.getValidDateOrStringDateFromValue)(timeframe.end),
            start: (0, _utils.getValidDateOrStringDateFromValue)(timeframe.start)
        }));
    }, [
        handleTimeframeSelection
    ]);
    const handleDatePickerSubmit = (dates)=>{
        if (dates.value && Array.isArray(dates.value) && dates.value.length === 2) {
            handleTimeframeChange({
                label: CUSTOM_DATE_TYPE,
                start: (0, _utils.formatISODate)(dates.value[0]),
                end: (0, _utils.formatISODate)(dates.value[1])
            });
        }
        handleCloseDatePicker();
    };
    const handleCloseDatePicker = ()=>{
        setIsDatePickerOpen(false);
    };
    const handleOpenDatePicker = ()=>{
        setIsDatePickerOpen(true);
    };
    const renderStandardTimeRanges = ()=>Object.entries(_utils.DATE_OPTIONS).slice(4, 11).map(([key, option])=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ToggleButton, {
                fullWidth: true,
                value: key,
                selected: (timeframe === null || timeframe === void 0 ? void 0 : timeframe.label) === option.label,
                size: "small",
                onClick: ()=>handleTimeframeChange({
                        label: option.label,
                        start: (0, _utils.getValidDateOrStringDateFromValue)(option.start()),
                        end: (0, _utils.getValidDateOrStringDateFromValue)(option.end())
                    }),
                sx: toogleButtonStyles,
                children: option.label
            }, key));
    const adaptedDateOptions = (0, _react.useMemo)(()=>Object.fromEntries(Object.entries(_utils.DATE_OPTIONS).map(([key, option])=>[
                key,
                {
                    label: option.label,
                    start: option.start(),
                    end: option.end()
                }
            ])), []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.BriefStepsLegend, {
                sx: {
                    alignItems: "center",
                    mb: 2
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    children: "Select a time range for your analysis:"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                bgcolor: "elevation.dp01",
                p: 2,
                borderRadius: 1,
                mt: 1.5,
                ml: !isMobile ? 7 : undefined,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        bgcolor: "elevation.dp08",
                        borderRadius: 0.5,
                        display: "flex",
                        alignItems: "center",
                        mb: 1.5,
                        width: "fit-content",
                        py: 0.25,
                        px: 0.5,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.QueryBuilder, {
                                sx: {
                                    mr: 1,
                                    height: "20px",
                                    width: "20px"
                                }
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                fontSize: "14px",
                                fontWeight: "bold",
                                children: "Timeframe"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        mt: 1,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            sx: getWrapperSx(isMobile),
                            children: [
                                renderStandardTimeRanges(),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ToggleButton, {
                                    "data-testid": "custom-date-toggle-button",
                                    fullWidth: true,
                                    value: CUSTOM_DATE_TYPE,
                                    selected: (timeframe === null || timeframe === void 0 ? void 0 : timeframe.label) === CUSTOM_DATE_TYPE,
                                    size: "small",
                                    onClick: handleOpenDatePicker,
                                    sx: toogleButtonStyles,
                                    children: CUSTOM_DATE_TYPE
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        mb: -2,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.Datepicker, {
                            hideInput: true,
                            date: (0, _compositecomponents.formatInitialDates)({
                                type: "date",
                                operation: "between",
                                value: [
                                    (0, _utils.getValidDateOrStringDateFromValue)(timeframe === null || timeframe === void 0 ? void 0 : timeframe.start),
                                    (0, _utils.getValidDateOrStringDateFromValue)(timeframe === null || timeframe === void 0 ? void 0 : timeframe.end)
                                ]
                            }, adaptedDateOptions),
                            defaultOption: "custom",
                            options: adaptedDateOptions,
                            onSubmit: handleDatePickerSubmit,
                            open: isDatePickerOpen,
                            onClose: handleCloseDatePicker,
                            monthsToShown: isMobile ? 1 : 2,
                            withRangeList: false
                        })
                    })
                ]
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,