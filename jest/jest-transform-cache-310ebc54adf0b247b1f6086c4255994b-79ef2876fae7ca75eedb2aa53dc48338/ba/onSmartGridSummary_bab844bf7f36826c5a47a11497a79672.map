{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistSmartGrid/onSmartGridSummary.ts"],"sourcesContent":["import { Dispatch, SetStateAction } from \"react\"\nimport { SummaryState, SummaryStatus, createChunkMap } from \"@rp/react/common/hooks\"\nimport { CollapsableBlock } from \"@rp/react/tanstack-api/llm-summary\"\nimport { SmartGridColumn, SmartGridRow } from \"./WatchlistSmartGrid\"\n\nconst isCollapsableBlock = (\n  block: SummaryState[\"auditBlocks\"][number],\n): block is CollapsableBlock => {\n  return block.type === \"COLLAPSE\"\n}\n\nfunction onSmartGridSummary(setSmartGridColumns: Dispatch<SetStateAction<Array<SmartGridColumn>>>) {\n  return function (summary: SummaryState, status: SummaryStatus, chatId: string) {\n    const { chunkMap, externalMap } = createChunkMap(\n      summary.auditTraces || [],\n      summary.originSources,\n    )\n    setSmartGridColumns(prev => {\n      const col = prev.find(c => c.chatId === chatId)\n      if (col) {\n        const rows = Object.entries(col.rows ?? {}).reduce((acc, [key, row]) => {\n          const value = summary.auditBlocks\n            .filter(isCollapsableBlock)\n            .find(item => item.title === row.cqsName)?.content.value\n          const rawValue = value?.trim().includes(\"No relevant information found for\")\n            ? undefined\n            : value\n          const isLoading = !rawValue && !(status === \"COMPLETED\" || status === \"ERROR\")\n          return {\n            ...acc,\n            [key]: {\n              ...row,\n              isLoading,\n              value: rawValue,\n              isError: status === \"ERROR\",\n            },\n          }\n        }, {} as Record<string, SmartGridRow>)\n        Object.assign(col, {\n          rows,\n          chunkMap,\n          externalMap,\n          status,\n        })\n      }\n      return [...prev]\n    })\n  }\n}\n\nexport { onSmartGridSummary }\n"],"names":["onSmartGridSummary","isCollapsableBlock","block","type","setSmartGridColumns","summary","status","chatId","chunkMap","externalMap","createChunkMap","auditTraces","originSources","prev","col","find","c","rows","Object","entries","reduce","acc","key","row","value","auditBlocks","filter","item","title","cqsName","content","rawValue","trim","includes","undefined","isLoading","isError","assign"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAkDSA;;;eAAAA;;;uBAjDmD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI5D,MAAMC,qBAAqB,CACzBC;IAEA,OAAOA,MAAMC,IAAI,KAAK;AACxB;AAEA,SAASH,mBAAmBI,mBAAqE;IAC/F,OAAO,SAAUC,OAAqB,EAAEC,MAAqB,EAAEC,MAAc;QAC3E,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAE,GAAGC,IAAAA,qBAAc,EAC9CL,QAAQM,WAAW,IAAI,EAAE,EACzBN,QAAQO,aAAa;QAEvBR,oBAAoBS,CAAAA;YAClB,MAAMC,MAAMD,KAAKE,IAAI,CAACC,CAAAA,IAAKA,EAAET,MAAM,KAAKA;YACxC,IAAIO,KAAK;oBACqBA;gBAA5B,MAAMG,OAAOC,OAAOC,OAAO,CAACL,CAAAA,YAAAA,IAAIG,IAAI,cAARH,uBAAAA,YAAY,CAAC,GAAGM,MAAM,CAAC,CAACC,KAAK,CAACC,KAAKC,IAAI;wBACnDlB;oBAAd,MAAMmB,SAAQnB,mCAAAA,QAAQoB,WAAW,CAC9BC,MAAM,CAACzB,oBACPc,IAAI,CAACY,CAAAA,OAAQA,KAAKC,KAAK,KAAKL,IAAIM,OAAO,eAF5BxB,uDAAAA,iCAE+ByB,OAAO,CAACN,KAAK;oBAC1D,MAAMO,WAAWP,CAAAA,kBAAAA,4BAAAA,MAAOQ,IAAI,GAAGC,QAAQ,CAAC,wCACpCC,YACAV;oBACJ,MAAMW,YAAY,CAACJ,YAAY,CAAEzB,CAAAA,WAAW,eAAeA,WAAW,OAAM;oBAC5E,OAAO,wCACFe;wBACH,CAACC,IAAI,EAAE,wCACFC;4BACHY;4BACAX,OAAOO;4BACPK,SAAS9B,WAAW;;;gBAG1B,GAAG,CAAC;gBACJY,OAAOmB,MAAM,CAACvB,KAAK;oBACjBG;oBACAT;oBACAC;oBACAH;gBACF;YACF;YACA,OAAO;mBAAIO;aAAK;QAClB;IACF;AACF"}