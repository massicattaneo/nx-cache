{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-markdown/lib/util/safe.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n"],"names":["safe","state","input","config","value","before","after","positions","result","infos","index","unsafe","length","pattern","patternInScope","stack","expression","compilePattern","match","exec","Boolean","atBreak","position","includes","push","sort","numerical","start","end","escapeBackslashes","slice","test","charAt","encode","charCodeAt","toString","toUpperCase","join","a","b","results","whole"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}