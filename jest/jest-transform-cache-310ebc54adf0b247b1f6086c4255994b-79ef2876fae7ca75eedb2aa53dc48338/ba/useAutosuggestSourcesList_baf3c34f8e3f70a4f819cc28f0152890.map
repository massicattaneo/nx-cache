{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/source-selector/src/hooks/useAutosuggestSourcesList.ts"],"sourcesContent":["import { useEffect, useMemo } from \"react\"\nimport {\n  type AutosuggestSource,\n  useInfiniteAutosuggestSources,\n} from \"@rp/react/tanstack-api/content\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\n\ntype UseAutosuggestSourcesListParams = {\n  contentPackage?: string | undefined\n  contentCategory?: string | undefined\n  query: string\n}\n\ntype UseAutosuggestSourcesListState = {\n  allAutosuggestSources: Array<AutosuggestSource>\n  fetchNextPage: () => void\n  hasError: boolean\n  hasNextPage: boolean\n  isFetchingNextPage: boolean\n  isLoadingAutosuggestSources: boolean\n}\n\nfunction useAutosuggestSourcesList({\n  query,\n  contentPackage,\n  contentCategory,\n}: UseAutosuggestSourcesListParams): UseAutosuggestSourcesListState {\n  const { enqueueError } = useSnackbar()\n  const { data, isFetchingNextPage, hasNextPage, fetchNextPage, isFetching, isError } =\n    useInfiniteAutosuggestSources({ contentPackage, contentCategory, query })\n\n  useEffect(() => {\n    if (isError) {\n      enqueueError(\"There was an error while loading sources\")\n    }\n  }, [isError, enqueueError])\n\n  const allAutosuggestSources: Array<AutosuggestSource> = useMemo(\n    () => data?.pages.flatMap(page => page.results) || [],\n    [data],\n  )\n\n  return {\n    allAutosuggestSources,\n    fetchNextPage,\n    hasError: isError,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoadingAutosuggestSources: isFetching,\n  }\n}\n\nexport { useAutosuggestSourcesList }\nexport type { UseAutosuggestSourcesListState, UseAutosuggestSourcesListParams }\n"],"names":["useAutosuggestSourcesList","query","contentPackage","contentCategory","enqueueError","useSnackbar","data","isFetchingNextPage","hasNextPage","fetchNextPage","isFetching","isError","useInfiniteAutosuggestSources","useEffect","allAutosuggestSources","useMemo","pages","flatMap","page","results","hasError","isLoadingAutosuggestSources"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoDSA;;;eAAAA;;;uBApD0B;yBAI5B;2BACqB;AAiB5B,SAASA,0BAA0B,EACjCC,KAAK,EACLC,cAAc,EACdC,eAAe,EACiB;IAChC,MAAM,EAAEC,YAAY,EAAE,GAAGC,IAAAA,sBAAW;IACpC,MAAM,EAAEC,IAAI,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,aAAa,EAAEC,UAAU,EAAEC,OAAO,EAAE,GACjFC,IAAAA,sCAA6B,EAAC;QAAEV;QAAgBC;QAAiBF;IAAM;IAEzEY,IAAAA,gBAAS,EAAC;QACR,IAAIF,SAAS;YACXP,aAAa;QACf;IACF,GAAG;QAACO;QAASP;KAAa;IAE1B,MAAMU,wBAAkDC,IAAAA,cAAO,EAC7D,IAAMT,CAAAA,iBAAAA,2BAAAA,KAAMU,KAAK,CAACC,OAAO,CAACC,CAAAA,OAAQA,KAAKC,OAAO,MAAK,EAAE,EACrD;QAACb;KAAK;IAGR,OAAO;QACLQ;QACAL;QACAW,UAAUT;QACVH;QACAD;QACAc,6BAA6BX;IAC/B;AACF"}