f382ff5b641a47c42cec95c2986c113f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useCQSPreview: function() {
        return useCQSPreview;
    },
    useCurrentCQSPreview: function() {
        return useCurrentCQSPreview;
    },
    useMultipleCQSPreviews: function() {
        return useMultipleCQSPreviews;
    }
});
const _react = require("react");
const _clerkreact = require("@clerk/clerk-react");
const _apitypes = require("@rp/common/api-types");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _cqsutils = require("@rp/react/web/cqs-utils");
const _reactquery = require("@tanstack/react-query");
const _QueryContext = require("./QueryContext");
const _useResultsPageState = require("./useResultsPageState");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
// Helper functions
const previewKey = (key, search, useClusterApi)=>[
        _settings.QUERY_KEY_FEATURE_FLAG,
        key,
        _object_spread({}, search),
        useClusterApi !== null && useClusterApi !== void 0 ? useClusterApi : false
    ];
// Hook that appends the flags context into the query key function
const useCqsPreviewKey = ()=>{
    return (key, search, useClusterAPI)=>{
        return previewKey(key, search, useClusterAPI);
    };
};
const fetchSearchPreview = async ({ pageParam, queryKey }, onFirstPageFetch, onFirstPageFetched)=>{
    const [, , search, useClusterApi] = queryKey;
    const firstPage = pageParam === 1 || pageParam === undefined;
    const numberOfResults = _settings.DEFAULT_QUERY_LIMIT;
    if (firstPage) {
        onFirstPageFetch();
    }
    if (search === undefined) return;
    const query = _object_spread_props(_object_spread({}, search), {
        pagination: {
            limit: numberOfResults,
            cursor: pageParam
        },
        hybrid: true,
        searchChain: useClusterApi ? "clustering" : undefined
    });
    const { data } = await _axiosclient.axiosClient.post("/cqs/query-chunks", query);
    if (firstPage) onFirstPageFetched(data);
    return data;
};
const getStoriesFromPages = (pages)=>{
    const storiesObject = pages.reduce((acc, page)=>{
        if (!page) {
            return acc;
        }
        // We are checking if the ID is already in. Only different IDs allowed
        const accumulator = _object_spread({}, acc);
        for (const story of page.stories){
            accumulator[story.id] = accumulator[story.id] ? accumulator[story.id] : _object_spread_props(_object_spread({}, story), {
                ts: story.ts.endsWith("Z") ? story.ts : `${story.ts}Z`,
                cluster: (0, _apitypes.isClusterStory)(story) ? story.cluster.map((clusterStory)=>(0, _utils.mapToISOTimestamp)(clusterStory)) : undefined
            });
        }
        return accumulator;
    }, {});
    return Object.values(storiesObject);
};
const useCQSPreview = (search, key, options = {
    enabled: true,
    useClusterApi: true,
    queryOptions: {},
    isFeedRequest: false
})=>{
    var _queryRes_data_pages_, _queryRes_data, _queryRes_data1;
    const getCqsPreviewKey = useCqsPreviewKey();
    const onFirstPageFetch = ()=>{
        if (options.onFirstPageFetch) {
            options.onFirstPageFetch();
        }
    };
    const onFirstPageFetched = (data)=>{
        var _options_onFirstPageFetched;
        (_options_onFirstPageFetched = options.onFirstPageFetched) === null || _options_onFirstPageFetched === void 0 ? void 0 : _options_onFirstPageFetched.call(options, data);
    };
    const queryRes = (0, _reactquery.useInfiniteQuery)(_object_spread_props(_object_spread({
        // eslint-disable-next-line @tanstack/query/exhaustive-deps
        queryKey: getCqsPreviewKey(key, search, options.useClusterApi),
        queryFn: (params)=>{
            return fetchSearchPreview(params, onFirstPageFetch, onFirstPageFetched);
        },
        placeholderData: _reactquery.keepPreviousData,
        staleTime: 0,
        refetchOnWindowFocus: false,
        enabled: options.enabled,
        getNextPageParam: (lastPage)=>lastPage === null || lastPage === void 0 ? void 0 : lastPage.nextCursor
    }, options.queryOptions), {
        initialPageParam: 1
    }));
    const { onError } = options;
    (0, _react.useEffect)(()=>{
        if (queryRes.isError) {
            onError === null || onError === void 0 ? void 0 : onError();
        }
    }, [
        onError,
        queryRes.isError
    ]);
    const rest = queryRes.data ? queryRes.data.pages[0] : {};
    const stories = (0, _react.useMemo)(()=>queryRes.data ? getStoriesFromPages(queryRes.data.pages) : [], [
        queryRes.data
    ]);
    const defaults = {
        coverage: (_queryRes_data = queryRes.data) === null || _queryRes_data === void 0 ? void 0 : (_queryRes_data_pages_ = _queryRes_data.pages[0]) === null || _queryRes_data_pages_ === void 0 ? void 0 : _queryRes_data_pages_.coverage,
        documentCount: 0
    };
    var _queryRes_data_pages_length;
    return _object_spread_props(_object_spread({}, defaults, rest, queryRes), {
        stories,
        numOfPages: (_queryRes_data_pages_length = (_queryRes_data1 = queryRes.data) === null || _queryRes_data1 === void 0 ? void 0 : _queryRes_data1.pages.length) !== null && _queryRes_data_pages_length !== void 0 ? _queryRes_data_pages_length : 0
    });
};
const useMultipleCQSPreviews = (searches, options)=>{
    const getCqsPreviewKey = useCqsPreviewKey();
    const queries = searches.map((search)=>{
        return (0, _reactquery.queryOptions)({
            queryKey: getCqsPreviewKey("cqs-multi", search, options.useClusterAPI),
            queryFn: (params)=>fetchSearchPreview(_object_spread_props(_object_spread({}, params), {
                    pageParam: 1
                }), ()=>{}, ()=>{}),
            placeholderData: (prev)=>prev,
            staleTime: 0,
            refetchOnWindowFocus: false,
            enabled: search !== undefined,
            select: (data)=>{
                if (!data) {
                    return data;
                }
                return _object_spread_props(_object_spread({}, data), {
                    stories: data.stories.map((story)=>_object_spread_props(_object_spread({}, story), {
                            ts: story.ts.endsWith("Z") ? story.ts : `${story.ts}Z`,
                            cluster: (0, _apitypes.isClusterStory)(story) ? story.cluster.map((clusterStory)=>(0, _utils.mapToISOTimestamp)(clusterStory)) : undefined
                        }))
                });
            }
        });
    });
    return (0, _reactquery.useQueries)({
        queries
    });
};
const useCurrentCQSPreview = ()=>{
    const { user } = (0, _clerkreact.useUser)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const { mutateAsync: putLastExecuted } = (0, _userdataqueries.useUpdateLastExecuted)();
    const { searchQuery, savedQuery } = (0, _QueryContext.useQueryContext)();
    const [_, setResultsPageState] = (0, _useResultsPageState.useResultsPageState)();
    const expression = (searchQuery === null || searchQuery === void 0 ? void 0 : searchQuery.expression) && (0, _apitypes.isRpqlLogicalGroup)(searchQuery === null || searchQuery === void 0 ? void 0 : searchQuery.expression) ? searchQuery === null || searchQuery === void 0 ? void 0 : searchQuery.expression.value[0] : undefined;
    const enabled = searchQuery !== undefined && (0, _cqsutils.cqsQueryLooksValid)(_object_spread_props(_object_spread({}, searchQuery), {
        expression
    }));
    const _useCQSPreview = useCQSPreview(searchQuery, "cqs-preview", {
        enabled,
        useClusterApi: true,
        onFirstPageFetched: (data)=>{
            if (savedQuery.ownerUserId === (user === null || user === void 0 ? void 0 : user.id)) {
                putLastExecuted(savedQuery.id);
                queryClient.invalidateQueries({
                    queryKey: [
                        "queries"
                    ]
                });
            }
            setResultsPageState(data.documentCount === 0 ? "empty" : "results");
        },
        onError: ()=>{
            setResultsPageState("empty");
        }
    }), { refetch: queryRefetch } = _useCQSPreview, rest = _object_without_properties(_useCQSPreview, [
        "refetch"
    ]);
    const refetch = (0, _react.useCallback)(()=>{
        setResultsPageState("loading");
        queryRefetch();
    }, [
        queryRefetch,
        setResultsPageState
    ]);
    return _object_spread_props(_object_spread({}, rest), {
        refetch,
        enabled
    });
};

//# sourceMappingURL=data:application/json;base64,