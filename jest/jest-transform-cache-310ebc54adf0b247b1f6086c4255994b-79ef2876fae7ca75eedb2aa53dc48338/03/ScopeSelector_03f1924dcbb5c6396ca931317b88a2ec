0ecd545fcb73b73b2daa4b7d22307323
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ScopeSelector", {
    enumerable: true,
    get: function() {
        return ScopeSelector;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _ScopeSelectorstyles = require("./ScopeSelector.styles");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const scopeTabs = [
    {
        label: "All",
        key: _apitypes.CqsQueryScopeEnum.All
    },
    {
        label: "News",
        key: _apitypes.CqsQueryScopeEnum.News,
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Public, {})
    },
    {
        label: "Transcripts",
        key: _apitypes.CqsQueryScopeEnum.Transcripts,
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Article, {})
    },
    {
        label: "Files",
        key: _apitypes.CqsQueryScopeEnum.Files,
        icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Description, {})
    }
];
function a11yProps(index) {
    return {
        id: `scope-tab-${index}`,
        "aria-controls": `scope-tabpanel-${index}`
    };
}
const ScopeSelector = ()=>{
    const tabParam = new URLSearchParams(window.location.search).get("tab");
    const val = scopeTabs.findIndex((scope)=>scope.key === tabParam);
    const [value, setValue] = (0, _react.useState)(val === -1 ? 0 : val);
    const replace = (0, _hooks.useReplaceSearchParam)();
    const { actions: { setScope } } = (0, _providers.useQueryContext)();
    (0, _react.useEffect)(()=>{
        setScope(scopeTabs[value].key);
    }, [
        value,
        setScope
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScopeSelectorstyles.ScopeSelectorRoot, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ScopeSelectorstyles.TabsStyled, {
            value: value,
            variant: "scrollable",
            onChange: (e, newValue)=>{
                setValue(newValue);
                replace(()=>newValue !== 0 ? scopeTabs[newValue].key : undefined);
            },
            "aria-label": "scope tabs",
            children: scopeTabs.map(({ label, icon }, i)=>{
                return /*#__PURE__*/ (0, _react.createElement)(_ScopeSelectorstyles.TabStyled, _object_spread_props(_object_spread({}, a11yProps(i)), {
                    key: i,
                    icon: icon,
                    iconPosition: "start",
                    label: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        variant: "body2",
                        textTransform: "none",
                        children: label
                    })
                }));
            })
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9yZXN1bHRzLXN0b3J5LWNhcmQvc3JjL1Njb3BlU2VsZWN0b3IvU2NvcGVTZWxlY3Rvci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RFbGVtZW50LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENxc1F1ZXJ5U2NvcGUsIENxc1F1ZXJ5U2NvcGVFbnVtIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IHVzZVJlcGxhY2VTZWFyY2hQYXJhbSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9ob29rc1wiXG4vLyBEYXRlXG5pbXBvcnQgeyB1c2VRdWVyeUNvbnRleHQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbi8vIENvbXBvbmVudHNcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5pbXBvcnQgeyBBcnRpY2xlLCBEZXNjcmlwdGlvbiwgUHVibGljIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2ljb25zXCJcbi8vIFN0eWxlc1xuaW1wb3J0IHsgU2NvcGVTZWxlY3RvclJvb3QsIFRhYlN0eWxlZCwgVGFic1N0eWxlZCB9IGZyb20gXCIuL1Njb3BlU2VsZWN0b3Iuc3R5bGVzXCJcblxudHlwZSBTY29wZVRhYiA9IHtcbiAgbGFiZWw6IENxc1F1ZXJ5U2NvcGVcbiAga2V5OiBDcXNRdWVyeVNjb3BlRW51bVxuICBpY29uPzogUmVhY3RFbGVtZW50XG59XG5cbmNvbnN0IHNjb3BlVGFiczogQXJyYXk8U2NvcGVUYWI+ID0gW1xuICB7IGxhYmVsOiBcIkFsbFwiLCBrZXk6IENxc1F1ZXJ5U2NvcGVFbnVtLkFsbCB9LFxuICB7IGxhYmVsOiBcIk5ld3NcIiwga2V5OiBDcXNRdWVyeVNjb3BlRW51bS5OZXdzLCBpY29uOiA8UHVibGljIC8+IH0sXG4gIHsgbGFiZWw6IFwiVHJhbnNjcmlwdHNcIiwga2V5OiBDcXNRdWVyeVNjb3BlRW51bS5UcmFuc2NyaXB0cywgaWNvbjogPEFydGljbGUgLz4gfSxcbiAgeyBsYWJlbDogXCJGaWxlc1wiLCBrZXk6IENxc1F1ZXJ5U2NvcGVFbnVtLkZpbGVzLCBpY29uOiA8RGVzY3JpcHRpb24gLz4gfSxcbl1cblxuZnVuY3Rpb24gYTExeVByb3BzKGluZGV4OiBudW1iZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogYHNjb3BlLXRhYi0ke2luZGV4fWAsXG4gICAgXCJhcmlhLWNvbnRyb2xzXCI6IGBzY29wZS10YWJwYW5lbC0ke2luZGV4fWAsXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNjb3BlU2VsZWN0b3IgPSAoKSA9PiB7XG4gIGNvbnN0IHRhYlBhcmFtID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKS5nZXQoXCJ0YWJcIilcbiAgY29uc3QgdmFsID0gc2NvcGVUYWJzLmZpbmRJbmRleChzY29wZSA9PiBzY29wZS5rZXkgPT09IHRhYlBhcmFtKVxuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlPG51bWJlcj4odmFsID09PSAtMSA/IDAgOiB2YWwpXG4gIGNvbnN0IHJlcGxhY2UgPSB1c2VSZXBsYWNlU2VhcmNoUGFyYW0oKVxuXG4gIGNvbnN0IHtcbiAgICBhY3Rpb25zOiB7IHNldFNjb3BlIH0sXG4gIH0gPSB1c2VRdWVyeUNvbnRleHQoKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0U2NvcGUoc2NvcGVUYWJzW3ZhbHVlXS5rZXkpXG4gIH0sIFt2YWx1ZSwgc2V0U2NvcGVdKVxuXG4gIHJldHVybiAoXG4gICAgPFNjb3BlU2VsZWN0b3JSb290PlxuICAgICAgPFRhYnNTdHlsZWRcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICB2YXJpYW50PVwic2Nyb2xsYWJsZVwiXG4gICAgICAgIG9uQ2hhbmdlPXsoZSwgbmV3VmFsdWU6IG51bWJlcikgPT4ge1xuICAgICAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKVxuICAgICAgICAgIHJlcGxhY2UoKCkgPT4gKG5ld1ZhbHVlICE9PSAwID8gc2NvcGVUYWJzW25ld1ZhbHVlXS5rZXkgOiB1bmRlZmluZWQpKVxuICAgICAgICB9fVxuICAgICAgICBhcmlhLWxhYmVsPVwic2NvcGUgdGFic1wiXG4gICAgICA+XG4gICAgICAgIHtzY29wZVRhYnMubWFwKCh7IGxhYmVsLCBpY29uIH0sIGkpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYlN0eWxlZFxuICAgICAgICAgICAgICB7Li4uYTExeVByb3BzKGkpfVxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIGljb249e2ljb259XG4gICAgICAgICAgICAgIGljb25Qb3NpdGlvbj1cInN0YXJ0XCJcbiAgICAgICAgICAgICAgbGFiZWw9e1xuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIHRleHRUcmFuc2Zvcm09XCJub25lXCI+XG4gICAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIClcbiAgICAgICAgfSl9XG4gICAgICA8L1RhYnNTdHlsZWQ+XG4gICAgPC9TY29wZVNlbGVjdG9yUm9vdD5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlNjb3BlU2VsZWN0b3IiLCJzY29wZVRhYnMiLCJsYWJlbCIsImtleSIsIkNxc1F1ZXJ5U2NvcGVFbnVtIiwiQWxsIiwiTmV3cyIsImljb24iLCJQdWJsaWMiLCJUcmFuc2NyaXB0cyIsIkFydGljbGUiLCJGaWxlcyIsIkRlc2NyaXB0aW9uIiwiYTExeVByb3BzIiwiaW5kZXgiLCJpZCIsInRhYlBhcmFtIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJ2YWwiLCJmaW5kSW5kZXgiLCJzY29wZSIsInZhbHVlIiwic2V0VmFsdWUiLCJ1c2VTdGF0ZSIsInJlcGxhY2UiLCJ1c2VSZXBsYWNlU2VhcmNoUGFyYW0iLCJhY3Rpb25zIiwic2V0U2NvcGUiLCJ1c2VRdWVyeUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJTY29wZVNlbGVjdG9yUm9vdCIsIlRhYnNTdHlsZWQiLCJ2YXJpYW50Iiwib25DaGFuZ2UiLCJlIiwibmV3VmFsdWUiLCJ1bmRlZmluZWQiLCJhcmlhLWxhYmVsIiwibWFwIiwiaSIsIlRhYlN0eWxlZCIsImljb25Qb3NpdGlvbiIsIlR5cG9ncmFwaHkiLCJ0ZXh0VHJhbnNmb3JtIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkErQmFBOzs7ZUFBQUE7Ozs7dUJBL0JxQzswQkFDRDt1QkFDWDsyQkFFTjtzQkFFTDt1QkFDa0I7cUNBRVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUXpELE1BQU1DLFlBQTZCO0lBQ2pDO1FBQUVDLE9BQU87UUFBT0MsS0FBS0MsMkJBQWlCLENBQUNDLEdBQUc7SUFBQztJQUMzQztRQUFFSCxPQUFPO1FBQVFDLEtBQUtDLDJCQUFpQixDQUFDRSxJQUFJO1FBQUVDLG9CQUFNLHFCQUFDQyxhQUFNO0lBQUk7SUFDL0Q7UUFBRU4sT0FBTztRQUFlQyxLQUFLQywyQkFBaUIsQ0FBQ0ssV0FBVztRQUFFRixvQkFBTSxxQkFBQ0csY0FBTztJQUFJO0lBQzlFO1FBQUVSLE9BQU87UUFBU0MsS0FBS0MsMkJBQWlCLENBQUNPLEtBQUs7UUFBRUosb0JBQU0scUJBQUNLLGtCQUFXO0lBQUk7Q0FDdkU7QUFFRCxTQUFTQyxVQUFVQyxLQUFhO0lBQzlCLE9BQU87UUFDTEMsSUFBSSxDQUFDLFVBQVUsRUFBRUQsTUFBTSxDQUFDO1FBQ3hCLGlCQUFpQixDQUFDLGVBQWUsRUFBRUEsTUFBTSxDQUFDO0lBQzVDO0FBQ0Y7QUFFTyxNQUFNZCxnQkFBZ0I7SUFDM0IsTUFBTWdCLFdBQVcsSUFBSUMsZ0JBQWdCQyxPQUFPQyxRQUFRLENBQUNDLE1BQU0sRUFBRUMsR0FBRyxDQUFDO0lBQ2pFLE1BQU1DLE1BQU1yQixVQUFVc0IsU0FBUyxDQUFDQyxDQUFBQSxRQUFTQSxNQUFNckIsR0FBRyxLQUFLYTtJQUN2RCxNQUFNLENBQUNTLE9BQU9DLFNBQVMsR0FBR0MsSUFBQUEsZUFBUSxFQUFTTCxRQUFRLENBQUMsSUFBSSxJQUFJQTtJQUM1RCxNQUFNTSxVQUFVQyxJQUFBQSw0QkFBcUI7SUFFckMsTUFBTSxFQUNKQyxTQUFTLEVBQUVDLFFBQVEsRUFBRSxFQUN0QixHQUFHQyxJQUFBQSwwQkFBZTtJQUVuQkMsSUFBQUEsZ0JBQVMsRUFBQztRQUNSRixTQUFTOUIsU0FBUyxDQUFDd0IsTUFBTSxDQUFDdEIsR0FBRztJQUMvQixHQUFHO1FBQUNzQjtRQUFPTTtLQUFTO0lBRXBCLHFCQUNFLHFCQUFDRyxzQ0FBaUI7a0JBQ2hCLGNBQUEscUJBQUNDLCtCQUFVO1lBQ1RWLE9BQU9BO1lBQ1BXLFNBQVE7WUFDUkMsVUFBVSxDQUFDQyxHQUFHQztnQkFDWmIsU0FBU2E7Z0JBQ1RYLFFBQVEsSUFBT1csYUFBYSxJQUFJdEMsU0FBUyxDQUFDc0MsU0FBUyxDQUFDcEMsR0FBRyxHQUFHcUM7WUFDNUQ7WUFDQUMsY0FBVztzQkFFVnhDLFVBQVV5QyxHQUFHLENBQUMsQ0FBQyxFQUFFeEMsS0FBSyxFQUFFSyxJQUFJLEVBQUUsRUFBRW9DO2dCQUMvQixxQkFDRSwwQkFBQ0MsOEJBQVMsMENBQ0ovQixVQUFVOEI7b0JBQ2R4QyxLQUFLd0M7b0JBQ0xwQyxNQUFNQTtvQkFDTnNDLGNBQWE7b0JBQ2IzQyxxQkFDRSxxQkFBQzRDLGdCQUFVO3dCQUFDVixTQUFRO3dCQUFRVyxlQUFjO2tDQUN2QzdDOzs7WUFLWDs7O0FBSVIifQ==