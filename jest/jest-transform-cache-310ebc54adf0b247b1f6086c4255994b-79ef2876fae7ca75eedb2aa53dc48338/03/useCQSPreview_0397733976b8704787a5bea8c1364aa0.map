{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/providers/src/useCQSPreview.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo } from \"react\"\nimport { useUser } from \"@clerk/clerk-react\"\nimport {\n  CqsChunkStory,\n  CqsClusterSummaryStory,\n  CqsQueryChunksPostResponse,\n  CqsQueryClustersPostResponse,\n  CqsQueryPostResponse,\n  CqsSearchQuery,\n  CqsStory,\n  isClusterStory,\n  isRpqlLogicalGroup,\n} from \"@rp/common/api-types\"\nimport { DEFAULT_QUERY_LIMIT, QUERY_KEY_FEATURE_FLAG } from \"@rp/common/settings\"\nimport { mapToISOTimestamp } from \"@rp/common/utils\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { useUpdateLastExecuted } from \"@rp/react/tanstack-api/user-data-queries\"\nimport { cqsQueryLooksValid } from \"@rp/react/web/cqs-utils\"\nimport {\n  QueryFunctionContext,\n  keepPreviousData,\n  queryOptions,\n  useInfiniteQuery,\n  useQueries,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useQueryContext } from \"./QueryContext\"\nimport { useResultsPageState } from \"./useResultsPageState\"\n\n// Helper functions\nconst previewKey = (key: string, search?: CqsSearchQuery, useClusterApi?: boolean) =>\n  [QUERY_KEY_FEATURE_FLAG, key, { ...search }, useClusterApi ?? false] as const\n\n// Hook that appends the flags context into the query key function\nconst useCqsPreviewKey = () => {\n  return (key: string, search: CqsSearchQuery | undefined, useClusterAPI: boolean | undefined) => {\n    return previewKey(key, search, useClusterAPI)\n  }\n}\n\ntype FetchParams = QueryFunctionContext<ReturnType<typeof previewKey>> & { pageParam?: number }\n\nconst fetchSearchPreview = async (\n  { pageParam, queryKey }: FetchParams,\n  onFirstPageFetch: () => void,\n  onFirstPageFetched: (data: CqsQueryPostResponse | CqsQueryClustersPostResponse) => void,\n): Promise<CqsQueryPostResponse | CqsQueryClustersPostResponse | undefined> => {\n  const [, , search, useClusterApi] = queryKey\n  const firstPage = pageParam === 1 || pageParam === undefined\n  const numberOfResults = DEFAULT_QUERY_LIMIT\n\n  if (firstPage) {\n    onFirstPageFetch()\n  }\n\n  if (search === undefined) return\n  const query: CqsSearchQuery = {\n    ...search,\n    pagination: { limit: numberOfResults, cursor: pageParam },\n    hybrid: true,\n    searchChain: useClusterApi ? \"clustering\" : undefined,\n  }\n\n  const { data } = await axiosClient.post<CqsQueryChunksPostResponse>(\"/cqs/query-chunks\", query)\n  if (firstPage) onFirstPageFetched(data)\n  return data\n}\n\nconst getStoriesFromPages = (\n  pages: Array<\n    CqsQueryPostResponse | CqsQueryClustersPostResponse | CqsQueryChunksPostResponse | undefined\n  >,\n) => {\n  const storiesObject = pages.reduce(\n    (acc: Record<string, CqsStory | CqsClusterSummaryStory | CqsChunkStory>, page) => {\n      if (!page) {\n        return acc\n      }\n\n      // We are checking if the ID is already in. Only different IDs allowed\n      const accumulator = { ...acc }\n      for (const story of page.stories) {\n        accumulator[story.id] = accumulator[story.id]\n          ? accumulator[story.id]\n          : // We format the timestamp so it contains timezone info\n            {\n              ...story,\n              ts: story.ts.endsWith(\"Z\") ? story.ts : `${story.ts}Z`,\n              cluster: isClusterStory(story)\n                ? story.cluster.map(clusterStory => mapToISOTimestamp(clusterStory))\n                : undefined,\n            }\n      }\n\n      return accumulator\n    },\n    {},\n  )\n\n  return Object.values(storiesObject)\n}\n\nconst useCQSPreview = (\n  search: CqsSearchQuery | undefined,\n  key: string,\n  options: {\n    enabled?: boolean\n    useClusterApi?: boolean\n    queryOptions?: Record<string, unknown>\n    onFirstPageFetch?: () => void\n    onFirstPageFetched?: (data: CqsQueryPostResponse | CqsQueryClustersPostResponse) => void\n    isFeedRequest?: boolean\n    onError?: () => void\n  } = {\n    enabled: true,\n    useClusterApi: true,\n    queryOptions: {},\n    isFeedRequest: false,\n  },\n) => {\n  const getCqsPreviewKey = useCqsPreviewKey()\n\n  const onFirstPageFetch = () => {\n    if (options.onFirstPageFetch) {\n      options.onFirstPageFetch()\n    }\n  }\n  const onFirstPageFetched = (data: CqsQueryPostResponse | CqsQueryClustersPostResponse) => {\n    options.onFirstPageFetched?.(data)\n  }\n\n  const queryRes = useInfiniteQuery({\n    // eslint-disable-next-line @tanstack/query/exhaustive-deps\n    queryKey: getCqsPreviewKey(key, search, options.useClusterApi),\n    queryFn: (params: FetchParams) => {\n      return fetchSearchPreview(params, onFirstPageFetch, onFirstPageFetched)\n    },\n    placeholderData: keepPreviousData,\n    staleTime: 0,\n    refetchOnWindowFocus: false,\n    enabled: options.enabled,\n    getNextPageParam: lastPage => lastPage?.nextCursor,\n    ...options.queryOptions,\n    initialPageParam: 1,\n  })\n\n  const { onError } = options\n\n  useEffect(() => {\n    if (queryRes.isError) {\n      onError?.()\n    }\n  }, [onError, queryRes.isError])\n\n  const rest = queryRes.data ? queryRes.data.pages[0] : {}\n\n  const stories = useMemo(\n    () => (queryRes.data ? getStoriesFromPages(queryRes.data.pages) : []),\n    [queryRes.data],\n  )\n\n  const defaults = {\n    coverage: queryRes.data?.pages[0]?.coverage,\n    documentCount: 0,\n  }\n\n  return {\n    ...defaults,\n    ...rest,\n    ...queryRes,\n    stories,\n    numOfPages: queryRes.data?.pages.length ?? 0,\n  }\n}\n\nconst useMultipleCQSPreviews = (\n  searches: Array<CqsSearchQuery | undefined>,\n  options: { useClusterAPI?: boolean; isChunksActive?: boolean },\n) => {\n  const getCqsPreviewKey = useCqsPreviewKey()\n\n  const queries = searches.map(search => {\n    return queryOptions({\n      queryKey: getCqsPreviewKey(\"cqs-multi\", search, options.useClusterAPI),\n      queryFn: params =>\n        fetchSearchPreview(\n          { ...params, pageParam: 1 },\n          () => {},\n          () => {},\n        ),\n      placeholderData: prev => prev, // Prevent loading state when re-fetching\n      staleTime: 0,\n      refetchOnWindowFocus: false,\n      enabled: search !== undefined,\n      select: (data: CqsQueryPostResponse | CqsQueryClustersPostResponse | undefined) => {\n        if (!data) {\n          return data\n        }\n\n        return {\n          ...data,\n          stories: data.stories.map(story => ({\n            ...story,\n            ts: story.ts.endsWith(\"Z\") ? story.ts : `${story.ts}Z`,\n            cluster: isClusterStory(story)\n              ? story.cluster.map(clusterStory => mapToISOTimestamp(clusterStory))\n              : undefined,\n          })),\n        }\n      },\n    })\n  })\n\n  return useQueries({ queries })\n}\n\nconst useCurrentCQSPreview = () => {\n  const { user } = useUser()\n  const queryClient = useQueryClient()\n  const { mutateAsync: putLastExecuted } = useUpdateLastExecuted()\n\n  const { searchQuery, savedQuery } = useQueryContext()\n\n  const [_, setResultsPageState] = useResultsPageState()\n\n  const expression =\n    searchQuery?.expression && isRpqlLogicalGroup(searchQuery?.expression)\n      ? searchQuery?.expression.value[0]\n      : undefined\n  const enabled = searchQuery !== undefined && cqsQueryLooksValid({ ...searchQuery, expression })\n\n  const { refetch: queryRefetch, ...rest } = useCQSPreview(searchQuery, \"cqs-preview\", {\n    enabled,\n    useClusterApi: true,\n    onFirstPageFetched: (data: CqsQueryPostResponse | CqsQueryClustersPostResponse) => {\n      if (savedQuery.ownerUserId === user?.id) {\n        putLastExecuted(savedQuery.id)\n        queryClient.invalidateQueries({\n          queryKey: [\"queries\"],\n        })\n      }\n      setResultsPageState(data.documentCount === 0 ? \"empty\" : \"results\")\n    },\n    onError: () => {\n      setResultsPageState(\"empty\")\n    },\n  })\n\n  const refetch = useCallback(() => {\n    setResultsPageState(\"loading\")\n    queryRefetch()\n  }, [queryRefetch, setResultsPageState])\n  return { ...rest, refetch, enabled }\n}\n\nexport { useCQSPreview, useCurrentCQSPreview, useMultipleCQSPreviews }\n"],"names":["useCQSPreview","useCurrentCQSPreview","useMultipleCQSPreviews","previewKey","key","search","useClusterApi","QUERY_KEY_FEATURE_FLAG","useCqsPreviewKey","useClusterAPI","fetchSearchPreview","pageParam","queryKey","onFirstPageFetch","onFirstPageFetched","firstPage","undefined","numberOfResults","DEFAULT_QUERY_LIMIT","query","pagination","limit","cursor","hybrid","searchChain","data","axiosClient","post","getStoriesFromPages","pages","storiesObject","reduce","acc","page","accumulator","story","stories","id","ts","endsWith","cluster","isClusterStory","map","clusterStory","mapToISOTimestamp","Object","values","options","enabled","queryOptions","isFeedRequest","queryRes","getCqsPreviewKey","useInfiniteQuery","queryFn","params","placeholderData","keepPreviousData","staleTime","refetchOnWindowFocus","getNextPageParam","lastPage","nextCursor","initialPageParam","onError","useEffect","isError","rest","useMemo","defaults","coverage","documentCount","numOfPages","length","searches","queries","prev","select","useQueries","user","useUser","queryClient","useQueryClient","mutateAsync","putLastExecuted","useUpdateLastExecuted","searchQuery","savedQuery","useQueryContext","_","setResultsPageState","useResultsPageState","expression","isRpqlLogicalGroup","value","cqsQueryLooksValid","ownerUserId","invalidateQueries","refetch","queryRefetch","useCallback"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}