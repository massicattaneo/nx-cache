{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n"],"names":["gfmAutolinkLiteral","wwwPrefix","tokenize","tokenizeWwwPrefix","partial","domain","tokenizeDomain","path","tokenizePath","trail","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previous","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","text","code","effects","ok","nok","self","dot","data","start","gfmAtext","call","previousUnbalanced","events","enter","atext","consume","emailDomain","check","emailDomainAfter","emailDomainDot","asciiAlphanumeric","asciiAlpha","exit","wwwStart","attempt","wwwAfter","buffer","seen","protocolStart","String","fromCodePoint","protocolPrefixInside","length","protocol","toLowerCase","protocolSlashesInside","afterProtocol","asciiControl","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","protocolAfter","size","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","undefined","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","after","index","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}