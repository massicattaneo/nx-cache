{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/label-start-image.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isnâ€™t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"],"names":["labelStartImage","name","tokenize","tokenizeLabelStartImage","resolveAll","labelEnd","effects","ok","nok","self","start","code","enter","consume","exit","open","after","parser","constructs"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAKYA;;;eAAAA;;;0BAHU;AAGhB,MAAMA,kBAAkB;IAC7BC,MAAM;IACNC,UAAUC;IACVC,YAAYC,kBAAQ,CAACD,UAAU;AACjC;AAEA;;;CAGC,GACD,SAASD,wBAAwBG,OAAO,EAAEC,EAAE,EAAEC,GAAG;IAC/C,MAAMC,OAAO,IAAI;IACjB,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,MAAMC,IAAI;QACjBL,QAAQM,KAAK,CAAC;QACdN,QAAQM,KAAK,CAAC;QACdN,QAAQO,OAAO,CAACF;QAChBL,QAAQQ,IAAI,CAAC;QACb,OAAOC;IACT;IAEA;;;;;;;;;GASC,GACD,SAASA,KAAKJ,IAAI;QAChB,IAAIA,SAAS,IAAI;YACfL,QAAQM,KAAK,CAAC;YACdN,QAAQO,OAAO,CAACF;YAChBL,QAAQQ,IAAI,CAAC;YACbR,QAAQQ,IAAI,CAAC;YACb,OAAOE;QACT;QACA,OAAOR,IAAIG;IACb;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BC,GACD,SAASK,MAAML,IAAI;QACjB,8DAA8D;QAC9D,iEAAiE;QACjE,kBAAkB;QAClB,yBAAyB;QACzB,oBAAoB,GACpB,OAAOA,SAAS,MAAM,4BAA4BF,KAAKQ,MAAM,CAACC,UAAU,GACpEV,IAAIG,QACJJ,GAAGI;IACT;AACF"}