081803ca9f7d651d2a128afd9aa23b3c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useValidatePasswords", {
    enumerable: true,
    get: function() {
        return useValidatePasswords;
    }
});
const _react = require("react");
const initialState = {
    properLength: false,
    containsNumbers: false,
    containsUpperLower: false,
    containsSpecial: false,
    matchPasswords: false,
    containsUpper: false,
    containsLower: false
};
const checkLength = (string)=>{
    return string.length >= 12;
};
const containsNumbers = (string)=>{
    const regex = /\d/g;
    return regex.test(string);
};
const containsUpperLower = (string)=>{
    const regex = /(?=.*[a-z])(?=.*[A-Z])/g;
    return regex.test(string);
};
const containsUpper = (string)=>{
    const regex = /(?=.*[A-Z])/g;
    return regex.test(string);
};
const containsLower = (string)=>{
    const regex = /(?=.*[a-z])/g;
    return regex.test(string);
};
const containsSpecial = (string)=>{
    const chars = " !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~".split("");
    const regex = new RegExp("[" + chars.join("\\") + "]", "g");
    return regex.test(string);
};
const useValidatePasswords = (newPassword, confirmPassword)=>{
    const [validation, setValidation] = (0, _react.useState)(initialState);
    const resetValidationState = ()=>{
        setValidation(initialState);
    };
    (0, _react.useEffect)(()=>{
        const properLength = checkLength(newPassword);
        const isNumber = containsNumbers(newPassword);
        const isUpperLower = containsUpperLower(newPassword);
        const isUpper = containsUpper(newPassword);
        const isLower = containsLower(newPassword);
        const isSpecial = containsSpecial(newPassword);
        const matchPasswords = properLength && isNumber && isUpperLower && isUpper && isLower && isSpecial && newPassword === confirmPassword;
        setValidation({
            properLength,
            containsNumbers: isNumber,
            containsUpperLower: isUpperLower,
            containsUpper: isUpper,
            containsLower: isLower,
            containsSpecial: isSpecial,
            matchPasswords
        });
    }, [
        newPassword,
        confirmPassword
    ]);
    return {
        validation,
        resetValidationState
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlVmFsaWRhdGVQYXNzd29yZHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuXG5leHBvcnQgdHlwZSBWYWxpZGF0aW9uVHlwZSA9IHtcbiAgcHJvcGVyTGVuZ3RoOiBib29sZWFuXG4gIGNvbnRhaW5zTnVtYmVyczogYm9vbGVhblxuICBjb250YWluc1VwcGVyTG93ZXI6IGJvb2xlYW5cbiAgY29udGFpbnNTcGVjaWFsOiBib29sZWFuXG4gIG1hdGNoUGFzc3dvcmRzOiBib29sZWFuXG4gIGNvbnRhaW5zVXBwZXI6IGJvb2xlYW5cbiAgY29udGFpbnNMb3dlcjogYm9vbGVhblxufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IFZhbGlkYXRpb25UeXBlID0ge1xuICBwcm9wZXJMZW5ndGg6IGZhbHNlLFxuICBjb250YWluc051bWJlcnM6IGZhbHNlLFxuICBjb250YWluc1VwcGVyTG93ZXI6IGZhbHNlLFxuICBjb250YWluc1NwZWNpYWw6IGZhbHNlLFxuICBtYXRjaFBhc3N3b3JkczogZmFsc2UsXG4gIGNvbnRhaW5zVXBwZXI6IGZhbHNlLFxuICBjb250YWluc0xvd2VyOiBmYWxzZSxcbn1cblxuY29uc3QgY2hlY2tMZW5ndGggPSAoc3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPj0gMTJcbn1cblxuY29uc3QgY29udGFpbnNOdW1iZXJzID0gKHN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gL1xcZC9nXG4gIHJldHVybiByZWdleC50ZXN0KHN0cmluZylcbn1cblxuY29uc3QgY29udGFpbnNVcHBlckxvd2VyID0gKHN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gLyg/PS4qW2Etel0pKD89LipbQS1aXSkvZ1xuICByZXR1cm4gcmVnZXgudGVzdChzdHJpbmcpXG59XG5cbmNvbnN0IGNvbnRhaW5zVXBwZXIgPSAoc3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcmVnZXggPSAvKD89LipbQS1aXSkvZ1xuICByZXR1cm4gcmVnZXgudGVzdChzdHJpbmcpXG59XG5cbmNvbnN0IGNvbnRhaW5zTG93ZXIgPSAoc3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcmVnZXggPSAvKD89LipbYS16XSkvZ1xuICByZXR1cm4gcmVnZXgudGVzdChzdHJpbmcpXG59XG5cbmNvbnN0IGNvbnRhaW5zU3BlY2lhbCA9IChzdHJpbmc6IHN0cmluZykgPT4ge1xuICBjb25zdCBjaGFycyA9IFwiICFcXFwiIyQlJicoKSorLC0uLzo7PD0+P0BbXFxcXF1eX2B7fH1+XCIuc3BsaXQoXCJcIilcbiAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKFwiW1wiICsgY2hhcnMuam9pbihcIlxcXFxcIikgKyBcIl1cIiwgXCJnXCIpXG4gIHJldHVybiByZWdleC50ZXN0KHN0cmluZylcbn1cblxuY29uc3QgdXNlVmFsaWRhdGVQYXNzd29yZHMgPSAobmV3UGFzc3dvcmQ6IHN0cmluZywgY29uZmlybVBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgW3ZhbGlkYXRpb24sIHNldFZhbGlkYXRpb25dID0gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKVxuXG4gIGNvbnN0IHJlc2V0VmFsaWRhdGlvblN0YXRlID0gKCkgPT4ge1xuICAgIHNldFZhbGlkYXRpb24oaW5pdGlhbFN0YXRlKVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBwcm9wZXJMZW5ndGggPSBjaGVja0xlbmd0aChuZXdQYXNzd29yZClcbiAgICBjb25zdCBpc051bWJlciA9IGNvbnRhaW5zTnVtYmVycyhuZXdQYXNzd29yZClcbiAgICBjb25zdCBpc1VwcGVyTG93ZXIgPSBjb250YWluc1VwcGVyTG93ZXIobmV3UGFzc3dvcmQpXG4gICAgY29uc3QgaXNVcHBlciA9IGNvbnRhaW5zVXBwZXIobmV3UGFzc3dvcmQpXG4gICAgY29uc3QgaXNMb3dlciA9IGNvbnRhaW5zTG93ZXIobmV3UGFzc3dvcmQpXG4gICAgY29uc3QgaXNTcGVjaWFsID0gY29udGFpbnNTcGVjaWFsKG5ld1Bhc3N3b3JkKVxuICAgIGNvbnN0IG1hdGNoUGFzc3dvcmRzID1cbiAgICAgIHByb3Blckxlbmd0aCAmJlxuICAgICAgaXNOdW1iZXIgJiZcbiAgICAgIGlzVXBwZXJMb3dlciAmJlxuICAgICAgaXNVcHBlciAmJlxuICAgICAgaXNMb3dlciAmJlxuICAgICAgaXNTcGVjaWFsICYmXG4gICAgICBuZXdQYXNzd29yZCA9PT0gY29uZmlybVBhc3N3b3JkXG5cbiAgICBzZXRWYWxpZGF0aW9uKHtcbiAgICAgIHByb3Blckxlbmd0aCxcbiAgICAgIGNvbnRhaW5zTnVtYmVyczogaXNOdW1iZXIsXG4gICAgICBjb250YWluc1VwcGVyTG93ZXI6IGlzVXBwZXJMb3dlcixcbiAgICAgIGNvbnRhaW5zVXBwZXI6IGlzVXBwZXIsXG4gICAgICBjb250YWluc0xvd2VyOiBpc0xvd2VyLFxuICAgICAgY29udGFpbnNTcGVjaWFsOiBpc1NwZWNpYWwsXG4gICAgICBtYXRjaFBhc3N3b3JkcyxcbiAgICB9KVxuICB9LCBbbmV3UGFzc3dvcmQsIGNvbmZpcm1QYXNzd29yZF0pXG5cbiAgcmV0dXJuIHsgdmFsaWRhdGlvbiwgcmVzZXRWYWxpZGF0aW9uU3RhdGUgfVxufVxuXG5leHBvcnQgeyB1c2VWYWxpZGF0ZVBhc3N3b3JkcyB9XG4iXSwibmFtZXMiOlsidXNlVmFsaWRhdGVQYXNzd29yZHMiLCJpbml0aWFsU3RhdGUiLCJwcm9wZXJMZW5ndGgiLCJjb250YWluc051bWJlcnMiLCJjb250YWluc1VwcGVyTG93ZXIiLCJjb250YWluc1NwZWNpYWwiLCJtYXRjaFBhc3N3b3JkcyIsImNvbnRhaW5zVXBwZXIiLCJjb250YWluc0xvd2VyIiwiY2hlY2tMZW5ndGgiLCJzdHJpbmciLCJsZW5ndGgiLCJyZWdleCIsInRlc3QiLCJjaGFycyIsInNwbGl0IiwiUmVnRXhwIiwiam9pbiIsIm5ld1Bhc3N3b3JkIiwiY29uZmlybVBhc3N3b3JkIiwidmFsaWRhdGlvbiIsInNldFZhbGlkYXRpb24iLCJ1c2VTdGF0ZSIsInJlc2V0VmFsaWRhdGlvblN0YXRlIiwidXNlRWZmZWN0IiwiaXNOdW1iZXIiLCJpc1VwcGVyTG93ZXIiLCJpc1VwcGVyIiwiaXNMb3dlciIsImlzU3BlY2lhbCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF5RlNBOzs7ZUFBQUE7Ozt1QkF6RjJCO0FBWXBDLE1BQU1DLGVBQStCO0lBQ25DQyxjQUFjO0lBQ2RDLGlCQUFpQjtJQUNqQkMsb0JBQW9CO0lBQ3BCQyxpQkFBaUI7SUFDakJDLGdCQUFnQjtJQUNoQkMsZUFBZTtJQUNmQyxlQUFlO0FBQ2pCO0FBRUEsTUFBTUMsY0FBYyxDQUFDQztJQUNuQixPQUFPQSxPQUFPQyxNQUFNLElBQUk7QUFDMUI7QUFFQSxNQUFNUixrQkFBa0IsQ0FBQ087SUFDdkIsTUFBTUUsUUFBUTtJQUNkLE9BQU9BLE1BQU1DLElBQUksQ0FBQ0g7QUFDcEI7QUFFQSxNQUFNTixxQkFBcUIsQ0FBQ007SUFDMUIsTUFBTUUsUUFBUTtJQUNkLE9BQU9BLE1BQU1DLElBQUksQ0FBQ0g7QUFDcEI7QUFFQSxNQUFNSCxnQkFBZ0IsQ0FBQ0c7SUFDckIsTUFBTUUsUUFBUTtJQUNkLE9BQU9BLE1BQU1DLElBQUksQ0FBQ0g7QUFDcEI7QUFFQSxNQUFNRixnQkFBZ0IsQ0FBQ0U7SUFDckIsTUFBTUUsUUFBUTtJQUNkLE9BQU9BLE1BQU1DLElBQUksQ0FBQ0g7QUFDcEI7QUFFQSxNQUFNTCxrQkFBa0IsQ0FBQ0s7SUFDdkIsTUFBTUksUUFBUSxzQ0FBc0NDLEtBQUssQ0FBQztJQUMxRCxNQUFNSCxRQUFRLElBQUlJLE9BQU8sTUFBTUYsTUFBTUcsSUFBSSxDQUFDLFFBQVEsS0FBSztJQUN2RCxPQUFPTCxNQUFNQyxJQUFJLENBQUNIO0FBQ3BCO0FBRUEsTUFBTVYsdUJBQXVCLENBQUNrQixhQUFxQkM7SUFDakQsTUFBTSxDQUFDQyxZQUFZQyxjQUFjLEdBQUdDLElBQUFBLGVBQVEsRUFBQ3JCO0lBRTdDLE1BQU1zQix1QkFBdUI7UUFDM0JGLGNBQWNwQjtJQUNoQjtJQUVBdUIsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU10QixlQUFlTyxZQUFZUztRQUNqQyxNQUFNTyxXQUFXdEIsZ0JBQWdCZTtRQUNqQyxNQUFNUSxlQUFldEIsbUJBQW1CYztRQUN4QyxNQUFNUyxVQUFVcEIsY0FBY1c7UUFDOUIsTUFBTVUsVUFBVXBCLGNBQWNVO1FBQzlCLE1BQU1XLFlBQVl4QixnQkFBZ0JhO1FBQ2xDLE1BQU1aLGlCQUNKSixnQkFDQXVCLFlBQ0FDLGdCQUNBQyxXQUNBQyxXQUNBQyxhQUNBWCxnQkFBZ0JDO1FBRWxCRSxjQUFjO1lBQ1puQjtZQUNBQyxpQkFBaUJzQjtZQUNqQnJCLG9CQUFvQnNCO1lBQ3BCbkIsZUFBZW9CO1lBQ2ZuQixlQUFlb0I7WUFDZnZCLGlCQUFpQndCO1lBQ2pCdkI7UUFDRjtJQUNGLEdBQUc7UUFBQ1k7UUFBYUM7S0FBZ0I7SUFFakMsT0FBTztRQUFFQztRQUFZRztJQUFxQjtBQUM1QyJ9