{"version":3,"sources":["../src/telemetry.ts","../src/isomorphicAtob.ts","../src/keys.ts","../src/underscore.ts","../src/telemetry/throttler.ts","../src/telemetry/collector.ts","../src/telemetry/events/component-mounted.ts","../src/telemetry/events/method-called.ts"],"sourcesContent":["export { TelemetryCollector } from './telemetry/collector';\nexport type { TelemetryCollectorOptions } from './telemetry/types';\n\nexport * from './telemetry/events';\n","/**\n * A function that decodes a string of data which has been encoded using base-64 encoding.\n * Uses `atob` if available, otherwise uses `Buffer` from `global`. If neither are available, returns the data as-is.\n */\nexport const isomorphicAtob = (data: string) => {\n  if (typeof atob !== 'undefined' && typeof atob === 'function') {\n    return atob(data);\n  } else if (typeof global !== 'undefined' && global.Buffer) {\n    return new global.Buffer(data, 'base64').toString();\n  }\n  return data;\n};\n","import type { PublishableKey } from '@clerk/types';\n\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isomorphicAtob } from './isomorphicAtob';\nimport { isomorphicBtoa } from './isomorphicBtoa';\n\ntype ParsePublishableKeyOptions = {\n  fatal?: boolean;\n  domain?: string;\n  proxyUrl?: string;\n};\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const isDevKey =\n    PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ||\n    (frontendApi.startsWith('clerk.') && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s)));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: ParsePublishableKeyOptions & { fatal: true },\n): PublishableKey;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options?: ParsePublishableKeyOptions,\n): PublishableKey | null;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: { fatal?: boolean; domain?: string; proxyUrl?: string } = {},\n): PublishableKey | null {\n  key = key || '';\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal && !key) {\n      throw new Error(\n        'Publishable key is missing. Ensure that your publishable key is correctly configured. Double-check your environment configuration for your keys, or access them here: https://dashboard.clerk.com/last-active?path=api-keys',\n      );\n    }\n    if (options.fatal && !isPublishableKey(key)) {\n      throw new Error('Publishable key not valid.');\n    }\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  // TODO(@dimkl): validate packages/clerk-js/src/utils/instance.ts\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== 'development' && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\n/**\n * Checks if the provided key is a valid publishable key.\n *\n * @param key - The key to be checked. Defaults to an empty string if not provided.\n * @returns `true` if 'key' is a valid publishable key, `false` otherwise.\n */\nexport function isPublishableKey(key: string = '') {\n  try {\n    const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n    const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n    return hasValidPrefix && hasValidFrontendApiPostfix;\n  } catch {\n    return false;\n  }\n}\n\nexport function createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('pk_test_');\n}\n\nexport function isProductionFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('pk_live_');\n}\n\nexport function isDevelopmentFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n\nexport async function getCookieSuffix(\n  publishableKey: string,\n  subtle: SubtleCrypto = globalThis.crypto.subtle,\n): Promise<string> {\n  const data = new TextEncoder().encode(publishableKey);\n  const digest = await subtle.digest('sha-1', data);\n  const stringDigest = String.fromCharCode(...new Uint8Array(digest));\n  // Base 64 Encoding with URL and Filename Safe Alphabet: https://datatracker.ietf.org/doc/html/rfc4648#section-5\n  return isomorphicBtoa(stringDigest).replace(/\\+/gi, '-').replace(/\\//gi, '_').substring(0, 8);\n}\n\nexport const getSuffixedCookieName = (cookieName: string, cookieSuffix: string): string => {\n  return `${cookieName}_${cookieSuffix}`;\n};\n","/**\n * Converts an array of strings to a comma-separated sentence\n * @param items {Array<string>}\n * @returns {string} Returns a string with the items joined by a comma and the last item joined by \", or\"\n */\nexport const toSentence = (items: string[]): string => {\n  // TODO: Once Safari supports it, use Intl.ListFormat\n  if (items.length == 0) {\n    return '';\n  }\n  if (items.length == 1) {\n    return items[0];\n  }\n  let sentence = items.slice(0, -1).join(', ');\n  sentence += `, or ${items.slice(-1)}`;\n  return sentence;\n};\n\nconst IP_V4_ADDRESS_REGEX =\n  /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\nexport function isIPV4Address(str: string | undefined | null): boolean {\n  return IP_V4_ADDRESS_REGEX.test(str || '');\n}\n\nexport function titleize(str: string | undefined | null): string {\n  const s = str || '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport function snakeToCamel(str: string | undefined): string {\n  return str ? str.replace(/([-_][a-z])/g, match => match.toUpperCase().replace(/-|_/, '')) : '';\n}\n\nexport function camelToSnake(str: string | undefined): string {\n  return str ? str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`) : '';\n}\n\nconst createDeepObjectTransformer = (transform: any) => {\n  const deepTransform = (obj: any): any => {\n    if (!obj) {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(el => {\n        if (typeof el === 'object' || Array.isArray(el)) {\n          return deepTransform(el);\n        }\n        return el;\n      });\n    }\n\n    const copy = { ...obj };\n    const keys = Object.keys(copy);\n    for (const oldName of keys) {\n      const newName = transform(oldName.toString());\n      if (newName !== oldName) {\n        copy[newName] = copy[oldName];\n        delete copy[oldName];\n      }\n      if (typeof copy[newName] === 'object') {\n        copy[newName] = deepTransform(copy[newName]);\n      }\n    }\n    return copy;\n  };\n\n  return deepTransform;\n};\n\n/**\n * Transforms camelCased objects/ arrays to snake_cased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepCamelToSnake = createDeepObjectTransformer(camelToSnake);\n\n/**\n * Transforms snake_cased objects/ arrays to camelCased.\n * This function recursively traverses all objects and arrays of the passed value\n * camelCased keys are removed.\n */\nexport const deepSnakeToCamel = createDeepObjectTransformer(snakeToCamel);\n\n/**\n * Returns true for `true`, true, positive numbers.\n * Returns false for `false`, false, 0, negative integers and anything else.\n */\nexport function isTruthy(value: unknown): boolean {\n  // Return if Boolean\n  if (typeof value === `boolean`) {\n    return value;\n  }\n\n  // Return false if null or undefined\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  // If the String is true or false\n  if (typeof value === `string`) {\n    if (value.toLowerCase() === `true`) {\n      return true;\n    }\n\n    if (value.toLowerCase() === `false`) {\n      return false;\n    }\n  }\n\n  // Now check if it's a number\n  const number = parseInt(value as string, 10);\n  if (isNaN(number)) {\n    return false;\n  }\n\n  if (number > 0) {\n    return true;\n  }\n\n  // Default to false\n  return false;\n}\n\nexport function getNonUndefinedValues<T extends object>(obj: T): Partial<T> {\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (value !== undefined) {\n      acc[key as keyof T] = value;\n    }\n    return acc;\n  }, {} as Partial<T>);\n}\n","import type { TelemetryEvent } from '@clerk/types';\n\ntype TtlInMilliseconds = number;\n\nconst DEFAULT_CACHE_TTL_MS = 86400000; // 24 hours\n\n/**\n * Manages throttling for telemetry events using the browser's localStorage to\n * mitigate event flooding in frequently executed code paths.\n */\nexport class TelemetryEventThrottler {\n  #storageKey = 'clerk_telemetry_throttler';\n  #cacheTtl = DEFAULT_CACHE_TTL_MS;\n\n  isEventThrottled(payload: TelemetryEvent): boolean {\n    if (!this.#isValidBrowser) {\n      return false;\n    }\n\n    const now = Date.now();\n    const key = this.#generateKey(payload);\n    const entry = this.#cache?.[key];\n\n    if (!entry) {\n      const updatedCache = {\n        ...this.#cache,\n        [key]: now,\n      };\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    const shouldInvalidate = entry && now - entry > this.#cacheTtl;\n    if (shouldInvalidate) {\n      const updatedCache = this.#cache;\n      delete updatedCache[key];\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    return !!entry;\n  }\n\n  /**\n   * Generates a consistent unique key for telemetry events by sorting payload properties.\n   * This ensures that payloads with identical content in different orders produce the same key.\n   */\n  #generateKey(event: TelemetryEvent): string {\n    const { sk: _sk, pk: _pk, payload, ...rest } = event;\n\n    const sanitizedEvent: Omit<TelemetryEvent, 'sk' | 'pk' | 'payload'> & TelemetryEvent['payload'] = {\n      ...payload,\n      ...rest,\n    };\n\n    return JSON.stringify(\n      Object.keys({\n        ...payload,\n        ...rest,\n      })\n        .sort()\n        .map(key => sanitizedEvent[key]),\n    );\n  }\n\n  get #cache(): Record<string, TtlInMilliseconds> | undefined {\n    const cacheString = localStorage.getItem(this.#storageKey);\n\n    if (!cacheString) {\n      return {};\n    }\n\n    return JSON.parse(cacheString);\n  }\n\n  /**\n   * Checks if the browser's localStorage is supported and writable.\n   *\n   * If any of these operations fail, it indicates that localStorage is either\n   * not supported or not writable (e.g., in cases where the storage is full or\n   * the browser is in a privacy mode that restricts localStorage usage).\n   */\n  get #isValidBrowser(): boolean {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    const storage = window.localStorage;\n    if (!storage) {\n      return false;\n    }\n\n    try {\n      const testKey = 'test';\n      storage.setItem(testKey, testKey);\n      storage.removeItem(testKey);\n\n      return true;\n    } catch (err: unknown) {\n      const isQuotaExceededError =\n        err instanceof DOMException &&\n        // Check error names for different browsers\n        (err.name === 'QuotaExceededError' || err.name === 'NS_ERROR_DOM_QUOTA_REACHED');\n\n      if (isQuotaExceededError && storage.length > 0) {\n        storage.removeItem(this.#storageKey);\n      }\n\n      return false;\n    }\n  }\n}\n","/**\n * The `TelemetryCollector` class handles collection of telemetry events from Clerk SDKs. Telemetry is opt-out and can be disabled by setting a CLERK_TELEMETRY_DISABLED environment variable.\n * The `ClerkProvider` also accepts a `telemetry` prop that will be passed to the collector during initialization:\n *\n * ```jsx\n * <ClerkProvider telemetry={false}>\n *    ...\n * </ClerkProvider>\n * ```\n *\n * For more information, please see the telemetry documentation page: https://clerk.com/docs/telemetry\n */\nimport type {\n  InstanceType,\n  TelemetryCollector as TelemetryCollectorInterface,\n  TelemetryEvent,\n  TelemetryEventRaw,\n} from '@clerk/types';\n\nimport { parsePublishableKey } from '../keys';\nimport { isTruthy } from '../underscore';\nimport { TelemetryEventThrottler } from './throttler';\nimport type { TelemetryCollectorOptions } from './types';\n\ntype TelemetryCollectorConfig = Pick<\n  TelemetryCollectorOptions,\n  'samplingRate' | 'disabled' | 'debug' | 'maxBufferSize'\n> & {\n  endpoint: string;\n};\n\ntype TelemetryMetadata = Required<\n  Pick<TelemetryCollectorOptions, 'clerkVersion' | 'sdk' | 'sdkVersion' | 'publishableKey' | 'secretKey'>\n> & {\n  /**\n   * The instance type, derived from the provided publishableKey.\n   */\n  instanceType: InstanceType;\n};\n\nconst DEFAULT_CONFIG: Partial<TelemetryCollectorConfig> = {\n  samplingRate: 1,\n  maxBufferSize: 5,\n  // Production endpoint: https://clerk-telemetry.com\n  // Staging endpoint: https://staging.clerk-telemetry.com\n  // Local: http://localhost:8787\n  endpoint: 'https://clerk-telemetry.com',\n};\n\nexport class TelemetryCollector implements TelemetryCollectorInterface {\n  #config: Required<TelemetryCollectorConfig>;\n  #eventThrottler: TelemetryEventThrottler;\n  #metadata: TelemetryMetadata = {} as TelemetryMetadata;\n  #buffer: TelemetryEvent[] = [];\n  #pendingFlush: any;\n\n  constructor(options: TelemetryCollectorOptions) {\n    this.#config = {\n      maxBufferSize: options.maxBufferSize ?? DEFAULT_CONFIG.maxBufferSize,\n      samplingRate: options.samplingRate ?? DEFAULT_CONFIG.samplingRate,\n      disabled: options.disabled ?? false,\n      debug: options.debug ?? false,\n      endpoint: DEFAULT_CONFIG.endpoint,\n    } as Required<TelemetryCollectorConfig>;\n\n    if (!options.clerkVersion && typeof window === 'undefined') {\n      // N/A in a server environment\n      this.#metadata.clerkVersion = '';\n    } else {\n      this.#metadata.clerkVersion = options.clerkVersion ?? '';\n    }\n\n    // We will try to grab the SDK data lazily when an event is triggered, so it should always be defined once the event is sent.\n    this.#metadata.sdk = options.sdk!;\n    this.#metadata.sdkVersion = options.sdkVersion!;\n\n    this.#metadata.publishableKey = options.publishableKey ?? '';\n\n    const parsedKey = parsePublishableKey(options.publishableKey);\n    if (parsedKey) {\n      this.#metadata.instanceType = parsedKey.instanceType;\n    }\n\n    if (options.secretKey) {\n      // Only send the first 16 characters of the secret key to to avoid sending the full key. We can still query against the partial key.\n      this.#metadata.secretKey = options.secretKey.substring(0, 16);\n    }\n\n    this.#eventThrottler = new TelemetryEventThrottler();\n  }\n\n  get isEnabled(): boolean {\n    if (this.#metadata.instanceType !== 'development') {\n      return false;\n    }\n\n    // In browser or client environments, we most likely pass the disabled option to the collector, but in environments\n    // where environment variables are available we also check for `CLERK_TELEMETRY_DISABLED`.\n    if (this.#config.disabled || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DISABLED))) {\n      return false;\n    }\n\n    // navigator.webdriver is a property generally set by headless browsers that are running in an automated testing environment.\n    // Data from these environments is not meaningful for us and has the potential to produce a large volume of events, so we disable\n    // collection in this case. (ref: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver)\n    if (typeof window !== 'undefined' && !!window?.navigator?.webdriver) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get isDebug(): boolean {\n    return this.#config.debug || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DEBUG));\n  }\n\n  record(event: TelemetryEventRaw): void {\n    const preparedPayload = this.#preparePayload(event.event, event.payload);\n\n    this.#logEvent(preparedPayload.event, preparedPayload);\n\n    if (!this.#shouldRecord(preparedPayload, event.eventSamplingRate)) {\n      return;\n    }\n\n    this.#buffer.push(preparedPayload);\n\n    this.#scheduleFlush();\n  }\n\n  #shouldRecord(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    return this.isEnabled && !this.isDebug && this.#shouldBeSampled(preparedPayload, eventSamplingRate);\n  }\n\n  #shouldBeSampled(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    const randomSeed = Math.random();\n\n    if (this.#eventThrottler.isEventThrottled(preparedPayload)) {\n      return false;\n    }\n\n    return (\n      randomSeed <= this.#config.samplingRate &&\n      (typeof eventSamplingRate === 'undefined' || randomSeed <= eventSamplingRate)\n    );\n  }\n\n  #scheduleFlush(): void {\n    // On the server, we want to flush immediately as we have less guarantees about the lifecycle of the process\n    if (typeof window === 'undefined') {\n      this.#flush();\n      return;\n    }\n\n    const isBufferFull = this.#buffer.length >= this.#config.maxBufferSize;\n    if (isBufferFull) {\n      // If the buffer is full, flush immediately to make sure we minimize the chance of event loss.\n      // Cancel any pending flushes as we're going to flush immediately\n      if (this.#pendingFlush) {\n        const cancel = typeof cancelIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n        cancel(this.#pendingFlush);\n      }\n      this.#flush();\n      return;\n    }\n\n    // If we have a pending flush, do nothing\n    if (this.#pendingFlush) {\n      return;\n    }\n\n    if ('requestIdleCallback' in window) {\n      this.#pendingFlush = requestIdleCallback(() => {\n        this.#flush();\n      });\n    } else {\n      // This is not an ideal solution, but it at least waits until the next tick\n      this.#pendingFlush = setTimeout(() => {\n        this.#flush();\n      }, 0);\n    }\n  }\n\n  #flush(): void {\n    fetch(new URL('/v1/event', this.#config.endpoint), {\n      method: 'POST',\n      // TODO: We send an array here with that idea that we can eventually send multiple events.\n      body: JSON.stringify({\n        events: this.#buffer,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .catch(() => void 0)\n      .then(() => {\n        this.#buffer = [];\n      })\n      .catch(() => void 0);\n  }\n\n  /**\n   * If running in debug mode, log the event and its payload to the console.\n   */\n  #logEvent(event: TelemetryEvent['event'], payload: Record<string, any>) {\n    if (!this.isDebug) {\n      return;\n    }\n\n    if (typeof console.groupCollapsed !== 'undefined') {\n      console.groupCollapsed('[clerk/telemetry]', event);\n      console.log(payload);\n      console.groupEnd();\n    } else {\n      console.log('[clerk/telemetry]', event, payload);\n    }\n  }\n\n  /**\n   * If in browser, attempt to lazily grab the SDK metadata from the Clerk singleton, otherwise fallback to the initially passed in values.\n   *\n   * This is necessary because the sdkMetadata can be set by the host SDK after the TelemetryCollector is instantiated.\n   */\n  #getSDKMetadata() {\n    let sdkMetadata = {\n      name: this.#metadata.sdk,\n      version: this.#metadata.sdkVersion,\n    };\n\n    // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n    if (typeof window !== 'undefined' && window.Clerk) {\n      // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n      sdkMetadata = { ...sdkMetadata, ...window.Clerk.constructor.sdkMetadata };\n    }\n\n    return sdkMetadata;\n  }\n\n  /**\n   * Append relevant metadata from the Clerk singleton to the event payload.\n   */\n  #preparePayload(event: TelemetryEvent['event'], payload: TelemetryEvent['payload']): TelemetryEvent {\n    const sdkMetadata = this.#getSDKMetadata();\n\n    return {\n      event,\n      cv: this.#metadata.clerkVersion ?? '',\n      it: this.#metadata.instanceType ?? '',\n      sdk: sdkMetadata.name,\n      sdkv: sdkMetadata.version,\n      ...(this.#metadata.publishableKey ? { pk: this.#metadata.publishableKey } : {}),\n      ...(this.#metadata.secretKey ? { sk: this.#metadata.secretKey } : {}),\n      payload,\n    };\n  }\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_COMPONENT_MOUNTED = 'COMPONENT_MOUNTED';\nconst EVENT_SAMPLING_RATE = 0.1;\n\ntype ComponentMountedBase = {\n  component: string;\n};\n\ntype EventPrebuiltComponentMounted = ComponentMountedBase & {\n  appearanceProp: boolean;\n  elements: boolean;\n  variables: boolean;\n  baseTheme: boolean;\n};\n\ntype EventComponentMounted = ComponentMountedBase & TelemetryEventRaw['payload'];\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a prebuilt (AIO) component is mounted.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Will be filtered to a known list of props.\n * @param additionalPayload - Additional data to send with the event.\n *\n * @example\n * telemetry.record(eventPrebuiltComponentMounted('SignUp', props));\n */\nexport function eventPrebuiltComponentMounted(\n  component: string,\n  props?: Record<string, any>,\n  additionalPayload?: TelemetryEventRaw['payload'],\n): TelemetryEventRaw<EventPrebuiltComponentMounted> {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      appearanceProp: Boolean(props?.appearance),\n      baseTheme: Boolean(props?.appearance?.baseTheme),\n      elements: Boolean(props?.appearance?.elements),\n      variables: Boolean(props?.appearance?.variables),\n      ...additionalPayload,\n    },\n  };\n}\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a component is mounted. Use `eventPrebuiltComponentMounted` for prebuilt components.\n *\n * **Caution:** Filter the `props` you pass to this function to avoid sending too much data.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Ideally you only pass a handful of props here.\n *\n * @example\n * telemetry.record(eventComponentMounted('SignUp', props));\n */\nexport function eventComponentMounted(\n  component: string,\n  props: TelemetryEventRaw['payload'] = {},\n): TelemetryEventRaw<EventComponentMounted> {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      ...props,\n    },\n  };\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_METHOD_CALLED = 'METHOD_CALLED';\n\ntype EventMethodCalled = {\n  method: string;\n} & Record<string, string | number | boolean>;\n\n/**\n * Fired when a helper method is called from a Clerk SDK.\n */\nexport function eventMethodCalled(\n  method: string,\n  payload?: Record<string, unknown>,\n): TelemetryEventRaw<EventMethodCalled> {\n  return {\n    event: EVENT_METHOD_CALLED,\n    payload: {\n      method,\n      ...payload,\n    },\n  };\n}\n"],"names":["telemetry_exports","__export","TelemetryCollector","eventComponentMounted","eventMethodCalled","eventPrebuiltComponentMounted","module","exports","__toCommonJS","isomorphicAtob","data","atob","global","Buffer","toString","PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","parsePublishableKey","key","options","isPublishableKey","fatal","Error","instanceType","startsWith","frontendApi","split","slice","proxyUrl","domain","hasValidPrefix","hasValidFrontendApiPostfix","endsWith","snakeToCamel","str","replace","match","toUpperCase","camelToSnake","letter","toLowerCase","createDeepObjectTransformer","transform","deepTransform","obj","Array","isArray","map","el","copy","keys","Object","oldName","newName","deepCamelToSnake","deepSnakeToCamel","isTruthy","value","number","parseInt","isNaN","DEFAULT_CACHE_TTL_MS","_storageKey","_cacheTtl","_TelemetryEventThrottler_instances","generateKey_fn","cache_get","isValidBrowser_get","TelemetryEventThrottler","isEventThrottled","payload","__privateGet","now","Date","__privateMethod","call","entry","updatedCache","localStorage","setItem","JSON","stringify","shouldInvalidate","constructor","__privateAdd","WeakMap","WeakSet","event","sk","_sk","pk","_pk","rest","sanitizedEvent","sort","cacheString","getItem","parse","window","storage","testKey","removeItem","err","isQuotaExceededError","DOMException","name","length","DEFAULT_CONFIG","samplingRate","maxBufferSize","endpoint","_config","_eventThrottler","_metadata","_buffer","_pendingFlush","_TelemetryCollector_instances","shouldRecord_fn","shouldBeSampled_fn","scheduleFlush_fn","flush_fn","logEvent_fn","getSDKMetadata_fn","preparePayload_fn","isEnabled","disabled","process","env","CLERK_TELEMETRY_DISABLED","navigator","webdriver","isDebug","debug","CLERK_TELEMETRY_DEBUG","record","preparedPayload","eventSamplingRate","push","__privateSet","clerkVersion","sdk","sdkVersion","publishableKey","parsedKey","secretKey","substring","randomSeed","Math","random","isBufferFull","cancel","cancelIdleCallback","clearTimeout","requestIdleCallback","setTimeout","fetch","URL","method","body","events","headers","catch","then","console","groupCollapsed","log","groupEnd","sdkMetadata","version","Clerk","cv","it","sdkv","EVENT_COMPONENT_MOUNTED","EVENT_SAMPLING_RATE","component","props","additionalPayload","appearanceProp","Boolean","appearance","baseTheme","elements","variables","EVENT_METHOD_CALLED"],"rangeMappingsmappings":"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"}