4694125cdab1d9a375c9decd99d1894d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentIcon", {
    enumerable: true,
    get: function() {
        return DocumentIcon;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _jotai = require("jotai");
const _utils = require("@rp/common/utils");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _icons = require("@rp/react/web/icons");
const _core = require("@rp/react/web/mui/core");
const _icons1 = require("@rp/react/web/mui/icons");
const _EllipsisTooltip = require("../EllipsisTooltip");
const _DocumentIconstyles = require("./DocumentIcon.styles");
const _documentIconUtils = require("./documentIconUtils");
const DocumentIcon = ({ documentScope, text, contentType, srcKey, isFetching })=>{
    const { ids, addByIds } = (0, _cqsbyids.useCqsByIdsContext)();
    var _ids_;
    const { data, isLoading = true } = (_ids_ = ids[srcKey || ""]) !== null && _ids_ !== void 0 ? _ids_ : {};
    const url3 = (0, _utils.parseMetadata3)(data === null || data === void 0 ? void 0 : data.metadata3);
    const url2 = (0, _utils.parseMetadata2)(data === null || data === void 0 ? void 0 : data.metadata2);
    const [imageUrls, setImageUrls] = (0, _jotai.useAtom)(_documentIconUtils._atomImageUrls);
    const [error, setError] = (0, _react.useState)(false);
    const [isLoaded, setIsLoaded] = (0, _react.useState)(false);
    const [url, setUrl] = (0, _react.useState)("");
    (0, _react.useEffect)(()=>{
        if (srcKey) {
            addByIds([
                {
                    key: srcKey,
                    queryType: "source"
                }
            ]);
        }
    }, [
        srcKey,
        addByIds,
        ids
    ]);
    (0, _react.useEffect)(()=>{
        if (isLoading) return;
        if (imageUrls.includes(url3 !== null && url3 !== void 0 ? url3 : "")) {
            setUrl(url3 !== null && url3 !== void 0 ? url3 : "");
            setIsLoaded(true);
        } else if (imageUrls.includes(url2 !== null && url2 !== void 0 ? url2 : "")) {
            setUrl(url2 !== null && url2 !== void 0 ? url2 : "");
            setIsLoaded(true);
        } else {
            (0, _documentIconUtils.getImage)(url3).catch(()=>(0, _documentIconUtils.getImage)(url2)).then((url)=>{
                setImageUrls((prev)=>prev.concat(url));
                setUrl(url);
                setIsLoaded(true);
            }).catch(()=>{
                setIsLoaded(true);
                setError(true);
            });
        }
    }, [
        isLoading,
        imageUrls,
        setImageUrls,
        url2,
        url3
    ]);
    const documentScopeIcons = (documentScope)=>{
        switch(documentScope){
            case "news":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Public, {});
            case "transcripts":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.SvgIcon, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.TranscriptIcon, {})
                });
            case "files":
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.FileIcon, {
                    extension: contentType
                });
            default:
                return null;
        }
    };
    let displayText = text;
    let tooltipText = text;
    if (documentScope === "files") {
        if (!text) displayText = "My Files";
        tooltipText = "Internal document";
    }
    const showGenericIcon = !isLoaded || error;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_DocumentIconstyles.StoryCardStyled, {
        documentScope: documentScope,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_EllipsisTooltip.EllipsisTooltip, {
            // forceShowTooltip={true}
            forceShowTooltip: documentScope === "files",
            tooltipPlacement: "right",
            tooltipText: tooltipText || "",
            typographyProps: {
                style: {
                    lineHeight: 1,
                    display: "flex"
                }
            },
            children: [
                isFetching ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {
                    size: 14,
                    sx: {
                        mr: "2px"
                    }
                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_DocumentIconstyles.FaviconContainer, {
                    "data-testid": "source-icon",
                    children: [
                        showGenericIcon ? documentScopeIcons(documentScope) : null,
                        url && /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                            src: url,
                            alt: url,
                            height: 16,
                            width: 16,
                            style: {
                                display: showGenericIcon ? "none" : "block",
                                borderRadius: "2px"
                            }
                        })
                    ]
                }),
                displayText && tooltipText && /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    sx: {
                        overflow: "hidden",
                        textOverflow: "ellipsis"
                    },
                    fontSize: 12,
                    ml: "4px",
                    component: "span",
                    "data-testid": "source-name",
                    children: displayText
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,