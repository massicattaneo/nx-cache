{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/MobileOnboardingPage/MobileOnboardingPage.test.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { ThemeProvider, createTheme } from \"@rp/react/web/mui/core\"\nimport { act, fireEvent, render, screen } from \"@testing-library/react\"\nimport { MobileOnboardingPage } from \"./MobileOnboardingPage\"\n\n// Mock the dependencies\nconst useMockDeviceInfo = useDeviceInfo as jest.Mock\njest.mock(\"@rp/react/web/common/hooks\", () => ({\n  ...jest.requireActual(\"@rp/react/web/common/hooks\"),\n  useDeviceInfo: jest.fn(),\n}))\nconst useMockTranslation = useTranslation as jest.Mock\njest.mock(\"react-i18next\", () => ({\n  ...jest.requireActual(\"react-i18next\"),\n  useTranslation: jest.fn(),\n}))\n\njest.mock(\"@rp/react/common/assets\", () => ({\n  BigdataLogoWhite: () => <div data-testid=\"logo\">Logo</div>,\n}))\n\njest.mock(\"./assets/grid.svg\", () => ({\n  __esModule: true,\n  default: () => <div data-testid=\"grid-svg\">Grid</div>,\n}))\n\njest.mock(\"./assets/iconsGrid.svg\", () => ({\n  __esModule: true,\n  default: () => <div data-testid=\"icons-grid-svg\">Icons Grid</div>,\n}))\n\ndescribe(\"MobileOnboardingPage\", () => {\n  const mockTheme = createTheme({\n    palette: {\n      surface: {\n        background: \"#000000\",\n      },\n      text: {\n        primary: \"#ffffff\",\n      },\n      textColor: {\n        700: \"#777777\",\n      },\n    },\n  })\n\n  const defaultProps = {\n    onPressContinueWeb: jest.fn(),\n    deepLinkURL: \"https://example.com/app\",\n  }\n\n  const mockTranslation = {\n    t: jest.fn((key, options) => {\n      const translations = {\n        \"mobileOnboardingPage.android\": \"Android\",\n        \"mobileOnboardingPage.ios\": \"iOS\",\n        \"mobileOnboardingPage.title\": `Download on ${options?.SO}`,\n        \"mobileOnboardingPage.getAppButton\": `Get ${options?.SO} App`,\n        \"mobileOnboardingPage.continueWebVersionButton\": \"Continue to web version\",\n      }\n      return translations[key] || key\n    }),\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    useMockTranslation.mockReturnValue(mockTranslation)\n    // Mock window.open\n    global.open = jest.fn()\n  })\n\n  describe(\"Android device rendering\", () => {\n    beforeEach(() => {\n      useMockDeviceInfo.mockReturnValue({\n        isAndroid: true,\n        isIOS: false,\n      })\n    })\n\n    it(\"renders Android-specific content correctly\", () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      expect(screen.getByText(\"Download on Android\")).toBeInTheDocument()\n      expect(screen.getByText(\"Get Android App\")).toBeInTheDocument()\n      expect(screen.getByTestId(\"logo\")).toBeInTheDocument()\n    })\n\n    it(\"handles app store link click\", () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      const storeButton = screen.getByText(\"Get Android App\")\n      fireEvent.click(storeButton)\n      expect(global.open).toHaveBeenCalledWith(\n        \"https://example.com/app\",\n        \"_blank\",\n        \"noopener,noreferrer\",\n      )\n    })\n  })\n\n  describe(\"iOS device rendering\", () => {\n    beforeEach(() => {\n      useMockDeviceInfo.mockReturnValue({\n        isAndroid: false,\n        isIOS: true,\n      })\n    })\n\n    it(\"renders iOS-specific content correctly\", () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      expect(screen.getByText(\"Download on iOS\")).toBeInTheDocument()\n      expect(screen.getByText(\"Get iOS App\")).toBeInTheDocument()\n    })\n\n    it(\"handles app store link click\", () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      const storeButton = screen.getByText(\"Get iOS App\")\n      fireEvent.click(storeButton)\n      expect(global.open).toHaveBeenCalledWith(\n        \"https://example.com/app\",\n        \"_blank\",\n        \"noopener,noreferrer\",\n      )\n    })\n  })\n\n  describe(\"Web version continuation\", () => {\n    beforeEach(() => {\n      jest.useFakeTimers()\n    })\n\n    afterEach(() => {\n      jest.useRealTimers()\n    })\n\n    it(\"handles continue to web version with animation\", async () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      const webButton = screen.getByText(\"Continue to web version\")\n      fireEvent.click(webButton)\n\n      // Wait for animation timeout\n      act(() => {\n        jest.advanceTimersByTime(500)\n      })\n\n      expect(defaultProps.onPressContinueWeb).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe(\"Layout and styling\", () => {\n    it(\"applies correct styling to buttons\", () => {\n      render(\n        <ThemeProvider theme={mockTheme}>\n          <MobileOnboardingPage {...defaultProps} />\n        </ThemeProvider>,\n      )\n\n      const appStoreButton = screen.getByText(/Get (Android|iOS) App/)\n      const webButton = screen.getByText(\"Continue to web version\")\n\n      expect(appStoreButton).toHaveStyle({\n        backgroundColor: mockTheme.palette.text.primary,\n      })\n\n      expect(webButton).toHaveStyle({\n        color: mockTheme.palette.textColor[700],\n      })\n    })\n  })\n})\n"],"names":["jest","mock","requireActual","useDeviceInfo","fn","useTranslation","BigdataLogoWhite","div","data-testid","__esModule","default","useMockDeviceInfo","useMockTranslation","describe","mockTheme","createTheme","palette","surface","background","text","primary","textColor","defaultProps","onPressContinueWeb","deepLinkURL","mockTranslation","t","key","options","translations","SO","beforeEach","clearAllMocks","mockReturnValue","global","open","isAndroid","isIOS","it","render","ThemeProvider","theme","MobileOnboardingPage","expect","screen","getByText","toBeInTheDocument","getByTestId","storeButton","fireEvent","click","toHaveBeenCalledWith","useFakeTimers","afterEach","useRealTimers","webButton","act","advanceTimersByTime","toHaveBeenCalledTimes","appStoreButton","toHaveStyle","backgroundColor","color"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}