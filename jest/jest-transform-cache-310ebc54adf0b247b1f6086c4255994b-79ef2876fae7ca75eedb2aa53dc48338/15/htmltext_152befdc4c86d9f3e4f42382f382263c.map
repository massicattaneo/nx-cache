{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/html-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n"],"names":["htmlText","name","tokenize","tokenizeHtmlText","effects","ok","nok","self","marker","index","returnState","start","code","enter","consume","open","declarationOpen","tagCloseStart","instruction","asciiAlpha","tagOpen","commentOpenInside","cdataOpenInside","declaration","commentEnd","comment","commentClose","markdownLineEnding","lineEndingBefore","end","value","charCodeAt","length","cdata","cdataClose","cdataEnd","instructionClose","tagClose","asciiAlphanumeric","tagCloseBetween","markdownSpace","markdownLineEndingOrSpace","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","undefined","tagOpenAttributeValueQuotedAfter","exit","lineEndingAfter","factorySpace","lineEndingAfterPrefix","parser","constructs","disable","null","includes"],"rangeMappingsmappings":"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"}