42b9c9d283f43646199a5fb3758903f2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BriefTopicsSuggestions", {
    enumerable: true,
    get: function() {
        return BriefTopicsSuggestions;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _trending = require("@rp/react/tanstack-api/trending");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const NUM_OF_SUGGESTIONS = 3;
const BriefTopicsSuggestions = ({ onItemClick, topics })=>{
    var _data_pages_;
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const LOADING = isMobile ? [
        60,
        120,
        100
    ] : [
        200,
        260,
        160
    ];
    const { data, isLoading } = (0, _trending.useTrendingSearches)();
    const suggestions = data === null || data === void 0 ? void 0 : (_data_pages_ = data.pages[0]) === null || _data_pages_ === void 0 ? void 0 : _data_pages_.trendingSearches.slice(0, NUM_OF_SUGGESTIONS).filter(({ title })=>!topics.find(({ id })=>id.toLowerCase() === `keyword|${title}`.toLowerCase()));
    if (!isLoading && (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) === 0) return null;
    if (isLoading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
            sx: {
                display: "flex",
                gap: 1,
                width: "100%"
            },
            children: [
                "Suggestions:",
                " ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                    sx: {
                        width: "100%"
                    },
                    children: new Array(NUM_OF_SUGGESTIONS).fill(0).map((_, index)=>{
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                            sx: {
                                display: "inline-block",
                                width: LOADING[index % NUM_OF_SUGGESTIONS],
                                ml: 1
                            }
                        }, index);
                    })
                })
            ]
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            display: "flex",
            gap: 1,
            width: "100%"
        },
        children: [
            "Suggestions:",
            " ",
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    width: "100%"
                },
                children: suggestions === null || suggestions === void 0 ? void 0 : suggestions.map((item, index)=>{
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Link, {
                                sx: {
                                    cursor: "pointer",
                                    "&:hover": {
                                        textDecoration: isMobile ? "none" : undefined
                                    }
                                },
                                onClick: ()=>{
                                    onItemClick({
                                        id: `keyword|${item.title}`,
                                        label: item.title,
                                        text: item.title,
                                        type: "keyword",
                                        isKeyword: true
                                    });
                                },
                                children: item.title
                            }),
                            index < suggestions.length - 1 ? ", " : ""
                        ]
                    }, item.title);
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9jb21wb25lbnRzL2JyaWVmU3RlcHMvQnJpZWZUb3BpY3NTdWdnZXN0aW9ucy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgRW5oYW5jZWRTdWdnZXN0aW9uIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvc3VnZ2VzdGlvblwiXG5pbXBvcnQgeyB1c2VUcmVuZGluZ1NlYXJjaGVzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvdHJlbmRpbmdcIlxuaW1wb3J0IHsgdXNlRGV2aWNlSW5mbyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyBCb3gsIExpbmssIFNrZWxldG9uIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG50eXBlIFByb3BzID0ge1xuICBvbkl0ZW1DbGljazogKG5ld1RvcGljOiBFbmhhbmNlZFN1Z2dlc3Rpb24pID0+IHZvaWRcbiAgdG9waWNzOiBBcnJheTxFbmhhbmNlZFN1Z2dlc3Rpb24+XG59XG5cbmNvbnN0IE5VTV9PRl9TVUdHRVNUSU9OUyA9IDNcblxuY29uc3QgQnJpZWZUb3BpY3NTdWdnZXN0aW9ucyA9ICh7IG9uSXRlbUNsaWNrLCB0b3BpY3MgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpc01vYmlsZSB9ID0gdXNlRGV2aWNlSW5mbygpXG4gIGNvbnN0IExPQURJTkcgPSBpc01vYmlsZSA/IFs2MCwgMTIwLCAxMDBdIDogWzIwMCwgMjYwLCAxNjBdXG4gIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nIH0gPSB1c2VUcmVuZGluZ1NlYXJjaGVzKClcbiAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBkYXRhPy5wYWdlc1swXT8udHJlbmRpbmdTZWFyY2hlc1xuICAgIC5zbGljZSgwLCBOVU1fT0ZfU1VHR0VTVElPTlMpXG4gICAgLmZpbHRlcihcbiAgICAgICh7IHRpdGxlIH0pID0+XG4gICAgICAgICF0b3BpY3MuZmluZCgoeyBpZCB9KSA9PiBpZC50b0xvd2VyQ2FzZSgpID09PSBga2V5d29yZHwke3RpdGxlfWAudG9Mb3dlckNhc2UoKSksXG4gICAgKVxuXG4gIGlmICghaXNMb2FkaW5nICYmIHN1Z2dlc3Rpb25zPy5sZW5ndGggPT09IDApIHJldHVybiBudWxsXG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBnYXA6IDEsIHdpZHRoOiBcIjEwMCVcIiB9fT5cbiAgICAgICAgU3VnZ2VzdGlvbnM6e1wiIFwifVxuICAgICAgICA8Qm94IHN4PXt7IHdpZHRoOiBcIjEwMCVcIiB9fT5cbiAgICAgICAgICB7bmV3IEFycmF5KE5VTV9PRl9TVUdHRVNUSU9OUykuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8U2tlbGV0b25cbiAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IExPQURJTkdbaW5kZXggJSBOVU1fT0ZfU1VHR0VTVElPTlNdLFxuICAgICAgICAgICAgICAgICAgbWw6IDEsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L0JveD5cbiAgICApXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGdhcDogMSwgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgU3VnZ2VzdGlvbnM6e1wiIFwifVxuICAgICAgPEJveCBzeD17eyB3aWR0aDogXCIxMDAlXCIgfX0+XG4gICAgICAgIHtzdWdnZXN0aW9ucz8ubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RnJhZ21lbnQga2V5PXtpdGVtLnRpdGxlfT5cbiAgICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICAgICAgICAgIFwiJjpob3ZlclwiOiB7IHRleHREZWNvcmF0aW9uOiBpc01vYmlsZSA/IFwibm9uZVwiIDogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBvbkl0ZW1DbGljayh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBga2V5d29yZHwke2l0ZW0udGl0bGV9YCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwia2V5d29yZFwiLFxuICAgICAgICAgICAgICAgICAgICBpc0tleXdvcmQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7aXRlbS50aXRsZX1cbiAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICB7aW5kZXggPCBzdWdnZXN0aW9ucy5sZW5ndGggLSAxID8gXCIsIFwiIDogXCJcIn1cbiAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCB7IEJyaWVmVG9waWNzU3VnZ2VzdGlvbnMgfVxuIl0sIm5hbWVzIjpbIkJyaWVmVG9waWNzU3VnZ2VzdGlvbnMiLCJOVU1fT0ZfU1VHR0VTVElPTlMiLCJvbkl0ZW1DbGljayIsInRvcGljcyIsImRhdGEiLCJpc01vYmlsZSIsInVzZURldmljZUluZm8iLCJMT0FESU5HIiwiaXNMb2FkaW5nIiwidXNlVHJlbmRpbmdTZWFyY2hlcyIsInN1Z2dlc3Rpb25zIiwicGFnZXMiLCJ0cmVuZGluZ1NlYXJjaGVzIiwic2xpY2UiLCJmaWx0ZXIiLCJ0aXRsZSIsImZpbmQiLCJpZCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiQm94Iiwic3giLCJkaXNwbGF5IiwiZ2FwIiwid2lkdGgiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJfIiwiaW5kZXgiLCJTa2VsZXRvbiIsIm1sIiwiaXRlbSIsIkZyYWdtZW50IiwiTGluayIsImN1cnNvciIsInRleHREZWNvcmF0aW9uIiwidW5kZWZpbmVkIiwib25DbGljayIsImxhYmVsIiwidGV4dCIsInR5cGUiLCJpc0tleXdvcmQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWlGU0E7OztlQUFBQTs7Ozt1QkFqRmdCOzBCQUVXO3VCQUNOO3NCQUNNO0FBT3BDLE1BQU1DLHFCQUFxQjtBQUUzQixNQUFNRCx5QkFBeUIsQ0FBQyxFQUFFRSxXQUFXLEVBQUVDLE1BQU0sRUFBUztRQUl4Q0M7SUFIcEIsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsSUFBQUEsb0JBQWE7SUFDbEMsTUFBTUMsVUFBVUYsV0FBVztRQUFDO1FBQUk7UUFBSztLQUFJLEdBQUc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMzRCxNQUFNLEVBQUVELElBQUksRUFBRUksU0FBUyxFQUFFLEdBQUdDLElBQUFBLDZCQUFtQjtJQUMvQyxNQUFNQyxjQUFjTixpQkFBQUEsNEJBQUFBLGVBQUFBLEtBQU1PLEtBQUssQ0FBQyxFQUFFLGNBQWRQLG1DQUFBQSxhQUFnQlEsZ0JBQWdCLENBQ2pEQyxLQUFLLENBQUMsR0FBR1osb0JBQ1RhLE1BQU0sQ0FDTCxDQUFDLEVBQUVDLEtBQUssRUFBRSxHQUNSLENBQUNaLE9BQU9hLElBQUksQ0FBQyxDQUFDLEVBQUVDLEVBQUUsRUFBRSxHQUFLQSxHQUFHQyxXQUFXLE9BQU8sQ0FBQyxRQUFRLEVBQUVILE1BQU0sQ0FBQyxDQUFDRyxXQUFXO0lBR2xGLElBQUksQ0FBQ1YsYUFBYUUsQ0FBQUEsd0JBQUFBLGtDQUFBQSxZQUFhUyxNQUFNLE1BQUssR0FBRyxPQUFPO0lBRXBELElBQUlYLFdBQVc7UUFDYixxQkFDRSxzQkFBQ1ksU0FBRztZQUFDQyxJQUFJO2dCQUFFQyxTQUFTO2dCQUFRQyxLQUFLO2dCQUFHQyxPQUFPO1lBQU87O2dCQUFHO2dCQUN0Qzs4QkFDYixxQkFBQ0osU0FBRztvQkFBQ0MsSUFBSTt3QkFBRUcsT0FBTztvQkFBTzs4QkFDdEIsSUFBSUMsTUFBTXhCLG9CQUFvQnlCLElBQUksQ0FBQyxHQUFHQyxHQUFHLENBQUMsQ0FBQ0MsR0FBR0M7d0JBQzdDLHFCQUNFLHFCQUFDQyxjQUFROzRCQUVQVCxJQUFJO2dDQUNGQyxTQUFTO2dDQUNURSxPQUFPakIsT0FBTyxDQUFDc0IsUUFBUTVCLG1CQUFtQjtnQ0FDMUM4QixJQUFJOzRCQUNOOzJCQUxLRjtvQkFRWDs7OztJQUlSO0lBRUEscUJBQ0Usc0JBQUNULFNBQUc7UUFBQ0MsSUFBSTtZQUFFQyxTQUFTO1lBQVFDLEtBQUs7WUFBR0MsT0FBTztRQUFPOztZQUFHO1lBQ3RDOzBCQUNiLHFCQUFDSixTQUFHO2dCQUFDQyxJQUFJO29CQUFFRyxPQUFPO2dCQUFPOzBCQUN0QmQsd0JBQUFBLGtDQUFBQSxZQUFhaUIsR0FBRyxDQUFDLENBQUNLLE1BQU1IO29CQUN2QixxQkFDRSxzQkFBQ0ksZUFBUTs7MENBQ1AscUJBQUNDLFVBQUk7Z0NBQ0hiLElBQUk7b0NBQ0ZjLFFBQVE7b0NBQ1IsV0FBVzt3Q0FBRUMsZ0JBQWdCL0IsV0FBVyxTQUFTZ0M7b0NBQVU7Z0NBQzdEO2dDQUNBQyxTQUFTO29DQUNQcEMsWUFBWTt3Q0FDVmUsSUFBSSxDQUFDLFFBQVEsRUFBRWUsS0FBS2pCLEtBQUssQ0FBQyxDQUFDO3dDQUMzQndCLE9BQU9QLEtBQUtqQixLQUFLO3dDQUNqQnlCLE1BQU1SLEtBQUtqQixLQUFLO3dDQUNoQjBCLE1BQU07d0NBQ05DLFdBQVc7b0NBQ2I7Z0NBQ0Y7MENBRUNWLEtBQUtqQixLQUFLOzs0QkFFWmMsUUFBUW5CLFlBQVlTLE1BQU0sR0FBRyxJQUFJLE9BQU87O3VCQWxCNUJhLEtBQUtqQixLQUFLO2dCQXFCN0I7Ozs7QUFJUiJ9