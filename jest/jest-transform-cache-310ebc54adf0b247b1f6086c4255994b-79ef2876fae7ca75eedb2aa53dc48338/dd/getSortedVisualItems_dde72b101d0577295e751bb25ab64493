97ec80b9ee35d1782148e7bbe29b7b78
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getSortedVisualItems", {
    enumerable: true,
    get: function() {
        return getSortedVisualItems;
    }
});
const _parseTabLabel = require("./parseTabLabel");
const getSortedVisualItems = (visualData, documentId)=>{
    const mappedVisualItems = visualData.map((datum)=>({
            label: (0, _parseTabLabel.parseTabLabel)(datum),
            info: datum
        }));
    if (!documentId) {
        return mappedVisualItems;
    }
    const itemIdx = mappedVisualItems.findIndex((item)=>item.info.rpDocumentId === documentId);
    if (itemIdx === -1) {
        return mappedVisualItems;
    }
    const firstItem = mappedVisualItems[itemIdx];
    mappedVisualItems.splice(itemIdx, 1);
    const fullItems = [
        firstItem,
        ...mappedVisualItems
    ];
    // remove extra transcripts until b/e can figure it out, we only need one
    const transcriptCount = fullItems.reduce((acc, cur)=>acc + (cur.info.rpDocumentType === "TRANSCRIPT" ? 1 : 0), 0);
    if (transcriptCount < 2) {
        return fullItems;
    }
    const firstTranscriptIndex = fullItems.findIndex((item)=>item.info.rpDocumentType === "TRANSCRIPT");
    const filteredItems = fullItems.filter((item, idx)=>idx === firstTranscriptIndex || item.info.rpDocumentType !== "TRANSCRIPT");
    return filteredItems;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2RvY3VtZW50LXZpZXdlci9zcmMvbGliL3V0aWxzL2dldFNvcnRlZFZpc3VhbEl0ZW1zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERvY3VtZW50c0NvbGxlY3Rpb25JbmZvLFxuICBEb2N1bWVudHNDb2xsZWN0aW9uUlBKU09OSXRlbSxcbn0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZG9jdW1lbnRzXCJcbmltcG9ydCB7IHBhcnNlVGFiTGFiZWwgfSBmcm9tIFwiLi9wYXJzZVRhYkxhYmVsXCJcblxuY29uc3QgZ2V0U29ydGVkVmlzdWFsSXRlbXMgPSAoXG4gIHZpc3VhbERhdGE6IEFycmF5PERvY3VtZW50c0NvbGxlY3Rpb25JbmZvPixcbiAgZG9jdW1lbnRJZDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuKTogQXJyYXk8RG9jdW1lbnRzQ29sbGVjdGlvblJQSlNPTkl0ZW0+ID0+IHtcbiAgY29uc3QgbWFwcGVkVmlzdWFsSXRlbXMgPSB2aXN1YWxEYXRhLm1hcChkYXR1bSA9PiAoe1xuICAgIGxhYmVsOiBwYXJzZVRhYkxhYmVsKGRhdHVtKSxcbiAgICBpbmZvOiBkYXR1bSxcbiAgfSkpXG5cbiAgaWYgKCFkb2N1bWVudElkKSB7XG4gICAgcmV0dXJuIG1hcHBlZFZpc3VhbEl0ZW1zXG4gIH1cblxuICBjb25zdCBpdGVtSWR4ID0gbWFwcGVkVmlzdWFsSXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pbmZvLnJwRG9jdW1lbnRJZCA9PT0gZG9jdW1lbnRJZClcblxuICBpZiAoaXRlbUlkeCA9PT0gLTEpIHtcbiAgICByZXR1cm4gbWFwcGVkVmlzdWFsSXRlbXNcbiAgfVxuXG4gIGNvbnN0IGZpcnN0SXRlbSA9IG1hcHBlZFZpc3VhbEl0ZW1zW2l0ZW1JZHhdXG4gIG1hcHBlZFZpc3VhbEl0ZW1zLnNwbGljZShpdGVtSWR4LCAxKVxuXG4gIGNvbnN0IGZ1bGxJdGVtcyA9IFtmaXJzdEl0ZW0sIC4uLm1hcHBlZFZpc3VhbEl0ZW1zXVxuXG4gIC8vIHJlbW92ZSBleHRyYSB0cmFuc2NyaXB0cyB1bnRpbCBiL2UgY2FuIGZpZ3VyZSBpdCBvdXQsIHdlIG9ubHkgbmVlZCBvbmVcblxuICBjb25zdCB0cmFuc2NyaXB0Q291bnQgPSBmdWxsSXRlbXMucmVkdWNlKFxuICAgIChhY2MsIGN1cikgPT4gYWNjICsgKGN1ci5pbmZvLnJwRG9jdW1lbnRUeXBlID09PSBcIlRSQU5TQ1JJUFRcIiA/IDEgOiAwKSxcbiAgICAwLFxuICApXG5cbiAgaWYgKHRyYW5zY3JpcHRDb3VudCA8IDIpIHtcbiAgICByZXR1cm4gZnVsbEl0ZW1zXG4gIH1cblxuICBjb25zdCBmaXJzdFRyYW5zY3JpcHRJbmRleCA9IGZ1bGxJdGVtcy5maW5kSW5kZXgoXG4gICAgaXRlbSA9PiBpdGVtLmluZm8ucnBEb2N1bWVudFR5cGUgPT09IFwiVFJBTlNDUklQVFwiLFxuICApXG5cbiAgY29uc3QgZmlsdGVyZWRJdGVtcyA9IGZ1bGxJdGVtcy5maWx0ZXIoXG4gICAgKGl0ZW0sIGlkeCkgPT4gaWR4ID09PSBmaXJzdFRyYW5zY3JpcHRJbmRleCB8fCBpdGVtLmluZm8ucnBEb2N1bWVudFR5cGUgIT09IFwiVFJBTlNDUklQVFwiLFxuICApXG5cbiAgcmV0dXJuIGZpbHRlcmVkSXRlbXNcbn1cblxuZXhwb3J0IHsgZ2V0U29ydGVkVmlzdWFsSXRlbXMgfVxuIl0sIm5hbWVzIjpbImdldFNvcnRlZFZpc3VhbEl0ZW1zIiwidmlzdWFsRGF0YSIsImRvY3VtZW50SWQiLCJtYXBwZWRWaXN1YWxJdGVtcyIsIm1hcCIsImRhdHVtIiwibGFiZWwiLCJwYXJzZVRhYkxhYmVsIiwiaW5mbyIsIml0ZW1JZHgiLCJmaW5kSW5kZXgiLCJpdGVtIiwicnBEb2N1bWVudElkIiwiZmlyc3RJdGVtIiwic3BsaWNlIiwiZnVsbEl0ZW1zIiwidHJhbnNjcmlwdENvdW50IiwicmVkdWNlIiwiYWNjIiwiY3VyIiwicnBEb2N1bWVudFR5cGUiLCJmaXJzdFRyYW5zY3JpcHRJbmRleCIsImZpbHRlcmVkSXRlbXMiLCJmaWx0ZXIiLCJpZHgiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFvRFNBOzs7ZUFBQUE7OzsrQkFoRHFCO0FBRTlCLE1BQU1BLHVCQUF1QixDQUMzQkMsWUFDQUM7SUFFQSxNQUFNQyxvQkFBb0JGLFdBQVdHLEdBQUcsQ0FBQ0MsQ0FBQUEsUUFBVSxDQUFBO1lBQ2pEQyxPQUFPQyxJQUFBQSw0QkFBYSxFQUFDRjtZQUNyQkcsTUFBTUg7UUFDUixDQUFBO0lBRUEsSUFBSSxDQUFDSCxZQUFZO1FBQ2YsT0FBT0M7SUFDVDtJQUVBLE1BQU1NLFVBQVVOLGtCQUFrQk8sU0FBUyxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLSCxJQUFJLENBQUNJLFlBQVksS0FBS1Y7SUFFL0UsSUFBSU8sWUFBWSxDQUFDLEdBQUc7UUFDbEIsT0FBT047SUFDVDtJQUVBLE1BQU1VLFlBQVlWLGlCQUFpQixDQUFDTSxRQUFRO0lBQzVDTixrQkFBa0JXLE1BQU0sQ0FBQ0wsU0FBUztJQUVsQyxNQUFNTSxZQUFZO1FBQUNGO1dBQWNWO0tBQWtCO0lBRW5ELHlFQUF5RTtJQUV6RSxNQUFNYSxrQkFBa0JELFVBQVVFLE1BQU0sQ0FDdEMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBT0MsQ0FBQUEsSUFBSVgsSUFBSSxDQUFDWSxjQUFjLEtBQUssZUFBZSxJQUFJLENBQUEsR0FDcEU7SUFHRixJQUFJSixrQkFBa0IsR0FBRztRQUN2QixPQUFPRDtJQUNUO0lBRUEsTUFBTU0sdUJBQXVCTixVQUFVTCxTQUFTLENBQzlDQyxDQUFBQSxPQUFRQSxLQUFLSCxJQUFJLENBQUNZLGNBQWMsS0FBSztJQUd2QyxNQUFNRSxnQkFBZ0JQLFVBQVVRLE1BQU0sQ0FDcEMsQ0FBQ1osTUFBTWEsTUFBUUEsUUFBUUgsd0JBQXdCVixLQUFLSCxJQUFJLENBQUNZLGNBQWMsS0FBSztJQUc5RSxPQUFPRTtBQUNUIn0=