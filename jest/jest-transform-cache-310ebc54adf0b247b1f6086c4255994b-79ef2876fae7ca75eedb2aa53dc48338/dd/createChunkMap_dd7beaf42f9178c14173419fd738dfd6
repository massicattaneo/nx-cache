db246e98c680651c02f82a86961cd5df
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createChunkMap", {
    enumerable: true,
    get: function() {
        return createChunkMap;
    }
});
const _llmsummary = require("@rp/react/tanstack-api/llm-summary");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const createChunkMap = (traces, sources)=>{
    const chunkMap = {};
    const externalMap = {};
    const sourcesMap = {};
    if (sources) {
        for (const source of sources){
            if ((0, _llmsummary.isLlmDocumentSource)(source)) {
                sourcesMap[source.id] = source;
            }
        }
    }
    for (const trace of traces){
        for (const result of trace.results){
            if (result.type === "EXTERNAL") {
                for (const externalStory of result.values){
                    if (externalStory.id !== undefined) {
                        var _externalMap, _externalStory_id;
                        var _;
                        (_ = (_externalMap = externalMap)[_externalStory_id = externalStory.id]) !== null && _ !== void 0 ? _ : _externalMap[_externalStory_id] = externalStory;
                    }
                }
            }
            if (result.type === "CQS") {
                for (const cqsStory of result.values){
                    for (const chunk of cqsStory.chunks){
                        if (chunk.id !== undefined) {
                            var _chunkMap, _chunk_id;
                            var _1;
                            (_1 = (_chunkMap = chunkMap)[_chunk_id = chunk.id]) !== null && _1 !== void 0 ? _1 : _chunkMap[_chunk_id] = _object_spread_props(_object_spread({}, chunk), {
                                parent: cqsStory,
                                relatedSource: sourcesMap[cqsStory.id]
                            });
                        }
                    }
                }
            }
        }
    }
    return {
        chunkMap,
        externalMap
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlQ2hhdC9jcmVhdGVDaHVua01hcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZWRBdWRpdFRyYWNlIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvY2hhdFwiXG5pbXBvcnQge1xuICBMbG1Eb2N1bWVudFNvdXJjZSxcbiAgTGxtU291cmNlc01lc3NhZ2UsXG4gIGlzTGxtRG9jdW1lbnRTb3VyY2UsXG59IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2xsbS1zdW1tYXJ5XCJcbmltcG9ydCB7IENodW5rTWFwLCBFeHRlcm5hbE1hcCB9IGZyb20gXCIuL3VzZUNoYXQudHlwZXNcIlxuXG5jb25zdCBjcmVhdGVDaHVua01hcCA9IChcbiAgdHJhY2VzOiBBcnJheTxTdG9yZWRBdWRpdFRyYWNlPixcbiAgc291cmNlcz86IExsbVNvdXJjZXNNZXNzYWdlW1wib3JpZ2luU291cmNlc1wiXSxcbikgPT4ge1xuICBjb25zdCBjaHVua01hcDogQ2h1bmtNYXAgPSB7fVxuICBjb25zdCBleHRlcm5hbE1hcDogRXh0ZXJuYWxNYXAgPSB7fVxuXG4gIGNvbnN0IHNvdXJjZXNNYXA6IFJlY29yZDxzdHJpbmcsIExsbURvY3VtZW50U291cmNlPiA9IHt9XG5cbiAgaWYgKHNvdXJjZXMpIHtcbiAgICBmb3IgKGNvbnN0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICBpZiAoaXNMbG1Eb2N1bWVudFNvdXJjZShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZXNNYXBbc291cmNlLmlkXSA9IHNvdXJjZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgdHJhY2Ugb2YgdHJhY2VzKSB7XG4gICAgZm9yIChjb25zdCByZXN1bHQgb2YgdHJhY2UucmVzdWx0cykge1xuICAgICAgaWYgKHJlc3VsdC50eXBlID09PSBcIkVYVEVSTkFMXCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBleHRlcm5hbFN0b3J5IG9mIHJlc3VsdC52YWx1ZXMpIHtcbiAgICAgICAgICBpZiAoZXh0ZXJuYWxTdG9yeS5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBleHRlcm5hbE1hcFtleHRlcm5hbFN0b3J5LmlkXSA/Pz0gZXh0ZXJuYWxTdG9yeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0LnR5cGUgPT09IFwiQ1FTXCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBjcXNTdG9yeSBvZiByZXN1bHQudmFsdWVzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBjcXNTdG9yeS5jaHVua3MpIHtcbiAgICAgICAgICAgIGlmIChjaHVuay5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNodW5rTWFwW2NodW5rLmlkXSA/Pz0ge1xuICAgICAgICAgICAgICAgIC4uLmNodW5rLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3FzU3RvcnksXG4gICAgICAgICAgICAgICAgcmVsYXRlZFNvdXJjZTogc291cmNlc01hcFtjcXNTdG9yeS5pZF0sXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjaHVua01hcCwgZXh0ZXJuYWxNYXAgfVxufVxuXG5leHBvcnQgeyBjcmVhdGVDaHVua01hcCB9XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2h1bmtNYXAiLCJ0cmFjZXMiLCJzb3VyY2VzIiwiY2h1bmtNYXAiLCJleHRlcm5hbE1hcCIsInNvdXJjZXNNYXAiLCJzb3VyY2UiLCJpc0xsbURvY3VtZW50U291cmNlIiwiaWQiLCJ0cmFjZSIsInJlc3VsdCIsInJlc3VsdHMiLCJ0eXBlIiwiZXh0ZXJuYWxTdG9yeSIsInZhbHVlcyIsInVuZGVmaW5lZCIsImNxc1N0b3J5IiwiY2h1bmsiLCJjaHVua3MiLCJwYXJlbnQiLCJyZWxhdGVkU291cmNlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFzRFNBOzs7ZUFBQUE7Ozs0QkFqREY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR1AsTUFBTUEsaUJBQWlCLENBQ3JCQyxRQUNBQztJQUVBLE1BQU1DLFdBQXFCLENBQUM7SUFDNUIsTUFBTUMsY0FBMkIsQ0FBQztJQUVsQyxNQUFNQyxhQUFnRCxDQUFDO0lBRXZELElBQUlILFNBQVM7UUFDWCxLQUFLLE1BQU1JLFVBQVVKLFFBQVM7WUFDNUIsSUFBSUssSUFBQUEsK0JBQW1CLEVBQUNELFNBQVM7Z0JBQy9CRCxVQUFVLENBQUNDLE9BQU9FLEVBQUUsQ0FBQyxHQUFHRjtZQUMxQjtRQUNGO0lBQ0Y7SUFFQSxLQUFLLE1BQU1HLFNBQVNSLE9BQVE7UUFDMUIsS0FBSyxNQUFNUyxVQUFVRCxNQUFNRSxPQUFPLENBQUU7WUFDbEMsSUFBSUQsT0FBT0UsSUFBSSxLQUFLLFlBQVk7Z0JBQzlCLEtBQUssTUFBTUMsaUJBQWlCSCxPQUFPSSxNQUFNLENBQUU7b0JBQ3pDLElBQUlELGNBQWNMLEVBQUUsS0FBS08sV0FBVzs0QkFDbENYLGNBQVlTOzt3QkFBWlQsTUFBQUEsZUFBQUEsWUFBVyxDQUFDUyxvQkFBQUEsY0FBY0wsRUFBRSxDQUFDLGlDQUE3QkosWUFBVyxDQUFDUyxrQkFBaUIsR0FBS0E7b0JBQ3BDO2dCQUNGO1lBQ0Y7WUFFQSxJQUFJSCxPQUFPRSxJQUFJLEtBQUssT0FBTztnQkFDekIsS0FBSyxNQUFNSSxZQUFZTixPQUFPSSxNQUFNLENBQUU7b0JBQ3BDLEtBQUssTUFBTUcsU0FBU0QsU0FBU0UsTUFBTSxDQUFFO3dCQUNuQyxJQUFJRCxNQUFNVCxFQUFFLEtBQUtPLFdBQVc7Z0NBQzFCWixXQUFTYzs7NEJBQVRkLE9BQUFBLFlBQUFBLFNBQVEsQ0FBQ2MsWUFBQUEsTUFBTVQsRUFBRSxDQUFDLG1DQUFsQkwsU0FBUSxDQUFDYyxVQUFTLEdBQUssd0NBQ2xCQTtnQ0FDSEUsUUFBUUg7Z0NBQ1JJLGVBQWVmLFVBQVUsQ0FBQ1csU0FBU1IsRUFBRSxDQUFDOzt3QkFFMUM7b0JBQ0Y7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxPQUFPO1FBQUVMO1FBQVVDO0lBQVk7QUFDakMifQ==