9d88c1161fd73164da0e50c49c1e0d98
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FeedbackProvider: function() {
        return FeedbackProvider;
    },
    useFeedbackContext: function() {
        return useFeedbackContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _reactrouterdom = require("react-router-dom");
const _hooks = require("@rp/react/web/common/hooks");
const _feedbacktypes = require("./feedback.types");
const _useRankingTypes = require("./useRankingTypes");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getSearchIntent = (value)=>{
    const isSearchIntent = _feedbacktypes.searchIntentOptions.find((option)=>option.value === value);
    if (isSearchIntent) return value;
    return _feedbacktypes.searchIntentOptions[0].value;
};
const getPersonaType = (value)=>{
    const isPersonaType = _feedbacktypes.userTypeOptions.find((option)=>option.value === value);
    if (isPersonaType) return value;
    return _feedbacktypes.userTypeOptions[0].value;
};
const getPersonaSubType = (value)=>{
    const isPersonaSubType = _feedbacktypes.subTypeOptions.find((option)=>option.value === value);
    if (isPersonaSubType) return value;
    return _feedbacktypes.subTypeOptions[0].value;
};
const SEARCH_INTENT = "fsi";
const PERSONA_TYPE = "ft";
const PERSONA_SUBTYPE = "fst";
const DESCRIPTION = "fd";
const FeedbackContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const FeedbackProvider = ({ children, queryRanking, isFeedbackMode = false, setIsFeedbackMode, savedQuery, onUpdate })=>{
    const query = (0, _hooks.useQueryParams)();
    const [searchParams] = (0, _reactrouterdom.useSearchParams)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const [open, setOpen] = (0, _react.useState)(false);
    var _query_get;
    const querySearchIntent = (_query_get = query.get(SEARCH_INTENT)) !== null && _query_get !== void 0 ? _query_get : "";
    var _query_get1;
    const queryPersonaType = (_query_get1 = query.get(PERSONA_TYPE)) !== null && _query_get1 !== void 0 ? _query_get1 : "";
    var _query_get2;
    const queryPersonaSubType = (_query_get2 = query.get(PERSONA_SUBTYPE)) !== null && _query_get2 !== void 0 ? _query_get2 : "";
    var _query_get3;
    const queryDescription = (_query_get3 = query.get(DESCRIPTION)) !== null && _query_get3 !== void 0 ? _query_get3 : "";
    const { data } = (0, _useRankingTypes.useRankingTypes)(isFeedbackMode);
    // Feedback parameters
    const [rankingProfiles, setRankingProfiles] = (0, _react.useState)([]);
    const [rankingMode, setRankingMode] = (0, _react.useState)("");
    const [searchIntent, setSearchIntent] = (0, _react.useState)(getSearchIntent(querySearchIntent));
    const [userType, setUserType] = (0, _react.useState)(getPersonaType(queryPersonaType));
    const [subType, setSubType] = (0, _react.useState)(getPersonaSubType(queryPersonaSubType));
    const [description, setDescription] = (0, _react.useState)(queryDescription);
    const updateQueryRanking = (ranking)=>{
        if (!savedQuery) return;
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate({
            id: savedQuery.id,
            fields: {
                query: _object_spread_props(_object_spread({}, savedQuery.query), {
                    ranking
                })
            }
        });
    };
    (0, _react.useEffect)(()=>{
        if (queryRanking) {
            setRankingMode(queryRanking);
        }
    }, [
        queryRanking
    ]);
    (0, _react.useEffect)(()=>{
        if (isFeedbackMode && searchParams.get(SEARCH_INTENT) === searchIntent && searchParams.get(PERSONA_TYPE) === userType && searchParams.get(PERSONA_SUBTYPE) === subType && searchParams.get(DESCRIPTION) === description) return;
        if (isFeedbackMode) {
            const search = _qs.default.stringify({
                [SEARCH_INTENT]: searchIntent,
                [PERSONA_TYPE]: userType,
                [PERSONA_SUBTYPE]: subType,
                [DESCRIPTION]: description
            }, {
                encodeValuesOnly: true
            });
            navigate({
                search
            }, {
                replace: true
            });
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        searchIntent,
        userType,
        subType,
        description,
        isFeedbackMode,
        navigate
    ]);
    (0, _react.useEffect)(()=>{
        if (data === null || data === void 0 ? void 0 : data.results) {
            setRankingProfiles(data.results);
        }
    }, [
        data
    ]);
    // Remove the query params "feedback" and clear all
    const clear = ()=>{
        query.delete("feedback");
        navigate({
            search: query.toString()
        }, {
            replace: true
        });
        setIsFeedbackMode === null || setIsFeedbackMode === void 0 ? void 0 : setIsFeedbackMode(false);
        setOpen(false);
    };
    const feedbackMode = {
        // Parameters (to send along useUpdateStoryCardFeedback)
        rankingMode,
        setRankingMode,
        updateQueryRanking,
        searchIntent,
        setSearchIntent,
        userType,
        setUserType,
        subType,
        setSubType,
        description,
        setDescription,
        rankingProfiles,
        // Status
        isFeedbackMode,
        clear,
        // Drawer
        open,
        setOpen,
        savedQuery
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(FeedbackContext.Provider, {
        value: feedbackMode,
        children: children
    });
};
const useFeedbackContext = ()=>{
    const context = (0, _react.useContext)(FeedbackContext);
    if (!context) {
        throw new Error("useFeedbackContext must be used within a FeedbackProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,