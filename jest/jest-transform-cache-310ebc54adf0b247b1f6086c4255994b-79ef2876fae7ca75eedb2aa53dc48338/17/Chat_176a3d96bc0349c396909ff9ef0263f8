5c0e784b24c4064327ce18aa426b1a68
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Chat: function() {
        return Chat;
    },
    INTERACTION_CLASS_NAME: function() {
        return INTERACTION_CLASS_NAME;
    },
    getInteractionId: function() {
        return getInteractionId;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _customerio = require("@rp/react/common/customer-io");
const _chat = require("@rp/react/tanstack-api/chat");
const _llmsummary = require("@rp/react/tanstack-api/llm-summary");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _ChatContextDisplay = require("../Chat/ChatContext/ChatContextDisplay");
const _ChatFileContextDisplay = require("../Chat/ChatContext/ChatFileContextDisplay");
const _ChatResponse = require("../Chat/ChatResponse/ChatResponse");
const _UserInput = require("../Chat/UserInput/UserInput");
const _ChatDataProvider = require("../ChatDataProvider/ChatDataProvider");
const _scrollToLastInteraction = require("../scrollToLastInteraction");
const _ChatCopyNotice = require("./ChatCopyNotice");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getInteractionId = (id)=>{
    return `interaction-${id}`;
};
const INTERACTION_CLASS_NAME = "interaction-list-element";
const Chat = ({ chat, userInitials, onResponseComplete, onRegenerateResponse, onEdit, renderCard, auditMode, fileContext, scope, areMetricsEnabled, filesIds, currentInteraction, onError, getTimings, onChatFeedbackSuccess, chatFeedback, watchlistId, addPrompt, useMasterRouter, webSocketUrl, variant, onAuditTrailScroll, scrollContainer, moreActions, parentScrollContainer })=>{
    const { ui: { isEditable } } = (0, _ChatDataProvider.useChatDataContext)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const { id, interactions } = chat !== null && chat !== void 0 ? chat : {
        id: undefined,
        interactions: []
    };
    const [openTraces, setOpenTraces] = (0, _react.useState)({});
    const paddingBottom = isMobile ? 24 : 16;
    const scopedPaddingBottom = scope || filesIds.length > 0 || watchlistId !== undefined ? paddingBottom + 9 : paddingBottom;
    const { chatFeedbackModal } = (0, _providers.useModal)();
    const { enqueueSuccess } = (0, _providers.useSnackbar)();
    const onChatFeedback = ({ feedbackSentiment, interactionTimestamp })=>{
        const interaction = interactions.find((interaction)=>interaction.interactionTimestamp === interactionTimestamp);
        if (!chat || !interaction) return;
        chatFeedbackModal.handleOpen({
            feedbackSentiment,
            interaction,
            onSubmit: ({ feedbackComment, feedbackTags })=>{
                onChatFeedbackSuccess({
                    feedbackSentiment,
                    interactionTimestamp
                });
                enqueueSuccess("Thanks for your feedback");
                _customerio.chatCustomerIo.userFeedback({
                    feedbackSentiment,
                    chatId: chat.id,
                    interactionTimestamp,
                    feedbackComment,
                    feedbackTags
                });
            }
        });
    };
    const toggleTraces = (0, _react.useCallback)((interactionIndex)=>{
        setOpenTraces((prev)=>{
            const currentValue = prev[interactionIndex];
            return _object_spread_props(_object_spread({}, prev), {
                [interactionIndex]: currentValue ? !currentValue : true
            });
        });
    }, []);
    if (!chat && !currentInteraction) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
            sx: {
                display: "flex",
                justifyContent: "center",
                mt: 10
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {})
        });
    }
    var _currentInteraction_displayedMessage;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        children: [
            isEditable ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatCopyNotice.ChatCopyNotice, {}),
            fileContext ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatFileContextDisplay.ChatFileContextDisplay, {
                filesIds: fileContext.filesIds,
                isChatEmpty: false
            }) : null,
            interactions.filter((_, index)=>(currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index) !== index).map((interaction, index)=>{
                var _interaction_responseBlocks;
                const isLastInteraction = index === interactions.length - 1 && !currentInteraction;
                const isWorkflowInteraction = interaction.origin.type === "flow";
                if (!(0, _chat.isUserInteraction)(interaction)) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatContextDisplay.ChatContextDisplay, {
                        context: {
                            title: interaction.inputMessage,
                            summary: interaction.responseMessage,
                            originSources: interaction.originSources.filter(_llmsummary.isLlmStandardSource)
                        },
                        isChatEmpty: interactions.find((interaction)=>interaction.origin.type === "user_message") === undefined
                    }, interaction.interactionTimestamp);
                }
                var _interaction_responseBlock, _interaction_responseBlocks1, _interaction_auditBlocks;
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    className: `${INTERACTION_CLASS_NAME} ${getInteractionId(interaction.interactionTimestamp)}`,
                    sx: {
                        minHeight: isLastInteraction ? `calc(100dvh - 80px)` : 0,
                        pb: isLastInteraction ? scopedPaddingBottom : 0,
                        maxWidth: 700,
                        mx: "auto"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_UserInput.UserInput, {
                            variant: variant,
                            userInitials: userInitials,
                            onEdit: isLastInteraction && isEditable && !isWorkflowInteraction ? onEdit : undefined,
                            disableScroll: true,
                            children: interaction.inputMessage
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatResponse.ChatResponse, {
                            onAuditTrailScroll: onAuditTrailScroll,
                            variant: variant,
                            useMasterRouter: useMasterRouter,
                            areTracesOpen: openTraces[index],
                            setTraceOpen: ()=>toggleTraces(index),
                            chatFeedback: chatFeedback,
                            type: "history",
                            chatId: id !== null && id !== void 0 ? id : "",
                            interactionId: interaction.interactionTimestamp,
                            onRegenerateResponse: isLastInteraction && !isWorkflowInteraction ? (summary)=>onRegenerateResponse({
                                    summary,
                                    isCurrentInteraction: false
                                }) : undefined,
                            renderCard: renderCard,
                            auditMode: auditMode,
                            areMetricsEnabled: areMetricsEnabled,
                            responseBlock: (_interaction_responseBlock = interaction.responseBlock) !== null && _interaction_responseBlock !== void 0 ? _interaction_responseBlock : (_interaction_responseBlocks = interaction.responseBlocks) === null || _interaction_responseBlocks === void 0 ? void 0 : _interaction_responseBlocks[0],
                            auditTraces: interaction.auditTraces ? interaction.auditTraces : [],
                            sources: interaction.originSources,
                            onChatFeedback: onChatFeedback,
                            timings: getTimings(interaction.interactionTimestamp),
                            metadata: interaction.originSourcesMetadata,
                            scope: interaction.scope,
                            responseBlocks: (_interaction_responseBlocks1 = interaction.responseBlocks) !== null && _interaction_responseBlocks1 !== void 0 ? _interaction_responseBlocks1 : [
                                interaction.responseBlock
                            ],
                            auditBlocks: (_interaction_auditBlocks = interaction.auditBlocks) !== null && _interaction_auditBlocks !== void 0 ? _interaction_auditBlocks : [],
                            moreActions: index === interactions.length - 1 ? moreActions : undefined,
                            watchlistId: chat === null || chat === void 0 ? void 0 : chat.scopeWatchlistId,
                            showBriefBanner: (chat === null || chat === void 0 ? void 0 : chat.interactions.length) === 1 && chat.interactions[0].originSources.length > 0 && chat.interactions[0].origin.type === "watchlist",
                            parentScrollContainer: parentScrollContainer
                        })
                    ]
                }, interaction.interactionTimestamp);
            }),
            currentInteraction && id ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                className: INTERACTION_CLASS_NAME,
                sx: {
                    minHeight: `calc(100dvh - ${_scrollToLastInteraction.CHAT_SCROLL_TOP_OFFSET}px)`,
                    pb: scopedPaddingBottom,
                    maxWidth: 700,
                    mx: "auto",
                    opacity: interactions.length === currentInteraction.index + 1 ? 0 : 1
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_UserInput.UserInput, {
                        variant: variant,
                        userInitials: userInitials,
                        disableScroll: currentInteraction.index === 0,
                        onEdit: currentInteraction.stopped ? addPrompt : undefined,
                        scrollContainer: scrollContainer,
                        children: (_currentInteraction_displayedMessage = currentInteraction.displayedMessage) !== null && _currentInteraction_displayedMessage !== void 0 ? _currentInteraction_displayedMessage : currentInteraction.userInput
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatResponse.ChatResponse, {
                        onAuditTrailScroll: onAuditTrailScroll,
                        variant: variant,
                        useMasterRouter: useMasterRouter,
                        type: "current",
                        chatId: id,
                        chatFeedback: chatFeedback,
                        onStreamingComplete: (id, response)=>onResponseComplete(id, response),
                        onError: onError,
                        renderCard: renderCard,
                        auditMode: auditMode,
                        stopped: currentInteraction.stopped,
                        scope: typeof scope === "string" ? scope : undefined,
                        areMetricsEnabled: areMetricsEnabled,
                        filesIds: filesIds,
                        liveInteraction: currentInteraction,
                        stopGenerating: ()=>{},
                        watchlistId: watchlistId,
                        webSocketUrl: webSocketUrl,
                        onRegenerateResponse: (summary)=>onRegenerateResponse({
                                summary,
                                isCurrentInteraction: true
                            }),
                        areTracesOpen: openTraces[currentInteraction.index],
                        setTraceOpen: ()=>toggleTraces(currentInteraction.index)
                    })
                ]
            }, `${currentInteraction.index}-${currentInteraction.iteration}`) : null
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,