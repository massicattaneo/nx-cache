e57db55832015f7b8e0c46e4de2732cc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkForDuplicates: function() {
        return checkForDuplicates;
    },
    getSizeAndUnit: function() {
        return getSizeAndUnit;
    },
    mapServerFilesForTable: function() {
        return _utils.mapServerFilesForTable;
    },
    mapUploadingFilesForTable: function() {
        return _utils.mapUploadingFilesForTable;
    },
    removeDuplicates: function() {
        return removeDuplicates;
    }
});
const _utils = require("@rp/common/utils");
const getSizeAndUnit = (bytes, failed)=>{
    if (failed) return "0 bytes";
    if (bytes / 1024 / 1024 > 999.9) return `${(bytes / 1024 / 1024 / 1024).toFixed(2)} GB`;
    if (bytes / 1024 > 999.9) return `${(bytes / 1024 / 1024).toFixed(1)} MB`;
    if (bytes > 999) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${bytes} bytes`;
};
function removeDuplicates(items, key) {
    const map = new Map();
    for (const item of items){
        map.set(item[key], item);
    }
    return Array.from(map.values());
}
const checkForDuplicates = (serverFiles, uploading, fn)=>{
    uploading.forEach((uploadingFile)=>{
        serverFiles.forEach((serverFile)=>{
            if (serverFile.id === uploadingFile.fileId) {
                fn(uploadingFile);
            }
        });
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9maWxlcy9zcmMvbGliL2ZpbGVzLnV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZpbGVSb3dUeXBlLFxuICBGaWxlU2l6ZSxcbiAgVXBsb2FkYWJsZSxcbiAgbWFwU2VydmVyRmlsZXNGb3JUYWJsZSxcbiAgbWFwVXBsb2FkaW5nRmlsZXNGb3JUYWJsZSxcbn0gZnJvbSBcIkBycC9jb21tb24vdXRpbHNcIlxuXG5jb25zdCBnZXRTaXplQW5kVW5pdCA9IChieXRlczogRmlsZVNpemUsIGZhaWxlZDogYm9vbGVhbikgPT4ge1xuICBpZiAoZmFpbGVkKSByZXR1cm4gXCIwIGJ5dGVzXCJcbiAgaWYgKGJ5dGVzIC8gMTAyNCAvIDEwMjQgPiA5OTkuOSkgcmV0dXJuIGAkeyhieXRlcyAvIDEwMjQgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKX0gR0JgXG4gIGlmIChieXRlcyAvIDEwMjQgPiA5OTkuOSkgcmV0dXJuIGAkeyhieXRlcyAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDEpfSBNQmBcbiAgaWYgKGJ5dGVzID4gOTk5KSByZXR1cm4gYCR7KGJ5dGVzIC8gMTAyNCkudG9GaXhlZCgxKX0gS0JgXG4gIHJldHVybiBgJHtieXRlc30gYnl0ZXNgXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXM8VEl0ZW0+KGl0ZW1zOiBBcnJheTxUSXRlbT4sIGtleToga2V5b2YgVEl0ZW0pOiBBcnJheTxUSXRlbT4ge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwPFRJdGVtW2tleW9mIFRJdGVtXSwgVEl0ZW0+KClcbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgbWFwLnNldChpdGVtW2tleV0sIGl0ZW0pXG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20obWFwLnZhbHVlcygpKVxufVxuXG5jb25zdCBjaGVja0ZvckR1cGxpY2F0ZXMgPSAoXG4gIHNlcnZlckZpbGVzOiBBcnJheTxGaWxlUm93VHlwZT4sXG4gIHVwbG9hZGluZzogQXJyYXk8VXBsb2FkYWJsZT4sXG4gIGZuOiAoZmlsZTogVXBsb2FkYWJsZSkgPT4gdm9pZCxcbikgPT4ge1xuICB1cGxvYWRpbmcuZm9yRWFjaCh1cGxvYWRpbmdGaWxlID0+IHtcbiAgICBzZXJ2ZXJGaWxlcy5mb3JFYWNoKHNlcnZlckZpbGUgPT4ge1xuICAgICAgaWYgKHNlcnZlckZpbGUuaWQgPT09IHVwbG9hZGluZ0ZpbGUuZmlsZUlkKSB7XG4gICAgICAgIGZuKHVwbG9hZGluZ0ZpbGUpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IHtcbiAgZ2V0U2l6ZUFuZFVuaXQsXG4gIGNoZWNrRm9yRHVwbGljYXRlcyxcbiAgbWFwU2VydmVyRmlsZXNGb3JUYWJsZSxcbiAgbWFwVXBsb2FkaW5nRmlsZXNGb3JUYWJsZSxcbiAgcmVtb3ZlRHVwbGljYXRlcyxcbn1cbiJdLCJuYW1lcyI6WyJjaGVja0ZvckR1cGxpY2F0ZXMiLCJnZXRTaXplQW5kVW5pdCIsIm1hcFNlcnZlckZpbGVzRm9yVGFibGUiLCJtYXBVcGxvYWRpbmdGaWxlc0ZvclRhYmxlIiwicmVtb3ZlRHVwbGljYXRlcyIsImJ5dGVzIiwiZmFpbGVkIiwidG9GaXhlZCIsIml0ZW1zIiwia2V5IiwibWFwIiwiTWFwIiwiaXRlbSIsInNldCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInNlcnZlckZpbGVzIiwidXBsb2FkaW5nIiwiZm4iLCJmb3JFYWNoIiwidXBsb2FkaW5nRmlsZSIsInNlcnZlckZpbGUiLCJpZCIsImZpbGVJZCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF3Q0VBLGtCQUFrQjtlQUFsQkE7O0lBREFDLGNBQWM7ZUFBZEE7O0lBRUFDLHNCQUFzQjtlQUF0QkEsNkJBQXNCOztJQUN0QkMseUJBQXlCO2VBQXpCQSxnQ0FBeUI7O0lBQ3pCQyxnQkFBZ0I7ZUFBaEJBOzs7dUJBckNLO0FBRVAsTUFBTUgsaUJBQWlCLENBQUNJLE9BQWlCQztJQUN2QyxJQUFJQSxRQUFRLE9BQU87SUFDbkIsSUFBSUQsUUFBUSxPQUFPLE9BQU8sT0FBTyxPQUFPLENBQUMsRUFBRSxBQUFDQSxDQUFBQSxRQUFRLE9BQU8sT0FBTyxJQUFHLEVBQUdFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN2RixJQUFJRixRQUFRLE9BQU8sT0FBTyxPQUFPLENBQUMsRUFBRSxBQUFDQSxDQUFBQSxRQUFRLE9BQU8sSUFBRyxFQUFHRSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDekUsSUFBSUYsUUFBUSxLQUFLLE9BQU8sQ0FBQyxFQUFFLEFBQUNBLENBQUFBLFFBQVEsSUFBRyxFQUFHRSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDekQsT0FBTyxDQUFDLEVBQUVGLE1BQU0sTUFBTSxDQUFDO0FBQ3pCO0FBRUEsU0FBU0QsaUJBQXdCSSxLQUFtQixFQUFFQyxHQUFnQjtJQUNwRSxNQUFNQyxNQUFNLElBQUlDO0lBQ2hCLEtBQUssTUFBTUMsUUFBUUosTUFBTztRQUN4QkUsSUFBSUcsR0FBRyxDQUFDRCxJQUFJLENBQUNILElBQUksRUFBRUc7SUFDckI7SUFDQSxPQUFPRSxNQUFNQyxJQUFJLENBQUNMLElBQUlNLE1BQU07QUFDOUI7QUFFQSxNQUFNaEIscUJBQXFCLENBQ3pCaUIsYUFDQUMsV0FDQUM7SUFFQUQsVUFBVUUsT0FBTyxDQUFDQyxDQUFBQTtRQUNoQkosWUFBWUcsT0FBTyxDQUFDRSxDQUFBQTtZQUNsQixJQUFJQSxXQUFXQyxFQUFFLEtBQUtGLGNBQWNHLE1BQU0sRUFBRTtnQkFDMUNMLEdBQUdFO1lBQ0w7UUFDRjtJQUNGO0FBQ0YifQ==