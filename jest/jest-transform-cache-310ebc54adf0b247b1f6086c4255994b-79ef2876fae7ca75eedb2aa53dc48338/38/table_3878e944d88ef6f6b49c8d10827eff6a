5f39a639549813dc5b3f0a2cfe10e654
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Table} Table
 * @typedef {import('../state.js').State} State
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "table", {
    enumerable: true,
    get: function() {
        return table;
    }
});
const _unistutilposition = require("unist-util-position");
function table(state, node) {
    const rows = state.all(node);
    const firstRow = rows.shift();
    /** @type {Array<Element>} */ const tableContent = [];
    if (firstRow) {
        /** @type {Element} */ const head = {
            type: 'element',
            tagName: 'thead',
            properties: {},
            children: state.wrap([
                firstRow
            ], true)
        };
        state.patch(node.children[0], head);
        tableContent.push(head);
    }
    if (rows.length > 0) {
        /** @type {Element} */ const body = {
            type: 'element',
            tagName: 'tbody',
            properties: {},
            children: state.wrap(rows, true)
        };
        const start = (0, _unistutilposition.pointStart)(node.children[1]);
        const end = (0, _unistutilposition.pointEnd)(node.children[node.children.length - 1]);
        if (start && end) body.position = {
            start,
            end
        };
        tableContent.push(body);
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: 'table',
        properties: {},
        children: state.wrap(tableContent, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuVGFibGV9IFRhYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7cG9pbnRFbmQsIHBvaW50U3RhcnR9IGZyb20gJ3VuaXN0LXV0aWwtcG9zaXRpb24nXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgdGFibGVgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGFibGV9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWJsZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCByb3dzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGNvbnN0IGZpcnN0Um93ID0gcm93cy5zaGlmdCgpXG4gIC8qKiBAdHlwZSB7QXJyYXk8RWxlbWVudD59ICovXG4gIGNvbnN0IHRhYmxlQ29udGVudCA9IFtdXG5cbiAgaWYgKGZpcnN0Um93KSB7XG4gICAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICAgIGNvbnN0IGhlYWQgPSB7XG4gICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICB0YWdOYW1lOiAndGhlYWQnLFxuICAgICAgcHJvcGVydGllczoge30sXG4gICAgICBjaGlsZHJlbjogc3RhdGUud3JhcChbZmlyc3RSb3ddLCB0cnVlKVxuICAgIH1cbiAgICBzdGF0ZS5wYXRjaChub2RlLmNoaWxkcmVuWzBdLCBoZWFkKVxuICAgIHRhYmxlQ29udGVudC5wdXNoKGhlYWQpXG4gIH1cblxuICBpZiAocm93cy5sZW5ndGggPiAwKSB7XG4gICAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICB0YWdOYW1lOiAndGJvZHknLFxuICAgICAgcHJvcGVydGllczoge30sXG4gICAgICBjaGlsZHJlbjogc3RhdGUud3JhcChyb3dzLCB0cnVlKVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0ID0gcG9pbnRTdGFydChub2RlLmNoaWxkcmVuWzFdKVxuICAgIGNvbnN0IGVuZCA9IHBvaW50RW5kKG5vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXSlcbiAgICBpZiAoc3RhcnQgJiYgZW5kKSBib2R5LnBvc2l0aW9uID0ge3N0YXJ0LCBlbmR9XG4gICAgdGFibGVDb250ZW50LnB1c2goYm9keSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndGFibGUnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHRhYmxlQ29udGVudCwgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIl0sIm5hbWVzIjpbInRhYmxlIiwic3RhdGUiLCJub2RlIiwicm93cyIsImFsbCIsImZpcnN0Um93Iiwic2hpZnQiLCJ0YWJsZUNvbnRlbnQiLCJoZWFkIiwidHlwZSIsInRhZ05hbWUiLCJwcm9wZXJ0aWVzIiwiY2hpbGRyZW4iLCJ3cmFwIiwicGF0Y2giLCJwdXNoIiwibGVuZ3RoIiwiYm9keSIsInN0YXJ0IiwicG9pbnRTdGFydCIsImVuZCIsInBvaW50RW5kIiwicG9zaXRpb24iLCJyZXN1bHQiLCJhcHBseURhdGEiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDOzs7OytCQWNlQTs7O2VBQUFBOzs7bUNBWm1CO0FBWTVCLFNBQVNBLE1BQU1DLEtBQUssRUFBRUMsSUFBSTtJQUMvQixNQUFNQyxPQUFPRixNQUFNRyxHQUFHLENBQUNGO0lBQ3ZCLE1BQU1HLFdBQVdGLEtBQUtHLEtBQUs7SUFDM0IsMkJBQTJCLEdBQzNCLE1BQU1DLGVBQWUsRUFBRTtJQUV2QixJQUFJRixVQUFVO1FBQ1osb0JBQW9CLEdBQ3BCLE1BQU1HLE9BQU87WUFDWEMsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLFlBQVksQ0FBQztZQUNiQyxVQUFVWCxNQUFNWSxJQUFJLENBQUM7Z0JBQUNSO2FBQVMsRUFBRTtRQUNuQztRQUNBSixNQUFNYSxLQUFLLENBQUNaLEtBQUtVLFFBQVEsQ0FBQyxFQUFFLEVBQUVKO1FBQzlCRCxhQUFhUSxJQUFJLENBQUNQO0lBQ3BCO0lBRUEsSUFBSUwsS0FBS2EsTUFBTSxHQUFHLEdBQUc7UUFDbkIsb0JBQW9CLEdBQ3BCLE1BQU1DLE9BQU87WUFDWFIsTUFBTTtZQUNOQyxTQUFTO1lBQ1RDLFlBQVksQ0FBQztZQUNiQyxVQUFVWCxNQUFNWSxJQUFJLENBQUNWLE1BQU07UUFDN0I7UUFFQSxNQUFNZSxRQUFRQyxJQUFBQSw2QkFBVSxFQUFDakIsS0FBS1UsUUFBUSxDQUFDLEVBQUU7UUFDekMsTUFBTVEsTUFBTUMsSUFBQUEsMkJBQVEsRUFBQ25CLEtBQUtVLFFBQVEsQ0FBQ1YsS0FBS1UsUUFBUSxDQUFDSSxNQUFNLEdBQUcsRUFBRTtRQUM1RCxJQUFJRSxTQUFTRSxLQUFLSCxLQUFLSyxRQUFRLEdBQUc7WUFBQ0o7WUFBT0U7UUFBRztRQUM3Q2IsYUFBYVEsSUFBSSxDQUFDRTtJQUNwQjtJQUVBLG9CQUFvQixHQUNwQixNQUFNTSxTQUFTO1FBQ2JkLE1BQU07UUFDTkMsU0FBUztRQUNUQyxZQUFZLENBQUM7UUFDYkMsVUFBVVgsTUFBTVksSUFBSSxDQUFDTixjQUFjO0lBQ3JDO0lBQ0FOLE1BQU1hLEtBQUssQ0FBQ1osTUFBTXFCO0lBQ2xCLE9BQU90QixNQUFNdUIsU0FBUyxDQUFDdEIsTUFBTXFCO0FBQy9CIn0=