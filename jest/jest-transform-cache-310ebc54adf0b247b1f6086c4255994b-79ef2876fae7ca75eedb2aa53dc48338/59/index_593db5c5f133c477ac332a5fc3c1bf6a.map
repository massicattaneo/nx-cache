{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/comma-separated-tokens/index.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n"],"names":["parse","stringify","value","tokens","input","String","index","indexOf","start","end","length","token","slice","trim","push","values","options","settings","join","padRight","padLeft"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;CAOC,GAED;;;CAGC,GAED;;;;;;;CAOC;;;;;;;;;;;IACeA,KAAK;eAALA;;IAsCAC,SAAS;eAATA;;;AAtCT,SAASD,MAAME,KAAK;IACzB,0BAA0B,GAC1B,MAAMC,SAAS,EAAE;IACjB,MAAMC,QAAQC,OAAOH,SAAS;IAC9B,IAAII,QAAQF,MAAMG,OAAO,CAAC;IAC1B,IAAIC,QAAQ;IACZ,oBAAoB,GACpB,IAAIC,MAAM;IAEV,MAAO,CAACA,IAAK;QACX,IAAIH,UAAU,CAAC,GAAG;YAChBA,QAAQF,MAAMM,MAAM;YACpBD,MAAM;QACR;QAEA,MAAME,QAAQP,MAAMQ,KAAK,CAACJ,OAAOF,OAAOO,IAAI;QAE5C,IAAIF,SAAS,CAACF,KAAK;YACjBN,OAAOW,IAAI,CAACH;QACd;QAEAH,QAAQF,QAAQ;QAChBA,QAAQF,MAAMG,OAAO,CAAC,KAAKC;IAC7B;IAEA,OAAOL;AACT;AAYO,SAASF,UAAUc,MAAM,EAAEC,OAAO;IACvC,MAAMC,WAAWD,WAAW,CAAC;IAE7B,uCAAuC;IACvC,MAAMZ,QAAQW,MAAM,CAACA,OAAOL,MAAM,GAAG,EAAE,KAAK,KAAK;WAAIK;QAAQ;KAAG,GAAGA;IAEnE,OAAOX,MACJc,IAAI,CACH,AAACD,CAAAA,SAASE,QAAQ,GAAG,MAAM,EAAC,IAC1B,MACCF,CAAAA,SAASG,OAAO,KAAK,QAAQ,KAAK,GAAE,GAExCP,IAAI;AACT"}