{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistDataTabs/utils/cacheTimeHelper.ts"],"sourcesContent":["import { format } from \"date-fns\"\nimport { utcToZonedTime, zonedTimeToUtc } from \"date-fns-tz\"\nimport { isDefined } from \"@rp/common/utils\"\nimport { financialDataSchemas } from \"@rp/common/zod-contracts/financial-data\"\nimport { useFinancialData } from \"@rp/react/tanstack-api/financial-data\"\n\n/**\n * Calculates the last cache time based on the caching schedule:\n * - Data is cached daily at 8am CET\n * - Then fetched every 3 hours (8am, 11am, 2pm, 5pm, 8pm, 11pm, 2am, 5am CET)\n */\nfunction getLastCacheTime(): Date {\n  const now = new Date()\n  const cetTimeZone = \"Europe/Berlin\"\n  const nowInCET = utcToZonedTime(now, cetTimeZone)\n\n  // Cache times in CET: 8, 11, 14, 17, 20, 23, 2, 5\n  const cacheHours = [2, 5, 8, 11, 14, 17, 20, 23]\n\n  const currentHour = nowInCET.getHours()\n\n  // Find the most recent cache time\n  let lastCacheHour = cacheHours[0] // Default to 2am\n\n  // Find the latest cache hour that has already passed today\n  for (const hour of cacheHours) {\n    if (hour <= currentHour) {\n      lastCacheHour = hour\n    }\n  }\n\n  // If current time is before 2am, use the last cache from previous day (11pm)\n  const cacheTime = new Date(nowInCET)\n  if (currentHour < 2) {\n    cacheTime.setDate(cacheTime.getDate() - 1)\n    cacheTime.setHours(23, 0, 0, 0)\n  } else {\n    cacheTime.setHours(lastCacheHour, 0, 0, 0)\n  }\n\n  // Convert back to UTC for consistent handling\n  return zonedTimeToUtc(cacheTime, cetTimeZone)\n}\n\n/**\n * Creates a header info object for tables showing when data was last cached\n * @param tableName - The display name of the table\n * @returns Header info object with formatted cache time\n */\nfunction createCacheHeaderInfo(tableName: string) {\n  return () => {\n    const lastCacheTime = getLastCacheTime()\n\n    return {\n      text: format(lastCacheTime, `'${tableName} data as of' MMMM dd, yyyy 'at' HH:mm`),\n    }\n  }\n}\n\nfunction createRealTimeHeaderInfo(\n  tableName: string,\n  endpointName: keyof typeof financialDataSchemas,\n) {\n  return (entityIds: Array<{ key: string }>, data: ReturnType<typeof useFinancialData>) => {\n    const lastUpdated = entityIds\n      .filter(entity => !data[entity.key]?.[endpointName]?.isLoading)\n      .filter(entity => !data[entity.key]?.[endpointName]?.isError)\n      .map(entity => data[entity.key]?.[endpointName]?.dataUpdatedAt)\n      .filter(isDefined)\n      .map(date => new Date(date as string | number | Date).getTime())\n\n    if (!lastUpdated.length) return null\n    const value = Math.max(...lastUpdated) - 15 * 60 * 1000 // Subtract 15 minutes for delay\n    return {\n      text: format(value, `'${tableName} data as of' MMMM dd, yyyy 'at' HH:mm`),\n      tooltip: \"Data is delayed by 15 minutes.\",\n    }\n  }\n}\n\nexport { createCacheHeaderInfo, createRealTimeHeaderInfo }\n"],"names":["createCacheHeaderInfo","createRealTimeHeaderInfo","getLastCacheTime","now","Date","cetTimeZone","nowInCET","utcToZonedTime","cacheHours","currentHour","getHours","lastCacheHour","hour","cacheTime","setDate","getDate","setHours","zonedTimeToUtc","tableName","lastCacheTime","text","format","endpointName","entityIds","data","lastUpdated","filter","entity","key","isLoading","isError","map","dataUpdatedAt","isDefined","date","getTime","length","value","Math","max","tooltip"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAgFSA,qBAAqB;eAArBA;;IAAuBC,wBAAwB;eAAxBA;;;yBAhFT;2BACwB;uBACrB;AAI1B;;;;CAIC,GACD,SAASC;IACP,MAAMC,MAAM,IAAIC;IAChB,MAAMC,cAAc;IACpB,MAAMC,WAAWC,IAAAA,yBAAc,EAACJ,KAAKE;IAErC,kDAAkD;IAClD,MAAMG,aAAa;QAAC;QAAG;QAAG;QAAG;QAAI;QAAI;QAAI;QAAI;KAAG;IAEhD,MAAMC,cAAcH,SAASI,QAAQ;IAErC,kCAAkC;IAClC,IAAIC,gBAAgBH,UAAU,CAAC,EAAE,CAAC,iBAAiB;;IAEnD,2DAA2D;IAC3D,KAAK,MAAMI,QAAQJ,WAAY;QAC7B,IAAII,QAAQH,aAAa;YACvBE,gBAAgBC;QAClB;IACF;IAEA,6EAA6E;IAC7E,MAAMC,YAAY,IAAIT,KAAKE;IAC3B,IAAIG,cAAc,GAAG;QACnBI,UAAUC,OAAO,CAACD,UAAUE,OAAO,KAAK;QACxCF,UAAUG,QAAQ,CAAC,IAAI,GAAG,GAAG;IAC/B,OAAO;QACLH,UAAUG,QAAQ,CAACL,eAAe,GAAG,GAAG;IAC1C;IAEA,8CAA8C;IAC9C,OAAOM,IAAAA,yBAAc,EAACJ,WAAWR;AACnC;AAEA;;;;CAIC,GACD,SAASL,sBAAsBkB,SAAiB;IAC9C,OAAO;QACL,MAAMC,gBAAgBjB;QAEtB,OAAO;YACLkB,MAAMC,IAAAA,eAAM,EAACF,eAAe,CAAC,CAAC,EAAED,UAAU,qCAAqC,CAAC;QAClF;IACF;AACF;AAEA,SAASjB,yBACPiB,SAAiB,EACjBI,YAA+C;IAE/C,OAAO,CAACC,WAAmCC;QACzC,MAAMC,cAAcF,UACjBG,MAAM,CAACC,CAAAA;gBAAWH,+BAAAA;mBAAD,GAACA,mBAAAA,IAAI,CAACG,OAAOC,GAAG,CAAC,cAAhBJ,wCAAAA,gCAAAA,gBAAkB,CAACF,aAAa,cAAhCE,oDAAAA,8BAAkCK,SAAS;WAC7DH,MAAM,CAACC,CAAAA;gBAAWH,+BAAAA;mBAAD,GAACA,mBAAAA,IAAI,CAACG,OAAOC,GAAG,CAAC,cAAhBJ,wCAAAA,gCAAAA,gBAAkB,CAACF,aAAa,cAAhCE,oDAAAA,8BAAkCM,OAAO;WAC3DC,GAAG,CAACJ,CAAAA;gBAAUH,+BAAAA;oBAAAA,mBAAAA,IAAI,CAACG,OAAOC,GAAG,CAAC,cAAhBJ,wCAAAA,gCAAAA,gBAAkB,CAACF,aAAa,cAAhCE,oDAAAA,8BAAkCQ,aAAa;WAC7DN,MAAM,CAACO,gBAAS,EAChBF,GAAG,CAACG,CAAAA,OAAQ,IAAI9B,KAAK8B,MAAgCC,OAAO;QAE/D,IAAI,CAACV,YAAYW,MAAM,EAAE,OAAO;QAChC,MAAMC,QAAQC,KAAKC,GAAG,IAAId,eAAe,KAAK,KAAK,KAAK,gCAAgC;;QACxF,OAAO;YACLL,MAAMC,IAAAA,eAAM,EAACgB,OAAO,CAAC,CAAC,EAAEnB,UAAU,qCAAqC,CAAC;YACxEsB,SAAS;QACX;IACF;AACF"}