{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n"],"names":["thematicBreak","name","tokenize","tokenizeThematicBreak","effects","ok","nok","size","marker","start","code","enter","before","atBreak","sequence","markdownLineEnding","exit","consume","markdownSpace","factorySpace"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;CAMC;;;;+BAKYA;;;eAAAA;;;uCAHc;wCACqB;AAEzC,MAAMA,gBAAgB;IAC3BC,MAAM;IACNC,UAAUC;AACZ;AAEA;;;CAGC,GACD,SAASA,sBAAsBC,OAAO,EAAEC,EAAE,EAAEC,GAAG;IAC7C,IAAIC,OAAO;IACX,8BAA8B,GAC9B,IAAIC;IACJ,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,MAAMC,IAAI;QACjBN,QAAQO,KAAK,CAAC;QACd,0CAA0C;QAC1C,OAAOC,OAAOF;IAChB;IAEA;;;;;;;;;GASC,GACD,SAASE,OAAOF,IAAI;QAClBF,SAASE;QACT,OAAOG,QAAQH;IACjB;IAEA;;;;;;;;;GASC,GACD,SAASG,QAAQH,IAAI;QACnB,IAAIA,SAASF,QAAQ;YACnBJ,QAAQO,KAAK,CAAC;YACd,OAAOG,SAASJ;QAClB;QACA,IAAIH,QAAQ,KAAMG,CAAAA,SAAS,QAAQK,IAAAA,0CAAkB,EAACL,KAAI,GAAI;YAC5DN,QAAQY,IAAI,CAAC;YACb,OAAOX,GAAGK;QACZ;QACA,OAAOJ,IAAII;IACb;IAEA;;;;;;;;;GASC,GACD,SAASI,SAASJ,IAAI;QACpB,IAAIA,SAASF,QAAQ;YACnBJ,QAAQa,OAAO,CAACP;YAChBH;YACA,OAAOO;QACT;QACAV,QAAQY,IAAI,CAAC;QACb,OAAOE,IAAAA,qCAAa,EAACR,QACjBS,IAAAA,mCAAY,EAACf,SAASS,SAAS,cAAcH,QAC7CG,QAAQH;IACd;AACF"}