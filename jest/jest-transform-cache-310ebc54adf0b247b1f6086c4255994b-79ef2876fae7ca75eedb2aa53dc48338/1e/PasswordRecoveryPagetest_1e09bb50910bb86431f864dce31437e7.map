{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/PasswordRecovery/PasswordRecoveryPage.test.tsx"],"sourcesContent":["import { HelmetProvider } from \"react-helmet-async\"\nimport { MemoryRouter } from \"react-router-dom\"\nimport { useAuth, useSignIn } from \"@clerk/clerk-react\"\nimport { getClient } from \"@rp/react/axios-api\"\nimport { CqsByIdsProvider } from \"@rp/react/tanstack-api/cqs-by-ids\"\nimport { theme } from \"@rp/react/theme\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport { ThemeProvider } from \"@rp/react/web/theme\"\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\"\nimport { fireEvent, render, waitFor } from \"@testing-library/react\"\nimport { PasswordRecoveryPage } from \"./PasswordRecoveryPage\"\n\nclass FormDataOverride implements FormData {\n  append(): void {}\n  delete(): void {}\n  get(name: string): FormDataEntryValue | null {\n    return name\n  }\n  getAll(): Array<FormDataEntryValue> {\n    return []\n  }\n  has(): boolean {\n    return true\n  }\n  set(): void {}\n  forEach(): void {}\n  entries(): FormDataIterator<[string, FormDataEntryValue]> {\n    return new FormData().entries()\n  }\n  keys(): FormDataIterator<string> {\n    return new FormData().keys()\n  }\n  values(): FormDataIterator<FormDataEntryValue> {\n    return new FormData().values()\n  }\n  [Symbol.iterator](): FormDataIterator<[string, FormDataEntryValue]> {\n    throw new Error(\"Method not implemented.\")\n  }\n}\n\njest.mock(\"react-router-dom\", () => ({\n  ...jest.requireActual(\"react-router-dom\"),\n  useLocation: () => ({\n    pathname: \"/\",\n    hash: \"\",\n  }),\n  useNavigate: () => jest.fn(),\n}))\n\nconst mockUseSnackbar = useSnackbar as jest.Mock\njest.mock(\"@rp/react/web/common/providers\", () => ({\n  ...jest.requireActual(\"@rp/react/web/common/providers\"),\n  useSnackbar: jest.fn(),\n}))\nconst mockEnqueueError = jest.fn()\n\nconst mockUseSignIn = useSignIn as jest.Mock\nconst mockUseAuth = useAuth as jest.Mock\n\ndescribe(\"PasswordRecoveryPage\", () => {\n  it(\"Should render email form and have correct placeholder text in email input field\", async () => {\n    const setActive = jest.fn()\n    const create = jest.fn()\n    const signIn = { create }\n\n    mockUseSignIn.mockReturnValue({ isLoaded: true, signIn, setActive })\n    mockUseAuth.mockReturnValue(() => {\n      return { isSignedIn: true }\n    })\n\n    mockUseSnackbar.mockReturnValue({\n      enqueueError: mockEnqueueError,\n    })\n\n    const { getByPlaceholderText } = render(\n      <HelmetProvider>\n        <QueryClientProvider client={new QueryClient()}>\n          <CqsByIdsProvider client={getClient(\"bigdata.com\")}>\n            <MemoryRouter initialEntries={[\"?pid=123\"]}>\n              <PasswordRecoveryPage />\n            </MemoryRouter>\n          </CqsByIdsProvider>\n        </QueryClientProvider>\n      </HelmetProvider>,\n    )\n\n    expect(getByPlaceholderText(\"Enter your email for a password reset code\")).toBeInTheDocument()\n  })\n\n  it(\"Should call signIn function after click\", async () => {\n    const old = global.FormData\n    global.FormData = FormDataOverride\n    const setActive = jest.fn()\n    const create = jest.fn().mockImplementation(() => Promise.resolve())\n    const signIn = { create }\n    mockUseSignIn.mockReturnValue({ isLoaded: true, signIn, setActive })\n\n    mockUseAuth.mockReturnValue(() => {\n      return { isSignedIn: true }\n    })\n\n    mockUseSnackbar.mockReturnValue({\n      enqueueError: mockEnqueueError,\n    })\n\n    const { getByText } = render(\n      <HelmetProvider>\n        <QueryClientProvider client={new QueryClient()}>\n          <ThemeProvider theme={theme}>\n            <CqsByIdsProvider client={getClient(\"bigdata.com\")}>\n              <MemoryRouter initialEntries={[\"?email=abc@ravenpack.com\"]}>\n                <PasswordRecoveryPage />\n              </MemoryRouter>\n            </CqsByIdsProvider>\n          </ThemeProvider>\n        </QueryClientProvider>\n      </HelmetProvider>,\n    )\n\n    const button = getByText(/send code/i)\n    fireEvent.click(button)\n\n    await waitFor(() => {\n      expect(create).toHaveBeenCalledTimes(1)\n    })\n    global.FormData = old\n  })\n})\n"],"names":["jest","mock","requireActual","useLocation","pathname","hash","useNavigate","fn","useSnackbar","FormDataOverride","append","delete","get","name","getAll","has","set","forEach","entries","FormData","keys","values","Symbol","iterator","Error","mockUseSnackbar","mockEnqueueError","mockUseSignIn","useSignIn","mockUseAuth","useAuth","describe","it","setActive","create","signIn","mockReturnValue","isLoaded","isSignedIn","enqueueError","getByPlaceholderText","render","HelmetProvider","QueryClientProvider","client","QueryClient","CqsByIdsProvider","getClient","MemoryRouter","initialEntries","PasswordRecoveryPage","expect","toBeInTheDocument","old","global","mockImplementation","Promise","resolve","getByText","ThemeProvider","theme","button","fireEvent","click","waitFor","toHaveBeenCalledTimes"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}