4c6b7f8b2560252c8945d88cad218bc7
// cheap lodash replacements
/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    get: function() {
        return get;
    },
    intersection: function() {
        return intersection;
    },
    isObject: function() {
        return isObject;
    },
    isString: function() {
        return isString;
    },
    without: function() {
        return without;
    },
    xor: function() {
        return xor;
    }
});
function get(obj, path, defaultValue) {
    return path.split('.').reduce((a, c)=>a && a[c] ? a[c] : defaultValue || null, obj);
}
function without(items, item) {
    return items.filter((i)=>i !== item);
}
function isString(input) {
    return typeof input === 'string';
}
function isObject(input) {
    return typeof input === 'object';
}
function xor(itemsA, itemsB) {
    const map = new Map();
    const insertItem = (item)=>{
        map.set(item, map.has(item) ? map.get(item) + 1 : 1);
    };
    itemsA.forEach(insertItem);
    itemsB.forEach(insertItem);
    const result = [];
    map.forEach((count, key)=>{
        if (count === 1) {
            result.push(key);
        }
    });
    return result;
}
function intersection(itemsA, itemsB) {
    return itemsA.filter((t)=>itemsB.indexOf(t) > -1);
} //# sourceMappingURL=js_utils.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9qc191dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjaGVhcCBsb2Rhc2ggcmVwbGFjZW1lbnRzXG5cbi8qKlxuICogZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgXy5nZXRcbiAqIEBwYXJhbSBvYmpcbiAqIEBwYXJhbSBwYXRoXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQ8VD4ob2JqOiBhbnksIHBhdGg6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBUKTogVCB7XG5cdHJldHVybiBwYXRoXG5cdFx0LnNwbGl0KCcuJylcblx0XHQucmVkdWNlKChhLCBjKSA9PiAoYSAmJiBhW2NdID8gYVtjXSA6IGRlZmF1bHRWYWx1ZSB8fCBudWxsKSwgb2JqKSBhcyBUXG59XG5cbi8qKlxuICogZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgXy53aXRob3V0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRob3V0PFQ+KGl0ZW1zOiBUW10sIGl0ZW06IFQpOiBUW10ge1xuXHRyZXR1cm4gaXRlbXMuZmlsdGVyKChpKSA9PiBpICE9PSBpdGVtKVxufVxuXG4vKipcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIF8uaXNTdHJpbmdcbiAqIEBwYXJhbSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcoaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJ1xufVxuXG4vKipcbiAqIGRyb3AtaW4gcmVwbGFjZW1lbnQgZm9yIF8uaXNTdHJpbmdcbiAqIEBwYXJhbSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQ6IGFueSk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIHJlcGxhY2VtZW50IGZvciBfLnhvclxuICogQHBhcmFtIGl0ZW1zQVxuICogQHBhcmFtIGl0ZW1zQlxuICovXG5leHBvcnQgZnVuY3Rpb24geG9yPFQgZXh0ZW5kcyBzdHJpbmcgfCBudW1iZXI+KGl0ZW1zQTogVFtdLCBpdGVtc0I6IFRbXSk6IFRbXSB7XG5cdGNvbnN0IG1hcCA9IG5ldyBNYXA8VCwgbnVtYmVyPigpXG5cdGNvbnN0IGluc2VydEl0ZW0gPSAoaXRlbTogVCkgPT4ge1xuXHRcdG1hcC5zZXQoaXRlbSwgbWFwLmhhcyhpdGVtKSA/IChtYXAuZ2V0KGl0ZW0pIGFzIG51bWJlcikgKyAxIDogMSlcblx0fVxuXHRpdGVtc0EuZm9yRWFjaChpbnNlcnRJdGVtKVxuXHRpdGVtc0IuZm9yRWFjaChpbnNlcnRJdGVtKVxuXG5cdGNvbnN0IHJlc3VsdDogVFtdID0gW11cblx0bWFwLmZvckVhY2goKGNvdW50LCBrZXkpID0+IHtcblx0XHRpZiAoY291bnQgPT09IDEpIHtcblx0XHRcdHJlc3VsdC5wdXNoKGtleSlcblx0XHR9XG5cdH0pXG5cdHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiByZXBsYWNlbWVudCBmb3IgXy5pbnRlcnNlY3Rpb25cbiAqIEBwYXJhbSBpdGVtc0FcbiAqIEBwYXJhbSBpdGVtc0JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdGlvbjxUPihpdGVtc0E6IFRbXSwgaXRlbXNCOiBUW10pOiBUW10ge1xuXHRyZXR1cm4gaXRlbXNBLmZpbHRlcigodCkgPT4gaXRlbXNCLmluZGV4T2YodCkgPiAtMSlcbn1cbiJdLCJuYW1lcyI6WyJnZXQiLCJpbnRlcnNlY3Rpb24iLCJpc09iamVjdCIsImlzU3RyaW5nIiwid2l0aG91dCIsInhvciIsIm9iaiIsInBhdGgiLCJkZWZhdWx0VmFsdWUiLCJzcGxpdCIsInJlZHVjZSIsImEiLCJjIiwiaXRlbXMiLCJpdGVtIiwiZmlsdGVyIiwiaSIsImlucHV0IiwiaXRlbXNBIiwiaXRlbXNCIiwibWFwIiwiTWFwIiwiaW5zZXJ0SXRlbSIsInNldCIsImhhcyIsImZvckVhY2giLCJyZXN1bHQiLCJjb3VudCIsImtleSIsInB1c2giLCJ0IiwiaW5kZXhPZiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQSw0QkFBNEI7QUFFNUI7Ozs7Ozs7Ozs7Ozs7Ozs7SUFNZ0JBLEdBQUc7ZUFBSEE7O0lBd0RBQyxZQUFZO2VBQVpBOztJQS9CQUMsUUFBUTtlQUFSQTs7SUFSQUMsUUFBUTtlQUFSQTs7SUFSQUMsT0FBTztlQUFQQTs7SUF5QkFDLEdBQUc7ZUFBSEE7OztBQWxDVCxTQUFTTCxJQUFPTSxHQUFRLEVBQUVDLElBQVksRUFBRUMsWUFBZTtJQUM3RCxPQUFPRCxLQUNMRSxLQUFLLENBQUMsS0FDTkMsTUFBTSxDQUFDLENBQUNDLEdBQUdDLElBQU9ELEtBQUtBLENBQUMsQ0FBQ0MsRUFBRSxHQUFHRCxDQUFDLENBQUNDLEVBQUUsR0FBR0osZ0JBQWdCLE1BQU9GOztBQU14RCxTQUFTRixRQUFXUyxLQUFVLEVBQUVDLElBQU87SUFDN0MsT0FBT0QsTUFBTUUsTUFBTSxDQUFDLENBQUNDLElBQU1BLE1BQU1GOztBQU8zQixTQUFTWCxTQUFTYyxLQUFVO0lBQ2xDLE9BQU8sT0FBT0EsVUFBVTs7QUFPbEIsU0FBU2YsU0FBU2UsS0FBVTtJQUNsQyxPQUFPLE9BQU9BLFVBQVU7O0FBUWxCLFNBQVNaLElBQStCYSxNQUFXLEVBQUVDLE1BQVc7SUFDdEUsTUFBTUMsTUFBTSxJQUFJQztJQUNoQixNQUFNQyxhQUFhLENBQUNSO1FBQ25CTSxJQUFJRyxHQUFHLENBQUNULE1BQU1NLElBQUlJLEdBQUcsQ0FBQ1YsUUFBUU0sSUFBS3BCLEdBQUcsQ0FBQ2MsUUFBbUIsSUFBSTs7SUFFL0RJLE9BQU9PLE9BQU8sQ0FBQ0g7SUFDZkgsT0FBT00sT0FBTyxDQUFDSDtJQUVmLE1BQU1JLFNBQWMsRUFBRTtJQUN0Qk4sSUFBSUssT0FBTyxDQUFDLENBQUNFLE9BQU9DO1FBQ25CLElBQUlELFVBQVUsR0FBRztZQUNoQkQsT0FBT0csSUFBSSxDQUFDRDs7O0lBR2QsT0FBT0Y7O0FBUUQsU0FBU3pCLGFBQWdCaUIsTUFBVyxFQUFFQyxNQUFXO0lBQ3ZELE9BQU9ELE9BQU9ILE1BQU0sQ0FBQyxDQUFDZSxJQUFNWCxPQUFPWSxPQUFPLENBQUNELEtBQUssQ0FBQyJ9