7e9142dbefead1608bdb9af2c873a65f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getWidgetActionsMock: function() {
        return getWidgetActionsMock;
    },
    getWidgetCategoryMock: function() {
        return getWidgetCategoryMock;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const getWidgetCategoryMock = (props = {})=>{
    return _object_spread({
        id: "",
        label: "Companies",
        icon: "COMP",
        groupBy: "",
        groups: [],
        unfoldedFamilies: [],
        showMore: [],
        filters: [],
        showMoreFamily: false
    }, props);
};
const getWidgetActionsMock = ()=>({
        setGroupBy: ()=>{},
        toggleFamilyFold: ()=>{},
        toggleShowMore: ()=>{},
        toggleShowMoreFamily: ()=>{},
        resetToDefault: ()=>{},
        reset: ()=>{}
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9kaXNjb3Zlcnktc2lkZWJhci9zcmMvaG9va3MvX190ZXN0c19fL3VzZVdpZGdldENhdGVnb3JpZXMuaGVscGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXaWRnZXRDYXRlZ29yeSB9IGZyb20gXCIuLi91c2VXaWRnZXRDYXRlZ29yaWVzXCJcblxuY29uc3QgZ2V0V2lkZ2V0Q2F0ZWdvcnlNb2NrID0gKHByb3BzOiBQYXJ0aWFsPFdpZGdldENhdGVnb3J5PiA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IFwiXCIsXG4gICAgbGFiZWw6IFwiQ29tcGFuaWVzXCIsXG4gICAgaWNvbjogXCJDT01QXCIsXG4gICAgZ3JvdXBCeTogXCJcIixcbiAgICBncm91cHM6IFtdLFxuICAgIHVuZm9sZGVkRmFtaWxpZXM6IFtdLFxuICAgIHNob3dNb3JlOiBbXSxcbiAgICBmaWx0ZXJzOiBbXSxcbiAgICBzaG93TW9yZUZhbWlseTogZmFsc2UsXG4gICAgLi4ucHJvcHMsXG4gIH1cbn1cblxuY29uc3QgZ2V0V2lkZ2V0QWN0aW9uc01vY2sgPSAoKSA9PiAoe1xuICBzZXRHcm91cEJ5OiAoKSA9PiB7fSxcbiAgdG9nZ2xlRmFtaWx5Rm9sZDogKCkgPT4ge30sXG4gIHRvZ2dsZVNob3dNb3JlOiAoKSA9PiB7fSxcbiAgdG9nZ2xlU2hvd01vcmVGYW1pbHk6ICgpID0+IHt9LFxuICByZXNldFRvRGVmYXVsdDogKCkgPT4ge30sXG4gIHJlc2V0OiAoKSA9PiB7fSxcbn0pXG5cbmV4cG9ydCB7IGdldFdpZGdldENhdGVnb3J5TW9jaywgZ2V0V2lkZ2V0QWN0aW9uc01vY2sgfVxuIl0sIm5hbWVzIjpbImdldFdpZGdldEFjdGlvbnNNb2NrIiwiZ2V0V2lkZ2V0Q2F0ZWdvcnlNb2NrIiwicHJvcHMiLCJpZCIsImxhYmVsIiwiaWNvbiIsImdyb3VwQnkiLCJncm91cHMiLCJ1bmZvbGRlZEZhbWlsaWVzIiwic2hvd01vcmUiLCJmaWx0ZXJzIiwic2hvd01vcmVGYW1pbHkiLCJzZXRHcm91cEJ5IiwidG9nZ2xlRmFtaWx5Rm9sZCIsInRvZ2dsZVNob3dNb3JlIiwidG9nZ2xlU2hvd01vcmVGYW1pbHkiLCJyZXNldFRvRGVmYXVsdCIsInJlc2V0Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUEwQmdDQSxvQkFBb0I7ZUFBcEJBOztJQUF2QkMscUJBQXFCO2VBQXJCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXhCVCxNQUFNQSx3QkFBd0IsQ0FBQ0MsUUFBaUMsQ0FBQyxDQUFDO0lBQ2hFLE9BQU87UUFDTEMsSUFBSTtRQUNKQyxPQUFPO1FBQ1BDLE1BQU07UUFDTkMsU0FBUztRQUNUQyxRQUFRLEVBQUU7UUFDVkMsa0JBQWtCLEVBQUU7UUFDcEJDLFVBQVUsRUFBRTtRQUNaQyxTQUFTLEVBQUU7UUFDWEMsZ0JBQWdCO09BQ2JUO0FBRVA7QUFFQSxNQUFNRix1QkFBdUIsSUFBTyxDQUFBO1FBQ2xDWSxZQUFZLEtBQU87UUFDbkJDLGtCQUFrQixLQUFPO1FBQ3pCQyxnQkFBZ0IsS0FBTztRQUN2QkMsc0JBQXNCLEtBQU87UUFDN0JDLGdCQUFnQixLQUFPO1FBQ3ZCQyxPQUFPLEtBQU87SUFDaEIsQ0FBQSJ9