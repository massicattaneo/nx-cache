cf2a577efd2eb326b2d2e2ef72c93102
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PortfolioUploadModal", {
    enumerable: true,
    get: function() {
        return PortfolioUploadModal;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _material = require("@mui/material");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _icons = require("@rp/react/web/mui/icons");
const _CustomWidthTooltip = require("./CustomWidthTooltip");
const _portfolioUploadModals = require("./portfolioUploadModals");
const PortfolioUploadModal = ({ type, onClose, handleAdd })=>{
    const [value, setValue] = (0, _react.useState)("");
    const [jsonIds, setJsonIds] = (0, _react.useState)([]);
    const { validateIds } = (0, _cqsbyids.useCqsByIdsContext)();
    const info = _portfolioUploadModals.portfolioUploadModals[type !== null && type !== void 0 ? type : "ids"];
    const onModalClose = (0, _react.useCallback)(()=>{
        onClose();
        setValue("");
        setJsonIds([]);
    }, [
        onClose
    ]);
    const onAccept = (0, _react.useCallback)(async ()=>{
        const scoped = jsonIds;
        onModalClose();
        const valid = await validateIds(scoped);
        handleAdd(valid.map((item)=>item.key));
    }, [
        jsonIds,
        validateIds,
        onModalClose,
        handleAdd
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.GenericModal, {
        AcceptProps: {
            text: "Upload",
            disabled: !jsonIds.length,
            variant: "contained"
        },
        open: !!type,
        onClose: onModalClose,
        onAccept: onAccept,
        title: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                info.title,
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomWidthTooltip.CustomWidthTooltip, {
                    classes: {
                        popper: "popper"
                    },
                    placement: "bottom-start",
                    title: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Typography, {
                                sx: {
                                    fontWeight: 700,
                                    fontSize: 14,
                                    mt: 1
                                },
                                children: info.tooltipTile
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
                                sx: {
                                    mt: 2,
                                    whiteSpace: "pre-wrap"
                                },
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("code", {
                                    children: info.tooltipContent
                                })
                            })
                        ]
                    }),
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Info, {
                        sx: {
                            fontSize: 16,
                            ml: 1,
                            color: "grey.300",
                            cursor: "pointer"
                        }
                    })
                })
            ]
        }),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.Box, {
            sx: {
                px: 2
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_material.TextField, {
                value: value,
                onChange: (event)=>{
                    setValue(event.target.value);
                    setJsonIds(info.validator(event.target.value));
                },
                rows: 8,
                multiline: true,
                placeholder: info.placeholder,
                fullWidth: true
            })
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi93YXRjaGxpc3QtZWRpdG9yL3NyYy9XYXRjaGxpc3RQb3J0Zm9saW9VcGxvYWQvUG9ydGZvbGlvVXBsb2FkTW9kYWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBCb3gsIFRleHRGaWVsZCwgVHlwb2dyYXBoeSB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCJcbmltcG9ydCB7IFBvc3RCeUlkc1JlcXVlc3QgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgdXNlQ3FzQnlJZHNDb250ZXh0IH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvY3FzLWJ5LWlkc1wiXG5pbXBvcnQgeyBHZW5lcmljTW9kYWwgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vY29tcG9zaXRlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgSW5mbyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9pY29uc1wiXG5pbXBvcnQgeyBDdXN0b21XaWR0aFRvb2x0aXAgfSBmcm9tIFwiLi9DdXN0b21XaWR0aFRvb2x0aXBcIlxuaW1wb3J0IHsgcG9ydGZvbGlvVXBsb2FkTW9kYWxzIH0gZnJvbSBcIi4vcG9ydGZvbGlvVXBsb2FkTW9kYWxzXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgb25DbG9zZTogKCkgPT4gdm9pZFxuICBuYW1lOiBzdHJpbmdcbiAgaGFuZGxlQWRkOiAoaWRzOiBBcnJheTxzdHJpbmc+KSA9PiB2b2lkXG4gIHR5cGU6IFwianNvblwiIHwgXCJpZHNcIiB8IG51bGxcbn1cblxuY29uc3QgUG9ydGZvbGlvVXBsb2FkTW9kYWwgPSAoeyB0eXBlLCBvbkNsb3NlLCBoYW5kbGVBZGQgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShcIlwiKVxuICBjb25zdCBbanNvbklkcywgc2V0SnNvbklkc10gPSB1c2VTdGF0ZTxQb3N0QnlJZHNSZXF1ZXN0PihbXSlcbiAgY29uc3QgeyB2YWxpZGF0ZUlkcyB9ID0gdXNlQ3FzQnlJZHNDb250ZXh0KClcbiAgY29uc3QgaW5mbyA9IHBvcnRmb2xpb1VwbG9hZE1vZGFsc1t0eXBlID8/IFwiaWRzXCJdXG5cbiAgY29uc3Qgb25Nb2RhbENsb3NlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uQ2xvc2UoKVxuICAgIHNldFZhbHVlKFwiXCIpXG4gICAgc2V0SnNvbklkcyhbXSlcbiAgfSwgW29uQ2xvc2VdKVxuXG4gIGNvbnN0IG9uQWNjZXB0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNjb3BlZCA9IGpzb25JZHNcbiAgICBvbk1vZGFsQ2xvc2UoKVxuICAgIGNvbnN0IHZhbGlkID0gYXdhaXQgdmFsaWRhdGVJZHMoc2NvcGVkKVxuICAgIGhhbmRsZUFkZCh2YWxpZC5tYXAoaXRlbSA9PiBpdGVtLmtleSkpXG4gIH0sIFtqc29uSWRzLCB2YWxpZGF0ZUlkcywgb25Nb2RhbENsb3NlLCBoYW5kbGVBZGRdKVxuXG4gIHJldHVybiAoXG4gICAgPEdlbmVyaWNNb2RhbFxuICAgICAgQWNjZXB0UHJvcHM9e3sgdGV4dDogXCJVcGxvYWRcIiwgZGlzYWJsZWQ6ICFqc29uSWRzLmxlbmd0aCwgdmFyaWFudDogXCJjb250YWluZWRcIiB9fVxuICAgICAgb3Blbj17ISF0eXBlfVxuICAgICAgb25DbG9zZT17b25Nb2RhbENsb3NlfVxuICAgICAgb25BY2NlcHQ9e29uQWNjZXB0fVxuICAgICAgdGl0bGU9e1xuICAgICAgICA8PlxuICAgICAgICAgIHtpbmZvLnRpdGxlfVxuICAgICAgICAgIDxDdXN0b21XaWR0aFRvb2x0aXBcbiAgICAgICAgICAgIGNsYXNzZXM9e3sgcG9wcGVyOiBcInBvcHBlclwiIH19XG4gICAgICAgICAgICBwbGFjZW1lbnQ9XCJib3R0b20tc3RhcnRcIlxuICAgICAgICAgICAgdGl0bGU9e1xuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnRXZWlnaHQ6IDcwMCwgZm9udFNpemU6IDE0LCBtdDogMSB9fT5cbiAgICAgICAgICAgICAgICAgIHtpbmZvLnRvb2x0aXBUaWxlfVxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8Qm94IHN4PXt7IG10OiAyLCB3aGl0ZVNwYWNlOiBcInByZS13cmFwXCIgfX0+XG4gICAgICAgICAgICAgICAgICA8Y29kZT57aW5mby50b29sdGlwQ29udGVudH08L2NvZGU+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxJbmZvIHN4PXt7IGZvbnRTaXplOiAxNiwgbWw6IDEsIGNvbG9yOiBcImdyZXkuMzAwXCIsIGN1cnNvcjogXCJwb2ludGVyXCIgfX0gLz5cbiAgICAgICAgICA8L0N1c3RvbVdpZHRoVG9vbHRpcD5cbiAgICAgICAgPC8+XG4gICAgICB9XG4gICAgPlxuICAgICAgPEJveCBzeD17eyBweDogMiB9fT5cbiAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICBvbkNoYW5nZT17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgc2V0VmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgc2V0SnNvbklkcyhpbmZvLnZhbGlkYXRvcihldmVudC50YXJnZXQudmFsdWUpKVxuICAgICAgICAgIH19XG4gICAgICAgICAgcm93cz17OH1cbiAgICAgICAgICBtdWx0aWxpbmVcbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW5mby5wbGFjZWhvbGRlcn1cbiAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgLz5cbiAgICAgIDwvQm94PlxuICAgIDwvR2VuZXJpY01vZGFsPlxuICApXG59XG5cbmV4cG9ydCB7IFBvcnRmb2xpb1VwbG9hZE1vZGFsIH1cbiJdLCJuYW1lcyI6WyJQb3J0Zm9saW9VcGxvYWRNb2RhbCIsInR5cGUiLCJvbkNsb3NlIiwiaGFuZGxlQWRkIiwidmFsdWUiLCJzZXRWYWx1ZSIsInVzZVN0YXRlIiwianNvbklkcyIsInNldEpzb25JZHMiLCJ2YWxpZGF0ZUlkcyIsInVzZUNxc0J5SWRzQ29udGV4dCIsImluZm8iLCJwb3J0Zm9saW9VcGxvYWRNb2RhbHMiLCJvbk1vZGFsQ2xvc2UiLCJ1c2VDYWxsYmFjayIsIm9uQWNjZXB0Iiwic2NvcGVkIiwidmFsaWQiLCJtYXAiLCJpdGVtIiwia2V5IiwiR2VuZXJpY01vZGFsIiwiQWNjZXB0UHJvcHMiLCJ0ZXh0IiwiZGlzYWJsZWQiLCJsZW5ndGgiLCJ2YXJpYW50Iiwib3BlbiIsInRpdGxlIiwiQ3VzdG9tV2lkdGhUb29sdGlwIiwiY2xhc3NlcyIsInBvcHBlciIsInBsYWNlbWVudCIsIlR5cG9ncmFwaHkiLCJzeCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsIm10IiwidG9vbHRpcFRpbGUiLCJCb3giLCJ3aGl0ZVNwYWNlIiwiY29kZSIsInRvb2x0aXBDb250ZW50IiwiSW5mbyIsIm1sIiwiY29sb3IiLCJjdXJzb3IiLCJweCIsIlRleHRGaWVsZCIsIm9uQ2hhbmdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWxpZGF0b3IiLCJyb3dzIiwibXVsdGlsaW5lIiwicGxhY2Vob2xkZXIiLCJmdWxsV2lkdGgiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBZ0ZTQTs7O2VBQUFBOzs7O3VCQWhGNkI7MEJBQ0s7MEJBRVI7cUNBQ047dUJBQ1I7b0NBQ2M7dUNBQ0c7QUFTdEMsTUFBTUEsdUJBQXVCLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBUztJQUMvRCxNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBQ25DLE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHRixJQUFBQSxlQUFRLEVBQW1CLEVBQUU7SUFDM0QsTUFBTSxFQUFFRyxXQUFXLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWtCO0lBQzFDLE1BQU1DLE9BQU9DLDRDQUFxQixDQUFDWCxpQkFBQUEsa0JBQUFBLE9BQVEsTUFBTTtJQUVqRCxNQUFNWSxlQUFlQyxJQUFBQSxrQkFBVyxFQUFDO1FBQy9CWjtRQUNBRyxTQUFTO1FBQ1RHLFdBQVcsRUFBRTtJQUNmLEdBQUc7UUFBQ047S0FBUTtJQUVaLE1BQU1hLFdBQVdELElBQUFBLGtCQUFXLEVBQUM7UUFDM0IsTUFBTUUsU0FBU1Q7UUFDZk07UUFDQSxNQUFNSSxRQUFRLE1BQU1SLFlBQVlPO1FBQ2hDYixVQUFVYyxNQUFNQyxHQUFHLENBQUNDLENBQUFBLE9BQVFBLEtBQUtDLEdBQUc7SUFDdEMsR0FBRztRQUFDYjtRQUFTRTtRQUFhSTtRQUFjVjtLQUFVO0lBRWxELHFCQUNFLHFCQUFDa0IsaUNBQVk7UUFDWEMsYUFBYTtZQUFFQyxNQUFNO1lBQVVDLFVBQVUsQ0FBQ2pCLFFBQVFrQixNQUFNO1lBQUVDLFNBQVM7UUFBWTtRQUMvRUMsTUFBTSxDQUFDLENBQUMxQjtRQUNSQyxTQUFTVztRQUNURSxVQUFVQTtRQUNWYSxxQkFDRTs7Z0JBQ0dqQixLQUFLaUIsS0FBSzs4QkFDWCxxQkFBQ0Msc0NBQWtCO29CQUNqQkMsU0FBUzt3QkFBRUMsUUFBUTtvQkFBUztvQkFDNUJDLFdBQVU7b0JBQ1ZKLHFCQUNFOzswQ0FDRSxxQkFBQ0ssb0JBQVU7Z0NBQUNDLElBQUk7b0NBQUVDLFlBQVk7b0NBQUtDLFVBQVU7b0NBQUlDLElBQUk7Z0NBQUU7MENBQ3BEMUIsS0FBSzJCLFdBQVc7OzBDQUVuQixxQkFBQ0MsYUFBRztnQ0FBQ0wsSUFBSTtvQ0FBRUcsSUFBSTtvQ0FBR0csWUFBWTtnQ0FBVzswQ0FDdkMsY0FBQSxxQkFBQ0M7OENBQU05QixLQUFLK0IsY0FBYzs7Ozs7OEJBS2hDLGNBQUEscUJBQUNDLFdBQUk7d0JBQUNULElBQUk7NEJBQUVFLFVBQVU7NEJBQUlRLElBQUk7NEJBQUdDLE9BQU87NEJBQVlDLFFBQVE7d0JBQVU7Ozs7O2tCQUs1RSxjQUFBLHFCQUFDUCxhQUFHO1lBQUNMLElBQUk7Z0JBQUVhLElBQUk7WUFBRTtzQkFDZixjQUFBLHFCQUFDQyxtQkFBUztnQkFDUjVDLE9BQU9BO2dCQUNQNkMsVUFBVUMsQ0FBQUE7b0JBQ1I3QyxTQUFTNkMsTUFBTUMsTUFBTSxDQUFDL0MsS0FBSztvQkFDM0JJLFdBQVdHLEtBQUt5QyxTQUFTLENBQUNGLE1BQU1DLE1BQU0sQ0FBQy9DLEtBQUs7Z0JBQzlDO2dCQUNBaUQsTUFBTTtnQkFDTkMsU0FBUztnQkFDVEMsYUFBYTVDLEtBQUs0QyxXQUFXO2dCQUM3QkMsU0FBUzs7OztBQUtuQiJ9