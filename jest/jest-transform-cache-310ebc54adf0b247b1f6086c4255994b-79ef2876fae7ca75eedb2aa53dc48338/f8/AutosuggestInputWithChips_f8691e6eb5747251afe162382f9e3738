dd1b069adcc919596d184be1119d4603
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AutosuggestInputWithChips", {
    enumerable: true,
    get: function() {
        return AutosuggestInputWithChips;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _core = require("@rp/react/web/mui/core");
const _AutoCompleteCustoms = require("./AutoCompleteCustoms");
const _WatchlistAutosuggestPopper = require("./WatchlistAutosuggestPopper");
const _WatchlistAutosuggestPopperFilters = require("./WatchlistAutosuggestPopperFilters");
const _WatchlistAutosuggestPopperOption = require("./WatchlistAutosuggestPopperOption");
const _useAutosuggestInput = require("./useAutosuggestInput");
const getAutosuggestFilter = (disjunctiveFacets = [
    {
        category: "Company",
        group1: "Public"
    },
    {
        category: "Company",
        group1: "Private"
    },
    {
        category: "ETFs",
        group1: null
    }
], customFilter)=>{
    const categorySet = new Set();
    const group1Set = new Set();
    for (const facet of disjunctiveFacets){
        if (facet.category) {
            categorySet.add(facet.category);
        }
        if (facet.group1) {
            group1Set.add(facet.group1);
        }
    }
    switch(customFilter){
        case "stocks":
            return {
                category: [
                    "Companies"
                ],
                group1: [
                    "Public"
                ]
            };
        case "privateCompanies":
            return {
                category: [
                    "Companies"
                ],
                group1: [
                    "Private"
                ]
            };
        case "etfs":
            return {
                category: [
                    "ETFs"
                ]
            };
        default:
            return {
                category: [
                    ...categorySet
                ],
                group1: [
                    ...group1Set
                ]
            };
    }
};
const AutosuggestInputWithChips = ({ onChange, onSearchClick, selectedItems, excludeQueryTypes, variant, placeholder, keepOpen = false, chips, renderChips, onClick, hideTextInput = false, startAdornment, endAdornment, inputAdornment, disjunctiveFacets })=>{
    const [inputFocusRef, setInputFocusRef] = (0, _react.useState)(null);
    const [inputRef, setInputRef] = (0, _react.useState)(null);
    const [customFilter, setCustomFilter] = (0, _react.useState)("all");
    const theme = (0, _core.useTheme)();
    const filters = (0, _react.useMemo)(()=>getAutosuggestFilter(disjunctiveFacets, customFilter), [
        disjunctiveFacets,
        customFilter
    ]);
    const { options, value, searchValue, handleChange, handleInputChange, handleInputKeydown, selectedOption, open, setOpen } = (0, _useAutosuggestInput.useAutosuggestInput)({
        onChange,
        forceShowRecentSearches: false,
        onSearchClick,
        selectedItems,
        excludeQueryTypes,
        keepOpen,
        useSuggestionsHook: _suggestion.useWatchlistSuggestionsFlat,
        categories: filters.category,
        group1: filters.group1,
        includeSearches: false,
        includeKeyword: false
    });
    const onClickAway = (0, _react.useCallback)(()=>{
        if (document.activeElement === inputFocusRef) return;
        setOpen(false);
    }, [
        inputFocusRef,
        setOpen
    ]);
    (0, _react.useEffect)(()=>{
        if (!hideTextInput) {
            inputFocusRef === null || inputFocusRef === void 0 ? void 0 : inputFocusRef.focus();
        }
    }, [
        inputFocusRef,
        chips,
        hideTextInput
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_AutoCompleteCustoms.ResultsAutosuggestInputWithChipsStyled, {
                inputVariant: variant,
                isPopperOpen: open && options.length > 0,
                className: "MuiFormControl-root",
                "data-testid": "unified-search-autocomplete",
                ref: setInputRef,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    onClick: (ev)=>{
                        inputFocusRef === null || inputFocusRef === void 0 ? void 0 : inputFocusRef.focus();
                        onClick === null || onClick === void 0 ? void 0 : onClick(ev);
                    },
                    className: `${_AutoCompleteCustoms.autosuggestInputClasses.inputRoot} MuiInputBase-root MuiOutlinedInput-root MuiInputBase-colorPrimary MuiInputBase-formControl`,
                    children: [
                        startAdornment,
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            className: _AutoCompleteCustoms.autosuggestInputClasses.chips,
                            children: [
                                renderChips(chips),
                                !(hideTextInput && !!chips.length) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputBase, {
                                    inputRef: setInputFocusRef,
                                    autoComplete: "off",
                                    type: "text",
                                    placeholder: placeholder,
                                    className: _AutoCompleteCustoms.autosuggestInputClasses.input,
                                    value: value,
                                    onClick: ()=>setOpen(true),
                                    onChange: handleInputChange,
                                    onKeyDown: handleInputKeydown,
                                    onKeyUp: (ev)=>{
                                        if (ev.key === "Backspace" && !value && chips.length) {
                                            var _inputRef_querySelectorAll;
                                            const div = inputRef === null || inputRef === void 0 ? void 0 : (_inputRef_querySelectorAll = inputRef.querySelectorAll(".MuiChip-root")) === null || _inputRef_querySelectorAll === void 0 ? void 0 : _inputRef_querySelectorAll[chips.length - 1];
                                            div === null || div === void 0 ? void 0 : div.focus();
                                        }
                                    }
                                }) : null,
                                inputAdornment
                            ]
                        }),
                        endAdornment
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistAutosuggestPopper.WatchlistAutosuggestPopper, {
                open: open && searchValue.length > 0,
                options: options,
                inputRef: inputRef,
                isLoading: false,
                backgroundColor: theme.palette.elevation.dp08,
                renderOption: (option)=>{
                    if ((0, _suggestion.isEntitySuggestion)(option)) {
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistAutosuggestPopperOption.WatchlistAutosuggestPopperOption, {
                            isChecked: selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.includes(option.key),
                            selectedOption: selectedOption,
                            highlightValue: searchValue,
                            onClick: handleChange,
                            entity: option,
                            showTicker: customFilter === "all" || customFilter === "stocks" || customFilter === "etfs",
                            backgroundColor: theme.palette.elevation.dp08,
                            id: option.key
                        }, option.key);
                    }
                    return null;
                },
                onClickAway: onClickAway,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistAutosuggestPopperFilters.WatchlistAutosuggestPopperFilters, {
                    customFilter: customFilter,
                    onFilterClick: (filter)=>{
                        setCustomFilter(filter);
                    },
                    disjunctiveFacets: disjunctiveFacets
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,