{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/search-autosuggest-input/src/lib/UnifiedSearch/AutosuggestInputWithChips.tsx"],"sourcesContent":["import { MouseEventHandler, ReactNode, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { isEntitySuggestion, useWatchlistSuggestionsFlat } from \"@rp/react/tanstack-api/suggestion\"\nimport { EnhancedSuggestion } from \"@rp/react/tanstack-api/suggestion\"\nimport { Box, InputBase } from \"@rp/react/web/mui/core\"\nimport { useTheme } from \"@rp/react/web/mui/core\"\nimport {\n  ResultsAutosuggestInputWithChipsStyled,\n  autosuggestInputClasses,\n} from \"./AutoCompleteCustoms\"\nimport { TypesenseSearchInputProps } from \"./UnifiedSearch.types\"\nimport { SuggestionCustomFilter } from \"./WatchlistAutosuggestInput\"\nimport { WatchlistAutosuggestPopper } from \"./WatchlistAutosuggestPopper\"\nimport {\n  WatchlistAutosuggestPopperFilters,\n  WatchlistFacet,\n} from \"./WatchlistAutosuggestPopperFilters\"\nimport { WatchlistAutosuggestPopperOption } from \"./WatchlistAutosuggestPopperOption\"\nimport { useAutosuggestInput } from \"./useAutosuggestInput\"\n\ntype RenderChipsOptions = {\n  onRemove?: (chip: EnhancedSuggestion) => void\n}\n\ntype PropsWithChips = TypesenseSearchInputProps & {\n  chips: Array<EnhancedSuggestion>\n  renderChips: (chips: Array<EnhancedSuggestion>, options?: RenderChipsOptions) => ReactNode\n  onClick?: MouseEventHandler<HTMLDivElement>\n  hideTextInput?: boolean\n  startAdornment?: ReactNode\n  endAdornment?: ReactNode\n  inputAdornment?: ReactNode\n  disjunctiveFacets?: Array<WatchlistFacet>\n}\n\nconst getAutosuggestFilter = (\n  disjunctiveFacets: Array<WatchlistFacet> = [\n    { category: \"Company\", group1: \"Public\" },\n    { category: \"Company\", group1: \"Private\" },\n    { category: \"ETFs\", group1: null },\n  ],\n  customFilter?: SuggestionCustomFilter,\n) => {\n  const categorySet = new Set<string>()\n  const group1Set = new Set<string>()\n  for (const facet of disjunctiveFacets) {\n    if (facet.category) {\n      categorySet.add(facet.category)\n    }\n\n    if (facet.group1) {\n      group1Set.add(facet.group1)\n    }\n  }\n\n  switch (customFilter) {\n    case \"stocks\":\n      return { category: [\"Companies\"], group1: [\"Public\"] }\n    case \"privateCompanies\":\n      return { category: [\"Companies\"], group1: [\"Private\"] }\n    case \"etfs\":\n      return { category: [\"ETFs\"] }\n    default:\n      return { category: [...categorySet], group1: [...group1Set] }\n  }\n}\n\nconst AutosuggestInputWithChips = ({\n  onChange,\n  onSearchClick,\n  selectedItems,\n  excludeQueryTypes,\n  variant,\n  placeholder,\n  keepOpen = false,\n  chips,\n  renderChips,\n  onClick,\n  hideTextInput = false,\n  startAdornment,\n  endAdornment,\n  inputAdornment,\n  disjunctiveFacets,\n}: PropsWithChips) => {\n  const [inputFocusRef, setInputFocusRef] = useState<HTMLInputElement | null>(null)\n  const [inputRef, setInputRef] = useState<HTMLDivElement | null>(null)\n  const [customFilter, setCustomFilter] = useState<SuggestionCustomFilter>(\"all\")\n\n  const theme = useTheme()\n\n  const filters = useMemo(\n    () => getAutosuggestFilter(disjunctiveFacets, customFilter),\n    [disjunctiveFacets, customFilter],\n  )\n\n  const {\n    options,\n    value,\n    searchValue,\n    handleChange,\n    handleInputChange,\n    handleInputKeydown,\n    selectedOption,\n    open,\n    setOpen,\n  } = useAutosuggestInput({\n    onChange,\n    forceShowRecentSearches: false,\n    onSearchClick,\n    selectedItems,\n    excludeQueryTypes,\n    keepOpen,\n    useSuggestionsHook: useWatchlistSuggestionsFlat,\n    categories: filters.category,\n    group1: filters.group1,\n    includeSearches: false,\n    includeKeyword: false,\n  })\n\n  const onClickAway = useCallback(() => {\n    if (document.activeElement === inputFocusRef) return\n    setOpen(false)\n  }, [inputFocusRef, setOpen])\n\n  useEffect(() => {\n    if (!hideTextInput) {\n      inputFocusRef?.focus()\n    }\n  }, [inputFocusRef, chips, hideTextInput])\n\n  return (\n    <>\n      <ResultsAutosuggestInputWithChipsStyled\n        inputVariant={variant}\n        isPopperOpen={open && options.length > 0}\n        className=\"MuiFormControl-root\"\n        data-testid=\"unified-search-autocomplete\"\n        ref={setInputRef}\n      >\n        <Box\n          onClick={ev => {\n            inputFocusRef?.focus()\n            onClick?.(ev)\n          }}\n          className={`${autosuggestInputClasses.inputRoot} MuiInputBase-root MuiOutlinedInput-root MuiInputBase-colorPrimary MuiInputBase-formControl`}\n        >\n          {startAdornment}\n          <Box className={autosuggestInputClasses.chips}>\n            {renderChips(chips)}\n            {!(hideTextInput && !!chips.length) ? (\n              <InputBase\n                inputRef={setInputFocusRef}\n                autoComplete=\"off\"\n                type=\"text\"\n                placeholder={placeholder}\n                className={autosuggestInputClasses.input}\n                value={value}\n                onClick={() => setOpen(true)}\n                onChange={handleInputChange}\n                onKeyDown={handleInputKeydown}\n                onKeyUp={ev => {\n                  if (ev.key === \"Backspace\" && !value && chips.length) {\n                    const div = inputRef?.querySelectorAll(\".MuiChip-root\")?.[chips.length - 1] as\n                      | HTMLDivElement\n                      | undefined\n                    div?.focus()\n                  }\n                }}\n              />\n            ) : null}\n            {inputAdornment}\n          </Box>\n          {endAdornment}\n        </Box>\n      </ResultsAutosuggestInputWithChipsStyled>\n\n      <WatchlistAutosuggestPopper\n        open={open && searchValue.length > 0}\n        options={options}\n        inputRef={inputRef}\n        isLoading={false}\n        backgroundColor={theme.palette.elevation.dp08}\n        renderOption={option => {\n          if (isEntitySuggestion(option)) {\n            return (\n              <WatchlistAutosuggestPopperOption\n                isChecked={selectedItems?.includes(option.key)}\n                selectedOption={selectedOption}\n                key={option.key}\n                highlightValue={searchValue}\n                onClick={handleChange}\n                entity={option}\n                showTicker={\n                  customFilter === \"all\" || customFilter === \"stocks\" || customFilter === \"etfs\"\n                }\n                backgroundColor={theme.palette.elevation.dp08}\n                id={option.key}\n              />\n            )\n          }\n\n          return null\n        }}\n        onClickAway={onClickAway}\n      >\n        <WatchlistAutosuggestPopperFilters\n          customFilter={customFilter}\n          onFilterClick={filter => {\n            setCustomFilter(filter)\n          }}\n          disjunctiveFacets={disjunctiveFacets}\n        />\n      </WatchlistAutosuggestPopper>\n    </>\n  )\n}\n\nexport { AutosuggestInputWithChips }\nexport type { PropsWithChips as AutosuggestInputWithChipsProps }\n"],"names":["AutosuggestInputWithChips","getAutosuggestFilter","disjunctiveFacets","category","group1","customFilter","categorySet","Set","group1Set","facet","add","onChange","onSearchClick","selectedItems","excludeQueryTypes","variant","placeholder","keepOpen","chips","renderChips","onClick","hideTextInput","startAdornment","endAdornment","inputAdornment","inputFocusRef","setInputFocusRef","useState","inputRef","setInputRef","setCustomFilter","theme","useTheme","filters","useMemo","options","value","searchValue","handleChange","handleInputChange","handleInputKeydown","selectedOption","open","setOpen","useAutosuggestInput","forceShowRecentSearches","useSuggestionsHook","useWatchlistSuggestionsFlat","categories","includeSearches","includeKeyword","onClickAway","useCallback","document","activeElement","useEffect","focus","ResultsAutosuggestInputWithChipsStyled","inputVariant","isPopperOpen","length","className","data-testid","ref","Box","ev","autosuggestInputClasses","inputRoot","InputBase","autoComplete","type","input","onKeyDown","onKeyUp","key","div","querySelectorAll","WatchlistAutosuggestPopper","isLoading","backgroundColor","palette","elevation","dp08","renderOption","option","isEntitySuggestion","WatchlistAutosuggestPopperOption","isChecked","includes","highlightValue","entity","showTicker","id","WatchlistAutosuggestPopperFilters","onFilterClick","filter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}