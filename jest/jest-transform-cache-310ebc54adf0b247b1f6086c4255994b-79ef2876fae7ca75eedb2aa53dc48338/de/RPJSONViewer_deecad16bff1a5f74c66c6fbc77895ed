0ef1581f437a523291008bc68ce1254e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _settings = require("@rp/common/settings");
const _rpjson = require("@rp/react/common/rpjson");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _headercomponents = require("@rp/react/web/common/header-components");
const _hooks = require("@rp/react/web/common/hooks");
const _utils = require("@rp/react/web/common/vendors/utils");
const _documentdiscovery = require("@rp/react/web/discovery-sidebar/document-discovery");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _utils1 = require("@rp/web/utils");
const _DocumentLoader = require("../../DocumentLoader");
const _DocumentViewer = require("../../DocumentViewer");
const _ErrorDocumentViewer = require("../../ErrorDocumentViewer");
const _LimitedDocumentViewer = require("../../LimitedDocumentViewer");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const TOOLBAR_HEIGHT = 44 // So Document Discovery is aligned with it
;
const MIN_PANEL_PADDING = 60 // Minimum distance from the header, when loading f.e.
;
function RPJSONViewer({ backTitle, disableBackButton, disableCheckbox, disableDocumentDiscovery, documentId, error, expression, handleClick, rpjsonHeaderOffset, isPrivate, isRpJsonLoading, onAddToWatchlist, onChange, onExclude, rpjsonDocument, selectedDetection, setSelectedDetection, shouldUseScrollTrigger, viewerPaddingTop, name, customDocumentHeaderProps, customBackgroundColor }) {
    const { isWideScreen, isMobile } = (0, _hooks.useDeviceInfo)();
    const { isLimited, url } = (0, _rpjson.checkDocument)(rpjsonDocument);
    const [fixedRef, setFixedRef] = (0, _react.useState)(null);
    const handleDetectionClick = (detection)=>{
        if (isLimited) {
            _utils.tagManagerEvents.documentOutbound({
                documentId,
                sentenceId: `${documentId}-${detection.pnum}-${detection.snum}`,
                sourceName: rpjsonDocument === null || rpjsonDocument === void 0 ? void 0 : rpjsonDocument.document.source.name,
                sourceId: rpjsonDocument === null || rpjsonDocument === void 0 ? void 0 : rpjsonDocument.document.source.rp_source_id,
                component: "documentDiscovery"
            });
            window.open((0, _utils1.getUrlWithTextFragment)(url, detection.text), "_blank", "noreferrer");
            return;
        }
        setSelectedDetection({
            pnum: detection.pnum,
            snum: detection.snum
        });
    };
    const isPane = (customDocumentHeaderProps === null || customDocumentHeaderProps === void 0 ? void 0 : customDocumentHeaderProps.variant) === "pane";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Fade, {
        in: Boolean(documentId),
        mountOnEnter: true,
        unmountOnExit: true,
        style: {
            paddingTop: viewerPaddingTop
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.MaxWidthContainer, {
            sx: {
                backgroundColor: customBackgroundColor !== null && customBackgroundColor !== void 0 ? customBackgroundColor : "background.default"
            },
            disableGutters: isPane,
            isPane: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Grid, {
                container: true,
                columnSpacing: 3,
                children: [
                    isMobile || isPane ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Grid, {
                        item: true,
                        xs: 1,
                        container: true,
                        alignItems: "start",
                        justifyContent: "right",
                        children: window.history.length === 1 || disableBackButton ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                            title: backTitle,
                            arrow: true,
                            placement: "top",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                "data-testid": "back-arrow-button",
                                onClick: handleClick,
                                sx: {
                                    marginTop: "10px",
                                    position: "fixed"
                                },
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowBack, {})
                            })
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Grid, {
                        item: true,
                        xs: isMobile || isPane ? 12 : 6,
                        marginRight: isWideScreen && !isPane ? "36px" : 0,
                        "data-testid": "document-viewer",
                        sx: {
                            // allow the user to bring the last line up on mobile
                            paddingBottom: isMobile && !isPane ? "100px" : 0
                        },
                        children: [
                            isRpJsonLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_DocumentLoader.DocumentLoader, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_headercomponents.HtmlPageHead, {
                                title: name
                            }),
                            error && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ErrorDocumentViewer.ErrorDocumentViewer, {
                                error: error
                            }),
                            rpjsonDocument && !isLimited ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_DocumentViewer.DocumentViewer, {
                                headerHeight: _settings.HEADER_HEIGHT,
                                rpjsonDocument: rpjsonDocument,
                                namespace: isPrivate ? "private" : "public",
                                selectedDetection: selectedDetection,
                                fixedRef: fixedRef,
                                setFixedRef: setFixedRef,
                                rpjsonHeaderOffset: rpjsonHeaderOffset,
                                shouldUseScrollTrigger: shouldUseScrollTrigger,
                                customDocumentHeaderProps: customDocumentHeaderProps,
                                customBackgroundColor: customBackgroundColor
                            }) : null,
                            rpjsonDocument && isLimited ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_LimitedDocumentViewer.LimitedDocumentViewer, {
                                rpjsonDocument: rpjsonDocument,
                                externalContentUrl: url,
                                namespace: isPrivate ? "private" : "public",
                                setFixedRef: setFixedRef,
                                fixedRef: fixedRef,
                                documentId: documentId
                            }) : null
                        ]
                    }),
                    isMobile || disableDocumentDiscovery ? null : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Grid, {
                        item: true,
                        xs: 4,
                        pt: `${fixedRef ? fixedRef.clientHeight - TOOLBAR_HEIGHT : MIN_PANEL_PADDING}px`,
                        sx: {
                            transition: "padding-top 0.3s"
                        },
                        zIndex: 7,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_documentdiscovery.DocumentDiscovery, {
                            isLoading: isRpJsonLoading,
                            rpjsonDocument: rpjsonDocument,
                            disableCheckbox: disableCheckbox,
                            expression: expression,
                            onChange: onChange,
                            onExclude: onExclude,
                            selectedDetection: selectedDetection,
                            onDetectionClick: handleDetectionClick,
                            onAddToWatchlist: onAddToWatchlist
                        })
                    })
                ]
            })
        })
    });
}
const _default = RPJSONViewer;

//# sourceMappingURL=data:application/json;base64,