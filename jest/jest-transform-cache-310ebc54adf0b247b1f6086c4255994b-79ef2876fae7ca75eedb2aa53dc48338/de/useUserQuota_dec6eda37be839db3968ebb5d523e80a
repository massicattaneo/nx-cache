9d122663ee549fd85beb0ba6d24608b4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useUserQuotas", {
    enumerable: true,
    get: function() {
        return useUserQuotas;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _apitypes = require("@rp/common/api-types");
const _axiosclient = require("@rp/react/axios-client");
const _reactquery = require("@tanstack/react-query");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getUserQuotas = async ()=>{
    try {
        const { data } = await _axiosclient.axiosClient.get("/profiles/me");
        const result = _apitypes.UserDataQuotaSchema.safeParse(data);
        if (result.success) {
            return result.data;
        }
        // This can cause errors later in the application
        // as we're assuming the data is correct when it's not
        // This is just to prevent the application from
        // crashing on loading bad data
        return data;
    } catch (error) {
        if (!_axios.default.isAxiosError(error)) {
            throw error;
        }
        if (error.response) {
            if (error.response.status === 401) {
                return null;
            }
        }
        throw error;
    }
};
function useUserQuotas(userId, orgId) {
    return (0, _reactquery.useQuery)({
        queryKey: [
            "userdata-quota",
            userId,
            orgId
        ],
        queryFn: getUserQuotas,
        refetchOnReconnect: true,
        refetchOnWindowFocus: true,
        refetchInterval: 60 * 1000,
        retry: 2
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlVXNlclF1b3RhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsgVXNlckRhdGFRdW90YSwgVXNlckRhdGFRdW90YVNjaGVtYSB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBheGlvc0NsaWVudCB9IGZyb20gXCJAcnAvcmVhY3QvYXhpb3MtY2xpZW50XCJcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5cbmNvbnN0IGdldFVzZXJRdW90YXMgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc0NsaWVudC5nZXQ8dW5rbm93bj4oXCIvcHJvZmlsZXMvbWVcIilcbiAgICBjb25zdCByZXN1bHQgPSBVc2VyRGF0YVF1b3RhU2NoZW1hLnNhZmVQYXJzZShkYXRhKVxuXG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LmRhdGFcbiAgICB9XG5cbiAgICAvLyBUaGlzIGNhbiBjYXVzZSBlcnJvcnMgbGF0ZXIgaW4gdGhlIGFwcGxpY2F0aW9uXG4gICAgLy8gYXMgd2UncmUgYXNzdW1pbmcgdGhlIGRhdGEgaXMgY29ycmVjdCB3aGVuIGl0J3Mgbm90XG4gICAgLy8gVGhpcyBpcyBqdXN0IHRvIHByZXZlbnQgdGhlIGFwcGxpY2F0aW9uIGZyb21cbiAgICAvLyBjcmFzaGluZyBvbiBsb2FkaW5nIGJhZCBkYXRhXG4gICAgcmV0dXJuIGRhdGEgYXMgVXNlckRhdGFRdW90YVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICghYXhpb3MuaXNBeGlvc0Vycm9yKGVycm9yKSkge1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgIGlmIChlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVVzZXJRdW90YXModXNlcklkOiBzdHJpbmcgfCB1bmRlZmluZWQsIG9yZ0lkPzogc3RyaW5nKSB7XG4gIHJldHVybiB1c2VRdWVyeSh7XG4gICAgcXVlcnlLZXk6IFtcInVzZXJkYXRhLXF1b3RhXCIsIHVzZXJJZCwgb3JnSWRdIGFzIGNvbnN0LFxuICAgIHF1ZXJ5Rm46IGdldFVzZXJRdW90YXMsXG4gICAgcmVmZXRjaE9uUmVjb25uZWN0OiB0cnVlLFxuICAgIHJlZmV0Y2hPbldpbmRvd0ZvY3VzOiB0cnVlLFxuICAgIHJlZmV0Y2hJbnRlcnZhbDogNjAgKiAxXzAwMCxcbiAgICByZXRyeTogMixcbiAgfSlcbn1cblxudHlwZSBVc2VVc2VyUXVvdGFzID0gdHlwZW9mIHVzZVVzZXJRdW90YXNcblxuZXhwb3J0IHsgdXNlVXNlclF1b3RhcyB9XG5leHBvcnQgdHlwZSB7IFVzZXJEYXRhUXVvdGEsIFVzZVVzZXJRdW90YXMgfVxuIl0sIm5hbWVzIjpbInVzZVVzZXJRdW90YXMiLCJnZXRVc2VyUXVvdGFzIiwiZGF0YSIsImF4aW9zQ2xpZW50IiwiZ2V0IiwicmVzdWx0IiwiVXNlckRhdGFRdW90YVNjaGVtYSIsInNhZmVQYXJzZSIsInN1Y2Nlc3MiLCJlcnJvciIsImF4aW9zIiwiaXNBeGlvc0Vycm9yIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJ1c2VySWQiLCJvcmdJZCIsInVzZVF1ZXJ5IiwicXVlcnlLZXkiLCJxdWVyeUZuIiwicmVmZXRjaE9uUmVjb25uZWN0IiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJyZWZldGNoSW50ZXJ2YWwiLCJyZXRyeSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE4Q1NBOzs7ZUFBQUE7Ozs4REE5Q1M7MEJBQ2lDOzZCQUN2Qjs0QkFDSDs7Ozs7O0FBRXpCLE1BQU1DLGdCQUFnQjtJQUNwQixJQUFJO1FBQ0YsTUFBTSxFQUFFQyxJQUFJLEVBQUUsR0FBRyxNQUFNQyx3QkFBVyxDQUFDQyxHQUFHLENBQVU7UUFDaEQsTUFBTUMsU0FBU0MsNkJBQW1CLENBQUNDLFNBQVMsQ0FBQ0w7UUFFN0MsSUFBSUcsT0FBT0csT0FBTyxFQUFFO1lBQ2xCLE9BQU9ILE9BQU9ILElBQUk7UUFDcEI7UUFFQSxpREFBaUQ7UUFDakQsc0RBQXNEO1FBQ3RELCtDQUErQztRQUMvQywrQkFBK0I7UUFDL0IsT0FBT0E7SUFDVCxFQUFFLE9BQU9PLE9BQU87UUFDZCxJQUFJLENBQUNDLGNBQUssQ0FBQ0MsWUFBWSxDQUFDRixRQUFRO1lBQzlCLE1BQU1BO1FBQ1I7UUFFQSxJQUFJQSxNQUFNRyxRQUFRLEVBQUU7WUFDbEIsSUFBSUgsTUFBTUcsUUFBUSxDQUFDQyxNQUFNLEtBQUssS0FBSztnQkFDakMsT0FBTztZQUNUO1FBQ0Y7UUFDQSxNQUFNSjtJQUNSO0FBQ0Y7QUFFQSxTQUFTVCxjQUFjYyxNQUEwQixFQUFFQyxLQUFjO0lBQy9ELE9BQU9DLElBQUFBLG9CQUFRLEVBQUM7UUFDZEMsVUFBVTtZQUFDO1lBQWtCSDtZQUFRQztTQUFNO1FBQzNDRyxTQUFTakI7UUFDVGtCLG9CQUFvQjtRQUNwQkMsc0JBQXNCO1FBQ3RCQyxpQkFBaUIsS0FBSztRQUN0QkMsT0FBTztJQUNUO0FBQ0YifQ==