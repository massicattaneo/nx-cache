{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistDataTabs/CustomDataView/hooks/useCustomColumns.ts"],"sourcesContent":["import { useCallback, useMemo } from \"react\"\nimport { useFlags } from \"launchdarkly-react-client-sdk\"\nimport {\n  CustomDataViewResponse,\n  customDataViewsQueryKeys,\n  usePrimaryCustomDataView,\n  useSaveCustomDataView,\n} from \"@rp/react/tanstack-api/watchlist\"\nimport { getlocalOverrideFlags } from \"@rp/react/web/common/hooks\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport { useQueryClient } from \"@tanstack/react-query\"\nimport { WatchlistFeatureFlags } from \"../../../types/featureFlags\"\nimport { apiColumnsToUIColumns, uiColumnsToApiColumns } from \"../../utils/columnMapping\"\nimport { UICustomColumn } from \"../types\"\n\nfunction useCustomColumns() {\n  const { enqueueError } = useSnackbar()\n  const queryClient = useQueryClient()\n\n  // Feature flag for custom data views\n  const { webBeEnableCustomDataViewsWe } = useFlags<WatchlistFeatureFlags>()\n  const enableCustomDataViews = getlocalOverrideFlags(\n    \"webBeEnableCustomDataViewsWe\",\n    webBeEnableCustomDataViewsWe,\n  )\n\n  // Use TanStack Query hooks for data fetching\n  const {\n    data: customDataView,\n    isLoading,\n    error,\n  } = usePrimaryCustomDataView({\n    enabled: enableCustomDataViews,\n  })\n\n  const saveMutation = useSaveCustomDataView({\n    enqueueError,\n    enabled: enableCustomDataViews,\n  })\n\n  // Convert API data to UI format and memoize to prevent dependency issues\n  const customColumns = useMemo(() => {\n    return customDataView ? apiColumnsToUIColumns(customDataView.columns) : []\n  }, [customDataView])\n\n  const saveColumns = useCallback(\n    async (columns: Array<UICustomColumn>) => {\n      // Get current state for optimistic update\n      const previousData = queryClient.getQueryData<{ results: Array<CustomDataViewResponse> }>(\n        customDataViewsQueryKeys.all,\n      )\n\n      const apiColumns = uiColumnsToApiColumns(columns)\n\n      try {\n        // Optimistically update with new columns (even if empty)\n        const optimisticView: CustomDataViewResponse = {\n          id: customDataView?.id || \"optimistic\",\n          columns: apiColumns,\n          createdAt: customDataView?.createdAt || new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        }\n\n        queryClient.setQueryData(customDataViewsQueryKeys.all, {\n          results: [optimisticView],\n        })\n\n        // Save the column configuration (create or update as needed)\n        await saveMutation.mutateAsync(apiColumns)\n      } catch (error) {\n        // Rollback optimistic update on error\n        if (previousData) {\n          queryClient.setQueryData(customDataViewsQueryKeys.all, previousData)\n        }\n        throw error\n      }\n    },\n    [customDataView, saveMutation, queryClient],\n  )\n\n  const clearAllColumns = useCallback(async () => {\n    await saveColumns([])\n  }, [saveColumns])\n\n  const hasCustomColumns = customColumns.length > 0\n\n  return {\n    customColumns,\n    saveColumns,\n    clearAllColumns,\n    hasCustomColumns,\n    isPending: isLoading || saveMutation.isPending,\n    error: error?.message || null,\n    enabled: enableCustomDataViews,\n  }\n}\n\nexport { useCustomColumns }\n"],"names":["useCustomColumns","enqueueError","useSnackbar","queryClient","useQueryClient","webBeEnableCustomDataViewsWe","useFlags","enableCustomDataViews","getlocalOverrideFlags","data","customDataView","isLoading","error","usePrimaryCustomDataView","enabled","saveMutation","useSaveCustomDataView","customColumns","useMemo","apiColumnsToUIColumns","columns","saveColumns","useCallback","previousData","getQueryData","customDataViewsQueryKeys","all","apiColumns","uiColumnsToApiColumns","optimisticView","id","createdAt","Date","toISOString","updatedAt","setQueryData","results","mutateAsync","clearAllColumns","hasCustomColumns","length","isPending","message"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAiGSA;;;eAAAA;;;uBAjG4B;4CACZ;2BAMlB;uBAC+B;2BACV;4BACG;+BAE8B;AAG7D,SAASA;IACP,MAAM,EAAEC,YAAY,EAAE,GAAGC,IAAAA,sBAAW;IACpC,MAAMC,cAAcC,IAAAA,0BAAc;IAElC,qCAAqC;IACrC,MAAM,EAAEC,4BAA4B,EAAE,GAAGC,IAAAA,oCAAQ;IACjD,MAAMC,wBAAwBC,IAAAA,4BAAqB,EACjD,gCACAH;IAGF,6CAA6C;IAC7C,MAAM,EACJI,MAAMC,cAAc,EACpBC,SAAS,EACTC,KAAK,EACN,GAAGC,IAAAA,mCAAwB,EAAC;QAC3BC,SAASP;IACX;IAEA,MAAMQ,eAAeC,IAAAA,gCAAqB,EAAC;QACzCf;QACAa,SAASP;IACX;IAEA,yEAAyE;IACzE,MAAMU,gBAAgBC,IAAAA,cAAO,EAAC;QAC5B,OAAOR,iBAAiBS,IAAAA,oCAAqB,EAACT,eAAeU,OAAO,IAAI,EAAE;IAC5E,GAAG;QAACV;KAAe;IAEnB,MAAMW,cAAcC,IAAAA,kBAAW,EAC7B,OAAOF;QACL,0CAA0C;QAC1C,MAAMG,eAAepB,YAAYqB,YAAY,CAC3CC,mCAAwB,CAACC,GAAG;QAG9B,MAAMC,aAAaC,IAAAA,oCAAqB,EAACR;QAEzC,IAAI;YACF,yDAAyD;YACzD,MAAMS,iBAAyC;gBAC7CC,IAAIpB,CAAAA,2BAAAA,qCAAAA,eAAgBoB,EAAE,KAAI;gBAC1BV,SAASO;gBACTI,WAAWrB,CAAAA,2BAAAA,qCAAAA,eAAgBqB,SAAS,KAAI,IAAIC,OAAOC,WAAW;gBAC9DC,WAAW,IAAIF,OAAOC,WAAW;YACnC;YAEA9B,YAAYgC,YAAY,CAACV,mCAAwB,CAACC,GAAG,EAAE;gBACrDU,SAAS;oBAACP;iBAAe;YAC3B;YAEA,6DAA6D;YAC7D,MAAMd,aAAasB,WAAW,CAACV;QACjC,EAAE,OAAOf,OAAO;YACd,sCAAsC;YACtC,IAAIW,cAAc;gBAChBpB,YAAYgC,YAAY,CAACV,mCAAwB,CAACC,GAAG,EAAEH;YACzD;YACA,MAAMX;QACR;IACF,GACA;QAACF;QAAgBK;QAAcZ;KAAY;IAG7C,MAAMmC,kBAAkBhB,IAAAA,kBAAW,EAAC;QAClC,MAAMD,YAAY,EAAE;IACtB,GAAG;QAACA;KAAY;IAEhB,MAAMkB,mBAAmBtB,cAAcuB,MAAM,GAAG;IAEhD,OAAO;QACLvB;QACAI;QACAiB;QACAC;QACAE,WAAW9B,aAAaI,aAAa0B,SAAS;QAC9C7B,OAAOA,CAAAA,kBAAAA,4BAAAA,MAAO8B,OAAO,KAAI;QACzB5B,SAASP;IACX;AACF"}