0077e236190ca57487f1d21eb20f9bbb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updateAutoHeight;
    }
});
function updateAutoHeight(speed) {
    const swiper = this;
    const activeSlides = [];
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    let newHeight = 0;
    let i;
    if (typeof speed === 'number') {
        swiper.setTransition(speed);
    } else if (speed === true) {
        swiper.setTransition(swiper.params.speed);
    }
    const getSlideByIndex = (index)=>{
        if (isVirtual) {
            return swiper.slides[swiper.getSlideIndexByData(index)];
        }
        return swiper.slides[index];
    };
    // Find slides currently in view
    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
        if (swiper.params.centeredSlides) {
            (swiper.visibleSlides || []).forEach((slide)=>{
                activeSlides.push(slide);
            });
        } else {
            for(i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1){
                const index = swiper.activeIndex + i;
                if (index > swiper.slides.length && !isVirtual) break;
                activeSlides.push(getSlideByIndex(index));
            }
        }
    } else {
        activeSlides.push(getSlideByIndex(swiper.activeIndex));
    }
    // Find new height from highest slide in view
    for(i = 0; i < activeSlides.length; i += 1){
        if (typeof activeSlides[i] !== 'undefined') {
            const height = activeSlides[i].offsetHeight;
            newHeight = height > newHeight ? height : newHeight;
        }
    }
    // Update Height
    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG4gIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShpbmRleCldO1xuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlc1tpbmRleF07XG4gIH07XG4gIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCBbXSkuZm9yRWFjaChzbGlkZSA9PiB7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoICYmICFpc1ZpcnR1YWwpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KHN3aXBlci5hY3RpdmVJbmRleCkpO1xuICB9XG5cbiAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gIGZvciAoaSA9IDA7IGkgPCBhY3RpdmVTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIEhlaWdodFxuICBpZiAobmV3SGVpZ2h0IHx8IG5ld0hlaWdodCA9PT0gMCkgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5oZWlnaHQgPSBgJHtuZXdIZWlnaHR9cHhgO1xufSJdLCJuYW1lcyI6WyJ1cGRhdGVBdXRvSGVpZ2h0Iiwic3BlZWQiLCJzd2lwZXIiLCJhY3RpdmVTbGlkZXMiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwicGFyYW1zIiwiZW5hYmxlZCIsIm5ld0hlaWdodCIsImkiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwiaW5kZXgiLCJzbGlkZXMiLCJnZXRTbGlkZUluZGV4QnlEYXRhIiwic2xpZGVzUGVyVmlldyIsImNlbnRlcmVkU2xpZGVzIiwidmlzaWJsZVNsaWRlcyIsImZvckVhY2giLCJzbGlkZSIsInB1c2giLCJNYXRoIiwiY2VpbCIsImFjdGl2ZUluZGV4IiwibGVuZ3RoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwid3JhcHBlckVsIiwic3R5bGUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFBQTs7O2VBQXdCQTs7O0FBQVQsU0FBU0EsaUJBQWlCQyxLQUFLO0lBQzVDLE1BQU1DLFNBQVMsSUFBSTtJQUNuQixNQUFNQyxlQUFlLEVBQUU7SUFDdkIsTUFBTUMsWUFBWUYsT0FBT0csT0FBTyxJQUFJSCxPQUFPSSxNQUFNLENBQUNELE9BQU8sQ0FBQ0UsT0FBTztJQUNqRSxJQUFJQyxZQUFZO0lBQ2hCLElBQUlDO0lBQ0osSUFBSSxPQUFPUixVQUFVLFVBQVU7UUFDN0JDLE9BQU9RLGFBQWEsQ0FBQ1Q7SUFDdkIsT0FBTyxJQUFJQSxVQUFVLE1BQU07UUFDekJDLE9BQU9RLGFBQWEsQ0FBQ1IsT0FBT0ksTUFBTSxDQUFDTCxLQUFLO0lBQzFDO0lBQ0EsTUFBTVUsa0JBQWtCQyxDQUFBQTtRQUN0QixJQUFJUixXQUFXO1lBQ2IsT0FBT0YsT0FBT1csTUFBTSxDQUFDWCxPQUFPWSxtQkFBbUIsQ0FBQ0YsT0FBTztRQUN6RDtRQUNBLE9BQU9WLE9BQU9XLE1BQU0sQ0FBQ0QsTUFBTTtJQUM3QjtJQUNBLGdDQUFnQztJQUNoQyxJQUFJVixPQUFPSSxNQUFNLENBQUNTLGFBQWEsS0FBSyxVQUFVYixPQUFPSSxNQUFNLENBQUNTLGFBQWEsR0FBRyxHQUFHO1FBQzdFLElBQUliLE9BQU9JLE1BQU0sQ0FBQ1UsY0FBYyxFQUFFO1lBQy9CZCxDQUFBQSxPQUFPZSxhQUFhLElBQUksRUFBRSxBQUFELEVBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7Z0JBQ25DaEIsYUFBYWlCLElBQUksQ0FBQ0Q7WUFDcEI7UUFDRixPQUFPO1lBQ0wsSUFBS1YsSUFBSSxHQUFHQSxJQUFJWSxLQUFLQyxJQUFJLENBQUNwQixPQUFPSSxNQUFNLENBQUNTLGFBQWEsR0FBR04sS0FBSyxFQUFHO2dCQUM5RCxNQUFNRyxRQUFRVixPQUFPcUIsV0FBVyxHQUFHZDtnQkFDbkMsSUFBSUcsUUFBUVYsT0FBT1csTUFBTSxDQUFDVyxNQUFNLElBQUksQ0FBQ3BCLFdBQVc7Z0JBQ2hERCxhQUFhaUIsSUFBSSxDQUFDVCxnQkFBZ0JDO1lBQ3BDO1FBQ0Y7SUFDRixPQUFPO1FBQ0xULGFBQWFpQixJQUFJLENBQUNULGdCQUFnQlQsT0FBT3FCLFdBQVc7SUFDdEQ7SUFFQSw2Q0FBNkM7SUFDN0MsSUFBS2QsSUFBSSxHQUFHQSxJQUFJTixhQUFhcUIsTUFBTSxFQUFFZixLQUFLLEVBQUc7UUFDM0MsSUFBSSxPQUFPTixZQUFZLENBQUNNLEVBQUUsS0FBSyxhQUFhO1lBQzFDLE1BQU1nQixTQUFTdEIsWUFBWSxDQUFDTSxFQUFFLENBQUNpQixZQUFZO1lBQzNDbEIsWUFBWWlCLFNBQVNqQixZQUFZaUIsU0FBU2pCO1FBQzVDO0lBQ0Y7SUFFQSxnQkFBZ0I7SUFDaEIsSUFBSUEsYUFBYUEsY0FBYyxHQUFHTixPQUFPeUIsU0FBUyxDQUFDQyxLQUFLLENBQUNILE1BQU0sR0FBRyxDQUFDLEVBQUVqQixVQUFVLEVBQUUsQ0FBQztBQUNwRiJ9