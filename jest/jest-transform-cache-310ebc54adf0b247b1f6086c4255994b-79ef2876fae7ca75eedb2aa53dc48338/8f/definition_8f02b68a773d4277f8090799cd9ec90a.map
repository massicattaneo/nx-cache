{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/definition.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n"],"names":["definition","name","tokenize","tokenizeDefinition","titleBefore","tokenizeTitleBefore","partial","effects","ok","nok","self","identifier","start","code","enter","before","factoryLabel","call","labelAfter","normalizeIdentifier","sliceSerialize","events","length","slice","consume","exit","markerAfter","markdownLineEndingOrSpace","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","attempt","after","markdownSpace","factorySpace","afterWhitespace","markdownLineEnding","parser","defined","push","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}