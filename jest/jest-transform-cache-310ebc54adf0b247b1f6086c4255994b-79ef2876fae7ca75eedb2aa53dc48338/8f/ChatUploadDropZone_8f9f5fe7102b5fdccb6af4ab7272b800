f89c267bac4dee1a189d3e22cf60e5d5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ChatUploadDropZone", {
    enumerable: true,
    get: function() {
        return ChatUploadDropZone;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _adapters = require("@rp/adapters");
const _providers = require("@rp/react/common/providers");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _providers1 = require("@rp/react/web/common/providers");
const _ChatUploadOverlay = require("./ChatUploadOverlay");
const ChatUploadDropZone = ({ children, onDropFiles, onFileId, beforeDrop = async ()=>{}, multiple = false, disabled = false, chatId })=>{
    const { enqueueError } = (0, _providers1.useSnackbar)();
    const { addToUploadQueue } = (0, _providers.useUploadFilesContext)();
    const { isOverLimit } = (0, _file.useQuota)();
    const onDrop = (0, _react.useCallback)((acceptedFiles)=>{
        if (isOverLimit) return;
        beforeDrop(acceptedFiles).then(()=>{
            const list = addToUploadQueue(acceptedFiles, {
                onFileId,
                location: chatId ? "activeChatModal" : "mainChatModal"
            });
            onDropFiles === null || onDropFiles === void 0 ? void 0 : onDropFiles(list);
        });
    }, [
        addToUploadQueue,
        beforeDrop,
        chatId,
        isOverLimit,
        onDropFiles,
        onFileId
    ]);
    const onDropRejected = (0, _react.useCallback)((rejectedFiles)=>{
        // Invalid formats
        const files = [
            ...new Set(rejectedFiles.map((file)=>file.file.type))
        ];
        const notSupported = files.join(" ,").replace(/application|\/|image/gi, "");
        if (rejectedFiles.length > 1 && !multiple) {
            enqueueError("You can only upload one file at a time.");
            return;
        }
        // Error Snackbar
        enqueueError(`The files format ${notSupported} are not supported.`, {
            autoHideDuration: 5000
        }, {
            action: /*#__PURE__*/ (0, _jsxruntime.jsx)(_providers1.ContactSupport, {})
        });
    }, [
        enqueueError,
        multiple
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.DropZone, {
        onDrop: onDrop,
        onDropRejected: onDropRejected,
        Overlay: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatUploadOverlay.ChatUploadOverlay, {
            isOverLimit: isOverLimit
        }),
        multiple: multiple,
        disabled: disabled,
        accept: _adapters.adapters.file.getTaExtension().join(", "),
        children: children
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0VXBsb2FkRHJvcFpvbmUvQ2hhdFVwbG9hZERyb3Bab25lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBGaWxlUmVqZWN0aW9uIH0gZnJvbSBcInJlYWN0LWRyb3B6b25lXCJcbmltcG9ydCB7IGFkYXB0ZXJzIH0gZnJvbSBcIkBycC9hZGFwdGVyc1wiXG5pbXBvcnQgeyBVcGxvYWRhYmxlIH0gZnJvbSBcIkBycC9jb21tb24vdXRpbHNcIlxuaW1wb3J0IHsgdXNlVXBsb2FkRmlsZXNDb250ZXh0IH0gZnJvbSBcIkBycC9yZWFjdC9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IHVzZVF1b3RhIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZmlsZVwiXG5pbXBvcnQgeyBEcm9wWm9uZSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgQ29udGFjdFN1cHBvcnQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IHVzZVNuYWNrYmFyIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5pbXBvcnQgeyBDaGF0VXBsb2FkT3ZlcmxheSB9IGZyb20gXCIuL0NoYXRVcGxvYWRPdmVybGF5XCJcblxudHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuICBiZWZvcmVEcm9wPzogKGZpbGVzOiBBcnJheTxGaWxlPikgPT4gUHJvbWlzZTx2b2lkPlxuICBvbkRyb3BGaWxlcz86IChmaWxlczogQXJyYXk8VXBsb2FkYWJsZT4pID0+IHZvaWRcbiAgb25GaWxlSWQ/OiAoc3JjOiBzdHJpbmcsIGZpbGVJZDogc3RyaW5nKSA9PiB2b2lkXG4gIG11bHRpcGxlPzogYm9vbGVhblxuICBkaXNhYmxlZD86IGJvb2xlYW5cbiAgY2hhdElkOiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cblxuY29uc3QgQ2hhdFVwbG9hZERyb3Bab25lID0gKHtcbiAgY2hpbGRyZW4sXG4gIG9uRHJvcEZpbGVzLFxuICBvbkZpbGVJZCxcbiAgYmVmb3JlRHJvcCA9IGFzeW5jICgpID0+IHt9LFxuICBtdWx0aXBsZSA9IGZhbHNlLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICBjaGF0SWQsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuICBjb25zdCB7IGFkZFRvVXBsb2FkUXVldWUgfSA9IHVzZVVwbG9hZEZpbGVzQ29udGV4dCgpXG4gIGNvbnN0IHsgaXNPdmVyTGltaXQgfSA9IHVzZVF1b3RhKClcblxuICBjb25zdCBvbkRyb3AgPSB1c2VDYWxsYmFjayhcbiAgICAoYWNjZXB0ZWRGaWxlczogQXJyYXk8RmlsZT4pID0+IHtcbiAgICAgIGlmIChpc092ZXJMaW1pdCkgcmV0dXJuXG4gICAgICBiZWZvcmVEcm9wKGFjY2VwdGVkRmlsZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBsaXN0ID0gYWRkVG9VcGxvYWRRdWV1ZShhY2NlcHRlZEZpbGVzLCB7XG4gICAgICAgICAgb25GaWxlSWQsXG4gICAgICAgICAgbG9jYXRpb246IGNoYXRJZCA/IFwiYWN0aXZlQ2hhdE1vZGFsXCIgOiBcIm1haW5DaGF0TW9kYWxcIixcbiAgICAgICAgfSlcbiAgICAgICAgb25Ecm9wRmlsZXM/LihsaXN0KVxuICAgICAgfSlcbiAgICB9LFxuICAgIFthZGRUb1VwbG9hZFF1ZXVlLCBiZWZvcmVEcm9wLCBjaGF0SWQsIGlzT3ZlckxpbWl0LCBvbkRyb3BGaWxlcywgb25GaWxlSWRdLFxuICApXG5cbiAgY29uc3Qgb25Ecm9wUmVqZWN0ZWQgPSB1c2VDYWxsYmFjayhcbiAgICAocmVqZWN0ZWRGaWxlczogQXJyYXk8RmlsZVJlamVjdGlvbj4pID0+IHtcbiAgICAgIC8vIEludmFsaWQgZm9ybWF0c1xuICAgICAgY29uc3QgZmlsZXM6IEFycmF5PHN0cmluZz4gPSBbXG4gICAgICAgIC4uLm5ldyBTZXQ8c3RyaW5nPihyZWplY3RlZEZpbGVzLm1hcCgoZmlsZTogRmlsZVJlamVjdGlvbikgPT4gZmlsZS5maWxlLnR5cGUpKSxcbiAgICAgIF1cbiAgICAgIGNvbnN0IG5vdFN1cHBvcnRlZCA9IGZpbGVzLmpvaW4oXCIgLFwiKS5yZXBsYWNlKC9hcHBsaWNhdGlvbnxcXC98aW1hZ2UvZ2ksIFwiXCIpXG4gICAgICBpZiAocmVqZWN0ZWRGaWxlcy5sZW5ndGggPiAxICYmICFtdWx0aXBsZSkge1xuICAgICAgICBlbnF1ZXVlRXJyb3IoXCJZb3UgY2FuIG9ubHkgdXBsb2FkIG9uZSBmaWxlIGF0IGEgdGltZS5cIilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBFcnJvciBTbmFja2JhclxuICAgICAgZW5xdWV1ZUVycm9yKFxuICAgICAgICBgVGhlIGZpbGVzIGZvcm1hdCAke25vdFN1cHBvcnRlZH0gYXJlIG5vdCBzdXBwb3J0ZWQuYCxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9IaWRlRHVyYXRpb246IDUwMDAsXG4gICAgICAgIH0sXG4gICAgICAgIHsgYWN0aW9uOiA8Q29udGFjdFN1cHBvcnQgLz4gfSxcbiAgICAgIClcbiAgICB9LFxuICAgIFtlbnF1ZXVlRXJyb3IsIG11bHRpcGxlXSxcbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPERyb3Bab25lXG4gICAgICBvbkRyb3A9e29uRHJvcH1cbiAgICAgIG9uRHJvcFJlamVjdGVkPXtvbkRyb3BSZWplY3RlZH1cbiAgICAgIE92ZXJsYXk9ezxDaGF0VXBsb2FkT3ZlcmxheSBpc092ZXJMaW1pdD17aXNPdmVyTGltaXR9IC8+fVxuICAgICAgbXVsdGlwbGU9e211bHRpcGxlfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgYWNjZXB0PXthZGFwdGVycy5maWxlLmdldFRhRXh0ZW5zaW9uKCkuam9pbihcIiwgXCIpfVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0Ryb3Bab25lPlxuICApXG59XG5leHBvcnQgeyBDaGF0VXBsb2FkRHJvcFpvbmUgfVxuIl0sIm5hbWVzIjpbIkNoYXRVcGxvYWREcm9wWm9uZSIsImNoaWxkcmVuIiwib25Ecm9wRmlsZXMiLCJvbkZpbGVJZCIsImJlZm9yZURyb3AiLCJtdWx0aXBsZSIsImRpc2FibGVkIiwiY2hhdElkIiwiZW5xdWV1ZUVycm9yIiwidXNlU25hY2tiYXIiLCJhZGRUb1VwbG9hZFF1ZXVlIiwidXNlVXBsb2FkRmlsZXNDb250ZXh0IiwiaXNPdmVyTGltaXQiLCJ1c2VRdW90YSIsIm9uRHJvcCIsInVzZUNhbGxiYWNrIiwiYWNjZXB0ZWRGaWxlcyIsInRoZW4iLCJsaXN0IiwibG9jYXRpb24iLCJvbkRyb3BSZWplY3RlZCIsInJlamVjdGVkRmlsZXMiLCJmaWxlcyIsIlNldCIsIm1hcCIsImZpbGUiLCJ0eXBlIiwibm90U3VwcG9ydGVkIiwiam9pbiIsInJlcGxhY2UiLCJsZW5ndGgiLCJhdXRvSGlkZUR1cmF0aW9uIiwiYWN0aW9uIiwiQ29udGFjdFN1cHBvcnQiLCJEcm9wWm9uZSIsIk92ZXJsYXkiLCJDaGF0VXBsb2FkT3ZlcmxheSIsImFjY2VwdCIsImFkYXB0ZXJzIiwiZ2V0VGFFeHRlbnNpb24iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFvRlNBOzs7ZUFBQUE7Ozs7dUJBcEZtQjswQkFFSDsyQkFFYTtzQkFDYjtnQ0FDQTs0QkFDTTttQ0FFRztBQVlsQyxNQUFNQSxxQkFBcUIsQ0FBQyxFQUMxQkMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLFFBQVEsRUFDUkMsYUFBYSxXQUFhLENBQUMsRUFDM0JDLFdBQVcsS0FBSyxFQUNoQkMsV0FBVyxLQUFLLEVBQ2hCQyxNQUFNLEVBQ0E7SUFDTixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSx1QkFBVztJQUNwQyxNQUFNLEVBQUVDLGdCQUFnQixFQUFFLEdBQUdDLElBQUFBLGdDQUFxQjtJQUNsRCxNQUFNLEVBQUVDLFdBQVcsRUFBRSxHQUFHQyxJQUFBQSxjQUFRO0lBRWhDLE1BQU1DLFNBQVNDLElBQUFBLGtCQUFXLEVBQ3hCLENBQUNDO1FBQ0MsSUFBSUosYUFBYTtRQUNqQlIsV0FBV1ksZUFBZUMsSUFBSSxDQUFDO1lBQzdCLE1BQU1DLE9BQU9SLGlCQUFpQk0sZUFBZTtnQkFDM0NiO2dCQUNBZ0IsVUFBVVosU0FBUyxvQkFBb0I7WUFDekM7WUFDQUwsd0JBQUFBLGtDQUFBQSxZQUFjZ0I7UUFDaEI7SUFDRixHQUNBO1FBQUNSO1FBQWtCTjtRQUFZRztRQUFRSztRQUFhVjtRQUFhQztLQUFTO0lBRzVFLE1BQU1pQixpQkFBaUJMLElBQUFBLGtCQUFXLEVBQ2hDLENBQUNNO1FBQ0Msa0JBQWtCO1FBQ2xCLE1BQU1DLFFBQXVCO2VBQ3hCLElBQUlDLElBQVlGLGNBQWNHLEdBQUcsQ0FBQyxDQUFDQyxPQUF3QkEsS0FBS0EsSUFBSSxDQUFDQyxJQUFJO1NBQzdFO1FBQ0QsTUFBTUMsZUFBZUwsTUFBTU0sSUFBSSxDQUFDLE1BQU1DLE9BQU8sQ0FBQywwQkFBMEI7UUFDeEUsSUFBSVIsY0FBY1MsTUFBTSxHQUFHLEtBQUssQ0FBQ3pCLFVBQVU7WUFDekNHLGFBQWE7WUFDYjtRQUNGO1FBQ0EsaUJBQWlCO1FBQ2pCQSxhQUNFLENBQUMsaUJBQWlCLEVBQUVtQixhQUFhLG1CQUFtQixDQUFDLEVBQ3JEO1lBQ0VJLGtCQUFrQjtRQUNwQixHQUNBO1lBQUVDLHNCQUFRLHFCQUFDQywwQkFBYztRQUFJO0lBRWpDLEdBQ0E7UUFBQ3pCO1FBQWNIO0tBQVM7SUFHMUIscUJBQ0UscUJBQUM2Qix3QkFBUTtRQUNQcEIsUUFBUUE7UUFDUk0sZ0JBQWdCQTtRQUNoQmUsdUJBQVMscUJBQUNDLG9DQUFpQjtZQUFDeEIsYUFBYUE7O1FBQ3pDUCxVQUFVQTtRQUNWQyxVQUFVQTtRQUNWK0IsUUFBUUMsa0JBQVEsQ0FBQ2IsSUFBSSxDQUFDYyxjQUFjLEdBQUdYLElBQUksQ0FBQztrQkFFM0MzQjs7QUFHUCJ9