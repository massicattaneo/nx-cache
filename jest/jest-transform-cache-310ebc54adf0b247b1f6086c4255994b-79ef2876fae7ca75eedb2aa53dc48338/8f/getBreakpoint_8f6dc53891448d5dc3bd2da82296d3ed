acd878650d5fb74db97d7423283fb976
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return getBreakpoint;
    }
});
const _ssrwindow = require("ssr-window");
function getBreakpoint(breakpoints, base = 'window', containerEl) {
    if (!breakpoints || base === 'container' && !containerEl) return undefined;
    let breakpoint = false;
    const window = (0, _ssrwindow.getWindow)();
    const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
    const points = Object.keys(breakpoints).map((point)=>{
        if (typeof point === 'string' && point.indexOf('@') === 0) {
            const minRatio = parseFloat(point.substr(1));
            const value = currentHeight * minRatio;
            return {
                value,
                point
            };
        }
        return {
            value: point,
            point
        };
    });
    points.sort((a, b)=>parseInt(a.value, 10) - parseInt(b.value, 10));
    for(let i = 0; i < points.length; i += 1){
        const { point, value } = points[i];
        if (base === 'window') {
            if (window.matchMedia(`(min-width: ${value}px)`).matches) {
                breakpoint = point;
            }
        } else if (value <= containerEl.clientWidth) {
            breakpoint = point;
        }
    }
    return breakpoint || 'max';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSA9ICd3aW5kb3cnLCBjb250YWluZXJFbCkge1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn0iXSwibmFtZXMiOlsiZ2V0QnJlYWtwb2ludCIsImJyZWFrcG9pbnRzIiwiYmFzZSIsImNvbnRhaW5lckVsIiwidW5kZWZpbmVkIiwiYnJlYWtwb2ludCIsIndpbmRvdyIsImdldFdpbmRvdyIsImN1cnJlbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsImNsaWVudEhlaWdodCIsInBvaW50cyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJwb2ludCIsImluZGV4T2YiLCJtaW5SYXRpbyIsInBhcnNlRmxvYXQiLCJzdWJzdHIiLCJ2YWx1ZSIsInNvcnQiLCJhIiwiYiIsInBhcnNlSW50IiwiaSIsImxlbmd0aCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiY2xpZW50V2lkdGgiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQUNBOzs7ZUFBd0JBOzs7MkJBREU7QUFDWCxTQUFTQSxjQUFjQyxXQUFXLEVBQUVDLE9BQU8sUUFBUSxFQUFFQyxXQUFXO0lBQzdFLElBQUksQ0FBQ0YsZUFBZUMsU0FBUyxlQUFlLENBQUNDLGFBQWEsT0FBT0M7SUFDakUsSUFBSUMsYUFBYTtJQUNqQixNQUFNQyxTQUFTQyxJQUFBQSxvQkFBUztJQUN4QixNQUFNQyxnQkFBZ0JOLFNBQVMsV0FBV0ksT0FBT0csV0FBVyxHQUFHTixZQUFZTyxZQUFZO0lBQ3ZGLE1BQU1DLFNBQVNDLE9BQU9DLElBQUksQ0FBQ1osYUFBYWEsR0FBRyxDQUFDQyxDQUFBQTtRQUMxQyxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsTUFBTUMsT0FBTyxDQUFDLFNBQVMsR0FBRztZQUN6RCxNQUFNQyxXQUFXQyxXQUFXSCxNQUFNSSxNQUFNLENBQUM7WUFDekMsTUFBTUMsUUFBUVosZ0JBQWdCUztZQUM5QixPQUFPO2dCQUNMRztnQkFDQUw7WUFDRjtRQUNGO1FBQ0EsT0FBTztZQUNMSyxPQUFPTDtZQUNQQTtRQUNGO0lBQ0Y7SUFDQUosT0FBT1UsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1DLFNBQVNGLEVBQUVGLEtBQUssRUFBRSxNQUFNSSxTQUFTRCxFQUFFSCxLQUFLLEVBQUU7SUFDaEUsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlkLE9BQU9lLE1BQU0sRUFBRUQsS0FBSyxFQUFHO1FBQ3pDLE1BQU0sRUFDSlYsS0FBSyxFQUNMSyxLQUFLLEVBQ04sR0FBR1QsTUFBTSxDQUFDYyxFQUFFO1FBQ2IsSUFBSXZCLFNBQVMsVUFBVTtZQUNyQixJQUFJSSxPQUFPcUIsVUFBVSxDQUFDLENBQUMsWUFBWSxFQUFFUCxNQUFNLEdBQUcsQ0FBQyxFQUFFUSxPQUFPLEVBQUU7Z0JBQ3hEdkIsYUFBYVU7WUFDZjtRQUNGLE9BQU8sSUFBSUssU0FBU2pCLFlBQVkwQixXQUFXLEVBQUU7WUFDM0N4QixhQUFhVTtRQUNmO0lBQ0Y7SUFDQSxPQUFPVixjQUFjO0FBQ3ZCIn0=