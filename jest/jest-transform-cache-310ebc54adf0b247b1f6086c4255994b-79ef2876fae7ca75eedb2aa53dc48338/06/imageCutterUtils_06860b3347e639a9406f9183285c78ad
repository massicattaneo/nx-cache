917b4c871ae072b0dc539d64b65396c0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCroppedImg", {
    enumerable: true,
    get: function() {
        return getCroppedImg;
    }
});
function blobToBase64(blob) {
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = ()=>{
            if (typeof reader.result === "string") {
                resolve(reader.result);
            }
        };
        reader.onerror = reject;
    });
}
async function convertObjectURLToBase64(objectURL) {
    const response = await fetch(objectURL);
    const blob = await response.blob();
    return blobToBase64(blob);
}
const getCroppedImg = async (imageSrc, croppedAreaPixels, outputWidth, outputHeight, format = "image/jpeg")=>{
    return new Promise((resolve, reject)=>{
        const image = new Image();
        image.crossOrigin = "anonymous" // Prevent CORS issues
        ;
        image.src = imageSrc;
        image.onload = ()=>{
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            if (!ctx) {
                reject(new Error("Failed to get canvas context"));
                return;
            }
            // Set canvas to fixed output size
            canvas.width = outputWidth;
            canvas.height = outputHeight;
            // Scale the cropped image to fit the output resolution
            ctx.drawImage(image, croppedAreaPixels.x, croppedAreaPixels.y, croppedAreaPixels.width, croppedAreaPixels.height, 0, 0, outputWidth, outputHeight);
            canvas.toBlob((blob)=>{
                if (!blob) {
                    reject(new Error("Canvas toBlob failed"));
                    return;
                }
                const fileUrl = URL.createObjectURL(blob);
                resolve(convertObjectURLToBase64(fileUrl));
            }, format);
        };
        image.onerror = (error)=>reject(error);
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHMvc3JjL0ltYWdlQ3V0dGVyL2ltYWdlQ3V0dGVyVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgQ3JvcHBlZEFyZWFQaXhlbHMgPSB7XG4gIHdpZHRoOiBudW1iZXJcbiAgaGVpZ2h0OiBudW1iZXJcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxufVxuXG5mdW5jdGlvbiBibG9iVG9CYXNlNjQoYmxvYjogQmxvYikge1xuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpXG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcmVhZGVyLnJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpXG4gICAgICB9XG4gICAgfVxuICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0XG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRPYmplY3RVUkxUb0Jhc2U2NChvYmplY3RVUkw6IHN0cmluZykge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKG9iamVjdFVSTClcbiAgY29uc3QgYmxvYiA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKVxuICByZXR1cm4gYmxvYlRvQmFzZTY0KGJsb2IpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRDcm9wcGVkSW1nID0gYXN5bmMgKFxuICBpbWFnZVNyYzogc3RyaW5nLFxuICBjcm9wcGVkQXJlYVBpeGVsczogQ3JvcHBlZEFyZWFQaXhlbHMsXG4gIG91dHB1dFdpZHRoOiBudW1iZXIsXG4gIG91dHB1dEhlaWdodDogbnVtYmVyLFxuICBmb3JtYXQgPSBcImltYWdlL2pwZWdcIixcbikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKVxuICAgIGltYWdlLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIiAvLyBQcmV2ZW50IENPUlMgaXNzdWVzXG4gICAgaW1hZ2Uuc3JjID0gaW1hZ2VTcmNcblxuICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIilcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcblxuICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgY2FudmFzIGNvbnRleHRcIikpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgY2FudmFzIHRvIGZpeGVkIG91dHB1dCBzaXplXG4gICAgICBjYW52YXMud2lkdGggPSBvdXRwdXRXaWR0aFxuICAgICAgY2FudmFzLmhlaWdodCA9IG91dHB1dEhlaWdodFxuXG4gICAgICAvLyBTY2FsZSB0aGUgY3JvcHBlZCBpbWFnZSB0byBmaXQgdGhlIG91dHB1dCByZXNvbHV0aW9uXG4gICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICBpbWFnZSxcbiAgICAgICAgY3JvcHBlZEFyZWFQaXhlbHMueCxcbiAgICAgICAgY3JvcHBlZEFyZWFQaXhlbHMueSxcbiAgICAgICAgY3JvcHBlZEFyZWFQaXhlbHMud2lkdGgsXG4gICAgICAgIGNyb3BwZWRBcmVhUGl4ZWxzLmhlaWdodCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgb3V0cHV0V2lkdGgsIC8vIEZvcmNlIHRoZSBvdXRwdXQgd2lkdGhcbiAgICAgICAgb3V0cHV0SGVpZ2h0LCAvLyBGb3JjZSB0aGUgb3V0cHV0IGhlaWdodFxuICAgICAgKVxuXG4gICAgICBjYW52YXMudG9CbG9iKGJsb2IgPT4ge1xuICAgICAgICBpZiAoIWJsb2IpIHtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQ2FudmFzIHRvQmxvYiBmYWlsZWRcIikpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlsZVVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYilcbiAgICAgICAgcmVzb2x2ZShjb252ZXJ0T2JqZWN0VVJMVG9CYXNlNjQoZmlsZVVybCkpXG4gICAgICB9LCBmb3JtYXQpXG4gICAgfVxuXG4gICAgaW1hZ2Uub25lcnJvciA9IGVycm9yID0+IHJlamVjdChlcnJvcilcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJnZXRDcm9wcGVkSW1nIiwiYmxvYlRvQmFzZTY0IiwiYmxvYiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJvbmxvYWRlbmQiLCJyZXN1bHQiLCJvbmVycm9yIiwiY29udmVydE9iamVjdFVSTFRvQmFzZTY0Iiwib2JqZWN0VVJMIiwicmVzcG9uc2UiLCJmZXRjaCIsImltYWdlU3JjIiwiY3JvcHBlZEFyZWFQaXhlbHMiLCJvdXRwdXRXaWR0aCIsIm91dHB1dEhlaWdodCIsImZvcm1hdCIsImltYWdlIiwiSW1hZ2UiLCJjcm9zc09yaWdpbiIsInNyYyIsIm9ubG9hZCIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImdldENvbnRleHQiLCJFcnJvciIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhd0ltYWdlIiwieCIsInkiLCJ0b0Jsb2IiLCJmaWxlVXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZXJyb3IiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBMEJhQTs7O2VBQUFBOzs7QUFuQmIsU0FBU0MsYUFBYUMsSUFBVTtJQUM5QixPQUFPLElBQUlDLFFBQWdCLENBQUNDLFNBQVNDO1FBQ25DLE1BQU1DLFNBQVMsSUFBSUM7UUFDbkJELE9BQU9FLGFBQWEsQ0FBQ047UUFDckJJLE9BQU9HLFNBQVMsR0FBRztZQUNqQixJQUFJLE9BQU9ILE9BQU9JLE1BQU0sS0FBSyxVQUFVO2dCQUNyQ04sUUFBUUUsT0FBT0ksTUFBTTtZQUN2QjtRQUNGO1FBQ0FKLE9BQU9LLE9BQU8sR0FBR047SUFDbkI7QUFDRjtBQUVBLGVBQWVPLHlCQUF5QkMsU0FBaUI7SUFDdkQsTUFBTUMsV0FBVyxNQUFNQyxNQUFNRjtJQUM3QixNQUFNWCxPQUFPLE1BQU1ZLFNBQVNaLElBQUk7SUFDaEMsT0FBT0QsYUFBYUM7QUFDdEI7QUFFTyxNQUFNRixnQkFBZ0IsT0FDM0JnQixVQUNBQyxtQkFDQUMsYUFDQUMsY0FDQUMsU0FBUyxZQUFZO0lBRXJCLE9BQU8sSUFBSWpCLFFBQWdCLENBQUNDLFNBQVNDO1FBQ25DLE1BQU1nQixRQUFRLElBQUlDO1FBQ2xCRCxNQUFNRSxXQUFXLEdBQUcsWUFBWSxzQkFBc0I7O1FBQ3RERixNQUFNRyxHQUFHLEdBQUdSO1FBRVpLLE1BQU1JLE1BQU0sR0FBRztZQUNiLE1BQU1DLFNBQVNDLFNBQVNDLGFBQWEsQ0FBQztZQUN0QyxNQUFNQyxNQUFNSCxPQUFPSSxVQUFVLENBQUM7WUFFOUIsSUFBSSxDQUFDRCxLQUFLO2dCQUNSeEIsT0FBTyxJQUFJMEIsTUFBTTtnQkFDakI7WUFDRjtZQUVBLGtDQUFrQztZQUNsQ0wsT0FBT00sS0FBSyxHQUFHZDtZQUNmUSxPQUFPTyxNQUFNLEdBQUdkO1lBRWhCLHVEQUF1RDtZQUN2RFUsSUFBSUssU0FBUyxDQUNYYixPQUNBSixrQkFBa0JrQixDQUFDLEVBQ25CbEIsa0JBQWtCbUIsQ0FBQyxFQUNuQm5CLGtCQUFrQmUsS0FBSyxFQUN2QmYsa0JBQWtCZ0IsTUFBTSxFQUN4QixHQUNBLEdBQ0FmLGFBQ0FDO1lBR0ZPLE9BQU9XLE1BQU0sQ0FBQ25DLENBQUFBO2dCQUNaLElBQUksQ0FBQ0EsTUFBTTtvQkFDVEcsT0FBTyxJQUFJMEIsTUFBTTtvQkFDakI7Z0JBQ0Y7Z0JBQ0EsTUFBTU8sVUFBVUMsSUFBSUMsZUFBZSxDQUFDdEM7Z0JBQ3BDRSxRQUFRUSx5QkFBeUIwQjtZQUNuQyxHQUFHbEI7UUFDTDtRQUVBQyxNQUFNVixPQUFPLEdBQUc4QixDQUFBQSxRQUFTcEMsT0FBT29DO0lBQ2xDO0FBQ0YifQ==