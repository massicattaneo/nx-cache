{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/financial-data/src/bulkFetcher.ts"],"sourcesContent":["import { z } from \"zod\"\nimport {\n  financialDataEndpoints,\n  financialDataSchemas,\n} from \"@rp/common/zod-contracts/financial-data\"\nimport { axiosClient } from \"@rp/react/axios-client\"\n\ntype Endpoints = z.infer<typeof financialDataEndpoints>\n\nfunction camelToDash(str: string): string {\n  return str.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase()\n}\n\nfunction chunkArray<T>(array: Array<T>, size: number): Array<Array<T>> {\n  const chunks: Array<Array<T>> = []\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size))\n  }\n  return chunks\n}\n\n/**\n * Bulk fetcher that queues requests for 100ms and sends in batches of maxBatchSize.\n */\nfunction bulkFetcher<\n  Endpoint extends Endpoints,\n  ResponseMap extends Record<string, unknown> = z.infer<typeof financialDataSchemas[Endpoint]>,\n  ResponseItem = ResponseMap[string] | null,\n>(endpoint: Endpoint, options?: { maxBatchSize?: number }) {\n  let timeoutId: NodeJS.Timeout | undefined\n  const queue: Map<\n    string,\n    {\n      resolvers: Array<{\n        resolve: (value: ResponseItem | null) => void\n        reject: (reason?: unknown) => void\n      }>\n    }\n  > = new Map()\n\n  const maxBatchSize = options?.maxBatchSize ?? 199\n\n  return async (entityId: string): Promise<ResponseItem | null> => {\n    return new Promise<ResponseItem | null>((resolve, reject) => {\n      const existing = queue.get(entityId)\n      if (existing) {\n        existing.resolvers.push({ resolve, reject })\n      } else {\n        queue.set(entityId, { resolvers: [{ resolve, reject }] })\n      }\n\n      if (timeoutId) clearTimeout(timeoutId)\n      timeoutId = setTimeout(async () => {\n        const allIds = Array.from(queue.keys())\n        const batches = chunkArray(allIds, maxBatchSize)\n        const url = `/financial-data/${camelToDash(endpoint)}`\n\n        await Promise.all(\n          batches.map(async batch => {\n            try {\n              const { data } = await axiosClient.post<{ result: ResponseMap }>(url, {\n                entityIds: batch,\n              })\n\n              for (const id of batch) {\n                const record = queue.get(id)\n                const value = data?.result?.[id] ?? null\n                record?.resolvers.forEach(({ resolve }) => resolve(value as ResponseItem))\n                queue.delete(id)\n              }\n            } catch (error) {\n              for (const id of batch) {\n                const record = queue.get(id)\n                record?.resolvers.forEach(({ reject }) => reject(error))\n                queue.delete(id)\n              }\n            }\n          }),\n        )\n      }, 100)\n    })\n  }\n}\n\nexport { bulkFetcher }\n"],"names":["bulkFetcher","camelToDash","str","replace","toLowerCase","chunkArray","array","size","chunks","i","length","push","slice","endpoint","options","timeoutId","queue","Map","maxBatchSize","entityId","Promise","resolve","reject","existing","get","resolvers","set","clearTimeout","setTimeout","allIds","Array","from","keys","batches","url","all","map","batch","data","axiosClient","post","entityIds","id","record","value","result","forEach","delete","error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoFSA;;;eAAAA;;;6BA/EmB;AAI5B,SAASC,YAAYC,GAAW;IAC9B,OAAOA,IAAIC,OAAO,CAAC,sBAAsB,SAASC,WAAW;AAC/D;AAEA,SAASC,WAAcC,KAAe,EAAEC,IAAY;IAClD,MAAMC,SAA0B,EAAE;IAClC,IAAK,IAAIC,IAAI,GAAGA,IAAIH,MAAMI,MAAM,EAAED,KAAKF,KAAM;QAC3CC,OAAOG,IAAI,CAACL,MAAMM,KAAK,CAACH,GAAGA,IAAIF;IACjC;IACA,OAAOC;AACT;AAEA;;CAEC,GACD,SAASR,YAIPa,QAAkB,EAAEC,OAAmC;IACvD,IAAIC;IACJ,MAAMC,QAQF,IAAIC;QAEaH;IAArB,MAAMI,eAAeJ,CAAAA,wBAAAA,oBAAAA,8BAAAA,QAASI,YAAY,cAArBJ,mCAAAA,wBAAyB;IAE9C,OAAO,OAAOK;QACZ,OAAO,IAAIC,QAA6B,CAACC,SAASC;YAChD,MAAMC,WAAWP,MAAMQ,GAAG,CAACL;YAC3B,IAAII,UAAU;gBACZA,SAASE,SAAS,CAACd,IAAI,CAAC;oBAAEU;oBAASC;gBAAO;YAC5C,OAAO;gBACLN,MAAMU,GAAG,CAACP,UAAU;oBAAEM,WAAW;wBAAC;4BAAEJ;4BAASC;wBAAO;qBAAE;gBAAC;YACzD;YAEA,IAAIP,WAAWY,aAAaZ;YAC5BA,YAAYa,WAAW;gBACrB,MAAMC,SAASC,MAAMC,IAAI,CAACf,MAAMgB,IAAI;gBACpC,MAAMC,UAAU5B,WAAWwB,QAAQX;gBACnC,MAAMgB,MAAM,CAAC,gBAAgB,EAAEjC,YAAYY,UAAU,CAAC;gBAEtD,MAAMO,QAAQe,GAAG,CACfF,QAAQG,GAAG,CAAC,OAAMC;oBAChB,IAAI;wBACF,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,wBAAW,CAACC,IAAI,CAA0BN,KAAK;4BACpEO,WAAWJ;wBACb;wBAEA,KAAK,MAAMK,MAAML,MAAO;gCAERC;4BADd,MAAMK,SAAS3B,MAAMQ,GAAG,CAACkB;gCACXJ;4BAAd,MAAMM,QAAQN,CAAAA,kBAAAA,iBAAAA,4BAAAA,eAAAA,KAAMO,MAAM,cAAZP,mCAAAA,YAAc,CAACI,GAAG,cAAlBJ,6BAAAA,kBAAsB;4BACpCK,mBAAAA,6BAAAA,OAAQlB,SAAS,CAACqB,OAAO,CAAC,CAAC,EAAEzB,OAAO,EAAE,GAAKA,QAAQuB;4BACnD5B,MAAM+B,MAAM,CAACL;wBACf;oBACF,EAAE,OAAOM,OAAO;wBACd,KAAK,MAAMN,MAAML,MAAO;4BACtB,MAAMM,SAAS3B,MAAMQ,GAAG,CAACkB;4BACzBC,mBAAAA,6BAAAA,OAAQlB,SAAS,CAACqB,OAAO,CAAC,CAAC,EAAExB,MAAM,EAAE,GAAKA,OAAO0B;4BACjDhC,MAAM+B,MAAM,CAACL;wBACf;oBACF;gBACF;YAEJ,GAAG;QACL;IACF;AACF"}