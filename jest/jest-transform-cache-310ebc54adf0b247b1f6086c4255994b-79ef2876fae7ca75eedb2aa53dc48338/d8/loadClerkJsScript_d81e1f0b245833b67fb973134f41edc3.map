{"version":3,"sources":["../src/loadClerkJsScript.ts","../src/error.ts","../src/constants.ts","../src/isomorphicAtob.ts","../src/keys.ts","../src/utils/runWithExponentialBackOff.ts","../src/loadScript.ts","../src/proxy.ts","../src/url.ts","../src/versionSelector.ts"],"sourcesContent":["import type { ClerkOptions, SDKMetadata, Without } from '@clerk/types';\n\nimport { buildErrorThrower } from './error';\nimport { createDevOrStagingUrlCache, parsePublishableKey } from './keys';\nimport { loadScript } from './loadScript';\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from './proxy';\nimport { addClerkPrefix } from './url';\nimport { versionSelector } from './versionSelector';\n\nconst FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';\n\nconst { isDevOrStagingUrl } = createDevOrStagingUrlCache();\n\nconst errorThrower = buildErrorThrower({ packageName: '@clerk/shared' });\n\n/**\n * Sets the package name for error messages during ClerkJS script loading.\n *\n * @example\n * setClerkJsLoadingErrorPackageName('@clerk/clerk-react');\n */\nexport function setClerkJsLoadingErrorPackageName(packageName: string) {\n  errorThrower.setPackageName({ packageName });\n}\n\ntype LoadClerkJsScriptOptions = Without<ClerkOptions, 'isSatellite'> & {\n  publishableKey: string;\n  clerkJSUrl?: string;\n  clerkJSVariant?: 'headless' | '';\n  clerkJSVersion?: string;\n  sdkMetadata?: SDKMetadata;\n  proxyUrl?: string;\n  domain?: string;\n  nonce?: string;\n};\n\n/**\n * Hotloads the Clerk JS script.\n *\n * Checks for an existing Clerk JS script. If found, it returns a promise\n * that resolves when the script loads. If not found, it uses the provided options to\n * build the Clerk JS script URL and load the script.\n *\n * @param opts - The options used to build the Clerk JS script URL and load the script.\n *               Must include a `publishableKey` if no existing script is found.\n *\n * @example\n * loadClerkJsScript({ publishableKey: 'pk_' });\n */\nconst loadClerkJsScript = async (opts?: LoadClerkJsScriptOptions) => {\n  const existingScript = document.querySelector<HTMLScriptElement>('script[data-clerk-js-script]');\n\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener('load', () => {\n        resolve(existingScript);\n      });\n\n      existingScript.addEventListener('error', () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n\n  if (!opts?.publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n    return;\n  }\n\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: 'anonymous',\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts),\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\n\n/**\n * Generates a Clerk JS script URL.\n *\n * @param opts - The options to use when building the Clerk JS script URL.\n *\n * @example\n * clerkJsScriptUrl({ publishableKey: 'pk_' });\n */\nconst clerkJsScriptUrl = (opts: LoadClerkJsScriptOptions) => {\n  const { clerkJSUrl, clerkJSVariant, clerkJSVersion, proxyUrl, domain, publishableKey } = opts;\n\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n\n  let scriptHost = '';\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, '');\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || '')) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || '';\n  }\n\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, '')}.` : '';\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\n\n/**\n * Builds an object of Clerk JS script attributes.\n */\nconst buildClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => {\n  const obj: Record<string, string> = {};\n\n  if (options.publishableKey) {\n    obj['data-clerk-publishable-key'] = options.publishableKey;\n  }\n\n  if (options.proxyUrl) {\n    obj['data-clerk-proxy-url'] = options.proxyUrl;\n  }\n\n  if (options.domain) {\n    obj['data-clerk-domain'] = options.domain;\n  }\n\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n\n  return obj;\n};\n\nconst applyClerkJsScriptAttributes = (options: LoadClerkJsScriptOptions) => (script: HTMLScriptElement) => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\n\nexport { loadClerkJsScript, buildClerkJsScriptAttributes, clerkJsScriptUrl };\nexport type { LoadClerkJsScriptOptions };\n","import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function isCaptchaError(e: ClerkAPIResponseError): boolean {\n  return ['captcha_invalid', 'captcha_not_enabled', 'captcha_missing_token'].includes(e.errors[0].code);\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any): error is ClerkAPIResponseError | ClerkRuntimeError | MetamaskError {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport function errorToJSON(error: ClerkAPIError | null): ClerkAPIErrorJSON {\n  return {\n    code: error?.code || '',\n    message: error?.message || '',\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   * @memberof ClerkRuntimeError\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    const prefix = 'ðŸ”’ Clerk:';\n    const regex = new RegExp(prefix.replace(' ', '\\\\s*'), 'i');\n    const sanitized = message.replace(regex, '');\n    const _message = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n    super(_message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = 'ClerkRuntimeError';\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   * @memberof ClerkRuntimeError\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    this.name = 'EmailLinkError' as const;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err.name === 'EmailLinkError';\n}\n\n/** @deprecated Please use `EmailLinkErrorCodeStatus` instead.*/\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nexport const EmailLinkErrorCodeStatus = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n} as const;\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n\ntype ClerkWebAuthnErrorCode =\n  // Generic\n  | 'passkey_not_supported'\n  | 'passkey_pa_not_supported'\n  | 'passkey_invalid_rpID_or_domain'\n  | 'passkey_already_exists'\n  | 'passkey_operation_aborted'\n  // Retrieval\n  | 'passkey_retrieval_cancelled'\n  | 'passkey_retrieval_failed'\n  // Registration\n  | 'passkey_registration_cancelled'\n  | 'passkey_registration_failed';\n\nexport class ClerkWebAuthnError extends ClerkRuntimeError {\n  /**\n   * A unique code identifying the error, can be used for localization.\n   */\n  code: ClerkWebAuthnErrorCode;\n\n  constructor(message: string, { code }: { code: ClerkWebAuthnErrorCode }) {\n    super(message, { code });\n    this.code = code;\n  }\n}\n","export const LEGACY_DEV_INSTANCE_SUFFIXES = ['.lcl.dev', '.lclstage.dev', '.lclclerk.com'];\nexport const CURRENT_DEV_INSTANCE_SUFFIXES = ['.accounts.dev', '.accountsstage.dev', '.accounts.lclclerk.com'];\nexport const DEV_OR_STAGING_SUFFIXES = [\n  '.lcl.dev',\n  '.stg.dev',\n  '.lclstage.dev',\n  '.stgstage.dev',\n  '.dev.lclclerk.com',\n  '.stg.lclclerk.com',\n  '.accounts.lclclerk.com',\n  'accountsstage.dev',\n  'accounts.dev',\n];\nexport const LOCAL_ENV_SUFFIXES = ['.lcl.dev', 'lclstage.dev', '.lclclerk.com', '.accounts.lclclerk.com'];\nexport const STAGING_ENV_SUFFIXES = ['.accountsstage.dev'];\nexport const LOCAL_API_URL = 'https://api.lclclerk.com';\nexport const STAGING_API_URL = 'https://api.clerkstage.dev';\nexport const PROD_API_URL = 'https://api.clerk.com';\n\n/**\n * Returns the URL for a static image\n * using the new img.clerk.com service\n */\nexport function iconImageUrl(id: string, format: 'svg' | 'jpeg' = 'svg'): string {\n  return `https://img.clerk.com/static/${id}.${format}`;\n}\n","/**\n * A function that decodes a string of data which has been encoded using base-64 encoding.\n * Uses `atob` if available, otherwise uses `Buffer` from `global`. If neither are available, returns the data as-is.\n */\nexport const isomorphicAtob = (data: string) => {\n  if (typeof atob !== 'undefined' && typeof atob === 'function') {\n    return atob(data);\n  } else if (typeof global !== 'undefined' && global.Buffer) {\n    return new global.Buffer(data, 'base64').toString();\n  }\n  return data;\n};\n","import type { PublishableKey } from '@clerk/types';\n\nimport { DEV_OR_STAGING_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isomorphicAtob } from './isomorphicAtob';\nimport { isomorphicBtoa } from './isomorphicBtoa';\n\ntype ParsePublishableKeyOptions = {\n  fatal?: boolean;\n  domain?: string;\n  proxyUrl?: string;\n};\n\nconst PUBLISHABLE_KEY_LIVE_PREFIX = 'pk_live_';\nconst PUBLISHABLE_KEY_TEST_PREFIX = 'pk_test_';\n\n// This regex matches the publishable like frontend API keys (e.g. foo-bar-13.clerk.accounts.dev)\nconst PUBLISHABLE_FRONTEND_API_DEV_REGEX = /^(([a-z]+)-){2}([0-9]{1,2})\\.clerk\\.accounts([a-z.]*)(dev|com)$/i;\n\nexport function buildPublishableKey(frontendApi: string): string {\n  const isDevKey =\n    PUBLISHABLE_FRONTEND_API_DEV_REGEX.test(frontendApi) ||\n    (frontendApi.startsWith('clerk.') && LEGACY_DEV_INSTANCE_SUFFIXES.some(s => frontendApi.endsWith(s)));\n  const keyPrefix = isDevKey ? PUBLISHABLE_KEY_TEST_PREFIX : PUBLISHABLE_KEY_LIVE_PREFIX;\n  return `${keyPrefix}${isomorphicBtoa(`${frontendApi}$`)}`;\n}\n\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: ParsePublishableKeyOptions & { fatal: true },\n): PublishableKey;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options?: ParsePublishableKeyOptions,\n): PublishableKey | null;\nexport function parsePublishableKey(\n  key: string | undefined,\n  options: { fatal?: boolean; domain?: string; proxyUrl?: string } = {},\n): PublishableKey | null {\n  key = key || '';\n\n  if (!key || !isPublishableKey(key)) {\n    if (options.fatal && !key) {\n      throw new Error(\n        'Publishable key is missing. Ensure that your publishable key is correctly configured. Double-check your environment configuration for your keys, or access them here: https://dashboard.clerk.com/last-active?path=api-keys',\n      );\n    }\n    if (options.fatal && !isPublishableKey(key)) {\n      throw new Error('Publishable key not valid.');\n    }\n    return null;\n  }\n\n  const instanceType = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) ? 'production' : 'development';\n\n  let frontendApi = isomorphicAtob(key.split('_')[2]);\n\n  // TODO(@dimkl): validate packages/clerk-js/src/utils/instance.ts\n  frontendApi = frontendApi.slice(0, -1);\n\n  if (options.proxyUrl) {\n    frontendApi = options.proxyUrl;\n  } else if (instanceType !== 'development' && options.domain) {\n    frontendApi = `clerk.${options.domain}`;\n  }\n\n  return {\n    instanceType,\n    frontendApi,\n  };\n}\n\n/**\n * Checks if the provided key is a valid publishable key.\n *\n * @param key - The key to be checked. Defaults to an empty string if not provided.\n * @returns `true` if 'key' is a valid publishable key, `false` otherwise.\n */\nexport function isPublishableKey(key: string = '') {\n  try {\n    const hasValidPrefix = key.startsWith(PUBLISHABLE_KEY_LIVE_PREFIX) || key.startsWith(PUBLISHABLE_KEY_TEST_PREFIX);\n\n    const hasValidFrontendApiPostfix = isomorphicAtob(key.split('_')[2] || '').endsWith('$');\n\n    return hasValidPrefix && hasValidFrontendApiPostfix;\n  } catch {\n    return false;\n  }\n}\n\nexport function createDevOrStagingUrlCache() {\n  const devOrStagingUrlCache = new Map<string, boolean>();\n\n  return {\n    isDevOrStagingUrl: (url: string | URL): boolean => {\n      if (!url) {\n        return false;\n      }\n\n      const hostname = typeof url === 'string' ? url : url.hostname;\n      let res = devOrStagingUrlCache.get(hostname);\n      if (res === undefined) {\n        res = DEV_OR_STAGING_SUFFIXES.some(s => hostname.endsWith(s));\n        devOrStagingUrlCache.set(hostname, res);\n      }\n      return res;\n    },\n  };\n}\n\nexport function isDevelopmentFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('pk_test_');\n}\n\nexport function isProductionFromPublishableKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('pk_live_');\n}\n\nexport function isDevelopmentFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('test_') || apiKey.startsWith('sk_test_');\n}\n\nexport function isProductionFromSecretKey(apiKey: string): boolean {\n  return apiKey.startsWith('live_') || apiKey.startsWith('sk_live_');\n}\n\nexport async function getCookieSuffix(\n  publishableKey: string,\n  subtle: SubtleCrypto = globalThis.crypto.subtle,\n): Promise<string> {\n  const data = new TextEncoder().encode(publishableKey);\n  const digest = await subtle.digest('sha-1', data);\n  const stringDigest = String.fromCharCode(...new Uint8Array(digest));\n  // Base 64 Encoding with URL and Filename Safe Alphabet: https://datatracker.ietf.org/doc/html/rfc4648#section-5\n  return isomorphicBtoa(stringDigest).replace(/\\+/gi, '-').replace(/\\//gi, '_').substring(0, 8);\n}\n\nexport const getSuffixedCookieName = (cookieName: string, cookieSuffix: string): string => {\n  return `${cookieName}_${cookieSuffix}`;\n};\n","type Milliseconds = number;\n\ntype BackoffOptions = Partial<{\n  firstDelay: Milliseconds;\n  maxDelay: Milliseconds;\n  timeMultiple: number;\n  shouldRetry: (error: unknown, iterationsCount: number) => boolean;\n}>;\n\nconst defaultOptions: Required<BackoffOptions> = {\n  firstDelay: 125,\n  maxDelay: 0,\n  timeMultiple: 2,\n  shouldRetry: () => true,\n};\n\nconst sleep = async (ms: Milliseconds) => new Promise(s => setTimeout(s, ms));\n\nconst createExponentialDelayAsyncFn = (opts: {\n  firstDelay: Milliseconds;\n  maxDelay: Milliseconds;\n  timeMultiple: number;\n}) => {\n  let timesCalled = 0;\n\n  const calculateDelayInMs = () => {\n    const constant = opts.firstDelay;\n    const base = opts.timeMultiple;\n    const delay = constant * Math.pow(base, timesCalled);\n    return Math.min(opts.maxDelay || delay, delay);\n  };\n\n  return async (): Promise<void> => {\n    await sleep(calculateDelayInMs());\n    timesCalled++;\n  };\n};\n\nexport const runWithExponentialBackOff = async <T>(\n  callback: () => T | Promise<T>,\n  options: BackoffOptions = {},\n): Promise<T> => {\n  let iterationsCount = 0;\n  const { shouldRetry, firstDelay, maxDelay, timeMultiple } = {\n    ...defaultOptions,\n    ...options,\n  };\n  const delay = createExponentialDelayAsyncFn({ firstDelay, maxDelay, timeMultiple });\n\n  while (true) {\n    try {\n      return await callback();\n    } catch (e) {\n      iterationsCount++;\n      if (!shouldRetry(e, iterationsCount)) {\n        throw e;\n      }\n      await delay();\n    }\n  }\n};\n","import { runWithExponentialBackOff } from './utils';\n\nconst NO_DOCUMENT_ERROR = 'loadScript cannot be called when document does not exist';\nconst NO_SRC_ERROR = 'loadScript cannot be called without a src';\n\ntype LoadScriptOptions = {\n  async?: boolean;\n  defer?: boolean;\n  crossOrigin?: 'anonymous' | 'use-credentials';\n  nonce?: string;\n  beforeLoad?: (script: HTMLScriptElement) => void;\n};\n\nexport async function loadScript(src = '', opts: LoadScriptOptions): Promise<HTMLScriptElement> {\n  const { async, defer, beforeLoad, crossOrigin, nonce } = opts || {};\n\n  const load = () => {\n    return new Promise<HTMLScriptElement>((resolve, reject) => {\n      if (!src) {\n        reject(new Error(NO_SRC_ERROR));\n      }\n\n      if (!document || !document.body) {\n        reject(NO_DOCUMENT_ERROR);\n      }\n\n      const script = document.createElement('script');\n\n      if (crossOrigin) script.setAttribute('crossorigin', crossOrigin);\n      script.async = async || false;\n      script.defer = defer || false;\n\n      script.addEventListener('load', () => {\n        script.remove();\n        resolve(script);\n      });\n\n      script.addEventListener('error', () => {\n        script.remove();\n        reject();\n      });\n\n      script.src = src;\n      script.nonce = nonce;\n      beforeLoad?.(script);\n      document.body.appendChild(script);\n    });\n  };\n\n  return runWithExponentialBackOff(load, { shouldRetry: (_, iterations) => iterations < 5 });\n}\n","export function isValidProxyUrl(key: string | undefined) {\n  if (!key) {\n    return true;\n  }\n\n  return isHttpOrHttps(key) || isProxyUrlRelative(key);\n}\n\nexport function isHttpOrHttps(key: string | undefined) {\n  return /^http(s)?:\\/\\//.test(key || '');\n}\n\nexport function isProxyUrlRelative(key: string) {\n  return key.startsWith('/');\n}\n\nexport function proxyUrlToAbsoluteURL(url: string | undefined): string {\n  if (!url) {\n    return '';\n  }\n  return isProxyUrlRelative(url) ? new URL(url, window.location.origin).toString() : url;\n}\n","import { CURRENT_DEV_INSTANCE_SUFFIXES, LEGACY_DEV_INSTANCE_SUFFIXES } from './constants';\nimport { isStaging } from './utils/instance';\n\nexport function parseSearchParams(queryString = ''): URLSearchParams {\n  if (queryString.startsWith('?')) {\n    queryString = queryString.slice(1);\n  }\n  return new URLSearchParams(queryString);\n}\n\nexport function stripScheme(url = ''): string {\n  return (url || '').replace(/^.+:\\/\\//, '');\n}\n\nexport function addClerkPrefix(str: string | undefined) {\n  if (!str) {\n    return '';\n  }\n  let regex;\n  if (str.match(/^(clerk\\.)+\\w*$/)) {\n    regex = /(clerk\\.)*(?=clerk\\.)/;\n  } else if (str.match(/\\.clerk.accounts/)) {\n    return str;\n  } else {\n    regex = /^(clerk\\.)*/gi;\n  }\n\n  const stripped = str.replace(regex, '');\n  return `clerk.${stripped}`;\n}\n\n/**\n *\n * Retrieve the clerk-js major tag using the major version from the pkgVersion\n * param or use the frontendApi to determine if the canary tag should be used.\n * The default tag is `latest`.\n */\nexport const getClerkJsMajorVersionOrTag = (frontendApi: string, version?: string) => {\n  if (!version && isStaging(frontendApi)) {\n    return 'canary';\n  }\n\n  if (!version) {\n    return 'latest';\n  }\n\n  return version.split('.')[0] || 'latest';\n};\n\n/**\n *\n * Retrieve the clerk-js script url from the frontendApi and the major tag\n * using the {@link getClerkJsMajorVersionOrTag} or a provided clerkJSVersion tag.\n */\nexport const getScriptUrl = (frontendApi: string, { clerkJSVersion }: { clerkJSVersion?: string }) => {\n  const noSchemeFrontendApi = frontendApi.replace(/http(s)?:\\/\\//, '');\n  const major = getClerkJsMajorVersionOrTag(frontendApi, clerkJSVersion);\n  return `https://${noSchemeFrontendApi}/npm/@clerk/clerk-js@${clerkJSVersion || major}/dist/clerk.browser.js`;\n};\n\n// Returns true for hosts such as:\n// * accounts.foo.bar-13.lcl.dev\n// * accounts.foo.bar-13.lclstage.dev\n// * accounts.foo.bar-13.dev.lclclerk.com\nexport function isLegacyDevAccountPortalOrigin(host: string): boolean {\n  return LEGACY_DEV_INSTANCE_SUFFIXES.some(legacyDevSuffix => {\n    return host.startsWith('accounts.') && host.endsWith(legacyDevSuffix);\n  });\n}\n\n// Returns true for hosts such as:\n// * foo-bar-13.accounts.dev\n// * foo-bar-13.accountsstage.dev\n// * foo-bar-13.accounts.lclclerk.com\n// But false for:\n// * foo-bar-13.clerk.accounts.lclclerk.com\nexport function isCurrentDevAccountPortalOrigin(host: string): boolean {\n  return CURRENT_DEV_INSTANCE_SUFFIXES.some(currentDevSuffix => {\n    return host.endsWith(currentDevSuffix) && !host.endsWith('.clerk' + currentDevSuffix);\n  });\n}\n\n/* Functions below are taken from https://github.com/unjs/ufo/blob/main/src/utils.ts. LICENSE: MIT */\n\nconst TRAILING_SLASH_RE = /\\/$|\\/\\?|\\/#/;\n\nexport function hasTrailingSlash(input = '', respectQueryAndFragment?: boolean): boolean {\n  if (!respectQueryAndFragment) {\n    return input.endsWith('/');\n  }\n  return TRAILING_SLASH_RE.test(input);\n}\n\nexport function withTrailingSlash(input = '', respectQueryAndFragment?: boolean): string {\n  if (!respectQueryAndFragment) {\n    return input.endsWith('/') ? input : input + '/';\n  }\n  if (hasTrailingSlash(input, true)) {\n    return input || '/';\n  }\n  let path = input;\n  let fragment = '';\n  const fragmentIndex = input.indexOf('#');\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n    if (!path) {\n      return fragment;\n    }\n  }\n  const [s0, ...s] = path.split('?');\n  return s0 + '/' + (s.length > 0 ? `?${s.join('?')}` : '') + fragment;\n}\n\nexport function withoutTrailingSlash(input = '', respectQueryAndFragment?: boolean): string {\n  if (!respectQueryAndFragment) {\n    return (hasTrailingSlash(input) ? input.slice(0, -1) : input) || '/';\n  }\n  if (!hasTrailingSlash(input, true)) {\n    return input || '/';\n  }\n  let path = input;\n  let fragment = '';\n  const fragmentIndex = input.indexOf('#');\n  if (fragmentIndex >= 0) {\n    path = input.slice(0, fragmentIndex);\n    fragment = input.slice(fragmentIndex);\n  }\n  const [s0, ...s] = path.split('?');\n  return (s0.slice(0, -1) || '/') + (s.length > 0 ? `?${s.join('?')}` : '') + fragment;\n}\n\nexport function hasLeadingSlash(input = ''): boolean {\n  return input.startsWith('/');\n}\n\nexport function withoutLeadingSlash(input = ''): string {\n  return (hasLeadingSlash(input) ? input.slice(1) : input) || '/';\n}\n\nexport function withLeadingSlash(input = ''): string {\n  return hasLeadingSlash(input) ? input : '/' + input;\n}\n\nexport function cleanDoubleSlashes(input = ''): string {\n  return input\n    .split('://')\n    .map(string_ => string_.replace(/\\/{2,}/g, '/'))\n    .join('://');\n}\n\nexport function isNonEmptyURL(url: string) {\n  return url && url !== '/';\n}\n\nconst JOIN_LEADING_SLASH_RE = /^\\.?\\//;\n\nexport function joinURL(base: string, ...input: string[]): string {\n  let url = base || '';\n\n  for (const segment of input.filter(url => isNonEmptyURL(url))) {\n    if (url) {\n      // TODO: Handle .. when joining\n      const _segment = segment.replace(JOIN_LEADING_SLASH_RE, '');\n      url = withTrailingSlash(url) + _segment;\n    } else {\n      url = segment;\n    }\n  }\n\n  return url;\n}\n\n/* Code below is taken from https://github.com/vercel/next.js/blob/fe7ff3f468d7651a92865350bfd0f16ceba27db5/packages/next/src/shared/lib/utils.ts. LICENSE: MIT */\n\n// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1\n// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\nconst ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/;\nexport const isAbsoluteUrl = (url: string) => ABSOLUTE_URL_REGEX.test(url);\n","/**\n * This version selector is a bit complicated, so here is the flow:\n * 1. Use the clerkJSVersion prop on the provider\n * 2. Use the exact `@clerk/clerk-js` version if it is a `@snapshot` prerelease\n * 3. Use the prerelease tag of `@clerk/clerk-js` or the packageVersion provided\n * 4. Fallback to the major version of `@clerk/clerk-js` or the packageVersion provided\n * @param clerkJSVersion - The optional clerkJSVersion prop on the provider\n * @param packageVersion - The version of `@clerk/clerk-js` that will be used if an explicit version is not provided\n * @returns The npm tag, version or major version to use\n */\nexport const versionSelector = (clerkJSVersion: string | undefined, packageVersion = JS_PACKAGE_VERSION) => {\n  if (clerkJSVersion) {\n    return clerkJSVersion;\n  }\n\n  const prereleaseTag = getPrereleaseTag(packageVersion);\n  if (prereleaseTag) {\n    if (prereleaseTag === 'snapshot') {\n      return JS_PACKAGE_VERSION;\n    }\n\n    return prereleaseTag;\n  }\n\n  return getMajorVersion(packageVersion);\n};\n\nconst getPrereleaseTag = (packageVersion: string) =>\n  packageVersion\n    .trim()\n    .replace(/^v/, '')\n    .match(/-(.+?)(\\.|$)/)?.[1];\n\nexport const getMajorVersion = (packageVersion: string) => packageVersion.trim().replace(/^v/, '').split('.')[0];\n"],"names":["loadClerkJsScript_exports","__export","buildClerkJsScriptAttributes","clerkJsScriptUrl","loadClerkJsScript","setClerkJsLoadingErrorPackageName","module","exports","__toCommonJS","DefaultMessages","Object","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","buildErrorThrower","packageName","customMessages","pkg","messages","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","toString","replace","setPackageName","setMessages","assign","throwInvalidPublishableKeyError","params","Error","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw","message","DEV_OR_STAGING_SUFFIXES","isomorphicAtob","data","atob","global","Buffer","PUBLISHABLE_KEY_LIVE_PREFIX","PUBLISHABLE_KEY_TEST_PREFIX","parsePublishableKey","key","options","isPublishableKey","fatal","instanceType","startsWith","frontendApi","split","slice","proxyUrl","domain","hasValidPrefix","hasValidFrontendApiPostfix","endsWith","createDevOrStagingUrlCache","devOrStagingUrlCache","Map","isDevOrStagingUrl","url","hostname","res","get","some","s","set","defaultOptions","firstDelay","maxDelay","timeMultiple","shouldRetry","sleep","ms","Promise","setTimeout","createExponentialDelayAsyncFn","opts","timesCalled","calculateDelayInMs","constant","base","delay","Math","pow","min","runWithExponentialBackOff","callback","iterationsCount","e","NO_DOCUMENT_ERROR","NO_SRC_ERROR","loadScript","src","async","defer","beforeLoad","crossOrigin","nonce","load","resolve","reject","document","body","script","createElement","setAttribute","addEventListener","remove","appendChild","_","iterations","isValidProxyUrl","isHttpOrHttps","isProxyUrlRelative","test","proxyUrlToAbsoluteURL","URL","window","location","origin","addClerkPrefix","str","regex","stripped","versionSelector","clerkJSVersion","packageVersion","prereleaseTag","getPrereleaseTag","getMajorVersion","trim","FAILED_TO_LOAD_ERROR","errorThrower","existingScript","querySelector","publishableKey","applyClerkJsScriptAttributes","catch","clerkJSUrl","clerkJSVariant","scriptHost","variant","version","obj","attributes","attribute"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}