a8da19340fd59675562a7ab3c6ac66a7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateChat: function() {
        return generateChat;
    },
    generateChatMessages: function() {
        return generateChatMessages;
    }
});
const _contracts = require("@rp/common/contracts");
const _utils = require("@rp/common/utils");
const _generateDate = require("./generateDate");
const _generateId = require("./generateId");
const _users = require("./users");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const generateChat = ({ interaction, name })=>{
    const date = (0, _generateDate.generateDate)();
    return {
        id: (0, _generateId.generateId)(),
        userId: _users.userOwner.ownerUserId,
        dateCreated: date,
        lastUpdated: date,
        isPublic: false,
        interactions: interaction ? [
            _object_spread_props(_object_spread({}, interaction), {
                interactionTimestamp: date,
                dateCreated: date,
                lastUpdated: date,
                origin: _object_spread_props(_object_spread({}, interaction.origin), {
                    // Explicitly cast or set the type to one of the allowed string literals
                    type: interaction.origin.type
                })
            })
        ] : [],
        name: name !== null && name !== void 0 ? name : ""
    };
};
const generateChatMessages = (props)=>{
    const { requestId, interaction, content, queries = [], files = [], entities } = props;
    return {
        complete: ()=>({
                type: "COMPLETE",
                requestId,
                messageDeltaMs: 0,
                interactionTimestamp: interaction.interactionTimestamp,
                contentBlock: null
            }),
        next: (getParts = (content, _files)=>[
                {
                    content
                }
            ])=>{
            return getParts(content, files).map(({ content }, index)=>({
                    type: "NEXT",
                    requestId,
                    messageDeltaMs: 0,
                    sequenceNumber: index + 1,
                    content,
                    block: null
                }));
        },
        status: (message)=>({
                type: "STATUS",
                requestId,
                messageDeltaMs: null,
                "x-amz-requestid": null,
                message
            }),
        statusQuery: ()=>({
                type: "STATUS_QUERY",
                requestId,
                messageDeltaMs: null,
                "x-amz-requestid": null,
                queries
            }),
        statusConcluding: ()=>({
                type: "STATUS_CONCLUDING",
                requestId,
                messageDeltaMs: null,
                "x-amz-requestid": null
            }),
        statusCollapse: ()=>{
            const [file] = files;
            var _entities_map;
            return (_entities_map = entities === null || entities === void 0 ? void 0 : entities.map((entity)=>{
                var _file_rpjson;
                return {
                    type: "STATUS_COLLAPSE",
                    requestId,
                    messageDeltaMs: null,
                    "x-amz-requestid": null,
                    title: entity.name,
                    content: {
                        type: "TEXT",
                        value: `- Great news for ${entity.name} \`:ref[LIST:[CQS:${file === null || file === void 0 ? void 0 : (_file_rpjson = file.rpjson) === null || _file_rpjson === void 0 ? void 0 : _file_rpjson.document.rp_document_id}-0]]\``
                    }
                };
            })) !== null && _entities_map !== void 0 ? _entities_map : [];
        },
        auditTraces: ()=>{
            return queries.map((query)=>{
                return {
                    type: "AUDIT_TRACE",
                    requestId,
                    messageDeltaMs: null,
                    "x-amz-requestid": null,
                    trace: {
                        query: {
                            text: query.query,
                            filters: {
                                entities: null,
                                events: null,
                                period: {
                                    start: "2025-05-24T10:13:10.455000",
                                    end: "2025-05-24T22:13:10.455000"
                                },
                                sentiments: [],
                                content: null
                            }
                        },
                        results: files.map((file)=>{
                            var _file_rpjson, _file_rpjson1, _file_rpjson2, _file_rpjson_content_body, _file_rpjson3;
                            var _file_rpjson_content_title_text, _file_rpjson_document_rp_document_id, _file_rpjson_document_metadata_original_language, _file_rpjson_content_body_map;
                            return {
                                type: "CQS",
                                values: [
                                    {
                                        documentScope: "news",
                                        hd: (_file_rpjson_content_title_text = (_file_rpjson = file.rpjson) === null || _file_rpjson === void 0 ? void 0 : _file_rpjson.content.title.text) !== null && _file_rpjson_content_title_text !== void 0 ? _file_rpjson_content_title_text : "",
                                        id: (_file_rpjson_document_rp_document_id = (_file_rpjson1 = file.rpjson) === null || _file_rpjson1 === void 0 ? void 0 : _file_rpjson1.document.rp_document_id) !== null && _file_rpjson_document_rp_document_id !== void 0 ? _file_rpjson_document_rp_document_id : "",
                                        language: (_file_rpjson_document_metadata_original_language = (_file_rpjson2 = file.rpjson) === null || _file_rpjson2 === void 0 ? void 0 : _file_rpjson2.document.metadata.original_language) !== null && _file_rpjson_document_metadata_original_language !== void 0 ? _file_rpjson_document_metadata_original_language : "English",
                                        chunks: (_file_rpjson_content_body_map = (_file_rpjson3 = file.rpjson) === null || _file_rpjson3 === void 0 ? void 0 : (_file_rpjson_content_body = _file_rpjson3.content.body) === null || _file_rpjson_content_body === void 0 ? void 0 : _file_rpjson_content_body.map((item, cnum)=>{
                                            var _file_rpjson;
                                            const textBlock = _contracts.bigdataSchemas.st_documents_TextBlock.parse(item);
                                            return {
                                                id: `${(_file_rpjson = file.rpjson) === null || _file_rpjson === void 0 ? void 0 : _file_rpjson.document.rp_document_id}-${cnum}`,
                                                cnum,
                                                text: textBlock.text,
                                                sentences: [
                                                    {
                                                        pnum: 1,
                                                        snum: 0
                                                    }
                                                ],
                                                relevance: (0, _utils.randomIntFromInterval)(0, 100) / 100,
                                                boundingBoxes: null
                                            };
                                        })) !== null && _file_rpjson_content_body_map !== void 0 ? _file_rpjson_content_body_map : [],
                                        srcKey: "",
                                        srcName: "",
                                        sourceRank: 3,
                                        ts: (0, _generateDate.generateDate)(),
                                        contentType: null,
                                        documentType: null,
                                        url: null,
                                        rpProviderId: null
                                    }
                                ]
                            };
                        }),
                        queryId: query.query_id
                    }
                };
            });
        },
        sources: (sources)=>{
            return {
                type: "SOURCES",
                requestId: "1748117595742",
                messageDeltaMs: null,
                "x-amz-requestid": null,
                originSources: [
                    ...sources,
                    ...files.map((file)=>{
                        var _file_rpjson, _file_rpjson1;
                        var _file_rpjson_content_title_text, _file_rpjson_document_rp_document_id;
                        return {
                            type: "DOCUMENT",
                            name: "",
                            hd: (_file_rpjson_content_title_text = (_file_rpjson = file.rpjson) === null || _file_rpjson === void 0 ? void 0 : _file_rpjson.content.title.text) !== null && _file_rpjson_content_title_text !== void 0 ? _file_rpjson_content_title_text : "No title",
                            id: (_file_rpjson_document_rp_document_id = (_file_rpjson1 = file.rpjson) === null || _file_rpjson1 === void 0 ? void 0 : _file_rpjson1.document.rp_document_id) !== null && _file_rpjson_document_rp_document_id !== void 0 ? _file_rpjson_document_rp_document_id : "",
                            srcKey: "",
                            imageUrls: [],
                            url: null,
                            rpProviderId: null
                        };
                    })
                ],
                metadata: {}
            };
        }
    };
};

//# sourceMappingURL=data:application/json;base64,