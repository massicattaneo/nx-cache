48832676737acd37fb1a009c6f667c0e
// Types
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getSortedCategories", {
    enumerable: true,
    get: function() {
        return getSortedCategories;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// Get biggest and total volumes for each category
const getVolume = (data, group)=>{
    var _data_group;
    const volumes = (data === null || data === void 0 ? void 0 : (_data_group = data[group]) === null || _data_group === void 0 ? void 0 : _data_group.map((item)=>item.volume)) || [];
    const biggestVolume = Math.max(0, ...volumes);
    const totalVolume = volumes.reduce((tot, volume)=>tot + volume, 0);
    return {
        biggestVolume,
        totalVolume
    };
};
// Create object with volume statistics for each category
const getVolumeStatistics = (data, categories)=>{
    return categories.reduce((acc, group)=>_object_spread_props(_object_spread({}, acc), {
            [group]: getVolume(data, group)
        }), {});
};
// Sort by volume
const sortByVolume = (stats, entityA, entityB)=>{
    const totalVolume = stats[entityB].totalVolume - stats[entityA].totalVolume;
    if (totalVolume === 0) return stats[entityB].biggestVolume - stats[entityA].biggestVolume;
    return totalVolume;
};
// Sort by volume statistics
const sortByVolumeStatistics = (stats)=>(entityA, entityB)=>{
        if (entityA === "languages" && entityB === "sources" || entityA === "sources" && entityB === "languages") return sortByVolume(stats, entityA, entityB);
        if (entityA === "languages" || entityA === "sources") return 1;
        if (entityB === "languages" || entityB === "sources") return -1;
        return sortByVolume(stats, entityA, entityB);
    };
// Get sorted categories
const getSortedCategories = (data)=>{
    const categories = Object.keys(data);
    const stats = getVolumeStatistics(data, categories);
    const sortedCategories = categories.filter((item)=>stats[item].totalVolume > 0).sort(sortByVolumeStatistics(stats));
    return sortedCategories;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9kaXNjb3Zlcnktc2lkZWJhci9zcmMvaG9va3MvZ2V0U29ydGVkQ2F0ZWdvcmllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xudHlwZSBTb3J0YWJsZUl0ZW0gPSB7IHZvbHVtZTogbnVtYmVyIH1cbnR5cGUgU29ydGFibGUgPSBSZWNvcmQ8c3RyaW5nLCBBcnJheTxTb3J0YWJsZUl0ZW0+PlxudHlwZSBWb2x1bWVTdGF0aXN0aWNzID0gUmVjb3JkPHN0cmluZywgeyBiaWdnZXN0Vm9sdW1lOiBudW1iZXI7IHRvdGFsVm9sdW1lOiBudW1iZXIgfT5cblxuLy8gR2V0IGJpZ2dlc3QgYW5kIHRvdGFsIHZvbHVtZXMgZm9yIGVhY2ggY2F0ZWdvcnlcbmNvbnN0IGdldFZvbHVtZSA9IChkYXRhOiBTb3J0YWJsZSwgZ3JvdXA6IHN0cmluZykgPT4ge1xuICBjb25zdCB2b2x1bWVzID0gZGF0YT8uW2dyb3VwXT8ubWFwKGl0ZW0gPT4gaXRlbS52b2x1bWUpIHx8IFtdXG4gIGNvbnN0IGJpZ2dlc3RWb2x1bWUgPSBNYXRoLm1heCgwLCAuLi52b2x1bWVzKVxuICBjb25zdCB0b3RhbFZvbHVtZSA9IHZvbHVtZXMucmVkdWNlKCh0b3QsIHZvbHVtZSkgPT4gdG90ICsgdm9sdW1lLCAwKVxuICByZXR1cm4geyBiaWdnZXN0Vm9sdW1lLCB0b3RhbFZvbHVtZSB9XG59XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCB2b2x1bWUgc3RhdGlzdGljcyBmb3IgZWFjaCBjYXRlZ29yeVxuY29uc3QgZ2V0Vm9sdW1lU3RhdGlzdGljcyA9IChkYXRhOiBTb3J0YWJsZSwgY2F0ZWdvcmllczogQXJyYXk8c3RyaW5nPik6IFZvbHVtZVN0YXRpc3RpY3MgPT4ge1xuICByZXR1cm4gY2F0ZWdvcmllcy5yZWR1Y2UoXG4gICAgKGFjYywgZ3JvdXApID0+ICh7IC4uLmFjYywgW2dyb3VwXTogZ2V0Vm9sdW1lKGRhdGEsIGdyb3VwKSB9KSxcbiAgICB7fSBhcyBWb2x1bWVTdGF0aXN0aWNzLFxuICApXG59XG5cbi8vIFNvcnQgYnkgdm9sdW1lXG5jb25zdCBzb3J0QnlWb2x1bWUgPSAoc3RhdHM6IFZvbHVtZVN0YXRpc3RpY3MsIGVudGl0eUE6IHN0cmluZywgZW50aXR5Qjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHRvdGFsVm9sdW1lID0gc3RhdHNbZW50aXR5Ql0udG90YWxWb2x1bWUgLSBzdGF0c1tlbnRpdHlBXS50b3RhbFZvbHVtZVxuICBpZiAodG90YWxWb2x1bWUgPT09IDApIHJldHVybiBzdGF0c1tlbnRpdHlCXS5iaWdnZXN0Vm9sdW1lIC0gc3RhdHNbZW50aXR5QV0uYmlnZ2VzdFZvbHVtZVxuICByZXR1cm4gdG90YWxWb2x1bWVcbn1cblxuLy8gU29ydCBieSB2b2x1bWUgc3RhdGlzdGljc1xuY29uc3Qgc29ydEJ5Vm9sdW1lU3RhdGlzdGljcyA9IChzdGF0czogVm9sdW1lU3RhdGlzdGljcykgPT4gKGVudGl0eUE6IHN0cmluZywgZW50aXR5Qjogc3RyaW5nKSA9PiB7XG4gIGlmIChcbiAgICAoZW50aXR5QSA9PT0gXCJsYW5ndWFnZXNcIiAmJiBlbnRpdHlCID09PSBcInNvdXJjZXNcIikgfHxcbiAgICAoZW50aXR5QSA9PT0gXCJzb3VyY2VzXCIgJiYgZW50aXR5QiA9PT0gXCJsYW5ndWFnZXNcIilcbiAgKVxuICAgIHJldHVybiBzb3J0QnlWb2x1bWUoc3RhdHMsIGVudGl0eUEsIGVudGl0eUIpXG4gIGlmIChlbnRpdHlBID09PSBcImxhbmd1YWdlc1wiIHx8IGVudGl0eUEgPT09IFwic291cmNlc1wiKSByZXR1cm4gMVxuICBpZiAoZW50aXR5QiA9PT0gXCJsYW5ndWFnZXNcIiB8fCBlbnRpdHlCID09PSBcInNvdXJjZXNcIikgcmV0dXJuIC0xXG4gIHJldHVybiBzb3J0QnlWb2x1bWUoc3RhdHMsIGVudGl0eUEsIGVudGl0eUIpXG59XG5cbi8vIEdldCBzb3J0ZWQgY2F0ZWdvcmllc1xuY29uc3QgZ2V0U29ydGVkQ2F0ZWdvcmllcyA9IChkYXRhOiBTb3J0YWJsZSk6IEFycmF5PHN0cmluZz4gPT4ge1xuICBjb25zdCBjYXRlZ29yaWVzID0gT2JqZWN0LmtleXMoZGF0YSlcbiAgY29uc3Qgc3RhdHMgPSBnZXRWb2x1bWVTdGF0aXN0aWNzKGRhdGEsIGNhdGVnb3JpZXMpXG4gIGNvbnN0IHNvcnRlZENhdGVnb3JpZXMgPSBjYXRlZ29yaWVzXG4gICAgLmZpbHRlcihpdGVtID0+IHN0YXRzW2l0ZW1dLnRvdGFsVm9sdW1lID4gMClcbiAgICAuc29ydChzb3J0QnlWb2x1bWVTdGF0aXN0aWNzKHN0YXRzKSlcbiAgcmV0dXJuIHNvcnRlZENhdGVnb3JpZXNcbn1cblxuZXhwb3J0IHsgZ2V0U29ydGVkQ2F0ZWdvcmllcyB9XG4iXSwibmFtZXMiOlsiZ2V0U29ydGVkQ2F0ZWdvcmllcyIsImdldFZvbHVtZSIsImRhdGEiLCJncm91cCIsInZvbHVtZXMiLCJtYXAiLCJpdGVtIiwidm9sdW1lIiwiYmlnZ2VzdFZvbHVtZSIsIk1hdGgiLCJtYXgiLCJ0b3RhbFZvbHVtZSIsInJlZHVjZSIsInRvdCIsImdldFZvbHVtZVN0YXRpc3RpY3MiLCJjYXRlZ29yaWVzIiwiYWNjIiwic29ydEJ5Vm9sdW1lIiwic3RhdHMiLCJlbnRpdHlBIiwiZW50aXR5QiIsInNvcnRCeVZvbHVtZVN0YXRpc3RpY3MiLCJPYmplY3QiLCJrZXlzIiwic29ydGVkQ2F0ZWdvcmllcyIsImZpbHRlciIsInNvcnQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFROzs7OzsrQkFrRENBOzs7ZUFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE3Q1Qsa0RBQWtEO0FBQ2xELE1BQU1DLFlBQVksQ0FBQ0MsTUFBZ0JDO1FBQ2pCRDtJQUFoQixNQUFNRSxVQUFVRixDQUFBQSxpQkFBQUEsNEJBQUFBLGNBQUFBLElBQU0sQ0FBQ0MsTUFBTSxjQUFiRCxrQ0FBQUEsWUFBZUcsR0FBRyxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxNQUFNLE1BQUssRUFBRTtJQUM3RCxNQUFNQyxnQkFBZ0JDLEtBQUtDLEdBQUcsQ0FBQyxNQUFNTjtJQUNyQyxNQUFNTyxjQUFjUCxRQUFRUSxNQUFNLENBQUMsQ0FBQ0MsS0FBS04sU0FBV00sTUFBTU4sUUFBUTtJQUNsRSxPQUFPO1FBQUVDO1FBQWVHO0lBQVk7QUFDdEM7QUFFQSx5REFBeUQ7QUFDekQsTUFBTUcsc0JBQXNCLENBQUNaLE1BQWdCYTtJQUMzQyxPQUFPQSxXQUFXSCxNQUFNLENBQ3RCLENBQUNJLEtBQUtiLFFBQVcsd0NBQUthO1lBQUssQ0FBQ2IsTUFBTSxFQUFFRixVQUFVQyxNQUFNQztZQUNwRCxDQUFDO0FBRUw7QUFFQSxpQkFBaUI7QUFDakIsTUFBTWMsZUFBZSxDQUFDQyxPQUF5QkMsU0FBaUJDO0lBQzlELE1BQU1ULGNBQWNPLEtBQUssQ0FBQ0UsUUFBUSxDQUFDVCxXQUFXLEdBQUdPLEtBQUssQ0FBQ0MsUUFBUSxDQUFDUixXQUFXO0lBQzNFLElBQUlBLGdCQUFnQixHQUFHLE9BQU9PLEtBQUssQ0FBQ0UsUUFBUSxDQUFDWixhQUFhLEdBQUdVLEtBQUssQ0FBQ0MsUUFBUSxDQUFDWCxhQUFhO0lBQ3pGLE9BQU9HO0FBQ1Q7QUFFQSw0QkFBNEI7QUFDNUIsTUFBTVUseUJBQXlCLENBQUNILFFBQTRCLENBQUNDLFNBQWlCQztRQUM1RSxJQUNFLEFBQUNELFlBQVksZUFBZUMsWUFBWSxhQUN2Q0QsWUFBWSxhQUFhQyxZQUFZLGFBRXRDLE9BQU9ILGFBQWFDLE9BQU9DLFNBQVNDO1FBQ3RDLElBQUlELFlBQVksZUFBZUEsWUFBWSxXQUFXLE9BQU87UUFDN0QsSUFBSUMsWUFBWSxlQUFlQSxZQUFZLFdBQVcsT0FBTyxDQUFDO1FBQzlELE9BQU9ILGFBQWFDLE9BQU9DLFNBQVNDO0lBQ3RDO0FBRUEsd0JBQXdCO0FBQ3hCLE1BQU1wQixzQkFBc0IsQ0FBQ0U7SUFDM0IsTUFBTWEsYUFBYU8sT0FBT0MsSUFBSSxDQUFDckI7SUFDL0IsTUFBTWdCLFFBQVFKLG9CQUFvQlosTUFBTWE7SUFDeEMsTUFBTVMsbUJBQW1CVCxXQUN0QlUsTUFBTSxDQUFDbkIsQ0FBQUEsT0FBUVksS0FBSyxDQUFDWixLQUFLLENBQUNLLFdBQVcsR0FBRyxHQUN6Q2UsSUFBSSxDQUFDTCx1QkFBdUJIO0lBQy9CLE9BQU9NO0FBQ1QifQ==