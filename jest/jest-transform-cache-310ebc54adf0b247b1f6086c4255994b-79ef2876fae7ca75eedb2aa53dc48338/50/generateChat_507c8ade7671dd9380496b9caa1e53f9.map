{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/development/src/lib/database/generators/generateChat.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { bigdataSchemas } from \"@rp/common/contracts\"\nimport { randomIntFromInterval } from \"@rp/common/utils\"\nimport { DbChat, DbCqs, DbFile } from \"../db.types\"\nimport { generateDate } from \"./generateDate\"\nimport { generateId } from \"./generateId\"\nimport { userOwner } from \"./users\"\n\ntype Props = z.infer<typeof bigdataSchemas.st_user_chats_CreateUserChatWithoutUserId>\n\nexport const generateChat = ({ interaction, name }: Props): DbChat => {\n  const date = generateDate()\n  return {\n    id: generateId(),\n    userId: userOwner.ownerUserId,\n    dateCreated: date,\n    lastUpdated: date,\n    isPublic: false,\n    interactions: interaction\n      ? [\n          {\n            ...interaction,\n            interactionTimestamp: date,\n            dateCreated: date,\n            lastUpdated: date,\n            origin: {\n              ...interaction.origin,\n              // Explicitly cast or set the type to one of the allowed string literals\n              type: interaction.origin.type as\n                | \"trending\"\n                | \"feed\"\n                | \"user_message\"\n                | \"empty_message\"\n                | \"trending_prompt\"\n                | \"watchlist\"\n                | \"flow\",\n            },\n          },\n        ]\n      : [],\n    name: name ?? \"\",\n  }\n}\n\ntype Messages = {\n  requestId: string\n  interaction: z.infer<typeof bigdataSchemas.st_user_chats_ChatInteraction>\n  content: string\n  queries?: Array<z.infer<typeof bigdataSchemas.st_llm_chat_QueryIdentifier>>\n  cqsItems?: Array<DbCqs>\n  files?: Array<DbFile>\n  entities?: Array<{ key: string; name: string; type: string }> | null\n}\nexport const generateChatMessages = (props: Messages) => {\n  const { requestId, interaction, content, queries = [], files = [], entities } = props\n  return {\n    complete: (): z.infer<typeof bigdataSchemas.st_llm_chat_SummaryCompletionResponse> => ({\n      type: \"COMPLETE\",\n      requestId,\n      messageDeltaMs: 0,\n      interactionTimestamp: interaction.interactionTimestamp,\n      contentBlock: null,\n    }),\n    next: (\n      getParts = (content: string, _files: Array<DbFile>) => [{ content }],\n    ): Array<z.infer<typeof bigdataSchemas.st_llm_chat_SummaryNextBlockResponse>> => {\n      return getParts(content, files).map(({ content }, index) => ({\n        type: \"NEXT\",\n        requestId,\n        messageDeltaMs: 0,\n        sequenceNumber: index + 1,\n        content,\n        block: null,\n      }))\n    },\n    status: (message: string): z.infer<typeof bigdataSchemas.st_llm_chat_StatusInfoResponse> => ({\n      type: \"STATUS\",\n      requestId,\n      messageDeltaMs: null,\n      \"x-amz-requestid\": null,\n      message,\n    }),\n    statusQuery: (): z.infer<typeof bigdataSchemas.st_llm_chat_StatusQueryResponse> => ({\n      type: \"STATUS_QUERY\",\n      requestId,\n      messageDeltaMs: null,\n      \"x-amz-requestid\": null,\n      queries,\n    }),\n    statusConcluding: (): z.infer<\n      typeof bigdataSchemas.st_llm_chat_StatusSourcesFinishedResponse\n    > => ({\n      type: \"STATUS_CONCLUDING\",\n      requestId,\n      messageDeltaMs: null,\n      \"x-amz-requestid\": null,\n    }),\n    statusCollapse: () => {\n      const [file] = files\n      return (\n        entities?.map(entity => {\n          return {\n            type: \"STATUS_COLLAPSE\" as const,\n            requestId,\n            messageDeltaMs: null,\n            \"x-amz-requestid\": null,\n            title: entity.name,\n            content: {\n              type: \"TEXT\" as const,\n              value: `- Great news for ${entity.name} \\`:ref[LIST:[CQS:${file?.rpjson?.document.rp_document_id}-0]]\\``,\n            },\n          }\n        }) ?? []\n      )\n    },\n    auditTraces: (): Array<z.infer<typeof bigdataSchemas.st_llm_chat_AuditTraceResponse>> => {\n      return queries.map(query => {\n        return {\n          type: \"AUDIT_TRACE\" as const,\n          requestId,\n          messageDeltaMs: null,\n          \"x-amz-requestid\": null,\n          trace: {\n            query: {\n              text: query.query,\n              filters: {\n                entities: null,\n                events: null,\n                period: { start: \"2025-05-24T10:13:10.455000\", end: \"2025-05-24T22:13:10.455000\" },\n                sentiments: [],\n                content: null,\n              },\n            },\n            results: files.map(file => {\n              return {\n                type: \"CQS\" as const,\n                values: [\n                  {\n                    documentScope: \"news\",\n                    hd: file.rpjson?.content.title.text ?? \"\",\n                    id: file.rpjson?.document.rp_document_id ?? \"\",\n                    language: file.rpjson?.document.metadata.original_language ?? \"English\",\n                    chunks:\n                      file.rpjson?.content.body?.map((item, cnum) => {\n                        const textBlock = bigdataSchemas.st_documents_TextBlock.parse(item)\n                        return {\n                          id: `${file.rpjson?.document.rp_document_id}-${cnum}`,\n                          cnum,\n                          text: textBlock.text,\n                          sentences: [{ pnum: 1, snum: 0 }],\n                          relevance: randomIntFromInterval(0, 100) / 100,\n                          boundingBoxes: null,\n                        }\n                      }) ?? [],\n                    srcKey: \"\",\n                    srcName: \"\",\n                    sourceRank: 3,\n                    ts: generateDate(),\n                    contentType: null,\n                    documentType: null,\n                    url: null,\n                    rpProviderId: null,\n                  },\n                ],\n              }\n            }),\n            queryId: query.query_id,\n          },\n        }\n      })\n    },\n    sources: (\n      sources: Array<z.infer<typeof bigdataSchemas.st_llm_chat_ExternalSourceAction>>,\n    ): z.infer<typeof bigdataSchemas.st_llm_chat_SummarySourcesResponse> => {\n      return {\n        type: \"SOURCES\",\n        requestId: \"1748117595742\",\n        messageDeltaMs: null,\n        \"x-amz-requestid\": null,\n        originSources: [\n          ...sources,\n          ...files.map(file => ({\n            type: \"DOCUMENT\" as const,\n            name: \"\",\n            hd: file.rpjson?.content.title.text ?? \"No title\",\n            id: file.rpjson?.document.rp_document_id ?? \"\",\n            srcKey: \"\",\n            imageUrls: [],\n            url: null,\n            rpProviderId: null,\n          })),\n        ],\n        metadata: {},\n      }\n    },\n  }\n}\n"],"names":["generateChat","generateChatMessages","interaction","name","date","generateDate","id","generateId","userId","userOwner","ownerUserId","dateCreated","lastUpdated","isPublic","interactions","interactionTimestamp","origin","type","props","requestId","content","queries","files","entities","complete","messageDeltaMs","contentBlock","next","getParts","_files","map","index","sequenceNumber","block","status","message","statusQuery","statusConcluding","statusCollapse","file","entity","title","value","rpjson","document","rp_document_id","auditTraces","query","trace","text","filters","events","period","start","end","sentiments","results","values","documentScope","hd","language","metadata","original_language","chunks","body","item","cnum","textBlock","bigdataSchemas","st_documents_TextBlock","parse","sentences","pnum","snum","relevance","randomIntFromInterval","boundingBoxes","srcKey","srcName","sourceRank","ts","contentType","documentType","url","rpProviderId","queryId","query_id","sources","originSources","imageUrls"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}