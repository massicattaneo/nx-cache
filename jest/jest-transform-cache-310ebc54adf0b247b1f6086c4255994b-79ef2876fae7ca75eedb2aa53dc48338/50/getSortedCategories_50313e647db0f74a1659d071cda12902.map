{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/discovery-sidebar/src/hooks/getSortedCategories.ts"],"sourcesContent":["// Types\ntype SortableItem = { volume: number }\ntype Sortable = Record<string, Array<SortableItem>>\ntype VolumeStatistics = Record<string, { biggestVolume: number; totalVolume: number }>\n\n// Get biggest and total volumes for each category\nconst getVolume = (data: Sortable, group: string) => {\n  const volumes = data?.[group]?.map(item => item.volume) || []\n  const biggestVolume = Math.max(0, ...volumes)\n  const totalVolume = volumes.reduce((tot, volume) => tot + volume, 0)\n  return { biggestVolume, totalVolume }\n}\n\n// Create object with volume statistics for each category\nconst getVolumeStatistics = (data: Sortable, categories: Array<string>): VolumeStatistics => {\n  return categories.reduce(\n    (acc, group) => ({ ...acc, [group]: getVolume(data, group) }),\n    {} as VolumeStatistics,\n  )\n}\n\n// Sort by volume\nconst sortByVolume = (stats: VolumeStatistics, entityA: string, entityB: string) => {\n  const totalVolume = stats[entityB].totalVolume - stats[entityA].totalVolume\n  if (totalVolume === 0) return stats[entityB].biggestVolume - stats[entityA].biggestVolume\n  return totalVolume\n}\n\n// Sort by volume statistics\nconst sortByVolumeStatistics = (stats: VolumeStatistics) => (entityA: string, entityB: string) => {\n  if (\n    (entityA === \"languages\" && entityB === \"sources\") ||\n    (entityA === \"sources\" && entityB === \"languages\")\n  )\n    return sortByVolume(stats, entityA, entityB)\n  if (entityA === \"languages\" || entityA === \"sources\") return 1\n  if (entityB === \"languages\" || entityB === \"sources\") return -1\n  return sortByVolume(stats, entityA, entityB)\n}\n\n// Get sorted categories\nconst getSortedCategories = (data: Sortable): Array<string> => {\n  const categories = Object.keys(data)\n  const stats = getVolumeStatistics(data, categories)\n  const sortedCategories = categories\n    .filter(item => stats[item].totalVolume > 0)\n    .sort(sortByVolumeStatistics(stats))\n  return sortedCategories\n}\n\nexport { getSortedCategories }\n"],"names":["getSortedCategories","getVolume","data","group","volumes","map","item","volume","biggestVolume","Math","max","totalVolume","reduce","tot","getVolumeStatistics","categories","acc","sortByVolume","stats","entityA","entityB","sortByVolumeStatistics","Object","keys","sortedCategories","filter","sort"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,QAAQ;;;;;+BAkDCA;;;eAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CT,kDAAkD;AAClD,MAAMC,YAAY,CAACC,MAAgBC;QACjBD;IAAhB,MAAME,UAAUF,CAAAA,iBAAAA,4BAAAA,cAAAA,IAAM,CAACC,MAAM,cAAbD,kCAAAA,YAAeG,GAAG,CAACC,CAAAA,OAAQA,KAAKC,MAAM,MAAK,EAAE;IAC7D,MAAMC,gBAAgBC,KAAKC,GAAG,CAAC,MAAMN;IACrC,MAAMO,cAAcP,QAAQQ,MAAM,CAAC,CAACC,KAAKN,SAAWM,MAAMN,QAAQ;IAClE,OAAO;QAAEC;QAAeG;IAAY;AACtC;AAEA,yDAAyD;AACzD,MAAMG,sBAAsB,CAACZ,MAAgBa;IAC3C,OAAOA,WAAWH,MAAM,CACtB,CAACI,KAAKb,QAAW,wCAAKa;YAAK,CAACb,MAAM,EAAEF,UAAUC,MAAMC;YACpD,CAAC;AAEL;AAEA,iBAAiB;AACjB,MAAMc,eAAe,CAACC,OAAyBC,SAAiBC;IAC9D,MAAMT,cAAcO,KAAK,CAACE,QAAQ,CAACT,WAAW,GAAGO,KAAK,CAACC,QAAQ,CAACR,WAAW;IAC3E,IAAIA,gBAAgB,GAAG,OAAOO,KAAK,CAACE,QAAQ,CAACZ,aAAa,GAAGU,KAAK,CAACC,QAAQ,CAACX,aAAa;IACzF,OAAOG;AACT;AAEA,4BAA4B;AAC5B,MAAMU,yBAAyB,CAACH,QAA4B,CAACC,SAAiBC;QAC5E,IACE,AAACD,YAAY,eAAeC,YAAY,aACvCD,YAAY,aAAaC,YAAY,aAEtC,OAAOH,aAAaC,OAAOC,SAASC;QACtC,IAAID,YAAY,eAAeA,YAAY,WAAW,OAAO;QAC7D,IAAIC,YAAY,eAAeA,YAAY,WAAW,OAAO,CAAC;QAC9D,OAAOH,aAAaC,OAAOC,SAASC;IACtC;AAEA,wBAAwB;AACxB,MAAMpB,sBAAsB,CAACE;IAC3B,MAAMa,aAAaO,OAAOC,IAAI,CAACrB;IAC/B,MAAMgB,QAAQJ,oBAAoBZ,MAAMa;IACxC,MAAMS,mBAAmBT,WACtBU,MAAM,CAACnB,CAAAA,OAAQY,KAAK,CAACZ,KAAK,CAACK,WAAW,GAAG,GACzCe,IAAI,CAACL,uBAAuBH;IAC/B,OAAOM;AACT"}