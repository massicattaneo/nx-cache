{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/hooks/src/useItemsPerLine.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\"\nimport { MAX_WIDTH_CONTAINER_PADDING_X_OFFSET } from \"@rp/common/settings\"\nimport { useElementSize } from \"./useElementSize\"\n\ntype Props = {\n  width: number\n  gap: number\n  containerEl: HTMLDivElement | null\n}\n\nconst offset = MAX_WIDTH_CONTAINER_PADDING_X_OFFSET * 2\n\nexport const useItemsPerLine = ({ width, gap, containerEl }: Props) => {\n  const { width: containerWidth } = useElementSize(containerEl)\n  const [maxWidth, setMaxWidth] = useState<number>((containerEl?.clientWidth ?? 0) - offset)\n  useEffect(() => {\n    setMaxWidth(containerWidth - offset)\n  }, [containerWidth])\n\n  const num = useMemo(() => {\n    let amount = 1\n    while (width * amount + gap * (amount - 1) < maxWidth + 1) {\n      amount++\n    }\n    return amount - 1\n  }, [gap, maxWidth, width])\n  return num\n}\n"],"names":["useItemsPerLine","offset","MAX_WIDTH_CONTAINER_PADDING_X_OFFSET","width","gap","containerEl","containerWidth","useElementSize","maxWidth","setMaxWidth","useState","clientWidth","useEffect","num","useMemo","amount"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAYaA;;;eAAAA;;;uBAZgC;0BACQ;gCACtB;AAQ/B,MAAMC,SAASC,8CAAoC,GAAG;AAE/C,MAAMF,kBAAkB,CAAC,EAAEG,KAAK,EAAEC,GAAG,EAAEC,WAAW,EAAS;IAChE,MAAM,EAAEF,OAAOG,cAAc,EAAE,GAAGC,IAAAA,8BAAc,EAACF;QACCA;IAAlD,MAAM,CAACG,UAAUC,YAAY,GAAGC,IAAAA,eAAQ,EAAS,AAACL,CAAAA,CAAAA,2BAAAA,wBAAAA,kCAAAA,YAAaM,WAAW,cAAxBN,sCAAAA,2BAA4B,CAAA,IAAKJ;IACnFW,IAAAA,gBAAS,EAAC;QACRH,YAAYH,iBAAiBL;IAC/B,GAAG;QAACK;KAAe;IAEnB,MAAMO,MAAMC,IAAAA,cAAO,EAAC;QAClB,IAAIC,SAAS;QACb,MAAOZ,QAAQY,SAASX,MAAOW,CAAAA,SAAS,CAAA,IAAKP,WAAW,EAAG;YACzDO;QACF;QACA,OAAOA,SAAS;IAClB,GAAG;QAACX;QAAKI;QAAUL;KAAM;IACzB,OAAOU;AACT"}