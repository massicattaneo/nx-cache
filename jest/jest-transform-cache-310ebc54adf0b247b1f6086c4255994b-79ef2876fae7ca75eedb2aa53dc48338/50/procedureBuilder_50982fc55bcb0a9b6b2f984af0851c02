661a7fb1e5473487c7e7d7520fa9c3ee
'use strict';
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
var TRPCError = require('./error/TRPCError.js');
var middleware = require('./middleware.js');
var parser = require('./parser.js');
var utils = require('./utils.js');
/** @internal */ const unsetMarker = Symbol('unsetMarker');
function createNewBuilder(def1, def2) {
    const { middlewares = [], inputs, meta } = def2, rest = _object_without_properties(def2, [
        "middlewares",
        "inputs",
        "meta"
    ]);
    // TODO: maybe have a fn here to warn about calls
    return createBuilder(_object_spread_props(_object_spread({}, utils.mergeWithoutOverrides(def1, rest)), {
        inputs: [
            ...def1.inputs,
            ...inputs !== null && inputs !== void 0 ? inputs : []
        ],
        middlewares: [
            ...def1.middlewares,
            ...middlewares
        ],
        meta: def1.meta && meta ? _object_spread({}, def1.meta, meta) : meta !== null && meta !== void 0 ? meta : def1.meta
    }));
}
function createBuilder(initDef = {}) {
    const _def = _object_spread({
        procedure: true,
        inputs: [],
        middlewares: []
    }, initDef);
    const builder = {
        _def,
        input (input) {
            const parser$1 = parser.getParseFn(input);
            return createNewBuilder(_def, {
                inputs: [
                    input
                ],
                middlewares: [
                    middleware.createInputMiddleware(parser$1)
                ]
            });
        },
        output (output) {
            const parser$1 = parser.getParseFn(output);
            return createNewBuilder(_def, {
                output,
                middlewares: [
                    middleware.createOutputMiddleware(parser$1)
                ]
            });
        },
        meta (meta) {
            return createNewBuilder(_def, {
                meta
            });
        },
        use (middlewareBuilderOrFn) {
            // Distinguish between a middleware builder and a middleware function
            const middlewares = '_middlewares' in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [
                middlewareBuilderOrFn
            ];
            return createNewBuilder(_def, {
                middlewares: middlewares
            });
        },
        unstable_concat (builder) {
            return createNewBuilder(_def, builder._def);
        },
        query (resolver) {
            return createResolver(_object_spread_props(_object_spread({}, _def), {
                type: 'query'
            }), resolver);
        },
        mutation (resolver) {
            return createResolver(_object_spread_props(_object_spread({}, _def), {
                type: 'mutation'
            }), resolver);
        },
        subscription (resolver) {
            return createResolver(_object_spread_props(_object_spread({}, _def), {
                type: 'subscription'
            }), resolver);
        }
    };
    return builder;
}
function createResolver(_def, resolver) {
    const finalBuilder = createNewBuilder(_def, {
        resolver,
        middlewares: [
            async function resolveMiddleware(opts) {
                const data = await resolver(opts);
                return {
                    marker: middleware.middlewareMarker,
                    ok: true,
                    data,
                    ctx: opts.ctx
                };
            }
        ]
    });
    return createProcedureCaller(finalBuilder._def);
}
const codeblock = `
This is a client-only function.
If you want to call this function on the server, see https://trpc.io/docs/v11/server/server-side-calls
`.trim();
function createProcedureCaller(_def) {
    async function procedure(opts) {
        // is direct server-side call
        if (!opts || !('getRawInput' in opts)) {
            throw new Error(codeblock);
        }
        // run the middlewares recursively with the resolver as the last one
        async function callRecursive(callOpts = {
            index: 0,
            ctx: opts.ctx
        }) {
            try {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                const middleware = _def.middlewares[callOpts.index];
                var _callOpts_getRawInput;
                const result = await middleware({
                    ctx: callOpts.ctx,
                    type: opts.type,
                    path: opts.path,
                    getRawInput: (_callOpts_getRawInput = callOpts.getRawInput) !== null && _callOpts_getRawInput !== void 0 ? _callOpts_getRawInput : opts.getRawInput,
                    meta: _def.meta,
                    input: callOpts.input,
                    next (_nextOpts) {
                        const nextOpts = _nextOpts;
                        return callRecursive({
                            index: callOpts.index + 1,
                            ctx: nextOpts && 'ctx' in nextOpts ? _object_spread({}, callOpts.ctx, nextOpts.ctx) : callOpts.ctx,
                            input: nextOpts && 'input' in nextOpts ? nextOpts.input : callOpts.input,
                            getRawInput: nextOpts && 'getRawInput' in nextOpts ? nextOpts.getRawInput : callOpts.getRawInput
                        });
                    }
                });
                return result;
            } catch (cause) {
                return {
                    ok: false,
                    error: TRPCError.getTRPCErrorFromUnknown(cause),
                    marker: middleware.middlewareMarker
                };
            }
        }
        // there's always at least one "next" since we wrap this.resolver in a middleware
        const result = await callRecursive();
        if (!result) {
            throw new TRPCError.TRPCError({
                code: 'INTERNAL_SERVER_ERROR',
                message: 'No result from middlewares - did you forget to `return next()`?'
            });
        }
        if (!result.ok) {
            // re-throw original error
            throw result.error;
        }
        return result.data;
    }
    procedure._def = _def;
    // FIXME typecast shouldn't be needed - fixittt
    return procedure;
}
exports.createBuilder = createBuilder;
exports.unsetMarker = unsetMarker;

//# sourceMappingURL=data:application/json;base64,