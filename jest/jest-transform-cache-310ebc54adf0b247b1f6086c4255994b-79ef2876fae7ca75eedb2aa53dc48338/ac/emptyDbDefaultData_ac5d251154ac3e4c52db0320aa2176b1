cc1fe0e85c9766abebca73b667ed37f7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "newEmptyDb", {
    enumerable: true,
    get: function() {
        return newEmptyDb;
    }
});
const _autosuggestVespaItems = require("../msw/mocks/autosuggest/autosuggestVespaItems");
const _generators = require("./generators");
const _generateApiKey = require("./generators/generateApiKey");
const _generateRpJson = require("./generators/generateRpJson");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const newEmptyDb = ()=>{
    const emptyDbDefaultData = {
        queries: new Array(),
        watchlists: new Array(),
        chats: new Array(),
        autosuggest: new Array(),
        cqs: new Array(),
        files: new Array(),
        briefs: new Array(),
        apiKeys: new Array(),
        content: new Array(),
        customDataViews: new Array()
    };
    // ADD SOME CQS ITEMS
    emptyDbDefaultData.autosuggest.push(..._autosuggestVespaItems.autosuggestVespaItems);
    emptyDbDefaultData.cqs.push(..._autosuggestVespaItems.autosuggestVespaItems.map((item)=>{
        var _item_entityType, _item_queryType, _item_ticker;
        return _object_spread_props(_object_spread({}, item), {
            entityType: (_item_entityType = item.entityType) !== null && _item_entityType !== void 0 ? _item_entityType : "",
            queryType: (_item_queryType = item.queryType) !== null && _item_queryType !== void 0 ? _item_queryType : "entity",
            metadata1: (_item_ticker = item.ticker) !== null && _item_ticker !== void 0 ? _item_ticker : ""
        });
    }));
    const wl = (0, _generators.generateWatchlist)({
        name: "Personal Watchlist",
        items: [
            "D8442A"
        ]
    }) // APPLE
    ;
    const sharedWl = (0, _generators.generateWatchlist)({
        name: "Shared Watchlist",
        items: [
            "DD3BB1"
        ]
    }, {
        type: "company"
    });
    const communityWl = (0, _generators.generateWatchlist)({
        name: "Community Watchlist that makes the difference",
        items: [
            "228D42"
        ],
        description: "This is the global description of the Microsoft Wl that differs"
    }, {
        type: "community"
    });
    const thematicWl = (0, _generators.generateWatchlist)({
        name: "Thematic Watchlist that makes the difference",
        items: [
            "E09E2B"
        ],
        description: "This is the global description of the Nvidia Wl that differs"
    }, {
        type: "thematic"
    });
    const publicWl = (0, _generators.generateWatchlist)({
        id: "public-id",
        name: "Public Watchlist",
        items: [
            "8C995A"
        ],
        description: "This is the public description of the YouTube Wl that differs"
    }, {
        type: "public"
    });
    emptyDbDefaultData.watchlists.push(wl, sharedWl, communityWl, thematicWl, publicWl);
    const brief = (0, _generators.generateBrief)({
        briefName: "Personal Brief",
        watchlistIds: [
            wl.id
        ]
    });
    emptyDbDefaultData.briefs.push(brief);
    const file = (0, _generateRpJson.generateFile)({
        name: "Personal File",
        content: "The The Associated Press Co. is talking with Twitter Inc. about a potential acquisition.\nThe deal could be worth more than $10 billion, according to sources familiar with the matter.\nThe Associated Press Co. is a leading news organization that provides news content to various media outlets worldwide.\nTwitter Inc. is a social media platform that allows users to post and interact with messages known as tweets.",
        cqsItems: emptyDbDefaultData.cqs
    });
    const shared = (0, _generateRpJson.generateFile)({
        name: "Shared File",
        content: "Hello Twitter Inc.!",
        cqsItems: emptyDbDefaultData.cqs,
        owner: false,
        sharedWith: [
            _generators.userOwner.organization.id
        ]
    });
    emptyDbDefaultData.files.push(file, shared);
    const key = (0, _generateApiKey.generateApiKey)("My initial API Key");
    const date = new Date();
    date.setDate(date.getDate() - 1) // Set last used to 1 day ago
    ;
    emptyDbDefaultData.apiKeys.push(_object_spread_props(_object_spread({}, key), {
        api_key: "123e4567-e89b-12d3-a456-426614174000",
        stub: "stub...key",
        date_created: date.toISOString(),
        last_updated: date.toISOString(),
        last_used: date.toISOString()
    }));
    return emptyDbDefaultData;
};

//# sourceMappingURL=data:application/json;base64,