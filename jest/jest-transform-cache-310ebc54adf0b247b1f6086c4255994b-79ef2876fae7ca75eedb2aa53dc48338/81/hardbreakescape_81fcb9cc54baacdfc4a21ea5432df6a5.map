{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/hard-break-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n"],"names":["hardBreakEscape","name","tokenize","tokenizeHardBreakEscape","effects","ok","nok","start","code","enter","consume","after","markdownLineEnding","exit"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAIYA;;;eAAAA;;;wCAFoB;AAE1B,MAAMA,kBAAkB;IAC7BC,MAAM;IACNC,UAAUC;AACZ;AAEA;;;CAGC,GACD,SAASA,wBAAwBC,OAAO,EAAEC,EAAE,EAAEC,GAAG;IAC/C,OAAOC;IAEP;;;;;;;;;;GAUC,GACD,SAASA,MAAMC,IAAI;QACjBJ,QAAQK,KAAK,CAAC;QACdL,QAAQM,OAAO,CAACF;QAChB,OAAOG;IACT;IAEA;;;;;;;;;;GAUC,GACD,SAASA,MAAMH,IAAI;QACjB,IAAII,IAAAA,0CAAkB,EAACJ,OAAO;YAC5BJ,QAAQS,IAAI,CAAC;YACb,OAAOR,GAAGG;QACZ;QACA,OAAOF,IAAIE;IACb;AACF"}