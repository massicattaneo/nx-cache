{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/watchlist-editor/src/WatchlistSuggestionList.tsx"],"sourcesContent":["import { Dispatch, useCallback, useLayoutEffect, useMemo, useState } from \"react\"\nimport { SetStateAction } from \"jotai\"\nimport { Watchlist } from \"@rp/common/api-types\"\nimport { HEADER_HEIGHT, WATCHLIST_ENTITIES_FEATURE_NAME } from \"@rp/common/settings\"\nimport { formatNumber, isDefined } from \"@rp/common/utils\"\nimport { useIsWatchlistEntityLimitMet } from \"@rp/react/common/hooks\"\nimport { useAccount } from \"@rp/react/common/providers\"\nimport { useCqsByIdsContext } from \"@rp/react/tanstack-api/cqs-by-ids\"\nimport {\n  PanelConfig,\n  WatchlistGroups,\n  usePanelConfig,\n} from \"@rp/react/tanstack-api/discovery-panel-config\"\nimport {\n  GenericWatchlistAutosuggestPostParams,\n  WatchlistAutosuggestPostResponse,\n  WatchlistSuggestionFilters,\n  convertSuggestionToCqsItem,\n  getEmptySuggestion,\n  isEnhancedCqsItemSuggestion,\n  isEntitySuggestion,\n} from \"@rp/react/tanstack-api/suggestion\"\nimport { useElementSize } from \"@rp/react/web/common/hooks\"\nimport { useModal } from \"@rp/react/web/common/providers\"\nimport {\n  Box,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n} from \"@rp/react/web/mui/core\"\nimport { AddItemsButton } from \"./AddItemsButton\"\nimport { SuggestionsFilters } from \"./SuggestionFilters/SuggestionsFilters\"\nimport { WatchlistEmptyPlaceholder } from \"./WatchlistEmptyPlaceholder\"\nimport { WatchlistSuggestionItem } from \"./WatchlistSuggestionItem\"\n\ntype Props = {\n  pages: Array<WatchlistAutosuggestPostResponse>\n  included: Array<string>\n  isLoading: boolean\n  onAddSuggestions: (ids: Array<string>) => void\n  categoryFilter?: string\n  isPatching?: boolean\n  filters: WatchlistSuggestionFilters\n  perPage?: number\n  setPerPage?: (perPage: number) => void\n  page?: number\n  setPage?: Dispatch<SetStateAction<number>>\n  setFilters?: Dispatch<SetStateAction<WatchlistSuggestionFilters>>\n  fetchNextPage?: () => Promise<unknown>\n  suggestionQuery: GenericWatchlistAutosuggestPostParams\n  watchlist: Watchlist\n  listContainer: HTMLDivElement | null\n}\n\nconst getEmptySuggestions = (perPage: number) => {\n  return new Array(perPage)\n    .fill(0)\n    .map((_, index) => index.toString())\n    .map(getEmptySuggestion)\n}\n\nconst getDisplayCategories = (categories: PanelConfig[\"discoveryPanelCategories\"]) => {\n  return categories.reduce<Record<string, WatchlistGroups>>((acc, item) => {\n    return { ...acc, [item.label]: item.watchlistGroups }\n  }, {})\n}\n\nconst WatchlistSuggestionList = ({\n  pages,\n  included,\n  isLoading,\n  onAddSuggestions,\n  categoryFilter,\n  isPatching,\n  filters,\n  setFilters,\n  fetchNextPage,\n  setPerPage,\n  perPage = 0,\n  page = 0,\n  setPage,\n  suggestionQuery,\n  watchlist,\n  listContainer,\n}: Props) => {\n  const facets = pages[0]?.facets ?? {}\n  const { addByIds } = useCqsByIdsContext()\n  const { width } = useElementSize(listContainer)\n  const showFiltersNewLine = width < 900 && categoryFilter\n\n  const MENU_HEIGHT = showFiltersNewLine ? 110 : 58\n  const suggestions = useMemo(\n    () => (pages[page]?.results ?? []).filter(isEnhancedCqsItemSuggestion),\n    [page, pages],\n  )\n  const [selectedSuggestions, setSelectedSuggestions] = useState<Array<string>>([])\n  const [multiSelectState, setMultiSelectState] = useState<\"checked\" | \"unchecked\" | \"disabled\">(\n    \"unchecked\",\n  )\n  const addSelectedSuggestion = useCallback((key: string) => {\n    setSelectedSuggestions(prev => [...prev, key])\n  }, [])\n  const { data: panelConfig } = usePanelConfig()\n  const [categoryFields, categoryTitle] = useMemo(() => {\n    const categoryMap = getDisplayCategories(panelConfig?.discoveryPanelCategories ?? [])\n    return categoryFilter\n      ? [categoryMap[categoryFilter].fields, categoryMap[categoryFilter].title]\n      : [[], undefined]\n  }, [categoryFilter, panelConfig])\n\n  const removeSelectedSuggestion = useCallback((key: string) => {\n    setSelectedSuggestions(prev => {\n      const filteredSuggestions = prev.filter(selectedKey => selectedKey !== key)\n      return filteredSuggestions\n    })\n  }, [])\n\n  const addAll = useCallback(() => {\n    const suggestionsIds = suggestions\n      .map(suggestion => suggestion.key)\n      .filter(suggestionId => !included.includes(suggestionId))\n    const allSuggestions = new Set([...selectedSuggestions, ...suggestionsIds])\n    setSelectedSuggestions([...allSuggestions])\n  }, [included, selectedSuggestions, suggestions])\n\n  const removeAll = useCallback(() => {\n    const suggestionsIds = suggestions.map(suggestion => suggestion.key)\n    setSelectedSuggestions(\n      selectedSuggestions.filter(suggestionId => !suggestionsIds.includes(suggestionId)),\n    )\n  }, [selectedSuggestions, suggestions])\n\n  const numOfResults = pages[0]?.count ?? 0\n  const {\n    planComparisonModal: { handleOpen: planComparisonHandleOpen },\n  } = useModal()\n  const { quota } = useAccount()\n  const isWatchlistEntityLimitMet = useIsWatchlistEntityLimitMet(\n    quota,\n    included.length + selectedSuggestions.length,\n  )\n  // When suggestions change, set state of top checkbox\n  useLayoutEffect(() => {\n    if (\n      suggestions.length <= included.length &&\n      suggestions.every(suggestion => included.includes(suggestion.key))\n    ) {\n      setMultiSelectState(\"disabled\")\n    } else if (\n      suggestions.length <= selectedSuggestions.length + included.length &&\n      suggestions.every(\n        suggestion =>\n          selectedSuggestions.includes(suggestion.key) || included.includes(suggestion.key),\n      )\n    ) {\n      setMultiSelectState(\"checked\")\n    } else {\n      setMultiSelectState(\"unchecked\")\n    }\n  }, [suggestions, removeAll, selectedSuggestions, included])\n\n  const hasResults = !(!isLoading && suggestions.length === 0)\n\n  const tableLayout = categoryFilter && categoryFilter !== \"Concepts\" ? \"fixed\" : undefined\n  return (\n    <Box sx={{ width: \"100%\", height: \"100%\" }}>\n      <Box\n        sx={{\n          position: \"sticky\",\n          height: MENU_HEIGHT,\n          top: HEADER_HEIGHT,\n          paddingRight: \"24px\",\n          justifyContent: \"space-between\",\n          alignItems: \"end\",\n          width: \"calc(100% + 24px)\",\n          backgroundColor: \"surface.main\",\n          pt: 3,\n          pl: 0,\n          zIndex: 9,\n        }}\n      >\n        <Box sx={{ display: \"flex\", width: \"100%\", alignItems: \"center\", minHeight: 33 }}>\n          <Typography color=\"grey.300\" variant=\"caption\" sx={{ flexGrow: 1, whiteSpace: \"nowrap\" }}>\n            {isLoading\n              ? \"\"\n              : `Showing ${formatNumber(numOfResults)} item${numOfResults > 1 ? \"s\" : \"\"}`}\n          </Typography>\n          {!showFiltersNewLine ? (\n            <SuggestionsFilters\n              isLoading={isLoading}\n              facets={facets}\n              maxWidth={width - 400}\n              categoryFilter={categoryFilter}\n              filters={filters}\n              setFilters={setFilters}\n              suggestionQuery={suggestionQuery}\n              fields={categoryFields}\n            />\n          ) : null}\n          <AddItemsButton\n            watchlistItemsCount={watchlist.items.length}\n            amount={selectedSuggestions.length}\n            onClick={() => {\n              if (isWatchlistEntityLimitMet) {\n                planComparisonHandleOpen(WATCHLIST_ENTITIES_FEATURE_NAME)\n                return\n              }\n              const ids = selectedSuggestions\n                .map(key => suggestions.find(i => i.key === key))\n                .filter(isDefined)\n              const toAdd = ids\n                .map(item =>\n                  isEntitySuggestion(item) ? convertSuggestionToCqsItem(item) : undefined,\n                )\n                .filter(isDefined)\n              addByIds(toAdd)\n              setSelectedSuggestions([])\n              onAddSuggestions(selectedSuggestions)\n            }}\n            loading={isPatching}\n          />\n        </Box>\n        {showFiltersNewLine ? (\n          <Box\n            sx={{\n              flexWrap: \"nowrap\",\n              my: 2,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"left\",\n              flexGrow: 1,\n            }}\n          >\n            <SuggestionsFilters\n              isLoading={isLoading}\n              facets={facets}\n              clearText=\"Clear\"\n              maxWidth={width - 70}\n              categoryFilter={categoryFilter}\n              filters={filters}\n              setFilters={setFilters}\n              suggestionQuery={suggestionQuery}\n              fields={categoryFields}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      {!hasResults ? (\n        <Box sx={{ display: \"flex\", alignItems: \"center\", height: \"calc(100% - 58px)\" }}>\n          <WatchlistEmptyPlaceholder\n            placeholder={\n              \"We couldn't find any results that match your search criteria. Please try again with different keywords.\"\n            }\n          />\n        </Box>\n      ) : null}\n\n      {hasResults ? (\n        <Box>\n          <Table sx={{ width: \"100%\", tableLayout }}>\n            <TableHead\n              sx={theme => ({\n                position: \"sticky\",\n                top: MENU_HEIGHT + HEADER_HEIGHT,\n                backgroundColor: \"surface.main\",\n                zIndex: 9,\n                boxShadow: `0px 1px ${theme.palette.outline.border}`,\n                height: 48,\n                \"& th\": {\n                  fontWeight: 700,\n                  fontSize: 12,\n                  py: 0,\n                },\n              })}\n            >\n              <TableRow>\n                <TableCell sx={{ width: \"60px\" }}>\n                  <Checkbox\n                    disabled={multiSelectState === \"disabled\" || isLoading || isPatching}\n                    checked={\n                      multiSelectState === \"checked\" ||\n                      (multiSelectState === \"disabled\" && !isLoading)\n                    }\n                    onChange={(_, value) => (value ? addAll() : removeAll())}\n                  />\n                </TableCell>\n                {categoryFilter ? (\n                  <>\n                    <TableCell>{categoryTitle}</TableCell>\n                    {categoryFields.map(({ label }) => (\n                      <TableCell key={label}>{label}</TableCell>\n                    ))}\n                  </>\n                ) : (\n                  <>\n                    <TableCell>NAME</TableCell>\n                    <TableCell>TYPE</TableCell>\n                  </>\n                )}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(isLoading ? getEmptySuggestions(perPage) : suggestions).map(suggestion => (\n                <WatchlistSuggestionItem\n                  isLoading={isLoading}\n                  key={suggestion.key}\n                  suggestion={suggestion}\n                  selected={\n                    included.includes(suggestion.key) ||\n                    selectedSuggestions.includes(suggestion.key)\n                  }\n                  disabled={isPatching}\n                  included={included.includes(suggestion.key)}\n                  onChange={(key, value) =>\n                    value ? addSelectedSuggestion(key) : removeSelectedSuggestion(key)\n                  }\n                  categoryFilter={categoryFilter}\n                  fields={categoryFields}\n                />\n              ))}\n            </TableBody>\n          </Table>\n          {numOfResults > perPage ? (\n            <TablePagination\n              component=\"div\"\n              count={numOfResults}\n              labelDisplayedRows={({ from, to, count }) => {\n                return (\n                  <>\n                    {from}–{to} of {formatNumber(count)}\n                  </>\n                )\n              }}\n              page={page}\n              onPageChange={(ev, newPage) => {\n                fetchNextPage?.().then(() => {\n                  setPage?.(newPage)\n                  setTimeout(() => {\n                    window.scrollTo({ top: 0, behavior: \"smooth\" })\n                  }, 100)\n                })\n                // window.scrollTo({ top: 0, behavior: \"smooth\" })\n              }}\n              rowsPerPage={perPage}\n              onRowsPerPageChange={ev => {\n                setPerPage?.(Number(ev.target.value))\n                setTimeout(() => {\n                  window.scrollTo({ top: 0, behavior: \"smooth\" })\n                }, 100)\n              }}\n            />\n          ) : null}\n        </Box>\n      ) : null}\n    </Box>\n  )\n}\n\nexport { WatchlistSuggestionList, getDisplayCategories }\n"],"names":["WatchlistSuggestionList","getDisplayCategories","getEmptySuggestions","perPage","Array","fill","map","_","index","toString","getEmptySuggestion","categories","reduce","acc","item","label","watchlistGroups","pages","included","isLoading","onAddSuggestions","categoryFilter","isPatching","filters","setFilters","fetchNextPage","setPerPage","page","setPage","suggestionQuery","watchlist","listContainer","facets","addByIds","useCqsByIdsContext","width","useElementSize","showFiltersNewLine","MENU_HEIGHT","suggestions","useMemo","results","filter","isEnhancedCqsItemSuggestion","selectedSuggestions","setSelectedSuggestions","useState","multiSelectState","setMultiSelectState","addSelectedSuggestion","useCallback","key","prev","data","panelConfig","usePanelConfig","categoryFields","categoryTitle","categoryMap","discoveryPanelCategories","fields","title","undefined","removeSelectedSuggestion","filteredSuggestions","selectedKey","addAll","suggestionsIds","suggestion","suggestionId","includes","allSuggestions","Set","removeAll","numOfResults","count","planComparisonModal","handleOpen","planComparisonHandleOpen","useModal","quota","useAccount","isWatchlistEntityLimitMet","useIsWatchlistEntityLimitMet","length","useLayoutEffect","every","hasResults","tableLayout","Box","sx","height","position","top","HEADER_HEIGHT","paddingRight","justifyContent","alignItems","backgroundColor","pt","pl","zIndex","display","minHeight","Typography","color","variant","flexGrow","whiteSpace","formatNumber","SuggestionsFilters","maxWidth","AddItemsButton","watchlistItemsCount","items","amount","onClick","WATCHLIST_ENTITIES_FEATURE_NAME","ids","find","i","isDefined","toAdd","isEntitySuggestion","convertSuggestionToCqsItem","loading","flexWrap","my","clearText","WatchlistEmptyPlaceholder","placeholder","Table","TableHead","theme","boxShadow","palette","outline","border","fontWeight","fontSize","py","TableRow","TableCell","Checkbox","disabled","checked","onChange","value","TableBody","WatchlistSuggestionItem","selected","TablePagination","component","labelDisplayedRows","from","to","onPageChange","ev","newPage","then","setTimeout","window","scrollTo","behavior","rowsPerPage","onRowsPerPageChange","Number","target"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}