b7a5fb43cdf2fe3343d48b8751e18046
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DatasetPopper: function() {
        return DatasetPopper;
    },
    filterDatasets: function() {
        return filterDatasets;
    },
    useDatasets: function() {
        return useDatasets;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _chat = require("@rp/react/common/chat");
const _providers = require("@rp/react/common/providers");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _DatasetOption = require("./DatasetOption");
const _NoDatasetsPlaceholder = require("./NoDatasetsPlaceholder");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function filterDatasets(filterValue, filterFn, blockFn) {
    if (filterValue === "" || filterValue === "@") {
        return {
            type: "default",
            value: Object.values(_chat.chatDatasets).filter(filterFn).map(blockFn)
        };
    }
    var _filterValue_startsWith;
    const isDirectQuery = (_filterValue_startsWith = filterValue === null || filterValue === void 0 ? void 0 : filterValue.startsWith("@")) !== null && _filterValue_startsWith !== void 0 ? _filterValue_startsWith : false;
    const cleanFilterValue = isDirectQuery ? filterValue.slice(1) : filterValue;
    const filterFields = isDirectQuery ? [
        "handle"
    ] : [
        "label",
        "description"
    ];
    return {
        type: "searchResults",
        value: Object.values(_chat.chatDatasets).filter((dataset)=>{
            if (!filterFn(dataset)) {
                return false;
            }
            return filterFields.some((field)=>isDirectQuery ? dataset[field].toLowerCase().startsWith(cleanFilterValue.toLowerCase()) : dataset[field].toLowerCase().includes(cleanFilterValue.toLowerCase()));
        }).map(blockFn)
    };
}
function useDatasets(filterValue, enableFreeTier = false, sourceFilter = {}) {
    const { hasSomeEntitlement } = (0, _providers.useAccount)();
    function entitlementFilter(dataset) {
        var _sourceFilter_dataset_id;
        const isEnabled = (_sourceFilter_dataset_id = sourceFilter === null || sourceFilter === void 0 ? void 0 : sourceFilter[dataset.id]) !== null && _sourceFilter_dataset_id !== void 0 ? _sourceFilter_dataset_id : true;
        if (enableFreeTier) {
            return isEnabled;
        }
        if (!dataset.entitlements) {
            return true;
        }
        if (!isEnabled) {
            return false;
        }
        return hasSomeEntitlement(dataset.entitlements);
    }
    function appendBlock(dataset) {
        if (!enableFreeTier) {
            return _object_spread_props(_object_spread({}, dataset), {
                blocked: false
            });
        }
        return _object_spread_props(_object_spread({}, dataset), {
            blocked: dataset.entitlements ? !hasSomeEntitlement(dataset.entitlements) : true
        });
    }
    return filterDatasets(filterValue, entitlementFilter, appendBlock);
}
const DatasetList = ({ type, value, onOptionClick })=>{
    return type === "default" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            "& > p": {
                fontSize: 12,
                pt: 1,
                px: 2,
                mt: 1.5,
                letterSpacing: 1,
                color: "grey.300"
            }
        },
        children: value.map((dataset)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_DatasetOption.DatasetOption, {
                icon: dataset.icon,
                description: dataset.description,
                label: dataset.label,
                handle: dataset.handle,
                onClick: ()=>onOptionClick({
                        scope: dataset.id,
                        blocked: dataset.blocked,
                        entitlements: dataset.entitlements
                    }),
                blocked: dataset.blocked
            }, dataset.handle))
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: value.map((dataset)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_DatasetOption.DatasetOption, {
                icon: dataset.icon,
                description: dataset.description,
                label: dataset.label,
                handle: dataset.handle,
                onClick: ()=>onOptionClick({
                        scope: dataset.id,
                        blocked: dataset.blocked,
                        entitlements: dataset.entitlements
                    }),
                blocked: dataset.blocked
            }, dataset.handle))
    });
};
const DatasetPopper = ({ inputRef, open, filter, onOptionClick, setSelectedDataset, onClose, // enableFreeTier,
sourceFilter, isHomePageChat = false })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const theme = (0, _core.useTheme)();
    const filteredDatasets = useDatasets(filter, true, sourceFilter);
    (0, _react.useEffect)(()=>{
        if (!setSelectedDataset) return;
        if (!open || filteredDatasets.value.length === 0) {
            setSelectedDataset(undefined);
            return;
        }
        if (filteredDatasets.type === "default") {
            setSelectedDataset("news");
            return;
        }
        setSelectedDataset(filteredDatasets.value[0].blocked ? undefined : filteredDatasets.value[0].id);
    }, [
        filteredDatasets,
        open,
        setSelectedDataset
    ]);
    (0, _react.useEffect)(()=>{
        const closeDatasetOnEsc = (e)=>{
            if (e.key === "Escape") {
                onClose === null || onClose === void 0 ? void 0 : onClose();
            }
        };
        window.addEventListener("keydown", closeDatasetOnEsc);
        return ()=>window.removeEventListener("keydown", closeDatasetOnEsc);
    }, [
        onClose
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Popper, {
        open: open,
        anchorEl: inputRef,
        placement: isMobile || isHomePageChat ? "bottom" : "top",
        modifiers: [
            {
                name: "preventOverflow",
                enabled: false
            },
            {
                name: "flip",
                enabled: false
            }
        ],
        sx: {
            borderTop: "6px",
            width: inputRef === null || inputRef === void 0 ? void 0 : inputRef.clientWidth,
            zIndex: 10000
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Paper, {
            elevation: 0,
            sx: isHomePageChat ? _object_spread({
                backgroundColor: isMobile ? "transparent" : "elevation.dp01",
                borderRadius: 2,
                borderTopLeftRadius: 0,
                borderTopRightRadius: 0,
                border: isMobile ? undefined : "2px solid",
                borderTop: 0,
                borderColor: "rgba(255,255,255,0.3)",
                mt: isMobile ? undefined : "-1px",
                ml: isMobile ? undefined : "-2px",
                mr: isMobile ? undefined : "-2px",
                maxHeight: 340,
                overflow: "auto"
            }, theme.scrollbarStyles) : _object_spread({
                backgroundColor: isMobile ? "transparent" : "elevation.dp01",
                borderRadius: 2,
                borderBottomLeftRadius: 0,
                borderBottomRightRadius: 0,
                border: isMobile ? undefined : "2px solid",
                borderColor: "rgba(255,255,255,0.3)",
                mb: isMobile ? undefined : "-1px",
                ml: isMobile ? undefined : "-2px",
                mr: isMobile ? undefined : "-2px",
                maxHeight: 340,
                overflow: "auto"
            }, theme.scrollbarStyles),
            children: filteredDatasets.value.length === 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_NoDatasetsPlaceholder.NoDatasetsPlaceholder, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(DatasetList, _object_spread_props(_object_spread({}, filteredDatasets), {
                onOptionClick: onOptionClick
            }))
        })
    });
};

//# sourceMappingURL=data:application/json;base64,