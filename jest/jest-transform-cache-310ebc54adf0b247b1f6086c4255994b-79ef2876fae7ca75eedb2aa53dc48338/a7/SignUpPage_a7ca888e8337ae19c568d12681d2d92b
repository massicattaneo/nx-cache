dd402329b3f50d7c4fec68d6db2c5d92
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SignUpPage", {
    enumerable: true,
    get: function() {
        return SignUpPage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _hooks = require("@rp/react/web/common/hooks");
const _router = require("@rp/react/web/router");
const _AccountDetailsStep = require("./Steps/AccountDetailsStep");
const _EmailVerificationStep = require("./Steps/EmailVerificationStep");
const _PasswordStep = require("./Steps/PasswordStep");
const SignUpPage = ()=>{
    const [searchParams] = (0, _reactrouterdom.useSearchParams)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const steps = [
        _AccountDetailsStep.AccountDetailsStep,
        _PasswordStep.PasswordStep,
        _EmailVerificationStep.EmailVerificationStep
    ];
    const [step, setStep] = (0, _react.useState)(0);
    const { setFromNative } = (0, _hooks.useFromNative)();
    (0, _react.useEffect)(()=>{
        setFromNative();
    }, [
        setFromNative
    ]);
    (0, _react.useEffect)(()=>{
        const clerkTicket = searchParams.get(_settings.CLERK_TICKET);
        if (clerkTicket) {
            const params = new URLSearchParams(searchParams);
            navigate(`${_router.INVITATION_ROUTE}?${params.toString()}`);
        }
    }, [
        searchParams,
        navigate
    ]);
    const CurrentStep = steps[step];
    if (!CurrentStep) {
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(CurrentStep, {
        onComplete: ()=>setStep((v)=>v + 1)
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL3BhZ2VzL1NpZ25VcC9TaWduVXBQYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZU5hdmlnYXRlLCB1c2VTZWFyY2hQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyBDTEVSS19USUNLRVQgfSBmcm9tIFwiQHJwL2NvbW1vbi9zZXR0aW5nc1wiXG5pbXBvcnQgeyB1c2VGcm9tTmF0aXZlIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IElOVklUQVRJT05fUk9VVEUgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9yb3V0ZXJcIlxuaW1wb3J0IHsgQWNjb3VudERldGFpbHNTdGVwIH0gZnJvbSBcIi4vU3RlcHMvQWNjb3VudERldGFpbHNTdGVwXCJcbmltcG9ydCB7IEVtYWlsVmVyaWZpY2F0aW9uU3RlcCB9IGZyb20gXCIuL1N0ZXBzL0VtYWlsVmVyaWZpY2F0aW9uU3RlcFwiXG5pbXBvcnQgeyBQYXNzd29yZFN0ZXAgfSBmcm9tIFwiLi9TdGVwcy9QYXNzd29yZFN0ZXBcIlxuXG5jb25zdCBTaWduVXBQYWdlID0gKCkgPT4ge1xuICBjb25zdCBbc2VhcmNoUGFyYW1zXSA9IHVzZVNlYXJjaFBhcmFtcygpXG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKVxuXG4gIGNvbnN0IHN0ZXBzID0gW0FjY291bnREZXRhaWxzU3RlcCwgUGFzc3dvcmRTdGVwLCBFbWFpbFZlcmlmaWNhdGlvblN0ZXBdXG4gIGNvbnN0IFtzdGVwLCBzZXRTdGVwXSA9IHVzZVN0YXRlKDApXG5cbiAgY29uc3QgeyBzZXRGcm9tTmF0aXZlIH0gPSB1c2VGcm9tTmF0aXZlKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEZyb21OYXRpdmUoKVxuICB9LCBbc2V0RnJvbU5hdGl2ZV0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjbGVya1RpY2tldCA9IHNlYXJjaFBhcmFtcy5nZXQoQ0xFUktfVElDS0VUKVxuICAgIGlmIChjbGVya1RpY2tldCkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2hQYXJhbXMpXG4gICAgICBuYXZpZ2F0ZShgJHtJTlZJVEFUSU9OX1JPVVRFfT8ke3BhcmFtcy50b1N0cmluZygpfWApXG4gICAgfVxuICB9LCBbc2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZV0pXG5cbiAgY29uc3QgQ3VycmVudFN0ZXAgPSBzdGVwc1tzdGVwXVxuXG4gIGlmICghQ3VycmVudFN0ZXApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIDxDdXJyZW50U3RlcCBvbkNvbXBsZXRlPXsoKSA9PiBzZXRTdGVwKHYgPT4gdiArIDEpfSAvPlxufVxuXG5leHBvcnQgeyBTaWduVXBQYWdlIH1cbiJdLCJuYW1lcyI6WyJTaWduVXBQYWdlIiwic2VhcmNoUGFyYW1zIiwidXNlU2VhcmNoUGFyYW1zIiwibmF2aWdhdGUiLCJ1c2VOYXZpZ2F0ZSIsInN0ZXBzIiwiQWNjb3VudERldGFpbHNTdGVwIiwiUGFzc3dvcmRTdGVwIiwiRW1haWxWZXJpZmljYXRpb25TdGVwIiwic3RlcCIsInNldFN0ZXAiLCJ1c2VTdGF0ZSIsInNldEZyb21OYXRpdmUiLCJ1c2VGcm9tTmF0aXZlIiwidXNlRWZmZWN0IiwiY2xlcmtUaWNrZXQiLCJnZXQiLCJDTEVSS19USUNLRVQiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJJTlZJVEFUSU9OX1JPVVRFIiwidG9TdHJpbmciLCJDdXJyZW50U3RlcCIsIm9uQ29tcGxldGUiLCJ2Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF1Q1NBOzs7ZUFBQUE7Ozs7dUJBdkMyQjtnQ0FDUzswQkFDaEI7dUJBQ0M7d0JBQ0c7b0NBQ0U7dUNBQ0c7OEJBQ1Q7QUFFN0IsTUFBTUEsYUFBYTtJQUNqQixNQUFNLENBQUNDLGFBQWEsR0FBR0MsSUFBQUEsK0JBQWU7SUFDdEMsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQVc7SUFFNUIsTUFBTUMsUUFBUTtRQUFDQyxzQ0FBa0I7UUFBRUMsMEJBQVk7UUFBRUMsNENBQXFCO0tBQUM7SUFDdkUsTUFBTSxDQUFDQyxNQUFNQyxRQUFRLEdBQUdDLElBQUFBLGVBQVEsRUFBQztJQUVqQyxNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHQyxJQUFBQSxvQkFBYTtJQUV2Q0MsSUFBQUEsZ0JBQVMsRUFBQztRQUNSRjtJQUNGLEdBQUc7UUFBQ0E7S0FBYztJQUVsQkUsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLGNBQWNkLGFBQWFlLEdBQUcsQ0FBQ0Msc0JBQVk7UUFDakQsSUFBSUYsYUFBYTtZQUNmLE1BQU1HLFNBQVMsSUFBSUMsZ0JBQWdCbEI7WUFDbkNFLFNBQVMsQ0FBQyxFQUFFaUIsd0JBQWdCLENBQUMsQ0FBQyxFQUFFRixPQUFPRyxRQUFRLEdBQUcsQ0FBQztRQUNyRDtJQUNGLEdBQUc7UUFBQ3BCO1FBQWNFO0tBQVM7SUFFM0IsTUFBTW1CLGNBQWNqQixLQUFLLENBQUNJLEtBQUs7SUFFL0IsSUFBSSxDQUFDYSxhQUFhO1FBQ2hCLE9BQU87SUFDVDtJQUVBLHFCQUFPLHFCQUFDQTtRQUFZQyxZQUFZLElBQU1iLFFBQVFjLENBQUFBLElBQUtBLElBQUk7O0FBQ3pEIn0=