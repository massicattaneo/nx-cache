5018299c59bd8617f3917a5affe58821
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesListItem", {
    enumerable: true,
    get: function() {
        return FilesListItem;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reacthighlightwords = /*#__PURE__*/ _interop_require_default(require("react-highlight-words"));
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _files = require("@rp/react/web/common/files");
const _hooks1 = require("@rp/react/web/common/hooks");
const _icons = require("@rp/react/web/icons");
const _core = require("@rp/react/web/mui/core");
const _FileStatusCell = require("../FileStatusCell/FileStatusCell");
const _FilesListItemMobile = require("./FilesListItemMobile");
const _FilesListMobilesActions = require("./FilesListMobilesActions");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const FilesListItem = ({ item, columnsWidth, actions, selected, setSelected, filterTerm, isPlaceholderData, shared })=>{
    var _item_sharedWith;
    const [{ document }] = (0, _hooks1.useHashParams)();
    const { isMobile } = (0, _hooks1.useDeviceInfo)();
    const [isHover, setIsHover] = (0, _react.useState)({});
    const [openMenu, setOpenMenu] = (0, _react.useState)(false);
    const theme = (0, _core.useTheme)();
    const { data: orgUser, isLoading } = (0, _hooks.useClerkOrganizationMember)(item.owner);
    const { canShare } = (0, _providers.useAccount)();
    // This checks that the item has finished uploading before trying to fetch it's metadata
    const missingMetaData = [
        "analyzing",
        "progress",
        "processing",
        "pending"
    ].includes(item.status) && (item.progress === 100 || item.progress === undefined);
    const showCompanyIcon = !!(item.sharedWith && (item === null || item === void 0 ? void 0 : (_item_sharedWith = item.sharedWith) === null || _item_sharedWith === void 0 ? void 0 : _item_sharedWith.length) > 0);
    const ownerName = orgUser ? `${orgUser.publicUserData.firstName} ${orgUser.publicUserData.lastName}` : undefined;
    const removeAction = _object_spread_props(_object_spread({}, actions.remove), {
        onClick: (file)=>{
            return actions.remove.onClick(file).then(()=>{
                setSelected((prev)=>prev.filter((item)=>item.id !== file.id));
            });
        }
    });
    const mobileActions = [
        actions.open,
        actions.chat,
        canShare ? actions.share : undefined,
        shared ? undefined : removeAction,
        actions.download
    ].filter(Boolean);
    const desktopActions = [
        actions.open,
        shared ? actions.chat : undefined,
        canShare ? actions.share : undefined,
        shared ? undefined : removeAction,
        actions.download
    ].filter(Boolean);
    const onRemove = (item)=>{
        actions.remove.onClick(item);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
        isPlaceholderData: isPlaceholderData,
        onMouseEnter: ()=>setIsHover({
                [item.id]: true
            }),
        onMouseLeave: ()=>setIsHover({}),
        selected: openMenu,
        onRowClick: (0, _utils.isFileStatusCompleted)(item.status) ? ()=>actions.view.onClick(item) : undefined,
        mobileActions: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListMobilesActions.FilesListMobilesActions, {
            actions: mobileActions,
            item: item,
            onRemove: onRemove
        }),
        columnsWidth: columnsWidth,
        sx: isMobile ? {
            "& > div:first-of-type": {
                display: "flex",
                flexDirection: "column",
                flexGrow: 1,
                width: "calc(100% - 50px)"
            }
        } : {
            gap: 0
        },
        columns: [
            {
                node: isMobile ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListItemMobile.FilesListItemMobile, {
                    ownerName: ownerName,
                    shared: shared,
                    filterTerm: filterTerm,
                    missingMetaData: missingMetaData,
                    item: item,
                    selected: selected,
                    setSelected: setSelected,
                    showCompanyIcon: showCompanyIcon
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                    disabled: !(0, _utils.isFileStatusCompleted)(item.status),
                    checked: !!selected.find((i)=>i.id === item.id),
                    onClick: (ev)=>ev.stopPropagation(),
                    onChange: (ev, checked)=>{
                        setSelected((prev)=>checked ? [
                                ...prev,
                                {
                                    id: item.id,
                                    shared: shared !== null && shared !== void 0 ? shared : false
                                }
                            ] : prev.filter((i)=>i.id !== item.id));
                    }
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.FileIcon, {
                    extension: item.type
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        width: "100%",
                        display: "flex",
                        height: "100%",
                        alignItems: "center",
                        pr: 4
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            disabled: !!document,
                            tooltipText: item.name,
                            typographyProps: {
                                fontSize: 14,
                                fontWeight: isMobile ? 700 : 400
                            },
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthighlightwords.default, {
                                autoEscape: true,
                                highlightStyle: {
                                    color: theme.palette.primary.light
                                },
                                highlightTag: "span",
                                searchWords: [
                                    filterTerm
                                ],
                                textToHighlight: item.name
                            })
                        }),
                        showCompanyIcon && !shared ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ShareIcon, {
                            shared: true,
                            sx: {
                                mx: 1
                            }
                        }) : null
                    ]
                })
            },
            {
                node: shared ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1,
                        pr: 2
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.UserAvatar, {
                            isLoading: isLoading,
                            ownerName: ownerName,
                            imgUrl: orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.imageUrl,
                            hasImage: orgUser === null || orgUser === void 0 ? void 0 : orgUser.publicUserData.hasImage
                        }),
                        isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                            width: columnsWidth[3]
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            tooltipText: ownerName !== null && ownerName !== void 0 ? ownerName : "",
                            typographyProps: {
                                fontSize: 14
                            },
                            children: ownerName
                        })
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                    children: " "
                })
            },
            {
                text: (0, _files.getSizeAndUnit)(item.size, item.status === "error")
            },
            {
                text: (0, _utils.formatTime)(item.date)
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FileStatusCell.FileStatusCell, {
                    onActionClick: (action)=>{
                        if (action.id === "download") {
                            setIsHover({});
                        }
                    },
                    item: item,
                    rowIsHovered: isHover[item.id],
                    actions: [
                        ...desktopActions
                    ],
                    isOpenMenu: openMenu,
                    setIsOpenMenu: setOpenMenu,
                    onDelete: ()=>actions.remove.onClick(item)
                })
            }
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,