be1887921e2a0c2cbe7eef9d12165887
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FabExpanding", {
    enumerable: true,
    get: function() {
        return FabExpanding;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const FabExpanding = ({ xPosition = "right", animateTo, children, Icon, onClick, yOffset = 0, disabled, target, buttonVariant = "default" })=>{
    const trigger = (0, _core.useScrollTrigger)({
        target
    });
    const xPos = xPosition === "right" ? {
        right: 16
    } : {
        left: 24
    };
    const { safeArea } = (0, _hooks.useDeviceInfo)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Fab, {
        color: "primary",
        size: "large",
        variant: "extended",
        disabled: disabled,
        sx: (theme)=>_object_spread_props(_object_spread({}, xPos), {
                position: "fixed",
                bottom: `calc(24px + ${yOffset}px + ${safeArea.bottom})`,
                lineHeight: "14px",
                fontSize: theme.typography.body1.fontSize,
                textTransform: "none",
                transition: "0.1s width",
                height: 48,
                width: trigger ? 48 : animateTo !== null && animateTo !== void 0 ? animateTo : "auto",
                backgroundColor: buttonVariant === "text-outlined" ? "overlay.dragNDrop" : undefined,
                color: buttonVariant === "text-outlined" ? "primary.main" : undefined,
                fontWeight: buttonVariant === "text-outlined" ? 400 : undefined,
                "&.Mui-disabled": {
                    backgroundColor: "elevation.dp06"
                }
            }),
        onClick: onClick,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                children: Icon
            }),
            !trigger ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    ml: 1,
                    overflow: "hidden",
                    whiteSpace: "nowrap"
                },
                children: children
            }) : null
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvRmFiRXhwYW5kaW5nL0ZhYkV4cGFuZGluZy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW91c2VFdmVudEhhbmRsZXIsIFByb3BzV2l0aENoaWxkcmVuLCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgdXNlRGV2aWNlSW5mbyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyBCb3gsIEZhYiwgdXNlU2Nyb2xsVHJpZ2dlciB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcblxudHlwZSBQcm9wcyA9IFByb3BzV2l0aENoaWxkcmVuICYge1xuICB4UG9zaXRpb24/OiBcInJpZ2h0XCIgfCBcImxlZnRcIlxuICBJY29uOiBSZWFjdE5vZGVcbiAgYW5pbWF0ZVRvPzogbnVtYmVyXG4gIG9uQ2xpY2s/OiBNb3VzZUV2ZW50SGFuZGxlcjxIVE1MQnV0dG9uRWxlbWVudD5cbiAgeU9mZnNldD86IG51bWJlclxuICBkaXNhYmxlZD86IGJvb2xlYW5cbiAgdGFyZ2V0PzogTm9kZSB8IFdpbmRvd1xuICBidXR0b25WYXJpYW50PzogXCJkZWZhdWx0XCIgfCBcInRleHQtb3V0bGluZWRcIlxufVxuXG5jb25zdCBGYWJFeHBhbmRpbmcgPSAoe1xuICB4UG9zaXRpb24gPSBcInJpZ2h0XCIsXG4gIGFuaW1hdGVUbyxcbiAgY2hpbGRyZW4sXG4gIEljb24sXG4gIG9uQ2xpY2ssXG4gIHlPZmZzZXQgPSAwLFxuICBkaXNhYmxlZCxcbiAgdGFyZ2V0LFxuICBidXR0b25WYXJpYW50ID0gXCJkZWZhdWx0XCIsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB0cmlnZ2VyID0gdXNlU2Nyb2xsVHJpZ2dlcih7IHRhcmdldCB9KVxuICBjb25zdCB4UG9zID0geFBvc2l0aW9uID09PSBcInJpZ2h0XCIgPyB7IHJpZ2h0OiAxNiB9IDogeyBsZWZ0OiAyNCB9XG4gIGNvbnN0IHsgc2FmZUFyZWEgfSA9IHVzZURldmljZUluZm8oKVxuXG4gIHJldHVybiAoXG4gICAgPEZhYlxuICAgICAgY29sb3I9XCJwcmltYXJ5XCJcbiAgICAgIHNpemU9XCJsYXJnZVwiXG4gICAgICB2YXJpYW50PVwiZXh0ZW5kZWRcIlxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgc3g9e3RoZW1lID0+ICh7XG4gICAgICAgIC4uLnhQb3MsXG4gICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gICAgICAgIGJvdHRvbTogYGNhbGMoMjRweCArICR7eU9mZnNldH1weCArICR7c2FmZUFyZWEuYm90dG9tfSlgLFxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjE0cHhcIixcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEuZm9udFNpemUsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06IFwibm9uZVwiLFxuICAgICAgICB0cmFuc2l0aW9uOiBcIjAuMXMgd2lkdGhcIixcbiAgICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgICAgd2lkdGg6IHRyaWdnZXIgPyA0OCA6IGFuaW1hdGVUbyA/PyBcImF1dG9cIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBidXR0b25WYXJpYW50ID09PSBcInRleHQtb3V0bGluZWRcIiA/IFwib3ZlcmxheS5kcmFnTkRyb3BcIiA6IHVuZGVmaW5lZCxcbiAgICAgICAgY29sb3I6IGJ1dHRvblZhcmlhbnQgPT09IFwidGV4dC1vdXRsaW5lZFwiID8gXCJwcmltYXJ5Lm1haW5cIiA6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9udFdlaWdodDogYnV0dG9uVmFyaWFudCA9PT0gXCJ0ZXh0LW91dGxpbmVkXCIgPyA0MDAgOiB1bmRlZmluZWQsXG4gICAgICAgIFwiJi5NdWktZGlzYWJsZWRcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJlbGV2YXRpb24uZHAwNlwiLFxuICAgICAgICB9LFxuICAgICAgfSl9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgID5cbiAgICAgIDxCb3g+e0ljb259PC9Cb3g+XG4gICAgICB7IXRyaWdnZXIgPyAoXG4gICAgICAgIDxCb3ggc3g9e3sgbWw6IDEsIG92ZXJmbG93OiBcImhpZGRlblwiLCB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiIH19PntjaGlsZHJlbn08L0JveD5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvRmFiPlxuICApXG59XG5cbmV4cG9ydCB7IEZhYkV4cGFuZGluZyB9XG4iXSwibmFtZXMiOlsiRmFiRXhwYW5kaW5nIiwieFBvc2l0aW9uIiwiYW5pbWF0ZVRvIiwiY2hpbGRyZW4iLCJJY29uIiwib25DbGljayIsInlPZmZzZXQiLCJkaXNhYmxlZCIsInRhcmdldCIsImJ1dHRvblZhcmlhbnQiLCJ0cmlnZ2VyIiwidXNlU2Nyb2xsVHJpZ2dlciIsInhQb3MiLCJyaWdodCIsImxlZnQiLCJzYWZlQXJlYSIsInVzZURldmljZUluZm8iLCJGYWIiLCJjb2xvciIsInNpemUiLCJ2YXJpYW50Iiwic3giLCJ0aGVtZSIsInBvc2l0aW9uIiwiYm90dG9tIiwibGluZUhlaWdodCIsImZvbnRTaXplIiwidHlwb2dyYXBoeSIsImJvZHkxIiwidGV4dFRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJoZWlnaHQiLCJ3aWR0aCIsImJhY2tncm91bmRDb2xvciIsInVuZGVmaW5lZCIsImZvbnRXZWlnaHQiLCJCb3giLCJtbCIsIm92ZXJmbG93Iiwid2hpdGVTcGFjZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBK0RTQTs7O2VBQUFBOzs7O3VCQTlEcUI7c0JBQ2E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYTNDLE1BQU1BLGVBQWUsQ0FBQyxFQUNwQkMsWUFBWSxPQUFPLEVBQ25CQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUkMsSUFBSSxFQUNKQyxPQUFPLEVBQ1BDLFVBQVUsQ0FBQyxFQUNYQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsZ0JBQWdCLFNBQVMsRUFDbkI7SUFDTixNQUFNQyxVQUFVQyxJQUFBQSxzQkFBZ0IsRUFBQztRQUFFSDtJQUFPO0lBQzFDLE1BQU1JLE9BQU9YLGNBQWMsVUFBVTtRQUFFWSxPQUFPO0lBQUcsSUFBSTtRQUFFQyxNQUFNO0lBQUc7SUFDaEUsTUFBTSxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsSUFBQUEsb0JBQWE7SUFFbEMscUJBQ0Usc0JBQUNDLFNBQUc7UUFDRkMsT0FBTTtRQUNOQyxNQUFLO1FBQ0xDLFNBQVE7UUFDUmIsVUFBVUE7UUFDVmMsSUFBSUMsQ0FBQUEsUUFBVSx3Q0FDVFY7Z0JBQ0hXLFVBQVU7Z0JBQ1ZDLFFBQVEsQ0FBQyxZQUFZLEVBQUVsQixRQUFRLEtBQUssRUFBRVMsU0FBU1MsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeERDLFlBQVk7Z0JBQ1pDLFVBQVVKLE1BQU1LLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDRixRQUFRO2dCQUN6Q0csZUFBZTtnQkFDZkMsWUFBWTtnQkFDWkMsUUFBUTtnQkFDUkMsT0FBT3RCLFVBQVUsS0FBS1Isc0JBQUFBLHVCQUFBQSxZQUFhO2dCQUNuQytCLGlCQUFpQnhCLGtCQUFrQixrQkFBa0Isc0JBQXNCeUI7Z0JBQzNFaEIsT0FBT1Qsa0JBQWtCLGtCQUFrQixpQkFBaUJ5QjtnQkFDNURDLFlBQVkxQixrQkFBa0Isa0JBQWtCLE1BQU15QjtnQkFDdEQsa0JBQWtCO29CQUNoQkQsaUJBQWlCO2dCQUNuQjs7UUFFRjVCLFNBQVNBOzswQkFFVCxxQkFBQytCLFNBQUc7MEJBQUVoQzs7WUFDTCxDQUFDTSx3QkFDQSxxQkFBQzBCLFNBQUc7Z0JBQUNmLElBQUk7b0JBQUVnQixJQUFJO29CQUFHQyxVQUFVO29CQUFVQyxZQUFZO2dCQUFTOzBCQUFJcEM7aUJBQzdEOzs7QUFHViJ9