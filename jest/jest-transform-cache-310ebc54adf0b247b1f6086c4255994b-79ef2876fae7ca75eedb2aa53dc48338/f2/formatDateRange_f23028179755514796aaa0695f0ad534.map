{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/Datepicker/utils/formatDateRange.ts"],"sourcesContent":["import { RpqlDateFilter } from \"@rp/common/api-types\"\n\ntype DatePickerOptions<T extends string = string> = Record<\n  T,\n  { label: string; start: Date; end: Date }\n>\n\ntype InitialDates = {\n  start: Date\n  end: Date\n  label: string\n}\ntype FormatInitialDates = (\n  date: Exclude<RpqlDateFilter, null>,\n  options: DatePickerOptions,\n) => InitialDates\n\nconst MONTH_FORMAT = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n]\n\n// The date range is from 00:00 of the startDate to 00:00 of endDate + 1\nconst formatDatesForQuery = ({ startDate, endDate }: { startDate: Date; endDate: Date }) => {\n  /* Formatting date */\n  const initialDate = new Date(startDate.getTime())\n  const endingDate = new Date(endDate.getTime())\n  const initialFilter = new Date(initialDate.setHours(initialDate.getTimezoneOffset() / -60, 0, 0))\n    .toISOString()\n    .split(\".\")[0]\n  const endingFilter = new Date(\n    endingDate.setHours(24 + initialDate.getTimezoneOffset() / -60, 0, 0),\n  )\n    .toISOString()\n    .split(\".\")[0]\n  return { start: initialFilter, end: endingFilter }\n}\n\n// When we want to get the Date back, remember to substract a day to formattedEndDate\nconst formatDatesFromQuery = ({\n  formattedStartDate,\n  formattedEndDate,\n}: {\n  formattedStartDate: string\n  formattedEndDate: string\n}) => {\n  const actualEnd = new Date(formattedEndDate)\n  actualEnd.setDate(actualEnd.getDate() - 1)\n\n  return {\n    start: new Date(formattedStartDate),\n    end: actualEnd,\n  }\n}\n\nconst formatDateLabel = (start: string | Date, end: string | Date) => {\n  const startDate = new Date(start)\n  const endDate = new Date(end)\n\n  const formattedStartDate = `${\n    MONTH_FORMAT[startDate.getMonth()]\n  } ${startDate.getDate()} ${startDate.getFullYear()}`\n  const formattedEndDate = `${\n    MONTH_FORMAT[endDate.getMonth()]\n  } ${endDate.getDate()} ${endDate.getFullYear()}`\n\n  if (formattedStartDate === formattedEndDate || endDate === null) {\n    return formattedStartDate\n  } else {\n    return `${formattedStartDate} - ${formattedEndDate}`\n  }\n}\n\nconst formatInitialDates: FormatInitialDates = (\n  date: Exclude<RpqlDateFilter, null>,\n  options: DatePickerOptions,\n) => {\n  if (Array.isArray(date.value)) {\n    const [startString, endString] = date.value\n\n    const { start, end } = formatDatesFromQuery({\n      formattedStartDate: startString,\n      formattedEndDate: endString,\n    })\n\n    return {\n      start,\n      end,\n      label: formatDateLabel(start, end),\n    }\n  }\n  return options[date.value]\n}\n\nconst openToDate = (endDate: Date | null) => {\n  if (!endDate) return undefined\n  //  Open it 30 days before the endDate to display it in the calendar on the right side\n  const ThirtyDaysBefore = new Date(endDate.getTime() - 30 * 24 * 60 * 60 * 1000)\n  return ThirtyDaysBefore\n}\n\nexport {\n  formatDatesForQuery,\n  formatDatesFromQuery,\n  formatDateLabel,\n  formatInitialDates,\n  openToDate,\n}\n\nexport type { InitialDates, DatePickerOptions }\n"],"names":["formatDateLabel","formatDatesForQuery","formatDatesFromQuery","formatInitialDates","openToDate","MONTH_FORMAT","startDate","endDate","initialDate","Date","getTime","endingDate","initialFilter","setHours","getTimezoneOffset","toISOString","split","endingFilter","start","end","formattedStartDate","formattedEndDate","actualEnd","setDate","getDate","getMonth","getFullYear","date","options","Array","isArray","value","startString","endString","label","undefined","ThirtyDaysBefore"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAkHEA,eAAe;eAAfA;;IAFAC,mBAAmB;eAAnBA;;IACAC,oBAAoB;eAApBA;;IAEAC,kBAAkB;eAAlBA;;IACAC,UAAU;eAAVA;;;AAnGF,MAAMC,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,wEAAwE;AACxE,MAAMJ,sBAAsB,CAAC,EAAEK,SAAS,EAAEC,OAAO,EAAsC;IACrF,mBAAmB,GACnB,MAAMC,cAAc,IAAIC,KAAKH,UAAUI,OAAO;IAC9C,MAAMC,aAAa,IAAIF,KAAKF,QAAQG,OAAO;IAC3C,MAAME,gBAAgB,IAAIH,KAAKD,YAAYK,QAAQ,CAACL,YAAYM,iBAAiB,KAAK,CAAC,IAAI,GAAG,IAC3FC,WAAW,GACXC,KAAK,CAAC,IAAI,CAAC,EAAE;IAChB,MAAMC,eAAe,IAAIR,KACvBE,WAAWE,QAAQ,CAAC,KAAKL,YAAYM,iBAAiB,KAAK,CAAC,IAAI,GAAG,IAElEC,WAAW,GACXC,KAAK,CAAC,IAAI,CAAC,EAAE;IAChB,OAAO;QAAEE,OAAON;QAAeO,KAAKF;IAAa;AACnD;AAEA,qFAAqF;AACrF,MAAMf,uBAAuB,CAAC,EAC5BkB,kBAAkB,EAClBC,gBAAgB,EAIjB;IACC,MAAMC,YAAY,IAAIb,KAAKY;IAC3BC,UAAUC,OAAO,CAACD,UAAUE,OAAO,KAAK;IAExC,OAAO;QACLN,OAAO,IAAIT,KAAKW;QAChBD,KAAKG;IACP;AACF;AAEA,MAAMtB,kBAAkB,CAACkB,OAAsBC;IAC7C,MAAMb,YAAY,IAAIG,KAAKS;IAC3B,MAAMX,UAAU,IAAIE,KAAKU;IAEzB,MAAMC,qBAAqB,CAAC,EAC1Bf,YAAY,CAACC,UAAUmB,QAAQ,GAAG,CACnC,CAAC,EAAEnB,UAAUkB,OAAO,GAAG,CAAC,EAAElB,UAAUoB,WAAW,GAAG,CAAC;IACpD,MAAML,mBAAmB,CAAC,EACxBhB,YAAY,CAACE,QAAQkB,QAAQ,GAAG,CACjC,CAAC,EAAElB,QAAQiB,OAAO,GAAG,CAAC,EAAEjB,QAAQmB,WAAW,GAAG,CAAC;IAEhD,IAAIN,uBAAuBC,oBAAoBd,YAAY,MAAM;QAC/D,OAAOa;IACT,OAAO;QACL,OAAO,CAAC,EAAEA,mBAAmB,GAAG,EAAEC,iBAAiB,CAAC;IACtD;AACF;AAEA,MAAMlB,qBAAyC,CAC7CwB,MACAC;IAEA,IAAIC,MAAMC,OAAO,CAACH,KAAKI,KAAK,GAAG;QAC7B,MAAM,CAACC,aAAaC,UAAU,GAAGN,KAAKI,KAAK;QAE3C,MAAM,EAAEb,KAAK,EAAEC,GAAG,EAAE,GAAGjB,qBAAqB;YAC1CkB,oBAAoBY;YACpBX,kBAAkBY;QACpB;QAEA,OAAO;YACLf;YACAC;YACAe,OAAOlC,gBAAgBkB,OAAOC;QAChC;IACF;IACA,OAAOS,OAAO,CAACD,KAAKI,KAAK,CAAC;AAC5B;AAEA,MAAM3B,aAAa,CAACG;IAClB,IAAI,CAACA,SAAS,OAAO4B;IACrB,sFAAsF;IACtF,MAAMC,mBAAmB,IAAI3B,KAAKF,QAAQG,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK;IAC1E,OAAO0B;AACT"}