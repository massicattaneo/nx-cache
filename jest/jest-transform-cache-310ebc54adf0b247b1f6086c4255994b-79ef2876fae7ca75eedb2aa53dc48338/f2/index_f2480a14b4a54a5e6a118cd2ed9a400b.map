{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-factory-title/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines canâ€™t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n"],"names":["factoryTitle","effects","ok","nok","type","markerType","stringType","marker","start","code","enter","consume","exit","begin","atBreak","markdownLineEnding","factorySpace","contentType","inside","escape"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAmCeA;;;eAAAA;;;uCAjCW;wCACM;AAgC1B,SAASA,aAAaC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,UAAU;IACzE,8BAA8B,GAC9B,IAAIC;IACJ,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,MAAMC,IAAI;QACjB,IAAIA,SAAS,MAAMA,SAAS,MAAMA,SAAS,IAAI;YAC7CR,QAAQS,KAAK,CAACN;YACdH,QAAQS,KAAK,CAACL;YACdJ,QAAQU,OAAO,CAACF;YAChBR,QAAQW,IAAI,CAACP;YACbE,SAASE,SAAS,KAAK,KAAKA;YAC5B,OAAOI;QACT;QACA,OAAOV,IAAIM;IACb;IAEA;;;;;;;;;;;GAWC,GACD,SAASI,MAAMJ,IAAI;QACjB,IAAIA,SAASF,QAAQ;YACnBN,QAAQS,KAAK,CAACL;YACdJ,QAAQU,OAAO,CAACF;YAChBR,QAAQW,IAAI,CAACP;YACbJ,QAAQW,IAAI,CAACR;YACb,OAAOF;QACT;QACAD,QAAQS,KAAK,CAACJ;QACd,OAAOQ,QAAQL;IACjB;IAEA;;;;;;;;;GASC,GACD,SAASK,QAAQL,IAAI;QACnB,IAAIA,SAASF,QAAQ;YACnBN,QAAQW,IAAI,CAACN;YACb,OAAOO,MAAMN;QACf;QACA,IAAIE,SAAS,MAAM;YACjB,OAAON,IAAIM;QACb;QAEA,4CAA4C;QAC5C,IAAIM,IAAAA,0CAAkB,EAACN,OAAO;YAC5B,uDAAuD;YACvDR,QAAQS,KAAK,CAAC;YACdT,QAAQU,OAAO,CAACF;YAChBR,QAAQW,IAAI,CAAC;YACb,OAAOI,IAAAA,mCAAY,EAACf,SAASa,SAAS;QACxC;QACAb,QAAQS,KAAK,CAAC,eAAe;YAC3BO,aAAa;QACf;QACA,OAAOC,OAAOT;IAChB;IAEA;;;;GAIC,GACD,SAASS,OAAOT,IAAI;QAClB,IAAIA,SAASF,UAAUE,SAAS,QAAQM,IAAAA,0CAAkB,EAACN,OAAO;YAChER,QAAQW,IAAI,CAAC;YACb,OAAOE,QAAQL;QACjB;QACAR,QAAQU,OAAO,CAACF;QAChB,OAAOA,SAAS,KAAKU,SAASD;IAChC;IAEA;;;;;;;;;GASC,GACD,SAASC,OAAOV,IAAI;QAClB,IAAIA,SAASF,UAAUE,SAAS,IAAI;YAClCR,QAAQU,OAAO,CAACF;YAChB,OAAOS;QACT;QACA,OAAOA,OAAOT;IAChB;AACF"}