36d82594dc7aa9a7f57a8578ec962a86
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatDateLabel: function() {
        return formatDateLabel;
    },
    formatDatesForQuery: function() {
        return formatDatesForQuery;
    },
    formatDatesFromQuery: function() {
        return formatDatesFromQuery;
    },
    formatInitialDates: function() {
        return formatInitialDates;
    },
    openToDate: function() {
        return openToDate;
    }
});
const MONTH_FORMAT = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// The date range is from 00:00 of the startDate to 00:00 of endDate + 1
const formatDatesForQuery = ({ startDate, endDate })=>{
    /* Formatting date */ const initialDate = new Date(startDate.getTime());
    const endingDate = new Date(endDate.getTime());
    const initialFilter = new Date(initialDate.setHours(initialDate.getTimezoneOffset() / -60, 0, 0)).toISOString().split(".")[0];
    const endingFilter = new Date(endingDate.setHours(24 + initialDate.getTimezoneOffset() / -60, 0, 0)).toISOString().split(".")[0];
    return {
        start: initialFilter,
        end: endingFilter
    };
};
// When we want to get the Date back, remember to substract a day to formattedEndDate
const formatDatesFromQuery = ({ formattedStartDate, formattedEndDate })=>{
    const actualEnd = new Date(formattedEndDate);
    actualEnd.setDate(actualEnd.getDate() - 1);
    return {
        start: new Date(formattedStartDate),
        end: actualEnd
    };
};
const formatDateLabel = (start, end)=>{
    const startDate = new Date(start);
    const endDate = new Date(end);
    const formattedStartDate = `${MONTH_FORMAT[startDate.getMonth()]} ${startDate.getDate()} ${startDate.getFullYear()}`;
    const formattedEndDate = `${MONTH_FORMAT[endDate.getMonth()]} ${endDate.getDate()} ${endDate.getFullYear()}`;
    if (formattedStartDate === formattedEndDate || endDate === null) {
        return formattedStartDate;
    } else {
        return `${formattedStartDate} - ${formattedEndDate}`;
    }
};
const formatInitialDates = (date, options)=>{
    if (Array.isArray(date.value)) {
        const [startString, endString] = date.value;
        const { start, end } = formatDatesFromQuery({
            formattedStartDate: startString,
            formattedEndDate: endString
        });
        return {
            start,
            end,
            label: formatDateLabel(start, end)
        };
    }
    return options[date.value];
};
const openToDate = (endDate)=>{
    if (!endDate) return undefined;
    //  Open it 30 days before the endDate to display it in the calendar on the right side
    const ThirtyDaysBefore = new Date(endDate.getTime() - 30 * 24 * 60 * 60 * 1000);
    return ThirtyDaysBefore;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvRGF0ZXBpY2tlci91dGlscy9mb3JtYXREYXRlUmFuZ2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnBxbERhdGVGaWx0ZXIgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuXG50eXBlIERhdGVQaWNrZXJPcHRpb25zPFQgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+ID0gUmVjb3JkPFxuICBULFxuICB7IGxhYmVsOiBzdHJpbmc7IHN0YXJ0OiBEYXRlOyBlbmQ6IERhdGUgfVxuPlxuXG50eXBlIEluaXRpYWxEYXRlcyA9IHtcbiAgc3RhcnQ6IERhdGVcbiAgZW5kOiBEYXRlXG4gIGxhYmVsOiBzdHJpbmdcbn1cbnR5cGUgRm9ybWF0SW5pdGlhbERhdGVzID0gKFxuICBkYXRlOiBFeGNsdWRlPFJwcWxEYXRlRmlsdGVyLCBudWxsPixcbiAgb3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnMsXG4pID0+IEluaXRpYWxEYXRlc1xuXG5jb25zdCBNT05USF9GT1JNQVQgPSBbXG4gIFwiSmFuXCIsXG4gIFwiRmViXCIsXG4gIFwiTWFyXCIsXG4gIFwiQXByXCIsXG4gIFwiTWF5XCIsXG4gIFwiSnVuXCIsXG4gIFwiSnVsXCIsXG4gIFwiQXVnXCIsXG4gIFwiU2VwXCIsXG4gIFwiT2N0XCIsXG4gIFwiTm92XCIsXG4gIFwiRGVjXCIsXG5dXG5cbi8vIFRoZSBkYXRlIHJhbmdlIGlzIGZyb20gMDA6MDAgb2YgdGhlIHN0YXJ0RGF0ZSB0byAwMDowMCBvZiBlbmREYXRlICsgMVxuY29uc3QgZm9ybWF0RGF0ZXNGb3JRdWVyeSA9ICh7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9OiB7IHN0YXJ0RGF0ZTogRGF0ZTsgZW5kRGF0ZTogRGF0ZSB9KSA9PiB7XG4gIC8qIEZvcm1hdHRpbmcgZGF0ZSAqL1xuICBjb25zdCBpbml0aWFsRGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZS5nZXRUaW1lKCkpXG4gIGNvbnN0IGVuZGluZ0RhdGUgPSBuZXcgRGF0ZShlbmREYXRlLmdldFRpbWUoKSlcbiAgY29uc3QgaW5pdGlhbEZpbHRlciA9IG5ldyBEYXRlKGluaXRpYWxEYXRlLnNldEhvdXJzKGluaXRpYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLyAtNjAsIDAsIDApKVxuICAgIC50b0lTT1N0cmluZygpXG4gICAgLnNwbGl0KFwiLlwiKVswXVxuICBjb25zdCBlbmRpbmdGaWx0ZXIgPSBuZXcgRGF0ZShcbiAgICBlbmRpbmdEYXRlLnNldEhvdXJzKDI0ICsgaW5pdGlhbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIC02MCwgMCwgMCksXG4gIClcbiAgICAudG9JU09TdHJpbmcoKVxuICAgIC5zcGxpdChcIi5cIilbMF1cbiAgcmV0dXJuIHsgc3RhcnQ6IGluaXRpYWxGaWx0ZXIsIGVuZDogZW5kaW5nRmlsdGVyIH1cbn1cblxuLy8gV2hlbiB3ZSB3YW50IHRvIGdldCB0aGUgRGF0ZSBiYWNrLCByZW1lbWJlciB0byBzdWJzdHJhY3QgYSBkYXkgdG8gZm9ybWF0dGVkRW5kRGF0ZVxuY29uc3QgZm9ybWF0RGF0ZXNGcm9tUXVlcnkgPSAoe1xuICBmb3JtYXR0ZWRTdGFydERhdGUsXG4gIGZvcm1hdHRlZEVuZERhdGUsXG59OiB7XG4gIGZvcm1hdHRlZFN0YXJ0RGF0ZTogc3RyaW5nXG4gIGZvcm1hdHRlZEVuZERhdGU6IHN0cmluZ1xufSkgPT4ge1xuICBjb25zdCBhY3R1YWxFbmQgPSBuZXcgRGF0ZShmb3JtYXR0ZWRFbmREYXRlKVxuICBhY3R1YWxFbmQuc2V0RGF0ZShhY3R1YWxFbmQuZ2V0RGF0ZSgpIC0gMSlcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBuZXcgRGF0ZShmb3JtYXR0ZWRTdGFydERhdGUpLFxuICAgIGVuZDogYWN0dWFsRW5kLFxuICB9XG59XG5cbmNvbnN0IGZvcm1hdERhdGVMYWJlbCA9IChzdGFydDogc3RyaW5nIHwgRGF0ZSwgZW5kOiBzdHJpbmcgfCBEYXRlKSA9PiB7XG4gIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KVxuICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoZW5kKVxuXG4gIGNvbnN0IGZvcm1hdHRlZFN0YXJ0RGF0ZSA9IGAke1xuICAgIE1PTlRIX0ZPUk1BVFtzdGFydERhdGUuZ2V0TW9udGgoKV1cbiAgfSAke3N0YXJ0RGF0ZS5nZXREYXRlKCl9ICR7c3RhcnREYXRlLmdldEZ1bGxZZWFyKCl9YFxuICBjb25zdCBmb3JtYXR0ZWRFbmREYXRlID0gYCR7XG4gICAgTU9OVEhfRk9STUFUW2VuZERhdGUuZ2V0TW9udGgoKV1cbiAgfSAke2VuZERhdGUuZ2V0RGF0ZSgpfSAke2VuZERhdGUuZ2V0RnVsbFllYXIoKX1gXG5cbiAgaWYgKGZvcm1hdHRlZFN0YXJ0RGF0ZSA9PT0gZm9ybWF0dGVkRW5kRGF0ZSB8fCBlbmREYXRlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZvcm1hdHRlZFN0YXJ0RGF0ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHtmb3JtYXR0ZWRTdGFydERhdGV9IC0gJHtmb3JtYXR0ZWRFbmREYXRlfWBcbiAgfVxufVxuXG5jb25zdCBmb3JtYXRJbml0aWFsRGF0ZXM6IEZvcm1hdEluaXRpYWxEYXRlcyA9IChcbiAgZGF0ZTogRXhjbHVkZTxScHFsRGF0ZUZpbHRlciwgbnVsbD4sXG4gIG9wdGlvbnM6IERhdGVQaWNrZXJPcHRpb25zLFxuKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGUudmFsdWUpKSB7XG4gICAgY29uc3QgW3N0YXJ0U3RyaW5nLCBlbmRTdHJpbmddID0gZGF0ZS52YWx1ZVxuXG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBmb3JtYXREYXRlc0Zyb21RdWVyeSh7XG4gICAgICBmb3JtYXR0ZWRTdGFydERhdGU6IHN0YXJ0U3RyaW5nLFxuICAgICAgZm9ybWF0dGVkRW5kRGF0ZTogZW5kU3RyaW5nLFxuICAgIH0pXG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQsXG4gICAgICBlbmQsXG4gICAgICBsYWJlbDogZm9ybWF0RGF0ZUxhYmVsKHN0YXJ0LCBlbmQpLFxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1tkYXRlLnZhbHVlXVxufVxuXG5jb25zdCBvcGVuVG9EYXRlID0gKGVuZERhdGU6IERhdGUgfCBudWxsKSA9PiB7XG4gIGlmICghZW5kRGF0ZSkgcmV0dXJuIHVuZGVmaW5lZFxuICAvLyAgT3BlbiBpdCAzMCBkYXlzIGJlZm9yZSB0aGUgZW5kRGF0ZSB0byBkaXNwbGF5IGl0IGluIHRoZSBjYWxlbmRhciBvbiB0aGUgcmlnaHQgc2lkZVxuICBjb25zdCBUaGlydHlEYXlzQmVmb3JlID0gbmV3IERhdGUoZW5kRGF0ZS5nZXRUaW1lKCkgLSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDApXG4gIHJldHVybiBUaGlydHlEYXlzQmVmb3JlXG59XG5cbmV4cG9ydCB7XG4gIGZvcm1hdERhdGVzRm9yUXVlcnksXG4gIGZvcm1hdERhdGVzRnJvbVF1ZXJ5LFxuICBmb3JtYXREYXRlTGFiZWwsXG4gIGZvcm1hdEluaXRpYWxEYXRlcyxcbiAgb3BlblRvRGF0ZSxcbn1cblxuZXhwb3J0IHR5cGUgeyBJbml0aWFsRGF0ZXMsIERhdGVQaWNrZXJPcHRpb25zIH1cbiJdLCJuYW1lcyI6WyJmb3JtYXREYXRlTGFiZWwiLCJmb3JtYXREYXRlc0ZvclF1ZXJ5IiwiZm9ybWF0RGF0ZXNGcm9tUXVlcnkiLCJmb3JtYXRJbml0aWFsRGF0ZXMiLCJvcGVuVG9EYXRlIiwiTU9OVEhfRk9STUFUIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImluaXRpYWxEYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJlbmRpbmdEYXRlIiwiaW5pdGlhbEZpbHRlciIsInNldEhvdXJzIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwiZW5kaW5nRmlsdGVyIiwic3RhcnQiLCJlbmQiLCJmb3JtYXR0ZWRTdGFydERhdGUiLCJmb3JtYXR0ZWRFbmREYXRlIiwiYWN0dWFsRW5kIiwic2V0RGF0ZSIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZGF0ZSIsIm9wdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWx1ZSIsInN0YXJ0U3RyaW5nIiwiZW5kU3RyaW5nIiwibGFiZWwiLCJ1bmRlZmluZWQiLCJUaGlydHlEYXlzQmVmb3JlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWtIRUEsZUFBZTtlQUFmQTs7SUFGQUMsbUJBQW1CO2VBQW5CQTs7SUFDQUMsb0JBQW9CO2VBQXBCQTs7SUFFQUMsa0JBQWtCO2VBQWxCQTs7SUFDQUMsVUFBVTtlQUFWQTs7O0FBbkdGLE1BQU1DLGVBQWU7SUFDbkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCx3RUFBd0U7QUFDeEUsTUFBTUosc0JBQXNCLENBQUMsRUFBRUssU0FBUyxFQUFFQyxPQUFPLEVBQXNDO0lBQ3JGLG1CQUFtQixHQUNuQixNQUFNQyxjQUFjLElBQUlDLEtBQUtILFVBQVVJLE9BQU87SUFDOUMsTUFBTUMsYUFBYSxJQUFJRixLQUFLRixRQUFRRyxPQUFPO0lBQzNDLE1BQU1FLGdCQUFnQixJQUFJSCxLQUFLRCxZQUFZSyxRQUFRLENBQUNMLFlBQVlNLGlCQUFpQixLQUFLLENBQUMsSUFBSSxHQUFHLElBQzNGQyxXQUFXLEdBQ1hDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNoQixNQUFNQyxlQUFlLElBQUlSLEtBQ3ZCRSxXQUFXRSxRQUFRLENBQUMsS0FBS0wsWUFBWU0saUJBQWlCLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFFbEVDLFdBQVcsR0FDWEMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2hCLE9BQU87UUFBRUUsT0FBT047UUFBZU8sS0FBS0Y7SUFBYTtBQUNuRDtBQUVBLHFGQUFxRjtBQUNyRixNQUFNZix1QkFBdUIsQ0FBQyxFQUM1QmtCLGtCQUFrQixFQUNsQkMsZ0JBQWdCLEVBSWpCO0lBQ0MsTUFBTUMsWUFBWSxJQUFJYixLQUFLWTtJQUMzQkMsVUFBVUMsT0FBTyxDQUFDRCxVQUFVRSxPQUFPLEtBQUs7SUFFeEMsT0FBTztRQUNMTixPQUFPLElBQUlULEtBQUtXO1FBQ2hCRCxLQUFLRztJQUNQO0FBQ0Y7QUFFQSxNQUFNdEIsa0JBQWtCLENBQUNrQixPQUFzQkM7SUFDN0MsTUFBTWIsWUFBWSxJQUFJRyxLQUFLUztJQUMzQixNQUFNWCxVQUFVLElBQUlFLEtBQUtVO0lBRXpCLE1BQU1DLHFCQUFxQixDQUFDLEVBQzFCZixZQUFZLENBQUNDLFVBQVVtQixRQUFRLEdBQUcsQ0FDbkMsQ0FBQyxFQUFFbkIsVUFBVWtCLE9BQU8sR0FBRyxDQUFDLEVBQUVsQixVQUFVb0IsV0FBVyxHQUFHLENBQUM7SUFDcEQsTUFBTUwsbUJBQW1CLENBQUMsRUFDeEJoQixZQUFZLENBQUNFLFFBQVFrQixRQUFRLEdBQUcsQ0FDakMsQ0FBQyxFQUFFbEIsUUFBUWlCLE9BQU8sR0FBRyxDQUFDLEVBQUVqQixRQUFRbUIsV0FBVyxHQUFHLENBQUM7SUFFaEQsSUFBSU4sdUJBQXVCQyxvQkFBb0JkLFlBQVksTUFBTTtRQUMvRCxPQUFPYTtJQUNULE9BQU87UUFDTCxPQUFPLENBQUMsRUFBRUEsbUJBQW1CLEdBQUcsRUFBRUMsaUJBQWlCLENBQUM7SUFDdEQ7QUFDRjtBQUVBLE1BQU1sQixxQkFBeUMsQ0FDN0N3QixNQUNBQztJQUVBLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0gsS0FBS0ksS0FBSyxHQUFHO1FBQzdCLE1BQU0sQ0FBQ0MsYUFBYUMsVUFBVSxHQUFHTixLQUFLSSxLQUFLO1FBRTNDLE1BQU0sRUFBRWIsS0FBSyxFQUFFQyxHQUFHLEVBQUUsR0FBR2pCLHFCQUFxQjtZQUMxQ2tCLG9CQUFvQlk7WUFDcEJYLGtCQUFrQlk7UUFDcEI7UUFFQSxPQUFPO1lBQ0xmO1lBQ0FDO1lBQ0FlLE9BQU9sQyxnQkFBZ0JrQixPQUFPQztRQUNoQztJQUNGO0lBQ0EsT0FBT1MsT0FBTyxDQUFDRCxLQUFLSSxLQUFLLENBQUM7QUFDNUI7QUFFQSxNQUFNM0IsYUFBYSxDQUFDRztJQUNsQixJQUFJLENBQUNBLFNBQVMsT0FBTzRCO0lBQ3JCLHNGQUFzRjtJQUN0RixNQUFNQyxtQkFBbUIsSUFBSTNCLEtBQUtGLFFBQVFHLE9BQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0lBQzFFLE9BQU8wQjtBQUNUIn0=