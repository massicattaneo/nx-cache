c08461965f2fa58dbeaab44462e334ab
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDocumentsImages", {
    enumerable: true,
    get: function() {
        return useDocumentsImages;
    }
});
const _react = require("react");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const useDocumentsImages = (ids)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [isFetching, setIsFetching] = (0, _react.useState)(false);
    const { url } = (0, _utils.getApiEnvironmentConfig)();
    (0, _react.useEffect)(()=>{
        const initialLoading = !!ids.map((id)=>queryClient.getQueryData([
                "documents-images",
                id
            ])).filter((val)=>!val).length || ids.length === 0;
        setIsLoading(initialLoading);
    }, [
        ids,
        queryClient
    ]);
    const data = (0, _react.useMemo)(()=>{
        const init = {};
        if (isLoading) return {};
        return ids.reduce((acc, id)=>{
            return _object_spread_props(_object_spread({}, acc), {
                [id]: queryClient.getQueryData([
                    "documents-images",
                    id
                ])
            });
        }, init);
    }, [
        ids,
        isLoading,
        queryClient
    ]);
    if (isLoading && !isFetching && ids.length > 0) {
        setIsFetching(true);
        _axiosclient.axiosClient.post(`${url}/document/images`, {
            ids
        }).then((res)=>{
            ids.forEach((id)=>{
                var _res_data_id;
                queryClient.setQueryData([
                    "documents-images",
                    id
                ], (_res_data_id = res.data[id]) !== null && _res_data_id !== void 0 ? _res_data_id : []);
            });
            setIsFetching(false);
            setIsLoading(false);
        });
    }
    return {
        isLoading,
        data
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2RvY3VtZW50LWltYWdlcy9zcmMvdXNlRG9jdW1lbnRJbWFnZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBnZXRBcGlFbnZpcm9ubWVudENvbmZpZyB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IGF4aW9zQ2xpZW50IH0gZnJvbSBcIkBycC9yZWFjdC9heGlvcy1jbGllbnRcIlxuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcblxudHlwZSBSZXQgPSBSZWNvcmQ8c3RyaW5nLCBBcnJheTxzdHJpbmc+IHwgdW5kZWZpbmVkPlxuXG5jb25zdCB1c2VEb2N1bWVudHNJbWFnZXMgPSAoaWRzOiBBcnJheTxzdHJpbmc+KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKVxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2lzRmV0Y2hpbmcsIHNldElzRmV0Y2hpbmddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgdXJsIH0gPSBnZXRBcGlFbnZpcm9ubWVudENvbmZpZygpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsTG9hZGluZyA9XG4gICAgICAhIWlkc1xuICAgICAgICAubWFwKGlkID0+IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YTxBcnJheTxzdHJpbmc+PihbXCJkb2N1bWVudHMtaW1hZ2VzXCIsIGlkXSkpXG4gICAgICAgIC5maWx0ZXIodmFsID0+ICF2YWwpLmxlbmd0aCB8fCBpZHMubGVuZ3RoID09PSAwXG4gICAgc2V0SXNMb2FkaW5nKGluaXRpYWxMb2FkaW5nKVxuICB9LCBbaWRzLCBxdWVyeUNsaWVudF0pXG5cbiAgY29uc3QgZGF0YSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGluaXQ6IFJldCA9IHt9XG4gICAgaWYgKGlzTG9hZGluZykgcmV0dXJuIHt9XG4gICAgcmV0dXJuIGlkcy5yZWR1Y2UoKGFjYywgaWQpID0+IHtcbiAgICAgIHJldHVybiB7IC4uLmFjYywgW2lkXTogcXVlcnlDbGllbnQuZ2V0UXVlcnlEYXRhPEFycmF5PHN0cmluZz4+KFtcImRvY3VtZW50cy1pbWFnZXNcIiwgaWRdKSB9XG4gICAgfSwgaW5pdClcbiAgfSwgW2lkcywgaXNMb2FkaW5nLCBxdWVyeUNsaWVudF0pXG5cbiAgaWYgKGlzTG9hZGluZyAmJiAhaXNGZXRjaGluZyAmJiBpZHMubGVuZ3RoID4gMCkge1xuICAgIHNldElzRmV0Y2hpbmcodHJ1ZSlcbiAgICBheGlvc0NsaWVudC5wb3N0PFJldD4oYCR7dXJsfS9kb2N1bWVudC9pbWFnZXNgLCB7IGlkcyB9KS50aGVuKHJlcyA9PiB7XG4gICAgICBpZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShbXCJkb2N1bWVudHMtaW1hZ2VzXCIsIGlkXSwgcmVzLmRhdGFbaWRdID8/IFtdKVxuICAgICAgfSlcbiAgICAgIHNldElzRmV0Y2hpbmcoZmFsc2UpXG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNMb2FkaW5nLFxuICAgIGRhdGEsXG4gIH1cbn1cblxuZXhwb3J0IHsgdXNlRG9jdW1lbnRzSW1hZ2VzIH1cbiJdLCJuYW1lcyI6WyJ1c2VEb2N1bWVudHNJbWFnZXMiLCJpZHMiLCJxdWVyeUNsaWVudCIsInVzZVF1ZXJ5Q2xpZW50IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwidXNlU3RhdGUiLCJpc0ZldGNoaW5nIiwic2V0SXNGZXRjaGluZyIsInVybCIsImdldEFwaUVudmlyb25tZW50Q29uZmlnIiwidXNlRWZmZWN0IiwiaW5pdGlhbExvYWRpbmciLCJtYXAiLCJpZCIsImdldFF1ZXJ5RGF0YSIsImZpbHRlciIsInZhbCIsImxlbmd0aCIsImRhdGEiLCJ1c2VNZW1vIiwiaW5pdCIsInJlZHVjZSIsImFjYyIsImF4aW9zQ2xpZW50IiwicG9zdCIsInRoZW4iLCJyZXMiLCJmb3JFYWNoIiwic2V0UXVlcnlEYXRhIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE4Q1NBOzs7ZUFBQUE7Ozt1QkE5Q29DO3VCQUNMOzZCQUNaOzRCQUNHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUkvQixNQUFNQSxxQkFBcUIsQ0FBQ0M7SUFDMUIsTUFBTUMsY0FBY0MsSUFBQUEsMEJBQWM7SUFDbEMsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdDLElBQUFBLGVBQVEsRUFBQztJQUMzQyxNQUFNLENBQUNDLFlBQVlDLGNBQWMsR0FBR0YsSUFBQUEsZUFBUSxFQUFDO0lBQzdDLE1BQU0sRUFBRUcsR0FBRyxFQUFFLEdBQUdDLElBQUFBLDhCQUF1QjtJQUV2Q0MsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLGlCQUNKLENBQUMsQ0FBQ1gsSUFDQ1ksR0FBRyxDQUFDQyxDQUFBQSxLQUFNWixZQUFZYSxZQUFZLENBQWdCO2dCQUFDO2dCQUFvQkQ7YUFBRyxHQUMxRUUsTUFBTSxDQUFDQyxDQUFBQSxNQUFPLENBQUNBLEtBQUtDLE1BQU0sSUFBSWpCLElBQUlpQixNQUFNLEtBQUs7UUFDbERiLGFBQWFPO0lBQ2YsR0FBRztRQUFDWDtRQUFLQztLQUFZO0lBRXJCLE1BQU1pQixPQUFPQyxJQUFBQSxjQUFPLEVBQUM7UUFDbkIsTUFBTUMsT0FBWSxDQUFDO1FBQ25CLElBQUlqQixXQUFXLE9BQU8sQ0FBQztRQUN2QixPQUFPSCxJQUFJcUIsTUFBTSxDQUFDLENBQUNDLEtBQUtUO1lBQ3RCLE9BQU8sd0NBQUtTO2dCQUFLLENBQUNULEdBQUcsRUFBRVosWUFBWWEsWUFBWSxDQUFnQjtvQkFBQztvQkFBb0JEO2lCQUFHOztRQUN6RixHQUFHTztJQUNMLEdBQUc7UUFBQ3BCO1FBQUtHO1FBQVdGO0tBQVk7SUFFaEMsSUFBSUUsYUFBYSxDQUFDRyxjQUFjTixJQUFJaUIsTUFBTSxHQUFHLEdBQUc7UUFDOUNWLGNBQWM7UUFDZGdCLHdCQUFXLENBQUNDLElBQUksQ0FBTSxDQUFDLEVBQUVoQixJQUFJLGdCQUFnQixDQUFDLEVBQUU7WUFBRVI7UUFBSSxHQUFHeUIsSUFBSSxDQUFDQyxDQUFBQTtZQUM1RDFCLElBQUkyQixPQUFPLENBQUNkLENBQUFBO29CQUN5Q2E7Z0JBQW5EekIsWUFBWTJCLFlBQVksQ0FBQztvQkFBQztvQkFBb0JmO2lCQUFHLEVBQUVhLENBQUFBLGVBQUFBLElBQUlSLElBQUksQ0FBQ0wsR0FBRyxjQUFaYSwwQkFBQUEsZUFBZ0IsRUFBRTtZQUN2RTtZQUNBbkIsY0FBYztZQUNkSCxhQUFhO1FBQ2Y7SUFDRjtJQUVBLE9BQU87UUFDTEQ7UUFDQWU7SUFDRjtBQUNGIn0=