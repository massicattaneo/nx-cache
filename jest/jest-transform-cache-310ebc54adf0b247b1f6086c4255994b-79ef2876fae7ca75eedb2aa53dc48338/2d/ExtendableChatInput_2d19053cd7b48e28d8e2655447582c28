4d9c07afcfa6753e974d6c1bd9089726
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CHAT_INPUT_HIDDEN_WRAPPER_CLASS_NAME: function() {
        return CHAT_INPUT_HIDDEN_WRAPPER_CLASS_NAME;
    },
    ExtendableChatInput: function() {
        return ExtendableChatInput;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _files = require("@rp/react/web/common/files");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _useChatFiles = require("../useChatFiles");
const _ChatInput = require("./ChatInput");
const _DatasetPopper = require("./DatasetPopper");
const _MobileDatasetPopper = require("./MobileDatasetPopper");
const _getDefaultPrompt = require("./getDefaultPrompt");
const CHAT_INPUT_HIDDEN_WRAPPER_CLASS_NAME = "chat-input-hidden-wrapper";
const getChatInputStyle = (isMobile, theme, isHomePageChat)=>{
    return {
        mx: isHomePageChat && !isMobile ? 1.5 : 0,
        width: `min(810px, 100dvw - ${isMobile ? 120 : _settings.SIDEBAR_WIDTH + 48}px)`,
        [theme.breakpoints.down("sm")]: {
            width: `min(810px, 100dvw - ${isMobile ? 32 : _settings.SIDEBAR_WIDTH + 48}px)`
        }
    };
};
const isIncorrectWatchlistCombination = (watchlistId, selectedScope)=>{
    if (watchlistId === undefined) {
        return true;
    }
    const scopesWithDefault = [
        "news",
        "transcripts",
        "filings",
        "earnings_calls"
    ];
    return selectedScope !== undefined && !scopesWithDefault.includes(selectedScope);
};
const ExtendableChatInput = ({ onPromptSubmit, variant, generating, stopGenerating, scope, setScope, filesIds, setFilesIds, watchlistId, submitWatchlistId, enableFreeTier, sourceFilter, location, isHomePageChat = false, placeholder = variant === "add" ? "Ask a follow up" : "Ask a question", hideControls, isValidPrompt = true })=>{
    const { selectFilesModal, selectWatchlistModal } = (0, _providers.useModal)();
    const { files: selectedFiles, isLoading: isLoadingFiles } = (0, _useChatFiles.useChatFiles)(filesIds);
    const { handleOpen: handleOpenWatchlistModal } = selectWatchlistModal;
    const submitFileRef = (0, _react.useRef)(null);
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers.useModal)();
    const { isIOS, isMobile } = (0, _hooks.useDeviceInfo)();
    const [prompt, setPrompt] = (0, _react.useState)("");
    const [filter, setFilter] = (0, _react.useState)("");
    const [selectedScope, setSelectedScope] = (0, _react.useState)();
    const [isDatasetsOpen, setIsDatasetsOpen] = (0, _react.useState)(false);
    const inputContainerRef = (0, _react.useRef)(null);
    const inputFocusRef = (0, _react.useRef)(null);
    const validPrompt = prompt.length > 0 && !prompt.match(/^\s+$/);
    const errorFiles = selectedFiles.filter((i)=>(0, _utils.isFileStatusError)(i.status)).length;
    const processingFiles = selectedFiles.filter((i)=>!(0, _utils.isFileStatusError)(i.status) && !(0, _utils.isFileStatusCompleted)(i.status)).length;
    const blockForFiles = selectedFiles.length === 0 || errorFiles === selectedFiles.length || processingFiles > 0 || isLoadingFiles;
    const hasFiles = selectedFiles.length > 0;
    const submitPromptDisabled = hasFiles && blockForFiles || (!hasFiles && isIncorrectWatchlistCombination(watchlistId, scope) ? !validPrompt : false) || generating;
    // Make sure the input is focused when navigating to the chat page
    (0, _react.useEffect)(()=>{
        if (inputFocusRef.current && !isIOS && !isMobile) {
            inputFocusRef.current.focus();
        }
    }, [
        isIOS,
        isMobile,
        variant
    ]);
    const submitPrompt = ()=>{
        if (submitPromptDisabled) {
            return;
        }
        if (isDatasetsOpen) {
            setPrompt("");
            setIsDatasetsOpen(false);
            return;
        }
        const defaultPrompt = (0, _getDefaultPrompt.getDefaultPrompt)(filesIds, watchlistId, scope);
        const finalPrompt = !validPrompt ? defaultPrompt : prompt;
        onPromptSubmit(finalPrompt, !validPrompt);
        setPrompt("");
        setIsDatasetsOpen(false);
    };
    const openWatchlistModal = (0, _react.useCallback)(()=>{
        handleOpenWatchlistModal({
            onSelectWatchlist: (id)=>submitWatchlistId(id),
            selectedWatchlist: watchlistId
        });
    }, [
        handleOpenWatchlistModal,
        submitWatchlistId,
        watchlistId
    ]);
    const handleKeyDown = (event)=>{
        if (event.key === "@" && prompt.length === 0 && filesIds.length === 0) {
            setIsDatasetsOpen(true);
            return;
        }
        if (selectedScope !== undefined && (event.key === "Enter" || prompt.startsWith("@") && event.key === " ")) {
            event.preventDefault();
            setScope(selectedScope);
            setIsDatasetsOpen(false);
            setPrompt("");
            return;
        }
        if (event.key === "Enter" && !isMobile && event.shiftKey === false) {
            event.preventDefault();
            submitPrompt();
        }
    };
    // Grow animation
    const [multilineActive, setMultilineActive] = (0, _react.useState)(false);
    const inlineInputRef = (0, _react.useRef)(null);
    const resizeObserverRef = (0, _react.useRef)(new ResizeObserver((entries)=>{
        const entry = entries[entries.length - 1];
        const isMultiline = entry.borderBoxSize[0].blockSize > 64;
        setMultilineActive(isMultiline);
    }));
    (0, _react.useEffect)(()=>{
        if (inlineInputRef.current) {
            resizeObserverRef.current.observe(inlineInputRef.current);
        }
    }, []);
    const textToDisplay = isDatasetsOpen ? filter : prompt;
    const setTextToDisplay = (prompt)=>{
        isDatasetsOpen ? setFilter(prompt) : setPrompt(prompt);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            isDatasetsOpen ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    overflowY: "contained",
                    height: 2000,
                    position: "fixed",
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                    bgcolor: "rgba(0, 0, 0, 0.30)",
                    zIndex: 10
                }
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ClickAwayListener, {
                onClickAway: ()=>setIsDatasetsOpen(false),
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: (theme)=>({
                            display: "flex",
                            [`& .${_ChatInput.CHAT_INPUT_WRAPPER_CLASS_NAME}`]: getChatInputStyle(isMobile, theme, isHomePageChat),
                            [`& .${_ChatInput.CHAT_INPUT_CONTAINER_CLASS_NAME}`]: getChatInputStyle(isMobile, theme, isHomePageChat)
                        }),
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatInput.ChatInput, {
                            id: _settings.CHAT_INPUT_ID,
                            ref: inputContainerRef,
                            submitPrompt: submitPrompt,
                            setScope: setScope,
                            closeDatasetPopper: ()=>setIsDatasetsOpen(false),
                            openDatasetPopper: ()=>setIsDatasetsOpen(true),
                            prompt: textToDisplay,
                            setPrompt: setTextToDisplay,
                            variant: variant,
                            isValidPrompt: isValidPrompt && !submitPromptDisabled,
                            generating: generating,
                            handleKeyDown: handleKeyDown,
                            isDatasetsOpen: isDatasetsOpen,
                            stopGenerating: stopGenerating,
                            scope: scope,
                            multiline: multilineActive,
                            filesIds: filesIds,
                            setFilesIds: setFilesIds,
                            submitFileRef: submitFileRef,
                            inputRef: inputFocusRef,
                            handleOpenWatchlistModal: openWatchlistModal,
                            watchlistId: watchlistId,
                            setWatchlistId: submitWatchlistId,
                            isFreeTierEnabled: enableFreeTier,
                            placeholder: placeholder,
                            isHomePageChat: isHomePageChat,
                            hideControls: hideControls
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_files.UploadFiles, {
                            location: location,
                            onFileId: (src, fileId)=>{
                                const isModalOpen = document.querySelector(`.${_settings.SELECT_FILES_MODAL_CLASS_NAME}`) !== null;
                                if (isModalOpen) {
                                    selectFilesModal.setSelected((prev)=>{
                                        const filter = prev.filter((i)=>i !== src);
                                        return [
                                            ...filter,
                                            fileId
                                        ];
                                    });
                                } else {
                                    setFilesIds((prev)=>{
                                        const filter = prev.filter((i)=>i !== src);
                                        return [
                                            ...filter,
                                            fileId
                                        ];
                                    });
                                }
                            },
                            onSubmit: (files)=>selectFilesModal.setSelected((prev)=>{
                                    return [
                                        ...prev,
                                        ...files.map((i)=>i.fileId)
                                    ];
                                }),
                            ref: submitFileRef
                        }),
                        isMobile && isDatasetsOpen ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileDatasetPopper.MobileDatasetPopper, {
                            initialFilter: prompt === "@" ? "@" : undefined,
                            open: isDatasetsOpen,
                            onClose: ()=>setIsDatasetsOpen(false),
                            scope: scope,
                            setScope: setScope,
                            sourceFilter: sourceFilter,
                            enableFreeTier: enableFreeTier
                        }, prompt) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_DatasetPopper.DatasetPopper, {
                            inputRef: inputContainerRef.current,
                            open: isDatasetsOpen,
                            filter: filter,
                            onOptionClick: ({ scope, blocked })=>{
                                setIsDatasetsOpen(false);
                                if (blocked) {
                                    planComparisonHandleOpen(scope);
                                    return;
                                }
                                setScope(scope);
                            },
                            setSelectedDataset: setSelectedScope,
                            onClose: ()=>setIsDatasetsOpen(false),
                            sourceFilter: sourceFilter,
                            enableFreeTier: enableFreeTier,
                            isHomePageChat: isHomePageChat
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                            className: CHAT_INPUT_HIDDEN_WRAPPER_CLASS_NAME,
                            sx: (theme)=>({
                                    position: "absolute",
                                    width: "98%",
                                    transform: "translateX(100000px)",
                                    opacity: 0,
                                    [`& .${_ChatInput.CHAT_INPUT_WRAPPER_CLASS_NAME}`]: getChatInputStyle(isMobile, theme, isHomePageChat),
                                    [`& .${_ChatInput.CHAT_INPUT_CONTAINER_CLASS_NAME}`]: getChatInputStyle(isMobile, theme, isHomePageChat)
                                }),
                            children: !isHomePageChat && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatInput.ChatInput, {
                                ref: inlineInputRef,
                                submitPrompt: submitPrompt,
                                setScope: setScope,
                                closeDatasetPopper: ()=>setIsDatasetsOpen(false),
                                openDatasetPopper: ()=>setIsDatasetsOpen(true),
                                prompt: textToDisplay,
                                setPrompt: setTextToDisplay,
                                variant: variant,
                                isValidPrompt: isValidPrompt && validPrompt,
                                generating: generating,
                                handleKeyDown: handleKeyDown,
                                isDatasetsOpen: isDatasetsOpen,
                                stopGenerating: stopGenerating,
                                scope: scope,
                                hidden: true,
                                filesIds: filesIds,
                                setFilesIds: setFilesIds,
                                submitFileRef: submitFileRef,
                                handleOpenWatchlistModal: openWatchlistModal,
                                watchlistId: watchlistId,
                                setWatchlistId: submitWatchlistId,
                                isFreeTierEnabled: enableFreeTier,
                                placeholder: placeholder,
                                isHomePageChat: isHomePageChat,
                                hideControls: hideControls
                            })
                        })
                    ]
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,