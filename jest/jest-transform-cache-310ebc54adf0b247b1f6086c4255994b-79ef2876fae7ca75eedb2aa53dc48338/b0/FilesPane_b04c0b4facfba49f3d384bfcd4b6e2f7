5f956881ba81a2c8bfb82aa9613ac587
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesPane", {
    enumerable: true,
    get: function() {
        return FilesPane;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _file = require("@rp/react/tanstack-api/file");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _providers = require("@rp/react/web/common/providers");
const _files = require("@rp/react/web/files");
const _core = require("@rp/react/web/mui/core");
const _FilesListV2 = require("../../../../../components/Hub/Files/FilesList/FilesListV2");
const _FilesPaneFilters = require("./FilesPaneFilters");
const _FilesPaneHeader = require("./FilesPaneHeader");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function FilesPane({ width, openChatPane, isChatPaneOpen, selectedFiles, setSelectedFiles }) {
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers.useModal)();
    const { disableUpload } = (0, _file.useQuota)();
    const [searchParams] = (0, _reactrouterdom.useSearchParams)();
    const [ownersSelected, setOwnersSelected] = (0, _react.useState)([]);
    const { data: ownersList, isPending: isOwnersListPending } = (0, _file.useFilesOwnersList)();
    if (!width) return null;
    var _searchParams_get;
    const filterTerm = (_searchParams_get = searchParams.get("find")) !== null && _searchParams_get !== void 0 ? _searchParams_get : "";
    const overlayMarginOffset = "118px";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            width,
            transition: "0.2s ease-in-out",
            minWidth: "350px"
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_files.FilesUploadDropZone, {
            disabled: disableUpload,
            customDropZoneAreaStyle: {
                display: "block",
                overflow: "inherit"
            },
            customFileUploadOverlayStyle: {
                height: `calc(100% - ${overlayMarginOffset})`,
                marginTop: overlayMarginOffset
            },
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    mx: 2
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesPaneHeader.FilesPaneHeader, {
                        selectedFiles: selectedFiles,
                        filterTerm: filterTerm,
                        disableUpload: disableUpload,
                        planComparisonHandleOpen: planComparisonHandleOpen
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesPaneFilters.FilesPaneFilters, {
                        setOwnersSelected: setOwnersSelected,
                        ownersSelected: ownersSelected,
                        ownersList: ownersList,
                        isOwnersListPending: isOwnersListPending
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                sx: {
                                    position: "relative",
                                    pt: 2
                                },
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.QuotaReachedMessage, {
                                    onClick: ()=>planComparisonHandleOpen(_settings.FILES_FEATURE_NAME)
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListV2.FilesListV2, {
                                selectedFiles: selectedFiles,
                                filterTerm: filterTerm,
                                openChatPane: openChatPane,
                                ownersSelected: ownersSelected,
                                ownersList: ownersList,
                                isChatPaneOpen: isChatPaneOpen,
                                setSelectedFiles: setSelectedFiles
                            })
                        ]
                    })
                ]
            })
        })
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL3BhZ2VzL0ZpbGVzL0ZpbGVzVjIvY29tcG9uZW50cy9GaWxlc1BhbmUvRmlsZXNQYW5lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRGlzcGF0Y2gsIFNldFN0YXRlQWN0aW9uLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VTZWFyY2hQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyBGSUxFU19GRUFUVVJFX05BTUUgfSBmcm9tIFwiQHJwL2NvbW1vbi9zZXR0aW5nc1wiXG5pbXBvcnQgeyB1c2VGaWxlc093bmVyc0xpc3QsIHVzZVF1b3RhIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZmlsZVwiXG5pbXBvcnQgeyBRdW90YVJlYWNoZWRNZXNzYWdlIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IHVzZU1vZGFsIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5pbXBvcnQgeyBGaWxlc1VwbG9hZERyb3Bab25lIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvZmlsZXNcIlxuaW1wb3J0IHsgQm94IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgU2VsZWN0ZWRGaWxlIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvSHViL0ZpbGVzL0ZpbGVzXCJcbmltcG9ydCB7IEZpbGVzTGlzdFYyIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvSHViL0ZpbGVzL0ZpbGVzTGlzdC9GaWxlc0xpc3RWMlwiXG5pbXBvcnQgeyBTZWxlY3RJdGVtIH0gZnJvbSBcIi4uLy4uL2ZpbGVzUGFnZS50eXBlc1wiXG5pbXBvcnQgeyBGaWxlc1BhbmVGaWx0ZXJzIH0gZnJvbSBcIi4vRmlsZXNQYW5lRmlsdGVyc1wiXG5pbXBvcnQgeyBGaWxlc1BhbmVIZWFkZXIgfSBmcm9tIFwiLi9GaWxlc1BhbmVIZWFkZXJcIlxuXG50eXBlIEZpbGVzUGFuZVByb3BzID0ge1xuICB3aWR0aDogc3RyaW5nIHwgbnVsbFxuICBvcGVuQ2hhdFBhbmU6ICgpID0+IHZvaWRcbiAgaXNDaGF0UGFuZU9wZW46IGJvb2xlYW5cbiAgc2VsZWN0ZWRGaWxlczogQXJyYXk8U2VsZWN0ZWRGaWxlPlxuICBzZXRTZWxlY3RlZEZpbGVzOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxBcnJheTxTZWxlY3RlZEZpbGU+Pj5cbn1cblxuZnVuY3Rpb24gRmlsZXNQYW5lKHtcbiAgd2lkdGgsXG4gIG9wZW5DaGF0UGFuZSxcbiAgaXNDaGF0UGFuZU9wZW4sXG4gIHNlbGVjdGVkRmlsZXMsXG4gIHNldFNlbGVjdGVkRmlsZXMsXG59OiBGaWxlc1BhbmVQcm9wcykge1xuICBjb25zdCB7XG4gICAgcGxhbkNvbXBhcmlzb25Nb2RhbDogeyBoYW5kbGVPcGVuOiBwbGFuQ29tcGFyaXNvbkhhbmRsZU9wZW4gfSxcbiAgfSA9IHVzZU1vZGFsKClcblxuICBjb25zdCB7IGRpc2FibGVVcGxvYWQgfSA9IHVzZVF1b3RhKClcbiAgY29uc3QgW3NlYXJjaFBhcmFtc10gPSB1c2VTZWFyY2hQYXJhbXMoKVxuICBjb25zdCBbb3duZXJzU2VsZWN0ZWQsIHNldE93bmVyc1NlbGVjdGVkXSA9IHVzZVN0YXRlPEFycmF5PFNlbGVjdEl0ZW0+PihbXSlcbiAgY29uc3QgeyBkYXRhOiBvd25lcnNMaXN0LCBpc1BlbmRpbmc6IGlzT3duZXJzTGlzdFBlbmRpbmcgfSA9IHVzZUZpbGVzT3duZXJzTGlzdCgpXG5cbiAgaWYgKCF3aWR0aCkgcmV0dXJuIG51bGxcblxuICBjb25zdCBmaWx0ZXJUZXJtID0gc2VhcmNoUGFyYW1zLmdldChcImZpbmRcIikgPz8gXCJcIlxuXG4gIGNvbnN0IG92ZXJsYXlNYXJnaW5PZmZzZXQgPSBcIjExOHB4XCJcblxuICByZXR1cm4gKFxuICAgIDxCb3ggc3g9e3sgd2lkdGgsIHRyYW5zaXRpb246IFwiMC4ycyBlYXNlLWluLW91dFwiLCBtaW5XaWR0aDogXCIzNTBweFwiIH19PlxuICAgICAgPEZpbGVzVXBsb2FkRHJvcFpvbmVcbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVVcGxvYWR9XG4gICAgICAgIGN1c3RvbURyb3Bab25lQXJlYVN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIG92ZXJmbG93OiBcImluaGVyaXRcIixcbiAgICAgICAgfX1cbiAgICAgICAgY3VzdG9tRmlsZVVwbG9hZE92ZXJsYXlTdHlsZT17e1xuICAgICAgICAgIGhlaWdodDogYGNhbGMoMTAwJSAtICR7b3ZlcmxheU1hcmdpbk9mZnNldH0pYCxcbiAgICAgICAgICBtYXJnaW5Ub3A6IG92ZXJsYXlNYXJnaW5PZmZzZXQsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxCb3ggc3g9e3sgbXg6IDIgfX0+XG4gICAgICAgICAgPEZpbGVzUGFuZUhlYWRlclxuICAgICAgICAgICAgc2VsZWN0ZWRGaWxlcz17c2VsZWN0ZWRGaWxlc31cbiAgICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgICAgICBkaXNhYmxlVXBsb2FkPXtkaXNhYmxlVXBsb2FkfVxuICAgICAgICAgICAgcGxhbkNvbXBhcmlzb25IYW5kbGVPcGVuPXtwbGFuQ29tcGFyaXNvbkhhbmRsZU9wZW59XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIDxGaWxlc1BhbmVGaWx0ZXJzXG4gICAgICAgICAgICBzZXRPd25lcnNTZWxlY3RlZD17c2V0T3duZXJzU2VsZWN0ZWR9XG4gICAgICAgICAgICBvd25lcnNTZWxlY3RlZD17b3duZXJzU2VsZWN0ZWR9XG4gICAgICAgICAgICBvd25lcnNMaXN0PXtvd25lcnNMaXN0fVxuICAgICAgICAgICAgaXNPd25lcnNMaXN0UGVuZGluZz17aXNPd25lcnNMaXN0UGVuZGluZ31cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxCb3ggc3g9e3sgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgcHQ6IDIgfX0+XG4gICAgICAgICAgICAgIDxRdW90YVJlYWNoZWRNZXNzYWdlIG9uQ2xpY2s9eygpID0+IHBsYW5Db21wYXJpc29uSGFuZGxlT3BlbihGSUxFU19GRUFUVVJFX05BTUUpfSAvPlxuICAgICAgICAgICAgPC9Cb3g+XG5cbiAgICAgICAgICAgIDxGaWxlc0xpc3RWMlxuICAgICAgICAgICAgICBzZWxlY3RlZEZpbGVzPXtzZWxlY3RlZEZpbGVzfVxuICAgICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgICBvcGVuQ2hhdFBhbmU9e29wZW5DaGF0UGFuZX1cbiAgICAgICAgICAgICAgb3duZXJzU2VsZWN0ZWQ9e293bmVyc1NlbGVjdGVkfVxuICAgICAgICAgICAgICBvd25lcnNMaXN0PXtvd25lcnNMaXN0fVxuICAgICAgICAgICAgICBpc0NoYXRQYW5lT3Blbj17aXNDaGF0UGFuZU9wZW59XG4gICAgICAgICAgICAgIHNldFNlbGVjdGVkRmlsZXM9e3NldFNlbGVjdGVkRmlsZXN9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvRmlsZXNVcGxvYWREcm9wWm9uZT5cbiAgICA8L0JveD5cbiAgKVxufVxuXG5leHBvcnQgeyBGaWxlc1BhbmUgfVxuIl0sIm5hbWVzIjpbIkZpbGVzUGFuZSIsIndpZHRoIiwib3BlbkNoYXRQYW5lIiwiaXNDaGF0UGFuZU9wZW4iLCJzZWxlY3RlZEZpbGVzIiwic2V0U2VsZWN0ZWRGaWxlcyIsInBsYW5Db21wYXJpc29uTW9kYWwiLCJoYW5kbGVPcGVuIiwicGxhbkNvbXBhcmlzb25IYW5kbGVPcGVuIiwidXNlTW9kYWwiLCJkaXNhYmxlVXBsb2FkIiwidXNlUXVvdGEiLCJzZWFyY2hQYXJhbXMiLCJ1c2VTZWFyY2hQYXJhbXMiLCJvd25lcnNTZWxlY3RlZCIsInNldE93bmVyc1NlbGVjdGVkIiwidXNlU3RhdGUiLCJkYXRhIiwib3duZXJzTGlzdCIsImlzUGVuZGluZyIsImlzT3duZXJzTGlzdFBlbmRpbmciLCJ1c2VGaWxlc093bmVyc0xpc3QiLCJmaWx0ZXJUZXJtIiwiZ2V0Iiwib3ZlcmxheU1hcmdpbk9mZnNldCIsIkJveCIsInN4IiwidHJhbnNpdGlvbiIsIm1pbldpZHRoIiwiRmlsZXNVcGxvYWREcm9wWm9uZSIsImRpc2FibGVkIiwiY3VzdG9tRHJvcFpvbmVBcmVhU3R5bGUiLCJkaXNwbGF5Iiwib3ZlcmZsb3ciLCJjdXN0b21GaWxlVXBsb2FkT3ZlcmxheVN0eWxlIiwiaGVpZ2h0IiwibWFyZ2luVG9wIiwibXgiLCJGaWxlc1BhbmVIZWFkZXIiLCJGaWxlc1BhbmVGaWx0ZXJzIiwicG9zaXRpb24iLCJwdCIsIlF1b3RhUmVhY2hlZE1lc3NhZ2UiLCJvbkNsaWNrIiwiRklMRVNfRkVBVFVSRV9OQU1FIiwiRmlsZXNMaXN0VjIiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTZGU0E7OztlQUFBQTs7OzsrREE3RmlEO2dDQUMxQjswQkFDRztzQkFDVTtxQ0FDVDsyQkFDWDt1QkFDVztzQkFDaEI7NkJBRVE7a0NBRUs7aUNBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVoQyxTQUFTQSxVQUFVLEVBQ2pCQyxLQUFLLEVBQ0xDLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGdCQUFnQixFQUNEO0lBQ2YsTUFBTSxFQUNKQyxxQkFBcUIsRUFBRUMsWUFBWUMsd0JBQXdCLEVBQUUsRUFDOUQsR0FBR0MsSUFBQUEsbUJBQVE7SUFFWixNQUFNLEVBQUVDLGFBQWEsRUFBRSxHQUFHQyxJQUFBQSxjQUFRO0lBQ2xDLE1BQU0sQ0FBQ0MsYUFBYSxHQUFHQyxJQUFBQSwrQkFBZTtJQUN0QyxNQUFNLENBQUNDLGdCQUFnQkMsa0JBQWtCLEdBQUdDLElBQUFBLGVBQVEsRUFBb0IsRUFBRTtJQUMxRSxNQUFNLEVBQUVDLE1BQU1DLFVBQVUsRUFBRUMsV0FBV0MsbUJBQW1CLEVBQUUsR0FBR0MsSUFBQUEsd0JBQWtCO0lBRS9FLElBQUksQ0FBQ3BCLE9BQU8sT0FBTztRQUVBVztJQUFuQixNQUFNVSxhQUFhVixDQUFBQSxvQkFBQUEsYUFBYVcsR0FBRyxDQUFDLHFCQUFqQlgsK0JBQUFBLG9CQUE0QjtJQUUvQyxNQUFNWSxzQkFBc0I7SUFFNUIscUJBQ0UscUJBQUNDLFNBQUc7UUFBQ0MsSUFBSTtZQUFFekI7WUFBTzBCLFlBQVk7WUFBb0JDLFVBQVU7UUFBUTtrQkFDbEUsY0FBQSxxQkFBQ0MsMEJBQW1CO1lBQ2xCQyxVQUFVcEI7WUFDVnFCLHlCQUF5QjtnQkFDdkJDLFNBQVM7Z0JBQ1RDLFVBQVU7WUFDWjtZQUNBQyw4QkFBOEI7Z0JBQzVCQyxRQUFRLENBQUMsWUFBWSxFQUFFWCxvQkFBb0IsQ0FBQyxDQUFDO2dCQUM3Q1ksV0FBV1o7WUFDYjtzQkFFQSxjQUFBLHNCQUFDQyxTQUFHO2dCQUFDQyxJQUFJO29CQUFFVyxJQUFJO2dCQUFFOztrQ0FDZixxQkFBQ0MsZ0NBQWU7d0JBQ2RsQyxlQUFlQTt3QkFDZmtCLFlBQVlBO3dCQUNaWixlQUFlQTt3QkFDZkYsMEJBQTBCQTs7a0NBRzVCLHFCQUFDK0Isa0NBQWdCO3dCQUNmeEIsbUJBQW1CQTt3QkFDbkJELGdCQUFnQkE7d0JBQ2hCSSxZQUFZQTt3QkFDWkUscUJBQXFCQTs7a0NBR3ZCLHNCQUFDSyxTQUFHOzswQ0FDRixxQkFBQ0EsU0FBRztnQ0FBQ0MsSUFBSTtvQ0FBRWMsVUFBVTtvQ0FBWUMsSUFBSTtnQ0FBRTswQ0FDckMsY0FBQSxxQkFBQ0Msd0NBQW1CO29DQUFDQyxTQUFTLElBQU1uQyx5QkFBeUJvQyw0QkFBa0I7OzswQ0FHakYscUJBQUNDLHdCQUFXO2dDQUNWekMsZUFBZUE7Z0NBQ2ZrQixZQUFZQTtnQ0FDWnBCLGNBQWNBO2dDQUNkWSxnQkFBZ0JBO2dDQUNoQkksWUFBWUE7Z0NBQ1pmLGdCQUFnQkE7Z0NBQ2hCRSxrQkFBa0JBOzs7Ozs7OztBQU9oQyJ9