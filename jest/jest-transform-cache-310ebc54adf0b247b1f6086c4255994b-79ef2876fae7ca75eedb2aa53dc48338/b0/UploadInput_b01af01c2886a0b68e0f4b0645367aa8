e376fae9789129a68283b56c9960bb4d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UploadInput", {
    enumerable: true,
    get: function() {
        return UploadInput;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const UploadInput = /*#__PURE__*/ (0, _react.forwardRef)(({ multiple, onSubmit, accept }, ref)=>{
    const [callbacks, setCallbacks] = (0, _react.useState)([]);
    const [inputRef, setInputRef] = (0, _react.useState)(null);
    (0, _react.useImperativeHandle)(ref, ()=>{
        return {
            open: async ()=>{
                inputRef === null || inputRef === void 0 ? void 0 : inputRef.click();
                return new Promise((resolve)=>{
                    setCallbacks((prev)=>[
                            ...prev,
                            resolve
                        ]);
                });
            }
        };
    }, [
        inputRef
    ]);
    const submitFiles = async (event)=>{
        const { files } = event.target;
        const fileArray = Array.from(files || []);
        if (files) {
            onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(fileArray);
            callbacks.forEach((callback)=>callback(fileArray));
            setCallbacks([]);
            Object.assign(event.target, {
                value: ""
            });
        }
    };
    (0, _react.useEffect)(()=>{
        const listener = ()=>{
            setCallbacks((callbacks)=>{
                callbacks.forEach((callback)=>callback([]));
                return [];
            });
        };
        const fileUploader = document.getElementById("fileUploader");
        fileUploader === null || fileUploader === void 0 ? void 0 : fileUploader.addEventListener("cancel", listener);
        return ()=>{
            fileUploader === null || fileUploader === void 0 ? void 0 : fileUploader.removeEventListener("cancel", listener);
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
        type: "file",
        id: "fileUploader",
        "data-testid": "fileUploader",
        ref: setInputRef,
        multiple: multiple,
        accept: accept,
        style: {
            display: "none"
        },
        onChange: submitFiles
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHMvc3JjL1VwbG9hZElucHV0L1VwbG9hZElucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgdXNlRWZmZWN0LCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIG11bHRpcGxlPzogYm9vbGVhblxuICBvblN1Ym1pdD86IChmaWxlczogQXJyYXk8RmlsZT4pID0+IHZvaWRcbiAgYWNjZXB0Pzogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFVwbG9hZElucHV0UmVmID0ge1xuICBvcGVuOiAoKSA9PiBQcm9taXNlPEFycmF5PEZpbGU+PlxufVxuXG5leHBvcnQgY29uc3QgVXBsb2FkSW5wdXQgPSBmb3J3YXJkUmVmPFVwbG9hZElucHV0UmVmLCBQcm9wcz4oXG4gICh7IG11bHRpcGxlLCBvblN1Ym1pdCwgYWNjZXB0IH0sIHJlZikgPT4ge1xuICAgIGNvbnN0IFtjYWxsYmFja3MsIHNldENhbGxiYWNrc10gPSB1c2VTdGF0ZTxBcnJheTwobGlzdDogQXJyYXk8RmlsZT4pID0+IHZvaWQ+PihbXSlcbiAgICBjb25zdCBbaW5wdXRSZWYsIHNldElucHV0UmVmXSA9IHVzZVN0YXRlPEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsPihudWxsKVxuXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZShcbiAgICAgIHJlZixcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvcGVuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpbnB1dFJlZj8uY2xpY2soKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEFycmF5PEZpbGU+PihyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgc2V0Q2FsbGJhY2tzKHByZXYgPT4gWy4uLnByZXYsIHJlc29sdmVdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2lucHV0UmVmXSxcbiAgICApXG5cbiAgICBjb25zdCBzdWJtaXRGaWxlcyA9IGFzeW5jIChldmVudDogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgIGNvbnN0IHsgZmlsZXMgfTogeyBmaWxlczogRmlsZUxpc3QgfCBudWxsIH0gPSBldmVudC50YXJnZXRcbiAgICAgIGNvbnN0IGZpbGVBcnJheSA9IEFycmF5LmZyb20oZmlsZXMgfHwgW10pXG4gICAgICBpZiAoZmlsZXMpIHtcbiAgICAgICAgb25TdWJtaXQ/LihmaWxlQXJyYXkpXG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGZpbGVBcnJheSkpXG4gICAgICAgIHNldENhbGxiYWNrcyhbXSlcbiAgICAgICAgT2JqZWN0LmFzc2lnbihldmVudC50YXJnZXQsIHsgdmFsdWU6IFwiXCIgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHNldENhbGxiYWNrcyhjYWxsYmFja3MgPT4ge1xuICAgICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKFtdKSlcbiAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpbGVVcGxvYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlsZVVwbG9hZGVyXCIpXG4gICAgICBmaWxlVXBsb2FkZXI/LmFkZEV2ZW50TGlzdGVuZXIoXCJjYW5jZWxcIiwgbGlzdGVuZXIpXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBmaWxlVXBsb2FkZXI/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjYW5jZWxcIiwgbGlzdGVuZXIpXG4gICAgICB9XG4gICAgfSwgW10pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgaWQ9XCJmaWxlVXBsb2FkZXJcIlxuICAgICAgICBkYXRhLXRlc3RpZD1cImZpbGVVcGxvYWRlclwiXG4gICAgICAgIHJlZj17c2V0SW5wdXRSZWZ9XG4gICAgICAgIG11bHRpcGxlPXttdWx0aXBsZX1cbiAgICAgICAgYWNjZXB0PXthY2NlcHR9XG4gICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6IFwibm9uZVwiIH19XG4gICAgICAgIG9uQ2hhbmdlPXtzdWJtaXRGaWxlc31cbiAgICAgIC8+XG4gICAgKVxuICB9LFxuKVxuIl0sIm5hbWVzIjpbIlVwbG9hZElucHV0IiwiZm9yd2FyZFJlZiIsIm11bHRpcGxlIiwib25TdWJtaXQiLCJhY2NlcHQiLCJyZWYiLCJjYWxsYmFja3MiLCJzZXRDYWxsYmFja3MiLCJ1c2VTdGF0ZSIsImlucHV0UmVmIiwic2V0SW5wdXRSZWYiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwib3BlbiIsImNsaWNrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcmV2Iiwic3VibWl0RmlsZXMiLCJldmVudCIsImZpbGVzIiwidGFyZ2V0IiwiZmlsZUFycmF5IiwiQXJyYXkiLCJmcm9tIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwiT2JqZWN0IiwiYXNzaWduIiwidmFsdWUiLCJ1c2VFZmZlY3QiLCJsaXN0ZW5lciIsImZpbGVVcGxvYWRlciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlucHV0IiwidHlwZSIsImlkIiwiZGF0YS10ZXN0aWQiLCJzdHlsZSIsImRpc3BsYXkiLCJvbkNoYW5nZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBWWFBOzs7ZUFBQUE7Ozs7K0RBWitEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZckUsTUFBTUEsNEJBQWNDLElBQUFBLGlCQUFVLEVBQ25DLENBQUMsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRSxFQUFFQztJQUMvQixNQUFNLENBQUNDLFdBQVdDLGFBQWEsR0FBR0MsSUFBQUEsZUFBUSxFQUFxQyxFQUFFO0lBQ2pGLE1BQU0sQ0FBQ0MsVUFBVUMsWUFBWSxHQUFHRixJQUFBQSxlQUFRLEVBQTBCO0lBRWxFRyxJQUFBQSwwQkFBbUIsRUFDakJOLEtBQ0E7UUFDRSxPQUFPO1lBQ0xPLE1BQU07Z0JBQ0pILHFCQUFBQSwrQkFBQUEsU0FBVUksS0FBSztnQkFDZixPQUFPLElBQUlDLFFBQXFCQyxDQUFBQTtvQkFDOUJSLGFBQWFTLENBQUFBLE9BQVE7K0JBQUlBOzRCQUFNRDt5QkFBUTtnQkFDekM7WUFDRjtRQUNGO0lBQ0YsR0FDQTtRQUFDTjtLQUFTO0lBR1osTUFBTVEsY0FBYyxPQUFPQztRQUN6QixNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUErQkQsTUFBTUUsTUFBTTtRQUMxRCxNQUFNQyxZQUFZQyxNQUFNQyxJQUFJLENBQUNKLFNBQVMsRUFBRTtRQUN4QyxJQUFJQSxPQUFPO1lBQ1RoQixxQkFBQUEsK0JBQUFBLFNBQVdrQjtZQUNYZixVQUFVa0IsT0FBTyxDQUFDQyxDQUFBQSxXQUFZQSxTQUFTSjtZQUN2Q2QsYUFBYSxFQUFFO1lBQ2ZtQixPQUFPQyxNQUFNLENBQUNULE1BQU1FLE1BQU0sRUFBRTtnQkFBRVEsT0FBTztZQUFHO1FBQzFDO0lBQ0Y7SUFFQUMsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLE1BQU1DLFdBQVc7WUFDZnZCLGFBQWFELENBQUFBO2dCQUNYQSxVQUFVa0IsT0FBTyxDQUFDQyxDQUFBQSxXQUFZQSxTQUFTLEVBQUU7Z0JBQ3pDLE9BQU8sRUFBRTtZQUNYO1FBQ0Y7UUFDQSxNQUFNTSxlQUFlQyxTQUFTQyxjQUFjLENBQUM7UUFDN0NGLHlCQUFBQSxtQ0FBQUEsYUFBY0csZ0JBQWdCLENBQUMsVUFBVUo7UUFDekMsT0FBTztZQUNMQyx5QkFBQUEsbUNBQUFBLGFBQWNJLG1CQUFtQixDQUFDLFVBQVVMO1FBQzlDO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQ0UscUJBQUNNO1FBQ0NDLE1BQUs7UUFDTEMsSUFBRztRQUNIQyxlQUFZO1FBQ1psQyxLQUFLSztRQUNMUixVQUFVQTtRQUNWRSxRQUFRQTtRQUNSb0MsT0FBTztZQUFFQyxTQUFTO1FBQU87UUFDekJDLFVBQVV6Qjs7QUFHaEIifQ==