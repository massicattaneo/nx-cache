e96a4f272fe4098889cabfb4edfb5eb2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WATCHLIST_HEADER_HEIGHT: function() {
        return WATCHLIST_HEADER_HEIGHT;
    },
    WatchlistChat: function() {
        return WatchlistChat;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _workflow = require("@rp/react/common/workflow");
const _workflow1 = require("@rp/react/tanstack-api/workflow");
const _chat = require("@rp/react/web/chat");
const _providers = require("@rp/react/web/common/providers");
const _resultsstorycard = require("@rp/react/web/common/results-story-card");
const _watchlists = require("@rp/react/web/common/watchlists");
const _core = require("@rp/react/web/mui/core");
const _router = require("@rp/react/web/router");
const _DelayedFade = require("./DelayedFade");
const _WatchlistChatBot = require("./WatchlistChatBot");
const _WatchlistChatContainer = require("./WatchlistChatContainer");
const _WatchlistChatHeader = require("./WatchlistChatHeader");
const _WatchlistChatInput = require("./WatchlistChatInput");
const _WatchlistChatMoreActions = require("./WatchlistChatMoreActions");
const _WatchlistChatScrollable = require("./WatchlistChatScrollable");
const _scrollToInteraction = require("./scrollToInteraction");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const sliceAndMapEntities = (entities, entityOffset)=>{
    return entities.slice(entityOffset, entityOffset + _WatchlistChatMoreActions.PARALLEL_ENTITIES_AMOUNT).map((entity)=>{
        var _entity_entityType;
        return {
            key: entity.key,
            name: entity.name,
            type: (_entity_entityType = entity.entityType) !== null && _entity_entityType !== void 0 ? _entity_entityType : ""
        };
    });
};
const getPlaceholder = (variant, selectedEntity)=>{
    if (!selectedEntity) {
        return variant === "new" ? `Ask a question about your Watchlist` : `Ask a follow up about your Watchlist`;
    }
    return variant === "new" ? `Ask a question about ${selectedEntity.name}` : `Ask a follow up about ${selectedEntity.name}`;
};
const PANEL_PADDING = 32;
const WATCHLIST_HEADER_HEIGHT = 64;
function WatchlistChat({ watchlist, enableUseMasterRouter, feedback, setFeedback, enableChatMetrics, webSocketUrl, selectedEntity, resetChat, offsetY = _settings.HEADER_HEIGHT + PANEL_PADDING, entities, chatWidth, sourceFilters, setIsChatCollapsed, showAllPrompts, setShowAllPrompts, entityOffset, setEntityOffset, currentDataView }) {
    var _savedChat_interactions_;
    const { chat: { id, savedChat, isError, isLoading }, scope: { scope, setScope }, files: { fileIds, setFileIds }, watchlist: { watchlistId, setWatchlistId }, ui: { isAuditMode, currentInteraction, setCurrentInteraction, timingsMap }, mutations: { addPrompt, addResponse, editLastQuestion, regenerateLastResponse }, helpers: { resetChatState } } = (0, _chat.useChatDataContext)();
    const { data: workflows = [] } = (0, _workflow1.useWorkflowList)(selectedEntity !== null && selectedEntity !== void 0 ? selectedEntity : {});
    const scrollRef = (0, _react.useRef)(null);
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { enqueueInfo, enqueueError } = (0, _providers.useSnackbar)();
    const { user } = (0, _clerkreact.useUser)();
    var _getUserInitials;
    const userInitials = (_getUserInitials = (0, _utils.getUserInitials)(user === null || user === void 0 ? void 0 : user.fullName)) !== null && _getUserInitials !== void 0 ? _getUserInitials : "";
    var _savedChat_interactions_length;
    const hasInteractions = !!(((_savedChat_interactions_length = savedChat === null || savedChat === void 0 ? void 0 : savedChat.interactions.length) !== null && _savedChat_interactions_length !== void 0 ? _savedChat_interactions_length : 0) > 0 && !currentInteraction || (currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.error) || (currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.stopped));
    const shouldCreateWatchlistInteraction = !hasInteractions && !selectedEntity;
    const chatEntities = (0, _react.useMemo)(()=>{
        if (selectedEntity) {
            const { key, name, entityType } = selectedEntity;
            return [
                {
                    key,
                    name,
                    type: entityType !== null && entityType !== void 0 ? entityType : ""
                }
            ];
        }
        if (shouldCreateWatchlistInteraction) {
            return sliceAndMapEntities(entities, entityOffset);
        }
        return undefined;
    }, [
        entities,
        entityOffset,
        selectedEntity,
        shouldCreateWatchlistInteraction
    ]);
    const variant = id || currentInteraction ? "add" : "new";
    const placeholder = getPlaceholder(variant, selectedEntity);
    const onAuditTrailScroll = (0, _react.useCallback)((_, interactionTimestamp)=>{
        if (!scrollRef.current) return;
        (0, _scrollToInteraction.scrollToInteraction)(scrollRef.current, interactionTimestamp);
    }, []);
    const isValidPrompt = !(watchlist.isClientWatchlist === true) && watchlist.items.length > 0;
    const getCustomTitle = (0, _react.useCallback)((prompt)=>(0, _watchlists.getWatchlistCustomTitle)(prompt, watchlist.name, selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.name), [
        selectedEntity,
        watchlist.name
    ]);
    const onSuggestionClick = (0, _react.useCallback)((suggestion)=>{
        const originWorkflow = workflows.find((item)=>{
            var _suggestion_workflow;
            return item.id === ((_suggestion_workflow = suggestion.workflow) === null || _suggestion_workflow === void 0 ? void 0 : _suggestion_workflow.id);
        });
        if (suggestion.workflow && originWorkflow) {
            const selectedTimeframe = (0, _workflow.getWorkflowDefaultDateFilter)(originWorkflow);
            const selectedData = {
                selectedCompanies: chatEntities,
                selectedTimeframe
            };
            const workflow = {
                originWorkflow,
                selectedData
            };
            const params = (0, _workflow.generatePromptFromWorkflow)({
                originWorkflow,
                selectedData
            });
            var _selectedEntity_category, _selectedEntity_group1;
            addPrompt(_object_spread_props(_object_spread({}, params), {
                customTitle: getCustomTitle(params.customTitle),
                workflow,
                watchlistInfo: {
                    clickedSuggestedPromptText: suggestion.label,
                    suggestedPromptClassification: "workflow",
                    promptContextLevel: selectedEntity ? "entity" : "watchlist",
                    promptCategory: (_selectedEntity_category = selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) !== null && _selectedEntity_category !== void 0 ? _selectedEntity_category : null,
                    promptCompanyType: (selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) === "Companies" ? (_selectedEntity_group1 = selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.group1) !== null && _selectedEntity_group1 !== void 0 ? _selectedEntity_group1 : null : null,
                    dataViewAtClick: currentDataView !== null && currentDataView !== void 0 ? currentDataView : null
                }
            }));
        } else {
            var _suggestion_displayPrompt;
            const prompt = suggestion.prompt(selectedEntity);
            var _suggestion_displayPrompt1, _selectedEntity_category1, _selectedEntity_group11;
            addPrompt({
                displayedMessage: (_suggestion_displayPrompt1 = (_suggestion_displayPrompt = suggestion.displayPrompt) === null || _suggestion_displayPrompt === void 0 ? void 0 : _suggestion_displayPrompt.call(suggestion, selectedEntity)) !== null && _suggestion_displayPrompt1 !== void 0 ? _suggestion_displayPrompt1 : prompt,
                prompt,
                customTitle: getCustomTitle(prompt),
                entities: chatEntities,
                interactionType: shouldCreateWatchlistInteraction ? "watchlist" : undefined,
                watchlistId: watchlist.id,
                watchlistInfo: {
                    clickedSuggestedPromptText: suggestion.label,
                    suggestedPromptClassification: "standard",
                    promptContextLevel: selectedEntity ? "entity" : "watchlist",
                    promptCategory: (_selectedEntity_category1 = selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) !== null && _selectedEntity_category1 !== void 0 ? _selectedEntity_category1 : null,
                    promptCompanyType: (selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) === "Companies" ? (_selectedEntity_group11 = selectedEntity.group1) !== null && _selectedEntity_group11 !== void 0 ? _selectedEntity_group11 : null : null,
                    dataViewAtClick: currentDataView !== null && currentDataView !== void 0 ? currentDataView : null
                }
            });
        }
    }, [
        chatEntities,
        getCustomTitle,
        addPrompt,
        selectedEntity,
        shouldCreateWatchlistInteraction,
        watchlist.id,
        workflows,
        currentDataView
    ]);
    (0, _react.useEffect)(()=>{
        setWatchlistId(watchlist.id);
    }, [
        setWatchlistId,
        watchlist.id
    ]);
    (0, _react.useEffect)(()=>{
        if (isError && currentInteraction) {
            _customerio.chatCustomerIo.abandoned();
        }
    }, [
        currentInteraction,
        id,
        isError
    ]);
    (0, _react.useEffect)(()=>{
        if (isError && id && watchlist.id) {
            navigate(_router.WATCHLIST_ID_ROUTE.replace(":id", watchlist.id), {
                replace: true
            });
            enqueueError("Chat does not exist");
            setCurrentInteraction(undefined);
        }
    }, [
        isError,
        navigate,
        enqueueError,
        id,
        watchlist.id,
        setCurrentInteraction
    ]);
    (0, _react.useEffect)(()=>{
        if (isLoading) return;
        (0, _scrollToInteraction.scrollToInteraction)(scrollRef.current);
    }, [
        isLoading,
        id
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (!id) return;
            _customerio.chatCustomerIo.abandoned();
            resetChatState({
                withNavigation: false,
                resetWatchlistId: false
            });
        };
    }, [
        resetChatState,
        id
    ]);
    const showSuggestions = !id;
    const remainingEntities = entities.length - entityOffset - _WatchlistChatMoreActions.PARALLEL_ENTITIES_AMOUNT;
    const shouldShowAskForMore = savedChat && hasInteractions && ((_savedChat_interactions_ = savedChat.interactions[savedChat.interactions.length - 1]) === null || _savedChat_interactions_ === void 0 ? void 0 : _savedChat_interactions_.origin.type) === "watchlist" && remainingEntities > 0;
    const onAskForMore = (0, _react.useCallback)((offset)=>{
        setEntityOffset(offset);
        var _savedChat_interactions__inputMessage;
        addPrompt({
            prompt: (_savedChat_interactions__inputMessage = savedChat === null || savedChat === void 0 ? void 0 : savedChat.interactions[savedChat.interactions.length - 1].inputMessage) !== null && _savedChat_interactions__inputMessage !== void 0 ? _savedChat_interactions__inputMessage : "Error",
            displayedMessage: `Extend analysis to the next ${Math.min(_WatchlistChatMoreActions.PARALLEL_ENTITIES_AMOUNT, remainingEntities)} constituents`,
            entities: sliceAndMapEntities(entities, offset),
            interactionType: "watchlist",
            watchlistId,
            watchlistInfo: {
                promptContextLevel: "watchlist",
                dataViewAtClick: currentDataView !== null && currentDataView !== void 0 ? currentDataView : null,
                clickedSuggestedPromptText: null,
                promptCategory: null,
                promptCompanyType: null,
                suggestedPromptClassification: null
            }
        });
    }, [
        addPrompt,
        entities,
        remainingEntities,
        savedChat,
        setEntityOffset,
        watchlistId,
        currentDataView
    ]);
    const offsetWithoutHeader = offsetY + WATCHLIST_HEADER_HEIGHT;
    var _feedback_id;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: (theme)=>({
                position: "fixed",
                zIndex: 10,
                width: "100%",
                borderRadius: 4,
                height: `calc(100vh - ${offsetY - 4}px)`,
                backgroundColor: theme.palette.elevation.dp01,
                overscrollBehavior: "contain",
                boxShadow: theme.shadows[24],
                border: `1px solid rgba(255, 255, 255, 0.16)`,
                maxWidth: chatWidth,
                overflow: "hidden"
            }),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatHeader.WatchlistChatHeader, {
                selectedEntity: selectedEntity,
                watchlistName: watchlist.name,
                setIsChatCollapsed: setIsChatCollapsed,
                hasInteractions: hasInteractions,
                onRestart: ()=>resetChat(null),
                hasSelectedEntity: selectedEntity !== null,
                chat: savedChat,
                watchlist: watchlist
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatScrollable.WatchlistChatScrollable, {
                ref: scrollRef,
                height: `calc(100vh - ${offsetWithoutHeader + 95}px)`,
                maxWidth: chatWidth,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatContainer.WatchlistChatContainer, {
                    minHeight: `calc(100vh - ${160 + offsetWithoutHeader}px)`,
                    children: showSuggestions ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_DelayedFade.DelayedFade, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatBot.WatchlistChatBot, {
                            workflows: workflows,
                            setShowAllPrompts: setShowAllPrompts,
                            showAllPrompts: showAllPrompts,
                            offsetY: offsetWithoutHeader,
                            selectedEntity: selectedEntity,
                            watchlist: watchlist,
                            userInitials: userInitials,
                            currentInteraction: currentInteraction,
                            onSuggestionClick: onSuggestionClick
                        })
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            overflowX: "auto",
                            mb: 4,
                            [`& .${_chat.MOBILE_USER_YOU_CONTAINER_CLASS_NAME}`]: {
                                flexGrow: 0,
                                gap: 1
                            },
                            [`& .${_chat.INTERACTION_CLASS_NAME}`]: {
                                mt: 2
                            }
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat.Chat, {
                            parentScrollContainer: scrollRef.current,
                            scrollContainer: scrollRef.current,
                            onAuditTrailScroll: onAuditTrailScroll,
                            variant: "mobile",
                            useMasterRouter: enableUseMasterRouter,
                            chat: savedChat,
                            filesIds: fileIds,
                            auditMode: isAuditMode,
                            onResponseComplete: addResponse,
                            userInitials: userInitials,
                            moreActions: shouldShowAskForMore ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatMoreActions.WatchlistChatMoreActions, {
                                remainingEntities: remainingEntities,
                                onAskForMore: onAskForMore,
                                entityOffset: entityOffset
                            }) : null,
                            onRegenerateResponse: regenerateLastResponse,
                            onEdit: editLastQuestion,
                            watchlistId: watchlistId,
                            onChatFeedbackSuccess: ({ feedbackSentiment, interactionTimestamp })=>{
                                setFeedback((prev)=>_object_spread_props(_object_spread({}, prev), {
                                        [id]: _object_spread_props(_object_spread({}, prev[id]), {
                                            [interactionTimestamp]: feedbackSentiment
                                        })
                                    }));
                            },
                            renderCard: ({ story, interactionTimestamp, chatId }, index)=>{
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_resultsstorycard.ChunkStoryCard, {
                                    onCardClick: ()=>{
                                        _customerio.chatCustomerIo.chunkStoryCardClick({
                                            chatId,
                                            documentId: story.id,
                                            interactionTimestamp
                                        });
                                    },
                                    story: story,
                                    index: index
                                }, story.id);
                            },
                            getTimings: (id)=>timingsMap[id],
                            scope: scope,
                            areMetricsEnabled: enableChatMetrics,
                            currentInteraction: currentInteraction,
                            onError: (_, error)=>{
                                if (error.type === "ERROR") {
                                    setCurrentInteraction((prev)=>{
                                        return prev !== undefined ? _object_spread_props(_object_spread({}, prev), {
                                            error: true
                                        }) : undefined;
                                    });
                                    reportError(new Error(error === null || error === void 0 ? void 0 : error.message));
                                    enqueueInfo(_settings.SUMMARY_ERROR_MESSAGES[(0, _utils.randomIntFromInterval)(0, 4)]);
                                }
                            },
                            chatFeedback: (_feedback_id = feedback[id]) !== null && _feedback_id !== void 0 ? _feedback_id : {},
                            addPrompt: (prompt)=>{
                                var _selectedEntity_category, _selectedEntity_group1;
                                addPrompt({
                                    prompt,
                                    entities: chatEntities,
                                    interactionType: shouldCreateWatchlistInteraction ? "watchlist" : undefined,
                                    watchlistId: watchlist.id,
                                    watchlistInfo: {
                                        clickedSuggestedPromptText: null,
                                        suggestedPromptClassification: null,
                                        dataViewAtClick: currentDataView !== null && currentDataView !== void 0 ? currentDataView : null,
                                        promptContextLevel: selectedEntity ? "entity" : "watchlist",
                                        promptCategory: (_selectedEntity_category = selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) !== null && _selectedEntity_category !== void 0 ? _selectedEntity_category : null,
                                        promptCompanyType: (selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) === "Companies" ? (_selectedEntity_group1 = selectedEntity.group1) !== null && _selectedEntity_group1 !== void 0 ? _selectedEntity_group1 : null : null
                                    }
                                });
                            },
                            webSocketUrl: webSocketUrl
                        })
                    })
                })
            }),
            ((savedChat === null || savedChat === void 0 ? void 0 : savedChat.userId) === (user === null || user === void 0 ? void 0 : user.id) || !savedChat) && /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatInput.WatchlistChatInput, {
                hideOpacity: showSuggestions,
                setScope: setScope,
                scope: scope,
                variant: variant,
                addPrompt: ({ prompt })=>{
                    var _selectedEntity_category, _selectedEntity_group1;
                    return addPrompt({
                        prompt,
                        customTitle: getCustomTitle(prompt),
                        entities: chatEntities,
                        interactionType: shouldCreateWatchlistInteraction ? "watchlist" : undefined,
                        watchlistId: watchlist.id,
                        watchlistInfo: {
                            clickedSuggestedPromptText: null,
                            suggestedPromptClassification: null,
                            dataViewAtClick: currentDataView !== null && currentDataView !== void 0 ? currentDataView : null,
                            promptContextLevel: selectedEntity ? "entity" : "watchlist",
                            promptCategory: (_selectedEntity_category = selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) !== null && _selectedEntity_category !== void 0 ? _selectedEntity_category : null,
                            promptCompanyType: (selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.category) === "Companies" ? (_selectedEntity_group1 = selectedEntity.group1) !== null && _selectedEntity_group1 !== void 0 ? _selectedEntity_group1 : null : null
                        }
                    });
                },
                placeholder: placeholder,
                isValidPrompt: isValidPrompt,
                sourceFilters: sourceFilters,
                filesIds: fileIds,
                setFilesIds: setFileIds,
                currentInteraction: currentInteraction,
                setCurrentInteraction: setCurrentInteraction
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,