ce34983dd27d4d9ccec6dbf1912be89e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatString: function() {
        return formatString;
    },
    modifyDiscoveryPanelData: function() {
        return modifyDiscoveryPanelData;
    }
});
const _material = require("@mui/material");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const formatString = (str)=>str.trim().split("-").map(_material.capitalize).join(" ");
// This function formats the display names for the topics
const formatDisplayNames = (topics)=>topics.map((_param)=>{
        var { group1, group2, group3, group4, group5, name } = _param, rest = _object_without_properties(_param, [
            "group1",
            "group2",
            "group3",
            "group4",
            "group5",
            "name"
        ]);
        return _object_spread({
            name: name.trim()
        }, group1 && {
            group1: formatString(group1)
        }, group2 && {
            group2: formatString(group2)
        }, group3 && {
            group3: formatString(group3)
        }, group4 && {
            group4: formatString(group4)
        }, group5 && {
            group5: formatString(group5)
        }, rest);
    });
// This function groups topics that have the same name
const groupDuplicateTopics = (topics)=>topics.reduce((acc, topic)=>{
        const existingTopicIndex = acc.findIndex((t)=>t.name === topic.name);
        if (existingTopicIndex > -1) {
            const newAcc = acc // thanks eslint for making me do this
            ;
            newAcc[existingTopicIndex].volume += topic.volume;
            return newAcc;
        }
        acc.push(topic);
        return acc;
    }, []);
const modifyTopics = (topics)=>{
    // Format the group names
    const formattedGroupNames = formatDisplayNames(topics);
    // Group topics that have matching name
    const groupedTopics = groupDuplicateTopics(formattedGroupNames);
    // Put them back in order
    const sortedTopics = groupedTopics.sort((a, b)=>b.volume - a.volume);
    return sortedTopics;
};
const modifyDiscoveryPanelData = (data)=>{
    const { topics = [] } = data, rest = _object_without_properties(data, [
        "topics"
    ]);
    return _object_spread({}, rest, topics.length > 0 ? {
        topics: modifyTopics(topics)
    } : {});
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9kaXNjb3Zlcnktc2lkZWJhci9zcmMvaG9va3MvdXNlRGlzY292ZXJ5UGFuZWxQcmV2aWV3LmhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gXCJAbXVpL21hdGVyaWFsXCJcbmltcG9ydCB7IENxc0NhdGVnb3JpZXMsIENxc0l0ZW0gfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuXG4vLyBUaGlzIHJlcGxhY2VzIGRhc2hlcyB3aXRoIHNwYWNlcyBhbmQgY2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmRcbmV4cG9ydCBjb25zdCBmb3JtYXRTdHJpbmcgPSAoc3RyOiBzdHJpbmcpID0+IHN0ci50cmltKCkuc3BsaXQoXCItXCIpLm1hcChjYXBpdGFsaXplKS5qb2luKFwiIFwiKVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGZvcm1hdHMgdGhlIGRpc3BsYXkgbmFtZXMgZm9yIHRoZSB0b3BpY3NcbmNvbnN0IGZvcm1hdERpc3BsYXlOYW1lcyA9ICh0b3BpY3M6IEFycmF5PENxc0l0ZW0+KSA9PlxuICB0b3BpY3MubWFwKCh7IGdyb3VwMSwgZ3JvdXAyLCBncm91cDMsIGdyb3VwNCwgZ3JvdXA1LCBuYW1lLCAuLi5yZXN0IH0pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZS50cmltKCksXG4gICAgICAuLi4oZ3JvdXAxICYmIHsgZ3JvdXAxOiBmb3JtYXRTdHJpbmcoZ3JvdXAxKSB9KSxcbiAgICAgIC4uLihncm91cDIgJiYgeyBncm91cDI6IGZvcm1hdFN0cmluZyhncm91cDIpIH0pLFxuICAgICAgLi4uKGdyb3VwMyAmJiB7IGdyb3VwMzogZm9ybWF0U3RyaW5nKGdyb3VwMykgfSksXG4gICAgICAuLi4oZ3JvdXA0ICYmIHsgZ3JvdXA0OiBmb3JtYXRTdHJpbmcoZ3JvdXA0KSB9KSxcbiAgICAgIC4uLihncm91cDUgJiYgeyBncm91cDU6IGZvcm1hdFN0cmluZyhncm91cDUpIH0pLFxuICAgICAgLi4ucmVzdCxcbiAgICB9XG4gIH0pXG5cbi8vIFRoaXMgZnVuY3Rpb24gZ3JvdXBzIHRvcGljcyB0aGF0IGhhdmUgdGhlIHNhbWUgbmFtZVxuY29uc3QgZ3JvdXBEdXBsaWNhdGVUb3BpY3MgPSAodG9waWNzOiBBcnJheTxDcXNJdGVtPikgPT5cbiAgdG9waWNzLnJlZHVjZSgoYWNjOiBBcnJheTxDcXNJdGVtPiwgdG9waWMpID0+IHtcbiAgICBjb25zdCBleGlzdGluZ1RvcGljSW5kZXggPSBhY2MuZmluZEluZGV4KHQgPT4gdC5uYW1lID09PSB0b3BpYy5uYW1lKVxuXG4gICAgaWYgKGV4aXN0aW5nVG9waWNJbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBuZXdBY2MgPSBhY2MgLy8gdGhhbmtzIGVzbGludCBmb3IgbWFraW5nIG1lIGRvIHRoaXNcbiAgICAgIG5ld0FjY1tleGlzdGluZ1RvcGljSW5kZXhdLnZvbHVtZSArPSB0b3BpYy52b2x1bWVcbiAgICAgIHJldHVybiBuZXdBY2NcbiAgICB9XG5cbiAgICBhY2MucHVzaCh0b3BpYylcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxuXG5jb25zdCBtb2RpZnlUb3BpY3MgPSAodG9waWNzOiBBcnJheTxDcXNJdGVtPikgPT4ge1xuICAvLyBGb3JtYXQgdGhlIGdyb3VwIG5hbWVzXG4gIGNvbnN0IGZvcm1hdHRlZEdyb3VwTmFtZXMgPSBmb3JtYXREaXNwbGF5TmFtZXModG9waWNzKVxuICAvLyBHcm91cCB0b3BpY3MgdGhhdCBoYXZlIG1hdGNoaW5nIG5hbWVcbiAgY29uc3QgZ3JvdXBlZFRvcGljcyA9IGdyb3VwRHVwbGljYXRlVG9waWNzKGZvcm1hdHRlZEdyb3VwTmFtZXMpXG4gIC8vIFB1dCB0aGVtIGJhY2sgaW4gb3JkZXJcbiAgY29uc3Qgc29ydGVkVG9waWNzID0gZ3JvdXBlZFRvcGljcy5zb3J0KChhLCBiKSA9PiBiLnZvbHVtZSAtIGEudm9sdW1lKVxuXG4gIHJldHVybiBzb3J0ZWRUb3BpY3Ncbn1cblxuZXhwb3J0IGNvbnN0IG1vZGlmeURpc2NvdmVyeVBhbmVsRGF0YSA9IChkYXRhOiBDcXNDYXRlZ29yaWVzKTogQ3FzQ2F0ZWdvcmllcyA9PiB7XG4gIGNvbnN0IHsgdG9waWNzID0gW10sIC4uLnJlc3QgfSA9IGRhdGFcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN0LFxuICAgIC4uLih0b3BpY3MubGVuZ3RoID4gMCA/IHsgdG9waWNzOiBtb2RpZnlUb3BpY3ModG9waWNzKSB9IDoge30pLFxuICB9XG59XG4iXSwibmFtZXMiOlsiZm9ybWF0U3RyaW5nIiwibW9kaWZ5RGlzY292ZXJ5UGFuZWxEYXRhIiwic3RyIiwidHJpbSIsInNwbGl0IiwibWFwIiwiY2FwaXRhbGl6ZSIsImpvaW4iLCJmb3JtYXREaXNwbGF5TmFtZXMiLCJ0b3BpY3MiLCJncm91cDEiLCJncm91cDIiLCJncm91cDMiLCJncm91cDQiLCJncm91cDUiLCJuYW1lIiwicmVzdCIsImdyb3VwRHVwbGljYXRlVG9waWNzIiwicmVkdWNlIiwiYWNjIiwidG9waWMiLCJleGlzdGluZ1RvcGljSW5kZXgiLCJmaW5kSW5kZXgiLCJ0IiwibmV3QWNjIiwidm9sdW1lIiwicHVzaCIsIm1vZGlmeVRvcGljcyIsImZvcm1hdHRlZEdyb3VwTmFtZXMiLCJncm91cGVkVG9waWNzIiwic29ydGVkVG9waWNzIiwic29ydCIsImEiLCJiIiwiZGF0YSIsImxlbmd0aCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUlhQSxZQUFZO2VBQVpBOztJQTBDQUMsd0JBQXdCO2VBQXhCQTs7OzBCQTlDYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJcEIsTUFBTUQsZUFBZSxDQUFDRSxNQUFnQkEsSUFBSUMsSUFBSSxHQUFHQyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDQyxvQkFBVSxFQUFFQyxJQUFJLENBQUM7QUFFeEYseURBQXlEO0FBQ3pELE1BQU1DLHFCQUFxQixDQUFDQyxTQUMxQkEsT0FBT0osR0FBRyxDQUFDO1lBQUMsRUFBRUssTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBVyxXQUFOQztZQUFqRE47WUFBUUM7WUFBUUM7WUFBUUM7WUFBUUM7WUFBUUM7O1FBQ3BELE9BQU87WUFDTEEsTUFBTUEsS0FBS1osSUFBSTtXQUNYTyxVQUFVO1lBQUVBLFFBQVFWLGFBQWFVO1FBQVEsR0FDekNDLFVBQVU7WUFBRUEsUUFBUVgsYUFBYVc7UUFBUSxHQUN6Q0MsVUFBVTtZQUFFQSxRQUFRWixhQUFhWTtRQUFRLEdBQ3pDQyxVQUFVO1lBQUVBLFFBQVFiLGFBQWFhO1FBQVEsR0FDekNDLFVBQVU7WUFBRUEsUUFBUWQsYUFBYWM7UUFBUSxHQUMxQ0U7SUFFUDtBQUVGLHNEQUFzRDtBQUN0RCxNQUFNQyx1QkFBdUIsQ0FBQ1IsU0FDNUJBLE9BQU9TLE1BQU0sQ0FBQyxDQUFDQyxLQUFxQkM7UUFDbEMsTUFBTUMscUJBQXFCRixJQUFJRyxTQUFTLENBQUNDLENBQUFBLElBQUtBLEVBQUVSLElBQUksS0FBS0ssTUFBTUwsSUFBSTtRQUVuRSxJQUFJTSxxQkFBcUIsQ0FBQyxHQUFHO1lBQzNCLE1BQU1HLFNBQVNMLElBQUksc0NBQXNDOztZQUN6REssTUFBTSxDQUFDSCxtQkFBbUIsQ0FBQ0ksTUFBTSxJQUFJTCxNQUFNSyxNQUFNO1lBQ2pELE9BQU9EO1FBQ1Q7UUFFQUwsSUFBSU8sSUFBSSxDQUFDTjtRQUNULE9BQU9EO0lBQ1QsR0FBRyxFQUFFO0FBRVAsTUFBTVEsZUFBZSxDQUFDbEI7SUFDcEIseUJBQXlCO0lBQ3pCLE1BQU1tQixzQkFBc0JwQixtQkFBbUJDO0lBQy9DLHVDQUF1QztJQUN2QyxNQUFNb0IsZ0JBQWdCWixxQkFBcUJXO0lBQzNDLHlCQUF5QjtJQUN6QixNQUFNRSxlQUFlRCxjQUFjRSxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRVIsTUFBTSxHQUFHTyxFQUFFUCxNQUFNO0lBRXJFLE9BQU9LO0FBQ1Q7QUFFTyxNQUFNN0IsMkJBQTJCLENBQUNpQztJQUN2QyxNQUFNLEVBQUV6QixTQUFTLEVBQUUsRUFBVyxHQUFHeUIsTUFBVGxCLGtDQUFTa0I7UUFBekJ6Qjs7SUFDUixPQUFPLG1CQUNGTyxNQUNDUCxPQUFPMEIsTUFBTSxHQUFHLElBQUk7UUFBRTFCLFFBQVFrQixhQUFhbEI7SUFBUSxJQUFJLENBQUM7QUFFaEUifQ==