977188faf572472f5e52c9a76b1c834b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "financeProcedures", {
    enumerable: true,
    get: function() {
        return financeProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _generators = require("../../../database/generators");
const _bigdataapiprocedure = require("../bigdata-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const financeProcedures = {
    companyAnalystRatings: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-analyst-ratings"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_AnalystDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyAnalystRatings()
                });
            }, {})
        };
    }),
    companyCurrency: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-currency"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_CurrencyDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyCurrency()
                });
            }, {})
        };
    }),
    companyLatestSurprise: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-latest-surprise"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_EarningsSurpriseDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyLatestSurprise()
                });
            }, {})
        };
    }),
    companyPriceChanges: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-price-changes"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_ChangeDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyPriceChanges()
                });
            }, {})
        };
    }),
    companyPriceTarget: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-price-target"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_PriceTargetDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyPriceTarget()
                });
            }, {})
        };
    }),
    companyQuote: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-quote"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_QuoteDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyQuote()
                });
            }, {})
        };
    }),
    companySentiment: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-sentiment"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_zod.z.object({
        result: _zod.z.record(_contracts.bigdataSchemas.st_bff_data_tools_SentimentBFFToolData)
    })).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companySentiment()
                });
            }, {})
        };
    }),
    companyIncomeStatement: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-income-statement"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_zod.z.object({
        result: _zod.z.record(_contracts.bigdataSchemas.st_bff_data_tools_IncomeStatementBFFResponse)
    })).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyIncomeStatement()
                });
            }, {})
        };
    }),
    companyCashFlowStatement: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-cash-flow-statement"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_zod.z.object({
        result: _zod.z.record(_contracts.bigdataSchemas.st_bff_data_tools_CashFlowStatementBFFResponse)
    })).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyCashFlowStatement()
                });
            }, {})
        };
    }),
    companyBalanceStatement: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-balance-statement"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_BalanceStatementBFFResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyBalanceStatement()
                });
            }, {})
        };
    }),
    companyKeyMetrics: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-key-metrics"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_KeyMetricsDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyKeyMetrics()
                });
            }, {})
        };
    }),
    companyRatios: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/financial-data/company-ratios"
        }
    }).input(_contracts.bigdataSchemas.st_bff_data_tools_BFFRequest).output(_contracts.bigdataSchemas.st_bff_data_tools_RatiosDataToolResponse).query(async ({ input })=>{
        return {
            result: input.entityIds.reduce((acc, entityId)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [entityId]: _generators.financialDataGenerators.companyRatios()
                });
            }, {})
        };
    })
};

//# sourceMappingURL=data:application/json;base64,