e3d7cab1ae12fed2a34ef80727c3aec0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SyncActiveOrganization", {
    enumerable: true,
    get: function() {
        return SyncActiveOrganization;
    }
});
const _react = require("react");
const _clerkreact = require("@clerk/clerk-react");
function SyncActiveOrganization() {
    var _userMemberships_data_, _userMemberships_data;
    const { orgId, isLoaded: isLoadedAuth } = (0, _clerkreact.useAuth)();
    const { setActive, isLoaded: isLoadedOrgs, userMemberships } = (0, _clerkreact.useOrganizationList)({
        userMemberships: {
            infinite: true,
            keepPreviousData: true
        }
    });
    var _userMemberships_data__organization_id;
    const firstOrg = (_userMemberships_data__organization_id = userMemberships === null || userMemberships === void 0 ? void 0 : (_userMemberships_data = userMemberships.data) === null || _userMemberships_data === void 0 ? void 0 : (_userMemberships_data_ = _userMemberships_data[0]) === null || _userMemberships_data_ === void 0 ? void 0 : _userMemberships_data_.organization.id) !== null && _userMemberships_data__organization_id !== void 0 ? _userMemberships_data__organization_id : null;
    (0, _react.useEffect)(()=>{
        if (!isLoadedAuth || !isLoadedOrgs) {
            return;
        }
        if (firstOrg && firstOrg !== orgId && setActive) {
            setActive({
                organization: firstOrg
            });
        }
    }, [
        firstOrg,
        isLoadedAuth,
        isLoadedOrgs,
        orgId,
        setActive
    ]);
    return null;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvU3luY0FjdGl2ZU9yZ2FuaXphdGlvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZUF1dGgsIHVzZU9yZ2FuaXphdGlvbkxpc3QgfSBmcm9tIFwiQGNsZXJrL2NsZXJrLXJlYWN0XCJcblxuLyoqXG4gKiBBbGwgdXNlcnMgbmVlZCB0byBiZSBwYXJ0IG9mIGFuIG9yZ2FuaXphdGlvbi5cbiAqIFN5bmNocm9uaXplcyB0aGUgYWN0aXZlIG9yZ2FuaXphdGlvbiBiYXNlZCBvbiB0aGUgdXNlcidzIG1lbWJlcnNoaXBzLlxuICogVGhpcyBjb21wb25lbnQgdXNlcyB0aGUgYHVzZUF1dGhgIGFuZCBgdXNlT3JnYW5pemF0aW9uTGlzdGAgaG9va3MgZnJvbSB0aGUgYEBjbGVyay9jbGVyay1yZWFjdGAgbGlicmFyeS5cbiAqIEl0IHNldHMgdGhlIGFjdGl2ZSBvcmdhbml6YXRpb24gdG8gdGhlIGZpcnN0IG9yZ2FuaXphdGlvbiBpbiB0aGUgdXNlcidzIG1lbWJlcnNoaXBzIGxpc3QsXG4gKiBpZiBpdCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgY3VycmVudCBhY3RpdmUgb3JnYW5pemF0aW9uLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBTeW5jQWN0aXZlT3JnYW5pemF0aW9uKCkge1xuICBjb25zdCB7IG9yZ0lkLCBpc0xvYWRlZDogaXNMb2FkZWRBdXRoIH0gPSB1c2VBdXRoKClcblxuICBjb25zdCB7XG4gICAgc2V0QWN0aXZlLFxuICAgIGlzTG9hZGVkOiBpc0xvYWRlZE9yZ3MsXG4gICAgdXNlck1lbWJlcnNoaXBzLFxuICB9ID0gdXNlT3JnYW5pemF0aW9uTGlzdCh7XG4gICAgdXNlck1lbWJlcnNoaXBzOiB7XG4gICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgIGtlZXBQcmV2aW91c0RhdGE6IHRydWUsXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBmaXJzdE9yZyA9IHVzZXJNZW1iZXJzaGlwcz8uZGF0YT8uWzBdPy5vcmdhbml6YXRpb24uaWQgPz8gbnVsbFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0xvYWRlZEF1dGggfHwgIWlzTG9hZGVkT3Jncykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGZpcnN0T3JnICYmIGZpcnN0T3JnICE9PSBvcmdJZCAmJiBzZXRBY3RpdmUpIHtcbiAgICAgIHNldEFjdGl2ZSh7IG9yZ2FuaXphdGlvbjogZmlyc3RPcmcgfSlcbiAgICB9XG4gIH0sIFtmaXJzdE9yZywgaXNMb2FkZWRBdXRoLCBpc0xvYWRlZE9yZ3MsIG9yZ0lkLCBzZXRBY3RpdmVdKVxuXG4gIHJldHVybiBudWxsXG59XG4iXSwibmFtZXMiOlsiU3luY0FjdGl2ZU9yZ2FuaXphdGlvbiIsInVzZXJNZW1iZXJzaGlwcyIsIm9yZ0lkIiwiaXNMb2FkZWQiLCJpc0xvYWRlZEF1dGgiLCJ1c2VBdXRoIiwic2V0QWN0aXZlIiwiaXNMb2FkZWRPcmdzIiwidXNlT3JnYW5pemF0aW9uTGlzdCIsImluZmluaXRlIiwia2VlcFByZXZpb3VzRGF0YSIsImZpcnN0T3JnIiwiZGF0YSIsIm9yZ2FuaXphdGlvbiIsImlkIiwidXNlRWZmZWN0Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBV2dCQTs7O2VBQUFBOzs7dUJBWFU7NEJBQ21CO0FBVXRDLFNBQVNBO1FBY0dDLHdCQUFBQTtJQWJqQixNQUFNLEVBQUVDLEtBQUssRUFBRUMsVUFBVUMsWUFBWSxFQUFFLEdBQUdDLElBQUFBLG1CQUFPO0lBRWpELE1BQU0sRUFDSkMsU0FBUyxFQUNUSCxVQUFVSSxZQUFZLEVBQ3RCTixlQUFlLEVBQ2hCLEdBQUdPLElBQUFBLCtCQUFtQixFQUFDO1FBQ3RCUCxpQkFBaUI7WUFDZlEsVUFBVTtZQUNWQyxrQkFBa0I7UUFDcEI7SUFDRjtRQUVpQlQ7SUFBakIsTUFBTVUsV0FBV1YsQ0FBQUEseUNBQUFBLDRCQUFBQSx1Q0FBQUEsd0JBQUFBLGdCQUFpQlcsSUFBSSxjQUFyQlgsNkNBQUFBLHlCQUFBQSxxQkFBdUIsQ0FBQyxFQUFFLGNBQTFCQSw2Q0FBQUEsdUJBQTRCWSxZQUFZLENBQUNDLEVBQUUsY0FBM0NiLG9EQUFBQSx5Q0FBK0M7SUFFaEVjLElBQUFBLGdCQUFTLEVBQUM7UUFDUixJQUFJLENBQUNYLGdCQUFnQixDQUFDRyxjQUFjO1lBQ2xDO1FBQ0Y7UUFFQSxJQUFJSSxZQUFZQSxhQUFhVCxTQUFTSSxXQUFXO1lBQy9DQSxVQUFVO2dCQUFFTyxjQUFjRjtZQUFTO1FBQ3JDO0lBQ0YsR0FBRztRQUFDQTtRQUFVUDtRQUFjRztRQUFjTDtRQUFPSTtLQUFVO0lBRTNELE9BQU87QUFDVCJ9