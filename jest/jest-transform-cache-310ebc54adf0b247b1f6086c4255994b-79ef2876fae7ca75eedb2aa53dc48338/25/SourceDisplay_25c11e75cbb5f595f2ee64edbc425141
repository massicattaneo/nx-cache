0ff178567ef8fe902041a1289a9d8cee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LoadingSourceDisplay: function() {
        return LoadingSourceDisplay;
    },
    SourceDisplay: function() {
        return SourceDisplay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _core = require("@rp/react/web/mui/core");
const _DocumentIcon = require("../DocumentIcon");
const _EllipsisTooltip = require("../EllipsisTooltip");
const _SourceImageDisplay = require("./SourceImageDisplay");
const LoadingSourceDisplay = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
        width: 302,
        height: 92,
        variant: "rectangular",
        sx: {
            borderRadius: 1,
            transform: "none"
        }
    });
const SourceDisplay = ({ isLoading, source, onClick, showTooltips = true, name, ts })=>{
    var _ids_srcKey;
    const { hd, srcKey } = source;
    const { ids, addByIds } = (0, _cqsbyids.useCqsByIdsContext)();
    // TODO: Retrieve this info from BE
    const documentScope = "news";
    const isPrivate = srcKey === "000000";
    (0, _react.useEffect)(()=>{
        if (srcKey) {
            addByIds([
                {
                    key: srcKey,
                    queryType: "source"
                }
            ]);
        }
    }, [
        srcKey,
        addByIds,
        ids
    ]);
    if (isLoading || ((_ids_srcKey = ids[srcKey]) === null || _ids_srcKey === void 0 ? void 0 : _ids_srcKey.isLoading)) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(LoadingSourceDisplay, {});
    }
    const height = _settings.BIG_SUMMARY_SOURCE_HEIGHT - 2;
    var _hd_match;
    const [ext = ""] = (_hd_match = hd.match(/\.[0-9a-z]+$/i)) !== null && _hd_match !== void 0 ? _hd_match : [];
    return srcKey && name ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        onClick: onClick,
        sx: (theme)=>({
                zIndex: 0,
                width: 276,
                height,
                border: `1px solid ${theme.palette.outline.border}`,
                borderRadius: 2,
                display: "flex",
                "&:hover": {
                    cursor: "pointer",
                    backgroundColor: "elevation.dp08"
                }
            }),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SourceImageDisplay.SourceImageDisplay, {
                    sx: {
                        p: 0,
                        height,
                        "& img": {
                            maxWidth: "130px",
                            height,
                            objectFit: "cover",
                            borderRadius: "8px 0 0 8px"
                        }
                    },
                    height: height,
                    sources: [
                        source
                    ],
                    isSummaryCompleted: true
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    flexGrow: 0,
                    p: "12px",
                    overflow: "hidden"
                },
                children: [
                    showTooltips ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_EllipsisTooltip.EllipsisTooltip, {
                        vertical: true,
                        tooltipText: hd,
                        typographyProps: {
                            style: {
                                lineHeight: 1.2,
                                minHeight: 40
                            }
                        },
                        children: hd
                    }) : hd,
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        sx: {
                            pt: 1,
                            display: "flex",
                            "& span": {
                                color: "text.secondary"
                            }
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_DocumentIcon.DocumentIcon, {
                                documentScope: isPrivate ? "files" : documentScope,
                                srcKey: srcKey,
                                contentType: ext.replace(".", ""),
                                text: name
                            }),
                            ts ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                                component: "span",
                                sx: {
                                    flexShrink: 0,
                                    fontSize: 12
                                },
                                children: [
                                    "Â· ",
                                    (0, _utils.getTimePassed)(ts)
                                ]
                            }) : null
                        ]
                    })
                ]
            })
        ]
    }) : null;
};

//# sourceMappingURL=data:application/json;base64,