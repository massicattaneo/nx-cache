bee03d79af6659d52c12021b6b2c645f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useUpdateSchedule", {
    enumerable: true,
    get: function() {
        return useUpdateSchedule;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _axios = require("axios");
const _notifications = require("@rp/react/tanstack-api/notifications");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _core = require("@rp/react/web/mui/core");
const _reactquery = require("@tanstack/react-query");
const _Snackbar = require("../Snackbar");
const useSlackInviteToChannel = ()=>{
    return (0, _reactquery.useMutation)({
        mutationFn: _notifications.slackInviteToChannel
    });
};
const useUpdateSchedule = ()=>{
    const { enqueueError, enqueueSuccess } = (0, _Snackbar.useSnackbar)();
    const { mutateAsync: patchQuery } = (0, _userdataqueries.useUpdateSavedQueryField)({
        enqueueError
    });
    const { mutateAsync: invite } = useSlackInviteToChannel();
    const { data } = (0, _notifications.useSlackValidateAccess)();
    const mutateAsync = (0, _react.useCallback)(async ({ queryId, queryName, schedules, channelId, destination, deleteAll })=>{
        const successMessage = (()=>{
            if (deleteAll) {
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    children: [
                        "You will no longer receive notifications from",
                        " ",
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            fontWeight: 700,
                            component: "span",
                            children: queryName
                        })
                    ]
                });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                children: [
                    "Your notifications for",
                    " ",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        fontWeight: 700,
                        component: "span",
                        children: queryName
                    }),
                    " ",
                    "have been updated"
                ]
            });
        })();
        const errorMessage = (()=>{
            if (deleteAll) {
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    children: [
                        "There was an error turning off all the notifications for",
                        " ",
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            fontWeight: 700,
                            component: "span",
                            children: queryName
                        })
                    ]
                });
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                children: [
                    "There was an error updating your",
                    " ",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        fontWeight: 700,
                        component: "span",
                        children: queryName
                    }),
                    " ",
                    "notifications"
                ]
            });
        })();
        try {
            if (destination === "slack") {
                await new Promise((res, rej)=>{
                    if (channelId && (data === null || data === void 0 ? void 0 : data.access) && (data === null || data === void 0 ? void 0 : data.slackUserId) !== channelId) {
                        return invite({
                            channelId
                        }).then(()=>res()).catch(rej);
                    }
                    return res();
                });
            }
            await patchQuery({
                id: queryId,
                fields: {
                    schedules
                }
            }).then(()=>{
                enqueueSuccess(successMessage);
            });
        } catch (e) {
            var _e_response;
            if (e instanceof _axios.AxiosError && ((_e_response = e.response) === null || _e_response === void 0 ? void 0 : _e_response.status) === 403) return;
            enqueueError(errorMessage);
        }
    }, [
        data,
        enqueueError,
        enqueueSuccess,
        invite,
        patchQuery
    ]);
    return {
        mutateAsync
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL1NsYWNrL3NsYWNrQ29udGV4dEhvb2tzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUsIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tIFwiYXhpb3NcIlxuaW1wb3J0IHsgVXBkYXRlTm90aWZpY2F0aW9uTXV0YXRpb24gfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgc2xhY2tJbnZpdGVUb0NoYW5uZWwsIHVzZVNsYWNrVmFsaWRhdGVBY2Nlc3MgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9ub3RpZmljYXRpb25zXCJcbmltcG9ydCB7IHVzZVVwZGF0ZVNhdmVkUXVlcnlGaWVsZCB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3VzZXItZGF0YS1xdWVyaWVzXCJcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5pbXBvcnQgeyB1c2VNdXRhdGlvbiB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiLi4vU25hY2tiYXJcIlxuXG5jb25zdCB1c2VTbGFja0ludml0ZVRvQ2hhbm5lbCA9ICgpID0+IHtcbiAgcmV0dXJuIHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiBzbGFja0ludml0ZVRvQ2hhbm5lbCxcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHVzZVVwZGF0ZVNjaGVkdWxlID0gKCkgPT4ge1xuICBjb25zdCB7IGVucXVldWVFcnJvciwgZW5xdWV1ZVN1Y2Nlc3MgfSA9IHVzZVNuYWNrYmFyKClcbiAgY29uc3QgeyBtdXRhdGVBc3luYzogcGF0Y2hRdWVyeSB9ID0gdXNlVXBkYXRlU2F2ZWRRdWVyeUZpZWxkKHsgZW5xdWV1ZUVycm9yIH0pXG4gIGNvbnN0IHsgbXV0YXRlQXN5bmM6IGludml0ZSB9ID0gdXNlU2xhY2tJbnZpdGVUb0NoYW5uZWwoKVxuICBjb25zdCB7IGRhdGEgfSA9IHVzZVNsYWNrVmFsaWRhdGVBY2Nlc3MoKVxuICBjb25zdCBtdXRhdGVBc3luYyA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh7XG4gICAgICBxdWVyeUlkLFxuICAgICAgcXVlcnlOYW1lLFxuICAgICAgc2NoZWR1bGVzLFxuICAgICAgY2hhbm5lbElkLFxuICAgICAgZGVzdGluYXRpb24sXG4gICAgICBkZWxldGVBbGwsXG4gICAgfTogVXBkYXRlTm90aWZpY2F0aW9uTXV0YXRpb24pID0+IHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NNZXNzYWdlID0gKCgpOiBSZWFjdE5vZGUgPT4ge1xuICAgICAgICBpZiAoZGVsZXRlQWxsKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICBZb3Ugd2lsbCBubyBsb25nZXIgcmVjZWl2ZSBub3RpZmljYXRpb25zIGZyb217XCIgXCJ9XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGZvbnRXZWlnaHQ9ezcwMH0gY29tcG9uZW50PVwic3BhblwiPlxuICAgICAgICAgICAgICAgIHtxdWVyeU5hbWV9XG4gICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VHlwb2dyYXBoeT5cbiAgICAgICAgICAgIFlvdXIgbm90aWZpY2F0aW9ucyBmb3J7XCIgXCJ9XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBmb250V2VpZ2h0PXs3MDB9IGNvbXBvbmVudD1cInNwYW5cIj5cbiAgICAgICAgICAgICAge3F1ZXJ5TmFtZX1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT57XCIgXCJ9XG4gICAgICAgICAgICBoYXZlIGJlZW4gdXBkYXRlZFxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgKVxuICAgICAgfSkoKVxuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKCgpOiBSZWFjdE5vZGUgPT4ge1xuICAgICAgICBpZiAoZGVsZXRlQWxsKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICBUaGVyZSB3YXMgYW4gZXJyb3IgdHVybmluZyBvZmYgYWxsIHRoZSBub3RpZmljYXRpb25zIGZvcntcIiBcIn1cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgZm9udFdlaWdodD17NzAwfSBjb21wb25lbnQ9XCJzcGFuXCI+XG4gICAgICAgICAgICAgICAge3F1ZXJ5TmFtZX1cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUeXBvZ3JhcGh5PlxuICAgICAgICAgICAgVGhlcmUgd2FzIGFuIGVycm9yIHVwZGF0aW5nIHlvdXJ7XCIgXCJ9XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBmb250V2VpZ2h0PXs3MDB9IGNvbXBvbmVudD1cInNwYW5cIj5cbiAgICAgICAgICAgICAge3F1ZXJ5TmFtZX1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT57XCIgXCJ9XG4gICAgICAgICAgICBub3RpZmljYXRpb25zXG4gICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICApXG4gICAgICB9KSgpXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gXCJzbGFja1wiKSB7XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hhbm5lbElkICYmIGRhdGE/LmFjY2VzcyAmJiBkYXRhPy5zbGFja1VzZXJJZCAhPT0gY2hhbm5lbElkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpbnZpdGUoeyBjaGFubmVsSWQgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiByZXMoKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2gocmVqKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcygpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBwYXRjaFF1ZXJ5KHtcbiAgICAgICAgICBpZDogcXVlcnlJZCxcbiAgICAgICAgICBmaWVsZHM6IHsgc2NoZWR1bGVzIH0sXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGVucXVldWVTdWNjZXNzKHN1Y2Nlc3NNZXNzYWdlKVxuICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgJiYgZS5yZXNwb25zZT8uc3RhdHVzID09PSA0MDMpIHJldHVyblxuICAgICAgICBlbnF1ZXVlRXJyb3IoZXJyb3JNZXNzYWdlKVxuICAgICAgfVxuICAgIH0sXG4gICAgW2RhdGEsIGVucXVldWVFcnJvciwgZW5xdWV1ZVN1Y2Nlc3MsIGludml0ZSwgcGF0Y2hRdWVyeV0sXG4gIClcblxuICByZXR1cm4geyBtdXRhdGVBc3luYyB9XG59XG4iXSwibmFtZXMiOlsidXNlVXBkYXRlU2NoZWR1bGUiLCJ1c2VTbGFja0ludml0ZVRvQ2hhbm5lbCIsInVzZU11dGF0aW9uIiwibXV0YXRpb25GbiIsInNsYWNrSW52aXRlVG9DaGFubmVsIiwiZW5xdWV1ZUVycm9yIiwiZW5xdWV1ZVN1Y2Nlc3MiLCJ1c2VTbmFja2JhciIsIm11dGF0ZUFzeW5jIiwicGF0Y2hRdWVyeSIsInVzZVVwZGF0ZVNhdmVkUXVlcnlGaWVsZCIsImludml0ZSIsImRhdGEiLCJ1c2VTbGFja1ZhbGlkYXRlQWNjZXNzIiwidXNlQ2FsbGJhY2siLCJxdWVyeUlkIiwicXVlcnlOYW1lIiwic2NoZWR1bGVzIiwiY2hhbm5lbElkIiwiZGVzdGluYXRpb24iLCJkZWxldGVBbGwiLCJzdWNjZXNzTWVzc2FnZSIsIlR5cG9ncmFwaHkiLCJmb250V2VpZ2h0IiwiY29tcG9uZW50IiwiZXJyb3JNZXNzYWdlIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsImFjY2VzcyIsInNsYWNrVXNlcklkIiwidGhlbiIsImNhdGNoIiwiaWQiLCJmaWVsZHMiLCJlIiwiQXhpb3NFcnJvciIsInJlc3BvbnNlIiwic3RhdHVzIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBZWFBOzs7ZUFBQUE7Ozs7dUJBZjBCO3VCQUNaOytCQUVrQztpQ0FDcEI7c0JBQ2Q7NEJBQ0M7MEJBQ0E7QUFFNUIsTUFBTUMsMEJBQTBCO0lBQzlCLE9BQU9DLElBQUFBLHVCQUFXLEVBQUM7UUFDakJDLFlBQVlDLG1DQUFvQjtJQUNsQztBQUNGO0FBRU8sTUFBTUosb0JBQW9CO0lBQy9CLE1BQU0sRUFBRUssWUFBWSxFQUFFQyxjQUFjLEVBQUUsR0FBR0MsSUFBQUEscUJBQVc7SUFDcEQsTUFBTSxFQUFFQyxhQUFhQyxVQUFVLEVBQUUsR0FBR0MsSUFBQUEseUNBQXdCLEVBQUM7UUFBRUw7SUFBYTtJQUM1RSxNQUFNLEVBQUVHLGFBQWFHLE1BQU0sRUFBRSxHQUFHVjtJQUNoQyxNQUFNLEVBQUVXLElBQUksRUFBRSxHQUFHQyxJQUFBQSxxQ0FBc0I7SUFDdkMsTUFBTUwsY0FBY00sSUFBQUEsa0JBQVcsRUFDN0IsT0FBTyxFQUNMQyxPQUFPLEVBQ1BDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFdBQVcsRUFDWEMsU0FBUyxFQUNrQjtRQUMzQixNQUFNQyxpQkFBaUIsQUFBQyxDQUFBO1lBQ3RCLElBQUlELFdBQVc7Z0JBQ2IscUJBQ0Usc0JBQUNFLGdCQUFVOzt3QkFBQzt3QkFDb0M7c0NBQzlDLHFCQUFDQSxnQkFBVTs0QkFBQ0MsWUFBWTs0QkFBS0MsV0FBVTtzQ0FDcENSOzs7O1lBSVQ7WUFDQSxxQkFDRSxzQkFBQ00sZ0JBQVU7O29CQUFDO29CQUNhO2tDQUN2QixxQkFBQ0EsZ0JBQVU7d0JBQUNDLFlBQVk7d0JBQUtDLFdBQVU7a0NBQ3BDUjs7b0JBQ1c7b0JBQUk7OztRQUl4QixDQUFBO1FBQ0EsTUFBTVMsZUFBZSxBQUFDLENBQUE7WUFDcEIsSUFBSUwsV0FBVztnQkFDYixxQkFDRSxzQkFBQ0UsZ0JBQVU7O3dCQUFDO3dCQUMrQztzQ0FDekQscUJBQUNBLGdCQUFVOzRCQUFDQyxZQUFZOzRCQUFLQyxXQUFVO3NDQUNwQ1I7Ozs7WUFJVDtZQUNBLHFCQUNFLHNCQUFDTSxnQkFBVTs7b0JBQUM7b0JBQ3VCO2tDQUNqQyxxQkFBQ0EsZ0JBQVU7d0JBQUNDLFlBQVk7d0JBQUtDLFdBQVU7a0NBQ3BDUjs7b0JBQ1c7b0JBQUk7OztRQUl4QixDQUFBO1FBRUEsSUFBSTtZQUNGLElBQUlHLGdCQUFnQixTQUFTO2dCQUMzQixNQUFNLElBQUlPLFFBQWMsQ0FBQ0MsS0FBS0M7b0JBQzVCLElBQUlWLGNBQWFOLGlCQUFBQSwyQkFBQUEsS0FBTWlCLE1BQU0sS0FBSWpCLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTWtCLFdBQVcsTUFBS1osV0FBVzt3QkFDaEUsT0FBT1AsT0FBTzs0QkFBRU87d0JBQVUsR0FDdkJhLElBQUksQ0FBQyxJQUFNSixPQUNYSyxLQUFLLENBQUNKO29CQUNYO29CQUNBLE9BQU9EO2dCQUNUO1lBQ0Y7WUFDQSxNQUFNbEIsV0FBVztnQkFDZndCLElBQUlsQjtnQkFDSm1CLFFBQVE7b0JBQUVqQjtnQkFBVTtZQUN0QixHQUFHYyxJQUFJLENBQUM7Z0JBQ056QixlQUFlZTtZQUNqQjtRQUNGLEVBQUUsT0FBT2MsR0FBWTtnQkFDWUE7WUFBL0IsSUFBSUEsYUFBYUMsaUJBQVUsSUFBSUQsRUFBQUEsY0FBQUEsRUFBRUUsUUFBUSxjQUFWRixrQ0FBQUEsWUFBWUcsTUFBTSxNQUFLLEtBQUs7WUFDM0RqQyxhQUFhb0I7UUFDZjtJQUNGLEdBQ0E7UUFBQ2I7UUFBTVA7UUFBY0M7UUFBZ0JLO1FBQVFGO0tBQVc7SUFHMUQsT0FBTztRQUFFRDtJQUFZO0FBQ3ZCIn0=