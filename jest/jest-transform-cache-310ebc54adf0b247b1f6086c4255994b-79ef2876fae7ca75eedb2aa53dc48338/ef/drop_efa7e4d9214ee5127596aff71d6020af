4225b6158e3da119614761f444faa369
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createDrop", {
    enumerable: true,
    get: function() {
        return createDrop;
    }
});
const _invariant = require("@react-dnd/invariant");
const _js_utils = require("../../utils/js_utils.js");
const _types = require("./types.js");
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function createDrop(manager) {
    return function drop(options = {}) {
        const monitor = manager.getMonitor();
        const registry = manager.getRegistry();
        verifyInvariants(monitor);
        const targetIds = getDroppableTargets(monitor);
        // Multiple actions are dispatched here, which is why this doesn't return an action
        targetIds.forEach((targetId, index)=>{
            const dropResult = determineDropResult(targetId, index, registry, monitor);
            const action = {
                type: _types.DROP,
                payload: {
                    dropResult: _objectSpread({}, options, dropResult)
                }
            };
            manager.dispatch(action);
        });
    };
}
function verifyInvariants(monitor) {
    (0, _invariant.invariant)(monitor.isDragging(), 'Cannot call drop while not dragging.');
    (0, _invariant.invariant)(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
}
function determineDropResult(targetId, index, registry, monitor) {
    const target = registry.getTarget(targetId);
    let dropResult = target ? target.drop(monitor, targetId) : undefined;
    verifyDropResultType(dropResult);
    if (typeof dropResult === 'undefined') {
        dropResult = index === 0 ? {} : monitor.getDropResult();
    }
    return dropResult;
}
function verifyDropResultType(dropResult) {
    (0, _invariant.invariant)(typeof dropResult === 'undefined' || (0, _js_utils.isObject)(dropResult), 'Drop result must either be an object or undefined.');
}
function getDroppableTargets(monitor) {
    const targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
    targetIds.reverse();
    return targetIds;
} //# sourceMappingURL=drop.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY3Rpb25zL2RyYWdEcm9wL2Ryb3AudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnXG5cbmltcG9ydCB0eXBlIHtcblx0QWN0aW9uLFxuXHREcmFnRHJvcE1hbmFnZXIsXG5cdERyYWdEcm9wTW9uaXRvcixcblx0RHJvcFBheWxvYWQsXG5cdEhhbmRsZXJSZWdpc3RyeSxcblx0SWRlbnRpZmllcixcbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy5qcydcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvanNfdXRpbHMuanMnXG5pbXBvcnQgeyBEUk9QIH0gZnJvbSAnLi90eXBlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyb3AobWFuYWdlcjogRHJhZ0Ryb3BNYW5hZ2VyKSB7XG5cdHJldHVybiBmdW5jdGlvbiBkcm9wKG9wdGlvbnMgPSB7fSk6IHZvaWQge1xuXHRcdGNvbnN0IG1vbml0b3IgPSBtYW5hZ2VyLmdldE1vbml0b3IoKVxuXHRcdGNvbnN0IHJlZ2lzdHJ5ID0gbWFuYWdlci5nZXRSZWdpc3RyeSgpXG5cdFx0dmVyaWZ5SW52YXJpYW50cyhtb25pdG9yKVxuXHRcdGNvbnN0IHRhcmdldElkcyA9IGdldERyb3BwYWJsZVRhcmdldHMobW9uaXRvcilcblxuXHRcdC8vIE11bHRpcGxlIGFjdGlvbnMgYXJlIGRpc3BhdGNoZWQgaGVyZSwgd2hpY2ggaXMgd2h5IHRoaXMgZG9lc24ndCByZXR1cm4gYW4gYWN0aW9uXG5cdFx0dGFyZ2V0SWRzLmZvckVhY2goKHRhcmdldElkLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgZHJvcFJlc3VsdCA9IGRldGVybWluZURyb3BSZXN1bHQodGFyZ2V0SWQsIGluZGV4LCByZWdpc3RyeSwgbW9uaXRvcilcblx0XHRcdGNvbnN0IGFjdGlvbjogQWN0aW9uPERyb3BQYXlsb2FkPiA9IHtcblx0XHRcdFx0dHlwZTogRFJPUCxcblx0XHRcdFx0cGF5bG9hZDoge1xuXHRcdFx0XHRcdGRyb3BSZXN1bHQ6IHtcblx0XHRcdFx0XHRcdC4uLm9wdGlvbnMsXG5cdFx0XHRcdFx0XHQuLi5kcm9wUmVzdWx0LFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9XG5cdFx0XHRtYW5hZ2VyLmRpc3BhdGNoKGFjdGlvbilcblx0XHR9KVxuXHR9XG59XG5cbmZ1bmN0aW9uIHZlcmlmeUludmFyaWFudHMobW9uaXRvcjogRHJhZ0Ryb3BNb25pdG9yKSB7XG5cdGludmFyaWFudChtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGRyb3Agd2hpbGUgbm90IGRyYWdnaW5nLicpXG5cdGludmFyaWFudChcblx0XHQhbW9uaXRvci5kaWREcm9wKCksXG5cdFx0J0Nhbm5vdCBjYWxsIGRyb3AgdHdpY2UgZHVyaW5nIG9uZSBkcmFnIG9wZXJhdGlvbi4nLFxuXHQpXG59XG5cbmZ1bmN0aW9uIGRldGVybWluZURyb3BSZXN1bHQoXG5cdHRhcmdldElkOiBJZGVudGlmaWVyLFxuXHRpbmRleDogbnVtYmVyLFxuXHRyZWdpc3RyeTogSGFuZGxlclJlZ2lzdHJ5LFxuXHRtb25pdG9yOiBEcmFnRHJvcE1vbml0b3IsXG4pIHtcblx0Y29uc3QgdGFyZ2V0ID0gcmVnaXN0cnkuZ2V0VGFyZ2V0KHRhcmdldElkKVxuXHRsZXQgZHJvcFJlc3VsdCA9IHRhcmdldCA/IHRhcmdldC5kcm9wKG1vbml0b3IsIHRhcmdldElkKSA6IHVuZGVmaW5lZFxuXHR2ZXJpZnlEcm9wUmVzdWx0VHlwZShkcm9wUmVzdWx0KVxuXHRpZiAodHlwZW9mIGRyb3BSZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0ZHJvcFJlc3VsdCA9IGluZGV4ID09PSAwID8ge30gOiBtb25pdG9yLmdldERyb3BSZXN1bHQoKVxuXHR9XG5cdHJldHVybiBkcm9wUmVzdWx0XG59XG5cbmZ1bmN0aW9uIHZlcmlmeURyb3BSZXN1bHRUeXBlKGRyb3BSZXN1bHQ6IGFueSkge1xuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIGRyb3BSZXN1bHQgPT09ICd1bmRlZmluZWQnIHx8IGlzT2JqZWN0KGRyb3BSZXN1bHQpLFxuXHRcdCdEcm9wIHJlc3VsdCBtdXN0IGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgdW5kZWZpbmVkLicsXG5cdClcbn1cblxuZnVuY3Rpb24gZ2V0RHJvcHBhYmxlVGFyZ2V0cyhtb25pdG9yOiBEcmFnRHJvcE1vbml0b3IpIHtcblx0Y29uc3QgdGFyZ2V0SWRzID0gbW9uaXRvclxuXHRcdC5nZXRUYXJnZXRJZHMoKVxuXHRcdC5maWx0ZXIobW9uaXRvci5jYW5Ecm9wT25UYXJnZXQsIG1vbml0b3IpXG5cdHRhcmdldElkcy5yZXZlcnNlKClcblx0cmV0dXJuIHRhcmdldElkc1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZURyb3AiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIm1hbmFnZXIiLCJkcm9wIiwib3B0aW9ucyIsIm1vbml0b3IiLCJnZXRNb25pdG9yIiwicmVnaXN0cnkiLCJnZXRSZWdpc3RyeSIsInZlcmlmeUludmFyaWFudHMiLCJ0YXJnZXRJZHMiLCJnZXREcm9wcGFibGVUYXJnZXRzIiwiZm9yRWFjaCIsInRhcmdldElkIiwiaW5kZXgiLCJkcm9wUmVzdWx0IiwiZGV0ZXJtaW5lRHJvcFJlc3VsdCIsImFjdGlvbiIsInR5cGUiLCJEUk9QIiwicGF5bG9hZCIsIl9vYmplY3RTcHJlYWQiLCJkaXNwYXRjaCIsImludmFyaWFudCIsImlzRHJhZ2dpbmciLCJkaWREcm9wIiwidGFyZ2V0IiwiZ2V0VGFyZ2V0IiwidW5kZWZpbmVkIiwidmVyaWZ5RHJvcFJlc3VsdFR5cGUiLCJnZXREcm9wUmVzdWx0IiwiaXNPYmplY3QiLCJnZXRUYXJnZXRJZHMiLCJmaWx0ZXIiLCJjYW5Ecm9wT25UYXJnZXQiLCJyZXZlcnNlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBYWdCQTs7O2VBQUFBOzs7MkJBYlU7MEJBVUQ7dUJBQ0o7QUFYckIsU0FBQUMsZ0JBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxLQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYU8sU0FBU0osV0FBV0ssT0FBd0I7SUFDbEQsT0FBTyxTQUFTQyxLQUFLQyxVQUFVLENBQUEsQ0FBRTtRQUNoQyxNQUFNQyxVQUFVSCxRQUFRSSxVQUFVO1FBQ2xDLE1BQU1DLFdBQVdMLFFBQVFNLFdBQVc7UUFDcENDLGlCQUFpQko7UUFDakIsTUFBTUssWUFBWUMsb0JBQW9CTjtRQUV0QyxtRkFBbUY7UUFDbkZLLFVBQVVFLE9BQU8sQ0FBQyxDQUFDQyxVQUFVQztZQUM1QixNQUFNQyxhQUFhQyxvQkFBb0JILFVBQVVDLE9BQU9QLFVBQVVGO1lBQ2xFLE1BQU1ZLFNBQThCO2dCQUNuQ0MsTUFBTUMsV0FBSTtnQkFDVkMsU0FBUztvQkFDUkwsWUFBWU0sY0FBQSxDQUFBLEdBQ1JqQixTQUNBVzs7O1lBSU5iLFFBQVFvQixRQUFRLENBQUNMOzs7O0FBS3BCLFNBQVNSLGlCQUFpQkosT0FBd0I7SUFDakRrQixJQUFBQSxvQkFBUyxFQUFDbEIsUUFBUW1CLFVBQVUsSUFBSTtJQUNoQ0QsSUFBQUEsb0JBQVMsRUFDUixDQUFDbEIsUUFBUW9CLE9BQU8sSUFDaEI7O0FBSUYsU0FBU1Qsb0JBQ1JILFFBQW9CLEVBQ3BCQyxLQUFhLEVBQ2JQLFFBQXlCLEVBQ3pCRixPQUF3QjtJQUV4QixNQUFNcUIsU0FBU25CLFNBQVNvQixTQUFTLENBQUNkO0lBQ2xDLElBQUlFLGFBQWFXLFNBQVNBLE9BQU92QixJQUFJLENBQUNFLFNBQVNRLFlBQVllO0lBQzNEQyxxQkFBcUJkO0lBQ3JCLElBQUksT0FBT0EsZUFBZSxhQUFhO1FBQ3RDQSxhQUFhRCxVQUFVLElBQUksQ0FBQSxJQUFLVCxRQUFReUIsYUFBYTs7SUFFdEQsT0FBT2Y7O0FBR1IsU0FBU2MscUJBQXFCZCxVQUFlO0lBQzVDUSxJQUFBQSxvQkFBUyxFQUNSLE9BQU9SLGVBQWUsZUFBZWdCLElBQUFBLGtCQUFRLEVBQUNoQixhQUM5Qzs7QUFJRixTQUFTSixvQkFBb0JOLE9BQXdCO0lBQ3BELE1BQU1LLFlBQVlMLFFBQ2hCMkIsWUFBWSxHQUNaQyxNQUFNLENBQUM1QixRQUFRNkIsZUFBZSxFQUFFN0I7SUFDbENLLFVBQVV5QixPQUFPO0lBQ2pCLE9BQU96QiJ9