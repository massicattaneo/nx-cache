{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/InitUserSessions.test.tsx"],"sourcesContent":["import { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { identifyHotjar, tagManagerEvents } from \"@rp/react/web/common/vendors/utils\"\nimport { waitFor } from \"@testing-library/dom\"\nimport { renderHook } from \"@testing-library/react\"\nimport { useInitUserSessions } from \"./InitUserSessions\"\n\njest.mock(\"@clerk/clerk-react\", () => ({\n  ...jest.requireActual(\"@clerk/clerk-react\"),\n  useUser: jest.fn(() => ({\n    user: {\n      organizationMemberships: [\n        {\n          organization: {\n            id: \"org_2dJbPXNFAzGmSx88VOdXOmiepkB\",\n            name: \"Ravenpack\",\n          },\n        },\n      ],\n      primaryEmailAddress: {\n        emailAddress: \"email@test.com\",\n      },\n      fullName: \"John Doe\",\n      id: \"user_123\",\n      lastName: \"Doe\",\n      firstName: \"John\",\n      createdAt: \"2021-09-01T00:00:00Z\",\n    },\n  })),\n}))\n\njest.mock(\"@rp/react/common/providers\", () => ({\n  ...jest.requireActual(\"@rp/react/common/providers\"),\n  useAccount: jest.fn(() => ({\n    hasEntitlement: jest.fn(() => true),\n    quota: {\n      subscriptionStatus: \"TRIAL\",\n    },\n  })),\n}))\n\nconst mockUseDeviceInfo = useDeviceInfo as jest.Mock\njest.mock(\"@rp/react/web/common/hooks\", () => ({\n  ...jest.requireActual(\"@rp/react/web/common/hooks\"),\n  useDeviceInfo: jest.fn(),\n}))\n\njest.mock(\"@rp/react/web/common/vendors/utils\", () => ({\n  ...jest.requireActual(\"@rp/react/web/common/vendors/utils\"),\n  tagManagerEvents: {\n    login: jest.fn(),\n    logout: jest.fn(),\n    isMobile: jest.fn(),\n    isDesktop: jest.fn(),\n  },\n  identifyHotjar: jest.fn(),\n}))\n\nconst mockLogin = tagManagerEvents.login as jest.Mock\nconst mockLogout = tagManagerEvents.logout as jest.Mock\n\ndescribe(\"useInitUserSessions\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test(\"should call tagManagerEvents.login and identifyHotjar when user exists\", async () => {\n    mockUseDeviceInfo.mockReturnValue({ isMobile: false })\n    renderHook(() => useInitUserSessions())\n\n    await waitFor(() => {\n      expect(mockLogin).toHaveBeenCalledWith({\n        userId: \"user_123\",\n        userName: \"John Doe\",\n        userEmail: \"email@test.com\",\n        userCreatedAt: 1630454400,\n        subscriptionStatus: \"TRIAL\",\n        subscriptionSource: \"\",\n        subscriptionRenewalDate: \"\",\n        companyId: \"org_2dJbPXNFAzGmSx88VOdXOmiepkB\",\n        companyName: \"Ravenpack\",\n      })\n      expect(identifyHotjar).toHaveBeenCalledWith({\n        companyName: \"Ravenpack\",\n        firstName: \"John\",\n        lastName: \"Doe\",\n        userEmail: \"email@test.com\",\n      })\n      expect(mockLogout).not.toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["jest","mock","requireActual","useUser","fn","user","organizationMemberships","organization","id","name","primaryEmailAddress","emailAddress","fullName","lastName","firstName","createdAt","useAccount","hasEntitlement","quota","subscriptionStatus","useDeviceInfo","tagManagerEvents","login","logout","isMobile","isDesktop","identifyHotjar","mockUseDeviceInfo","mockLogin","mockLogout","describe","beforeEach","clearAllMocks","test","mockReturnValue","renderHook","useInitUserSessions","waitFor","expect","toHaveBeenCalledWith","userId","userName","userEmail","userCreatedAt","subscriptionSource","subscriptionRenewalDate","companyId","companyName","not","toHaveBeenCalled"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAMAA,KAAKC,IAAI,CAAC,sBAAsB,IAAO,wCAClCD,KAAKE,aAAa,CAAC;QACtBC,SAASH,KAAKI,EAAE,CAAC,IAAO,CAAA;gBACtBC,MAAM;oBACJC,yBAAyB;wBACvB;4BACEC,cAAc;gCACZC,IAAI;gCACJC,MAAM;4BACR;wBACF;qBACD;oBACDC,qBAAqB;wBACnBC,cAAc;oBAChB;oBACAC,UAAU;oBACVJ,IAAI;oBACJK,UAAU;oBACVC,WAAW;oBACXC,WAAW;gBACb;YACF,CAAA;;AAGFf,KAAKC,IAAI,CAAC,8BAA8B,IAAO,wCAC1CD,KAAKE,aAAa,CAAC;QACtBc,YAAYhB,KAAKI,EAAE,CAAC,IAAO,CAAA;gBACzBa,gBAAgBjB,KAAKI,EAAE,CAAC,IAAM;gBAC9Bc,OAAO;oBACLC,oBAAoB;gBACtB;YACF,CAAA;;AAIFnB,KAAKC,IAAI,CAAC,8BAA8B,IAAO,wCAC1CD,KAAKE,aAAa,CAAC;QACtBkB,eAAepB,KAAKI,EAAE;;AAGxBJ,KAAKC,IAAI,CAAC,sCAAsC,IAAO,wCAClDD,KAAKE,aAAa,CAAC;QACtBmB,kBAAkB;YAChBC,OAAOtB,KAAKI,EAAE;YACdmB,QAAQvB,KAAKI,EAAE;YACfoB,UAAUxB,KAAKI,EAAE;YACjBqB,WAAWzB,KAAKI,EAAE;QACpB;QACAsB,gBAAgB1B,KAAKI,EAAE;;;;;uBAtDK;uBACmB;qBACzB;uBACG;kCACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCpC,MAAMuB,oBAAoBP,oBAAa;AAiBvC,MAAMQ,YAAYP,uBAAgB,CAACC,KAAK;AACxC,MAAMO,aAAaR,uBAAgB,CAACE,MAAM;AAE1CO,SAAS,uBAAuB;IAC9BC,WAAW;QACT/B,KAAKgC,aAAa;IACpB;IAEAC,KAAK,0EAA0E;QAC7EN,kBAAkBO,eAAe,CAAC;YAAEV,UAAU;QAAM;QACpDW,IAAAA,iBAAU,EAAC,IAAMC,IAAAA,qCAAmB;QAEpC,MAAMC,IAAAA,YAAO,EAAC;YACZC,OAAOV,WAAWW,oBAAoB,CAAC;gBACrCC,QAAQ;gBACRC,UAAU;gBACVC,WAAW;gBACXC,eAAe;gBACfxB,oBAAoB;gBACpByB,oBAAoB;gBACpBC,yBAAyB;gBACzBC,WAAW;gBACXC,aAAa;YACf;YACAT,OAAOZ,qBAAc,EAAEa,oBAAoB,CAAC;gBAC1CQ,aAAa;gBACbjC,WAAW;gBACXD,UAAU;gBACV6B,WAAW;YACb;YACAJ,OAAOT,YAAYmB,GAAG,CAACC,gBAAgB;QACzC;IACF;AACF"}