dabef499b56bff98f30d31e77fe605ea
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useChatFiles", {
    enumerable: true,
    get: function() {
        return useChatFiles;
    }
});
const _react = require("react");
const _utils = require("@rp/common/utils");
const _file = require("@rp/react/tanstack-api/file");
const _files = require("@rp/react/web/common/files");
const useChatFiles = (filesIds)=>{
    const { uploading } = (0, _files.useFileList)({
        filterTerm: ""
    });
    const data = (0, _file.useMultipleFiles)(filesIds);
    const serverFiles = data.map((obj)=>obj.data).filter(_utils.isDefined);
    const files = (0, _react.useMemo)(()=>{
        const uploadingFiles = uploading.filter((file)=>filesIds.includes(file.fileId)).map((upload)=>{
            var _upload_file_type;
            const uploadingFile = {
                id: upload.fileId,
                name: upload.file.name,
                type: (_upload_file_type = upload.file.type) !== null && _upload_file_type !== void 0 ? _upload_file_type : "",
                status: "processing",
                size: upload.file.size,
                date: new Date().toISOString(),
                sharedWith: upload.sharedWith,
                owner: upload.owner
            };
            return uploadingFile;
        });
        return [
            ...serverFiles,
            ...uploadingFiles
        ];
    }, [
        filesIds,
        serverFiles,
        uploading
    ]);
    const isLoading = data.some((i)=>i.isLoading);
    return {
        files,
        isLoading
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L3VzZUNoYXRGaWxlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEZpbGVSb3dUeXBlLCBpc0RlZmluZWQgfSBmcm9tIFwiQHJwL2NvbW1vbi91dGlsc1wiXG5pbXBvcnQgeyB1c2VNdWx0aXBsZUZpbGVzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZmlsZVwiXG5pbXBvcnQgeyB1c2VGaWxlTGlzdCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9maWxlc1wiXG5cbmV4cG9ydCBjb25zdCB1c2VDaGF0RmlsZXMgPSAoZmlsZXNJZHM6IEFycmF5PHN0cmluZz4pID0+IHtcbiAgY29uc3QgeyB1cGxvYWRpbmcgfSA9IHVzZUZpbGVMaXN0KHsgZmlsdGVyVGVybTogXCJcIiB9KVxuICBjb25zdCBkYXRhID0gdXNlTXVsdGlwbGVGaWxlcyhmaWxlc0lkcylcblxuICBjb25zdCBzZXJ2ZXJGaWxlcyA9IGRhdGEubWFwKG9iaiA9PiBvYmouZGF0YSkuZmlsdGVyKGlzRGVmaW5lZClcblxuICBjb25zdCBmaWxlczogQXJyYXk8RmlsZVJvd1R5cGU+ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgdXBsb2FkaW5nRmlsZXMgPSB1cGxvYWRpbmdcbiAgICAgIC5maWx0ZXIoZmlsZSA9PiBmaWxlc0lkcy5pbmNsdWRlcyhmaWxlLmZpbGVJZCkpXG4gICAgICAubWFwKHVwbG9hZCA9PiB7XG4gICAgICAgIGNvbnN0IHVwbG9hZGluZ0ZpbGU6IEZpbGVSb3dUeXBlID0ge1xuICAgICAgICAgIGlkOiB1cGxvYWQuZmlsZUlkLFxuICAgICAgICAgIG5hbWU6IHVwbG9hZC5maWxlLm5hbWUsXG4gICAgICAgICAgdHlwZTogdXBsb2FkLmZpbGUudHlwZSA/PyBcIlwiLFxuICAgICAgICAgIHN0YXR1czogXCJwcm9jZXNzaW5nXCIgYXMgY29uc3QsXG4gICAgICAgICAgc2l6ZTogdXBsb2FkLmZpbGUuc2l6ZSxcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgc2hhcmVkV2l0aDogdXBsb2FkLnNoYXJlZFdpdGgsXG4gICAgICAgICAgb3duZXI6IHVwbG9hZC5vd25lcixcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXBsb2FkaW5nRmlsZVxuICAgICAgfSlcblxuICAgIHJldHVybiBbLi4uc2VydmVyRmlsZXMsIC4uLnVwbG9hZGluZ0ZpbGVzXVxuICB9LCBbZmlsZXNJZHMsIHNlcnZlckZpbGVzLCB1cGxvYWRpbmddKVxuXG4gIGNvbnN0IGlzTG9hZGluZyA9IGRhdGEuc29tZShpID0+IGkuaXNMb2FkaW5nKVxuICByZXR1cm4geyBmaWxlcywgaXNMb2FkaW5nIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VDaGF0RmlsZXMiLCJmaWxlc0lkcyIsInVwbG9hZGluZyIsInVzZUZpbGVMaXN0IiwiZmlsdGVyVGVybSIsImRhdGEiLCJ1c2VNdWx0aXBsZUZpbGVzIiwic2VydmVyRmlsZXMiLCJtYXAiLCJvYmoiLCJmaWx0ZXIiLCJpc0RlZmluZWQiLCJmaWxlcyIsInVzZU1lbW8iLCJ1cGxvYWRpbmdGaWxlcyIsImZpbGUiLCJpbmNsdWRlcyIsImZpbGVJZCIsInVwbG9hZCIsInVwbG9hZGluZ0ZpbGUiLCJpZCIsIm5hbWUiLCJ0eXBlIiwic3RhdHVzIiwic2l6ZSIsImRhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzaGFyZWRXaXRoIiwib3duZXIiLCJpc0xvYWRpbmciLCJzb21lIiwiaSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQUthQTs7O2VBQUFBOzs7dUJBTFc7dUJBQ2U7c0JBQ047dUJBQ0w7QUFFckIsTUFBTUEsZUFBZSxDQUFDQztJQUMzQixNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSxrQkFBVyxFQUFDO1FBQUVDLFlBQVk7SUFBRztJQUNuRCxNQUFNQyxPQUFPQyxJQUFBQSxzQkFBZ0IsRUFBQ0w7SUFFOUIsTUFBTU0sY0FBY0YsS0FBS0csR0FBRyxDQUFDQyxDQUFBQSxNQUFPQSxJQUFJSixJQUFJLEVBQUVLLE1BQU0sQ0FBQ0MsZ0JBQVM7SUFFOUQsTUFBTUMsUUFBNEJDLElBQUFBLGNBQU8sRUFBQztRQUN4QyxNQUFNQyxpQkFBaUJaLFVBQ3BCUSxNQUFNLENBQUNLLENBQUFBLE9BQVFkLFNBQVNlLFFBQVEsQ0FBQ0QsS0FBS0UsTUFBTSxHQUM1Q1QsR0FBRyxDQUFDVSxDQUFBQTtnQkFJS0E7WUFIUixNQUFNQyxnQkFBNkI7Z0JBQ2pDQyxJQUFJRixPQUFPRCxNQUFNO2dCQUNqQkksTUFBTUgsT0FBT0gsSUFBSSxDQUFDTSxJQUFJO2dCQUN0QkMsTUFBTUosQ0FBQUEsb0JBQUFBLE9BQU9ILElBQUksQ0FBQ08sSUFBSSxjQUFoQkosK0JBQUFBLG9CQUFvQjtnQkFDMUJLLFFBQVE7Z0JBQ1JDLE1BQU1OLE9BQU9ILElBQUksQ0FBQ1MsSUFBSTtnQkFDdEJDLE1BQU0sSUFBSUMsT0FBT0MsV0FBVztnQkFDNUJDLFlBQVlWLE9BQU9VLFVBQVU7Z0JBQzdCQyxPQUFPWCxPQUFPVyxLQUFLO1lBQ3JCO1lBQ0EsT0FBT1Y7UUFDVDtRQUVGLE9BQU87ZUFBSVo7ZUFBZ0JPO1NBQWU7SUFDNUMsR0FBRztRQUFDYjtRQUFVTTtRQUFhTDtLQUFVO0lBRXJDLE1BQU00QixZQUFZekIsS0FBSzBCLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRUYsU0FBUztJQUM1QyxPQUFPO1FBQUVsQjtRQUFPa0I7SUFBVTtBQUM1QiJ9