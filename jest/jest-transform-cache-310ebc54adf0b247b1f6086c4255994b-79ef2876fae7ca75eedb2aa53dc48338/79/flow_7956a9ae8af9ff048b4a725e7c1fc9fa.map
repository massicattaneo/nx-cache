{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark/lib/initialize/flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n"],"names":["flow","tokenize","initializeFlow","effects","self","initial","attempt","blankLine","atBlankEnding","parser","constructs","flowInitial","afterConstruct","factorySpace","content","code","consume","enter","exit","currentConstruct","undefined"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAMYA;;;eAAAA;;;yCAJoB;uCACN;AAGpB,MAAMA,OAAO;IAClBC,UAAUC;AACZ;AAEA;;;CAGC,GACD,SAASA,eAAeC,OAAO;IAC7B,MAAMC,OAAO,IAAI;IACjB,MAAMC,UAAUF,QAAQG,OAAO,CAC7B,6BAA6B;IAC7BC,kCAAS,EACTC,eACA,sDAAsD;IACtDL,QAAQG,OAAO,CACb,IAAI,CAACG,MAAM,CAACC,UAAU,CAACC,WAAW,EAClCC,gBACAC,IAAAA,mCAAY,EACVV,SACAA,QAAQG,OAAO,CACb,IAAI,CAACG,MAAM,CAACC,UAAU,CAACV,IAAI,EAC3BY,gBACAT,QAAQG,OAAO,CAACQ,gCAAO,EAAEF,kBAE3B;IAIN,OAAOP;IAEP,kBAAkB,GAClB,SAASG,cAAcO,IAAI;QACzB,IAAIA,SAAS,MAAM;YACjBZ,QAAQa,OAAO,CAACD;YAChB;QACF;QACAZ,QAAQc,KAAK,CAAC;QACdd,QAAQa,OAAO,CAACD;QAChBZ,QAAQe,IAAI,CAAC;QACbd,KAAKe,gBAAgB,GAAGC;QACxB,OAAOf;IACT;IAEA,kBAAkB,GAClB,SAASO,eAAeG,IAAI;QAC1B,IAAIA,SAAS,MAAM;YACjBZ,QAAQa,OAAO,CAACD;YAChB;QACF;QACAZ,QAAQc,KAAK,CAAC;QACdd,QAAQa,OAAO,CAACD;QAChBZ,QAAQe,IAAI,CAAC;QACbd,KAAKe,gBAAgB,GAAGC;QACxB,OAAOf;IACT;AACF"}