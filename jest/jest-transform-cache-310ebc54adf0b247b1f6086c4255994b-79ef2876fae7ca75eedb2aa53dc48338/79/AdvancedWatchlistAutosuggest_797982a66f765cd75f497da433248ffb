503f6630d607d7b9adba0c8f0e5c8430
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AdvancedWatchlistAutosuggest", {
    enumerable: true,
    get: function() {
        return AdvancedWatchlistAutosuggest;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _hooks = require("@rp/react/common/hooks");
const _discoverypanelconfig = require("@rp/react/tanstack-api/discovery-panel-config");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _searchautosuggestinput = require("@rp/react/web/common/search-autosuggest-input");
const _watchlisteditor = require("@rp/react/web/common/watchlist-editor");
const _core = require("@rp/react/web/mui/core");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const AdvancedWatchlistAutosuggest = ({ onChange, selectedItems, perPage = 20, displayItems = 3 })=>{
    var _data_pages_, _panelConfig_discoveryPanelCategories_find;
    const { data: panelConfig } = (0, _discoverypanelconfig.usePanelConfig)();
    const [popperOpen, setPopperOpen] = (0, _react.useState)(false);
    const [category, setCategory] = (0, _react.useState)(undefined);
    const [query, setQuery, queryValue] = (0, _hooks.useDebouncedState)("", 140);
    const [filters, setFilters] = (0, _react.useState)({});
    const { data, fetchNextPage, hasNextPage, isLoading } = (0, _suggestion.useWatchlistSuggestions)(_object_spread({
        query,
        category: category ? [
            category
        ] : undefined,
        perPage
    }, filters[category !== null && category !== void 0 ? category : ""]));
    var _panelConfig_discoveryPanelCategories, _data_pages__facets, _panelConfig_discoveryPanelCategories_find_watchlistGroups_fields;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_watchlisteditor.WatchlistCategoryFilter, {
                categories: (_panelConfig_discoveryPanelCategories = panelConfig === null || panelConfig === void 0 ? void 0 : panelConfig.discoveryPanelCategories) !== null && _panelConfig_discoveryPanelCategories !== void 0 ? _panelConfig_discoveryPanelCategories : [],
                counts: {},
                onChange: (category)=>setCategory(category)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    display: "flex",
                    flexWrap: "wrap",
                    gap: 1,
                    height: 32
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_watchlisteditor.SuggestionsFilters, {
                    hideClearFilter: true,
                    categoryFilter: category,
                    filters: filters,
                    setFilters: setFilters,
                    facets: (_data_pages__facets = data === null || data === void 0 ? void 0 : (_data_pages_ = data.pages[0]) === null || _data_pages_ === void 0 ? void 0 : _data_pages_.facets) !== null && _data_pages__facets !== void 0 ? _data_pages__facets : {},
                    suggestionQuery: _object_spread({
                        query,
                        category: category ? [
                            category
                        ] : undefined
                    }, filters[category !== null && category !== void 0 ? category : ""]),
                    fields: (_panelConfig_discoveryPanelCategories_find_watchlistGroups_fields = panelConfig === null || panelConfig === void 0 ? void 0 : (_panelConfig_discoveryPanelCategories_find = panelConfig.discoveryPanelCategories.find((c)=>c.label === category)) === null || _panelConfig_discoveryPanelCategories_find === void 0 ? void 0 : _panelConfig_discoveryPanelCategories_find.watchlistGroups.fields) !== null && _panelConfig_discoveryPanelCategories_find_watchlistGroups_fields !== void 0 ? _panelConfig_discoveryPanelCategories_find_watchlistGroups_fields : []
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_searchautosuggestinput.WatchlistAutosuggestInput, {
                onChange: onChange,
                setQuery: setQuery,
                rawQuery: queryValue,
                placeholder: "Search",
                open: popperOpen,
                setOpen: setPopperOpen,
                selectedItems: selectedItems,
                displayItems: displayItems,
                clearOnEnter: true,
                inputProps: {
                    sx: {
                        input: {
                            padding: 1
                        }
                    }
                },
                data: data,
                hasNextPage: hasNextPage,
                fetchNextPage: fetchNextPage,
                isLoading: isLoading,
                showTicker: category === "Companies" || category === "ETFs"
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RBdXRvc3VnZ2VzdC9BZHZhbmNlZFdhdGNobGlzdEF1dG9zdWdnZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VEZWJvdW5jZWRTdGF0ZSB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IHVzZVBhbmVsQ29uZmlnIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZGlzY292ZXJ5LXBhbmVsLWNvbmZpZ1wiXG5pbXBvcnQge1xuICBFbmhhbmNlZFN1Z2dlc3Rpb24sXG4gIFdhdGNobGlzdFN1Z2dlc3Rpb25GaWx0ZXJzLFxuICB1c2VXYXRjaGxpc3RTdWdnZXN0aW9ucyxcbn0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvc3VnZ2VzdGlvblwiXG5pbXBvcnQgeyBXYXRjaGxpc3RBdXRvc3VnZ2VzdElucHV0IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3NlYXJjaC1hdXRvc3VnZ2VzdC1pbnB1dFwiXG5pbXBvcnQgeyBTdWdnZXN0aW9uc0ZpbHRlcnMsIFdhdGNobGlzdENhdGVnb3J5RmlsdGVyIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3dhdGNobGlzdC1lZGl0b3JcIlxuaW1wb3J0IHsgQm94IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG50eXBlIFByb3BzID0ge1xuICBvbkNoYW5nZTogKHZhbHVlOiBFbmhhbmNlZFN1Z2dlc3Rpb24pID0+IHZvaWRcbiAgc2VsZWN0ZWRJdGVtczogQXJyYXk8c3RyaW5nPlxuICBwZXJQYWdlPzogbnVtYmVyXG4gIGRpc3BsYXlJdGVtcz86IG51bWJlclxufVxuXG5leHBvcnQgY29uc3QgQWR2YW5jZWRXYXRjaGxpc3RBdXRvc3VnZ2VzdCA9ICh7XG4gIG9uQ2hhbmdlLFxuICBzZWxlY3RlZEl0ZW1zLFxuICBwZXJQYWdlID0gMjAsXG4gIGRpc3BsYXlJdGVtcyA9IDMsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGRhdGE6IHBhbmVsQ29uZmlnIH0gPSB1c2VQYW5lbENvbmZpZygpXG4gIGNvbnN0IFtwb3BwZXJPcGVuLCBzZXRQb3BwZXJPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbY2F0ZWdvcnksIHNldENhdGVnb3J5XSA9IHVzZVN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKVxuICBjb25zdCBbcXVlcnksIHNldFF1ZXJ5LCBxdWVyeVZhbHVlXSA9IHVzZURlYm91bmNlZFN0YXRlKFwiXCIsIDE0MClcbiAgY29uc3QgW2ZpbHRlcnMsIHNldEZpbHRlcnNdID0gdXNlU3RhdGU8V2F0Y2hsaXN0U3VnZ2VzdGlvbkZpbHRlcnM+KHt9KVxuXG4gIGNvbnN0IHsgZGF0YSwgZmV0Y2hOZXh0UGFnZSwgaGFzTmV4dFBhZ2UsIGlzTG9hZGluZyB9ID0gdXNlV2F0Y2hsaXN0U3VnZ2VzdGlvbnMoe1xuICAgIHF1ZXJ5LFxuICAgIGNhdGVnb3J5OiBjYXRlZ29yeSA/IFtjYXRlZ29yeV0gOiB1bmRlZmluZWQsXG4gICAgcGVyUGFnZSxcbiAgICAuLi5maWx0ZXJzW2NhdGVnb3J5ID8/IFwiXCJdLFxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxXYXRjaGxpc3RDYXRlZ29yeUZpbHRlclxuICAgICAgICBjYXRlZ29yaWVzPXtwYW5lbENvbmZpZz8uZGlzY292ZXJ5UGFuZWxDYXRlZ29yaWVzID8/IFtdfVxuICAgICAgICBjb3VudHM9e3t9fVxuICAgICAgICBvbkNoYW5nZT17Y2F0ZWdvcnkgPT4gc2V0Q2F0ZWdvcnkoY2F0ZWdvcnkpfVxuICAgICAgLz5cbiAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGZsZXhXcmFwOiBcIndyYXBcIiwgZ2FwOiAxLCBoZWlnaHQ6IDMyIH19PlxuICAgICAgICA8U3VnZ2VzdGlvbnNGaWx0ZXJzXG4gICAgICAgICAgaGlkZUNsZWFyRmlsdGVyXG4gICAgICAgICAgY2F0ZWdvcnlGaWx0ZXI9e2NhdGVnb3J5fVxuICAgICAgICAgIGZpbHRlcnM9e2ZpbHRlcnN9XG4gICAgICAgICAgc2V0RmlsdGVycz17c2V0RmlsdGVyc31cbiAgICAgICAgICBmYWNldHM9e2RhdGE/LnBhZ2VzWzBdPy5mYWNldHMgPz8ge319XG4gICAgICAgICAgc3VnZ2VzdGlvblF1ZXJ5PXt7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSA/IFtjYXRlZ29yeV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAuLi5maWx0ZXJzW2NhdGVnb3J5ID8/IFwiXCJdLFxuICAgICAgICAgIH19XG4gICAgICAgICAgZmllbGRzPXtcbiAgICAgICAgICAgIHBhbmVsQ29uZmlnPy5kaXNjb3ZlcnlQYW5lbENhdGVnb3JpZXMuZmluZChjID0+IGMubGFiZWwgPT09IGNhdGVnb3J5KT8ud2F0Y2hsaXN0R3JvdXBzXG4gICAgICAgICAgICAgIC5maWVsZHMgPz8gW11cbiAgICAgICAgICB9XG4gICAgICAgIC8+XG4gICAgICA8L0JveD5cbiAgICAgIDxXYXRjaGxpc3RBdXRvc3VnZ2VzdElucHV0XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgc2V0UXVlcnk9e3NldFF1ZXJ5fVxuICAgICAgICByYXdRdWVyeT17cXVlcnlWYWx1ZX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e1wiU2VhcmNoXCJ9XG4gICAgICAgIG9wZW49e3BvcHBlck9wZW59XG4gICAgICAgIHNldE9wZW49e3NldFBvcHBlck9wZW59XG4gICAgICAgIHNlbGVjdGVkSXRlbXM9e3NlbGVjdGVkSXRlbXN9XG4gICAgICAgIGRpc3BsYXlJdGVtcz17ZGlzcGxheUl0ZW1zfVxuICAgICAgICBjbGVhck9uRW50ZXJcbiAgICAgICAgaW5wdXRQcm9wcz17eyBzeDogeyBpbnB1dDogeyBwYWRkaW5nOiAxIH0gfSB9fVxuICAgICAgICBkYXRhPXtkYXRhfVxuICAgICAgICBoYXNOZXh0UGFnZT17aGFzTmV4dFBhZ2V9XG4gICAgICAgIGZldGNoTmV4dFBhZ2U9e2ZldGNoTmV4dFBhZ2V9XG4gICAgICAgIGlzTG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgICBzaG93VGlja2VyPXtjYXRlZ29yeSA9PT0gXCJDb21wYW5pZXNcIiB8fCBjYXRlZ29yeSA9PT0gXCJFVEZzXCJ9XG4gICAgICAvPlxuICAgIDwvPlxuICApXG59XG4iXSwibmFtZXMiOlsiQWR2YW5jZWRXYXRjaGxpc3RBdXRvc3VnZ2VzdCIsIm9uQ2hhbmdlIiwic2VsZWN0ZWRJdGVtcyIsInBlclBhZ2UiLCJkaXNwbGF5SXRlbXMiLCJkYXRhIiwicGFuZWxDb25maWciLCJ1c2VQYW5lbENvbmZpZyIsInBvcHBlck9wZW4iLCJzZXRQb3BwZXJPcGVuIiwidXNlU3RhdGUiLCJjYXRlZ29yeSIsInNldENhdGVnb3J5IiwidW5kZWZpbmVkIiwicXVlcnkiLCJzZXRRdWVyeSIsInF1ZXJ5VmFsdWUiLCJ1c2VEZWJvdW5jZWRTdGF0ZSIsImZpbHRlcnMiLCJzZXRGaWx0ZXJzIiwiZmV0Y2hOZXh0UGFnZSIsImhhc05leHRQYWdlIiwiaXNMb2FkaW5nIiwidXNlV2F0Y2hsaXN0U3VnZ2VzdGlvbnMiLCJXYXRjaGxpc3RDYXRlZ29yeUZpbHRlciIsImNhdGVnb3JpZXMiLCJkaXNjb3ZlcnlQYW5lbENhdGVnb3JpZXMiLCJjb3VudHMiLCJCb3giLCJzeCIsImRpc3BsYXkiLCJmbGV4V3JhcCIsImdhcCIsImhlaWdodCIsIlN1Z2dlc3Rpb25zRmlsdGVycyIsImhpZGVDbGVhckZpbHRlciIsImNhdGVnb3J5RmlsdGVyIiwiZmFjZXRzIiwicGFnZXMiLCJzdWdnZXN0aW9uUXVlcnkiLCJmaWVsZHMiLCJmaW5kIiwiYyIsImxhYmVsIiwid2F0Y2hsaXN0R3JvdXBzIiwiV2F0Y2hsaXN0QXV0b3N1Z2dlc3RJbnB1dCIsInJhd1F1ZXJ5IiwicGxhY2Vob2xkZXIiLCJvcGVuIiwic2V0T3BlbiIsImNsZWFyT25FbnRlciIsImlucHV0UHJvcHMiLCJpbnB1dCIsInBhZGRpbmciLCJzaG93VGlja2VyIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBbUJhQTs7O2VBQUFBOzs7O3VCQW5CWTt1QkFDUztzQ0FDSDs0QkFLeEI7d0NBQ21DO2lDQUNrQjtzQkFDeEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU2IsTUFBTUEsK0JBQStCLENBQUMsRUFDM0NDLFFBQVEsRUFDUkMsYUFBYSxFQUNiQyxVQUFVLEVBQUUsRUFDWkMsZUFBZSxDQUFDLEVBQ1Y7UUEyQlVDLGNBT05DO0lBakNWLE1BQU0sRUFBRUQsTUFBTUMsV0FBVyxFQUFFLEdBQUdDLElBQUFBLG9DQUFjO0lBQzVDLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDN0MsTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUdGLElBQUFBLGVBQVEsRUFBcUJHO0lBQzdELE1BQU0sQ0FBQ0MsT0FBT0MsVUFBVUMsV0FBVyxHQUFHQyxJQUFBQSx3QkFBaUIsRUFBQyxJQUFJO0lBQzVELE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHVCxJQUFBQSxlQUFRLEVBQTZCLENBQUM7SUFFcEUsTUFBTSxFQUFFTCxJQUFJLEVBQUVlLGFBQWEsRUFBRUMsV0FBVyxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsSUFBQUEsbUNBQXVCLEVBQUM7UUFDOUVUO1FBQ0FILFVBQVVBLFdBQVc7WUFBQ0E7U0FBUyxHQUFHRTtRQUNsQ1Y7T0FDR2UsT0FBTyxDQUFDUCxxQkFBQUEsc0JBQUFBLFdBQVksR0FBRztRQU1WTCx1Q0FVRkQscUJBT05DO0lBcEJWLHFCQUNFOzswQkFDRSxxQkFBQ2tCLHdDQUF1QjtnQkFDdEJDLFlBQVluQixDQUFBQSx3Q0FBQUEsd0JBQUFBLGtDQUFBQSxZQUFhb0Isd0JBQXdCLGNBQXJDcEIsbURBQUFBLHdDQUF5QyxFQUFFO2dCQUN2RHFCLFFBQVEsQ0FBQztnQkFDVDFCLFVBQVVVLENBQUFBLFdBQVlDLFlBQVlEOzswQkFFcEMscUJBQUNpQixTQUFHO2dCQUFDQyxJQUFJO29CQUFFQyxTQUFTO29CQUFRQyxVQUFVO29CQUFRQyxLQUFLO29CQUFHQyxRQUFRO2dCQUFHOzBCQUMvRCxjQUFBLHFCQUFDQyxtQ0FBa0I7b0JBQ2pCQyxlQUFlO29CQUNmQyxnQkFBZ0J6QjtvQkFDaEJPLFNBQVNBO29CQUNUQyxZQUFZQTtvQkFDWmtCLFFBQVFoQyxDQUFBQSxzQkFBQUEsaUJBQUFBLDRCQUFBQSxlQUFBQSxLQUFNaUMsS0FBSyxDQUFDLEVBQUUsY0FBZGpDLG1DQUFBQSxhQUFnQmdDLE1BQU0sY0FBdEJoQyxpQ0FBQUEsc0JBQTBCLENBQUM7b0JBQ25Da0MsaUJBQWlCO3dCQUNmekI7d0JBQ0FILFVBQVVBLFdBQVc7NEJBQUNBO3lCQUFTLEdBQUdFO3VCQUMvQkssT0FBTyxDQUFDUCxxQkFBQUEsc0JBQUFBLFdBQVksR0FBRztvQkFFNUI2QixRQUNFbEMsQ0FBQUEsb0VBQUFBLHdCQUFBQSxtQ0FBQUEsNkNBQUFBLFlBQWFvQix3QkFBd0IsQ0FBQ2UsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxLQUFLLEtBQUtoQyx1QkFBNURMLGlFQUFBQSwyQ0FBdUVzQyxlQUFlLENBQ25GSixNQUFNLGNBRFRsQywrRUFBQUEsb0VBQ2EsRUFBRTs7OzBCQUlyQixxQkFBQ3VDLGlEQUF5QjtnQkFDeEI1QyxVQUFVQTtnQkFDVmMsVUFBVUE7Z0JBQ1YrQixVQUFVOUI7Z0JBQ1YrQixhQUFhO2dCQUNiQyxNQUFNeEM7Z0JBQ055QyxTQUFTeEM7Z0JBQ1RQLGVBQWVBO2dCQUNmRSxjQUFjQTtnQkFDZDhDLFlBQVk7Z0JBQ1pDLFlBQVk7b0JBQUV0QixJQUFJO3dCQUFFdUIsT0FBTzs0QkFBRUMsU0FBUzt3QkFBRTtvQkFBRTtnQkFBRTtnQkFDNUNoRCxNQUFNQTtnQkFDTmdCLGFBQWFBO2dCQUNiRCxlQUFlQTtnQkFDZkUsV0FBV0E7Z0JBQ1hnQyxZQUFZM0MsYUFBYSxlQUFlQSxhQUFhOzs7O0FBSTdEIn0=