81d1c1b84f2c2d2e9b763b635c8655f6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BriefUserWatchlistItem", {
    enumerable: true,
    get: function() {
        return BriefUserWatchlistItem;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _jotai = require("jotai");
const _reactrouterdom = require("react-router-dom");
const _utils = require("@rp/common/utils");
const _brief = require("@rp/react/common/brief");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _router = require("@rp/react/web/router");
const _BriefWatchlistItemRadioButton = require("./BriefWatchlistItemRadioButton");
const BriefUserWatchlistItem = ({ item, columnsWidth, briefId, setWatchlistId, watchlistId, setName })=>{
    var _item_shared;
    const navigate = (0, _reactrouterdom.useNavigate)();
    const [openMenu] = (0, _react.useState)(false);
    const [filterTerm] = (0, _jotai.useAtom)(_brief.atomBriefWatchlistFilter);
    const alreadyScheduled = !!briefId;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
        sx: {
            gap: 1,
            px: 0
        },
        componentProps: {
            filterTerm
        },
        selected: openMenu,
        showCompanyIcon: ((_item_shared = item.shared) === null || _item_shared === void 0 ? void 0 : _item_shared.company.permission) !== "undefined",
        columnsWidth: columnsWidth,
        highlightColumnIndices: [
            1
        ],
        columns: [
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefWatchlistItemRadioButton.BriefWatchlistItemRadioButton, {
                    disabled: alreadyScheduled,
                    watchlist: item,
                    watchlistId: watchlistId,
                    setWatchlistId: setWatchlistId,
                    setName: setName
                })
            },
            {
                text: item.name
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            flexGrow: 1,
                            children: (0, _utils.formatTime)(item.lastUpdated)
                        }),
                        alreadyScheduled && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.PrimaryCheckedLabel, {
                                    label: "Already scheduled"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                                    title: "Edit Brief",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                        size: "small",
                                        onClick: ()=>navigate((0, _reactrouterdom.generatePath)(_router.BRIEF_ROUTE_EDIT, {
                                                briefId
                                            })),
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.EditNote, {})
                                    })
                                })
                            ]
                        })
                    ]
                })
            }
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9jb21wb25lbnRzL2JyaWVmU3RlcHMvQnJpZWZXYXRjaGxpc3RTZWxlY3Rpb25TdGVwL0JyaWVmVXNlcldhdGNobGlzdHMvQnJpZWZVc2VyV2F0Y2hsaXN0SXRlbS9CcmllZlVzZXJXYXRjaGxpc3RJdGVtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VBdG9tIH0gZnJvbSBcImpvdGFpXCJcbmltcG9ydCB7IGdlbmVyYXRlUGF0aCwgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyBXYXRjaGxpc3QgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgZm9ybWF0VGltZSB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IGF0b21CcmllZldhdGNobGlzdEZpbHRlciB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2JyaWVmXCJcbmltcG9ydCB7IFByaW1hcnlDaGVja2VkTGFiZWwsIFJQVG9vbHRpcCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9iYXNlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgSHViVGFibGVSb3cgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vY29tcG9zaXRlLWNvbXBvbmVudHNcIlxuaW1wb3J0IHsgQm94LCBJY29uQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgRWRpdE5vdGUgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvaWNvbnNcIlxuaW1wb3J0IHsgQlJJRUZfUk9VVEVfRURJVCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JvdXRlclwiXG5pbXBvcnQgeyBCcmllZldhdGNobGlzdEl0ZW1SYWRpb0J1dHRvbiB9IGZyb20gXCIuL0JyaWVmV2F0Y2hsaXN0SXRlbVJhZGlvQnV0dG9uXCJcblxudHlwZSBCcmllZlVzZXJXYXRjaGxpc3RJdGVtUHJvcHMgPSB7XG4gIGl0ZW06IFdhdGNobGlzdFxuICBjb2x1bW5zV2lkdGg6IEFycmF5PHN0cmluZz5cbiAgYnJpZWZJZD86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB3YXRjaGxpc3RJZDogc3RyaW5nXG4gIHNldFdhdGNobGlzdElkOiAod2F0Y2hsaXN0SWQ6IHN0cmluZykgPT4gdm9pZFxuICBzZXROYW1lOiAobmFtZTogc3RyaW5nKSA9PiB2b2lkXG59XG5cbmNvbnN0IEJyaWVmVXNlcldhdGNobGlzdEl0ZW0gPSAoe1xuICBpdGVtLFxuICBjb2x1bW5zV2lkdGgsXG4gIGJyaWVmSWQsXG4gIHNldFdhdGNobGlzdElkLFxuICB3YXRjaGxpc3RJZCxcbiAgc2V0TmFtZSxcbn06IEJyaWVmVXNlcldhdGNobGlzdEl0ZW1Qcm9wcykgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcbiAgY29uc3QgW29wZW5NZW51XSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZmlsdGVyVGVybV0gPSB1c2VBdG9tKGF0b21CcmllZldhdGNobGlzdEZpbHRlcilcbiAgY29uc3QgYWxyZWFkeVNjaGVkdWxlZCA9ICEhYnJpZWZJZFxuICByZXR1cm4gKFxuICAgIDxIdWJUYWJsZVJvd1xuICAgICAgc3g9e3sgZ2FwOiAxLCBweDogMCB9fVxuICAgICAgY29tcG9uZW50UHJvcHM9e3sgZmlsdGVyVGVybSB9fVxuICAgICAgc2VsZWN0ZWQ9e29wZW5NZW51fVxuICAgICAgc2hvd0NvbXBhbnlJY29uPXtpdGVtLnNoYXJlZD8uY29tcGFueS5wZXJtaXNzaW9uICE9PSBcInVuZGVmaW5lZFwifVxuICAgICAgY29sdW1uc1dpZHRoPXtjb2x1bW5zV2lkdGh9XG4gICAgICBoaWdobGlnaHRDb2x1bW5JbmRpY2VzPXtbMV19XG4gICAgICBjb2x1bW5zPXtbXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiAoXG4gICAgICAgICAgICA8QnJpZWZXYXRjaGxpc3RJdGVtUmFkaW9CdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2FscmVhZHlTY2hlZHVsZWR9XG4gICAgICAgICAgICAgIHdhdGNobGlzdD17aXRlbX1cbiAgICAgICAgICAgICAgd2F0Y2hsaXN0SWQ9e3dhdGNobGlzdElkfVxuICAgICAgICAgICAgICBzZXRXYXRjaGxpc3RJZD17c2V0V2F0Y2hsaXN0SWR9XG4gICAgICAgICAgICAgIHNldE5hbWU9e3NldE5hbWV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHsgdGV4dDogaXRlbS5uYW1lIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiAoXG4gICAgICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBnYXA6IDEgfX0+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGZsZXhHcm93PXsxfT57Zm9ybWF0VGltZShpdGVtLmxhc3RVcGRhdGVkKX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIHthbHJlYWR5U2NoZWR1bGVkICYmIChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPFByaW1hcnlDaGVja2VkTGFiZWwgbGFiZWw9XCJBbHJlYWR5IHNjaGVkdWxlZFwiIC8+XG4gICAgICAgICAgICAgICAgICA8UlBUb29sdGlwIHRpdGxlPVwiRWRpdCBCcmllZlwiPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gbmF2aWdhdGUoZ2VuZXJhdGVQYXRoKEJSSUVGX1JPVVRFX0VESVQsIHsgYnJpZWZJZCB9KSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8RWRpdE5vdGUgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPC9SUFRvb2x0aXA+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgXX1cbiAgICAvPlxuICApXG59XG5leHBvcnQgeyBCcmllZlVzZXJXYXRjaGxpc3RJdGVtIH1cbiJdLCJuYW1lcyI6WyJCcmllZlVzZXJXYXRjaGxpc3RJdGVtIiwiaXRlbSIsImNvbHVtbnNXaWR0aCIsImJyaWVmSWQiLCJzZXRXYXRjaGxpc3RJZCIsIndhdGNobGlzdElkIiwic2V0TmFtZSIsIm5hdmlnYXRlIiwidXNlTmF2aWdhdGUiLCJvcGVuTWVudSIsInVzZVN0YXRlIiwiZmlsdGVyVGVybSIsInVzZUF0b20iLCJhdG9tQnJpZWZXYXRjaGxpc3RGaWx0ZXIiLCJhbHJlYWR5U2NoZWR1bGVkIiwiSHViVGFibGVSb3ciLCJzeCIsImdhcCIsInB4IiwiY29tcG9uZW50UHJvcHMiLCJzZWxlY3RlZCIsInNob3dDb21wYW55SWNvbiIsInNoYXJlZCIsImNvbXBhbnkiLCJwZXJtaXNzaW9uIiwiaGlnaGxpZ2h0Q29sdW1uSW5kaWNlcyIsImNvbHVtbnMiLCJub2RlIiwiQnJpZWZXYXRjaGxpc3RJdGVtUmFkaW9CdXR0b24iLCJkaXNhYmxlZCIsIndhdGNobGlzdCIsInRleHQiLCJuYW1lIiwiQm94IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJUeXBvZ3JhcGh5IiwiZmxleEdyb3ciLCJmb3JtYXRUaW1lIiwibGFzdFVwZGF0ZWQiLCJQcmltYXJ5Q2hlY2tlZExhYmVsIiwibGFiZWwiLCJSUFRvb2x0aXAiLCJ0aXRsZSIsIkljb25CdXR0b24iLCJzaXplIiwib25DbGljayIsImdlbmVyYXRlUGF0aCIsIkJSSUVGX1JPVVRFX0VESVQiLCJFZGl0Tm90ZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkErRVNBOzs7ZUFBQUE7Ozs7dUJBL0VnQjt1QkFDRDtnQ0FDa0I7dUJBRWY7dUJBQ2M7Z0NBQ007cUNBQ25CO3NCQUNnQjt1QkFDbkI7d0JBQ1E7K0NBQ2E7QUFXOUMsTUFBTUEseUJBQXlCLENBQUMsRUFDOUJDLElBQUksRUFDSkMsWUFBWSxFQUNaQyxPQUFPLEVBQ1BDLGNBQWMsRUFDZEMsV0FBVyxFQUNYQyxPQUFPLEVBQ3FCO1FBVVBMO0lBVHJCLE1BQU1NLFdBQVdDLElBQUFBLDJCQUFXO0lBQzVCLE1BQU0sQ0FBQ0MsU0FBUyxHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDNUIsTUFBTSxDQUFDQyxXQUFXLEdBQUdDLElBQUFBLGNBQU8sRUFBQ0MsK0JBQXdCO0lBQ3JELE1BQU1DLG1CQUFtQixDQUFDLENBQUNYO0lBQzNCLHFCQUNFLHFCQUFDWSxnQ0FBVztRQUNWQyxJQUFJO1lBQUVDLEtBQUs7WUFBR0MsSUFBSTtRQUFFO1FBQ3BCQyxnQkFBZ0I7WUFBRVI7UUFBVztRQUM3QlMsVUFBVVg7UUFDVlksaUJBQWlCcEIsRUFBQUEsZUFBQUEsS0FBS3FCLE1BQU0sY0FBWHJCLG1DQUFBQSxhQUFhc0IsT0FBTyxDQUFDQyxVQUFVLE1BQUs7UUFDckR0QixjQUFjQTtRQUNkdUIsd0JBQXdCO1lBQUM7U0FBRTtRQUMzQkMsU0FBUztZQUNQO2dCQUNFQyxvQkFDRSxxQkFBQ0MsNERBQTZCO29CQUM1QkMsVUFBVWY7b0JBQ1ZnQixXQUFXN0I7b0JBQ1hJLGFBQWFBO29CQUNiRCxnQkFBZ0JBO29CQUNoQkUsU0FBU0E7O1lBR2Y7WUFDQTtnQkFBRXlCLE1BQU05QixLQUFLK0IsSUFBSTtZQUFDO1lBQ2xCO2dCQUNFTCxvQkFDRSxzQkFBQ00sU0FBRztvQkFBQ2pCLElBQUk7d0JBQUVrQixTQUFTO3dCQUFRQyxZQUFZO3dCQUFVbEIsS0FBSztvQkFBRTs7c0NBQ3ZELHFCQUFDbUIsZ0JBQVU7NEJBQUNDLFVBQVU7c0NBQUlDLElBQUFBLGlCQUFVLEVBQUNyQyxLQUFLc0MsV0FBVzs7d0JBQ3BEekIsa0NBQ0M7OzhDQUNFLHFCQUFDMEIsbUNBQW1CO29DQUFDQyxPQUFNOzs4Q0FDM0IscUJBQUNDLHlCQUFTO29DQUFDQyxPQUFNOzhDQUNmLGNBQUEscUJBQUNDLGdCQUFVO3dDQUNUQyxNQUFLO3dDQUNMQyxTQUFTLElBQU12QyxTQUFTd0MsSUFBQUEsNEJBQVksRUFBQ0Msd0JBQWdCLEVBQUU7Z0RBQUU3Qzs0Q0FBUTtrREFFakUsY0FBQSxxQkFBQzhDLGVBQVE7Ozs7Ozs7WUFPdkI7U0FDRDs7QUFHUCJ9