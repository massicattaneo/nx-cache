1588b883c04a08ce501a2d73c8ea0759
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDocumentViewer", {
    enumerable: true,
    get: function() {
        return useDocumentViewer;
    }
});
const _react = require("react");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _providers = require("@rp/react/web/common/providers");
const _getFileExtension = require("../helpers/getFileExtension");
const _useDocumentMatches = require("./useDocumentMatches");
const useDocumentViewer = ({ rpjsonDocument, namespace })=>{
    var _rpjsonDocument_document_metadata, _rpjsonDocument_document, _rpjsonDocument_document_metadata1, _rpjsonDocument_document1;
    const [selectedSentence, setSelectedSentence] = (0, _react.useState)(0);
    const [find, setFind] = (0, _react.useState)("");
    const [foundCount, setFoundCount] = (0, _react.useState)(0);
    const [selectedFindIndex, setSelectedFindIndex] = (0, _react.useState)(0);
    const { documentData } = (0, _providers.useDocumentViewerData)();
    const validDocumentData = documentData.documentId === rpjsonDocument.document.rp_document_id;
    const { query, documentScope, language, startingChunkId } = validDocumentData ? documentData : _providers.documentViewerDataDefault;
    const { chunks: queryChunks = [], isLoading: chunksLoading, count: chunksCount } = (0, _useDocumentMatches.useDocumentChunks)(query, documentData.documentId, !documentData.hideMatches);
    const mediaType = namespace === "private" ? (_rpjsonDocument_document = rpjsonDocument.document) === null || _rpjsonDocument_document === void 0 ? void 0 : (_rpjsonDocument_document_metadata = _rpjsonDocument_document.metadata) === null || _rpjsonDocument_document_metadata === void 0 ? void 0 : _rpjsonDocument_document_metadata.media_type : undefined;
    const extension = namespace === "private" ? (0, _getFileExtension.getFileExtension)((_rpjsonDocument_document1 = rpjsonDocument.document) === null || _rpjsonDocument_document1 === void 0 ? void 0 : (_rpjsonDocument_document_metadata1 = _rpjsonDocument_document1.metadata) === null || _rpjsonDocument_document_metadata1 === void 0 ? void 0 : _rpjsonDocument_document_metadata1.provider_filename) : undefined;
    const entitiesInWatchlist = (0, _watchlist.useEntitiesFromWatchlists)(query === null || query === void 0 ? void 0 : query.expression);
    const queryEntities = (query === null || query === void 0 ? void 0 : query.expression) ? (0, _userdataqueries.getExpressionIds)(query === null || query === void 0 ? void 0 : query.expression, {
        excludeNot: true
    }) : [];
    const entities = [
        ...queryEntities,
        ...entitiesInWatchlist
    ];
    const hasQuery = Boolean(query);
    const keywords = (query === null || query === void 0 ? void 0 : query.expression) ? (0, _userdataqueries.getExpressionIds)(query === null || query === void 0 ? void 0 : query.expression, {
        excludeNot: true,
        types: [
            "keyword"
        ]
    }) : [];
    const chunks = (0, _react.useMemo)(()=>queryChunks.length ? queryChunks : documentData.chunks, [
        documentData.chunks,
        queryChunks
    ]);
    (0, _react.useLayoutEffect)(()=>{
        if (startingChunkId) {
            const chunkIndex = chunks.findIndex((chunk)=>chunk.cnum === startingChunkId);
            if (chunkIndex !== -1) {
                setSelectedSentence(chunkIndex);
            }
        }
    }, [
        chunks,
        startingChunkId
    ]);
    return {
        matches: {
            chunks,
            isLoading: chunksLoading,
            count: chunksCount,
            selectedMatch: selectedSentence,
            setSelectedMatch: setSelectedSentence,
            hasQuery
        },
        documentInfo: {
            entities,
            events: [],
            keywords,
            documentScope,
            language,
            extension,
            mediaType,
            isEmpty: !(rpjsonDocument === null || rpjsonDocument === void 0 ? void 0 : rpjsonDocument.content.body)
        },
        finds: {
            searchValue: find,
            setSearchValue: setFind,
            count: foundCount,
            setCount: setFoundCount,
            selectedFind: selectedFindIndex,
            setSelectedFind: setSelectedFindIndex
        },
        queryId: documentData.queryId
    };
};

//# sourceMappingURL=data:application/json;base64,