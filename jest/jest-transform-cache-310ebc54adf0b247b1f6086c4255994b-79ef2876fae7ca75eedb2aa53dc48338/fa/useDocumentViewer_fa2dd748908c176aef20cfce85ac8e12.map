{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/document-viewer/src/lib/hooks/useDocumentViewer.tsx"],"sourcesContent":["import { useLayoutEffect, useMemo, useState } from \"react\"\nimport { CqsChunk, CqsScope } from \"@rp/common/api-types\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport { getExpressionIds } from \"@rp/react/tanstack-api/user-data-queries\"\nimport { useEntitiesFromWatchlists } from \"@rp/react/tanstack-api/watchlist\"\nimport { documentViewerDataDefault, useDocumentViewerData } from \"@rp/react/web/common/providers\"\nimport { getFileExtension } from \"../helpers/getFileExtension\"\nimport { useDocumentChunks } from \"./useDocumentMatches\"\n\ntype DocumentViewerParams = {\n  rpjsonDocument: RpJsonDocument\n  namespace: \"public\" | \"private\"\n}\n\ntype Matches = {\n  chunks: Array<CqsChunk>\n  isLoading: boolean\n  count: number\n  selectedMatch: number\n  setSelectedMatch: (match: number) => void\n  hasQuery: boolean\n}\n\ntype DocumentInfo = {\n  entities: Array<string>\n  events: Array<string>\n  keywords: Array<string>\n  documentScope: CqsScope\n  language: string\n  extension: string | undefined\n  mediaType: string | undefined\n  isEmpty: boolean\n}\n\ntype FindInDocument = {\n  searchValue: string\n  setSearchValue: (value: string) => void\n  count: number\n  setCount: (count: number) => void\n  selectedFind: number\n  setSelectedFind: (find: number) => void\n}\n\ntype DocumentViewerData = {\n  matches: Matches\n  documentInfo: DocumentInfo\n  finds: FindInDocument\n  queryId: string | undefined\n}\n\nconst useDocumentViewer = ({\n  rpjsonDocument,\n  namespace,\n}: DocumentViewerParams): DocumentViewerData => {\n  const [selectedSentence, setSelectedSentence] = useState(0)\n  const [find, setFind] = useState(\"\")\n  const [foundCount, setFoundCount] = useState(0)\n  const [selectedFindIndex, setSelectedFindIndex] = useState(0)\n  const { documentData } = useDocumentViewerData()\n  const validDocumentData = documentData.documentId === rpjsonDocument.document.rp_document_id\n  const { query, documentScope, language, startingChunkId } = validDocumentData\n    ? documentData\n    : documentViewerDataDefault\n\n  const {\n    chunks: queryChunks = [],\n    isLoading: chunksLoading,\n    count: chunksCount,\n  } = useDocumentChunks(query, documentData.documentId, !documentData.hideMatches)\n\n  const mediaType =\n    namespace === \"private\" ? rpjsonDocument.document?.metadata?.media_type : undefined\n  const extension =\n    namespace === \"private\"\n      ? getFileExtension(rpjsonDocument.document?.metadata?.provider_filename)\n      : undefined\n\n  const entitiesInWatchlist = useEntitiesFromWatchlists(query?.expression)\n  const queryEntities = query?.expression\n    ? getExpressionIds(query?.expression, { excludeNot: true })\n    : []\n\n  const entities = [...queryEntities, ...entitiesInWatchlist]\n  const hasQuery = Boolean(query)\n\n  const keywords = query?.expression\n    ? getExpressionIds(query?.expression, { excludeNot: true, types: [\"keyword\"] })\n    : []\n\n  const chunks = useMemo(\n    () => (queryChunks.length ? queryChunks : documentData.chunks),\n    [documentData.chunks, queryChunks],\n  )\n\n  useLayoutEffect(() => {\n    if (startingChunkId) {\n      const chunkIndex = chunks.findIndex(chunk => chunk.cnum === startingChunkId)\n      if (chunkIndex !== -1) {\n        setSelectedSentence(chunkIndex)\n      }\n    }\n  }, [chunks, startingChunkId])\n\n  return {\n    matches: {\n      chunks,\n      isLoading: chunksLoading,\n      count: chunksCount,\n      selectedMatch: selectedSentence,\n      setSelectedMatch: setSelectedSentence,\n      hasQuery,\n    },\n    documentInfo: {\n      entities,\n      events: [],\n      keywords,\n      documentScope,\n      language,\n      extension,\n      mediaType,\n      isEmpty: !rpjsonDocument?.content.body,\n    },\n    finds: {\n      searchValue: find,\n      setSearchValue: setFind,\n      count: foundCount,\n      setCount: setFoundCount,\n      selectedFind: selectedFindIndex,\n      setSelectedFind: setSelectedFindIndex,\n    },\n    queryId: documentData.queryId,\n  }\n}\n\nexport { useDocumentViewer }\n"],"names":["useDocumentViewer","rpjsonDocument","namespace","selectedSentence","setSelectedSentence","useState","find","setFind","foundCount","setFoundCount","selectedFindIndex","setSelectedFindIndex","documentData","useDocumentViewerData","validDocumentData","documentId","document","rp_document_id","query","documentScope","language","startingChunkId","documentViewerDataDefault","chunks","queryChunks","isLoading","chunksLoading","count","chunksCount","useDocumentChunks","hideMatches","mediaType","metadata","media_type","undefined","extension","getFileExtension","provider_filename","entitiesInWatchlist","useEntitiesFromWatchlists","expression","queryEntities","getExpressionIds","excludeNot","entities","hasQuery","Boolean","keywords","types","useMemo","length","useLayoutEffect","chunkIndex","findIndex","chunk","cnum","matches","selectedMatch","setSelectedMatch","documentInfo","events","isEmpty","content","body","finds","searchValue","setSearchValue","setCount","selectedFind","setSelectedFind","queryId"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAsISA;;;eAAAA;;;uBAtI0C;iCAGlB;2BACS;2BACuB;kCAChC;oCACC;AA2ClC,MAAMA,oBAAoB,CAAC,EACzBC,cAAc,EACdC,SAAS,EACY;QAkBOD,mCAAAA,0BAGLA,oCAAAA;IApBvB,MAAM,CAACE,kBAAkBC,oBAAoB,GAAGC,IAAAA,eAAQ,EAAC;IACzD,MAAM,CAACC,MAAMC,QAAQ,GAAGF,IAAAA,eAAQ,EAAC;IACjC,MAAM,CAACG,YAAYC,cAAc,GAAGJ,IAAAA,eAAQ,EAAC;IAC7C,MAAM,CAACK,mBAAmBC,qBAAqB,GAAGN,IAAAA,eAAQ,EAAC;IAC3D,MAAM,EAAEO,YAAY,EAAE,GAAGC,IAAAA,gCAAqB;IAC9C,MAAMC,oBAAoBF,aAAaG,UAAU,KAAKd,eAAee,QAAQ,CAACC,cAAc;IAC5F,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,eAAe,EAAE,GAAGP,oBACxDF,eACAU,oCAAyB;IAE7B,MAAM,EACJC,QAAQC,cAAc,EAAE,EACxBC,WAAWC,aAAa,EACxBC,OAAOC,WAAW,EACnB,GAAGC,IAAAA,qCAAiB,EAACX,OAAON,aAAaG,UAAU,EAAE,CAACH,aAAakB,WAAW;IAE/E,MAAMC,YACJ7B,cAAc,aAAYD,2BAAAA,eAAee,QAAQ,cAAvBf,gDAAAA,oCAAAA,yBAAyB+B,QAAQ,cAAjC/B,wDAAAA,kCAAmCgC,UAAU,GAAGC;IAC5E,MAAMC,YACJjC,cAAc,YACVkC,IAAAA,kCAAgB,GAACnC,4BAAAA,eAAee,QAAQ,cAAvBf,iDAAAA,qCAAAA,0BAAyB+B,QAAQ,cAAjC/B,yDAAAA,mCAAmCoC,iBAAiB,IACrEH;IAEN,MAAMI,sBAAsBC,IAAAA,oCAAyB,EAACrB,kBAAAA,4BAAAA,MAAOsB,UAAU;IACvE,MAAMC,gBAAgBvB,CAAAA,kBAAAA,4BAAAA,MAAOsB,UAAU,IACnCE,IAAAA,iCAAgB,EAACxB,kBAAAA,4BAAAA,MAAOsB,UAAU,EAAE;QAAEG,YAAY;IAAK,KACvD,EAAE;IAEN,MAAMC,WAAW;WAAIH;WAAkBH;KAAoB;IAC3D,MAAMO,WAAWC,QAAQ5B;IAEzB,MAAM6B,WAAW7B,CAAAA,kBAAAA,4BAAAA,MAAOsB,UAAU,IAC9BE,IAAAA,iCAAgB,EAACxB,kBAAAA,4BAAAA,MAAOsB,UAAU,EAAE;QAAEG,YAAY;QAAMK,OAAO;YAAC;SAAU;IAAC,KAC3E,EAAE;IAEN,MAAMzB,SAAS0B,IAAAA,cAAO,EACpB,IAAOzB,YAAY0B,MAAM,GAAG1B,cAAcZ,aAAaW,MAAM,EAC7D;QAACX,aAAaW,MAAM;QAAEC;KAAY;IAGpC2B,IAAAA,sBAAe,EAAC;QACd,IAAI9B,iBAAiB;YACnB,MAAM+B,aAAa7B,OAAO8B,SAAS,CAACC,CAAAA,QAASA,MAAMC,IAAI,KAAKlC;YAC5D,IAAI+B,eAAe,CAAC,GAAG;gBACrBhD,oBAAoBgD;YACtB;QACF;IACF,GAAG;QAAC7B;QAAQF;KAAgB;IAE5B,OAAO;QACLmC,SAAS;YACPjC;YACAE,WAAWC;YACXC,OAAOC;YACP6B,eAAetD;YACfuD,kBAAkBtD;YAClByC;QACF;QACAc,cAAc;YACZf;YACAgB,QAAQ,EAAE;YACVb;YACA5B;YACAC;YACAe;YACAJ;YACA8B,SAAS,EAAC5D,2BAAAA,qCAAAA,eAAgB6D,OAAO,CAACC,IAAI;QACxC;QACAC,OAAO;YACLC,aAAa3D;YACb4D,gBAAgB3D;YAChBoB,OAAOnB;YACP2D,UAAU1D;YACV2D,cAAc1D;YACd2D,iBAAiB1D;QACnB;QACA2D,SAAS1D,aAAa0D,OAAO;IAC/B;AACF"}