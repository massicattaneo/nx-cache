7166e197e5c792f12c63f274a7e3e0ab
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useElementRect", {
    enumerable: true,
    get: function() {
        return useElementRect;
    }
});
const _react = require("react");
const observeElementSize = (fixedRef, onResize)=>{
    const resizeObserver = new ResizeObserver(onResize);
    resizeObserver.observe(fixedRef);
    return ()=>resizeObserver.unobserve(fixedRef);
};
const useElementRect = (element, { resize = false } = {})=>{
    const rect = element === null || element === void 0 ? void 0 : element.getBoundingClientRect();
    const [height, setHeight] = (0, _react.useState)(element === null || element === void 0 ? void 0 : element.clientHeight);
    const [width, setWidth] = (0, _react.useState)(element === null || element === void 0 ? void 0 : element.clientWidth);
    const [top, setTop] = (0, _react.useState)(rect === null || rect === void 0 ? void 0 : rect.top);
    const [left, setLeft] = (0, _react.useState)(rect === null || rect === void 0 ? void 0 : rect.left);
    (0, _react.useEffect)(()=>{
        if (!resize) return;
        const onResize = ()=>{
            const rect = element === null || element === void 0 ? void 0 : element.getBoundingClientRect();
            if (rect) {
                setHeight(rect.height);
                setWidth(rect.width);
                setTop(rect.top);
                setLeft(rect.left);
            }
        };
        window.addEventListener("resize", onResize);
        onResize();
        return ()=>{
            window.removeEventListener("resize", onResize);
        };
    }, [
        element,
        resize
    ]);
    (0, _react.useEffect)(()=>{
        if (!element) return;
        setHeight(element.clientHeight);
        setWidth(element.clientWidth);
        return observeElementSize(element, ()=>{
            setHeight(element.clientHeight);
            setWidth(element.clientWidth);
        });
    }, [
        element
    ]);
    return {
        height,
        width,
        left,
        top
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9ob29rcy9zcmMvdXNlRWxlbWVudFJlY3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5cbmNvbnN0IG9ic2VydmVFbGVtZW50U2l6ZSA9IChmaXhlZFJlZjogRWxlbWVudCwgb25SZXNpemU6IFJlc2l6ZU9ic2VydmVyQ2FsbGJhY2spID0+IHtcbiAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIob25SZXNpemUpXG4gIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZml4ZWRSZWYpXG4gIHJldHVybiAoKSA9PiByZXNpemVPYnNlcnZlci51bm9ic2VydmUoZml4ZWRSZWYpXG59XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgcmVzaXplPzogYm9vbGVhblxufVxuXG5jb25zdCB1c2VFbGVtZW50UmVjdCA9IChlbGVtZW50OiBFbGVtZW50IHwgbnVsbCwgeyByZXNpemUgPSBmYWxzZSB9OiBPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQ/LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIGNvbnN0IFtoZWlnaHQsIHNldEhlaWdodF0gPSB1c2VTdGF0ZTxudW1iZXIgfCB1bmRlZmluZWQ+KGVsZW1lbnQ/LmNsaWVudEhlaWdodClcbiAgY29uc3QgW3dpZHRoLCBzZXRXaWR0aF0gPSB1c2VTdGF0ZTxudW1iZXIgfCB1bmRlZmluZWQ+KGVsZW1lbnQ/LmNsaWVudFdpZHRoKVxuICBjb25zdCBbdG9wLCBzZXRUb3BdID0gdXNlU3RhdGU8bnVtYmVyIHwgdW5kZWZpbmVkPihyZWN0Py50b3ApXG4gIGNvbnN0IFtsZWZ0LCBzZXRMZWZ0XSA9IHVzZVN0YXRlPG51bWJlciB8IHVuZGVmaW5lZD4ocmVjdD8ubGVmdClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcmVzaXplKSByZXR1cm5cbiAgICBjb25zdCBvblJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgaWYgKHJlY3QpIHtcbiAgICAgICAgc2V0SGVpZ2h0KHJlY3QuaGVpZ2h0KVxuICAgICAgICBzZXRXaWR0aChyZWN0LndpZHRoKVxuICAgICAgICBzZXRUb3AocmVjdC50b3ApXG4gICAgICAgIHNldExlZnQocmVjdC5sZWZ0KVxuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBvblJlc2l6ZSlcbiAgICBvblJlc2l6ZSgpXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uUmVzaXplKVxuICAgIH1cbiAgfSwgW2VsZW1lbnQsIHJlc2l6ZV0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVsZW1lbnQpIHJldHVyblxuICAgIHNldEhlaWdodChlbGVtZW50LmNsaWVudEhlaWdodClcbiAgICBzZXRXaWR0aChlbGVtZW50LmNsaWVudFdpZHRoKVxuICAgIHJldHVybiBvYnNlcnZlRWxlbWVudFNpemUoZWxlbWVudCwgKCkgPT4ge1xuICAgICAgc2V0SGVpZ2h0KGVsZW1lbnQuY2xpZW50SGVpZ2h0KVxuICAgICAgc2V0V2lkdGgoZWxlbWVudC5jbGllbnRXaWR0aClcbiAgICB9KVxuICB9LCBbZWxlbWVudF0pXG5cbiAgcmV0dXJuIHsgaGVpZ2h0LCB3aWR0aCwgbGVmdCwgdG9wIH1cbn1cblxuZXhwb3J0IHsgdXNlRWxlbWVudFJlY3QgfVxuIl0sIm5hbWVzIjpbInVzZUVsZW1lbnRSZWN0Iiwib2JzZXJ2ZUVsZW1lbnRTaXplIiwiZml4ZWRSZWYiLCJvblJlc2l6ZSIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiZWxlbWVudCIsInJlc2l6ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJzZXRIZWlnaHQiLCJ1c2VTdGF0ZSIsImNsaWVudEhlaWdodCIsIndpZHRoIiwic2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInRvcCIsInNldFRvcCIsImxlZnQiLCJzZXRMZWZ0IiwidXNlRWZmZWN0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBa0RTQTs7O2VBQUFBOzs7dUJBbEQyQjtBQUVwQyxNQUFNQyxxQkFBcUIsQ0FBQ0MsVUFBbUJDO0lBQzdDLE1BQU1DLGlCQUFpQixJQUFJQyxlQUFlRjtJQUMxQ0MsZUFBZUUsT0FBTyxDQUFDSjtJQUN2QixPQUFPLElBQU1FLGVBQWVHLFNBQVMsQ0FBQ0w7QUFDeEM7QUFNQSxNQUFNRixpQkFBaUIsQ0FBQ1EsU0FBeUIsRUFBRUMsU0FBUyxLQUFLLEVBQVcsR0FBRyxDQUFDLENBQUM7SUFDL0UsTUFBTUMsT0FBT0Ysb0JBQUFBLDhCQUFBQSxRQUFTRyxxQkFBcUI7SUFDM0MsTUFBTSxDQUFDQyxRQUFRQyxVQUFVLEdBQUdDLElBQUFBLGVBQVEsRUFBcUJOLG9CQUFBQSw4QkFBQUEsUUFBU08sWUFBWTtJQUM5RSxNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR0gsSUFBQUEsZUFBUSxFQUFxQk4sb0JBQUFBLDhCQUFBQSxRQUFTVSxXQUFXO0lBQzNFLE1BQU0sQ0FBQ0MsS0FBS0MsT0FBTyxHQUFHTixJQUFBQSxlQUFRLEVBQXFCSixpQkFBQUEsMkJBQUFBLEtBQU1TLEdBQUc7SUFDNUQsTUFBTSxDQUFDRSxNQUFNQyxRQUFRLEdBQUdSLElBQUFBLGVBQVEsRUFBcUJKLGlCQUFBQSwyQkFBQUEsS0FBTVcsSUFBSTtJQUUvREUsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUksQ0FBQ2QsUUFBUTtRQUNiLE1BQU1OLFdBQVc7WUFDZixNQUFNTyxPQUFPRixvQkFBQUEsOEJBQUFBLFFBQVNHLHFCQUFxQjtZQUMzQyxJQUFJRCxNQUFNO2dCQUNSRyxVQUFVSCxLQUFLRSxNQUFNO2dCQUNyQkssU0FBU1AsS0FBS00sS0FBSztnQkFDbkJJLE9BQU9WLEtBQUtTLEdBQUc7Z0JBQ2ZHLFFBQVFaLEtBQUtXLElBQUk7WUFDbkI7UUFDRjtRQUNBRyxPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVdEI7UUFDbENBO1FBQ0EsT0FBTztZQUNMcUIsT0FBT0UsbUJBQW1CLENBQUMsVUFBVXZCO1FBQ3ZDO0lBQ0YsR0FBRztRQUFDSztRQUFTQztLQUFPO0lBRXBCYyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSSxDQUFDZixTQUFTO1FBQ2RLLFVBQVVMLFFBQVFPLFlBQVk7UUFDOUJFLFNBQVNULFFBQVFVLFdBQVc7UUFDNUIsT0FBT2pCLG1CQUFtQk8sU0FBUztZQUNqQ0ssVUFBVUwsUUFBUU8sWUFBWTtZQUM5QkUsU0FBU1QsUUFBUVUsV0FBVztRQUM5QjtJQUNGLEdBQUc7UUFBQ1Y7S0FBUTtJQUVaLE9BQU87UUFBRUk7UUFBUUk7UUFBT0s7UUFBTUY7SUFBSTtBQUNwQyJ9