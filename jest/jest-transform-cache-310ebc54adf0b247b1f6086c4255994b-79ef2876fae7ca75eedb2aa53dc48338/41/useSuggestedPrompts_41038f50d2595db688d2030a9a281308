d1073e6850bb3e6c3f0dfbdebca04aad
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSuggestedPrompts", {
    enumerable: true,
    get: function() {
        return useSuggestedPrompts;
    }
});
const _react = require("react");
const _filterSuggestedPrompts = require("./filterSuggestedPrompts");
const _usePrompts = require("./usePrompts");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const useSuggestedPrompts = (filters)=>{
    const _usePrompts1 = (0, _usePrompts.usePrompts)(), { data: promptsData } = _usePrompts1, restPrompts = _object_without_properties(_usePrompts1, [
        "data"
    ]);
    const memoFilters = (0, _react.useMemo)(()=>{
        const memo = {
            textFilter: filters === null || filters === void 0 ? void 0 : filters.textFilter,
            watchlistPrompts: filters === null || filters === void 0 ? void 0 : filters.watchlistPrompts,
            includeTopics: filters === null || filters === void 0 ? void 0 : filters.includeTopics,
            includeTask: filters === null || filters === void 0 ? void 0 : filters.includeTask,
            includeScopes: filters === null || filters === void 0 ? void 0 : filters.includeScopes,
            datasets: filters === null || filters === void 0 ? void 0 : filters.datasets,
            includeDatasets: filters === null || filters === void 0 ? void 0 : filters.includeDatasets,
            isFreeTierEnabled: filters === null || filters === void 0 ? void 0 : filters.isFreeTierEnabled,
            hasEntitlement: filters === null || filters === void 0 ? void 0 : filters.hasEntitlement,
            timestamp: filters === null || filters === void 0 ? void 0 : filters.timestamp
        };
        return memo;
    // TODO: memoize hasEntitlement to add it as a dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        filters === null || filters === void 0 ? void 0 : filters.datasets,
        filters === null || filters === void 0 ? void 0 : filters.includeDatasets,
        filters === null || filters === void 0 ? void 0 : filters.includeScopes,
        filters === null || filters === void 0 ? void 0 : filters.includeTask,
        filters === null || filters === void 0 ? void 0 : filters.includeTopics,
        filters === null || filters === void 0 ? void 0 : filters.isFreeTierEnabled,
        filters === null || filters === void 0 ? void 0 : filters.textFilter,
        filters === null || filters === void 0 ? void 0 : filters.timestamp,
        filters === null || filters === void 0 ? void 0 : filters.watchlistPrompts
    ]);
    // TODO refactor
    const data = (0, _react.useMemo)(()=>{
        if (!(promptsData === null || promptsData === void 0 ? void 0 : promptsData.prompts)) return undefined;
        const prompts = (0, _filterSuggestedPrompts.filterSuggestedPrompts)(promptsData, memoFilters);
        return {
            topics: _object_spread({
                Popular: promptsData.topics["Popular"]
            }, promptsData.topics),
            prompts: prompts.prompts
        };
    }, [
        memoFilters,
        promptsData
    ]);
    return {
        isLoading: restPrompts.isLoading,
        data,
        refetchPrompts: restPrompts.refetch,
        isRefetching: restPrompts.isRefetching
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlU3VnZ2VzdGVkUHJvbXB0cy91c2VTdWdnZXN0ZWRQcm9tcHRzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IGZpbHRlclN1Z2dlc3RlZFByb21wdHMgfSBmcm9tIFwiLi9maWx0ZXJTdWdnZXN0ZWRQcm9tcHRzXCJcbmltcG9ydCB7IEZpbHRlcnMsIFN1Z2dlc3RlZFByb21wdHNEYXRhIH0gZnJvbSBcIi4vc3VnZ2VzdGVkUHJvbXB0cy50eXBlc1wiXG5pbXBvcnQgeyB1c2VQcm9tcHRzIH0gZnJvbSBcIi4vdXNlUHJvbXB0c1wiXG5cbmNvbnN0IHVzZVN1Z2dlc3RlZFByb21wdHMgPSAoZmlsdGVycz86IEZpbHRlcnMpID0+IHtcbiAgY29uc3QgeyBkYXRhOiBwcm9tcHRzRGF0YSwgLi4ucmVzdFByb21wdHMgfSA9IHVzZVByb21wdHMoKVxuXG4gIGNvbnN0IG1lbW9GaWx0ZXJzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgbWVtbzogRmlsdGVycyA9IHtcbiAgICAgIHRleHRGaWx0ZXI6IGZpbHRlcnM/LnRleHRGaWx0ZXIsXG4gICAgICB3YXRjaGxpc3RQcm9tcHRzOiBmaWx0ZXJzPy53YXRjaGxpc3RQcm9tcHRzLFxuICAgICAgaW5jbHVkZVRvcGljczogZmlsdGVycz8uaW5jbHVkZVRvcGljcyxcbiAgICAgIGluY2x1ZGVUYXNrOiBmaWx0ZXJzPy5pbmNsdWRlVGFzayxcbiAgICAgIGluY2x1ZGVTY29wZXM6IGZpbHRlcnM/LmluY2x1ZGVTY29wZXMsXG4gICAgICBkYXRhc2V0czogZmlsdGVycz8uZGF0YXNldHMsXG4gICAgICBpbmNsdWRlRGF0YXNldHM6IGZpbHRlcnM/LmluY2x1ZGVEYXRhc2V0cyxcbiAgICAgIGlzRnJlZVRpZXJFbmFibGVkOiBmaWx0ZXJzPy5pc0ZyZWVUaWVyRW5hYmxlZCxcbiAgICAgIGhhc0VudGl0bGVtZW50OiBmaWx0ZXJzPy5oYXNFbnRpdGxlbWVudCxcbiAgICAgIHRpbWVzdGFtcDogZmlsdGVycz8udGltZXN0YW1wLFxuICAgIH1cbiAgICByZXR1cm4gbWVtb1xuICAgIC8vIFRPRE86IG1lbW9pemUgaGFzRW50aXRsZW1lbnQgdG8gYWRkIGl0IGFzIGEgZGVwZW5kZW5jeVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW1xuICAgIGZpbHRlcnM/LmRhdGFzZXRzLFxuICAgIGZpbHRlcnM/LmluY2x1ZGVEYXRhc2V0cyxcbiAgICBmaWx0ZXJzPy5pbmNsdWRlU2NvcGVzLFxuICAgIGZpbHRlcnM/LmluY2x1ZGVUYXNrLFxuICAgIGZpbHRlcnM/LmluY2x1ZGVUb3BpY3MsXG4gICAgZmlsdGVycz8uaXNGcmVlVGllckVuYWJsZWQsXG4gICAgZmlsdGVycz8udGV4dEZpbHRlcixcbiAgICBmaWx0ZXJzPy50aW1lc3RhbXAsXG4gICAgZmlsdGVycz8ud2F0Y2hsaXN0UHJvbXB0cyxcbiAgXSlcblxuICAvLyBUT0RPIHJlZmFjdG9yXG4gIGNvbnN0IGRhdGE6IFN1Z2dlc3RlZFByb21wdHNEYXRhIHwgdW5kZWZpbmVkID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFwcm9tcHRzRGF0YT8ucHJvbXB0cykgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IHByb21wdHMgPSBmaWx0ZXJTdWdnZXN0ZWRQcm9tcHRzKHByb21wdHNEYXRhLCBtZW1vRmlsdGVycylcbiAgICByZXR1cm4ge1xuICAgICAgdG9waWNzOiB7XG4gICAgICAgIFBvcHVsYXI6IHByb21wdHNEYXRhLnRvcGljc1tcIlBvcHVsYXJcIl0sXG4gICAgICAgIC4uLnByb21wdHNEYXRhLnRvcGljcyxcbiAgICAgIH0sXG4gICAgICBwcm9tcHRzOiBwcm9tcHRzLnByb21wdHMsXG4gICAgfVxuICB9LCBbbWVtb0ZpbHRlcnMsIHByb21wdHNEYXRhXSlcblxuICByZXR1cm4ge1xuICAgIGlzTG9hZGluZzogcmVzdFByb21wdHMuaXNMb2FkaW5nLFxuICAgIGRhdGEsXG4gICAgcmVmZXRjaFByb21wdHM6IHJlc3RQcm9tcHRzLnJlZmV0Y2gsXG4gICAgaXNSZWZldGNoaW5nOiByZXN0UHJvbXB0cy5pc1JlZmV0Y2hpbmcsXG4gIH1cbn1cblxuZXhwb3J0IHsgdXNlU3VnZ2VzdGVkUHJvbXB0cyB9XG4iXSwibmFtZXMiOlsidXNlU3VnZ2VzdGVkUHJvbXB0cyIsImZpbHRlcnMiLCJ1c2VQcm9tcHRzIiwiZGF0YSIsInByb21wdHNEYXRhIiwicmVzdFByb21wdHMiLCJtZW1vRmlsdGVycyIsInVzZU1lbW8iLCJtZW1vIiwidGV4dEZpbHRlciIsIndhdGNobGlzdFByb21wdHMiLCJpbmNsdWRlVG9waWNzIiwiaW5jbHVkZVRhc2siLCJpbmNsdWRlU2NvcGVzIiwiZGF0YXNldHMiLCJpbmNsdWRlRGF0YXNldHMiLCJpc0ZyZWVUaWVyRW5hYmxlZCIsImhhc0VudGl0bGVtZW50IiwidGltZXN0YW1wIiwicHJvbXB0cyIsInVuZGVmaW5lZCIsImZpbHRlclN1Z2dlc3RlZFByb21wdHMiLCJ0b3BpY3MiLCJQb3B1bGFyIiwiaXNMb2FkaW5nIiwicmVmZXRjaFByb21wdHMiLCJyZWZldGNoIiwiaXNSZWZldGNoaW5nIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXlEU0E7OztlQUFBQTs7O3VCQXpEZTt3Q0FDZTs0QkFFWjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFM0IsTUFBTUEsc0JBQXNCLENBQUNDO0lBQzNCLE1BQThDQyxlQUFBQSxJQUFBQSxzQkFBVSxLQUFsRCxFQUFFQyxNQUFNQyxXQUFXLEVBQWtCLEdBQUdGLGNBQWhCRyx5Q0FBZ0JIO1FBQXRDQzs7SUFFUixNQUFNRyxjQUFjQyxJQUFBQSxjQUFPLEVBQUM7UUFDMUIsTUFBTUMsT0FBZ0I7WUFDcEJDLFVBQVUsRUFBRVIsb0JBQUFBLDhCQUFBQSxRQUFTUSxVQUFVO1lBQy9CQyxnQkFBZ0IsRUFBRVQsb0JBQUFBLDhCQUFBQSxRQUFTUyxnQkFBZ0I7WUFDM0NDLGFBQWEsRUFBRVYsb0JBQUFBLDhCQUFBQSxRQUFTVSxhQUFhO1lBQ3JDQyxXQUFXLEVBQUVYLG9CQUFBQSw4QkFBQUEsUUFBU1csV0FBVztZQUNqQ0MsYUFBYSxFQUFFWixvQkFBQUEsOEJBQUFBLFFBQVNZLGFBQWE7WUFDckNDLFFBQVEsRUFBRWIsb0JBQUFBLDhCQUFBQSxRQUFTYSxRQUFRO1lBQzNCQyxlQUFlLEVBQUVkLG9CQUFBQSw4QkFBQUEsUUFBU2MsZUFBZTtZQUN6Q0MsaUJBQWlCLEVBQUVmLG9CQUFBQSw4QkFBQUEsUUFBU2UsaUJBQWlCO1lBQzdDQyxjQUFjLEVBQUVoQixvQkFBQUEsOEJBQUFBLFFBQVNnQixjQUFjO1lBQ3ZDQyxTQUFTLEVBQUVqQixvQkFBQUEsOEJBQUFBLFFBQVNpQixTQUFTO1FBQy9CO1FBQ0EsT0FBT1Y7SUFDUCx5REFBeUQ7SUFDekQsdURBQXVEO0lBQ3pELEdBQUc7UUFDRFAsb0JBQUFBLDhCQUFBQSxRQUFTYSxRQUFRO1FBQ2pCYixvQkFBQUEsOEJBQUFBLFFBQVNjLGVBQWU7UUFDeEJkLG9CQUFBQSw4QkFBQUEsUUFBU1ksYUFBYTtRQUN0Qlosb0JBQUFBLDhCQUFBQSxRQUFTVyxXQUFXO1FBQ3BCWCxvQkFBQUEsOEJBQUFBLFFBQVNVLGFBQWE7UUFDdEJWLG9CQUFBQSw4QkFBQUEsUUFBU2UsaUJBQWlCO1FBQzFCZixvQkFBQUEsOEJBQUFBLFFBQVNRLFVBQVU7UUFDbkJSLG9CQUFBQSw4QkFBQUEsUUFBU2lCLFNBQVM7UUFDbEJqQixvQkFBQUEsOEJBQUFBLFFBQVNTLGdCQUFnQjtLQUMxQjtJQUVELGdCQUFnQjtJQUNoQixNQUFNUCxPQUF5Q0ksSUFBQUEsY0FBTyxFQUFDO1FBQ3JELElBQUksRUFBQ0gsd0JBQUFBLGtDQUFBQSxZQUFhZSxPQUFPLEdBQUUsT0FBT0M7UUFDbEMsTUFBTUQsVUFBVUUsSUFBQUEsOENBQXNCLEVBQUNqQixhQUFhRTtRQUNwRCxPQUFPO1lBQ0xnQixRQUFRO2dCQUNOQyxTQUFTbkIsWUFBWWtCLE1BQU0sQ0FBQyxVQUFVO2VBQ25DbEIsWUFBWWtCLE1BQU07WUFFdkJILFNBQVNBLFFBQVFBLE9BQU87UUFDMUI7SUFDRixHQUFHO1FBQUNiO1FBQWFGO0tBQVk7SUFFN0IsT0FBTztRQUNMb0IsV0FBV25CLFlBQVltQixTQUFTO1FBQ2hDckI7UUFDQXNCLGdCQUFnQnBCLFlBQVlxQixPQUFPO1FBQ25DQyxjQUFjdEIsWUFBWXNCLFlBQVk7SUFDeEM7QUFDRiJ9