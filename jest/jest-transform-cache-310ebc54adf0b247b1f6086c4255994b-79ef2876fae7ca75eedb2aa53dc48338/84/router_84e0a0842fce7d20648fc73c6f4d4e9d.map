{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/@trpc/server/dist/unstable-core-do-not-import/router.js"],"sourcesContent":["'use strict';\n\nvar createProxy = require('./createProxy.js');\nvar formatter = require('./error/formatter.js');\nvar TRPCError = require('./error/TRPCError.js');\nvar transformer = require('./transformer.js');\nvar utils = require('./utils.js');\n\nfunction isRouter(procedureOrRouter) {\n    return procedureOrRouter._def && 'router' in procedureOrRouter._def;\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: formatter.defaultFormatter,\n    transformer: transformer.defaultTransformer\n};\n/**\n * Reserved words that can't be used as router or procedure names\n */ const reservedWords = [\n    /**\n   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy\n   * since JS will think that `.then` is something that exists\n   */ 'then'\n];\n/**\n * @internal\n */ function createRouterFactory(config) {\n    function createRouterInner(input) {\n        const reservedWordsUsed = new Set(Object.keys(input).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) {\n            throw new Error('Reserved words used in `router({})` call: ' + Array.from(reservedWordsUsed).join(', '));\n        }\n        const procedures = utils.omitPrototype({});\n        function step(from, path = []) {\n            const aggregate = utils.omitPrototype({});\n            for (const [key, item] of Object.entries(from ?? {})){\n                if (isRouter(item)) {\n                    aggregate[key] = step(item._def.record, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                if (!isProcedure(item)) {\n                    // RouterRecord\n                    aggregate[key] = step(item, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                const newPath = [\n                    ...path,\n                    key\n                ].join('.');\n                if (procedures[newPath]) {\n                    throw new Error(`Duplicate key: ${newPath}`);\n                }\n                procedures[newPath] = item;\n                aggregate[key] = item;\n            }\n            return aggregate;\n        }\n        const record = step(input);\n        const _def = {\n            _config: config,\n            router: true,\n            procedures,\n            ...emptyRouter,\n            record\n        };\n        return {\n            ...record,\n            _def,\n            createCaller (ctx) {\n                const proxy = createProxy.createRecursiveProxy(({ path , args  })=>{\n                    const fullPath = path.join('.');\n                    const procedure = _def.procedures[fullPath];\n                    return procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type\n                    });\n                });\n                return proxy;\n            }\n        };\n    }\n    return createRouterInner;\n}\nfunction isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === 'function';\n}\n/**\n * @internal\n */ function callProcedure(opts) {\n    const { type , path  } = opts;\n    const proc = opts.procedures[path];\n    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) {\n        throw new TRPCError.TRPCError({\n            code: 'NOT_FOUND',\n            message: `No \"${type}\"-procedure on path \"${path}\"`\n        });\n    }\n    return proc(opts);\n}\nfunction createCallerFactory() {\n    return function createCallerInner(router) {\n        const _def = router._def;\n        return function createCaller(maybeContext) {\n            const proxy = createProxy.createRecursiveProxy(({ path , args  })=>{\n                const fullPath = path.join('.');\n                const procedure = _def.procedures[fullPath];\n                const callProc = (ctx)=>procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type\n                    });\n                if (typeof maybeContext === 'function') {\n                    const context = maybeContext();\n                    if (context instanceof Promise) {\n                        return context.then(callProc);\n                    }\n                    return callProc(context);\n                }\n                return callProc(maybeContext);\n            });\n            return proxy;\n        };\n    };\n}\nfunction mergeRouters(...routerList) {\n    const record = utils.mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== formatter.defaultFormatter) {\n            if (currentErrorFormatter !== formatter.defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {\n                throw new Error('You seem to have several error formatters');\n            }\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, formatter.defaultFormatter);\n    const transformer$1 = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== transformer.defaultTransformer) {\n            if (prev !== transformer.defaultTransformer && prev !== current._def._config.transformer) {\n                throw new Error('You seem to have several transformers');\n            }\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, transformer.defaultTransformer);\n    const router = createRouterFactory({\n        errorFormatter,\n        transformer: transformer$1,\n        isDev: routerList.every((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.every((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.every((r)=>r._def._config.isServer),\n        $types: routerList[0]?._def._config.$types\n    })(record);\n    return router;\n}\n\nexports.callProcedure = callProcedure;\nexports.createCallerFactory = createCallerFactory;\nexports.createRouterFactory = createRouterFactory;\nexports.mergeRouters = mergeRouters;\n"],"names":["createProxy","require","formatter","TRPCError","transformer","utils","isRouter","procedureOrRouter","_def","emptyRouter","_ctx","_errorShape","_meta","queries","mutations","subscriptions","errorFormatter","defaultFormatter","defaultTransformer","reservedWords","createRouterFactory","config","createRouterInner","input","reservedWordsUsed","Set","Object","keys","filter","v","includes","size","Error","Array","from","join","procedures","omitPrototype","step","path","aggregate","key","item","entries","record","isProcedure","newPath","_config","router","createCaller","ctx","proxy","createRecursiveProxy","args","fullPath","procedure","getRawInput","type","callProcedure","opts","proc","allowMethodOverride","code","message","createCallerFactory","createCallerInner","maybeContext","callProc","context","Promise","then","mergeRouters","routerList","mergeWithoutOverrides","map","r","reduce","currentErrorFormatter","nextRouter","transformer$1","prev","current","isDev","every","allowOutsideOfServer","isServer","$types","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}