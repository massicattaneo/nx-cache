8de5d53b911bf89ef15f9932b6dcf500
'use strict';
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var createProxy = require('./createProxy.js');
var formatter = require('./error/formatter.js');
var TRPCError = require('./error/TRPCError.js');
var transformer = require('./transformer.js');
var utils = require('./utils.js');
function isRouter(procedureOrRouter) {
    return procedureOrRouter._def && 'router' in procedureOrRouter._def;
}
const emptyRouter = {
    _ctx: null,
    _errorShape: null,
    _meta: null,
    queries: {},
    mutations: {},
    subscriptions: {},
    errorFormatter: formatter.defaultFormatter,
    transformer: transformer.defaultTransformer
};
/**
 * Reserved words that can't be used as router or procedure names
 */ const reservedWords = [
    /**
   * Then is a reserved word because otherwise we can't return a promise that returns a Proxy
   * since JS will think that `.then` is something that exists
   */ 'then'
];
/**
 * @internal
 */ function createRouterFactory(config) {
    function createRouterInner(input) {
        const reservedWordsUsed = new Set(Object.keys(input).filter((v)=>reservedWords.includes(v)));
        if (reservedWordsUsed.size > 0) {
            throw new Error('Reserved words used in `router({})` call: ' + Array.from(reservedWordsUsed).join(', '));
        }
        const procedures = utils.omitPrototype({});
        function step(from, path = []) {
            const aggregate = utils.omitPrototype({});
            for (const [key, item] of Object.entries(from !== null && from !== void 0 ? from : {})){
                if (isRouter(item)) {
                    aggregate[key] = step(item._def.record, [
                        ...path,
                        key
                    ]);
                    continue;
                }
                if (!isProcedure(item)) {
                    // RouterRecord
                    aggregate[key] = step(item, [
                        ...path,
                        key
                    ]);
                    continue;
                }
                const newPath = [
                    ...path,
                    key
                ].join('.');
                if (procedures[newPath]) {
                    throw new Error(`Duplicate key: ${newPath}`);
                }
                procedures[newPath] = item;
                aggregate[key] = item;
            }
            return aggregate;
        }
        const record = step(input);
        const _def = _object_spread_props(_object_spread({
            _config: config,
            router: true,
            procedures
        }, emptyRouter), {
            record
        });
        return _object_spread_props(_object_spread({}, record), {
            _def,
            createCaller (ctx) {
                const proxy = createProxy.createRecursiveProxy(({ path, args })=>{
                    const fullPath = path.join('.');
                    const procedure = _def.procedures[fullPath];
                    return procedure({
                        path: fullPath,
                        getRawInput: async ()=>args[0],
                        ctx,
                        type: procedure._def.type
                    });
                });
                return proxy;
            }
        });
    }
    return createRouterInner;
}
function isProcedure(procedureOrRouter) {
    return typeof procedureOrRouter === 'function';
}
/**
 * @internal
 */ function callProcedure(opts) {
    const { type, path } = opts;
    const proc = opts.procedures[path];
    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) {
        throw new TRPCError.TRPCError({
            code: 'NOT_FOUND',
            message: `No "${type}"-procedure on path "${path}"`
        });
    }
    return proc(opts);
}
function createCallerFactory() {
    return function createCallerInner(router) {
        const _def = router._def;
        return function createCaller(maybeContext) {
            const proxy = createProxy.createRecursiveProxy(({ path, args })=>{
                const fullPath = path.join('.');
                const procedure = _def.procedures[fullPath];
                const callProc = (ctx)=>procedure({
                        path: fullPath,
                        getRawInput: async ()=>args[0],
                        ctx,
                        type: procedure._def.type
                    });
                if (typeof maybeContext === 'function') {
                    const context = maybeContext();
                    if (context instanceof Promise) {
                        return context.then(callProc);
                    }
                    return callProc(context);
                }
                return callProc(maybeContext);
            });
            return proxy;
        };
    };
}
function mergeRouters(...routerList) {
    var _routerList_;
    const record = utils.mergeWithoutOverrides({}, ...routerList.map((r)=>r._def.record));
    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{
        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== formatter.defaultFormatter) {
            if (currentErrorFormatter !== formatter.defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) {
                throw new Error('You seem to have several error formatters');
            }
            return nextRouter._def._config.errorFormatter;
        }
        return currentErrorFormatter;
    }, formatter.defaultFormatter);
    const transformer$1 = routerList.reduce((prev, current)=>{
        if (current._def._config.transformer && current._def._config.transformer !== transformer.defaultTransformer) {
            if (prev !== transformer.defaultTransformer && prev !== current._def._config.transformer) {
                throw new Error('You seem to have several transformers');
            }
            return current._def._config.transformer;
        }
        return prev;
    }, transformer.defaultTransformer);
    const router = createRouterFactory({
        errorFormatter,
        transformer: transformer$1,
        isDev: routerList.every((r)=>r._def._config.isDev),
        allowOutsideOfServer: routerList.every((r)=>r._def._config.allowOutsideOfServer),
        isServer: routerList.every((r)=>r._def._config.isServer),
        $types: (_routerList_ = routerList[0]) === null || _routerList_ === void 0 ? void 0 : _routerList_._def._config.$types
    })(record);
    return router;
}
exports.callProcedure = callProcedure;
exports.createCallerFactory = createCallerFactory;
exports.createRouterFactory = createRouterFactory;
exports.mergeRouters = mergeRouters;

//# sourceMappingURL=data:application/json;base64,