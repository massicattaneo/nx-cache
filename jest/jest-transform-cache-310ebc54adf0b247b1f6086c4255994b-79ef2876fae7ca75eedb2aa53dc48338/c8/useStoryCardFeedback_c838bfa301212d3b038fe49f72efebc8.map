{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/providers/src/FeedbackContext/useStoryCardFeedback.ts"],"sourcesContent":["import { useUser } from \"@clerk/clerk-react\"\nimport { CqsSearchQuery } from \"@rp/common/api-types\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { useSnackbar } from \"../Snackbar\"\nimport { useFeedbackContext } from \"./FeedbackContext\"\nimport { SearchIntent, SubTypes, UserTypes } from \"./feedback.types\"\nimport { useQueryFeedback } from \"./useQueryFeedback\"\n\nconst feedbackKeys = {\n  all: [{ scope: \"feedback\" }] as const,\n  feedback: (id: string, mode: string) =>\n    [{ ...feedbackKeys.all[0], type: \"single\", id, mode }] as const,\n}\n\n// =====================================\n// Types\n// =====================================\ntype UpdateStoryCardFeedback = {\n  sentenceId: string\n  rankProfile: string\n  rankingValue: number\n  resultPosition: number\n  query: CqsSearchQuery\n  intent: SearchIntent\n  dataType: UserTypes\n  dataSubType: SubTypes\n  description: string\n  userId: string\n  query_id: string\n}\n\nexport type Feedback = {\n  sentenceId: string\n  rankingValue: number\n  resultPosition: number\n}\n\n// =====================================\n// API Calls\n// =====================================\nconst updateStoryCardFeedback = async (feedback: UpdateStoryCardFeedback) => {\n  await axiosClient.put<Feedback>(`/feedback/${feedback.query_id}`, {\n    sentenceId: feedback.sentenceId,\n    rankingValue: feedback.rankingValue,\n    resultPosition: feedback.resultPosition,\n  })\n  return feedback\n}\n\nconst deleteStoryCardFeedback = async (feedback: UpdateStoryCardFeedback) => {\n  await axiosClient.delete<Feedback>(`/feedback/${feedback.query_id}/${feedback.sentenceId}`)\n  return feedback\n}\n\n// =====================================\n// CRUD Hooks\n// =====================================\n// Update hook\nconst useUpdateStoryCardFeedback = (sentenceId: string, queryId: string) => {\n  const queryClient = useQueryClient()\n  const { enqueueSuccess, enqueueError } = useSnackbar()\n\n  const onMutate = (feedback: UpdateStoryCardFeedback) => {\n    const previous = queryClient.getQueryData<Array<Feedback>>([\"feedback\", queryId])\n\n    const updatedFeedback: Feedback = {\n      sentenceId: feedback.sentenceId,\n      rankingValue: feedback.rankingValue,\n      resultPosition: feedback.resultPosition,\n    }\n    const filtered = previous?.filter(feedback => feedback.sentenceId !== sentenceId) ?? []\n\n    const newFeedback = [...filtered, updatedFeedback]\n\n    queryClient.setQueryData([\"feedback\", queryId], newFeedback)\n    return { previous, mode: feedback.rankProfile }\n  }\n\n  return useMutation({\n    mutationFn: updateStoryCardFeedback,\n    onMutate,\n    onSuccess: () => {\n      enqueueSuccess(\"Feedback was successfully saved\")\n    },\n    onError: (_err, _variables, context) => {\n      if (context !== undefined) {\n        queryClient.setQueryData(\n          feedbackKeys.feedback(sentenceId, context?.mode),\n          context?.previous,\n        )\n      }\n      enqueueError(`An error saving the feedback has occurred`)\n    },\n  })\n}\n\n// Delete hook\nconst useDeleteStoryCardFeedback = (sentenceId: string) => {\n  const queryClient = useQueryClient()\n  const { enqueueSuccess, enqueueError } = useSnackbar()\n\n  const onMutate = (feedback: UpdateStoryCardFeedback) => {\n    const previous = queryClient.getQueryData<Feedback>(\n      feedbackKeys.feedback(sentenceId, feedback.rankProfile),\n    )\n\n    // Optimistically update the UI\n    const remainingFeedback = queryClient\n      .getQueryData<Array<Feedback>>([\"feedback\", feedback.query_id])\n      ?.filter(feedback => feedback.sentenceId !== sentenceId)\n\n    queryClient.setQueryData([\"feedback\", feedback.query_id], remainingFeedback)\n    queryClient.setQueryData(feedbackKeys.feedback(sentenceId, feedback.rankProfile), null)\n\n    return { previous, mode: feedback.rankProfile }\n  }\n\n  const onSuccess = (feedback: UpdateStoryCardFeedback) => {\n    queryClient.setQueryData(feedbackKeys.feedback(sentenceId, feedback.rankProfile), null)\n    queryClient.invalidateQueries({\n      queryKey: [\"feedback\", feedback.query_id],\n    }) // refetch for freshness\n    enqueueSuccess(\"Feedback was successfully deleted\")\n  }\n\n  return useMutation({\n    mutationFn: deleteStoryCardFeedback,\n    onMutate,\n    onSuccess,\n    onError: (_err, _variables, context) => {\n      if (context !== undefined) {\n        queryClient.setQueryData(\n          feedbackKeys.feedback(sentenceId, context?.mode),\n          context?.previous,\n        )\n      }\n      enqueueError(`An error deleting the feedback has occurred`)\n    },\n  })\n}\n\n// =====================================\n// useFeedback\n// =====================================\nconst useFeedback = (sentenceId: string, resultIndex: number) => {\n  const { user } = useUser()\n  const { savedQuery } = useFeedbackContext()\n  const { data: feedback } = useQueryFeedback(savedQuery.id)\n\n  const { rankingMode, searchIntent, userType, subType, description } = useFeedbackContext()\n\n  const { mutateAsync: updateMutateAsync } = useUpdateStoryCardFeedback(sentenceId, savedQuery.id)\n  const { mutateAsync: deleteMutateAsync } = useDeleteStoryCardFeedback(sentenceId)\n\n  // Update feedback\n  const updateFeedback = async (value: number) => {\n    const payload: UpdateStoryCardFeedback = {\n      rankingValue: value,\n      rankProfile: rankingMode,\n      intent: searchIntent,\n      dataType: userType,\n      dataSubType: subType,\n      description,\n      sentenceId,\n      userId: user?.primaryEmailAddress?.emailAddress ?? \"\",\n      query: savedQuery.query,\n      resultPosition: resultIndex + 1,\n      query_id: savedQuery.id,\n    }\n    await updateMutateAsync(payload)\n  }\n\n  // Delete feedback\n  const deleteFeedback = async () => {\n    const payload: UpdateStoryCardFeedback = {\n      rankingValue: -1,\n      rankProfile: rankingMode,\n      intent: searchIntent,\n      dataType: userType,\n      dataSubType: subType,\n      description,\n      sentenceId,\n      userId: user?.primaryEmailAddress?.emailAddress ?? \"\",\n      query: savedQuery.query,\n      resultPosition: resultIndex + 1,\n      query_id: savedQuery.id,\n    }\n    await deleteMutateAsync(payload)\n  }\n\n  return {\n    feedback: feedback?.get(sentenceId) || 0,\n    updateFeedback,\n    deleteFeedback,\n  }\n}\n\nexport { useFeedback }\n"],"names":["useFeedback","feedbackKeys","all","scope","feedback","id","mode","type","updateStoryCardFeedback","axiosClient","put","query_id","sentenceId","rankingValue","resultPosition","deleteStoryCardFeedback","delete","useUpdateStoryCardFeedback","queryId","queryClient","useQueryClient","enqueueSuccess","enqueueError","useSnackbar","onMutate","previous","getQueryData","updatedFeedback","filtered","filter","newFeedback","setQueryData","rankProfile","useMutation","mutationFn","onSuccess","onError","_err","_variables","context","undefined","useDeleteStoryCardFeedback","remainingFeedback","invalidateQueries","queryKey","resultIndex","user","useUser","savedQuery","useFeedbackContext","data","useQueryFeedback","rankingMode","searchIntent","userType","subType","description","mutateAsync","updateMutateAsync","deleteMutateAsync","updateFeedback","value","payload","intent","dataType","dataSubType","userId","primaryEmailAddress","emailAddress","query","deleteFeedback","get"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}