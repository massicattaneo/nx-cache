{"version":3,"sources":["../../src/hooks/useCollector.ts"],"sourcesContent":["import equal from 'fast-deep-equal'\nimport { useCallback, useState } from 'react'\n\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect.js'\n\n/**\n *\n * @param monitor The monitor to collect state from\n * @param collect The collecting function\n * @param onUpdate A method to invoke when updates occur\n */\nexport function useCollector<T, S>(\n\tmonitor: T,\n\tcollect: (monitor: T) => S,\n\tonUpdate?: () => void,\n): [S, () => void] {\n\tconst [collected, setCollected] = useState(() => collect(monitor))\n\n\tconst updateCollected = useCallback(() => {\n\t\tconst nextValue = collect(monitor)\n\t\t// This needs to be a deep-equality check because some monitor-collected values\n\t\t// include XYCoord objects that may be equivalent, but do not have instance equality.\n\t\tif (!equal(collected, nextValue)) {\n\t\t\tsetCollected(nextValue)\n\t\t\tif (onUpdate) {\n\t\t\t\tonUpdate()\n\t\t\t}\n\t\t}\n\t}, [collected, monitor, onUpdate])\n\n\t// update the collected properties after react renders.\n\t// Note that the \"Dustbin Stress Test\" fails if this is not\n\t// done when the component updates\n\tuseIsomorphicLayoutEffect(updateCollected)\n\n\treturn [collected, updateCollected]\n}\n"],"names":["useCollector","monitor","collect","onUpdate","collected","setCollected","useState","updateCollected","useCallback","nextValue","equal","useIsomorphicLayoutEffect"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAWgBA;;;eAAAA;;;sEAXE;uBACoB;2CAEI;;;;;;AAQnC,SAASA,aACfC,OAAU,EACVC,OAA0B,EAC1BC,QAAqB;IAErB,MAAM,CAACC,WAAWC,aAAa,GAAGC,IAAAA,eAAQ,EAAC,IAAMJ,QAAQD;IAEzD,MAAMM,kBAAkBC,IAAAA,kBAAW,EAAC;QACnC,MAAMC,YAAYP,QAAQD;QAC1B,+EAA+E;QAC/E,qFAAqF;QACrF,IAAI,CAACS,IAAAA,sBAAK,EAACN,WAAWK,YAAY;YACjCJ,aAAaI;YACb,IAAIN,UAAU;gBACbA;;;OAGA;QAACC;QAAWH;QAASE;KAAS;IAEjC,uDAAuD;IACvD,2DAA2D;IAC3D,kCAAkC;IAClCQ,IAAAA,oDAAyB,EAACJ;IAE1B,OAAO;QAACH;QAAWG;KAAgB"}