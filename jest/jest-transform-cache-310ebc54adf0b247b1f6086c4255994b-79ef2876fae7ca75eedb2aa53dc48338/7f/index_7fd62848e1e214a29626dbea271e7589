fdf484fb361a8bf17fec048dd2ddd531
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "adapters", {
    enumerable: true,
    get: function() {
        return adapters;
    }
});
const _browserrum = require("@datadog/browser-rum");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("@sentry/react"));
const _customerio = require("./customer-io");
const _taextensions = require("./ta-extensions");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function utf8ToBase64(utf8Text) {
    const utf8Bytes = new TextEncoder().encode(utf8Text);
    const binaryString = String.fromCharCode(...utf8Bytes);
    return btoa(binaryString);
}
function base64ToUtf8(base64String) {
    const binaryString = atob(base64String);
    const bytes = new Uint8Array([
        ...binaryString
    ].map((char)=>char.charCodeAt(0)));
    return new TextDecoder("utf-8").decode(bytes);
}
const TEMPLATE_TOKEN = "bigdata_web";
const api = {
    async getClerkToken () {
        var _window_Clerk_session, _window_Clerk, _window;
        if (window.localStorage.getItem("integration-testing")) return "token";
        const token = await ((_window = window) === null || _window === void 0 ? void 0 : (_window_Clerk = _window.Clerk) === null || _window_Clerk === void 0 ? void 0 : (_window_Clerk_session = _window_Clerk.session) === null || _window_Clerk_session === void 0 ? void 0 : _window_Clerk_session.getToken({
            template: TEMPLATE_TOKEN
        }));
        return token !== null && token !== void 0 ? token : "";
    }
};
const location = {
    getOrigin: ()=>window.location.origin,
    getAbsoluteBaseUrl: ()=>{
        var _process_env_NX_PUBLIC_PUBLIC_URL;
        return `${window.location.origin}${(_process_env_NX_PUBLIC_PUBLIC_URL = process.env["NX_PUBLIC_PUBLIC_URL"]) !== null && _process_env_NX_PUBLIC_PUBLIC_URL !== void 0 ? _process_env_NX_PUBLIC_PUBLIC_URL : "/"}`;
    },
    getRelativeBaseUrl: ()=>{
        var _process_env_NX_PUBLIC_PUBLIC_URL;
        return `${(_process_env_NX_PUBLIC_PUBLIC_URL = process.env["NX_PUBLIC_PUBLIC_URL"]) !== null && _process_env_NX_PUBLIC_PUBLIC_URL !== void 0 ? _process_env_NX_PUBLIC_PUBLIC_URL : "/"}`;
    }
};
const file = {
    getTaExtension: ()=>_taextensions.TA_EXTENSIONS,
    getSrc: (blob)=>{
        if (blob instanceof File) {
            return window.URL.createObjectURL(blob);
        }
        return "";
    },
    formatData: (file)=>{
        if (file instanceof File) {
            return file;
        }
        return;
    },
    size: async (file)=>{
        if (file instanceof File) {
            return file.size;
        }
        return 0;
    },
    toBase64: (file)=>{
        return new Promise((resolve, reject)=>{
            if (file instanceof File) {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = ()=>{
                    if (typeof reader.result === "string") {
                        const RFC_2397_REG_EXP = /^data:(.*?);base64,(.*)$/;
                        var _reader_result_match;
                        const [_, _mimeType, base64String = ""] = (_reader_result_match = reader.result.match(RFC_2397_REG_EXP)) !== null && _reader_result_match !== void 0 ? _reader_result_match : [];
                        return resolve(utf8ToBase64(base64ToUtf8(base64String)));
                    }
                    resolve("");
                };
                reader.onerror = reject;
            } else {
                resolve("");
            }
        });
    }
};
const customerIo = {
    init: (config)=>{
        if (typeof config === "string") {
            return (0, _customerio.customerIoInit)(config);
        }
    },
    identify: _customerio.customerIoIdentify,
    track: _customerio.customerIoTrack,
    pageView: _customerio.customerIoPageView,
    logout: _customerio.customerIOLogout
};
const asyncStorage = {
    storeDataAsyncStorage: async ()=>{},
    getDataAsyncStorage: async ()=>""
};
const adapters = {
    name: "web",
    api,
    location,
    file,
    customerIo,
    asyncStorage,
    platform: {
        name: "web",
        os: null
    },
    isLocalEnv: ()=>!window.location.hostname.includes("bigdata.com"),
    reportError: async (error, message)=>{
        if (message) {
            _react.withScope((scope)=>{
                scope.setExtras({
                    type: message
                });
                _react.captureException(error);
            });
        } else {
            _react.captureException(error);
        }
        _browserrum.datadogRum.addError(error, {
            message
        });
        return;
    }
};

//# sourceMappingURL=data:application/json;base64,