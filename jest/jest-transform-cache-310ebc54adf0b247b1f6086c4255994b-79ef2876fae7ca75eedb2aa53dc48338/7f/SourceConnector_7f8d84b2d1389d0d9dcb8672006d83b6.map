{"version":3,"sources":["../../src/internals/SourceConnector.ts"],"sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { ReactElement, Ref, RefObject } from 'react'\n\nimport type { DragPreviewOptions, DragSourceOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport interface Connector {\n\thooks: any\n\tconnectTarget: any\n\treceiveHandlerId(handlerId: Identifier | null): void\n\treconnect(): void\n}\n\nexport class SourceConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdragSource: (\n\t\t\tnode: Element | ReactElement | Ref<any>,\n\t\t\toptions?: DragSourceOptions,\n\t\t) => {\n\t\t\tthis.clearDragSource()\n\t\t\tthis.dragSourceOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragSourceRef = node as RefObject<any>\n\t\t\t} else {\n\t\t\t\tthis.dragSourceNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragSource()\n\t\t},\n\t\tdragPreview: (node: any, options?: DragPreviewOptions) => {\n\t\t\tthis.clearDragPreview()\n\t\t\tthis.dragPreviewOptions = options || null\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dragPreviewRef = node\n\t\t\t} else {\n\t\t\t\tthis.dragPreviewNode = node\n\t\t\t}\n\t\t\tthis.reconnectDragPreview()\n\t\t},\n\t})\n\tprivate handlerId: Identifier | null = null\n\n\t// The drop target may either be attached via ref or connect function\n\tprivate dragSourceRef: RefObject<any> | null = null\n\tprivate dragSourceNode: any\n\tprivate dragSourceOptionsInternal: DragSourceOptions | null = null\n\tprivate dragSourceUnsubscribe: Unsubscribe | undefined\n\n\t// The drag preview may either be attached via ref or connect function\n\tprivate dragPreviewRef: RefObject<any> | null = null\n\tprivate dragPreviewNode: any\n\tprivate dragPreviewOptionsInternal: DragPreviewOptions | null = null\n\tprivate dragPreviewUnsubscribe: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDragSource: any = null\n\tprivate lastConnectedDragSourceOptions: any = null\n\tprivate lastConnectedDragPreview: any = null\n\tprivate lastConnectedDragPreviewOptions: any = null\n\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (this.handlerId === newHandlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dragSource\n\t}\n\n\tpublic get dragSourceOptions(): DragSourceOptions | null {\n\t\treturn this.dragSourceOptionsInternal\n\t}\n\tpublic set dragSourceOptions(options: DragSourceOptions | null) {\n\t\tthis.dragSourceOptionsInternal = options\n\t}\n\n\tpublic get dragPreviewOptions(): DragPreviewOptions | null {\n\t\treturn this.dragPreviewOptionsInternal\n\t}\n\n\tpublic set dragPreviewOptions(options: DragPreviewOptions | null) {\n\t\tthis.dragPreviewOptionsInternal = options\n\t}\n\n\tpublic reconnect(): void {\n\t\tconst didChange = this.reconnectDragSource()\n\t\tthis.reconnectDragPreview(didChange)\n\t}\n\n\tprivate reconnectDragSource(): boolean {\n\t\tconst dragSource = this.dragSource\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragSourceChange() ||\n\t\t\tthis.didDragSourceOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragSource()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn didChange\n\t\t}\n\t\tif (!dragSource) {\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\treturn didChange\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragSource = dragSource\n\t\t\tthis.lastConnectedDragSourceOptions = this.dragSourceOptions\n\t\t\tthis.dragSourceUnsubscribe = this.backend.connectDragSource(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragSource,\n\t\t\t\tthis.dragSourceOptions,\n\t\t\t)\n\t\t}\n\t\treturn didChange\n\t}\n\n\tprivate reconnectDragPreview(forceDidChange = false): void {\n\t\tconst dragPreview = this.dragPreview\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tforceDidChange ||\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didConnectedDragPreviewChange() ||\n\t\t\tthis.didDragPreviewOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDragPreview()\n\t\t}\n\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dragPreview) {\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDragPreview = dragPreview\n\t\t\tthis.lastConnectedDragPreviewOptions = this.dragPreviewOptions\n\t\t\tthis.dragPreviewUnsubscribe = this.backend.connectDragPreview(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdragPreview,\n\t\t\t\tthis.dragPreviewOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didConnectedDragSourceChange(): boolean {\n\t\treturn this.lastConnectedDragSource !== this.dragSource\n\t}\n\n\tprivate didConnectedDragPreviewChange(): boolean {\n\t\treturn this.lastConnectedDragPreview !== this.dragPreview\n\t}\n\n\tprivate didDragSourceOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragSourceOptions,\n\t\t\tthis.dragSourceOptions,\n\t\t)\n\t}\n\n\tprivate didDragPreviewOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDragPreviewOptions,\n\t\t\tthis.dragPreviewOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDragSource() {\n\t\tif (this.dragSourceUnsubscribe) {\n\t\t\tthis.dragSourceUnsubscribe()\n\t\t\tthis.dragSourceUnsubscribe = undefined\n\t\t}\n\t}\n\n\tpublic disconnectDragPreview() {\n\t\tif (this.dragPreviewUnsubscribe) {\n\t\t\tthis.dragPreviewUnsubscribe()\n\t\t\tthis.dragPreviewUnsubscribe = undefined\n\t\t\tthis.dragPreviewNode = null\n\t\t\tthis.dragPreviewRef = null\n\t\t}\n\t}\n\n\tprivate get dragSource() {\n\t\treturn (\n\t\t\tthis.dragSourceNode || (this.dragSourceRef && this.dragSourceRef.current)\n\t\t)\n\t}\n\n\tprivate get dragPreview() {\n\t\treturn (\n\t\t\tthis.dragPreviewNode ||\n\t\t\t(this.dragPreviewRef && this.dragPreviewRef.current)\n\t\t)\n\t}\n\n\tprivate clearDragSource() {\n\t\tthis.dragSourceNode = null\n\t\tthis.dragSourceRef = null\n\t}\n\n\tprivate clearDragPreview() {\n\t\tthis.dragPreviewNode = null\n\t\tthis.dragPreviewRef = null\n\t}\n}\n"],"names":["SourceConnector","receiveHandlerId","newHandlerId","handlerId","reconnect","connectTarget","dragSource","dragSourceOptions","dragSourceOptionsInternal","options","dragPreviewOptions","dragPreviewOptionsInternal","didChange","reconnectDragSource","reconnectDragPreview","didHandlerIdChange","didConnectedDragSourceChange","didDragSourceOptionsChange","disconnectDragSource","lastConnectedDragSource","lastConnectedHandlerId","lastConnectedDragSourceOptions","dragSourceUnsubscribe","backend","connectDragSource","forceDidChange","dragPreview","didConnectedDragPreviewChange","didDragPreviewOptionsChange","disconnectDragPreview","lastConnectedDragPreview","lastConnectedDragPreviewOptions","dragPreviewUnsubscribe","connectDragPreview","shallowEqual","undefined","dragPreviewNode","dragPreviewRef","dragSourceNode","dragSourceRef","current","clearDragSource","clearDragPreview","constructor","hooks","wrapConnectorHooks","node","isRef"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}