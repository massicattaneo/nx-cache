{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/discovery-sidebar/src/hooks/useWidgetCategories.ts"],"sourcesContent":["// Packages\nimport { Dispatch, SetStateAction, useCallback, useEffect, useState } from \"react\"\nimport { useAtom } from \"jotai\"\nimport { atomWithStorage } from \"jotai/utils\"\n// Types\nimport { CqsCategories, CqsItem } from \"@rp/common/api-types\"\nimport { RpqlFilter } from \"@rp/common/api-types\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport {\n  DiscoveryPanelCategory,\n  DiscoveryPanelGroup,\n  isGroup,\n  usePanelConfig,\n} from \"@rp/react/tanstack-api/discovery-panel-config\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { getGroupFamilies } from \"./DiscoveryPanel.helpers\"\nimport { useDocumentAnalytics } from \"./DocumentDiscovery.helpers\"\nimport { getSortedCategories } from \"./getSortedCategories\"\nimport { useCurrentDiscoveryPanelPreview } from \"./useDiscoveryPanelPreview\"\n\n// ==============================\n// Types\n// ==============================\n\ntype WidgetCategory = {\n  id: string\n  label: string\n  icon: string\n  groupBy: string\n  groups: Array<DiscoveryPanelGroup>\n  filters: Array<CqsItem>\n  unfoldedFamilies: Array<string>\n  showMore: Array<string>\n  showMoreFamily: boolean\n}\n\ntype CategoryWidgetActions = {\n  setGroupBy: (category: string, groupBy: string) => void\n  toggleFamilyFold: (category: string, family: string) => void\n  toggleShowMore: (category: string, family?: string) => void\n  toggleShowMoreFamily: (category: string) => void\n  reset: (category: string) => void\n  resetToDefault: (category: string) => void\n}\n\ntype GroupingConfig = Record<string, string>\ntype Props = {\n  categories: Record<string, WidgetCategory>\n  groups: GroupingConfig\n  widgetActions: CategoryWidgetActions\n  setCategories: Dispatch<SetStateAction<Record<string, WidgetCategory>>>\n}\n\n// ==============================\n// Helpers\n// ==============================\n\n// To keep storage state synced between panels\nconst groupsAtom = atomWithStorage<GroupingConfig>(\"userGroupingPreferences\", {})\n\nconst getDefaultFold = (filters: Array<CqsItem>, groupBy: string) => {\n  const groupFamilies = getGroupFamilies(filters, groupBy)\n  if (groupFamilies[0]?.label) return [groupFamilies[0]?.label]\n  return []\n}\nconst useWidgetCategories = (): Props => {\n  const { isMobile } = useDeviceInfo()\n  const [categories, setCategories] = useState<Record<string, WidgetCategory>>({})\n  const [groups, setGroups] = useAtom(groupsAtom)\n\n  const resetToDefault = useCallback(\n    (category: string, groupBy?: string) => {\n      setCategories(prev => {\n        if (!prev[category]) return prev\n        const filters = prev[category].filters\n        const families = getGroupFamilies(filters, groupBy ?? groups[category])\n        const noFilters =\n          families.filter(fam => prev[category].unfoldedFamilies.includes(fam.label)).length === 0\n        if (noFilters && families[0]) {\n          const unfoldedFamilies = [families[0].label]\n          return { ...prev, [category]: { ...prev[category], unfoldedFamilies } }\n        }\n        return prev\n      })\n    },\n    [groups],\n  )\n\n  const reset = useCallback((category: string) => {\n    setCategories(prev => {\n      return {\n        ...prev,\n        [category]: {\n          ...prev[category],\n          unfoldedFamilies: [],\n          showMore: [],\n          showMoreFamily: false,\n        },\n      }\n    })\n  }, [])\n\n  const setGroupBy = useCallback(\n    (category: string, groupBy: string) => {\n      setGroups(groups => ({ ...groups, [category]: groupBy }))\n      resetToDefault(category, groupBy)\n    },\n    [setGroups, resetToDefault],\n  )\n\n  const toggleFamilyFold = useCallback((category: string, family: string) => {\n    setCategories(prev => {\n      const unfoldedFamilies = prev[category].unfoldedFamilies.slice(0)\n      const index = unfoldedFamilies.indexOf(family)\n      if (index === -1) {\n        unfoldedFamilies.push(family)\n      } else {\n        unfoldedFamilies.splice(index, 1)\n      }\n      return { ...prev, [category]: { ...prev[category], unfoldedFamilies } }\n    })\n  }, [])\n\n  const toggleShowMore = useCallback((category: string, family = \"\") => {\n    setCategories(prev => {\n      const showMore = prev[category].showMore.slice(0)\n      const index = showMore.indexOf(family)\n      if (index === -1) {\n        showMore.push(family)\n      } else {\n        showMore.splice(index, 1)\n      }\n      return { ...prev, [category]: { ...prev[category], showMore } }\n    })\n  }, [])\n\n  const toggleShowMoreFamily = useCallback((category: string) => {\n    setCategories(prev => {\n      return {\n        ...prev,\n        [category]: { ...prev[category], showMoreFamily: !prev[category].showMoreFamily },\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    if (isMobile) return\n    Object.keys(groups).forEach(category => resetToDefault(category))\n  }, [groups, resetToDefault, isMobile])\n\n  return {\n    categories,\n    groups,\n    widgetActions: {\n      setGroupBy,\n      toggleFamilyFold,\n      toggleShowMore,\n      toggleShowMoreFamily,\n      resetToDefault,\n      reset,\n    },\n    setCategories,\n  }\n}\n\nconst sortedCategories = (\n  serverData: CqsCategories | undefined,\n  discoveryPanelCategories: Array<DiscoveryPanelCategory> | undefined,\n) => {\n  const sortable: CqsCategories = {}\n  const nonSortable: Array<string> = []\n\n  if (serverData && discoveryPanelCategories) {\n    for (const { category, sortable: sort } of discoveryPanelCategories) {\n      if (sort) {\n        sortable[category] = serverData[category]\n      } else if (serverData[category]?.length) {\n        nonSortable.push(category)\n      }\n    }\n    return [...getSortedCategories(sortable), ...nonSortable]\n  }\n  return []\n}\n\nconst isCategory = (item: DiscoveryPanelCategory | undefined): item is DiscoveryPanelCategory => {\n  return !!item\n}\n\n// ==============================\n// Discovery Panel\n// ==============================\n\nconst useDiscoveryPanelWidgetCategories = () => {\n  const {\n    data: serverData,\n    isError,\n    isFetching,\n    isLoading: isLoadingServerData,\n    isFetchingInitialResults,\n    hasQuery,\n    resultsPageState,\n  } = useCurrentDiscoveryPanelPreview()\n\n  const { isMobile } = useDeviceInfo()\n  const { data, isLoading: isLoadingPanel } = usePanelConfig()\n  const { groups, setCategories, categories, ...rest } = useWidgetCategories()\n\n  useEffect(() => {\n    if (!data?.discoveryPanelCategories) return\n\n    if (hasQuery) {\n      setCategories(state => {\n        const entries = sortedCategories(serverData, data.discoveryPanelCategories)\n          .map(cat => data?.discoveryPanelCategories.find(item => item.category === cat))\n          .filter(isCategory)\n          .map(item => {\n            const prev = state[item.category]\n            const defaultGroupBy =\n              item.groups.filter(isGroup).find(group => group.default)?.group ?? \"\"\n            const filters = serverData?.[item.category] ?? []\n            const groupBy = groups[item.category] ?? defaultGroupBy\n            return [\n              item.category,\n              {\n                id: item.category,\n                label: item.category,\n                icon: item.icon,\n                groupBy,\n                groups: item.groups.filter(grp => grp.enabled),\n                filters,\n                unfoldedFamilies:\n                  prev?.unfoldedFamilies ?? (!isMobile ? getDefaultFold(filters, groupBy) : []),\n                showMore: [],\n              },\n            ]\n          })\n        return Object.fromEntries(entries)\n      })\n    }\n  }, [data, groups, setCategories, serverData, hasQuery, resultsPageState, isMobile])\n\n  return {\n    ...rest,\n    categories,\n    isError,\n    labels: data?.discoveryPanelCategories.map(item => item.category) ?? [],\n    isLoading:\n      isLoadingServerData ||\n      isFetching ||\n      isLoadingPanel ||\n      isFetchingInitialResults ||\n      (!Object.keys(categories).length && hasQuery && resultsPageState === \"results\"),\n  }\n}\n\n// Document Discovery Widget Categories\nconst useDocumentDiscoveryWidgetCategories = (\n  rpjsonDocument: RpJsonDocument | undefined,\n  expression?: RpqlFilter,\n) => {\n  const { groups, setCategories, ...rest } = useWidgetCategories()\n  const { analytics, isLoading } = useDocumentAnalytics(rpjsonDocument, expression)\n  const { data } = usePanelConfig()\n\n  useEffect(() => {\n    if (!data?.discoveryPanelCategories) return\n    setCategories(state => {\n      return Object.fromEntries(\n        sortedCategories(analytics, data.discoveryPanelCategories)\n          .map(cat => data?.discoveryPanelCategories.find(item => item.category === cat))\n          .filter(isCategory)\n          .map(item => {\n            const prev = state[item.category]\n            const defaultGroupBy =\n              item.groups.filter(isGroup).find(group => group.default)?.group ?? \"\"\n            const filters = analytics[item.category] ?? []\n            const groupBy = groups[item.category] ?? defaultGroupBy\n            return [\n              item.category,\n              {\n                id: item.category,\n                label: item.label,\n                icon: item.icon,\n                groupBy: groups[item.category] ?? defaultGroupBy,\n                groups: item.groups.filter(isGroup).filter(grp => grp.enabled),\n                filters,\n                unfoldedFamilies: prev?.unfoldedFamilies ?? getDefaultFold(filters, groupBy),\n                showMore: prev?.showMore ?? [],\n                showMoreFamily: prev?.showMoreFamily ?? false,\n              },\n            ]\n          }),\n      )\n    })\n  }, [groups, setCategories, expression, rpjsonDocument, analytics, data])\n\n  return {\n    ...rest,\n    labels: data?.discoveryPanelCategories.map(item => item.category) ?? [],\n    isLoading,\n  }\n}\n\nexport { useDiscoveryPanelWidgetCategories, useDocumentDiscoveryWidgetCategories }\nexport type { CategoryWidgetActions, WidgetCategory }\n"],"names":["useDiscoveryPanelWidgetCategories","useDocumentDiscoveryWidgetCategories","groupsAtom","atomWithStorage","getDefaultFold","filters","groupBy","groupFamilies","getGroupFamilies","label","useWidgetCategories","isMobile","useDeviceInfo","categories","setCategories","useState","groups","setGroups","useAtom","resetToDefault","useCallback","category","prev","families","noFilters","filter","fam","unfoldedFamilies","includes","length","reset","showMore","showMoreFamily","setGroupBy","toggleFamilyFold","family","slice","index","indexOf","push","splice","toggleShowMore","toggleShowMoreFamily","useEffect","Object","keys","forEach","widgetActions","sortedCategories","serverData","discoveryPanelCategories","sortable","nonSortable","sort","getSortedCategories","isCategory","item","data","isError","isFetching","isLoading","isLoadingServerData","isFetchingInitialResults","hasQuery","resultsPageState","useCurrentDiscoveryPanelPreview","isLoadingPanel","usePanelConfig","rest","state","entries","map","cat","find","defaultGroupBy","isGroup","group","default","id","icon","grp","enabled","fromEntries","labels","rpjsonDocument","expression","analytics","useDocumentAnalytics"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,WAAW;;;;;;;;;;;;IAgTFA,iCAAiC;eAAjCA;;IAAmCC,oCAAoC;eAApCA;;;uBA/S+B;uBACnD;uBACQ;sCAUzB;uBACuB;uCACG;0CACI;qCACD;0CACY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmChD,iCAAiC;AACjC,UAAU;AACV,iCAAiC;AAEjC,8CAA8C;AAC9C,MAAMC,aAAaC,IAAAA,sBAAe,EAAiB,2BAA2B,CAAC;AAE/E,MAAMC,iBAAiB,CAACC,SAAyBC;QAE3CC,iBAAiCA;IADrC,MAAMA,gBAAgBC,IAAAA,uCAAgB,EAACH,SAASC;IAChD,KAAIC,kBAAAA,aAAa,CAAC,EAAE,cAAhBA,sCAAAA,gBAAkBE,KAAK,EAAE,OAAO;SAACF,mBAAAA,aAAa,CAAC,EAAE,cAAhBA,uCAAAA,iBAAkBE,KAAK;KAAC;IAC7D,OAAO,EAAE;AACX;AACA,MAAMC,sBAAsB;IAC1B,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAClC,MAAM,CAACC,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAAiC,CAAC;IAC9E,MAAM,CAACC,QAAQC,UAAU,GAAGC,IAAAA,cAAO,EAAChB;IAEpC,MAAMiB,iBAAiBC,IAAAA,kBAAW,EAChC,CAACC,UAAkBf;QACjBQ,cAAcQ,CAAAA;YACZ,IAAI,CAACA,IAAI,CAACD,SAAS,EAAE,OAAOC;YAC5B,MAAMjB,UAAUiB,IAAI,CAACD,SAAS,CAAChB,OAAO;YACtC,MAAMkB,WAAWf,IAAAA,uCAAgB,EAACH,SAASC,oBAAAA,qBAAAA,UAAWU,MAAM,CAACK,SAAS;YACtE,MAAMG,YACJD,SAASE,MAAM,CAACC,CAAAA,MAAOJ,IAAI,CAACD,SAAS,CAACM,gBAAgB,CAACC,QAAQ,CAACF,IAAIjB,KAAK,GAAGoB,MAAM,KAAK;YACzF,IAAIL,aAAaD,QAAQ,CAAC,EAAE,EAAE;gBAC5B,MAAMI,mBAAmB;oBAACJ,QAAQ,CAAC,EAAE,CAACd,KAAK;iBAAC;gBAC5C,OAAO,wCAAKa;oBAAM,CAACD,SAAS,EAAE,wCAAKC,IAAI,CAACD,SAAS;wBAAEM;;;YACrD;YACA,OAAOL;QACT;IACF,GACA;QAACN;KAAO;IAGV,MAAMc,QAAQV,IAAAA,kBAAW,EAAC,CAACC;QACzBP,cAAcQ,CAAAA;YACZ,OAAO,wCACFA;gBACH,CAACD,SAAS,EAAE,wCACPC,IAAI,CAACD,SAAS;oBACjBM,kBAAkB,EAAE;oBACpBI,UAAU,EAAE;oBACZC,gBAAgB;;;QAGtB;IACF,GAAG,EAAE;IAEL,MAAMC,aAAab,IAAAA,kBAAW,EAC5B,CAACC,UAAkBf;QACjBW,UAAUD,CAAAA,SAAW,wCAAKA;gBAAQ,CAACK,SAAS,EAAEf;;QAC9Ca,eAAeE,UAAUf;IAC3B,GACA;QAACW;QAAWE;KAAe;IAG7B,MAAMe,mBAAmBd,IAAAA,kBAAW,EAAC,CAACC,UAAkBc;QACtDrB,cAAcQ,CAAAA;YACZ,MAAMK,mBAAmBL,IAAI,CAACD,SAAS,CAACM,gBAAgB,CAACS,KAAK,CAAC;YAC/D,MAAMC,QAAQV,iBAAiBW,OAAO,CAACH;YACvC,IAAIE,UAAU,CAAC,GAAG;gBAChBV,iBAAiBY,IAAI,CAACJ;YACxB,OAAO;gBACLR,iBAAiBa,MAAM,CAACH,OAAO;YACjC;YACA,OAAO,wCAAKf;gBAAM,CAACD,SAAS,EAAE,wCAAKC,IAAI,CAACD,SAAS;oBAAEM;;;QACrD;IACF,GAAG,EAAE;IAEL,MAAMc,iBAAiBrB,IAAAA,kBAAW,EAAC,CAACC,UAAkBc,SAAS,EAAE;QAC/DrB,cAAcQ,CAAAA;YACZ,MAAMS,WAAWT,IAAI,CAACD,SAAS,CAACU,QAAQ,CAACK,KAAK,CAAC;YAC/C,MAAMC,QAAQN,SAASO,OAAO,CAACH;YAC/B,IAAIE,UAAU,CAAC,GAAG;gBAChBN,SAASQ,IAAI,CAACJ;YAChB,OAAO;gBACLJ,SAASS,MAAM,CAACH,OAAO;YACzB;YACA,OAAO,wCAAKf;gBAAM,CAACD,SAAS,EAAE,wCAAKC,IAAI,CAACD,SAAS;oBAAEU;;;QACrD;IACF,GAAG,EAAE;IAEL,MAAMW,uBAAuBtB,IAAAA,kBAAW,EAAC,CAACC;QACxCP,cAAcQ,CAAAA;YACZ,OAAO,wCACFA;gBACH,CAACD,SAAS,EAAE,wCAAKC,IAAI,CAACD,SAAS;oBAAEW,gBAAgB,CAACV,IAAI,CAACD,SAAS,CAACW,cAAc;;;QAEnF;IACF,GAAG,EAAE;IAELW,IAAAA,gBAAS,EAAC;QACR,IAAIhC,UAAU;QACdiC,OAAOC,IAAI,CAAC7B,QAAQ8B,OAAO,CAACzB,CAAAA,WAAYF,eAAeE;IACzD,GAAG;QAACL;QAAQG;QAAgBR;KAAS;IAErC,OAAO;QACLE;QACAG;QACA+B,eAAe;YACbd;YACAC;YACAO;YACAC;YACAvB;YACAW;QACF;QACAhB;IACF;AACF;AAEA,MAAMkC,mBAAmB,CACvBC,YACAC;IAEA,MAAMC,WAA0B,CAAC;IACjC,MAAMC,cAA6B,EAAE;IAErC,IAAIH,cAAcC,0BAA0B;QAC1C,KAAK,MAAM,EAAE7B,QAAQ,EAAE8B,UAAUE,IAAI,EAAE,IAAIH,yBAA0B;gBAGxDD;YAFX,IAAII,MAAM;gBACRF,QAAQ,CAAC9B,SAAS,GAAG4B,UAAU,CAAC5B,SAAS;YAC3C,OAAO,KAAI4B,uBAAAA,UAAU,CAAC5B,SAAS,cAApB4B,2CAAAA,qBAAsBpB,MAAM,EAAE;gBACvCuB,YAAYb,IAAI,CAAClB;YACnB;QACF;QACA,OAAO;eAAIiC,IAAAA,wCAAmB,EAACH;eAAcC;SAAY;IAC3D;IACA,OAAO,EAAE;AACX;AAEA,MAAMG,aAAa,CAACC;IAClB,OAAO,CAAC,CAACA;AACX;AAEA,iCAAiC;AACjC,kBAAkB;AAClB,iCAAiC;AAEjC,MAAMxD,oCAAoC;IACxC,MAAM,EACJyD,MAAMR,UAAU,EAChBS,OAAO,EACPC,UAAU,EACVC,WAAWC,mBAAmB,EAC9BC,wBAAwB,EACxBC,QAAQ,EACRC,gBAAgB,EACjB,GAAGC,IAAAA,yDAA+B;IAEnC,MAAM,EAAEtD,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAClC,MAAM,EAAE6C,IAAI,EAAEG,WAAWM,cAAc,EAAE,GAAGC,IAAAA,oCAAc;IAC1D,MAAuDzD,uBAAAA,uBAAjD,EAAEM,MAAM,EAAEF,aAAa,EAAED,UAAU,EAAW,GAAGH,sBAAT0D,kCAAS1D;QAA/CM;QAAQF;QAAeD;;IAE/B8B,IAAAA,gBAAS,EAAC;QACR,IAAI,EAACc,iBAAAA,2BAAAA,KAAMP,wBAAwB,GAAE;QAErC,IAAIa,UAAU;YACZjD,cAAcuD,CAAAA;gBACZ,MAAMC,UAAUtB,iBAAiBC,YAAYQ,KAAKP,wBAAwB,EACvEqB,GAAG,CAACC,CAAAA,MAAOf,iBAAAA,2BAAAA,KAAMP,wBAAwB,CAACuB,IAAI,CAACjB,CAAAA,OAAQA,KAAKnC,QAAQ,KAAKmD,MACzE/C,MAAM,CAAC8B,YACPgB,GAAG,CAACf,CAAAA;wBAGDA;oBAFF,MAAMlC,OAAO+C,KAAK,CAACb,KAAKnC,QAAQ,CAAC;wBAE/BmC;oBADF,MAAMkB,iBACJlB,CAAAA,kCAAAA,2BAAAA,KAAKxC,MAAM,CAACS,MAAM,CAACkD,6BAAO,EAAEF,IAAI,CAACG,CAAAA,QAASA,MAAMC,OAAO,eAAvDrB,+CAAAA,yBAA0DoB,KAAK,cAA/DpB,4CAAAA,iCAAmE;wBACrDP;oBAAhB,MAAM5C,UAAU4C,CAAAA,4BAAAA,uBAAAA,iCAAAA,UAAY,CAACO,KAAKnC,QAAQ,CAAC,cAA3B4B,uCAAAA,4BAA+B,EAAE;wBACjCjC;oBAAhB,MAAMV,UAAUU,CAAAA,wBAAAA,MAAM,CAACwC,KAAKnC,QAAQ,CAAC,cAArBL,mCAAAA,wBAAyB0D;wBAWnCpD;oBAVN,OAAO;wBACLkC,KAAKnC,QAAQ;wBACb;4BACEyD,IAAItB,KAAKnC,QAAQ;4BACjBZ,OAAO+C,KAAKnC,QAAQ;4BACpB0D,MAAMvB,KAAKuB,IAAI;4BACfzE;4BACAU,QAAQwC,KAAKxC,MAAM,CAACS,MAAM,CAACuD,CAAAA,MAAOA,IAAIC,OAAO;4BAC7C5E;4BACAsB,kBACEL,CAAAA,yBAAAA,iBAAAA,2BAAAA,KAAMK,gBAAgB,cAAtBL,oCAAAA,yBAA2B,CAACX,WAAWP,eAAeC,SAASC,WAAW,EAAE;4BAC9EyB,UAAU,EAAE;wBACd;qBACD;gBACH;gBACF,OAAOa,OAAOsC,WAAW,CAACZ;YAC5B;QACF;IACF,GAAG;QAACb;QAAMzC;QAAQF;QAAemC;QAAYc;QAAUC;QAAkBrD;KAAS;QAMxE8C;IAJV,OAAO,wCACFW;QACHvD;QACA6C;QACAyB,QAAQ1B,CAAAA,qCAAAA,iBAAAA,2BAAAA,KAAMP,wBAAwB,CAACqB,GAAG,CAACf,CAAAA,OAAQA,KAAKnC,QAAQ,eAAxDoC,gDAAAA,qCAA6D,EAAE;QACvEG,WACEC,uBACAF,cACAO,kBACAJ,4BACC,CAAClB,OAAOC,IAAI,CAAChC,YAAYgB,MAAM,IAAIkC,YAAYC,qBAAqB;;AAE3E;AAEA,uCAAuC;AACvC,MAAM/D,uCAAuC,CAC3CmF,gBACAC;IAEA,MAA2C3E,uBAAAA,uBAArC,EAAEM,MAAM,EAAEF,aAAa,EAAW,GAAGJ,sBAAT0D,kCAAS1D;QAAnCM;QAAQF;;IAChB,MAAM,EAAEwE,SAAS,EAAE1B,SAAS,EAAE,GAAG2B,IAAAA,8CAAoB,EAACH,gBAAgBC;IACtE,MAAM,EAAE5B,IAAI,EAAE,GAAGU,IAAAA,oCAAc;IAE/BxB,IAAAA,gBAAS,EAAC;QACR,IAAI,EAACc,iBAAAA,2BAAAA,KAAMP,wBAAwB,GAAE;QACrCpC,cAAcuD,CAAAA;YACZ,OAAOzB,OAAOsC,WAAW,CACvBlC,iBAAiBsC,WAAW7B,KAAKP,wBAAwB,EACtDqB,GAAG,CAACC,CAAAA,MAAOf,iBAAAA,2BAAAA,KAAMP,wBAAwB,CAACuB,IAAI,CAACjB,CAAAA,OAAQA,KAAKnC,QAAQ,KAAKmD,MACzE/C,MAAM,CAAC8B,YACPgB,GAAG,CAACf,CAAAA;oBAGDA;gBAFF,MAAMlC,OAAO+C,KAAK,CAACb,KAAKnC,QAAQ,CAAC;oBAE/BmC;gBADF,MAAMkB,iBACJlB,CAAAA,kCAAAA,2BAAAA,KAAKxC,MAAM,CAACS,MAAM,CAACkD,6BAAO,EAAEF,IAAI,CAACG,CAAAA,QAASA,MAAMC,OAAO,eAAvDrB,+CAAAA,yBAA0DoB,KAAK,cAA/DpB,4CAAAA,iCAAmE;oBACrD8B;gBAAhB,MAAMjF,UAAUiF,CAAAA,2BAAAA,SAAS,CAAC9B,KAAKnC,QAAQ,CAAC,cAAxBiE,sCAAAA,2BAA4B,EAAE;oBAC9BtE;gBAAhB,MAAMV,UAAUU,CAAAA,wBAAAA,MAAM,CAACwC,KAAKnC,QAAQ,CAAC,cAArBL,mCAAAA,wBAAyB0D;oBAO5B1D,wBAGSM,wBACRA,gBACMA;gBAXpB,OAAO;oBACLkC,KAAKnC,QAAQ;oBACb;wBACEyD,IAAItB,KAAKnC,QAAQ;wBACjBZ,OAAO+C,KAAK/C,KAAK;wBACjBsE,MAAMvB,KAAKuB,IAAI;wBACfzE,SAASU,CAAAA,yBAAAA,MAAM,CAACwC,KAAKnC,QAAQ,CAAC,cAArBL,oCAAAA,yBAAyB0D;wBAClC1D,QAAQwC,KAAKxC,MAAM,CAACS,MAAM,CAACkD,6BAAO,EAAElD,MAAM,CAACuD,CAAAA,MAAOA,IAAIC,OAAO;wBAC7D5E;wBACAsB,kBAAkBL,CAAAA,yBAAAA,iBAAAA,2BAAAA,KAAMK,gBAAgB,cAAtBL,oCAAAA,yBAA0BlB,eAAeC,SAASC;wBACpEyB,UAAUT,CAAAA,iBAAAA,iBAAAA,2BAAAA,KAAMS,QAAQ,cAAdT,4BAAAA,iBAAkB,EAAE;wBAC9BU,gBAAgBV,CAAAA,uBAAAA,iBAAAA,2BAAAA,KAAMU,cAAc,cAApBV,kCAAAA,uBAAwB;oBAC1C;iBACD;YACH;QAEN;IACF,GAAG;QAACN;QAAQF;QAAeuE;QAAYD;QAAgBE;QAAW7B;KAAK;QAI7DA;IAFV,OAAO,wCACFW;QACHe,QAAQ1B,CAAAA,qCAAAA,iBAAAA,2BAAAA,KAAMP,wBAAwB,CAACqB,GAAG,CAACf,CAAAA,OAAQA,KAAKnC,QAAQ,eAAxDoC,gDAAAA,qCAA6D,EAAE;QACvEG;;AAEJ"}