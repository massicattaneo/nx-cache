f00b79651a7df82aeeec54a9bbd85865
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PasswordRecoveryPage", {
    enumerable: true,
    get: function() {
        return PasswordRecoveryPage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _providers = require("@rp/react/web/common/providers");
const _router = /*#__PURE__*/ _interop_require_wildcard(require("@rp/react/web/router"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const PasswordRecoveryPage = ()=>{
    const [searchParams, setSearchParams] = (0, _reactrouterdom.useSearchParams)();
    var _searchParams_get;
    const email = decodeURI((_searchParams_get = searchParams.get("email")) !== null && _searchParams_get !== void 0 ? _searchParams_get : "");
    const [submitDisabled, setSubmitDisabled] = (0, _react.useState)(email === "");
    // const formInAction = useRef(false)
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { isSignedIn } = (0, _clerkreact.useAuth)();
    const { signIn, setActive } = (0, _clerkreact.useSignIn)();
    const { enqueueError } = (0, _providers.useSnackbar)();
    const [newPassword, setNewPassword] = (0, _react.useState)("");
    const [confirmPassword, setConfirmPassword] = (0, _react.useState)("");
    const passwordFormRef = (0, _react.useRef)(null);
    const { validation, resetValidationState } = (0, _hooks.useValidatePasswords)(newPassword, confirmPassword);
    const isValidated = Object.values(validation).every(Boolean);
    (0, _react.useEffect)(()=>{
        // Change the submit button state only when the password form is mounted
        if (passwordFormRef.current) {
            setSubmitDisabled(!isValidated);
        }
    }, [
        isValidated
    ]);
    const [showPassword, setShowPassword] = (0, _react.useState)(false);
    const handleClickShowPassword = ()=>setShowPassword((show)=>!show);
    const handleMouseDownPassword = (event)=>{
        event.preventDefault();
    };
    // ==============================
    // Mutations
    // ==============================
    const onError = (error)=>{
        enqueueError(error ? (0, _utils.displayError)(error) : "User account not found.", {
            anchorOrigin: {
                vertical: "bottom",
                horizontal: "center"
            }
        });
    };
    const { isSuccess, isPending, mutate } = (0, _hooks.useSendCode)(signIn, onError);
    const { mutate: mutateNewPassword, isPending: isPendingNewPassword } = (0, _hooks.useResetPassword)(signIn, setActive, onError);
    const isLoading = isPending || isPendingNewPassword;
    // ==============================
    // Handlers
    // ==============================
    // Send the user a reset code
    function create(e) {
        e.preventDefault();
        // formInAction.current = true
        const formData = new FormData(e.currentTarget);
        const email = formData.get("email");
        if (!email) {
            return;
        }
        setSearchParams();
        return mutate({
            strategy: "reset_password_email_code",
            identifier: email
        });
    }
    // Reset the user's password.
    async function reset(e) {
        e.preventDefault();
        // formInAction.current = true
        const formData = new FormData(e.currentTarget);
        const code = formData.get("code");
        const password = formData.get("new-password");
        if (!isValidated) {
            (0, _utils.displayError)("Password is not valid. Please check the password requirements.");
            return;
        }
        if (!code) {
            (0, _utils.displayError)("Please enter the reset code");
            return;
        }
        return mutateNewPassword({
            strategy: "reset_password_email_code",
            code,
            password
        });
    }
    // If the user is already signed in,
    // redirect them to the home page
    if (isSignedIn) {
        navigate(_router.HOME_ROUTE);
    }
    const title = isSuccess ? "New Password" : "Reset Your Password";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.LoginContainer, {
        pageTitle: title,
        title: title,
        children: isSuccess ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.NewPasswordForm, {
            formRef: passwordFormRef,
            showPassword: showPassword,
            validation: validation,
            isLoading: isLoading,
            isSubmitDisabled: submitDisabled,
            onInvalid: (event)=>{
                event.preventDefault();
                enqueueError("Enter code.");
            },
            onSubmit: reset,
            handleShowHidePassword: handleClickShowPassword,
            handleBackToLogin: ()=>navigate(_router.LOGIN_ROUTE),
            handleMouseDownPassword: handleMouseDownPassword,
            onNewPasswordChange: (e)=>{
                setNewPassword(e.target.value);
            },
            onConfirmPasswordChange: (e)=>{
                setConfirmPassword(e.target.value);
            }
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.ForgotPasswordForm, {
            defaultValue: email,
            onChange: (e)=>{
                setSubmitDisabled(!e.currentTarget.checkValidity());
            },
            onSubmit: (e)=>{
                setSubmitDisabled(true);
                resetValidationState();
                setNewPassword("");
                setConfirmPassword("");
                create(e);
            },
            isLoading: isLoading,
            submitDisabled: submitDisabled,
            handleBackButton: ()=>navigate(_router.LOGIN_ROUTE)
        })
    });
};

//# sourceMappingURL=data:application/json;base64,