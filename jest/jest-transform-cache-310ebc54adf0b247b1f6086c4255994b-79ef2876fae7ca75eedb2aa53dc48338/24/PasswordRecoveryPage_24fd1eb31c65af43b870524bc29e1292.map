{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/PasswordRecovery/PasswordRecoveryPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\nimport { useNavigate, useSearchParams } from \"react-router-dom\"\nimport { useAuth, useSignIn } from \"@clerk/clerk-react\"\nimport { displayError } from \"@rp/common/utils\"\nimport { useResetPassword, useSendCode, useValidatePasswords } from \"@rp/react/common/hooks\"\nimport {\n  ForgotPasswordForm,\n  LoginContainer,\n  NewPasswordForm,\n} from \"@rp/react/web/common/composite-components\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport * as URLS from \"@rp/react/web/router\"\n\nconst PasswordRecoveryPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams()\n\n  const email = decodeURI(searchParams.get(\"email\") ?? \"\")\n  const [submitDisabled, setSubmitDisabled] = useState(email === \"\")\n\n  // const formInAction = useRef(false)\n\n  const navigate = useNavigate()\n  const { isSignedIn } = useAuth()\n  const { signIn, setActive } = useSignIn()\n  const { enqueueError } = useSnackbar()\n\n  const [newPassword, setNewPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n\n  const passwordFormRef = useRef<HTMLFormElement>(null)\n\n  const { validation, resetValidationState } = useValidatePasswords(newPassword, confirmPassword)\n\n  const isValidated = Object.values(validation).every(Boolean)\n\n  useEffect(() => {\n    // Change the submit button state only when the password form is mounted\n    if (passwordFormRef.current) {\n      setSubmitDisabled(!isValidated)\n    }\n  }, [isValidated])\n\n  const [showPassword, setShowPassword] = useState(false)\n  const handleClickShowPassword = () => setShowPassword(show => !show)\n  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n  }\n\n  // ==============================\n  // Mutations\n  // ==============================\n\n  const onError = (error?: Error) => {\n    enqueueError(error ? displayError(error) : \"User account not found.\", {\n      anchorOrigin: { vertical: \"bottom\", horizontal: \"center\" },\n    })\n  }\n\n  const { isSuccess, isPending, mutate } = useSendCode(signIn, onError)\n\n  const { mutate: mutateNewPassword, isPending: isPendingNewPassword } = useResetPassword(\n    signIn,\n    setActive,\n    onError,\n  )\n\n  const isLoading = isPending || isPendingNewPassword\n\n  // ==============================\n  // Handlers\n  // ==============================\n\n  // Send the user a reset code\n  function create(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    // formInAction.current = true\n\n    const formData = new FormData(e.currentTarget)\n    const email = formData.get(\"email\") as string | undefined\n\n    if (!email) {\n      return\n    }\n\n    setSearchParams()\n\n    return mutate({\n      strategy: \"reset_password_email_code\",\n      identifier: email,\n    })\n  }\n\n  // Reset the user's password.\n  async function reset(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    // formInAction.current = true\n\n    const formData = new FormData(e.currentTarget)\n    const code = formData.get(\"code\") as string | undefined\n    const password = formData.get(\"new-password\") as string | undefined\n\n    if (!isValidated) {\n      displayError(\"Password is not valid. Please check the password requirements.\")\n      return\n    }\n\n    if (!code) {\n      displayError(\"Please enter the reset code\")\n      return\n    }\n\n    return mutateNewPassword({\n      strategy: \"reset_password_email_code\",\n      code,\n      password,\n    })\n  }\n\n  // If the user is already signed in,\n  // redirect them to the home page\n  if (isSignedIn) {\n    navigate(URLS.HOME_ROUTE)\n  }\n\n  const title = isSuccess ? \"New Password\" : \"Reset Your Password\"\n\n  return (\n    <LoginContainer pageTitle={title} title={title}>\n      {isSuccess ? (\n        <NewPasswordForm\n          formRef={passwordFormRef}\n          showPassword={showPassword}\n          validation={validation}\n          isLoading={isLoading}\n          isSubmitDisabled={submitDisabled}\n          onInvalid={event => {\n            event.preventDefault()\n            enqueueError(\"Enter code.\")\n          }}\n          onSubmit={reset}\n          handleShowHidePassword={handleClickShowPassword}\n          handleBackToLogin={() => navigate(URLS.LOGIN_ROUTE)}\n          handleMouseDownPassword={handleMouseDownPassword}\n          onNewPasswordChange={e => {\n            setNewPassword(e.target.value)\n          }}\n          onConfirmPasswordChange={e => {\n            setConfirmPassword(e.target.value)\n          }}\n        />\n      ) : (\n        <ForgotPasswordForm\n          defaultValue={email}\n          onChange={e => {\n            setSubmitDisabled(!e.currentTarget.checkValidity())\n          }}\n          onSubmit={e => {\n            setSubmitDisabled(true)\n            resetValidationState()\n            setNewPassword(\"\")\n            setConfirmPassword(\"\")\n            create(e)\n          }}\n          isLoading={isLoading}\n          submitDisabled={submitDisabled}\n          handleBackButton={() => navigate(URLS.LOGIN_ROUTE)}\n        />\n      )}\n    </LoginContainer>\n  )\n}\n\nexport { PasswordRecoveryPage }\n"],"names":["PasswordRecoveryPage","searchParams","setSearchParams","useSearchParams","email","decodeURI","get","submitDisabled","setSubmitDisabled","useState","navigate","useNavigate","isSignedIn","useAuth","signIn","setActive","useSignIn","enqueueError","useSnackbar","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordFormRef","useRef","validation","resetValidationState","useValidatePasswords","isValidated","Object","values","every","Boolean","useEffect","current","showPassword","setShowPassword","handleClickShowPassword","show","handleMouseDownPassword","event","preventDefault","onError","error","displayError","anchorOrigin","vertical","horizontal","isSuccess","isPending","mutate","useSendCode","mutateNewPassword","isPendingNewPassword","useResetPassword","isLoading","create","e","formData","FormData","currentTarget","strategy","identifier","reset","code","password","URLS","HOME_ROUTE","title","LoginContainer","pageTitle","NewPasswordForm","formRef","isSubmitDisabled","onInvalid","onSubmit","handleShowHidePassword","handleBackToLogin","LOGIN_ROUTE","onNewPasswordChange","target","value","onConfirmPasswordChange","ForgotPasswordForm","defaultValue","onChange","checkValidity","handleBackButton"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}