{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/web/utils/src/lib/remark-without-autolinks.ts"],"sourcesContent":["// This code is copied from this npm package:\n// https://www.npmjs.com/package/remark-gfm-no-autolink?activeTab=code\n// The goal is to have the gfm plugin without auto-links\nimport { gfmFootnoteFromMarkdown, gfmFootnoteToMarkdown } from \"mdast-util-gfm-footnote\"\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown,\n} from \"mdast-util-gfm-strikethrough\"\nimport { gfmTableFromMarkdown, gfmTableToMarkdown } from \"mdast-util-gfm-table\"\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown,\n} from \"mdast-util-gfm-task-list-item\"\nimport { gfmFootnote } from \"micromark-extension-gfm-footnote\"\nimport { gfmStrikethrough } from \"micromark-extension-gfm-strikethrough\"\nimport { gfmTable } from \"micromark-extension-gfm-table\"\nimport { gfmTaskListItem } from \"micromark-extension-gfm-task-list-item\"\nimport { combineExtensions } from \"micromark-util-combine-extensions\"\nimport { Options } from \"remark-gfm\"\n\nfunction gfm(options: Options) {\n  return combineExtensions([\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem(),\n  ])\n}\n\nfunction gfmFromMarkdown() {\n  return [\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown(),\n  ]\n}\n\nfunction gfmToMarkdown(options: Options) {\n  return {\n    extensions: [\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown(),\n    ],\n  }\n}\n\nconst emptyOptions = {}\n\nfunction remarkGfmNoAutoLink(options: Options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line @typescript-eslint/no-this-alias\n  const self = /** @type {Processor} */ this\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n\nexport { remarkGfmNoAutoLink }\n"],"names":["remarkGfmNoAutoLink","gfm","options","combineExtensions","gfmFootnote","gfmStrikethrough","gfmTable","gfmTaskListItem","gfmFromMarkdown","gfmFootnoteFromMarkdown","gfmStrikethroughFromMarkdown","gfmTableFromMarkdown","gfmTaskListItemFromMarkdown","gfmToMarkdown","extensions","gfmFootnoteToMarkdown","gfmStrikethroughToMarkdown","gfmTableToMarkdown","gfmTaskListItemToMarkdown","emptyOptions","self","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,6CAA6C;AAC7C,sEAAsE;AACtE,wDAAwD;;;;;+BAiE/CA;;;eAAAA;;;sCAhEsD;2CAIxD;mCACkD;0CAIlD;+CACqB;oDACK;4CACR;mDACO;gDACE;AAGlC,SAASC,IAAIC,OAAgB;IAC3B,OAAOC,IAAAA,iDAAiB,EAAC;QACvBC,IAAAA,0CAAW;QACXC,IAAAA,oDAAgB,EAACH;QACjBI,IAAAA,oCAAQ;QACRC,IAAAA,kDAAe;KAChB;AACH;AAEA,SAASC;IACP,OAAO;QACLC,IAAAA,6CAAuB;QACvBC,IAAAA,uDAA4B;QAC5BC,IAAAA,uCAAoB;QACpBC,IAAAA,qDAA2B;KAC5B;AACH;AAEA,SAASC,cAAcX,OAAgB;IACrC,OAAO;QACLY,YAAY;YACVC,IAAAA,2CAAqB;YACrBC,IAAAA,qDAA0B;YAC1BC,IAAAA,qCAAkB,EAACf;YACnBgB,IAAAA,mDAAyB;SAC1B;IACH;AACF;AAEA,MAAMC,eAAe,CAAC;AAEtB,SAASnB,oBAAoBE,OAAgB;IAC3C,8CAA8C;IAC9C,4DAA4D;IAC5D,MAAMkB,OAAO,sBAAsB,GAAG,IAAI;IAC1C,MAAMC,WAAWnB,WAAWiB;IAC5B,MAAMG,OAAOF,KAAKE,IAAI;IAEtB,MAAMC,sBAAsBD,KAAKC,mBAAmB,IAAKD,CAAAA,KAAKC,mBAAmB,GAAG,EAAE,AAAD;IACrF,MAAMC,yBAAyBF,KAAKE,sBAAsB,IAAKF,CAAAA,KAAKE,sBAAsB,GAAG,EAAE,AAAD;IAC9F,MAAMC,uBAAuBH,KAAKG,oBAAoB,IAAKH,CAAAA,KAAKG,oBAAoB,GAAG,EAAE,AAAD;IAExFF,oBAAoBG,IAAI,CAACzB,IAAIoB;IAC7BG,uBAAuBE,IAAI,CAAClB;IAC5BiB,qBAAqBC,IAAI,CAACb,cAAcQ;AAC1C"}