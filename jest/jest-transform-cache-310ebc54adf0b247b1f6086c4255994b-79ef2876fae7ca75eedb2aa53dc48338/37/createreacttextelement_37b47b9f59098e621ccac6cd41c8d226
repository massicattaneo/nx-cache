db4667202f9d68e6ad958a72652c0e7e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createReactTextElement", {
    enumerable: true,
    get: function() {
        return createReactTextElement;
    }
});
const _react = require("react");
const _constants = require("../constants");
const _collectbreakpoints = require("./collect-breakpoints");
const _createevent = require("./create-event");
const _createhighlightcontainer = require("./create-highlight-container");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const createParagraphNumber = (block)=>{
    return (0, _react.createElement)("span", {
        key: `${block.id}_paragraph_number`,
        children: `${block.paragraphNumber}. `,
        className: _constants.CLASS_NAMES.PARAGRAPH_NUMBER
    });
};
const createSentenceNumber = ({ id, count })=>{
    return (0, _react.createElement)("span", {
        key: `${id}_${count}_sentence_number`,
        children: `[${count}] `,
        className: _constants.CLASS_NAMES.SENTENCE_NUMBER
    });
};
const getClassNameKey = (key)=>key.split(",").filter((item)=>item).map((subItem)=>`${_constants.CLASS_NAMES.ID_PREFIX}${subItem}`).join(" ");
const getClassName = (tag)=>{
    if (!(tag === null || tag === void 0 ? void 0 : tag.rpJsonId)) return "";
    return `${_constants.CLASS_NAMES.TYPE_PREFIX}${tag.rpJsonType} ${getClassNameKey(tag.rpJsonId)} ${_constants.CLASS_NAMES.REACT_ID_PREFIX}${tag.id}`;
};
const getHighlighsChildren = (target, block, path)=>{
    const accumulator = [];
    return Array.from(target.children).map((element)=>element).reduce((acc, el)=>{
        const { rpJsonId } = (0, _createhighlightcontainer.getClassNameInfo)(el);
        if (!rpJsonId) return acc;
        if (!path.includes(el)) return acc;
        const hl = (0, _createhighlightcontainer.getHighlight)(el, block);
        return acc.concat(hl).concat(getHighlighsChildren(el, block, path));
    }, accumulator);
};
const getHighlightsParent = (target, block)=>{
    if (!target) return [];
    if (!target.parentNode) return [];
    const { rpJsonId } = (0, _createhighlightcontainer.getClassNameInfo)(target.parentElement);
    if (!rpJsonId) return [];
    if (!target.parentElement) return [];
    const hl = (0, _createhighlightcontainer.getHighlight)(target.parentElement, block);
    const ret = [
        hl
    ];
    return ret.concat(getHighlightsParent(target.parentElement, block));
};
const removeDuplicates = (highlight, index, array)=>{
    const found = array.find((sub)=>sub.rpJsonId === highlight.rpJsonId && sub.rpJsonType === highlight.rpJsonType);
    if (!found) return false;
    const foundIndex = array.indexOf(found);
    return foundIndex === index;
};
const onAction = (event, block, callback)=>{
    if (!callback) return;
    const collection = [];
    const highlight = (0, _createhighlightcontainer.getHighlight)(event.target, block);
    if (!highlight.rpJsonId) return callback(event, (0, _createevent.createEvent)());
    collection.push(highlight);
    const path = event.nativeEvent.composedPath();
    const arr = getHighlighsChildren(event.target, block, path).concat(getHighlightsParent(event.target, block));
    collection.push(...arr);
    const highlights = collection.filter(removeDuplicates);
    callback(event, (0, _createevent.createEvent)({
        highlights
    }));
};
const createSpanElement = (key, props, block)=>{
    return (0, _react.createElement)("span", _object_spread_props(_object_spread({
        key,
        children: []
    }, props), {
        onClick: (event)=>onAction(event, block, props.onClick),
        onMouseEnter: (event)=>onAction(event, block, props.onMouseEnter),
        onMouseLeave: (event)=>onAction(event, block, props.onMouseLeave)
    }));
};
const pushToProps = (index, props, block)=>(parent, item)=>{
        const propHere = _object_spread_props(_object_spread({}, props), {
            className: getClassName(item)
        });
        const newItem = createSpanElement(`${item.id}-${index}`, propHere, block);
        if (Array.isArray(parent.props.children)) {
            parent.props.children.push(newItem);
        }
        return newItem;
    };
const getParagraphClassname = ({ paragraphNumber })=>{
    return `${_constants.CLASS_NAMES.PARAGRAPH_NUMBER_PREFIX}${paragraphNumber}`;
};
const createReactTextElement = (block, props, rpJsonDetections, options = {})=>{
    const { idIterator = ()=>"" } = options;
    const className = `${_constants.TEXT_ROOT_PREFIX}${block.id} ${getParagraphClassname(block)}`;
    const wrapper = createSpanElement(`${block.id}_text`, _object_spread_props(_object_spread({}, props), {
        className
    }), block);
    if (!wrapper.props.children) {
        wrapper.props.children = [];
    }
    if (Array.isArray(wrapper.props.children)) wrapper.props.children.push(createParagraphNumber(block));
    const breakpoints = (0, _collectbreakpoints.collectBreakPoints)(block, rpJsonDetections, options);
    const tags = [];
    breakpoints.reduce((parent, item, index)=>{
        const previous = breakpoints[index - 1] || {
            index: 0
        };
        const piece = block.text.substring(previous.index, item.index);
        if (!parent.props.children) {
            // eslint-disable-next-line no-param-reassign
            parent.props.children = [];
        }
        if (!Array.isArray(parent.props.children)) return parent;
        if (parent === wrapper && piece) {
            parent.props.children.push((0, _react.createElement)("span", {
                key: idIterator(),
                children: piece,
                className: "rpjson-type-no-sentence"
            }));
        } else if (piece) {
            parent.props.children.push(piece);
        }
        if (item.isBreakLine) {
            if (item.isStart) parent.props.children.push((0, _react.createElement)("br", {
                key: item.id
            }));
            return parent;
        } else if (item.isSentenceNumber) {
            parent.props.children.push(createSentenceNumber(item));
            return parent;
        } else if (item.isStart) {
            tags.push(item);
            return pushToProps(index, props, block)(parent, item);
        } else if (item.isEnd) {
            const find = tags.find((i)=>i.id === item.id);
            tags.splice(find ? tags.indexOf(find) : -1, 1);
            const ret = tags.reduce(pushToProps(index, props, block), wrapper);
            return ret;
        } else {
            return parent;
        }
    }, wrapper);
    return wrapper;
};

//# sourceMappingURL=data:application/json;base64,