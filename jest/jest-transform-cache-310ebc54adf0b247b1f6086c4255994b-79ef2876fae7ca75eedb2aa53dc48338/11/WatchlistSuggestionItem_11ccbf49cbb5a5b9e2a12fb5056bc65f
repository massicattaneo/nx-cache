dcf6c2b16f76fd0ec2cc135314f92baa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistSuggestionItem", {
    enumerable: true,
    get: function() {
        return WatchlistSuggestionItem;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _core = require("@rp/react/web/mui/core");
const WatchlistSuggestionItem = ({ suggestion, selected, included, onChange, categoryFilter, isLoading, disabled, fields })=>{
    const { key, name, description, typeDesc, type } = suggestion;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.TableRow, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableCell, {
                width: 50,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                    title: `This ${type === "rp_topic" ? "topic" : "entity"} is already in your watchlist`,
                    disableFocusListener: !included,
                    disableHoverListener: !included,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                            disabled: disabled || included,
                            name: name,
                            checked: selected,
                            sx: {
                                visibility: isLoading ? "hidden" : "visible"
                            },
                            onChange: (_, selected)=>onChange(key, selected),
                            className: "watchlist-editor-suggestion-item-checkbox"
                        })
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableCell, {
                sx: {
                    maxWidth: 300
                },
                children: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        flexGrow: 1
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                            width: 189,
                            height: 15,
                            variant: "rectangular",
                            sx: {
                                maxWidth: "100%"
                            }
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                            width: 147,
                            height: 15,
                            variant: "rectangular",
                            sx: {
                                mt: 0.5,
                                maxWidth: "70%"
                            }
                        })
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        flexDirection: "column"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            sx: {
                                display: "flex",
                                alignItems: "center"
                            },
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                                    tooltipText: name,
                                    typographyProps: {
                                        variant: "body2"
                                    },
                                    children: name
                                }),
                                (0, _suggestion.isCompanySuggestion)(suggestion) || (0, _suggestion.isETFSuggestion)(suggestion) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                    color: "blue.200",
                                    variant: "caption",
                                    sx: {
                                        ml: 0.5
                                    },
                                    children: suggestion.ticker
                                }) : null
                            ]
                        }),
                        description ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            tooltipText: description,
                            typographyProps: {
                                color: "rgba(255, 255, 255, 0.6)",
                                variant: "body2"
                            },
                            tooltipPlacement: "bottom",
                            vertical: true,
                            children: description
                        }) : null
                    ]
                })
            }),
            categoryFilter ? fields.map(({ key })=>{
                const displayValue = suggestion[key];
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableCell, {
                    children: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                        height: 15,
                        variant: "rectangular"
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        variant: "body2",
                        textAlign: typeof displayValue === "string" ? "left" : "center",
                        children: typeof displayValue === "string" ? displayValue.split("-").map(_core.capitalize).join(" ") : "-"
                    })
                }, key);
            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableCell, {
                sx: {
                    maxWidth: 300
                },
                children: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                    height: 15,
                    variant: "rectangular"
                }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    variant: "body2",
                    children: [
                        typeDesc,
                        " "
                    ]
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,