3732dac5620aaefd90df19cf72acc3b4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "genericTable", {
    enumerable: true,
    get: function() {
        return genericTable;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _utils = require("@rp/common/utils");
require("@tanstack/react-table");
const _WatchlistDataTableActionsCell = require("./WatchlistDataTableCells/WatchlistDataTableActionsCell");
const _WatchlistDataTableNameCell = require("./WatchlistDataTableCells/WatchlistDataTableNameCell");
const _WatchlistDataTableTickerCell = require("./WatchlistDataTableCells/WatchlistDataTableTickerCell");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function genericTable({ columns, tableIcon, tableLabel, tableName, defaultVisible, headerInfo }) {
    const list = [
        {
            id: "ticker",
            accessorFn: (row)=>row.entityInfo.metadata1,
            header: "Symbol",
            size: 120,
            cell: (info)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTableTickerCell.WatchlistDataTableTickerCell, {
                    row: info.row.original
                }),
            meta: {
                menuLabel: "Symbol"
            },
            enableHiding: false
        },
        {
            id: "name",
            accessorFn: (row)=>row.entityInfo.name,
            header: "Name",
            cell: (info)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTableNameCell.WatchlistDataTableNameCell, {
                    row: info.row.original
                }),
            meta: {
                menuLabel: "Name"
            },
            enableHiding: false
        },
        ...columns,
        {
            accessorKey: "actions",
            header: "",
            cell: (info)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTableActionsCell.WatchlistDataTableActionsCell, {
                    row: info.row.original
                }),
            size: 60,
            enableSorting: false,
            enableHiding: false,
            meta: {
                menuLabel: "Actions"
            }
        }
    ];
    return {
        columns: list,
        defaultHidden: list.filter((col)=>{
            if (col.id === "ticker" || col.id === "name" || col.id === "actions") return false;
            return !defaultVisible.find((vis)=>{
                var _col_meta, _col_meta_columnKeys;
                return vis.endpoint === ((_col_meta = col.meta) === null || _col_meta === void 0 ? void 0 : _col_meta.endpoint) && ((_col_meta_columnKeys = col.meta.columnKeys) === null || _col_meta_columnKeys === void 0 ? void 0 : _col_meta_columnKeys.every((key)=>Array.isArray(vis.columnKey) ? vis.columnKey.map((i)=>i.toString()).includes(key.toString()) : vis.columnKey === key));
            });
        }).map((col)=>{
            var _col_id;
            return (_col_id = col.id) !== null && _col_id !== void 0 ? _col_id : "";
        }),
        tableIcon,
        tableLabel,
        tableName,
        headerInfo,
        defaultSort: [
            {
                id: "name",
                desc: false
            }
        ],
        defaultOrder: list.map((col)=>{
            var _col_id;
            return (_col_id = col.id) !== null && _col_id !== void 0 ? _col_id : "";
        }),
        financialDataInput: (entityIds)=>{
            const ep = list.map((col)=>{
                var _col_meta;
                return (_col_meta = col.meta) === null || _col_meta === void 0 ? void 0 : _col_meta.endpoint;
            }).filter(_utils.isDefined);
            return _object_spread({}, ep.reduce((acc, endpoint)=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [endpoint]: {
                        entityIds: entityIds.map((entity)=>entity.key)
                    }
                });
            }, {}), list.reduce((acc, col)=>{
                var _col_meta_extraFinanceData, _col_meta;
                return _object_spread({}, acc, (_col_meta = col.meta) === null || _col_meta === void 0 ? void 0 : (_col_meta_extraFinanceData = _col_meta.extraFinanceData) === null || _col_meta_extraFinanceData === void 0 ? void 0 : _col_meta_extraFinanceData.call(_col_meta, entityIds.map((entity)=>entity.key)));
            }, {}));
        }
    };
}

//# sourceMappingURL=data:application/json;base64,