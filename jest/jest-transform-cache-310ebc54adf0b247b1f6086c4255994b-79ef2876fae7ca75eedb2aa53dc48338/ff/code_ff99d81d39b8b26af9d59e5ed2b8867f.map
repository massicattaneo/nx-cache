{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-markdown/lib/handle/code.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["code","node","_","state","info","marker","checkFence","raw","value","suffix","formatCodeAsIndented","exit","enter","indentLines","map","tracker","createTracker","sequence","repeat","Math","max","longestStreak","move","lang","subexit","safe","before","after","encode","current","meta","line","blank"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;CAMC;;;;+BAaeA;;;eAAAA;;;+BAXY;sCACO;4BACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASlB,SAASA,KAAKC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI;IACvC,MAAMC,SAASC,IAAAA,sBAAU,EAACH;IAC1B,MAAMI,MAAMN,KAAKO,KAAK,IAAI;IAC1B,MAAMC,SAASJ,WAAW,MAAM,gBAAgB;IAEhD,IAAIK,IAAAA,0CAAoB,EAACT,MAAME,QAAQ;QACrC,MAAMQ,OAAOR,MAAMS,KAAK,CAAC;QACzB,MAAMJ,QAAQL,MAAMU,WAAW,CAACN,KAAKO;QACrCH;QACA,OAAOH;IACT;IAEA,MAAMO,UAAUZ,MAAMa,aAAa,CAACZ;IACpC,MAAMa,WAAWZ,OAAOa,MAAM,CAACC,KAAKC,GAAG,CAACC,IAAAA,4BAAa,EAACd,KAAKF,UAAU,GAAG;IACxE,MAAMM,OAAOR,MAAMS,KAAK,CAAC;IACzB,IAAIJ,QAAQO,QAAQO,IAAI,CAACL;IAEzB,IAAIhB,KAAKsB,IAAI,EAAE;QACb,MAAMC,UAAUrB,MAAMS,KAAK,CAAC,CAAC,cAAc,EAAEH,OAAO,CAAC;QACrDD,SAASO,QAAQO,IAAI,CACnBnB,MAAMsB,IAAI,CAACxB,KAAKsB,IAAI,EAAE;YACpBG,QAAQlB;YACRmB,OAAO;YACPC,QAAQ;gBAAC;aAAI;WACVb,QAAQc,OAAO;QAGtBL;IACF;IAEA,IAAIvB,KAAKsB,IAAI,IAAItB,KAAK6B,IAAI,EAAE;QAC1B,MAAMN,UAAUrB,MAAMS,KAAK,CAAC,CAAC,cAAc,EAAEH,OAAO,CAAC;QACrDD,SAASO,QAAQO,IAAI,CAAC;QACtBd,SAASO,QAAQO,IAAI,CACnBnB,MAAMsB,IAAI,CAACxB,KAAK6B,IAAI,EAAE;YACpBJ,QAAQlB;YACRmB,OAAO;YACPC,QAAQ;gBAAC;aAAI;WACVb,QAAQc,OAAO;QAGtBL;IACF;IAEAhB,SAASO,QAAQO,IAAI,CAAC;IAEtB,IAAIf,KAAK;QACPC,SAASO,QAAQO,IAAI,CAACf,MAAM;IAC9B;IAEAC,SAASO,QAAQO,IAAI,CAACL;IACtBN;IACA,OAAOH;AACT;AAEA,gBAAgB,GAChB,SAASM,IAAIiB,IAAI,EAAE7B,CAAC,EAAE8B,KAAK;IACzB,OAAO,AAACA,CAAAA,QAAQ,KAAK,MAAK,IAAKD;AACjC"}