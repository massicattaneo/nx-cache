{"version":3,"sources":["../../../src/hooks/useDrop/useAccept.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Identifier } from 'dnd-core'\nimport { useMemo } from 'react'\n\nimport type { DropTargetHookSpec } from '../types.js'\n\n/**\n * Internal utility hook to get an array-version of spec.accept.\n * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.\n * @param spec\n */\nexport function useAccept<O, R, P>(\n\tspec: DropTargetHookSpec<O, R, P>,\n): Identifier[] {\n\tconst { accept } = spec\n\treturn useMemo(() => {\n\t\tinvariant(spec.accept != null, 'accept must be defined')\n\t\treturn Array.isArray(accept) ? accept : [accept]\n\t}, [accept])\n}\n"],"names":["useAccept","spec","accept","useMemo","invariant","Array","isArray"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAWgBA;;;eAAAA;;;2BAXU;uBAEF;AASjB,SAASA,UACfC,IAAiC;IAEjC,MAAM,EAAEC,MAAM,EAAE,GAAGD;IACnB,OAAOE,IAAAA,cAAO,EAAC;QACdC,IAAAA,oBAAS,EAACH,KAAKC,MAAM,IAAI,MAAM;QAC/B,OAAOG,MAAMC,OAAO,CAACJ,UAAUA,SAAS;YAACA;SAAO;OAC9C;QAACA;KAAO"}