253093f8908e72441271fb54aab8ee6c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyStyle: function() {
        return applyStyle;
    },
    getClassNameInfo: function() {
        return getClassNameInfo;
    },
    getHeight: function() {
        return getHeight;
    },
    getHighlight: function() {
        return getHighlight;
    },
    getLeft: function() {
        return getLeft;
    },
    getPlaceholderBox: function() {
        return getPlaceholderBox;
    },
    getSimilarMatches: function() {
        return getSimilarMatches;
    },
    getTargets: function() {
        return getTargets;
    },
    getTop: function() {
        return getTop;
    },
    getWidth: function() {
        return getWidth;
    },
    renderOver: function() {
        return renderOver;
    }
});
const _client = require("react-dom/client");
const _constants = require("../constants");
const hasAllTheSameY = (rects)=>{
    const filtered = rects.map((item)=>item.y).filter((item, index, array)=>array.indexOf(item) === index);
    return filtered.length === 1;
};
const sumWidth = (rects)=>{
    return rects.reduce((sum, item)=>sum + item.width, 0);
};
const getSimilarElements = (rpJsonId)=>{
    return Array.from(document.querySelectorAll(`.${_constants.ROOT_WRAPPER_CLASSNAME} .${_constants.CLASS_NAMES.ID_PREFIX}${rpJsonId}`));
};
const getClassNameInfo = (target)=>{
    var _target_className;
    const className = (_target_className = target === null || target === void 0 ? void 0 : target.className) !== null && _target_className !== void 0 ? _target_className : "";
    const [, rpJsonId = ""] = className.match(new RegExp(`${_constants.CLASS_NAMES.ID_PREFIX}([^\\s]*)`)) || [];
    const [, rpJsonType = ""] = className.match(new RegExp(`${_constants.CLASS_NAMES.TYPE_PREFIX}([^\\s]*)`)) || [];
    const [, reactId = -1] = className.match(new RegExp(`${_constants.CLASS_NAMES.REACT_ID_PREFIX}([^\\s]*)`)) || [];
    return {
        rpJsonId,
        rpJsonType,
        reactId: Number(reactId)
    };
};
const getWidth = (rects, wrapper)=>{
    if (!rects.length) return 0;
    if (!wrapper) return 0;
    const returnValue = hasAllTheSameY(rects) ? sumWidth(rects) : Math.max(...rects.map((i)=>i.right)) - Math.min(...rects.map((i)=>i.left));
    return Math.min(returnValue, wrapper.width);
};
const getHeight = (rects)=>{
    if (!rects.length) return 0;
    return hasAllTheSameY(rects) ? Math.max(...rects.map((i)=>i.height)) : Math.max(...rects.map((i)=>i.bottom)) - Math.min(...rects.map((i)=>i.top));
};
const getLeft = (rects, wrapper)=>{
    if (!rects.length) return 0;
    if (!wrapper) return 0;
    return Math.min(...rects.map((item)=>item.left)) - wrapper.left;
};
const getTop = (rects, wrapper)=>{
    if (!rects.length) return 0;
    if (!wrapper) return 0;
    return Math.min(...rects.map((item)=>item.top)) - wrapper.top;
};
const getTargets = (elements, target)=>{
    return (elements.length ? Array.from(elements) : [
        target
    ]).filter((el)=>{
        const { left, right } = (el === null || el === void 0 ? void 0 : el.getBoundingClientRect()) || {
            left: 0,
            right: 0
        };
        return left !== right;
    });
};
const createDOMContainer = ()=>{
    const el = document.createElement("div");
    el.className = "rpjson-tooltip-positioned-wrapper";
    el.style.position = "absolute";
    el.style.top = "0px";
    el.style.left = "0px";
    return el;
};
const renderOver = (targets)=>{
    const [target] = targets;
    return (Component)=>{
        const container = createDOMContainer();
        target.appendChild(container);
        const root = (0, _client.createRoot)(container);
        root.render(Component);
        return ()=>{
            const [...containers] = Array.from(target.querySelectorAll(".rpjson-tooltip-positioned-wrapper"));
            containers.forEach((cont)=>{
                root.unmount();
                target.removeChild(cont);
            });
        };
    };
};
const applyStyle = (targets, style)=>{
    const initial = [];
    const elements = targets.reduce((array, element)=>{
        Object.assign(element.style, style);
        return array.concat(element);
    }, initial);
    return ()=>{
        elements.forEach((element)=>{
            Object.keys(style).forEach((key)=>{
                Object.assign(element.style, {
                    [key]: ""
                });
            });
        });
    };
};
const getFirstParentByClassName = (target)=>{
    if (!target) return document.body;
    if (target.className === _constants.ROOT_WRAPPER_CLASSNAME) return target;
    return getFirstParentByClassName(target.parentElement);
};
const getPlaceholderBox = (targets)=>{
    const rects = targets.map((element)=>element.getBoundingClientRect());
    const wrapper = getFirstParentByClassName(targets[0]).getBoundingClientRect();
    const width = getWidth(rects, wrapper);
    const height = getHeight(rects);
    const left = getLeft(rects, wrapper);
    const top = getTop(rects, wrapper);
    return {
        width,
        height,
        left,
        top
    };
};
const getSimilarMatches = (similarElements)=>{
    return Array.from(similarElements).map((el)=>Number(getClassNameInfo(el).reactId)).filter((id, index, array)=>array.indexOf(id) === index);
};
const getHighlight = (target, { id })=>{
    const { rpJsonId, rpJsonType, reactId } = getClassNameInfo(target);
    const root = document.querySelector(`.${_constants.TEXT_ROOT_PREFIX}${id}`);
    const elements = root ? Array.from(root.querySelectorAll(`.${_constants.CLASS_NAMES.REACT_ID_PREFIX}${reactId}`)) : [];
    const targets = getTargets(elements, target);
    const similarElements = getSimilarElements(rpJsonId);
    return {
        relativePlaceholderBox: getPlaceholderBox(targets),
        rpJsonId,
        rpJsonType,
        reactId,
        similarMatches: getSimilarMatches(similarElements),
        applyStyle: (style)=>applyStyle(targets, style),
        renderOver: renderOver(targets)
    };
};

//# sourceMappingURL=data:application/json;base64,