191883f5f9d2e90335eac47ff6685ced
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getConnectToSlackUrl: function() {
        return getConnectToSlackUrl;
    },
    getNewSchedule: function() {
        return getNewSchedule;
    },
    getSlackRedirectUri: function() {
        return getSlackRedirectUri;
    },
    getSlackStatelessRedirectUri: function() {
        return getSlackStatelessRedirectUri;
    },
    slackInviteToChannel: function() {
        return slackInviteToChannel;
    },
    slackParamName: function() {
        return slackParamName;
    },
    useSlackChannels: function() {
        return useSlackChannels;
    },
    useSlackConnect: function() {
        return useSlackConnect;
    },
    useSlackValidateAccess: function() {
        return useSlackValidateAccess;
    }
});
const _adapters = require("@rp/adapters");
const _environment = require("@rp/common/environment");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _reactquery = require("@tanstack/react-query");
const getSlackChannels = async ()=>{
    const { data } = await _axiosclient.axiosClient.get("/bot/slack/channels");
    return data;
};
const slackConnect = async (body)=>{
    const { data } = await _axiosclient.axiosClient.post("/bot/slack/connect", body);
    return data;
};
const slackInviteToChannel = async (body)=>{
    const { data } = await _axiosclient.axiosClient.post("/bot/slack/invite-to-channel", body);
    return data;
};
const slackValidate = async ()=>{
    const { data } = await _axiosclient.axiosClient.post("/bot/slack/validate-access");
    return data;
};
const useSlackConnect = ({ enqueueError })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: slackConnect,
        onSuccess: ()=>{
            queryClient.refetchQueries({
                queryKey: [
                    "slack",
                    "validate-access"
                ]
            });
        },
        onError: ()=>{
            enqueueError("The connection to Slack went wrong. Please try again.");
        }
    });
};
const useSlackValidateAccess = ()=>{
    return (0, _reactquery.useQuery)({
        queryKey: [
            "slack",
            "validate-access"
        ],
        queryFn: slackValidate,
        staleTime: 1000 * 60 * 60 * 24
    });
};
const slackParamName = {
    encode: (value)=>`slack${value}`,
    decode: (value)=>value.replace("slack", "")
};
const getSlackStatelessRedirectUri = ()=>{
    return `${_adapters.adapters.location.getAbsoluteBaseUrl()}slack-connect`;
};
const getSlackRedirectUri = (params)=>{
    const objUrl = new URL(window.location.href);
    Object.entries(params !== null && params !== void 0 ? params : {}).forEach(([key, value])=>{
        objUrl.searchParams.append(slackParamName.encode(key), value !== null && value !== void 0 ? value : "");
    });
    const string = `${objUrl.pathname}${objUrl.search}`;
    const state = encodeURIComponent(string);
    return `${getSlackStatelessRedirectUri()}&state=${state}`;
};
const getConnectToSlackUrl = (redirectUri)=>{
    const path = "https://slack.com/oauth/v2/authorize";
    const redirect = `redirect_uri=${redirectUri}`;
    const clientId = `client_id=${_environment.environment.slack.clientId}`;
    const scope = "scope=app_mentions:read,channels:read,chat:write,commands,groups:read,im:history,reactions:write";
    const userScope = "user_scope=channels:read,groups:read,channels:write,groups:write,chat:write";
    return `${path}?${redirect}&${clientId}&${scope}&${userScope}`;
};
const useSlackChannels = (enabled = true)=>{
    const { data } = useSlackValidateAccess();
    return (0, _reactquery.useQuery)({
        queryKey: [
            "slack",
            "channels"
        ],
        queryFn: getSlackChannels,
        refetchOnWindowFocus: true,
        enabled: !!(data === null || data === void 0 ? void 0 : data.access) && enabled,
        select: (res)=>{
            const channelId = (data === null || data === void 0 ? void 0 : data.access) ? data.slackUserId : "";
            const botChannel = {
                channelId,
                channelName: _environment.environment.slack.botName,
                default: true
            };
            const sorted = res.sort((a, b)=>a.channelName.localeCompare(b.channelName));
            return [
                botChannel,
                ...sorted
            ];
        }
    });
};
const NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE = _utils.awsCron.timeToExpression(_settings.NOTIFICATIONS_TIME_DEFAULTS);
const getNewSchedule = ({ destination, access, emails })=>{
    if (destination === "slack") {
        return {
            schedulerExpression: NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE,
            timezone: _utils.USER_TIMEZONE.value,
            destination,
            destinationParams: {
                slackWorkspaceId: (access === null || access === void 0 ? void 0 : access.access) ? access === null || access === void 0 ? void 0 : access.workspaceId : "",
                slackChannelId: (access === null || access === void 0 ? void 0 : access.access) ? access === null || access === void 0 ? void 0 : access.slackUserId : "",
                slackChannelName: _environment.environment.slack.botName
            }
        };
    }
    return {
        schedulerExpression: NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE,
        timezone: _utils.USER_TIMEZONE.value,
        destination,
        destinationParams: {
            emails: emails !== null && emails !== void 0 ? emails : []
        }
    };
};

//# sourceMappingURL=data:application/json;base64,