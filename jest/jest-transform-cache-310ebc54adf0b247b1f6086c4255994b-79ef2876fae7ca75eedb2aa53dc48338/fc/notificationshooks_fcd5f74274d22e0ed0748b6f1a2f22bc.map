{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/notifications/src/notifications.hooks.tsx"],"sourcesContent":["import { adapters } from \"@rp/adapters\"\nimport {\n  NotificationDestination,\n  NotificationSchedule,\n  SlackAccessGranted,\n  SlackAccessNotGranted,\n  SlackChannel,\n  SlackConnectRequestBody,\n  SlackConnectResponse,\n  SlackDefaultBot,\n  SlackInviteToChannelRequestBody,\n  SlackInviteToChannelResponse,\n} from \"@rp/common/api-types\"\nimport { environment } from \"@rp/common/environment\"\nimport { NOTIFICATIONS_TIME_DEFAULTS } from \"@rp/common/settings\"\nimport { awsCron } from \"@rp/common/utils\"\nimport { USER_TIMEZONE } from \"@rp/common/utils\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { SnackbarEnqueueAction } from \"@rp/react/common/types\"\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\"\n\nconst getSlackChannels = async () => {\n  const { data } = await axiosClient.get<Array<SlackChannel>>(\"/bot/slack/channels\")\n  return data\n}\n\nconst slackConnect = async (body: SlackConnectRequestBody) => {\n  const { data } = await axiosClient.post<SlackConnectResponse>(\"/bot/slack/connect\", body)\n  return data\n}\nconst slackInviteToChannel = async (body: SlackInviteToChannelRequestBody) => {\n  const { data } = await axiosClient.post<SlackInviteToChannelResponse>(\n    \"/bot/slack/invite-to-channel\",\n    body,\n  )\n  return data\n}\nconst slackValidate = async () => {\n  const { data } = await axiosClient.post<SlackAccessGranted | SlackAccessNotGranted>(\n    \"/bot/slack/validate-access\",\n  )\n  return data\n}\n\ntype SnackbarProps = { enqueueError: SnackbarEnqueueAction }\n\nconst useSlackConnect = ({ enqueueError }: SnackbarProps) => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: slackConnect,\n    onSuccess: () => {\n      queryClient.refetchQueries({ queryKey: [\"slack\", \"validate-access\"] })\n    },\n    onError: () => {\n      enqueueError(\"The connection to Slack went wrong. Please try again.\")\n    },\n  })\n}\n\nconst useSlackValidateAccess = () => {\n  return useQuery({\n    queryKey: [\"slack\", \"validate-access\"],\n    queryFn: slackValidate,\n    staleTime: 1000 * 60 * 60 * 24,\n  })\n}\n\nconst slackParamName = {\n  encode: (value: string) => `slack${value}`,\n  decode: (value: string) => value.replace(\"slack\", \"\"),\n}\n\nconst getSlackStatelessRedirectUri = () => {\n  return `${adapters.location.getAbsoluteBaseUrl()}slack-connect`\n}\n\nconst getSlackRedirectUri = (params?: Record<string, string | undefined>) => {\n  const objUrl = new URL(window.location.href)\n  Object.entries(params ?? {}).forEach(([key, value]) => {\n    objUrl.searchParams.append(slackParamName.encode(key), value ?? \"\")\n  })\n  const string = `${objUrl.pathname}${objUrl.search}`\n  const state = encodeURIComponent(string)\n  return `${getSlackStatelessRedirectUri()}&state=${state}`\n}\n\nconst getConnectToSlackUrl = (redirectUri: string) => {\n  const path = \"https://slack.com/oauth/v2/authorize\"\n  const redirect = `redirect_uri=${redirectUri}`\n  const clientId = `client_id=${environment.slack.clientId}`\n  const scope =\n    \"scope=app_mentions:read,channels:read,chat:write,commands,groups:read,im:history,reactions:write\"\n  const userScope = \"user_scope=channels:read,groups:read,channels:write,groups:write,chat:write\"\n  return `${path}?${redirect}&${clientId}&${scope}&${userScope}`\n}\n\nconst useSlackChannels = (enabled = true) => {\n  const { data } = useSlackValidateAccess()\n  return useQuery({\n    queryKey: [\"slack\", \"channels\"],\n    queryFn: getSlackChannels,\n    refetchOnWindowFocus: true,\n    enabled: !!data?.access && enabled,\n    select: res => {\n      const channelId = data?.access ? data.slackUserId : \"\"\n      const botChannel: SlackDefaultBot = {\n        channelId,\n        channelName: environment.slack.botName,\n        default: true,\n      }\n      const sorted = res.sort((a, b) => a.channelName.localeCompare(b.channelName))\n      return [botChannel, ...sorted]\n    },\n  })\n}\n\nconst NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE = awsCron.timeToExpression(NOTIFICATIONS_TIME_DEFAULTS)\n\ntype GetNewScheduleParams = {\n  destination: NotificationDestination\n  access?: SlackAccessGranted | SlackAccessNotGranted\n  emails?: Array<string>\n}\n\nconst getNewSchedule = ({\n  destination,\n  access,\n  emails,\n}: GetNewScheduleParams): NotificationSchedule => {\n  if (destination === \"slack\") {\n    return {\n      schedulerExpression: NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE,\n      timezone: USER_TIMEZONE.value,\n      destination,\n      destinationParams: {\n        slackWorkspaceId: access?.access ? access?.workspaceId : \"\",\n        slackChannelId: access?.access ? access?.slackUserId : \"\",\n        slackChannelName: environment.slack.botName,\n      },\n    }\n  }\n  return {\n    schedulerExpression: NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE,\n    timezone: USER_TIMEZONE.value,\n    destination,\n    destinationParams: { emails: emails ?? [] },\n  }\n}\n\nexport {\n  useSlackConnect,\n  getConnectToSlackUrl,\n  useSlackValidateAccess,\n  getSlackRedirectUri,\n  useSlackChannels,\n  getNewSchedule,\n  getSlackStatelessRedirectUri,\n  slackParamName,\n  slackInviteToChannel,\n}\n"],"names":["getConnectToSlackUrl","getNewSchedule","getSlackRedirectUri","getSlackStatelessRedirectUri","slackInviteToChannel","slackParamName","useSlackChannels","useSlackConnect","useSlackValidateAccess","getSlackChannels","data","axiosClient","get","slackConnect","body","post","slackValidate","enqueueError","queryClient","useQueryClient","useMutation","mutationFn","onSuccess","refetchQueries","queryKey","onError","useQuery","queryFn","staleTime","encode","value","decode","replace","adapters","location","getAbsoluteBaseUrl","params","objUrl","URL","window","href","Object","entries","forEach","key","searchParams","append","string","pathname","search","state","encodeURIComponent","redirectUri","path","redirect","clientId","environment","slack","scope","userScope","enabled","refetchOnWindowFocus","access","select","res","channelId","slackUserId","botChannel","channelName","botName","default","sorted","sort","a","b","localeCompare","NOTIFICATIONS_DEFAULT_DAILY_SCHEDULE","awsCron","timeToExpression","NOTIFICATIONS_TIME_DEFAULTS","destination","emails","schedulerExpression","timezone","USER_TIMEZONE","destinationParams","slackWorkspaceId","workspaceId","slackChannelId","slackChannelName"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}