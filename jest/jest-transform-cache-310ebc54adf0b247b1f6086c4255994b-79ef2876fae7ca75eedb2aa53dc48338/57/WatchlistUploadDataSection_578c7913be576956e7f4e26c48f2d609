d36b4fa31a661d3dd08635b158b6cf02
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistUploadDataSection", {
    enumerable: true,
    get: function() {
        return WatchlistUploadDataSection;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _hooks = require("@rp/react/common/hooks");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _core = require("@rp/react/web/mui/core");
const _WatchlistUploadColumns = require("./WatchlistUploadColumns");
const _WatchlistUploadData = require("./WatchlistUploadData");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const COLUMNS_WIDTH = _WatchlistUploadColumns.WatchlistUploadColumns.map((col)=>col.width);
const SORT_OPTIONS = _WatchlistUploadColumns.WatchlistUploadColumns.filter((col)=>col.sortable).map((col)=>({
        label: col.label,
        value: col.value
    }));
const WatchlistUploadDataSection = ({ data, setData, onSortChange, labels, watchlist, labelClassName, excludeIds })=>{
    const { sortBy, direction, onChange, sorterFn } = (0, _hooks.useListSorter)({
        direction: "asc",
        sortBy: "label",
        onChange: onSortChange
    });
    const onEdit = (0, _react.useCallback)((item)=>{
        setData((prev)=>prev.filter((data)=>data.id !== item.data.id).concat(...(0, _WatchlistUploadData.extendItems)([
                _object_spread_props(_object_spread({}, item.data), {
                    isModified: true,
                    isConflict: false
                })
            ], watchlist)));
    }, [
        setData,
        watchlist
    ]);
    const onDelete = (0, _react.useCallback)((item)=>{
        setData((prev)=>prev.filter((data)=>data.id !== item.data.id).concat(...(0, _WatchlistUploadData.extendItems)([
                _object_spread_props(_object_spread({}, item.data), {
                    isDeleted: true
                })
            ], watchlist)));
    }, [
        setData,
        watchlist
    ]);
    const already = data.filter((i)=>i.isInWatchlist && !i.isDeleted).length;
    const length = data.filter((data)=>!data.isDeleted).length;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_basecomponents.StickedWrapper, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    display: "flex",
                    gap: 1
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    className: labelClassName,
                    sx: {
                        fontSize: 18,
                        mb: 1
                    },
                    children: [
                        length,
                        " ",
                        labels[length === 1 ? 0 : 1],
                        " ",
                        already > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                            component: "span",
                            sx: {
                                fontSize: 12,
                                color: "grey.300"
                            },
                            children: [
                                "(",
                                already,
                                " already in your Watchlist)"
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.StickedChild, {
                sx: {
                    top: 0,
                    maxWidth: "100%"
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
                    sx: {
                        backgroundColor: "elevation.dp24",
                        zIndex: 1,
                        gap: 1,
                        top: 0
                    },
                    columnsWidth: COLUMNS_WIDTH,
                    columns: _WatchlistUploadColumns.WatchlistUploadColumns.map((col)=>({
                            node: col.sortable ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                sx: {
                                    "& p": {
                                        color: "grey.300",
                                        fontSize: "12px"
                                    }
                                },
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                                    label: col.label,
                                    value: col.value,
                                    onChange: onChange,
                                    sortBy: sortBy,
                                    direction: direction,
                                    sortOptions: SORT_OPTIONS
                                })
                            }, col.value) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                sx: {
                                    color: "grey.300",
                                    fontSize: "12px"
                                },
                                children: col.label || /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                                    children: "Â "
                                })
                            }, col.value)
                        }))
                })
            }),
            data.filter((data)=>!data.isDeleted).sort((first, second)=>{
                return sorterFn(_object_spread({
                    label: first.label
                }, first.data), _object_spread({
                    label: second.label
                }, second.data));
            }).map((data)=>{
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
                    sx: {
                        gap: 1,
                        py: 2,
                        height: "auto"
                    },
                    columnsWidth: COLUMNS_WIDTH,
                    columns: _WatchlistUploadColumns.WatchlistUploadColumns.map((column)=>({
                            node: column.render({
                                data,
                                column,
                                onEdit,
                                onDelete,
                                excludeIds
                            })
                        }))
                }, data.id);
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,