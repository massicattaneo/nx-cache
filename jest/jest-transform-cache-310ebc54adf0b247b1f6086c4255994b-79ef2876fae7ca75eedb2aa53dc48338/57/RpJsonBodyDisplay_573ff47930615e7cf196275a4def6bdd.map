{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/components/RpJsonBodyDisplay/RpJsonBodyDisplay.tsx"],"sourcesContent":["import { memo } from \"react\"\nimport { useEnhancedDocument } from \"@rp/react/common/rpjson\"\nimport { uniqueIdIterator } from \"@rp/react/common/rpjson\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport { EnhancedElementBlock } from \"@rp/react/rpjson/types\"\nimport { createReactElements } from \"../../create-react-elements\"\nimport {\n  ReactDocumentOptions,\n  ReactDocumentProps,\n} from \"../../create-react-elements/create-react-elements.types\"\n\nexport type RpJsonBodyDisplayProps = {\n  rpjson: RpJsonDocument\n  finds?: Array<string | RegExp>\n  className?: string\n}\n\ntype Props = {\n  page: EnhancedElementBlock\n  properties: ReactDocumentProps\n  options: ReactDocumentOptions\n  documentId: string\n}\n\nconst Page = memo(\n  ({ page, properties, options }: Props) => {\n    return createReactElements(page, properties, { ...options, findsCounter: {} })\n  },\n  (prev, actual) => {\n    if (prev.documentId !== actual.documentId) return false\n    if (!actual.options.finds || !prev.options.finds) return true\n    return actual.options.finds.toString() === prev.options.finds.toString()\n  },\n)\n\nexport const RpJsonBodyDisplay = ({ rpjson, finds = [], className }: RpJsonBodyDisplayProps) => {\n  const { pages, lastReactId } = useEnhancedDocument(rpjson)\n  const idIterator = uniqueIdIterator(lastReactId)\n  const performance = { markupSentences: true, markupDetections: true, markupNewLines: true }\n\n  return (\n    <div style={{ position: \"relative\" }} className={className}>\n      <div data-testid=\"single-layer\">\n        {Object.keys(pages).map(pageNum => (\n          <Page\n            key={pageNum}\n            page={pages[pageNum]}\n            properties={{}}\n            options={{ idIterator, performance, finds }}\n            documentId={rpjson.document.rp_document_id}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"names":["RpJsonBodyDisplay","Page","memo","page","properties","options","createReactElements","findsCounter","prev","actual","documentId","finds","toString","rpjson","className","pages","lastReactId","useEnhancedDocument","idIterator","uniqueIdIterator","performance","markupSentences","markupDetections","markupNewLines","div","style","position","data-testid","Object","keys","map","pageNum","document","rp_document_id"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAmCaA;;;eAAAA;;;;uBAnCQ;wBACe;qCAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBpC,MAAMC,qBAAOC,IAAAA,WAAI,EACf,CAAC,EAAEC,IAAI,EAAEC,UAAU,EAAEC,OAAO,EAAS;IACnC,OAAOC,IAAAA,wCAAmB,EAACH,MAAMC,YAAY,wCAAKC;QAASE,cAAc,CAAC;;AAC5E,GACA,CAACC,MAAMC;IACL,IAAID,KAAKE,UAAU,KAAKD,OAAOC,UAAU,EAAE,OAAO;IAClD,IAAI,CAACD,OAAOJ,OAAO,CAACM,KAAK,IAAI,CAACH,KAAKH,OAAO,CAACM,KAAK,EAAE,OAAO;IACzD,OAAOF,OAAOJ,OAAO,CAACM,KAAK,CAACC,QAAQ,OAAOJ,KAAKH,OAAO,CAACM,KAAK,CAACC,QAAQ;AACxE;AAGK,MAAMZ,oBAAoB,CAAC,EAAEa,MAAM,EAAEF,QAAQ,EAAE,EAAEG,SAAS,EAA0B;IACzF,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAE,GAAGC,IAAAA,2BAAmB,EAACJ;IACnD,MAAMK,aAAaC,IAAAA,wBAAgB,EAACH;IACpC,MAAMI,cAAc;QAAEC,iBAAiB;QAAMC,kBAAkB;QAAMC,gBAAgB;IAAK;IAE1F,qBACE,qBAACC;QAAIC,OAAO;YAAEC,UAAU;QAAW;QAAGZ,WAAWA;kBAC/C,cAAA,qBAACU;YAAIG,eAAY;sBACdC,OAAOC,IAAI,CAACd,OAAOe,GAAG,CAACC,CAAAA,wBACtB,qBAAC9B;oBAECE,MAAMY,KAAK,CAACgB,QAAQ;oBACpB3B,YAAY,CAAC;oBACbC,SAAS;wBAAEa;wBAAYE;wBAAaT;oBAAM;oBAC1CD,YAAYG,OAAOmB,QAAQ,CAACC,cAAc;mBAJrCF;;;AAUjB"}