aad4dbc0979754fc13d598addc4ac168
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RpJsonBodyDisplay", {
    enumerable: true,
    get: function() {
        return RpJsonBodyDisplay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _rpjson = require("@rp/react/common/rpjson");
const _createreactelements = require("../../create-react-elements");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const Page = /*#__PURE__*/ (0, _react.memo)(({ page, properties, options })=>{
    return (0, _createreactelements.createReactElements)(page, properties, _object_spread_props(_object_spread({}, options), {
        findsCounter: {}
    }));
}, (prev, actual)=>{
    if (prev.documentId !== actual.documentId) return false;
    if (!actual.options.finds || !prev.options.finds) return true;
    return actual.options.finds.toString() === prev.options.finds.toString();
});
const RpJsonBodyDisplay = ({ rpjson, finds = [], className })=>{
    const { pages, lastReactId } = (0, _rpjson.useEnhancedDocument)(rpjson);
    const idIterator = (0, _rpjson.uniqueIdIterator)(lastReactId);
    const performance = {
        markupSentences: true,
        markupDetections: true,
        markupNewLines: true
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        style: {
            position: "relative"
        },
        className: className,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            "data-testid": "single-layer",
            children: Object.keys(pages).map((pageNum)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Page, {
                    page: pages[pageNum],
                    properties: {},
                    options: {
                        idIterator,
                        performance,
                        finds
                    },
                    documentId: rpjson.document.rp_document_id
                }, pageNum))
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3JwanNvbi9zcmMvbGliL2NvbXBvbmVudHMvUnBKc29uQm9keURpc3BsYXkvUnBKc29uQm9keURpc3BsYXkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lbW8gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgdXNlRW5oYW5jZWREb2N1bWVudCB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL3JwanNvblwiXG5pbXBvcnQgeyB1bmlxdWVJZEl0ZXJhdG9yIH0gZnJvbSBcIkBycC9yZWFjdC9jb21tb24vcnBqc29uXCJcbmltcG9ydCB7IFJwSnNvbkRvY3VtZW50IH0gZnJvbSBcIkBycC9yZWFjdC9ycGpzb24vdHlwZXNcIlxuaW1wb3J0IHsgRW5oYW5jZWRFbGVtZW50QmxvY2sgfSBmcm9tIFwiQHJwL3JlYWN0L3JwanNvbi90eXBlc1wiXG5pbXBvcnQgeyBjcmVhdGVSZWFjdEVsZW1lbnRzIH0gZnJvbSBcIi4uLy4uL2NyZWF0ZS1yZWFjdC1lbGVtZW50c1wiXG5pbXBvcnQge1xuICBSZWFjdERvY3VtZW50T3B0aW9ucyxcbiAgUmVhY3REb2N1bWVudFByb3BzLFxufSBmcm9tIFwiLi4vLi4vY3JlYXRlLXJlYWN0LWVsZW1lbnRzL2NyZWF0ZS1yZWFjdC1lbGVtZW50cy50eXBlc1wiXG5cbmV4cG9ydCB0eXBlIFJwSnNvbkJvZHlEaXNwbGF5UHJvcHMgPSB7XG4gIHJwanNvbjogUnBKc29uRG9jdW1lbnRcbiAgZmluZHM/OiBBcnJheTxzdHJpbmcgfCBSZWdFeHA+XG4gIGNsYXNzTmFtZT86IHN0cmluZ1xufVxuXG50eXBlIFByb3BzID0ge1xuICBwYWdlOiBFbmhhbmNlZEVsZW1lbnRCbG9ja1xuICBwcm9wZXJ0aWVzOiBSZWFjdERvY3VtZW50UHJvcHNcbiAgb3B0aW9uczogUmVhY3REb2N1bWVudE9wdGlvbnNcbiAgZG9jdW1lbnRJZDogc3RyaW5nXG59XG5cbmNvbnN0IFBhZ2UgPSBtZW1vKFxuICAoeyBwYWdlLCBwcm9wZXJ0aWVzLCBvcHRpb25zIH06IFByb3BzKSA9PiB7XG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0RWxlbWVudHMocGFnZSwgcHJvcGVydGllcywgeyAuLi5vcHRpb25zLCBmaW5kc0NvdW50ZXI6IHt9IH0pXG4gIH0sXG4gIChwcmV2LCBhY3R1YWwpID0+IHtcbiAgICBpZiAocHJldi5kb2N1bWVudElkICE9PSBhY3R1YWwuZG9jdW1lbnRJZCkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKCFhY3R1YWwub3B0aW9ucy5maW5kcyB8fCAhcHJldi5vcHRpb25zLmZpbmRzKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBhY3R1YWwub3B0aW9ucy5maW5kcy50b1N0cmluZygpID09PSBwcmV2Lm9wdGlvbnMuZmluZHMudG9TdHJpbmcoKVxuICB9LFxuKVxuXG5leHBvcnQgY29uc3QgUnBKc29uQm9keURpc3BsYXkgPSAoeyBycGpzb24sIGZpbmRzID0gW10sIGNsYXNzTmFtZSB9OiBScEpzb25Cb2R5RGlzcGxheVByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcGFnZXMsIGxhc3RSZWFjdElkIH0gPSB1c2VFbmhhbmNlZERvY3VtZW50KHJwanNvbilcbiAgY29uc3QgaWRJdGVyYXRvciA9IHVuaXF1ZUlkSXRlcmF0b3IobGFzdFJlYWN0SWQpXG4gIGNvbnN0IHBlcmZvcm1hbmNlID0geyBtYXJrdXBTZW50ZW5jZXM6IHRydWUsIG1hcmt1cERldGVjdGlvbnM6IHRydWUsIG1hcmt1cE5ld0xpbmVzOiB0cnVlIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9fSBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwic2luZ2xlLWxheWVyXCI+XG4gICAgICAgIHtPYmplY3Qua2V5cyhwYWdlcykubWFwKHBhZ2VOdW0gPT4gKFxuICAgICAgICAgIDxQYWdlXG4gICAgICAgICAgICBrZXk9e3BhZ2VOdW19XG4gICAgICAgICAgICBwYWdlPXtwYWdlc1twYWdlTnVtXX1cbiAgICAgICAgICAgIHByb3BlcnRpZXM9e3t9fVxuICAgICAgICAgICAgb3B0aW9ucz17eyBpZEl0ZXJhdG9yLCBwZXJmb3JtYW5jZSwgZmluZHMgfX1cbiAgICAgICAgICAgIGRvY3VtZW50SWQ9e3JwanNvbi5kb2N1bWVudC5ycF9kb2N1bWVudF9pZH1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG4iXSwibmFtZXMiOlsiUnBKc29uQm9keURpc3BsYXkiLCJQYWdlIiwibWVtbyIsInBhZ2UiLCJwcm9wZXJ0aWVzIiwib3B0aW9ucyIsImNyZWF0ZVJlYWN0RWxlbWVudHMiLCJmaW5kc0NvdW50ZXIiLCJwcmV2IiwiYWN0dWFsIiwiZG9jdW1lbnRJZCIsImZpbmRzIiwidG9TdHJpbmciLCJycGpzb24iLCJjbGFzc05hbWUiLCJwYWdlcyIsImxhc3RSZWFjdElkIiwidXNlRW5oYW5jZWREb2N1bWVudCIsImlkSXRlcmF0b3IiLCJ1bmlxdWVJZEl0ZXJhdG9yIiwicGVyZm9ybWFuY2UiLCJtYXJrdXBTZW50ZW5jZXMiLCJtYXJrdXBEZXRlY3Rpb25zIiwibWFya3VwTmV3TGluZXMiLCJkaXYiLCJzdHlsZSIsInBvc2l0aW9uIiwiZGF0YS10ZXN0aWQiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwicGFnZU51bSIsImRvY3VtZW50IiwicnBfZG9jdW1lbnRfaWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQW1DYUE7OztlQUFBQTs7Ozt1QkFuQ1E7d0JBQ2U7cUNBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJwQyxNQUFNQyxxQkFBT0MsSUFBQUEsV0FBSSxFQUNmLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBUztJQUNuQyxPQUFPQyxJQUFBQSx3Q0FBbUIsRUFBQ0gsTUFBTUMsWUFBWSx3Q0FBS0M7UUFBU0UsY0FBYyxDQUFDOztBQUM1RSxHQUNBLENBQUNDLE1BQU1DO0lBQ0wsSUFBSUQsS0FBS0UsVUFBVSxLQUFLRCxPQUFPQyxVQUFVLEVBQUUsT0FBTztJQUNsRCxJQUFJLENBQUNELE9BQU9KLE9BQU8sQ0FBQ00sS0FBSyxJQUFJLENBQUNILEtBQUtILE9BQU8sQ0FBQ00sS0FBSyxFQUFFLE9BQU87SUFDekQsT0FBT0YsT0FBT0osT0FBTyxDQUFDTSxLQUFLLENBQUNDLFFBQVEsT0FBT0osS0FBS0gsT0FBTyxDQUFDTSxLQUFLLENBQUNDLFFBQVE7QUFDeEU7QUFHSyxNQUFNWixvQkFBb0IsQ0FBQyxFQUFFYSxNQUFNLEVBQUVGLFFBQVEsRUFBRSxFQUFFRyxTQUFTLEVBQTBCO0lBQ3pGLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxXQUFXLEVBQUUsR0FBR0MsSUFBQUEsMkJBQW1CLEVBQUNKO0lBQ25ELE1BQU1LLGFBQWFDLElBQUFBLHdCQUFnQixFQUFDSDtJQUNwQyxNQUFNSSxjQUFjO1FBQUVDLGlCQUFpQjtRQUFNQyxrQkFBa0I7UUFBTUMsZ0JBQWdCO0lBQUs7SUFFMUYscUJBQ0UscUJBQUNDO1FBQUlDLE9BQU87WUFBRUMsVUFBVTtRQUFXO1FBQUdaLFdBQVdBO2tCQUMvQyxjQUFBLHFCQUFDVTtZQUFJRyxlQUFZO3NCQUNkQyxPQUFPQyxJQUFJLENBQUNkLE9BQU9lLEdBQUcsQ0FBQ0MsQ0FBQUEsd0JBQ3RCLHFCQUFDOUI7b0JBRUNFLE1BQU1ZLEtBQUssQ0FBQ2dCLFFBQVE7b0JBQ3BCM0IsWUFBWSxDQUFDO29CQUNiQyxTQUFTO3dCQUFFYTt3QkFBWUU7d0JBQWFUO29CQUFNO29CQUMxQ0QsWUFBWUcsT0FBT21CLFFBQVEsQ0FBQ0MsY0FBYzttQkFKckNGOzs7QUFVakIifQ==