{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/utils/src/lib/awsCronExpression.ts"],"sourcesContent":["const DAYS = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n\ntype AwsCronDaily = {\n  recurrence: \"daily\"\n  hour: number\n  minute: number\n}\n\ntype AwsCronWeekly = {\n  recurrence: \"weekly\"\n  hour: number\n  minute: number\n  daysOfWeek: Array<number>\n}\n\ntype AwsCronWeekday = {\n  recurrence: \"weekday\"\n  hour: number\n  minute: number\n}\n\nexport type AwsCron = AwsCronDaily | AwsCronWeekly | AwsCronWeekday\n\nconst timeToExpression = (options: AwsCronDaily | AwsCronWeekly | AwsCronWeekday) => {\n  const duration = options.hour * 60 + options.minute\n  const hours = Math.floor(duration / 60)\n  const minutes = Math.floor(duration % 60)\n  if (\n    options.recurrence === \"daily\" ||\n    (options.recurrence === \"weekly\" &&\n      options.daysOfWeek.sort().join(\",\") === [0, 1, 2, 3, 4, 5, 6].sort().join(\",\"))\n  ) {\n    return `${minutes} ${hours} * * ? *`\n  } else if (\n    options.recurrence === \"weekday\" ||\n    (options.recurrence === \"weekly\" &&\n      options.daysOfWeek.sort().join(\",\") === [1, 2, 3, 4, 5].sort().join(\",\"))\n  ) {\n    return `${minutes} ${hours} ? * 1-5 *`\n  } else if (options.recurrence === \"weekly\") {\n    return `${minutes} ${hours} ? * ${options.daysOfWeek.map(day => DAYS[day]).join(\",\")} *`\n  }\n  return \"\"\n}\n\nconst expressionToTime = (expression: string | undefined): AwsCron => {\n  if (!expression) {\n    const ret: AwsCronWeekday = {\n      recurrence: \"weekday\",\n      hour: 0,\n      minute: 0,\n    }\n    return ret\n  }\n  const [minutes, hours, _, __, days] = expression.split(\" \")\n  if (days === \"?\") {\n    const daily: AwsCronDaily = {\n      recurrence: \"daily\",\n      hour: parseInt(hours, 10),\n      minute: parseInt(minutes, 10),\n    }\n    return daily\n  }\n  if (days === \"1-5\") {\n    const weekday: AwsCronWeekday = {\n      recurrence: \"weekday\",\n      hour: parseInt(hours, 10),\n      minute: parseInt(minutes, 10),\n    }\n    return weekday\n  }\n  const daysOfWeek = days\n    .split(\",\")\n    .map(day => day.trim())\n    .map(day => DAYS.indexOf(day))\n  const weekly: AwsCronWeekly = {\n    recurrence: \"weekly\",\n    hour: parseInt(hours, 10),\n    minute: parseInt(minutes, 10),\n    daysOfWeek,\n  }\n  return weekly\n}\n\nconst expressionToDays = (expression: string | undefined): Array<number> => {\n  if (!expression) return []\n  const [, , , , days] = expression.split(\" \")\n  if (days === \"?\") return [0, 1, 2, 3, 4, 5, 6]\n  if (days === \"1-5\") return [1, 2, 3, 4, 5]\n  return days\n    .split(\",\")\n    .map(day => DAYS.indexOf(day))\n    .filter(i => i !== -1)\n}\n\nconst awsCron = {\n  timeToExpression,\n  expressionToTime,\n  expressionToDays,\n}\n\nexport { awsCron }\nexport type { AwsCronWeekly, AwsCronDaily, AwsCronWeekday }\n"],"names":["awsCron","DAYS","timeToExpression","options","duration","hour","minute","hours","Math","floor","minutes","recurrence","daysOfWeek","sort","join","map","day","expressionToTime","expression","ret","_","__","days","split","daily","parseInt","weekday","trim","indexOf","weekly","expressionToDays","filter","i"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqGSA;;;eAAAA;;;AArGT,MAAMC,OAAO;IAAC;IAAO;IAAO;IAAO;IAAO;IAAO;IAAO;CAAM;AAuB9D,MAAMC,mBAAmB,CAACC;IACxB,MAAMC,WAAWD,QAAQE,IAAI,GAAG,KAAKF,QAAQG,MAAM;IACnD,MAAMC,QAAQC,KAAKC,KAAK,CAACL,WAAW;IACpC,MAAMM,UAAUF,KAAKC,KAAK,CAACL,WAAW;IACtC,IACED,QAAQQ,UAAU,KAAK,WACtBR,QAAQQ,UAAU,KAAK,YACtBR,QAAQS,UAAU,CAACC,IAAI,GAAGC,IAAI,CAAC,SAAS;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE,CAACD,IAAI,GAAGC,IAAI,CAAC,MAC5E;QACA,OAAO,CAAC,EAAEJ,QAAQ,CAAC,EAAEH,MAAM,QAAQ,CAAC;IACtC,OAAO,IACLJ,QAAQQ,UAAU,KAAK,aACtBR,QAAQQ,UAAU,KAAK,YACtBR,QAAQS,UAAU,CAACC,IAAI,GAAGC,IAAI,CAAC,SAAS;QAAC;QAAG;QAAG;QAAG;QAAG;KAAE,CAACD,IAAI,GAAGC,IAAI,CAAC,MACtE;QACA,OAAO,CAAC,EAAEJ,QAAQ,CAAC,EAAEH,MAAM,UAAU,CAAC;IACxC,OAAO,IAAIJ,QAAQQ,UAAU,KAAK,UAAU;QAC1C,OAAO,CAAC,EAAED,QAAQ,CAAC,EAAEH,MAAM,KAAK,EAAEJ,QAAQS,UAAU,CAACG,GAAG,CAACC,CAAAA,MAAOf,IAAI,CAACe,IAAI,EAAEF,IAAI,CAAC,KAAK,EAAE,CAAC;IAC1F;IACA,OAAO;AACT;AAEA,MAAMG,mBAAmB,CAACC;IACxB,IAAI,CAACA,YAAY;QACf,MAAMC,MAAsB;YAC1BR,YAAY;YACZN,MAAM;YACNC,QAAQ;QACV;QACA,OAAOa;IACT;IACA,MAAM,CAACT,SAASH,OAAOa,GAAGC,IAAIC,KAAK,GAAGJ,WAAWK,KAAK,CAAC;IACvD,IAAID,SAAS,KAAK;QAChB,MAAME,QAAsB;YAC1Bb,YAAY;YACZN,MAAMoB,SAASlB,OAAO;YACtBD,QAAQmB,SAASf,SAAS;QAC5B;QACA,OAAOc;IACT;IACA,IAAIF,SAAS,OAAO;QAClB,MAAMI,UAA0B;YAC9Bf,YAAY;YACZN,MAAMoB,SAASlB,OAAO;YACtBD,QAAQmB,SAASf,SAAS;QAC5B;QACA,OAAOgB;IACT;IACA,MAAMd,aAAaU,KAChBC,KAAK,CAAC,KACNR,GAAG,CAACC,CAAAA,MAAOA,IAAIW,IAAI,IACnBZ,GAAG,CAACC,CAAAA,MAAOf,KAAK2B,OAAO,CAACZ;IAC3B,MAAMa,SAAwB;QAC5BlB,YAAY;QACZN,MAAMoB,SAASlB,OAAO;QACtBD,QAAQmB,SAASf,SAAS;QAC1BE;IACF;IACA,OAAOiB;AACT;AAEA,MAAMC,mBAAmB,CAACZ;IACxB,IAAI,CAACA,YAAY,OAAO,EAAE;IAC1B,MAAM,SAASI,KAAK,GAAGJ,WAAWK,KAAK,CAAC;IACxC,IAAID,SAAS,KAAK,OAAO;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAE;IAC9C,IAAIA,SAAS,OAAO,OAAO;QAAC;QAAG;QAAG;QAAG;QAAG;KAAE;IAC1C,OAAOA,KACJC,KAAK,CAAC,KACNR,GAAG,CAACC,CAAAA,MAAOf,KAAK2B,OAAO,CAACZ,MACxBe,MAAM,CAACC,CAAAA,IAAKA,MAAM,CAAC;AACxB;AAEA,MAAMhC,UAAU;IACdE;IACAe;IACAa;AACF"}