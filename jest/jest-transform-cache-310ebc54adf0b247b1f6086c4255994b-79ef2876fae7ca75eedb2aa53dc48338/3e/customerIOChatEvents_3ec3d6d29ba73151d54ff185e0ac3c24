19865e7045ee2d39be7bc80f7cfe1e0e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    sendAgentChatFeedback: function() {
        return sendAgentChatFeedback;
    },
    sendAgentChatInteraction: function() {
        return sendAgentChatInteraction;
    },
    sendAgentCopyResponse: function() {
        return sendAgentCopyResponse;
    },
    sendChatAudit: function() {
        return sendChatAudit;
    },
    sendChatFeedback: function() {
        return sendChatFeedback;
    },
    sendChatInlineSourceModalInteraction: function() {
        return sendChatInlineSourceModalInteraction;
    },
    sendChatInteraction: function() {
        return sendChatInteraction;
    },
    sendChatShareInteraction: function() {
        return sendChatShareInteraction;
    },
    sendChatSourceInteraction: function() {
        return sendChatSourceInteraction;
    },
    sendNativeChatInputResizeInteraction: function() {
        return sendNativeChatInputResizeInteraction;
    },
    sendNativeChatLeaveWhileAnswerNotCompletedInteraction: function() {
        return sendNativeChatLeaveWhileAnswerNotCompletedInteraction;
    }
});
const _adapters = require("@rp/adapters");
const sendChatFeedback = (data)=>{
    const message = {
        name: "chatFeedback",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendChatInteraction = (data)=>{
    const message = {
        name: "chatInteraction",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
function sendAgentChatInteraction(params) {
    const message = {
        name: "agentInteraction",
        data: {
            chatId: params.chatId,
            interactionTimestamp: params.interactionTimestamp,
            executionMode: params.executionMode,
            requestId: params.requestId
        }
    };
    _adapters.adapters.customerIo.track(message);
    return message;
}
const sendAgentChatFeedback = (data)=>{
    const message = {
        name: "agentFeedbackSent",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendAgentCopyResponse = (data)=>{
    const message = {
        name: "agentInteractionCopied",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendChatAudit = (data)=>{
    const message = {
        name: "chatAudit",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendChatSourceInteraction = (data)=>{
    const message = {
        name: "chatSource",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendChatInlineSourceModalInteraction = (data)=>{
    const message = {
        name: "chatInlineSourceCarousel",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendChatShareInteraction = (data)=>{
    const message = {
        name: "share",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendNativeChatInputResizeInteraction = (data)=>{
    const message = {
        name: "chatInputResize",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};
const sendNativeChatLeaveWhileAnswerNotCompletedInteraction = (data)=>{
    const message = {
        name: "leaveChatWhileAnswerNotCompleted",
        data
    };
    _adapters.adapters.customerIo.track(message);
    return message;
};

//# sourceMappingURL=data:application/json;base64,