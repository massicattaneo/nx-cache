95758a00f2a1ec909c096cb4beb54001
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _tools = require("@rp/react/web/common/tools");
const _react = require("@testing-library/react");
const _FileStatusCell = require("./FileStatusCell");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const handleDownload = jest.fn();
const handleEdit = jest.fn();
const handleDelete = jest.fn();
const actions = [
    {
        id: "download",
        label: "Download",
        icon: null,
        onClick: ()=>{},
        nestedActions: [
            {
                id: "original",
                label: "Original",
                onClick: ()=>handleDownload(1),
                icon: null
            },
            {
                id: "csv-analytics",
                label: "CSV Analytics",
                onClick: ()=>handleDownload(2),
                icon: null
            },
            {
                id: "json-analytics",
                label: "JSON Analytics",
                onClick: ()=>handleDownload(3),
                icon: null
            },
            {
                id: "annotations",
                label: "Annotations",
                onClick: ()=>handleDownload(4),
                icon: null
            },
            {
                id: "text-extract",
                label: "Text Extract",
                onClick: ()=>handleDownload(5),
                icon: null
            }
        ]
    },
    {
        id: "rename",
        label: "Rename",
        icon: null,
        onClick: handleEdit
    },
    {
        id: "delete",
        label: "Delete",
        icon: null,
        onClick: handleDelete
    }
];
const Table = (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FileStatusCell.FileStatusCell, _object_spread({}, props))
    });
const getItem = (props = {})=>_object_spread({
        id: "1",
        name: "",
        type: "",
        status: "completed",
        size: 0,
        date: "",
        sharedWith: null,
        owner: ""
    }, props);
describe("FileStatusCell", ()=>{
    test("check action menu appears and calls the function", ()=>{
        const handleOpenMenu = jest.fn();
        const { getByRole } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem(),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: handleOpenMenu,
            onDelete: handleDelete
        }));
        const menu = getByRole("button", {
            name: "More actions"
        });
        expect(menu).toBeInTheDocument();
        _react.fireEvent.click(menu);
        expect(handleOpenMenu).toBeCalledWith(true);
    });
    test("check buttons in COMPLETE cell hovered", ()=>{
        const testID = "testId";
        // for some reason the test logs a console.error message
        jest.spyOn(console, "error").mockImplementation();
        const { getByRole } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: true,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const downloadOption = getByRole("menuitem", {
            name: "Download"
        });
        const rename = getByRole("menuitem", {
            name: "Rename"
        });
        const deleteOption = getByRole("menuitem", {
            name: "Delete"
        });
        _react.fireEvent.click(rename);
        expect(handleEdit).toHaveBeenCalledWith(getItem({
            id: testID
        }));
        _react.fireEvent.click(deleteOption);
        expect(handleDelete).toHaveBeenCalledTimes(1);
        _react.fireEvent.mouseOver(downloadOption);
        (0, _react.waitFor)(()=>{
            expect(getByRole("menuitem", {
                name: "Original"
            })).toBeInTheDocument();
        });
        _react.fireEvent.click(getByRole("menuitem", {
            name: "Original"
        }));
        _react.fireEvent.click(getByRole("menuitem", {
            name: "CSV Analytics"
        }));
        _react.fireEvent.click(getByRole("menuitem", {
            name: "JSON Analytics"
        }));
        _react.fireEvent.click(getByRole("menuitem", {
            name: "Annotations"
        }));
        _react.fireEvent.click(getByRole("menuitem", {
            name: "Text Extract"
        }));
        expect(handleDownload).toHaveBeenCalledTimes(5);
        expect(handleDownload).toHaveBeenCalledWith(1);
        expect(handleDownload).toHaveBeenCalledWith(2);
        expect(handleDownload).toHaveBeenCalledWith(3);
        expect(handleDownload).toHaveBeenCalledWith(4);
        expect(handleDownload).toHaveBeenCalledWith(5);
    });
    test("check progress bar", ()=>{
        const progressTest = 50;
        const testID = "testId";
        const { getByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID,
                status: "progress",
                progress: progressTest
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const progressBar = getByText(`${progressTest}%`);
        expect(progressBar).toBeDefined();
    });
    test("check pending state", ()=>{
        const testID = "testId";
        const { getByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID,
                status: "pending"
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const pendingCell = getByText(/pending/i);
        expect(pendingCell).toBeDefined();
    });
    test("check done state", ()=>{
        const testID = "testId";
        const { getByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID,
                status: "done"
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const doneCell = getByText(/done/i);
        expect(doneCell).toBeDefined();
    });
    test("check analyzing state", ()=>{
        const testID = "testId";
        const { getByText } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID,
                status: "analyzing"
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const analyzingCell = getByText(/analyzing/i);
        expect(analyzingCell).toBeDefined();
    });
    test("check error state", ()=>{
        const testID = "testId";
        const { getByTestId } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(Table, {
            item: getItem({
                id: testID,
                status: "error"
            }),
            actions: actions,
            rowIsHovered: false,
            isOpenMenu: false,
            setIsOpenMenu: jest.fn(),
            onDelete: handleDelete
        }));
        const errorIcon = getByTestId("ReportProblemIcon");
        expect(errorIcon).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,