b9f64c2be10b16393987ef20a30ad169
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "find", {
    enumerable: true,
    get: function() {
        return find;
    }
});
const _normalize = require("./normalize.js");
const _definedinfo = require("./util/defined-info.js");
const _info = require("./util/info.js");
const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;
function find(schema, value) {
    const normal = (0, _normalize.normalize)(value);
    let prop = value;
    let Type = _info.Info;
    if (normal in schema.normal) {
        return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
        // Attribute or property.
        if (value.charAt(4) === '-') {
            // Turn it into a property.
            const rest = value.slice(5).replace(dash, camelcase);
            prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
        } else {
            // Turn it into an attribute.
            const rest = value.slice(4);
            if (!dash.test(rest)) {
                let dashes = rest.replace(cap, kebab);
                if (dashes.charAt(0) !== '-') {
                    dashes = '-' + dashes;
                }
                value = 'data' + dashes;
            }
        }
        Type = _definedinfo.DefinedInfo;
    }
    return new Type(prop, value);
}
/**
 * @param {string} $0
 * @returns {string}
 */ function kebab($0) {
    return '-' + $0.toLowerCase();
}
/**
 * @param {string} $0
 * @returns {string}
 */ function camelcase($0) {
    return $0.charAt(1).toUpperCase();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvZmluZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdXRpbC9zY2hlbWEuanMnKS5TY2hlbWF9IFNjaGVtYVxuICovXG5cbmltcG9ydCB7bm9ybWFsaXplfSBmcm9tICcuL25vcm1hbGl6ZS5qcydcbmltcG9ydCB7RGVmaW5lZEluZm99IGZyb20gJy4vdXRpbC9kZWZpbmVkLWluZm8uanMnXG5pbXBvcnQge0luZm99IGZyb20gJy4vdXRpbC9pbmZvLmpzJ1xuXG5jb25zdCB2YWxpZCA9IC9eZGF0YVstXFx3LjpdKyQvaVxuY29uc3QgZGFzaCA9IC8tW2Etel0vZ1xuY29uc3QgY2FwID0gL1tBLVpdL2dcblxuLyoqXG4gKiBAcGFyYW0ge1NjaGVtYX0gc2NoZW1hXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtJbmZvfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZChzY2hlbWEsIHZhbHVlKSB7XG4gIGNvbnN0IG5vcm1hbCA9IG5vcm1hbGl6ZSh2YWx1ZSlcbiAgbGV0IHByb3AgPSB2YWx1ZVxuICBsZXQgVHlwZSA9IEluZm9cblxuICBpZiAobm9ybWFsIGluIHNjaGVtYS5ub3JtYWwpIHtcbiAgICByZXR1cm4gc2NoZW1hLnByb3BlcnR5W3NjaGVtYS5ub3JtYWxbbm9ybWFsXV1cbiAgfVxuXG4gIGlmIChub3JtYWwubGVuZ3RoID4gNCAmJiBub3JtYWwuc2xpY2UoMCwgNCkgPT09ICdkYXRhJyAmJiB2YWxpZC50ZXN0KHZhbHVlKSkge1xuICAgIC8vIEF0dHJpYnV0ZSBvciBwcm9wZXJ0eS5cbiAgICBpZiAodmFsdWUuY2hhckF0KDQpID09PSAnLScpIHtcbiAgICAgIC8vIFR1cm4gaXQgaW50byBhIHByb3BlcnR5LlxuICAgICAgY29uc3QgcmVzdCA9IHZhbHVlLnNsaWNlKDUpLnJlcGxhY2UoZGFzaCwgY2FtZWxjYXNlKVxuICAgICAgcHJvcCA9ICdkYXRhJyArIHJlc3QuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXN0LnNsaWNlKDEpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFR1cm4gaXQgaW50byBhbiBhdHRyaWJ1dGUuXG4gICAgICBjb25zdCByZXN0ID0gdmFsdWUuc2xpY2UoNClcblxuICAgICAgaWYgKCFkYXNoLnRlc3QocmVzdCkpIHtcbiAgICAgICAgbGV0IGRhc2hlcyA9IHJlc3QucmVwbGFjZShjYXAsIGtlYmFiKVxuXG4gICAgICAgIGlmIChkYXNoZXMuY2hhckF0KDApICE9PSAnLScpIHtcbiAgICAgICAgICBkYXNoZXMgPSAnLScgKyBkYXNoZXNcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gJ2RhdGEnICsgZGFzaGVzXG4gICAgICB9XG4gICAgfVxuXG4gICAgVHlwZSA9IERlZmluZWRJbmZvXG4gIH1cblxuICByZXR1cm4gbmV3IFR5cGUocHJvcCwgdmFsdWUpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBrZWJhYigkMCkge1xuICByZXR1cm4gJy0nICsgJDAudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSAkMFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxjYXNlKCQwKSB7XG4gIHJldHVybiAkMC5jaGFyQXQoMSkudG9VcHBlckNhc2UoKVxufVxuIl0sIm5hbWVzIjpbImZpbmQiLCJ2YWxpZCIsImRhc2giLCJjYXAiLCJzY2hlbWEiLCJ2YWx1ZSIsIm5vcm1hbCIsIm5vcm1hbGl6ZSIsInByb3AiLCJUeXBlIiwiSW5mbyIsInByb3BlcnR5IiwibGVuZ3RoIiwic2xpY2UiLCJ0ZXN0IiwiY2hhckF0IiwicmVzdCIsInJlcGxhY2UiLCJjYW1lbGNhc2UiLCJ0b1VwcGVyQ2FzZSIsImRhc2hlcyIsImtlYmFiIiwiRGVmaW5lZEluZm8iLCIkMCIsInRvTG93ZXJDYXNlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7K0JBZWVBOzs7ZUFBQUE7OzsyQkFiUTs2QkFDRTtzQkFDUDtBQUVuQixNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsT0FBTztBQUNiLE1BQU1DLE1BQU07QUFPTCxTQUFTSCxLQUFLSSxNQUFNLEVBQUVDLEtBQUs7SUFDaEMsTUFBTUMsU0FBU0MsSUFBQUEsb0JBQVMsRUFBQ0Y7SUFDekIsSUFBSUcsT0FBT0g7SUFDWCxJQUFJSSxPQUFPQyxVQUFJO0lBRWYsSUFBSUosVUFBVUYsT0FBT0UsTUFBTSxFQUFFO1FBQzNCLE9BQU9GLE9BQU9PLFFBQVEsQ0FBQ1AsT0FBT0UsTUFBTSxDQUFDQSxPQUFPLENBQUM7SUFDL0M7SUFFQSxJQUFJQSxPQUFPTSxNQUFNLEdBQUcsS0FBS04sT0FBT08sS0FBSyxDQUFDLEdBQUcsT0FBTyxVQUFVWixNQUFNYSxJQUFJLENBQUNULFFBQVE7UUFDM0UseUJBQXlCO1FBQ3pCLElBQUlBLE1BQU1VLE1BQU0sQ0FBQyxPQUFPLEtBQUs7WUFDM0IsMkJBQTJCO1lBQzNCLE1BQU1DLE9BQU9YLE1BQU1RLEtBQUssQ0FBQyxHQUFHSSxPQUFPLENBQUNmLE1BQU1nQjtZQUMxQ1YsT0FBTyxTQUFTUSxLQUFLRCxNQUFNLENBQUMsR0FBR0ksV0FBVyxLQUFLSCxLQUFLSCxLQUFLLENBQUM7UUFDNUQsT0FBTztZQUNMLDZCQUE2QjtZQUM3QixNQUFNRyxPQUFPWCxNQUFNUSxLQUFLLENBQUM7WUFFekIsSUFBSSxDQUFDWCxLQUFLWSxJQUFJLENBQUNFLE9BQU87Z0JBQ3BCLElBQUlJLFNBQVNKLEtBQUtDLE9BQU8sQ0FBQ2QsS0FBS2tCO2dCQUUvQixJQUFJRCxPQUFPTCxNQUFNLENBQUMsT0FBTyxLQUFLO29CQUM1QkssU0FBUyxNQUFNQTtnQkFDakI7Z0JBRUFmLFFBQVEsU0FBU2U7WUFDbkI7UUFDRjtRQUVBWCxPQUFPYSx3QkFBVztJQUNwQjtJQUVBLE9BQU8sSUFBSWIsS0FBS0QsTUFBTUg7QUFDeEI7QUFFQTs7O0NBR0MsR0FDRCxTQUFTZ0IsTUFBTUUsRUFBRTtJQUNmLE9BQU8sTUFBTUEsR0FBR0MsV0FBVztBQUM3QjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNOLFVBQVVLLEVBQUU7SUFDbkIsT0FBT0EsR0FBR1IsTUFBTSxDQUFDLEdBQUdJLFdBQVc7QUFDakMifQ==