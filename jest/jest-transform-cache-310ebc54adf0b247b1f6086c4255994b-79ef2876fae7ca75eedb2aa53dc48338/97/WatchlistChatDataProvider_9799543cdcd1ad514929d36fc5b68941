187b1816c7b53d4b94347ae4b2e1d763
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WatchlistChatDataProvider: function() {
        return WatchlistChatDataProvider;
    },
    useWatchlistChatDataContext: function() {
        return useWatchlistChatDataContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _chat = require("@rp/react/web/chat");
const _hooks = require("@rp/react/web/common/hooks");
const ChatDataContext = /*#__PURE__*/ (0, _react.createContext)(null);
const WatchlistChatDataProvider = ({ children, id, isChatCollapsed, setIsChatCollapsed })=>{
    const params = (0, _hooks.useQueryParams)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const [showAllPrompts, setShowAllPrompts] = (0, _react.useState)(false);
    const { width } = (0, _hooks.useDeviceSize)();
    const [chatWidth, setChatWidth] = (0, _react.useState)(Math.min(700, Math.max(500, width - 48 - 900)));
    const [selectedEntity, setSelectedEntity] = (0, _react.useState)(null);
    const [entityOffset, setEntityOffset] = (0, _react.useState)(0);
    const { isLoading, data, error } = (0, _watchlist.useWatchlist)(id);
    const { helpers: { resetChatState } } = (0, _chat.useChatDataContext)();
    const resetChat = (0, _react.useCallback)((entity, resetWatchlistId)=>{
        setShowAllPrompts(false);
        resetChatState({
            withNavigation: false,
            resetWatchlistId: resetWatchlistId !== null && resetWatchlistId !== void 0 ? resetWatchlistId : false
        });
        params.delete(_settings.WATCHLIST_CHAT_ID_PARAM);
        navigate({
            search: params.toString()
        }, {
            replace: true
        });
        setIsChatCollapsed(false);
        setSelectedEntity(entity);
        setEntityOffset(0);
    }, [
        navigate,
        params,
        resetChatState,
        setIsChatCollapsed
    ]);
    (0, _react.useEffect)(()=>{
        setChatWidth(Math.min(700, Math.max(500, width - 48 - 900)));
    }, [
        width
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ChatDataContext.Provider, {
        value: {
            selectedEntity,
            setSelectedEntity,
            resetChat,
            showAllPrompts,
            setShowAllPrompts,
            isChatCollapsed,
            setIsChatCollapsed,
            chatWidth,
            entityOffset,
            setEntityOffset,
            watchlist: {
                id,
                data,
                isLoading,
                error
            }
        },
        children: children
    });
};
const useWatchlistChatDataContext = ()=>{
    const context = (0, _react.useContext)(ChatDataContext);
    if (!context) {
        throw new Error("useWatchlistChatDataContext should be used within a WatchlistChatDataProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RDaGF0RGF0YVByb3ZpZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXNwYXRjaCxcbiAgU2V0U3RhdGVBY3Rpb24sXG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNhbGxiYWNrLFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZVN0YXRlLFxufSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyBDcXNJdGVtLCBXYXRjaGxpc3QgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgV0FUQ0hMSVNUX0NIQVRfSURfUEFSQU0gfSBmcm9tIFwiQHJwL2NvbW1vbi9zZXR0aW5nc1wiXG5pbXBvcnQgeyB1c2VXYXRjaGxpc3QgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS93YXRjaGxpc3RcIlxuaW1wb3J0IHsgdXNlQ2hhdERhdGFDb250ZXh0IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY2hhdFwiXG5pbXBvcnQgeyB1c2VEZXZpY2VTaXplLCB1c2VRdWVyeVBhcmFtcyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9ob29rc1wiXG5cbnR5cGUgRGF0YUNvbnRleHRWYWx1ZSA9IHtcbiAgcmVzZXRDaGF0OiAoZW50aXR5OiBTZXRTdGF0ZUFjdGlvbjxDcXNJdGVtIHwgbnVsbD4sIHJlc2V0V2F0Y2hsaXN0SWQ/OiBib29sZWFuKSA9PiB2b2lkXG4gIHNob3dBbGxQcm9tcHRzOiBib29sZWFuXG4gIHNldFNob3dBbGxQcm9tcHRzOiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxib29sZWFuPj5cbiAgc2VsZWN0ZWRFbnRpdHk6IENxc0l0ZW0gfCBudWxsXG4gIHNldFNlbGVjdGVkRW50aXR5OiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxDcXNJdGVtIHwgbnVsbD4+XG4gIGlzQ2hhdENvbGxhcHNlZDogYm9vbGVhblxuICBzZXRJc0NoYXRDb2xsYXBzZWQ6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPGJvb2xlYW4+PlxuICBjaGF0V2lkdGg6IG51bWJlclxuICB3YXRjaGxpc3Q6IHtcbiAgICBpZDogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgZGF0YTogV2F0Y2hsaXN0IHwgdW5kZWZpbmVkXG4gICAgaXNMb2FkaW5nOiBib29sZWFuXG4gICAgZXJyb3I6IEVycm9yIHwgbnVsbFxuICB9XG4gIGVudGl0eU9mZnNldDogbnVtYmVyXG4gIHNldEVudGl0eU9mZnNldDogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248bnVtYmVyPj5cbn1cblxuY29uc3QgQ2hhdERhdGFDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxEYXRhQ29udGV4dFZhbHVlIHwgbnVsbD4obnVsbClcblxudHlwZSBQcm9wcyA9IHtcbiAgaXNDaGF0Q29sbGFwc2VkOiBib29sZWFuXG4gIHNldElzQ2hhdENvbGxhcHNlZDogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248Ym9vbGVhbj4+XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbiAgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZFxufVxuXG5jb25zdCBXYXRjaGxpc3RDaGF0RGF0YVByb3ZpZGVyID0gKHtcbiAgY2hpbGRyZW4sXG4gIGlkLFxuICBpc0NoYXRDb2xsYXBzZWQsXG4gIHNldElzQ2hhdENvbGxhcHNlZCxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHVzZVF1ZXJ5UGFyYW1zKClcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG4gIGNvbnN0IFtzaG93QWxsUHJvbXB0cywgc2V0U2hvd0FsbFByb21wdHNdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IHsgd2lkdGggfSA9IHVzZURldmljZVNpemUoKVxuICBjb25zdCBbY2hhdFdpZHRoLCBzZXRDaGF0V2lkdGhdID0gdXNlU3RhdGU8bnVtYmVyPihNYXRoLm1pbig3MDAsIE1hdGgubWF4KDUwMCwgd2lkdGggLSA0OCAtIDkwMCkpKVxuICBjb25zdCBbc2VsZWN0ZWRFbnRpdHksIHNldFNlbGVjdGVkRW50aXR5XSA9IHVzZVN0YXRlPENxc0l0ZW0gfCBudWxsPihudWxsKVxuICBjb25zdCBbZW50aXR5T2Zmc2V0LCBzZXRFbnRpdHlPZmZzZXRdID0gdXNlU3RhdGU8bnVtYmVyPigwKVxuICBjb25zdCB7IGlzTG9hZGluZywgZGF0YSwgZXJyb3IgfSA9IHVzZVdhdGNobGlzdChpZClcbiAgY29uc3Qge1xuICAgIGhlbHBlcnM6IHsgcmVzZXRDaGF0U3RhdGUgfSxcbiAgfSA9IHVzZUNoYXREYXRhQ29udGV4dCgpXG5cbiAgY29uc3QgcmVzZXRDaGF0ID0gdXNlQ2FsbGJhY2soXG4gICAgKGVudGl0eTogU2V0U3RhdGVBY3Rpb248Q3FzSXRlbSB8IG51bGw+LCByZXNldFdhdGNobGlzdElkOiBib29sZWFuIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICBzZXRTaG93QWxsUHJvbXB0cyhmYWxzZSlcbiAgICAgIHJlc2V0Q2hhdFN0YXRlKHsgd2l0aE5hdmlnYXRpb246IGZhbHNlLCByZXNldFdhdGNobGlzdElkOiByZXNldFdhdGNobGlzdElkID8/IGZhbHNlIH0pXG4gICAgICBwYXJhbXMuZGVsZXRlKFdBVENITElTVF9DSEFUX0lEX1BBUkFNKVxuICAgICAgbmF2aWdhdGUoeyBzZWFyY2g6IHBhcmFtcy50b1N0cmluZygpIH0sIHsgcmVwbGFjZTogdHJ1ZSB9KVxuICAgICAgc2V0SXNDaGF0Q29sbGFwc2VkKGZhbHNlKVxuICAgICAgc2V0U2VsZWN0ZWRFbnRpdHkoZW50aXR5KVxuICAgICAgc2V0RW50aXR5T2Zmc2V0KDApXG4gICAgfSxcbiAgICBbbmF2aWdhdGUsIHBhcmFtcywgcmVzZXRDaGF0U3RhdGUsIHNldElzQ2hhdENvbGxhcHNlZF0sXG4gIClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldENoYXRXaWR0aChNYXRoLm1pbig3MDAsIE1hdGgubWF4KDUwMCwgd2lkdGggLSA0OCAtIDkwMCkpKVxuICB9LCBbd2lkdGhdKVxuXG4gIHJldHVybiAoXG4gICAgPENoYXREYXRhQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgc2VsZWN0ZWRFbnRpdHksXG4gICAgICAgIHNldFNlbGVjdGVkRW50aXR5LFxuICAgICAgICByZXNldENoYXQsXG4gICAgICAgIHNob3dBbGxQcm9tcHRzLFxuICAgICAgICBzZXRTaG93QWxsUHJvbXB0cyxcbiAgICAgICAgaXNDaGF0Q29sbGFwc2VkLFxuICAgICAgICBzZXRJc0NoYXRDb2xsYXBzZWQsXG4gICAgICAgIGNoYXRXaWR0aCxcbiAgICAgICAgZW50aXR5T2Zmc2V0LFxuICAgICAgICBzZXRFbnRpdHlPZmZzZXQsXG4gICAgICAgIHdhdGNobGlzdDogeyBpZCwgZGF0YSwgaXNMb2FkaW5nLCBlcnJvciB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGF0RGF0YUNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuY29uc3QgdXNlV2F0Y2hsaXN0Q2hhdERhdGFDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChDaGF0RGF0YUNvbnRleHQpXG5cbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXNlV2F0Y2hsaXN0Q2hhdERhdGFDb250ZXh0IHNob3VsZCBiZSB1c2VkIHdpdGhpbiBhIFdhdGNobGlzdENoYXREYXRhUHJvdmlkZXJcIilcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0XG59XG5cbmV4cG9ydCB7IFdhdGNobGlzdENoYXREYXRhUHJvdmlkZXIsIHVzZVdhdGNobGlzdENoYXREYXRhQ29udGV4dCB9XG4iXSwibmFtZXMiOlsiV2F0Y2hsaXN0Q2hhdERhdGFQcm92aWRlciIsInVzZVdhdGNobGlzdENoYXREYXRhQ29udGV4dCIsIkNoYXREYXRhQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJjaGlsZHJlbiIsImlkIiwiaXNDaGF0Q29sbGFwc2VkIiwic2V0SXNDaGF0Q29sbGFwc2VkIiwicGFyYW1zIiwidXNlUXVlcnlQYXJhbXMiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwic2hvd0FsbFByb21wdHMiLCJzZXRTaG93QWxsUHJvbXB0cyIsInVzZVN0YXRlIiwid2lkdGgiLCJ1c2VEZXZpY2VTaXplIiwiY2hhdFdpZHRoIiwic2V0Q2hhdFdpZHRoIiwiTWF0aCIsIm1pbiIsIm1heCIsInNlbGVjdGVkRW50aXR5Iiwic2V0U2VsZWN0ZWRFbnRpdHkiLCJlbnRpdHlPZmZzZXQiLCJzZXRFbnRpdHlPZmZzZXQiLCJpc0xvYWRpbmciLCJkYXRhIiwiZXJyb3IiLCJ1c2VXYXRjaGxpc3QiLCJoZWxwZXJzIiwicmVzZXRDaGF0U3RhdGUiLCJ1c2VDaGF0RGF0YUNvbnRleHQiLCJyZXNldENoYXQiLCJ1c2VDYWxsYmFjayIsImVudGl0eSIsInJlc2V0V2F0Y2hsaXN0SWQiLCJ3aXRoTmF2aWdhdGlvbiIsImRlbGV0ZSIsIldBVENITElTVF9DSEFUX0lEX1BBUkFNIiwic2VhcmNoIiwidG9TdHJpbmciLCJyZXBsYWNlIiwidXNlRWZmZWN0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIndhdGNobGlzdCIsImNvbnRleHQiLCJ1c2VDb250ZXh0IiwiRXJyb3IiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQThHU0EseUJBQXlCO2VBQXpCQTs7SUFBMkJDLDJCQUEyQjtlQUEzQkE7Ozs7dUJBdEc3QjtnQ0FDcUI7MEJBRVk7MkJBQ1g7c0JBQ007dUJBQ1c7QUFxQjlDLE1BQU1DLGdDQUFrQkMsSUFBQUEsb0JBQWEsRUFBMEI7QUFTL0QsTUFBTUgsNEJBQTRCLENBQUMsRUFDakNJLFFBQVEsRUFDUkMsRUFBRSxFQUNGQyxlQUFlLEVBQ2ZDLGtCQUFrQixFQUNaO0lBQ04sTUFBTUMsU0FBU0MsSUFBQUEscUJBQWM7SUFDN0IsTUFBTUMsV0FBV0MsSUFBQUEsMkJBQVc7SUFDNUIsTUFBTSxDQUFDQyxnQkFBZ0JDLGtCQUFrQixHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDckQsTUFBTSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsSUFBQUEsb0JBQWE7SUFDL0IsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdKLElBQUFBLGVBQVEsRUFBU0ssS0FBS0MsR0FBRyxDQUFDLEtBQUtELEtBQUtFLEdBQUcsQ0FBQyxLQUFLTixRQUFRLEtBQUs7SUFDNUYsTUFBTSxDQUFDTyxnQkFBZ0JDLGtCQUFrQixHQUFHVCxJQUFBQSxlQUFRLEVBQWlCO0lBQ3JFLE1BQU0sQ0FBQ1UsY0FBY0MsZ0JBQWdCLEdBQUdYLElBQUFBLGVBQVEsRUFBUztJQUN6RCxNQUFNLEVBQUVZLFNBQVMsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsSUFBQUEsdUJBQVksRUFBQ3hCO0lBQ2hELE1BQU0sRUFDSnlCLFNBQVMsRUFBRUMsY0FBYyxFQUFFLEVBQzVCLEdBQUdDLElBQUFBLHdCQUFrQjtJQUV0QixNQUFNQyxZQUFZQyxJQUFBQSxrQkFBVyxFQUMzQixDQUFDQyxRQUF3Q0M7UUFDdkN2QixrQkFBa0I7UUFDbEJrQixlQUFlO1lBQUVNLGdCQUFnQjtZQUFPRCxrQkFBa0JBLDZCQUFBQSw4QkFBQUEsbUJBQW9CO1FBQU07UUFDcEY1QixPQUFPOEIsTUFBTSxDQUFDQyxpQ0FBdUI7UUFDckM3QixTQUFTO1lBQUU4QixRQUFRaEMsT0FBT2lDLFFBQVE7UUFBRyxHQUFHO1lBQUVDLFNBQVM7UUFBSztRQUN4RG5DLG1CQUFtQjtRQUNuQmdCLGtCQUFrQlk7UUFDbEJWLGdCQUFnQjtJQUNsQixHQUNBO1FBQUNmO1FBQVVGO1FBQVF1QjtRQUFnQnhCO0tBQW1CO0lBR3hEb0MsSUFBQUEsZ0JBQVMsRUFBQztRQUNSekIsYUFBYUMsS0FBS0MsR0FBRyxDQUFDLEtBQUtELEtBQUtFLEdBQUcsQ0FBQyxLQUFLTixRQUFRLEtBQUs7SUFDeEQsR0FBRztRQUFDQTtLQUFNO0lBRVYscUJBQ0UscUJBQUNiLGdCQUFnQjBDLFFBQVE7UUFDdkJDLE9BQU87WUFDTHZCO1lBQ0FDO1lBQ0FVO1lBQ0FyQjtZQUNBQztZQUNBUDtZQUNBQztZQUNBVTtZQUNBTztZQUNBQztZQUNBcUIsV0FBVztnQkFBRXpDO2dCQUFJc0I7Z0JBQU1EO2dCQUFXRTtZQUFNO1FBQzFDO2tCQUVDeEI7O0FBR1A7QUFFQSxNQUFNSCw4QkFBOEI7SUFDbEMsTUFBTThDLFVBQVVDLElBQUFBLGlCQUFVLEVBQUM5QztJQUUzQixJQUFJLENBQUM2QyxTQUFTO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBRUEsT0FBT0Y7QUFDVCJ9