{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistChatDataProvider.tsx"],"sourcesContent":["import {\n  Dispatch,\n  SetStateAction,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { CqsItem, Watchlist } from \"@rp/common/api-types\"\nimport { WATCHLIST_CHAT_ID_PARAM } from \"@rp/common/settings\"\nimport { useWatchlist } from \"@rp/react/tanstack-api/watchlist\"\nimport { useChatDataContext } from \"@rp/react/web/chat\"\nimport { useDeviceSize, useQueryParams } from \"@rp/react/web/common/hooks\"\n\ntype DataContextValue = {\n  resetChat: (entity: SetStateAction<CqsItem | null>, resetWatchlistId?: boolean) => void\n  showAllPrompts: boolean\n  setShowAllPrompts: Dispatch<SetStateAction<boolean>>\n  selectedEntity: CqsItem | null\n  setSelectedEntity: Dispatch<SetStateAction<CqsItem | null>>\n  isChatCollapsed: boolean\n  setIsChatCollapsed: Dispatch<SetStateAction<boolean>>\n  chatWidth: number\n  watchlist: {\n    id: string | undefined\n    data: Watchlist | undefined\n    isLoading: boolean\n    error: Error | null\n  }\n  entityOffset: number\n  setEntityOffset: Dispatch<SetStateAction<number>>\n}\n\nconst ChatDataContext = createContext<DataContextValue | null>(null)\n\ntype Props = {\n  isChatCollapsed: boolean\n  setIsChatCollapsed: Dispatch<SetStateAction<boolean>>\n  children: React.ReactNode\n  id: string | undefined\n}\n\nconst WatchlistChatDataProvider = ({\n  children,\n  id,\n  isChatCollapsed,\n  setIsChatCollapsed,\n}: Props) => {\n  const params = useQueryParams()\n  const navigate = useNavigate()\n  const [showAllPrompts, setShowAllPrompts] = useState(false)\n  const { width } = useDeviceSize()\n  const [chatWidth, setChatWidth] = useState<number>(Math.min(700, Math.max(500, width - 48 - 900)))\n  const [selectedEntity, setSelectedEntity] = useState<CqsItem | null>(null)\n  const [entityOffset, setEntityOffset] = useState<number>(0)\n  const { isLoading, data, error } = useWatchlist(id)\n  const {\n    helpers: { resetChatState },\n  } = useChatDataContext()\n\n  const resetChat = useCallback(\n    (entity: SetStateAction<CqsItem | null>, resetWatchlistId: boolean | undefined) => {\n      setShowAllPrompts(false)\n      resetChatState({ withNavigation: false, resetWatchlistId: resetWatchlistId ?? false })\n      params.delete(WATCHLIST_CHAT_ID_PARAM)\n      navigate({ search: params.toString() }, { replace: true })\n      setIsChatCollapsed(false)\n      setSelectedEntity(entity)\n      setEntityOffset(0)\n    },\n    [navigate, params, resetChatState, setIsChatCollapsed],\n  )\n\n  useEffect(() => {\n    setChatWidth(Math.min(700, Math.max(500, width - 48 - 900)))\n  }, [width])\n\n  return (\n    <ChatDataContext.Provider\n      value={{\n        selectedEntity,\n        setSelectedEntity,\n        resetChat,\n        showAllPrompts,\n        setShowAllPrompts,\n        isChatCollapsed,\n        setIsChatCollapsed,\n        chatWidth,\n        entityOffset,\n        setEntityOffset,\n        watchlist: { id, data, isLoading, error },\n      }}\n    >\n      {children}\n    </ChatDataContext.Provider>\n  )\n}\n\nconst useWatchlistChatDataContext = () => {\n  const context = useContext(ChatDataContext)\n\n  if (!context) {\n    throw new Error(\"useWatchlistChatDataContext should be used within a WatchlistChatDataProvider\")\n  }\n\n  return context\n}\n\nexport { WatchlistChatDataProvider, useWatchlistChatDataContext }\n"],"names":["WatchlistChatDataProvider","useWatchlistChatDataContext","ChatDataContext","createContext","children","id","isChatCollapsed","setIsChatCollapsed","params","useQueryParams","navigate","useNavigate","showAllPrompts","setShowAllPrompts","useState","width","useDeviceSize","chatWidth","setChatWidth","Math","min","max","selectedEntity","setSelectedEntity","entityOffset","setEntityOffset","isLoading","data","error","useWatchlist","helpers","resetChatState","useChatDataContext","resetChat","useCallback","entity","resetWatchlistId","withNavigation","delete","WATCHLIST_CHAT_ID_PARAM","search","toString","replace","useEffect","Provider","value","watchlist","context","useContext","Error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA8GSA,yBAAyB;eAAzBA;;IAA2BC,2BAA2B;eAA3BA;;;;uBAtG7B;gCACqB;0BAEY;2BACX;sBACM;uBACW;AAqB9C,MAAMC,gCAAkBC,IAAAA,oBAAa,EAA0B;AAS/D,MAAMH,4BAA4B,CAAC,EACjCI,QAAQ,EACRC,EAAE,EACFC,eAAe,EACfC,kBAAkB,EACZ;IACN,MAAMC,SAASC,IAAAA,qBAAc;IAC7B,MAAMC,WAAWC,IAAAA,2BAAW;IAC5B,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,eAAQ,EAAC;IACrD,MAAM,EAAEC,KAAK,EAAE,GAAGC,IAAAA,oBAAa;IAC/B,MAAM,CAACC,WAAWC,aAAa,GAAGJ,IAAAA,eAAQ,EAASK,KAAKC,GAAG,CAAC,KAAKD,KAAKE,GAAG,CAAC,KAAKN,QAAQ,KAAK;IAC5F,MAAM,CAACO,gBAAgBC,kBAAkB,GAAGT,IAAAA,eAAQ,EAAiB;IACrE,MAAM,CAACU,cAAcC,gBAAgB,GAAGX,IAAAA,eAAQ,EAAS;IACzD,MAAM,EAAEY,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGC,IAAAA,uBAAY,EAACxB;IAChD,MAAM,EACJyB,SAAS,EAAEC,cAAc,EAAE,EAC5B,GAAGC,IAAAA,wBAAkB;IAEtB,MAAMC,YAAYC,IAAAA,kBAAW,EAC3B,CAACC,QAAwCC;QACvCvB,kBAAkB;QAClBkB,eAAe;YAAEM,gBAAgB;YAAOD,kBAAkBA,6BAAAA,8BAAAA,mBAAoB;QAAM;QACpF5B,OAAO8B,MAAM,CAACC,iCAAuB;QACrC7B,SAAS;YAAE8B,QAAQhC,OAAOiC,QAAQ;QAAG,GAAG;YAAEC,SAAS;QAAK;QACxDnC,mBAAmB;QACnBgB,kBAAkBY;QAClBV,gBAAgB;IAClB,GACA;QAACf;QAAUF;QAAQuB;QAAgBxB;KAAmB;IAGxDoC,IAAAA,gBAAS,EAAC;QACRzB,aAAaC,KAAKC,GAAG,CAAC,KAAKD,KAAKE,GAAG,CAAC,KAAKN,QAAQ,KAAK;IACxD,GAAG;QAACA;KAAM;IAEV,qBACE,qBAACb,gBAAgB0C,QAAQ;QACvBC,OAAO;YACLvB;YACAC;YACAU;YACArB;YACAC;YACAP;YACAC;YACAU;YACAO;YACAC;YACAqB,WAAW;gBAAEzC;gBAAIsB;gBAAMD;gBAAWE;YAAM;QAC1C;kBAECxB;;AAGP;AAEA,MAAMH,8BAA8B;IAClC,MAAM8C,UAAUC,IAAAA,iBAAU,EAAC9C;IAE3B,IAAI,CAAC6C,SAAS;QACZ,MAAM,IAAIE,MAAM;IAClB;IAEA,OAAOF;AACT"}