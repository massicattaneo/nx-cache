a5eb6c2ce74169c9ef3b4ef05366ca69
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BaseChip", {
    enumerable: true,
    get: function() {
        return BaseChip;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _core = require("@rp/react/web/mui/core");
const _Chipstyles = require("./Chip.styles");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const operationMap = {
    all: "AND",
    "not-in": "NOT"
};
const BaseChip = /*#__PURE__*/ (0, _react.forwardRef)(({ operation, icon, onRemove, onClick = (f)=>f, clickable = false, children, className = "", selected = false, sx }, ref)=>{
    const Icon = operation !== undefined && operation !== "in" ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                style: {
                    marginLeft: 10,
                    fontSize: 12,
                    letterSpacing: 0.75
                },
                "data-testid": `operator-${operationMap[operation]}`,
                children: operationMap[operation]
            }),
            icon
        ]
    }) : icon;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Chipstyles.BaseChipStyled, {
        className: `${className}${selected ? " selected" : ""}`,
        label: children,
        variant: "outlined",
        icon: Icon,
        onClick: onClick,
        onDelete: onRemove,
        size: "small",
        clickable: clickable,
        selected: selected,
        sx: sx,
        ref: ref
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2Nxcy1xdWVyeS1iYXIvc3JjL2xpYi9jaGlwcy9CYXNlQ2hpcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgU3hQcm9wcywgVHlwb2dyYXBoeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IEJhc2VDaGlwU3R5bGVkIH0gZnJvbSBcIi4vQ2hpcC5zdHlsZXNcIlxuXG50eXBlIEJhc2VDaGlwUHJvcHMgPSB7XG4gIG9uQ2xpY2s/OiAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEVsZW1lbnQ+KSA9PiB2b2lkXG4gIG9uUmVtb3ZlPzogKCkgPT4gdm9pZFxuICBpY29uPzogUmVhY3QuUmVhY3RFbGVtZW50XG4gIG9wZXJhdGlvbj86IHN0cmluZ1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlXG4gIGNsaWNrYWJsZT86IGJvb2xlYW5cbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIHNlbGVjdGVkPzogYm9vbGVhblxuICBzeD86IFN4UHJvcHNcbn1cblxuY29uc3Qgb3BlcmF0aW9uTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICBhbGw6IFwiQU5EXCIsXG4gIFwibm90LWluXCI6IFwiTk9UXCIsXG59XG5cbmNvbnN0IEJhc2VDaGlwID0gZm9yd2FyZFJlZjxIVE1MRGl2RWxlbWVudCwgQmFzZUNoaXBQcm9wcz4oXG4gIChcbiAgICB7XG4gICAgICBvcGVyYXRpb24sXG4gICAgICBpY29uLFxuICAgICAgb25SZW1vdmUsXG4gICAgICBvbkNsaWNrID0gZiA9PiBmLFxuICAgICAgY2xpY2thYmxlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSA9IFwiXCIsXG4gICAgICBzZWxlY3RlZCA9IGZhbHNlLFxuICAgICAgc3gsXG4gICAgfSxcbiAgICByZWYsXG4gICkgPT4ge1xuICAgIGNvbnN0IEljb24gPVxuICAgICAgb3BlcmF0aW9uICE9PSB1bmRlZmluZWQgJiYgb3BlcmF0aW9uICE9PSBcImluXCIgPyAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IDEwLCBmb250U2l6ZTogMTIsIGxldHRlclNwYWNpbmc6IDAuNzUgfX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtgb3BlcmF0b3ItJHtvcGVyYXRpb25NYXBbb3BlcmF0aW9uXX1gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtvcGVyYXRpb25NYXBbb3BlcmF0aW9uXX1cbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAge2ljb259XG4gICAgICAgIDwvPlxuICAgICAgKSA6IChcbiAgICAgICAgaWNvblxuICAgICAgKVxuICAgIHJldHVybiAoXG4gICAgICA8QmFzZUNoaXBTdHlsZWRcbiAgICAgICAgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9JHtzZWxlY3RlZCA/IFwiIHNlbGVjdGVkXCIgOiBcIlwifWB9XG4gICAgICAgIGxhYmVsPXtjaGlsZHJlbn1cbiAgICAgICAgdmFyaWFudD1cIm91dGxpbmVkXCJcbiAgICAgICAgaWNvbj17SWNvbn1cbiAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgb25EZWxldGU9e29uUmVtb3ZlfVxuICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICBjbGlja2FibGU9e2NsaWNrYWJsZX1cbiAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxuICAgICAgICBzeD17c3h9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgLz5cbiAgICApXG4gIH0sXG4pXG5cbmV4cG9ydCB7IEJhc2VDaGlwIH1cbmV4cG9ydCB0eXBlIHsgQmFzZUNoaXBQcm9wcyB9XG4iXSwibmFtZXMiOlsiQmFzZUNoaXAiLCJvcGVyYXRpb25NYXAiLCJhbGwiLCJmb3J3YXJkUmVmIiwib3BlcmF0aW9uIiwiaWNvbiIsIm9uUmVtb3ZlIiwib25DbGljayIsImYiLCJjbGlja2FibGUiLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsInNlbGVjdGVkIiwic3giLCJyZWYiLCJJY29uIiwidW5kZWZpbmVkIiwiVHlwb2dyYXBoeSIsInN0eWxlIiwibWFyZ2luTGVmdCIsImZvbnRTaXplIiwibGV0dGVyU3BhY2luZyIsImRhdGEtdGVzdGlkIiwiQmFzZUNoaXBTdHlsZWQiLCJsYWJlbCIsInZhcmlhbnQiLCJvbkRlbGV0ZSIsInNpemUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQW9FU0E7OztlQUFBQTs7OzsrREFwRXlCO3NCQUNFOzRCQUNMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjL0IsTUFBTUMsZUFBdUM7SUFDM0NDLEtBQUs7SUFDTCxVQUFVO0FBQ1o7QUFFQSxNQUFNRix5QkFBV0csSUFBQUEsaUJBQVUsRUFDekIsQ0FDRSxFQUNFQyxTQUFTLEVBQ1RDLElBQUksRUFDSkMsUUFBUSxFQUNSQyxVQUFVQyxDQUFBQSxJQUFLQSxDQUFDLEVBQ2hCQyxZQUFZLEtBQUssRUFDakJDLFFBQVEsRUFDUkMsWUFBWSxFQUFFLEVBQ2RDLFdBQVcsS0FBSyxFQUNoQkMsRUFBRSxFQUNILEVBQ0RDO0lBRUEsTUFBTUMsT0FDSlgsY0FBY1ksYUFBYVosY0FBYyxxQkFDdkM7OzBCQUNFLHFCQUFDYSxnQkFBVTtnQkFDVEMsT0FBTztvQkFBRUMsWUFBWTtvQkFBSUMsVUFBVTtvQkFBSUMsZUFBZTtnQkFBSztnQkFDM0RDLGVBQWEsQ0FBQyxTQUFTLEVBQUVyQixZQUFZLENBQUNHLFVBQVUsQ0FBQyxDQUFDOzBCQUVqREgsWUFBWSxDQUFDRyxVQUFVOztZQUV6QkM7O1NBR0hBO0lBRUoscUJBQ0UscUJBQUNrQiwwQkFBYztRQUNiWixXQUFXLENBQUMsRUFBRUEsVUFBVSxFQUFFQyxXQUFXLGNBQWMsR0FBRyxDQUFDO1FBQ3ZEWSxPQUFPZDtRQUNQZSxTQUFRO1FBQ1JwQixNQUFNVTtRQUNOUixTQUFTQTtRQUNUbUIsVUFBVXBCO1FBQ1ZxQixNQUFLO1FBQ0xsQixXQUFXQTtRQUNYRyxVQUFVQTtRQUNWQyxJQUFJQTtRQUNKQyxLQUFLQTs7QUFHWCJ9