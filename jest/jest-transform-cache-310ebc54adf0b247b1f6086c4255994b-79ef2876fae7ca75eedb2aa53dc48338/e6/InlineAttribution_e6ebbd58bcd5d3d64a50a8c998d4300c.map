{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/chat/src/lib/Chat/Chat/ChatResponse/InlineAttribution/InlineAttribution.tsx"],"sourcesContent":["import { MouseEvent, useState } from \"react\"\nimport { getDataFromRef, getRefList } from \"@rp/react/common/chat\"\nimport { createChunkMap } from \"@rp/react/common/hooks\"\nimport { useDeviceInfo, useHashParams } from \"@rp/react/web/common/hooks\"\nimport { useDocumentViewerData } from \"@rp/react/web/common/providers\"\nimport { OnUserInteractionProps } from \"../ChatResponse\"\nimport {\n  InlineAttributionArrowButton,\n  InlineAttributionNumberedButton,\n} from \"./InlineAttributionButton\"\nimport { InlineAttributionListModal } from \"./InlineAttributionListModal\"\nimport {\n  GroupedInlineAttributionList,\n  getCqsInlineAttributionData,\n  getExternalInlineAttributionData,\n  groupInlineAttributions,\n} from \"./getInlineAttributionData\"\n\ntype ChunkMap = ReturnType<typeof createChunkMap>[\"chunkMap\"]\ntype ExternalMap = ReturnType<typeof createChunkMap>[\"externalMap\"]\n\ntype Props = {\n  refId: string\n  chunkMap: ChunkMap\n  externalMap: ExternalMap\n  disabled?: boolean\n  onUserInteraction: (props: OnUserInteractionProps) => void\n}\n\nconst COUNTER_NAME = \"inline-attributions\"\n\nconst InlineAttribution = ({\n  refId,\n  chunkMap,\n  externalMap,\n  disabled = false,\n  onUserInteraction,\n}: Props) => {\n  const { setDocumentData } = useDocumentViewerData()\n  const { isMobile } = useDeviceInfo()\n  const [, setHashParams] = useHashParams()\n  const [showTooltip, setShowTooltip] = useState(false)\n\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { type, id } = getDataFromRef(refId)\n  const listData = getRefList(refId)\n  let groups: GroupedInlineAttributionList | undefined = undefined\n\n  if (listData !== null) {\n    const attributionData = listData.map(item =>\n      item.type === \"CQS\"\n        ? getCqsInlineAttributionData({\n            id: item.id,\n            chunkMap,\n            onUserInteraction,\n            setDocumentData,\n            setHashParams,\n            setShowTooltip,\n          })\n        : getExternalInlineAttributionData({\n            externalMap,\n            id: item.id,\n            onUserInteraction,\n            setShowTooltip,\n          }),\n    )\n\n    groups = groupInlineAttributions(attributionData)\n  }\n\n  if (type === \"CQS\") {\n    const inlineAttributionData = getCqsInlineAttributionData({\n      id,\n      chunkMap,\n      onUserInteraction,\n      setDocumentData,\n      setHashParams,\n      setShowTooltip,\n    })\n\n    groups = groupInlineAttributions([inlineAttributionData])\n  }\n\n  if (type === \"EXTERNAL\") {\n    const inlineAttributionData = getExternalInlineAttributionData({\n      externalMap,\n      id,\n      onUserInteraction,\n      setShowTooltip,\n    })\n\n    groups = groupInlineAttributions([inlineAttributionData])\n  }\n\n  if (groups === undefined || groups.length === 0) {\n    return \"\"\n  }\n\n  const firstItem = groups[0].data[0]\n  const { onClick, url, hd, documentId } = firstItem\n\n  const onButtonClick = (ev: MouseEvent) => {\n    if (isMobile) {\n      setIsModalOpen(true)\n      onUserInteraction({\n        action: \"preview\",\n        sourceUrl: url,\n        sourceTitle: hd,\n        documentId: documentId,\n        sourceId: firstItem.type === \"EXTERNAL\" ? null : firstItem.srcKey,\n        sourceName: firstItem.type === \"EXTERNAL\" ? null : firstItem.sourceName,\n        providerId: firstItem.type === \"EXTERNAL\" ? null : firstItem.rpProviderId,\n      })\n    } else {\n      onClick(ev)\n      setShowTooltip(false)\n    }\n  }\n\n  return (\n    <InlineAttributionListModal\n      attributions={groups}\n      closeModal={() => setIsModalOpen(false)}\n      isOpen={isModalOpen}\n      showTooltip={showTooltip}\n      disabled={disabled}\n      onOpenTooltip={() => {\n        setShowTooltip(true)\n        onUserInteraction({\n          action: \"preview\",\n          sourceUrl: url,\n          sourceTitle: hd,\n          documentId: documentId,\n          sourceId: firstItem.type === \"EXTERNAL\" ? null : firstItem.srcKey,\n          sourceName: firstItem.type === \"EXTERNAL\" ? null : firstItem.sourceName,\n          providerId: firstItem.type === \"EXTERNAL\" ? null : firstItem.rpProviderId,\n        })\n      }}\n      onCloseTooltip={() => setShowTooltip(false)}\n    >\n      {listData !== null ? (\n        <InlineAttributionArrowButton\n          disabled={disabled}\n          onClick={onButtonClick}\n          isModalOpen={isModalOpen}\n        />\n      ) : (\n        <InlineAttributionNumberedButton\n          disabled={disabled}\n          onClick={onButtonClick}\n          isModalOpen={isModalOpen}\n        />\n      )}\n    </InlineAttributionListModal>\n  )\n}\nexport { InlineAttribution, COUNTER_NAME }\n"],"names":["COUNTER_NAME","InlineAttribution","refId","chunkMap","externalMap","disabled","onUserInteraction","setDocumentData","useDocumentViewerData","isMobile","useDeviceInfo","setHashParams","useHashParams","showTooltip","setShowTooltip","useState","isModalOpen","setIsModalOpen","type","id","getDataFromRef","listData","getRefList","groups","undefined","attributionData","map","item","getCqsInlineAttributionData","getExternalInlineAttributionData","groupInlineAttributions","inlineAttributionData","length","firstItem","data","onClick","url","hd","documentId","onButtonClick","ev","action","sourceUrl","sourceTitle","sourceId","srcKey","sourceName","providerId","rpProviderId","InlineAttributionListModal","attributions","closeModal","isOpen","onOpenTooltip","onCloseTooltip","InlineAttributionArrowButton","InlineAttributionNumberedButton"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}