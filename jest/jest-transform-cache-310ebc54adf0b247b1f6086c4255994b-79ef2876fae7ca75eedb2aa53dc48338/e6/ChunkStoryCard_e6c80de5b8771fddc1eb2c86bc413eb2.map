{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/results-story-card/src/StoryCard/ChunkStoryCard.tsx"],"sourcesContent":["import { MouseEvent, useCallback } from \"react\"\nimport { Box } from \"@mui/system\"\nimport {\n  CqsChunkStory,\n  CqsClusterSummaryStory,\n  CqsSearchQuery,\n  CqsStory,\n  isClusterChunkStory,\n} from \"@rp/common/api-types\"\nimport { REDIRECT_PROVIDERS } from \"@rp/common/settings\"\nimport { getRegExpKeywords } from \"@rp/common/utils\"\nimport { removeFileExtension } from \"@rp/common/utils\"\nimport { DocumentIcon } from \"@rp/react/web/common/composite-components\"\nimport { StoryCardDate } from \"@rp/react/web/common/composite-components\"\nimport { StoryCardRanking } from \"@rp/react/web/common/composite-components\"\nimport { EllipsisTooltip, ShowMoreList } from \"@rp/react/web/common/composite-components\"\nimport { DateAndTranslatedInfo } from \"@rp/react/web/common/document-viewer\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { useVisitedDocument } from \"@rp/react/web/common/hooks\"\nimport { useExternalLinkUrl, useHashParams } from \"@rp/react/web/common/hooks\"\nimport { useDocumentViewerData } from \"@rp/react/web/common/providers\"\nimport { tagManagerEvents } from \"@rp/react/web/common/vendors/utils\"\nimport { getRelevantChunkId } from \"@rp/react/web/cqs-utils\"\nimport { Collapse, Link, Typography, debounce } from \"@rp/react/web/mui/core\"\nimport { ExpandLess } from \"@rp/react/web/mui/icons\"\nimport { RpJsonContentBlockDisplay } from \"@rp/react/web/rpjson\"\nimport {\n  RelatedDocumentButton,\n  StoryCardClusterStyled,\n  StoryCardHeader,\n  StoryCardHeaderInfo,\n  StoryCardStory,\n  StoryCardStyled,\n  classes,\n} from \"../StoryCard.styles\"\nimport { scrollToStoryTop, storyId, transitionId } from \"../scrollToStoryTop\"\n\nexport type ActionButtonProps = {\n  story: CqsStory | CqsClusterSummaryStory\n}\n\nexport type ChunkStoryCardTypes = {\n  story: CqsChunkStory\n  index: number\n  query?: CqsSearchQuery\n  keywords?: Array<string>\n  documentQuery?: CqsSearchQuery\n  showCluster?: boolean\n  toggleShowCluster?: (id: string) => void\n  isFeedbackMode?: boolean\n  isClusteredStory?: boolean\n  parentId?: string\n  parentIndex?: number\n  hideRating?: boolean\n  queryId?: string\n  onCardClick?: () => void\n}\n\nconst HEADLINE_ONLY_CHUNK = {\n  cnum: 1,\n  text: \"Headline only\",\n  entities: [],\n  boundingBoxes: [],\n}\n\nconst ChunkStoryCard = ({\n  story,\n  index,\n  query,\n  documentQuery,\n  keywords = [],\n  showCluster = false,\n  toggleShowCluster,\n  isFeedbackMode = false,\n  isClusteredStory,\n  parentId,\n  parentIndex,\n  hideRating,\n  queryId,\n  onCardClick,\n}: ChunkStoryCardTypes) => {\n  const { isMobile } = useDeviceInfo()\n  const [{ document: documentId }, setHashParams] = useHashParams()\n  const {\n    chunks,\n    id,\n    hd,\n    documentScope,\n    srcName = \"Unknown Source\",\n    ts,\n    language = \"English\",\n    contentType,\n    srcKey,\n  } = story\n  const isCluster = isClusterChunkStory(story)\n  const cluster = isCluster ? story.cluster : []\n  const isPrivate = documentScope === \"files\"\n  const onShowLess = useCallback(() => scrollToStoryTop(undefined, id), [id])\n  const { setDocumentData } = useDocumentViewerData()\n  const { redirectToContent } = useExternalLinkUrl(id)\n\n  const relevantChunkId = getRelevantChunkId(story)\n  const chunk =\n    chunks.find(chunk => chunk.sentences.length > 1 || chunk.sentences[0].pnum > 0) ??\n    HEADLINE_ONLY_CHUNK\n  const { cnum, entities: sentenceEntities = [] } = chunk\n\n  const gtmData = {\n    documentId: parentId ?? id,\n    index: parentIndex ?? index,\n    clusterDocumentId: isClusteredStory ? id : undefined,\n    clusterIndex: isClusteredStory ? index : undefined,\n    sentenceId: relevantChunkId,\n    queryId,\n  }\n\n  const handleClick = (event: MouseEvent<HTMLDivElement>) => {\n    event.stopPropagation()\n\n    tagManagerEvents.storyCard({\n      action: \"click\",\n      ...gtmData,\n    })\n\n    if (story.url && REDIRECT_PROVIDERS.includes(story.rpProviderId ?? \"\")) {\n      redirectToContent(story.url, chunk.text)\n      return\n    }\n\n    setDocumentData({\n      documentId: id,\n      documentScope,\n      language,\n      query: documentQuery,\n      queryId,\n      chunks,\n    })\n    onCardClick?.()\n\n    const hashParams: Record<string, string> = isPrivate\n      ? { document: id, private: \"true\" }\n      : { document: id }\n    const boundingBox = chunk.boundingBoxes?.[0]\n    if (boundingBox) {\n      hashParams.bb = JSON.stringify(boundingBox)\n    }\n\n    setHashParams(hashParams)\n  }\n\n  const handleMouseEnter = () => {\n    tagManagerEvents.storyCard({\n      action: \"hover\",\n      ...gtmData,\n    })\n  }\n\n  const handleToggleCluster = (event: MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation()\n\n    toggleShowCluster?.(id)\n\n    tagManagerEvents.storyCard({\n      action: \"open-cluster\",\n      ...gtmData,\n    })\n  }\n\n  const debounceHandleMouseEnter = debounce(handleMouseEnter, 500)\n\n  // Change color visited document\n  const isVisited = useVisitedDocument(id)\n\n  return (\n    <Box sx={{ paddingBottom: \"8px\", \"&>div\": { borderRadius: 1 } }}>\n      <StoryCardStyled\n        className={classes.storyCardRoot}\n        onClick={handleClick}\n        onMouseEnter={debounceHandleMouseEnter}\n        showCluster={showCluster}\n        isVisited={isVisited}\n      >\n        <Box sx={{ width: 1 }} id={isCluster ? storyId(id) : undefined}>\n          <StoryCardHeader>\n            <span className={classes.headlineContainer}>\n              <EllipsisTooltip\n                disabled={!!documentId}\n                tooltipText={hd}\n                tooltipStyles={{ maxWidth: 350 }}\n                typographyProps={{\n                  style: {\n                    whiteSpace: isMobile ? undefined : \"nowrap\",\n                  },\n                }}\n              >\n                <Link variant=\"body2\" data-testid={`story-headLine-${id}`}>\n                  {!isPrivate ? hd : removeFileExtension(hd)}\n                </Link>\n              </EllipsisTooltip>\n            </span>\n          </StoryCardHeader>\n          <StoryCardHeaderInfo data-testid={`story-headerInfo-${id}`}>\n            {documentScope !== undefined ? (\n              <DocumentIcon\n                contentType={contentType}\n                documentScope={documentScope}\n                text={!isPrivate ? srcName : null}\n                srcKey={srcKey}\n              />\n            ) : null}\n            {isFeedbackMode && story?.sourceRank ? (\n              <Typography\n                sx={{ fontSize: \"12px\", mr: \"3px\", color: \"primary.main\" }}\n                component=\"span\"\n              >\n                ({story.sourceRank})\n              </Typography>\n            ) : null}\n            {cluster.length ? (\n              <Link component=\"button\" onClick={handleToggleCluster}>\n                <StoryCardDate sx={{ color: \"primary.light\", display: \"block\" }}>\n                  +{cluster.length} more\n                </StoryCardDate>\n              </Link>\n            ) : null}\n            <DateAndTranslatedInfo\n              language={isMobile && cluster.length ? undefined : language}\n              timestamp={ts}\n            />\n          </StoryCardHeaderInfo>\n          <div>\n            {!!cnum && cnum !== 0 && (\n              <StoryCardStory data-testid={`story-text-${id}`}>\n                <RpJsonContentBlockDisplay\n                  finds={getRegExpKeywords(keywords)}\n                  block={chunk}\n                  markupDetections\n                />\n              </StoryCardStory>\n            )}\n            {isFeedbackMode && (\n              <StoryCardRanking\n                documentId={story.id}\n                headlineEntities={[]}\n                hideRating={hideRating}\n                parentIndex={parentIndex}\n                resultIndex={index}\n                sentenceEntities={sentenceEntities}\n                sentenceId={relevantChunkId}\n              />\n            )}\n          </div>\n        </Box>\n      </StoryCardStyled>\n      {showCluster ? (\n        <RelatedDocumentButton onClick={() => toggleShowCluster?.(id)}>\n          <Typography fontSize={14}>Related documents</Typography>\n          <ExpandLess />\n        </RelatedDocumentButton>\n      ) : null}\n      <Collapse in={showCluster} id={isCluster ? transitionId(id) : undefined}>\n        <StoryCardClusterStyled>\n          <ShowMoreList\n            items={cluster}\n            paginate={3}\n            showNextItemsNum\n            onShowLess={onShowLess}\n            renderItem={(clust, idx) => (\n              <ChunkStoryCard\n                query={query}\n                key={clust.id}\n                story={clust}\n                index={idx}\n                keywords={keywords}\n                documentQuery={documentQuery}\n                isClusteredStory\n                parentId={id}\n                parentIndex={index}\n                isFeedbackMode={isFeedbackMode}\n                hideRating\n              />\n            )}\n          />\n        </StoryCardClusterStyled>\n      </Collapse>\n    </Box>\n  )\n}\n\nexport { ChunkStoryCard }\n"],"names":["ChunkStoryCard","HEADLINE_ONLY_CHUNK","cnum","text","entities","boundingBoxes","story","index","query","documentQuery","keywords","showCluster","toggleShowCluster","isFeedbackMode","isClusteredStory","parentId","parentIndex","hideRating","queryId","onCardClick","isMobile","useDeviceInfo","document","documentId","setHashParams","useHashParams","chunks","id","hd","documentScope","srcName","ts","language","contentType","srcKey","isCluster","isClusterChunkStory","cluster","isPrivate","onShowLess","useCallback","scrollToStoryTop","undefined","setDocumentData","useDocumentViewerData","redirectToContent","useExternalLinkUrl","relevantChunkId","getRelevantChunkId","chunk","find","sentences","length","pnum","sentenceEntities","gtmData","clusterDocumentId","clusterIndex","sentenceId","handleClick","event","stopPropagation","tagManagerEvents","storyCard","action","url","REDIRECT_PROVIDERS","includes","rpProviderId","hashParams","private","boundingBox","bb","JSON","stringify","handleMouseEnter","handleToggleCluster","debounceHandleMouseEnter","debounce","isVisited","useVisitedDocument","Box","sx","paddingBottom","borderRadius","StoryCardStyled","className","classes","storyCardRoot","onClick","onMouseEnter","width","storyId","StoryCardHeader","span","headlineContainer","EllipsisTooltip","disabled","tooltipText","tooltipStyles","maxWidth","typographyProps","style","whiteSpace","Link","variant","data-testid","removeFileExtension","StoryCardHeaderInfo","DocumentIcon","sourceRank","Typography","fontSize","mr","color","component","StoryCardDate","display","DateAndTranslatedInfo","timestamp","div","StoryCardStory","RpJsonContentBlockDisplay","finds","getRegExpKeywords","block","markupDetections","StoryCardRanking","headlineEntities","resultIndex","RelatedDocumentButton","ExpandLess","Collapse","in","transitionId","StoryCardClusterStyled","ShowMoreList","items","paginate","showNextItemsNum","renderItem","clust","idx"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}