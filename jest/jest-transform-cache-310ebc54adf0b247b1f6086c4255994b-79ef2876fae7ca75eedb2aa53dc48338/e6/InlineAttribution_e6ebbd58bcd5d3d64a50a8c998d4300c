874646e299f2b7147c7e91c1a8ce9730
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    COUNTER_NAME: function() {
        return COUNTER_NAME;
    },
    InlineAttribution: function() {
        return InlineAttribution;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _chat = require("@rp/react/common/chat");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _InlineAttributionButton = require("./InlineAttributionButton");
const _InlineAttributionListModal = require("./InlineAttributionListModal");
const _getInlineAttributionData = require("./getInlineAttributionData");
const COUNTER_NAME = "inline-attributions";
const InlineAttribution = ({ refId, chunkMap, externalMap, disabled = false, onUserInteraction })=>{
    const { setDocumentData } = (0, _providers.useDocumentViewerData)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [, setHashParams] = (0, _hooks.useHashParams)();
    const [showTooltip, setShowTooltip] = (0, _react.useState)(false);
    const [isModalOpen, setIsModalOpen] = (0, _react.useState)(false);
    const { type, id } = (0, _chat.getDataFromRef)(refId);
    const listData = (0, _chat.getRefList)(refId);
    let groups = undefined;
    if (listData !== null) {
        const attributionData = listData.map((item)=>item.type === "CQS" ? (0, _getInlineAttributionData.getCqsInlineAttributionData)({
                id: item.id,
                chunkMap,
                onUserInteraction,
                setDocumentData,
                setHashParams,
                setShowTooltip
            }) : (0, _getInlineAttributionData.getExternalInlineAttributionData)({
                externalMap,
                id: item.id,
                onUserInteraction,
                setShowTooltip
            }));
        groups = (0, _getInlineAttributionData.groupInlineAttributions)(attributionData);
    }
    if (type === "CQS") {
        const inlineAttributionData = (0, _getInlineAttributionData.getCqsInlineAttributionData)({
            id,
            chunkMap,
            onUserInteraction,
            setDocumentData,
            setHashParams,
            setShowTooltip
        });
        groups = (0, _getInlineAttributionData.groupInlineAttributions)([
            inlineAttributionData
        ]);
    }
    if (type === "EXTERNAL") {
        const inlineAttributionData = (0, _getInlineAttributionData.getExternalInlineAttributionData)({
            externalMap,
            id,
            onUserInteraction,
            setShowTooltip
        });
        groups = (0, _getInlineAttributionData.groupInlineAttributions)([
            inlineAttributionData
        ]);
    }
    if (groups === undefined || groups.length === 0) {
        return "";
    }
    const firstItem = groups[0].data[0];
    const { onClick, url, hd, documentId } = firstItem;
    const onButtonClick = (ev)=>{
        if (isMobile) {
            setIsModalOpen(true);
            onUserInteraction({
                action: "preview",
                sourceUrl: url,
                sourceTitle: hd,
                documentId: documentId,
                sourceId: firstItem.type === "EXTERNAL" ? null : firstItem.srcKey,
                sourceName: firstItem.type === "EXTERNAL" ? null : firstItem.sourceName,
                providerId: firstItem.type === "EXTERNAL" ? null : firstItem.rpProviderId
            });
        } else {
            onClick(ev);
            setShowTooltip(false);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_InlineAttributionListModal.InlineAttributionListModal, {
        attributions: groups,
        closeModal: ()=>setIsModalOpen(false),
        isOpen: isModalOpen,
        showTooltip: showTooltip,
        disabled: disabled,
        onOpenTooltip: ()=>{
            setShowTooltip(true);
            onUserInteraction({
                action: "preview",
                sourceUrl: url,
                sourceTitle: hd,
                documentId: documentId,
                sourceId: firstItem.type === "EXTERNAL" ? null : firstItem.srcKey,
                sourceName: firstItem.type === "EXTERNAL" ? null : firstItem.sourceName,
                providerId: firstItem.type === "EXTERNAL" ? null : firstItem.rpProviderId
            });
        },
        onCloseTooltip: ()=>setShowTooltip(false),
        children: listData !== null ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_InlineAttributionButton.InlineAttributionArrowButton, {
            disabled: disabled,
            onClick: onButtonClick,
            isModalOpen: isModalOpen
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_InlineAttributionButton.InlineAttributionNumberedButton, {
            disabled: disabled,
            onClick: onButtonClick,
            isModalOpen: isModalOpen
        })
    });
};

//# sourceMappingURL=data:application/json;base64,