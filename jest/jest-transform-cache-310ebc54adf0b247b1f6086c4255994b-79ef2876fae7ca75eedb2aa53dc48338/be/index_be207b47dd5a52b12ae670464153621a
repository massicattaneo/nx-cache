ccaaef1127952af33de09436be5086e7
/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "invariant", {
    enumerable: true,
    get: function() {
        return invariant;
    }
});
function invariant(condition, format, ...args) {
    if (isProduction()) {
        if (format === undefined) {
            throw new Error('invariant requires an error message argument');
        }
    }
    if (!condition) {
        let error;
        if (format === undefined) {
            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
            let argIndex = 0;
            error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
            }));
            error.name = 'Invariant Violation';
        }
        error.framesToPop = 1 // we don't care about invariant's own frame
        ;
        throw error;
    }
}
function isProduction() {
    return typeof process !== 'undefined' && process.env['NODE_ENV'] === 'production';
} //# sourceMappingURL=index.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbjogYW55LCBmb3JtYXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcblx0aWYgKGlzUHJvZHVjdGlvbigpKSB7XG5cdFx0aWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jylcblx0XHR9XG5cdH1cblxuXHRpZiAoIWNvbmRpdGlvbikge1xuXHRcdGxldCBlcnJvclxuXHRcdGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcblx0XHRcdFx0XHQnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nLFxuXHRcdFx0KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgYXJnSW5kZXggPSAwXG5cdFx0XHRlcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0Zm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJnc1thcmdJbmRleCsrXVxuXHRcdFx0XHR9KSxcblx0XHRcdClcblx0XHRcdGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbidcblx0XHR9XG5cblx0XHQ7KGVycm9yIGFzIGFueSkuZnJhbWVzVG9Qb3AgPSAxIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG5cdFx0dGhyb3cgZXJyb3Jcblx0fVxufVxuXG5mdW5jdGlvbiBpc1Byb2R1Y3Rpb24oKSB7XG5cdHJldHVybiAoXG5cdFx0dHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52WydOT0RFX0VOViddID09PSAncHJvZHVjdGlvbidcblx0KVxufVxuIl0sIm5hbWVzIjpbImludmFyaWFudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImFyZ3MiLCJpc1Byb2R1Y3Rpb24iLCJ1bmRlZmluZWQiLCJFcnJvciIsImVycm9yIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwibmFtZSIsImZyYW1lc1RvUG9wIiwicHJvY2VzcyIsImVudiJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OytCQVdnQkE7OztlQUFBQTs7O0FBQVQsU0FBU0EsVUFBVUMsU0FBYyxFQUFFQyxNQUFjLEVBQUUsR0FBR0MsSUFBSTtJQUNoRSxJQUFJQyxnQkFBZ0I7UUFDbkIsSUFBSUYsV0FBV0csV0FBVztZQUN6QixNQUFNLElBQUlDLE1BQU07OztJQUlsQixJQUFJLENBQUNMLFdBQVc7UUFDZixJQUFJTTtRQUNKLElBQUlMLFdBQVdHLFdBQVc7WUFDekJFLFFBQVEsSUFBSUQsTUFDWCx1RUFDQztlQUVJO1lBQ04sSUFBSUUsV0FBVztZQUNmRCxRQUFRLElBQUlELE1BQ1hKLE9BQU9PLE9BQU8sQ0FBQSxPQUFRO2dCQUNyQixPQUFPTixJQUFJLENBQUNLLFdBQVc7O1lBR3pCRCxNQUFNRyxJQUFJLEdBQUc7O1FBR2JILE1BQWVJLFdBQVcsR0FBRyxFQUFFLDRDQUE0Qzs7UUFDNUUsTUFBTUo7OztBQUlSLFNBQVNIO0lBQ1IsT0FDQyxPQUFPUSxZQUFZLGVBQWVBLFFBQVFDLEdBQUcsQ0FBQyxXQUFXLEtBQUsifQ==