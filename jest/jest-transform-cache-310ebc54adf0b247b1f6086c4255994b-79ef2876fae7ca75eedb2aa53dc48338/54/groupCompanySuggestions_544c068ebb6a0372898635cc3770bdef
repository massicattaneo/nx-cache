bbab472fee1ef238d64a13e89e4b8594
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "groupCompanySuggestions", {
    enumerable: true,
    get: function() {
        return groupCompanySuggestions;
    }
});
const _makeSuggestionId = require("./makeSuggestionId");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const isNestableSuggestion = (suggestion)=>{
    return "typeDesc" in suggestion && suggestion.queryType === "entity" && suggestion.typeDesc === "Company";
};
const isWatchlistOrSavedSearchSuggestion = (suggestion)=>{
    return "queryType" in suggestion && (suggestion.queryType === "savedSearch" || suggestion.queryType === "watchlist");
};
const retypeSubsidiaries = (subsidiaries)=>{
    return subsidiaries.map((suggestion, index)=>{
        return _object_spread_props(_object_spread({}, suggestion), {
            nested: index === subsidiaries.length - 1 ? "last" : "default",
            typeDesc: suggestion.parent1 === undefined ? "Company" : "Subsidiary"
        });
    });
};
const groupCompanySuggestions = (suggestions, displayGroups, showCompanySuggestions = true, bannedUltimates = [], limit = 20)=>{
    let currentPosition = 0;
    const groupedSuggestions = [];
    const companiesMap = {};
    for (const suggestion of suggestions){
        // If item doesn't look like a company, just leave it on the same position
        if (showCompanySuggestions) {
            if (!isNestableSuggestion(suggestion)) {
                groupedSuggestions[currentPosition] = suggestion;
                currentPosition++;
                continue;
            }
            // If company doesn't have ultimate parent, it is the ultimate parent
            if (suggestion.parent1 === undefined) {
                // If entry doesn't exist, create it
                if (companiesMap[suggestion.key] === undefined) {
                    companiesMap[suggestion.key] = {
                        parent: suggestion,
                        subsidiaries: [],
                        position: currentPosition
                    };
                    currentPosition++;
                } else {
                    const { parent, subsidiaries, position } = companiesMap[suggestion.key];
                    const newSubsidiaries = [
                        ...subsidiaries,
                        parent
                    ];
                    companiesMap[suggestion.key] = {
                        parent: suggestion,
                        subsidiaries: newSubsidiaries,
                        position
                    };
                }
            } else {
                // If entry doesn't exist, create it
                if (companiesMap[suggestion.parent1.key] === undefined) {
                    companiesMap[suggestion.parent1.key] = {
                        parent: suggestion,
                        subsidiaries: [],
                        position: currentPosition
                    };
                    currentPosition++;
                } else {
                    const { parent, subsidiaries, position } = companiesMap[suggestion.parent1.key];
                    const shouldReplace = suggestion.parent2 === undefined && parent.parent2 !== undefined || suggestion.parent3 === undefined && parent.parent3 !== undefined;
                    if (shouldReplace) {
                        const newSubsidiaries = [
                            ...subsidiaries,
                            parent
                        ];
                        companiesMap[suggestion.parent1.key] = {
                            parent: suggestion,
                            subsidiaries: newSubsidiaries,
                            position
                        };
                    } else {
                        companiesMap[suggestion.parent1.key] = {
                            parent,
                            subsidiaries: [
                                ...subsidiaries,
                                suggestion
                            ],
                            position
                        };
                    }
                }
            }
        } else if (isWatchlistOrSavedSearchSuggestion(suggestion)) {
            groupedSuggestions[currentPosition] = suggestion;
            currentPosition++;
            continue;
        }
    }
    // Keep track of the positions the nested subsidiaries will appear
    const expandedDisplayGroups = [];
    // Add every grouped suggestion to the list
    for(const key in companiesMap){
        const { parent, subsidiaries, position } = companiesMap[key];
        const { parent1: ultimateParent } = parent;
        // If parent is not ultimate parent, add it to the sublist
        const extendedUltimateParent = ultimateParent && !bannedUltimates.includes((0, _makeSuggestionId.makeSuggestionId)(ultimateParent.key, ultimateParent.queryType)) ? _object_spread_props(_object_spread({}, ultimateParent), {
            type: ultimateParent.queryType,
            label: ultimateParent.name,
            value: ultimateParent.key,
            id: (0, _makeSuggestionId.makeSuggestionId)(ultimateParent.key, ultimateParent.queryType)
        }) : undefined;
        const finalSubsidiaries = extendedUltimateParent !== undefined ? [
            ...subsidiaries,
            extendedUltimateParent
        ] : subsidiaries;
        const finalParent = extendedUltimateParent ? _object_spread_props(_object_spread({}, parent), {
            typeDesc: "Subsidiary"
        }) : parent;
        groupedSuggestions[position] = _object_spread_props(_object_spread({}, finalParent), {
            subsidiaries: finalSubsidiaries
        });
        // If this cluster is going to be filtered, avoid adding it to the display groups list
        if (displayGroups.includes(parent.id)) {
            expandedDisplayGroups.push([
                position,
                finalSubsidiaries
            ]);
        }
    }
    // Limit top level suggestions to 9 (+ 1 keyword)
    const limitedGroupedSuggestions = groupedSuggestions.slice(0, limit);
    expandedDisplayGroups.sort((a, b)=>a[0] - b[0]);
    const finalSuggestions = expandedDisplayGroups.length ? expandedDisplayGroups.reduce((acc, item, index)=>{
        var _expandedDisplayGroups_;
        const [position, subsidiaries] = item;
        const previousPosition = (_expandedDisplayGroups_ = expandedDisplayGroups[index - 1]) === null || _expandedDisplayGroups_ === void 0 ? void 0 : _expandedDisplayGroups_[0];
        const startingPoint = previousPosition !== undefined ? previousPosition + 1 : 0;
        const isLastItem = index === expandedDisplayGroups.length - 1;
        const endingSlice = isLastItem ? limitedGroupedSuggestions.slice(position + 1) : [];
        return [
            ...acc,
            ...limitedGroupedSuggestions.slice(startingPoint, position + 1),
            ...retypeSubsidiaries(subsidiaries),
            ...endingSlice
        ];
    }, []) : limitedGroupedSuggestions;
    return finalSuggestions;
};

//# sourceMappingURL=data:application/json;base64,