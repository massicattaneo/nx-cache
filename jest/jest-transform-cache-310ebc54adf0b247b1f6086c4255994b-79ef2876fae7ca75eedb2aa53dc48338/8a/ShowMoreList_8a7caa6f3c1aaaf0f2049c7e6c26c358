1e8d6a1353f494ea3f2833f2a72aae2c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ShowMoreList", {
    enumerable: true,
    get: function() {
        return ShowMoreList;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const ShowMore = (0, _core.styled)("div")(()=>({
        textAlign: "center",
        "& a": {
            cursor: "pointer",
            display: "inline-block"
        }
    }));
function ShowMoreList({ items, renderItem, fetchNextPage, hasNextPage = false, loading = false, paginate = 5, showNextItemsNum = false, onShowLess, showMoreLabel = {
    more: "SHOW MORE",
    less: "SHOW LESS"
} }) {
    const myRef = (0, _react.useRef)(null);
    const [numOfStories, setNumOfStories] = (0, _react.useState)(paginate);
    const showLess = numOfStories >= items.length && !hasNextPage;
    const showProgress = loading && items.length < numOfStories;
    const handleShowMore = (0, _react.useCallback)(()=>{
        if (showLess) {
            var _myRef_current;
            setNumOfStories(paginate);
            myRef === null || myRef === void 0 ? void 0 : (_myRef_current = myRef.current) === null || _myRef_current === void 0 ? void 0 : _myRef_current.scrollIntoView({
                behavior: "smooth",
                block: "start",
                inline: "nearest"
            });
            onShowLess === null || onShowLess === void 0 ? void 0 : onShowLess();
        } else {
            setNumOfStories((prev)=>prev + paginate);
        }
    }, [
        showLess,
        paginate,
        onShowLess
    ]);
    (0, _react.useEffect)(()=>{
        if (numOfStories >= items.length - paginate && hasNextPage && fetchNextPage) {
            fetchNextPage();
        }
    }, [
        fetchNextPage,
        numOfStories,
        items,
        hasNextPage,
        paginate
    ]);
    const next = Math.min(paginate, items.length - numOfStories);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        ref: myRef,
        children: [
            items.filter((_, index)=>index < numOfStories).map(renderItem),
            showProgress && /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.CircularProgress, {
                "data-testid": "show-more-list-loading",
                sx: {
                    display: "flex",
                    margin: "0 auto"
                }
            }),
            items.length > paginate && !showProgress ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ShowMore, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Link, {
                    onClick: handleShowMore,
                    children: showLess ? showMoreLabel.less : `${showMoreLabel.more}${showNextItemsNum ? ` (${next})` : ""}`
                })
            }) : null
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvU2hvd01vcmVMaXN0L1Nob3dNb3JlTGlzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSlNYLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEJveCwgQ2lyY3VsYXJQcm9ncmVzcywgTGluaywgc3R5bGVkIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuXG5jb25zdCBTaG93TW9yZSA9IHN0eWxlZChcImRpdlwiKSgoKSA9PiAoe1xuICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gIFwiJiBhXCI6IHtcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsXG4gIH0sXG59KSlcblxudHlwZSBQcm9wczxJdGVtVHlwZT4gPSB7XG4gIGl0ZW1zOiBBcnJheTxJdGVtVHlwZT5cbiAgcmVuZGVySXRlbTogKGl0ZW06IEl0ZW1UeXBlLCBpbmRleDogbnVtYmVyKSA9PiBKU1guRWxlbWVudFxuICBmZXRjaE5leHRQYWdlPzogKCkgPT4gdm9pZFxuICBoYXNOZXh0UGFnZT86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgbG9hZGluZz86IGJvb2xlYW5cbiAgc2hvd05leHRJdGVtc051bT86IGJvb2xlYW5cbiAgcGFnaW5hdGU/OiBudW1iZXJcbiAgb25TaG93TGVzcz86ICgpID0+IHZvaWRcbiAgc2hvd01vcmVMYWJlbD86IHsgbW9yZTogc3RyaW5nOyBsZXNzOiBzdHJpbmcgfVxufVxuXG5mdW5jdGlvbiBTaG93TW9yZUxpc3Q8SXRlbVR5cGUgPSB1bmtub3duPih7XG4gIGl0ZW1zLFxuICByZW5kZXJJdGVtLFxuICBmZXRjaE5leHRQYWdlLFxuICBoYXNOZXh0UGFnZSA9IGZhbHNlLFxuICBsb2FkaW5nID0gZmFsc2UsXG4gIHBhZ2luYXRlID0gNSxcbiAgc2hvd05leHRJdGVtc051bSA9IGZhbHNlLFxuICBvblNob3dMZXNzLFxuICBzaG93TW9yZUxhYmVsID0geyBtb3JlOiBcIlNIT1cgTU9SRVwiLCBsZXNzOiBcIlNIT1cgTEVTU1wiIH0sXG59OiBQcm9wczxJdGVtVHlwZT4pIHtcbiAgY29uc3QgbXlSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpXG4gIGNvbnN0IFtudW1PZlN0b3JpZXMsIHNldE51bU9mU3Rvcmllc10gPSB1c2VTdGF0ZShwYWdpbmF0ZSlcbiAgY29uc3Qgc2hvd0xlc3MgPSBudW1PZlN0b3JpZXMgPj0gaXRlbXMubGVuZ3RoICYmICFoYXNOZXh0UGFnZVxuICBjb25zdCBzaG93UHJvZ3Jlc3MgPSBsb2FkaW5nICYmIGl0ZW1zLmxlbmd0aCA8IG51bU9mU3Rvcmllc1xuXG4gIGNvbnN0IGhhbmRsZVNob3dNb3JlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChzaG93TGVzcykge1xuICAgICAgc2V0TnVtT2ZTdG9yaWVzKHBhZ2luYXRlKVxuICAgICAgbXlSZWY/LmN1cnJlbnQ/LnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgYmVoYXZpb3I6IFwic21vb3RoXCIsXG4gICAgICAgIGJsb2NrOiBcInN0YXJ0XCIsXG4gICAgICAgIGlubGluZTogXCJuZWFyZXN0XCIsXG4gICAgICB9KVxuICAgICAgb25TaG93TGVzcz8uKClcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TnVtT2ZTdG9yaWVzKHByZXYgPT4gcHJldiArIHBhZ2luYXRlKVxuICAgIH1cbiAgfSwgW3Nob3dMZXNzLCBwYWdpbmF0ZSwgb25TaG93TGVzc10pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobnVtT2ZTdG9yaWVzID49IGl0ZW1zLmxlbmd0aCAtIHBhZ2luYXRlICYmIGhhc05leHRQYWdlICYmIGZldGNoTmV4dFBhZ2UpIHtcbiAgICAgIGZldGNoTmV4dFBhZ2UoKVxuICAgIH1cbiAgfSwgW2ZldGNoTmV4dFBhZ2UsIG51bU9mU3RvcmllcywgaXRlbXMsIGhhc05leHRQYWdlLCBwYWdpbmF0ZV0pXG5cbiAgY29uc3QgbmV4dCA9IE1hdGgubWluKHBhZ2luYXRlLCBpdGVtcy5sZW5ndGggLSBudW1PZlN0b3JpZXMpXG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IHJlZj17bXlSZWZ9PlxuICAgICAge2l0ZW1zLmZpbHRlcigoXywgaW5kZXgpID0+IGluZGV4IDwgbnVtT2ZTdG9yaWVzKS5tYXAocmVuZGVySXRlbSl9XG4gICAgICB7c2hvd1Byb2dyZXNzICYmIChcbiAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3NcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cInNob3ctbW9yZS1saXN0LWxvYWRpbmdcIlxuICAgICAgICAgIHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBtYXJnaW46IFwiMCBhdXRvXCIgfX1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgICB7aXRlbXMubGVuZ3RoID4gcGFnaW5hdGUgJiYgIXNob3dQcm9ncmVzcyA/IChcbiAgICAgICAgPFNob3dNb3JlPlxuICAgICAgICAgIDxMaW5rIG9uQ2xpY2s9e2hhbmRsZVNob3dNb3JlfT5cbiAgICAgICAgICAgIHtzaG93TGVzc1xuICAgICAgICAgICAgICA/IHNob3dNb3JlTGFiZWwubGVzc1xuICAgICAgICAgICAgICA6IGAke3Nob3dNb3JlTGFiZWwubW9yZX0ke3Nob3dOZXh0SXRlbXNOdW0gPyBgICgke25leHR9KWAgOiBcIlwifWB9XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L1Nob3dNb3JlPlxuICAgICAgKSA6IG51bGx9XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuZXhwb3J0IHsgU2hvd01vcmVMaXN0IH1cbiJdLCJuYW1lcyI6WyJTaG93TW9yZUxpc3QiLCJTaG93TW9yZSIsInN0eWxlZCIsInRleHRBbGlnbiIsImN1cnNvciIsImRpc3BsYXkiLCJpdGVtcyIsInJlbmRlckl0ZW0iLCJmZXRjaE5leHRQYWdlIiwiaGFzTmV4dFBhZ2UiLCJsb2FkaW5nIiwicGFnaW5hdGUiLCJzaG93TmV4dEl0ZW1zTnVtIiwib25TaG93TGVzcyIsInNob3dNb3JlTGFiZWwiLCJtb3JlIiwibGVzcyIsIm15UmVmIiwidXNlUmVmIiwibnVtT2ZTdG9yaWVzIiwic2V0TnVtT2ZTdG9yaWVzIiwidXNlU3RhdGUiLCJzaG93TGVzcyIsImxlbmd0aCIsInNob3dQcm9ncmVzcyIsImhhbmRsZVNob3dNb3JlIiwidXNlQ2FsbGJhY2siLCJjdXJyZW50Iiwic2Nyb2xsSW50b1ZpZXciLCJiZWhhdmlvciIsImJsb2NrIiwiaW5saW5lIiwicHJldiIsInVzZUVmZmVjdCIsIm5leHQiLCJNYXRoIiwibWluIiwiQm94IiwicmVmIiwiZmlsdGVyIiwiXyIsImluZGV4IiwibWFwIiwiQ2lyY3VsYXJQcm9ncmVzcyIsImRhdGEtdGVzdGlkIiwic3giLCJtYXJnaW4iLCJMaW5rIiwib25DbGljayJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFtRlNBOzs7ZUFBQUE7Ozs7dUJBbkZxRDtzQkFDVjtBQUVwRCxNQUFNQyxXQUFXQyxJQUFBQSxZQUFNLEVBQUMsT0FBTyxJQUFPLENBQUE7UUFDcENDLFdBQVc7UUFDWCxPQUFPO1lBQ0xDLFFBQVE7WUFDUkMsU0FBUztRQUNYO0lBQ0YsQ0FBQTtBQWNBLFNBQVNMLGFBQWlDLEVBQ3hDTSxLQUFLLEVBQ0xDLFVBQVUsRUFDVkMsYUFBYSxFQUNiQyxjQUFjLEtBQUssRUFDbkJDLFVBQVUsS0FBSyxFQUNmQyxXQUFXLENBQUMsRUFDWkMsbUJBQW1CLEtBQUssRUFDeEJDLFVBQVUsRUFDVkMsZ0JBQWdCO0lBQUVDLE1BQU07SUFBYUMsTUFBTTtBQUFZLENBQUMsRUFDeEM7SUFDaEIsTUFBTUMsUUFBUUMsSUFBQUEsYUFBTSxFQUFpQjtJQUNyQyxNQUFNLENBQUNDLGNBQWNDLGdCQUFnQixHQUFHQyxJQUFBQSxlQUFRLEVBQUNWO0lBQ2pELE1BQU1XLFdBQVdILGdCQUFnQmIsTUFBTWlCLE1BQU0sSUFBSSxDQUFDZDtJQUNsRCxNQUFNZSxlQUFlZCxXQUFXSixNQUFNaUIsTUFBTSxHQUFHSjtJQUUvQyxNQUFNTSxpQkFBaUJDLElBQUFBLGtCQUFXLEVBQUM7UUFDakMsSUFBSUosVUFBVTtnQkFFWkw7WUFEQUcsZ0JBQWdCVDtZQUNoQk0sa0JBQUFBLDZCQUFBQSxpQkFBQUEsTUFBT1UsT0FBTyxjQUFkVixxQ0FBQUEsZUFBZ0JXLGNBQWMsQ0FBQztnQkFDN0JDLFVBQVU7Z0JBQ1ZDLE9BQU87Z0JBQ1BDLFFBQVE7WUFDVjtZQUNBbEIsdUJBQUFBLGlDQUFBQTtRQUNGLE9BQU87WUFDTE8sZ0JBQWdCWSxDQUFBQSxPQUFRQSxPQUFPckI7UUFDakM7SUFDRixHQUFHO1FBQUNXO1FBQVVYO1FBQVVFO0tBQVc7SUFFbkNvQixJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSWQsZ0JBQWdCYixNQUFNaUIsTUFBTSxHQUFHWixZQUFZRixlQUFlRCxlQUFlO1lBQzNFQTtRQUNGO0lBQ0YsR0FBRztRQUFDQTtRQUFlVztRQUFjYjtRQUFPRztRQUFhRTtLQUFTO0lBRTlELE1BQU11QixPQUFPQyxLQUFLQyxHQUFHLENBQUN6QixVQUFVTCxNQUFNaUIsTUFBTSxHQUFHSjtJQUUvQyxxQkFDRSxzQkFBQ2tCLFNBQUc7UUFBQ0MsS0FBS3JCOztZQUNQWCxNQUFNaUMsTUFBTSxDQUFDLENBQUNDLEdBQUdDLFFBQVVBLFFBQVF0QixjQUFjdUIsR0FBRyxDQUFDbkM7WUFDckRpQiw4QkFDQyxxQkFBQ21CLHNCQUFnQjtnQkFDZkMsZUFBWTtnQkFDWkMsSUFBSTtvQkFBRXhDLFNBQVM7b0JBQVF5QyxRQUFRO2dCQUFTOztZQUczQ3hDLE1BQU1pQixNQUFNLEdBQUdaLFlBQVksQ0FBQ2EsNkJBQzNCLHFCQUFDdkI7MEJBQ0MsY0FBQSxxQkFBQzhDLFVBQUk7b0JBQUNDLFNBQVN2Qjs4QkFDWkgsV0FDR1IsY0FBY0UsSUFBSSxHQUNsQixDQUFDLEVBQUVGLGNBQWNDLElBQUksQ0FBQyxFQUFFSCxtQkFBbUIsQ0FBQyxFQUFFLEVBQUVzQixLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7aUJBR3BFOzs7QUFHViJ9