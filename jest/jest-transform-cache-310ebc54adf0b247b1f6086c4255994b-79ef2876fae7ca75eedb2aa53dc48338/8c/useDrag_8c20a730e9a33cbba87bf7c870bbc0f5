3672c883f4b2b6ec7c1a50106e708a63
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDrag", {
    enumerable: true,
    get: function() {
        return useDrag;
    }
});
const _invariant = require("@react-dnd/invariant");
const _useCollectedProps = require("../useCollectedProps.js");
const _useOptionalFactory = require("../useOptionalFactory.js");
const _connectors = require("./connectors.js");
const _useDragSourceConnector = require("./useDragSourceConnector.js");
const _useDragSourceMonitor = require("./useDragSourceMonitor.js");
const _useRegisteredDragSource = require("./useRegisteredDragSource.js");
function useDrag(specArg, deps) {
    const spec = (0, _useOptionalFactory.useOptionalFactory)(specArg, deps);
    (0, _invariant.invariant)(!spec.begin, `useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)`);
    const monitor = (0, _useDragSourceMonitor.useDragSourceMonitor)();
    const connector = (0, _useDragSourceConnector.useDragSourceConnector)(spec.options, spec.previewOptions);
    (0, _useRegisteredDragSource.useRegisteredDragSource)(spec, monitor, connector);
    return [
        (0, _useCollectedProps.useCollectedProps)(spec.collect, monitor, connector),
        (0, _connectors.useConnectDragSource)(connector),
        (0, _connectors.useConnectDragPreview)(connector)
    ];
} //# sourceMappingURL=useDrag.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob29rcy91c2VEcmFnL3VzZURyYWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnXG5cbmltcG9ydCB0eXBlIHtcblx0Q29ubmVjdERyYWdQcmV2aWV3LFxuXHRDb25uZWN0RHJhZ1NvdXJjZSxcbn0gZnJvbSAnLi4vLi4vdHlwZXMvaW5kZXguanMnXG5pbXBvcnQgdHlwZSB7IERyYWdTb3VyY2VIb29rU3BlYywgRmFjdG9yeU9ySW5zdGFuY2UgfSBmcm9tICcuLi90eXBlcy5qcydcbmltcG9ydCB7IHVzZUNvbGxlY3RlZFByb3BzIH0gZnJvbSAnLi4vdXNlQ29sbGVjdGVkUHJvcHMuanMnXG5pbXBvcnQgeyB1c2VPcHRpb25hbEZhY3RvcnkgfSBmcm9tICcuLi91c2VPcHRpb25hbEZhY3RvcnkuanMnXG5pbXBvcnQgeyB1c2VDb25uZWN0RHJhZ1ByZXZpZXcsIHVzZUNvbm5lY3REcmFnU291cmNlIH0gZnJvbSAnLi9jb25uZWN0b3JzLmpzJ1xuaW1wb3J0IHsgdXNlRHJhZ1NvdXJjZUNvbm5lY3RvciB9IGZyb20gJy4vdXNlRHJhZ1NvdXJjZUNvbm5lY3Rvci5qcydcbmltcG9ydCB7IHVzZURyYWdTb3VyY2VNb25pdG9yIH0gZnJvbSAnLi91c2VEcmFnU291cmNlTW9uaXRvci5qcydcbmltcG9ydCB7IHVzZVJlZ2lzdGVyZWREcmFnU291cmNlIH0gZnJvbSAnLi91c2VSZWdpc3RlcmVkRHJhZ1NvdXJjZS5qcydcblxuLyoqXG4gKiB1c2VEcmFnU291cmNlIGhvb2tcbiAqIEBwYXJhbSBzb3VyY2VTcGVjIFRoZSBkcmFnIHNvdXJjZSBzcGVjaWZpY2F0aW9uIChvYmplY3Qgb3IgZnVuY3Rpb24sIGZ1bmN0aW9uIHByZWZlcnJlZClcbiAqIEBwYXJhbSBkZXBzIFRoZSBtZW1vaXphdGlvbiBkZXBzIGFycmF5IHRvIHVzZSB3aGVuIGV2YWx1YXRpbmcgc3BlYyBjaGFuZ2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEcmFnPFxuXHREcmFnT2JqZWN0ID0gdW5rbm93bixcblx0RHJvcFJlc3VsdCA9IHVua25vd24sXG5cdENvbGxlY3RlZFByb3BzID0gdW5rbm93bixcbj4oXG5cdHNwZWNBcmc6IEZhY3RvcnlPckluc3RhbmNlPFxuXHRcdERyYWdTb3VyY2VIb29rU3BlYzxEcmFnT2JqZWN0LCBEcm9wUmVzdWx0LCBDb2xsZWN0ZWRQcm9wcz5cblx0Pixcblx0ZGVwcz86IHVua25vd25bXSxcbik6IFtDb2xsZWN0ZWRQcm9wcywgQ29ubmVjdERyYWdTb3VyY2UsIENvbm5lY3REcmFnUHJldmlld10ge1xuXHRjb25zdCBzcGVjID0gdXNlT3B0aW9uYWxGYWN0b3J5KHNwZWNBcmcsIGRlcHMpXG5cdGludmFyaWFudChcblx0XHQhKHNwZWMgYXMgYW55KS5iZWdpbixcblx0XHRgdXNlRHJhZzo6c3BlYy5iZWdpbiB3YXMgZGVwcmVjYXRlZCBpbiB2MTQuIFJlcGxhY2Ugc3BlYy5iZWdpbigpIHdpdGggc3BlYy5pdGVtKCkuIChzZWUgbW9yZSBoZXJlIC0gaHR0cHM6Ly9yZWFjdC1kbmQuZ2l0aHViLmlvL3JlYWN0LWRuZC9kb2NzL2FwaS91c2UtZHJhZylgLFxuXHQpXG5cblx0Y29uc3QgbW9uaXRvciA9IHVzZURyYWdTb3VyY2VNb25pdG9yPERyYWdPYmplY3QsIERyb3BSZXN1bHQ+KClcblx0Y29uc3QgY29ubmVjdG9yID0gdXNlRHJhZ1NvdXJjZUNvbm5lY3RvcihzcGVjLm9wdGlvbnMsIHNwZWMucHJldmlld09wdGlvbnMpXG5cdHVzZVJlZ2lzdGVyZWREcmFnU291cmNlKHNwZWMsIG1vbml0b3IsIGNvbm5lY3RvcilcblxuXHRyZXR1cm4gW1xuXHRcdHVzZUNvbGxlY3RlZFByb3BzKHNwZWMuY29sbGVjdCwgbW9uaXRvciwgY29ubmVjdG9yKSxcblx0XHR1c2VDb25uZWN0RHJhZ1NvdXJjZShjb25uZWN0b3IpLFxuXHRcdHVzZUNvbm5lY3REcmFnUHJldmlldyhjb25uZWN0b3IpLFxuXHRdXG59XG4iXSwibmFtZXMiOlsidXNlRHJhZyIsInNwZWNBcmciLCJkZXBzIiwic3BlYyIsInVzZU9wdGlvbmFsRmFjdG9yeSIsImludmFyaWFudCIsImJlZ2luIiwibW9uaXRvciIsInVzZURyYWdTb3VyY2VNb25pdG9yIiwiY29ubmVjdG9yIiwidXNlRHJhZ1NvdXJjZUNvbm5lY3RvciIsIm9wdGlvbnMiLCJwcmV2aWV3T3B0aW9ucyIsInVzZVJlZ2lzdGVyZWREcmFnU291cmNlIiwidXNlQ29sbGVjdGVkUHJvcHMiLCJjb2xsZWN0IiwidXNlQ29ubmVjdERyYWdTb3VyY2UiLCJ1c2VDb25uZWN0RHJhZ1ByZXZpZXciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQW1CZ0JBOzs7ZUFBQUE7OzsyQkFuQlU7bUNBT1E7b0NBQ0M7NEJBQ3lCO3dDQUNyQjtzQ0FDRjt5Q0FDRztBQU9qQyxTQUFTQSxRQUtmQyxPQUVDLEVBQ0RDLElBQWdCO0lBRWhCLE1BQU1DLE9BQU9DLElBQUFBLHNDQUFrQixFQUFDSCxTQUFTQztJQUN6Q0csSUFBQUEsb0JBQVMsRUFDUixDQUFDRixLQUFjRyxLQUFLLEVBQ3BCLENBQUMsMkpBQTJKLENBQUM7SUFHOUosTUFBTUMsVUFBVUMsSUFBQUEsMENBQW9CO0lBQ3BDLE1BQU1DLFlBQVlDLElBQUFBLDhDQUFzQixFQUFDUCxLQUFLUSxPQUFPLEVBQUVSLEtBQUtTLGNBQWM7SUFDMUVDLElBQUFBLGdEQUF1QixFQUFDVixNQUFNSSxTQUFTRTtJQUV2QyxPQUFPO1FBQ05LLElBQUFBLG9DQUFpQixFQUFDWCxLQUFLWSxPQUFPLEVBQUVSLFNBQVNFO1FBQ3pDTyxJQUFBQSxnQ0FBb0IsRUFBQ1A7UUFDckJRLElBQUFBLGlDQUFxQixFQUFDUjtLQUN0QiJ9