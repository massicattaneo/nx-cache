1b758ec08a9c9ef720e255bb919f5782
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ChatDataProvider: function() {
        return ChatDataProvider;
    },
    useChatDataContext: function() {
        return useChatDataContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _chat = require("@rp/react/common/chat");
const _customerio = require("@rp/react/common/customer-io");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _workflow = require("@rp/react/common/workflow");
const _chat1 = require("@rp/react/tanstack-api/chat");
const _file = require("@rp/react/tanstack-api/file");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _router = require("@rp/react/web/router");
const _getInteractionOrigin = require("./getInteractionOrigin");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const FILES_PARAM = "files";
const SOURCES_PARAM = "source";
const WATCHLIST_PARAM = "watchlist";
const ChatDataContext = /*#__PURE__*/ (0, _react.createContext)(null);
const ChatDataProvider = ({ children, id, onChatCreated, origin, enabledSources })=>{
    var _Object_values_find, _searchParams_get;
    // DATA
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { user } = (0, _clerkreact.useUser)();
    const { hasSomeEntitlement } = (0, _providers.useAccount)();
    const [searchParams, setSearchParams] = (0, _reactrouterdom.useSearchParams)();
    const { state } = (0, _reactrouterdom.useLocation)();
    const context = (0, _react.useRef)(state);
    const hasContext = (0, _hooks.isChatContext)(context.current);
    const isComingFromPromptLib = (0, _react.useRef)(false);
    const isComingFromWorkflow = (0, _react.useRef)(false);
    const { data: chat, isError, isLoading, lastWatchlistId } = (0, _chat1.useChat)(id);
    const { mutateAsync } = (0, _chat1.useCreateChat)();
    // FILTERS: SCOPE
    const scopeParam = (_Object_values_find = Object.values(_chat.chatDatasets).find((dataset)=>dataset.handle === searchParams.get(SOURCES_PARAM))) === null || _Object_values_find === void 0 ? void 0 : _Object_values_find.id;
    const baseScopeWithoutEntitlements = (0, _chat.isDatasetScope)(scopeParam) ? scopeParam : undefined;
    var _chatDatasets_baseScopeWithoutEntitlements_entitlements;
    const baseScope = baseScopeWithoutEntitlements !== undefined && _chat.chatDatasets[baseScopeWithoutEntitlements].entitlements !== undefined && !hasSomeEntitlement((_chatDatasets_baseScopeWithoutEntitlements_entitlements = _chat.chatDatasets[baseScopeWithoutEntitlements].entitlements) !== null && _chatDatasets_baseScopeWithoutEntitlements_entitlements !== void 0 ? _chatDatasets_baseScopeWithoutEntitlements_entitlements : []) ? undefined : baseScopeWithoutEntitlements;
    const [scope, setScope] = (0, _react.useState)(baseScope);
    var _searchParams_get1;
    // FILTERS: WATCHLISTs
    const baseWatchlist = (_searchParams_get1 = searchParams.get(WATCHLIST_PARAM)) !== null && _searchParams_get1 !== void 0 ? _searchParams_get1 : undefined;
    const hasWatchlistContext = (0, _hooks.isChatWatchlistContext)(context.current);
    //WORKFLOWS CONTEXT STATE
    const hasWorkflowContext = (0, _hooks.isChatWorkflowContext)(context.current);
    const [watchlistId, setWatchlistId] = (0, _react.useState)(hasWatchlistContext ? context.current.watchlistIds[0] : baseWatchlist);
    const { isError: isErrorWatchlist } = (0, _watchlist.useWatchlist)(watchlistId);
    const { watchlists } = (0, _watchlist.useWatchlistsToCustomerIO)(watchlistId);
    var _searchParams_get_split;
    // FILTERS: FILES
    const baseFiles = (_searchParams_get_split = (_searchParams_get = searchParams.get(FILES_PARAM)) === null || _searchParams_get === void 0 ? void 0 : _searchParams_get.split(",")) !== null && _searchParams_get_split !== void 0 ? _searchParams_get_split : [];
    const hasFileContext = (0, _hooks.isChatFileContext)(context.current);
    const [filesIds, setFilesIds] = (0, _react.useState)(hasFileContext ? context.current.filesIds : baseFiles);
    const allSelectedFiles = (0, _file.useMultipleFiles)(filesIds);
    const realFileIds = (0, _react.useMemo)(()=>{
        return allSelectedFiles.filter((obj)=>!obj.isError && !obj.isLoading).map((file)=>{
            var _file_data;
            var _file_data_id;
            return (_file_data_id = (_file_data = file.data) === null || _file_data === void 0 ? void 0 : _file_data.id) !== null && _file_data_id !== void 0 ? _file_data_id : "";
        });
    }, [
        allSelectedFiles
    ]);
    const { files } = (0, _file.useFilesToCustomerIO)(filesIds);
    const cIoScope = realFileIds.length > 0 ? "files" : scope !== null && scope !== void 0 ? scope : null;
    // UI STATE
    const hasRestoredChat = (0, _react.useRef)("");
    const [timingsMap, setTimingsMap] = (0, _react.useState)({});
    const [isAuditMode, setIsAuditMode] = (0, _react.useState)(true);
    const [followUpMap, setFollowUpMap] = (0, _react.useState)({});
    const { addInteraction, removeLastInteraction } = (0, _chat1.useOptimisticChat)();
    const [currentInteraction, setCurrentInteraction] = (0, _react.useState)(undefined);
    const removeFollowUpFromInteraction = (0, _react.useCallback)((interactionId)=>{
        setFollowUpMap((prev)=>_object_spread_props(_object_spread({}, prev), {
                [interactionId]: undefined
            }));
    }, []);
    // UTILS
    const setUrlParams = (paramName, value)=>{
        if (id) {
            return;
        }
        setSearchParams((prev)=>{
            value === undefined ? prev.delete(paramName) : prev.set(paramName, value);
            return prev;
        }, {
            replace: true
        });
    };
    const resetChatState = (0, _react.useCallback)(({ withNavigation = true, resetWatchlistId = true } = {})=>{
        setIsAuditMode(true);
        setScope(undefined);
        hasRestoredChat.current = "";
        context.current = null;
        if (withNavigation) {
            navigate(_router.CHAT_ROUTE, {
                replace: true
            });
        }
        setCurrentInteraction(undefined);
        setFilesIds([]);
        if (resetWatchlistId) {
            setWatchlistId(undefined);
        }
        setTimingsMap({});
        setFollowUpMap({});
        isComingFromPromptLib.current = false;
        isComingFromWorkflow.current = false;
    }, [
        navigate
    ]);
    const addPrompt = (0, _react.useCallback)(async ({ prompt, customTitle, replaceState = false, clickedPrompt, defaultMessage = false, customerIoScope = cIoScope, followUpSuggestionIndex, entities, interactionType, displayedMessage, watchlistId, forceNewChatId, workflow, watchlistInfo })=>{
        var _chat_interactions__origin, _chat_interactions_, _chat_interactions, _context_current;
        var _chat_interactions_length;
        const index = (_chat_interactions_length = chat === null || chat === void 0 ? void 0 : chat.interactions.length) !== null && _chat_interactions_length !== void 0 ? _chat_interactions_length : 0;
        const iteration = currentInteraction !== undefined && currentInteraction.stopped && currentInteraction.userInput === prompt ? currentInteraction.iteration + 1 : 0;
        const userInteraction = "user_message";
        const defaultInteractionType = defaultMessage ? "empty_message" : userInteraction;
        var _chat_interactions__origin_type;
        const finalOrigin = origin !== "chat" ? origin : (0, _getInteractionOrigin.getInteractionOrigin)(context.current, (_chat_interactions__origin_type = chat === null || chat === void 0 ? void 0 : (_chat_interactions = chat.interactions) === null || _chat_interactions === void 0 ? void 0 : (_chat_interactions_ = _chat_interactions[0]) === null || _chat_interactions_ === void 0 ? void 0 : (_chat_interactions__origin = _chat_interactions_.origin) === null || _chat_interactions__origin === void 0 ? void 0 : _chat_interactions__origin.type) !== null && _chat_interactions__origin_type !== void 0 ? _chat_interactions__origin_type : defaultInteractionType);
        setCurrentInteraction({
            userInput: prompt,
            error: false,
            stopped: false,
            edit: false,
            customTitle,
            iteration,
            index: chat ? chat.interactions.length : 0,
            interactionType: interactionType !== null && interactionType !== void 0 ? interactionType : defaultInteractionType,
            entities,
            workflow: workflow !== null && workflow !== void 0 ? workflow : (_context_current = context.current) === null || _context_current === void 0 ? void 0 : _context_current.workflow,
            displayedMessage
        });
        let chatId = forceNewChatId ? null : id;
        if (!chatId) {
            const data = await mutateAsync({
                name: customTitle !== null && customTitle !== void 0 ? customTitle : prompt,
                scopeWatchlistId: watchlistId
            });
            chatId = data.id;
            onChatCreated === null || onChatCreated === void 0 ? void 0 : onChatCreated(data.id, replaceState || hasWatchlistContext || hasFileContext);
        }
        var _clickedPrompt_relatedTopics, _clickedPrompt_icon_label, _watchlistInfo_clickedSuggestedPromptText, _watchlistInfo_suggestedPromptClassification, _watchlistInfo_promptContextLevel, _watchlistInfo_promptCategory, _watchlistInfo_promptCompanyType, _watchlistInfo_dataViewAtClick;
        _customerio.chatCustomerIo.inputPromptSubmit({
            chatId,
            origin: finalOrigin,
            index,
            scope: customerIoScope,
            promptTopics: (_clickedPrompt_relatedTopics = clickedPrompt === null || clickedPrompt === void 0 ? void 0 : clickedPrompt.relatedTopics) !== null && _clickedPrompt_relatedTopics !== void 0 ? _clickedPrompt_relatedTopics : null,
            promptTask: (_clickedPrompt_icon_label = clickedPrompt === null || clickedPrompt === void 0 ? void 0 : clickedPrompt.icon.label) !== null && _clickedPrompt_icon_label !== void 0 ? _clickedPrompt_icon_label : null,
            files,
            watchlists,
            followUpSuggestionIndex: followUpSuggestionIndex !== null && followUpSuggestionIndex !== void 0 ? followUpSuggestionIndex : null,
            watchlistPrompt: {
                clickedSuggestedPromptText: (_watchlistInfo_clickedSuggestedPromptText = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.clickedSuggestedPromptText) !== null && _watchlistInfo_clickedSuggestedPromptText !== void 0 ? _watchlistInfo_clickedSuggestedPromptText : null,
                suggestedPromptClassification: (_watchlistInfo_suggestedPromptClassification = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.suggestedPromptClassification) !== null && _watchlistInfo_suggestedPromptClassification !== void 0 ? _watchlistInfo_suggestedPromptClassification : null,
                promptContextLevel: (_watchlistInfo_promptContextLevel = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.promptContextLevel) !== null && _watchlistInfo_promptContextLevel !== void 0 ? _watchlistInfo_promptContextLevel : null,
                promptCategory: (_watchlistInfo_promptCategory = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.promptCategory) !== null && _watchlistInfo_promptCategory !== void 0 ? _watchlistInfo_promptCategory : null,
                promptCompanyType: (_watchlistInfo_promptCompanyType = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.promptCompanyType) !== null && _watchlistInfo_promptCompanyType !== void 0 ? _watchlistInfo_promptCompanyType : null,
                dataViewAtClick: (_watchlistInfo_dataViewAtClick = watchlistInfo === null || watchlistInfo === void 0 ? void 0 : watchlistInfo.dataViewAtClick) !== null && _watchlistInfo_dataViewAtClick !== void 0 ? _watchlistInfo_dataViewAtClick : null
            }
        });
    }, [
        cIoScope,
        chat,
        currentInteraction,
        origin,
        id,
        files,
        watchlists,
        mutateAsync,
        onChatCreated,
        hasWatchlistContext,
        hasFileContext
    ]);
    const addResponse = (0, _react.useCallback)((interactionId, data)=>{
        if (!id) {
            return;
        }
        setCurrentInteraction(undefined);
        var _currentInteraction_displayedMessage, _ref, _data_responseBlock;
        addInteraction(id, {
            auditTraces: data.auditTraces,
            inputMessage: (_ref = (_currentInteraction_displayedMessage = currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.displayedMessage) !== null && _currentInteraction_displayedMessage !== void 0 ? _currentInteraction_displayedMessage : currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.userInput) !== null && _ref !== void 0 ? _ref : "",
            interactionTimestamp: interactionId,
            responseBlock: (_data_responseBlock = data.responseBlock) !== null && _data_responseBlock !== void 0 ? _data_responseBlock : {
                type: "TEXT",
                value: data.response
            },
            responseBlocks: data.responseBlocks.filter((block)=>block.type === "TEXT" || block.type === "ENGINE"),
            origin: {
                type: data.interactionType
            },
            scope: scope,
            scopeDocuments: realFileIds.map((fileId)=>({
                    id: fileId,
                    fileName: "",
                    uploadTs: "",
                    rawSize: 0
                })),
            scopeWatchlistId: watchlistId,
            dateCreated: "",
            lastUpdated: "",
            originSources: data.originSources,
            originSourcesMetadata: data.metadata,
            auditBlocks: data.auditBlocks
        });
        setTimingsMap((prev)=>_object_spread_props(_object_spread({}, prev), {
                [interactionId]: _object_spread_props(_object_spread({}, data.timings), {
                    profiling: data.profiling
                })
            }));
        setFollowUpMap((prev)=>_object_spread_props(_object_spread({}, prev), {
                [interactionId]: data.followUpQuestions
            }));
    }, [
        id,
        addInteraction,
        currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.displayedMessage,
        currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.userInput,
        scope,
        realFileIds,
        watchlistId
    ]);
    const regenerateLastResponse = (0, _react.useCallback)(({ isCurrentInteraction = false })=>{
        if (!id) {
            return;
        }
        if (isCurrentInteraction) {
            setCurrentInteraction((prev)=>{
                var _currentInteraction_index;
                _customerio.chatCustomerIo.regenerateLastQuestionClick({
                    chatId: id,
                    index: (_currentInteraction_index = currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index) !== null && _currentInteraction_index !== void 0 ? _currentInteraction_index : 0,
                    scope: realFileIds.length > 0 ? "files" : scope !== null && scope !== void 0 ? scope : null,
                    files,
                    watchlists
                });
                return prev === undefined ? prev : _object_spread_props(_object_spread({}, prev), {
                    stopped: false,
                    error: false,
                    edit: false,
                    iteration: prev.iteration + 1
                });
            });
            return;
        }
        const regeneratedInteraction = removeLastInteraction(id);
        var _regeneratedInteraction_inputMessage, _regeneratedInteraction_origin_type;
        setCurrentInteraction({
            userInput: (_regeneratedInteraction_inputMessage = regeneratedInteraction === null || regeneratedInteraction === void 0 ? void 0 : regeneratedInteraction.inputMessage) !== null && _regeneratedInteraction_inputMessage !== void 0 ? _regeneratedInteraction_inputMessage : "Error",
            stopped: false,
            error: false,
            edit: true,
            iteration: 0,
            index: chat ? chat.interactions.length - 1 : 0,
            interactionType: (_regeneratedInteraction_origin_type = regeneratedInteraction === null || regeneratedInteraction === void 0 ? void 0 : regeneratedInteraction.origin.type) !== null && _regeneratedInteraction_origin_type !== void 0 ? _regeneratedInteraction_origin_type : "user_message"
        });
        var _currentInteraction_index;
        _customerio.chatCustomerIo.regenerateLastQuestionClick({
            chatId: id,
            index: (_currentInteraction_index = currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index) !== null && _currentInteraction_index !== void 0 ? _currentInteraction_index : 0,
            scope: realFileIds.length > 0 ? "files" : scope !== null && scope !== void 0 ? scope : null,
            files,
            watchlists
        });
    }, [
        id,
        chat,
        removeLastInteraction,
        currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index,
        realFileIds.length,
        scope,
        files,
        watchlists
    ]);
    const editLastQuestion = (0, _react.useCallback)((prompt)=>{
        if (!id) {
            return;
        }
        var _currentInteraction_index;
        _customerio.chatCustomerIo.editLastQuestionClick({
            chatId: id,
            index: (_currentInteraction_index = currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index) !== null && _currentInteraction_index !== void 0 ? _currentInteraction_index : 0,
            scope: realFileIds.length > 0 ? "files" : scope !== null && scope !== void 0 ? scope : null,
            files,
            watchlists
        });
        removeLastInteraction(id);
        setCurrentInteraction({
            userInput: prompt,
            stopped: false,
            error: false,
            edit: true,
            iteration: 0,
            index: chat ? chat.interactions.length - 1 : 0,
            // If the user edits the prompt it can't be longer default message
            interactionType: "user_message"
        });
    }, [
        id,
        currentInteraction === null || currentInteraction === void 0 ? void 0 : currentInteraction.index,
        realFileIds.length,
        scope,
        files,
        watchlists,
        removeLastInteraction,
        chat
    ]);
    // EFFECTS
    (0, _react.useEffect)(()=>{
        if (isErrorWatchlist) {
            setWatchlistId(undefined);
        }
    }, [
        isErrorWatchlist
    ]);
    (0, _react.useEffect)(()=>{
        if (chat && chat.interactions.length > 0 && hasRestoredChat.current !== chat.id) {
            hasRestoredChat.current = chat.id;
            const lastInteraction = chat.interactions[chat.interactions.length - 1];
            if ((0, _chat1.isUserInteraction)(lastInteraction)) {
                const scope = lastInteraction.scope;
                var _chatDatasets_scope_entitlements;
                const shouldIgnoreScope = scope !== undefined && _chat.chatDatasets[scope].entitlements !== undefined && (!enabledSources[scope] || !hasSomeEntitlement((_chatDatasets_scope_entitlements = _chat.chatDatasets[scope].entitlements) !== null && _chatDatasets_scope_entitlements !== void 0 ? _chatDatasets_scope_entitlements : []));
                setScope(shouldIgnoreScope ? undefined : lastInteraction.scope);
                setFilesIds((prev)=>{
                    var _lastInteraction_scopeDocuments;
                    var _lastInteraction_scopeDocuments_map;
                    return (_lastInteraction_scopeDocuments_map = (_lastInteraction_scopeDocuments = lastInteraction.scopeDocuments) === null || _lastInteraction_scopeDocuments === void 0 ? void 0 : _lastInteraction_scopeDocuments.map((file)=>file.id)) !== null && _lastInteraction_scopeDocuments_map !== void 0 ? _lastInteraction_scopeDocuments_map : prev;
                });
                setWatchlistId((prev)=>{
                    var _lastInteraction_scopeWatchlistId;
                    return (_lastInteraction_scopeWatchlistId = lastInteraction.scopeWatchlistId) !== null && _lastInteraction_scopeWatchlistId !== void 0 ? _lastInteraction_scopeWatchlistId : prev;
                });
            }
        }
    }, [
        chat,
        enabledSources,
        hasSomeEntitlement,
        searchParams
    ]);
    (0, _react.useEffect)(()=>{
        let clickedPrompt;
        let customerIoScope;
        if (context.current && (0, _hooks.isPromptLibraryContext)(context.current)) {
            clickedPrompt = context.current.value;
            if (context.current.value.prompt && !scope) {
                setScope(context.current.value.scope);
                customerIoScope = context.current.value.scope;
            }
            addPrompt({
                prompt: state.value.prompt,
                customTitle: state.value.label,
                replaceState: true,
                clickedPrompt,
                customerIoScope
            });
            isComingFromPromptLib.current = true;
            context.current = null;
        }
    }, [
        addPrompt,
        navigate,
        scope,
        state
    ]);
    (0, _react.useEffect)(()=>{
        let customerIoScope;
        if (context.current && (0, _hooks.isHomeChatContext)(context.current)) {
            setWatchlistId(context.current.value.watchlistId);
            setFilesIds(context.current.value.fileIds);
            setScope(context.current.value.scope);
            // if (context.current.value.prompt && !scope) {
            //   setScope(context.current.value.scope)
            //   customerIoScope = context.current.value.scope
            // }
            addPrompt({
                prompt: state.value.prompt,
                customTitle: state.value.label,
                replaceState: true,
                customerIoScope
            });
            isComingFromPromptLib.current = true;
            context.current = null;
        }
    }, [
        addPrompt,
        navigate,
        scope,
        state
    ]);
    (0, _react.useEffect)(()=>{
        if (context.current && hasWorkflowContext && (0, _hooks.isChatWorkflowContext)(context.current)) {
            addPrompt((0, _workflow.generatePromptFromWorkflow)(context.current.workflow));
            isComingFromWorkflow.current = true;
            context.current = null;
        }
    }, [
        addPrompt,
        hasWorkflowContext
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ChatDataContext.Provider, {
        value: {
            chat: {
                id,
                savedChat: chat,
                isLoading,
                isError
            },
            scope: {
                scope,
                setScope
            },
            watchlist: {
                watchlistId: watchlistId !== null && watchlistId !== void 0 ? watchlistId : lastWatchlistId,
                setWatchlistId
            },
            files: {
                fileIds: realFileIds,
                setFileIds: setFilesIds
            },
            ui: {
                context,
                currentInteraction,
                setCurrentInteraction,
                isAuditMode,
                setIsAuditMode,
                followUpMap,
                removeFollowUpFromInteraction,
                timingsMap,
                hasContext,
                hasFilesContext: hasFileContext,
                hasWatchlistsContext: hasWatchlistContext,
                isComingFromPromptLibrary: isComingFromPromptLib.current,
                isComingFromWorkflow: isComingFromWorkflow.current,
                isEditable: (user === null || user === void 0 ? void 0 : user.id) === (chat === null || chat === void 0 ? void 0 : chat.userId)
            },
            mutations: {
                addPrompt,
                addResponse,
                editLastQuestion,
                regenerateLastResponse
            },
            helpers: {
                resetChatState,
                setUrlParams
            }
        },
        children: children
    });
};
const useChatDataContext = ()=>{
    const context = (0, _react.useContext)(ChatDataContext);
    if (!context) {
        throw new Error("useChatDataContext should be used within a ChatDataProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,