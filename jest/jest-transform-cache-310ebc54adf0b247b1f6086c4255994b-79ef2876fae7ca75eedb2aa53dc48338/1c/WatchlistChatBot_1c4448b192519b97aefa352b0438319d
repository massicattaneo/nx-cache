f622da263975cecdd134699d55c8c3a1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistChatBot", {
    enumerable: true,
    get: function() {
        return WatchlistChatBot;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _assets = require("@rp/react/common/assets");
const _chat = require("@rp/react/web/chat");
const _core = require("@rp/react/web/mui/core");
const _WatchlistChatBotDefaultSuggestions = require("./WatchlistChatBotDefaultSuggestions");
const WatchlistChatBot = ({ workflows, onSuggestionClick, currentInteraction, userInitials, watchlist, selectedEntity, showAllPrompts, setShowAllPrompts, offsetY = 0 })=>{
    if (watchlist.isClientWatchlist || watchlist.items.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
            sx: {
                pt: 2,
                px: 2,
                width: "100%",
                maxWidth: 700,
                mx: "auto"
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_assets.BigdataChatAvatar, {
                            height: 28,
                            width: 28
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            variant: "body2",
                            color: "text.secondary",
                            children: "Bigdata"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    sx: {
                        fontSize: 18,
                        mt: 2
                    },
                    children: "Hello! I can generate a summary with the latest news and updates on your watchlist, but you'll need to add some Companies and ETFs to it first."
                })
            ]
        });
    }
    if (currentInteraction) {
        var _currentInteraction_displayedMessage;
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
            sx: {
                pt: 2,
                width: "100%",
                maxWidth: 700,
                mx: "auto"
            },
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat.UserInput, {
                    variant: "mobile",
                    userInitials: userInitials,
                    disableScroll: true,
                    children: (_currentInteraction_displayedMessage = currentInteraction.displayedMessage) !== null && _currentInteraction_displayedMessage !== void 0 ? _currentInteraction_displayedMessage : currentInteraction.userInput
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat.LoadingResponseSkeleton, {
                    variant: "mobile"
                })
            ]
        });
    }
    const displayEntityName = (selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.name) ? `${selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.name} ${(selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.metadata1) ? `(${selectedEntity === null || selectedEntity === void 0 ? void 0 : selectedEntity.metadata1})` : ""}` : watchlist.name;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistChatBotDefaultSuggestions.WatchlistChatBotDefaultSuggestions, {
        selectedEntity: selectedEntity,
        workflows: workflows,
        showAllPrompts: showAllPrompts,
        setShowAllPrompts: setShowAllPrompts,
        offsetY: offsetY,
        onSuggestionClick: onSuggestionClick,
        displayName: displayEntityName
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RDaGF0L1dhdGNobGlzdENoYXRCb3QvV2F0Y2hsaXN0Q2hhdEJvdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlzcGF0Y2gsIFNldFN0YXRlQWN0aW9uIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENxc0l0ZW0sIFdhdGNobGlzdCB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBCaWdkYXRhQ2hhdEF2YXRhciB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2Fzc2V0c1wiXG5pbXBvcnQgeyBXYXRjaGxpc3RTdWdnZXN0aW9uIH0gZnJvbSBcIkBycC9yZWFjdC9jb21tb24vd2F0Y2hsaXN0c1wiXG5pbXBvcnQgeyBXb3JrZmxvd0Rlc2NyaXB0aW9uUmVzdWx0IH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvd29ya2Zsb3dcIlxuaW1wb3J0IHsgTG9hZGluZ1Jlc3BvbnNlU2tlbGV0b24sIFVzZXJJbnB1dCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NoYXRcIlxuaW1wb3J0IHsgQm94LCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0Q2hhdEJvdERlZmF1bHRTdWdnZXN0aW9ucyB9IGZyb20gXCIuL1dhdGNobGlzdENoYXRCb3REZWZhdWx0U3VnZ2VzdGlvbnNcIlxuXG50eXBlIFByb3BzID0ge1xuICB3b3JrZmxvd3M6IEFycmF5PFdvcmtmbG93RGVzY3JpcHRpb25SZXN1bHQ+XG4gIG9uU3VnZ2VzdGlvbkNsaWNrOiAoc3VnZ2VzdGlvbjogV2F0Y2hsaXN0U3VnZ2VzdGlvbikgPT4gdm9pZFxuICBjdXJyZW50SW50ZXJhY3Rpb24/OiB7XG4gICAgdXNlcklucHV0OiBzdHJpbmdcbiAgICBkaXNwbGF5ZWRNZXNzYWdlPzogc3RyaW5nXG4gICAgZXJyb3I6IGJvb2xlYW5cbiAgICBzdG9wcGVkOiBib29sZWFuXG4gICAgZWRpdDogYm9vbGVhblxuICB9XG4gIHVzZXJJbml0aWFsczogc3RyaW5nXG4gIHdhdGNobGlzdDogV2F0Y2hsaXN0XG4gIHNlbGVjdGVkRW50aXR5OiBDcXNJdGVtIHwgbnVsbFxuICBzaG93QWxsUHJvbXB0cz86IGJvb2xlYW5cbiAgc2V0U2hvd0FsbFByb21wdHM/OiBEaXNwYXRjaDxTZXRTdGF0ZUFjdGlvbjxib29sZWFuPj5cbiAgb2Zmc2V0WT86IG51bWJlclxufVxuXG5leHBvcnQgY29uc3QgV2F0Y2hsaXN0Q2hhdEJvdCA9ICh7XG4gIHdvcmtmbG93cyxcbiAgb25TdWdnZXN0aW9uQ2xpY2ssXG4gIGN1cnJlbnRJbnRlcmFjdGlvbixcbiAgdXNlckluaXRpYWxzLFxuICB3YXRjaGxpc3QsXG4gIHNlbGVjdGVkRW50aXR5LFxuICBzaG93QWxsUHJvbXB0cyxcbiAgc2V0U2hvd0FsbFByb21wdHMsXG4gIG9mZnNldFkgPSAwLFxufTogUHJvcHMpID0+IHtcbiAgaWYgKHdhdGNobGlzdC5pc0NsaWVudFdhdGNobGlzdCB8fCB3YXRjaGxpc3QuaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3hcbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBwdDogMixcbiAgICAgICAgICBweDogMixcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgbWF4V2lkdGg6IDcwMCxcbiAgICAgICAgICBteDogXCJhdXRvXCIsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogXCJmbGV4XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIGdhcDogMSB9fT5cbiAgICAgICAgICA8QmlnZGF0YUNoYXRBdmF0YXIgaGVpZ2h0PXsyOH0gd2lkdGg9ezI4fSAvPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIj5cbiAgICAgICAgICAgIEJpZ2RhdGFcbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgIDwvQm94PlxuICAgICAgICA8VHlwb2dyYXBoeSBzeD17eyBmb250U2l6ZTogMTgsIG10OiAyIH19PlxuICAgICAgICAgIEhlbGxvISBJIGNhbiBnZW5lcmF0ZSBhIHN1bW1hcnkgd2l0aCB0aGUgbGF0ZXN0IG5ld3MgYW5kIHVwZGF0ZXMgb24geW91ciB3YXRjaGxpc3QsIGJ1dFxuICAgICAgICAgIHlvdSdsbCBuZWVkIHRvIGFkZCBzb21lIENvbXBhbmllcyBhbmQgRVRGcyB0byBpdCBmaXJzdC5cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9XG4gIGlmIChjdXJyZW50SW50ZXJhY3Rpb24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveFxuICAgICAgICBzeD17e1xuICAgICAgICAgIHB0OiAyLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBtYXhXaWR0aDogNzAwLFxuICAgICAgICAgIG14OiBcImF1dG9cIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPFVzZXJJbnB1dCB2YXJpYW50PVwibW9iaWxlXCIgdXNlckluaXRpYWxzPXt1c2VySW5pdGlhbHN9IGRpc2FibGVTY3JvbGw+XG4gICAgICAgICAge2N1cnJlbnRJbnRlcmFjdGlvbi5kaXNwbGF5ZWRNZXNzYWdlID8/IGN1cnJlbnRJbnRlcmFjdGlvbi51c2VySW5wdXR9XG4gICAgICAgIDwvVXNlcklucHV0PlxuICAgICAgICA8TG9hZGluZ1Jlc3BvbnNlU2tlbGV0b24gdmFyaWFudD1cIm1vYmlsZVwiIC8+XG4gICAgICA8L0JveD5cbiAgICApXG4gIH1cblxuICBjb25zdCBkaXNwbGF5RW50aXR5TmFtZSA9IHNlbGVjdGVkRW50aXR5Py5uYW1lXG4gICAgPyBgJHtzZWxlY3RlZEVudGl0eT8ubmFtZX0gJHtzZWxlY3RlZEVudGl0eT8ubWV0YWRhdGExID8gYCgke3NlbGVjdGVkRW50aXR5Py5tZXRhZGF0YTF9KWAgOiBcIlwifWBcbiAgICA6IHdhdGNobGlzdC5uYW1lXG5cbiAgcmV0dXJuIChcbiAgICA8V2F0Y2hsaXN0Q2hhdEJvdERlZmF1bHRTdWdnZXN0aW9uc1xuICAgICAgc2VsZWN0ZWRFbnRpdHk9e3NlbGVjdGVkRW50aXR5fVxuICAgICAgd29ya2Zsb3dzPXt3b3JrZmxvd3N9XG4gICAgICBzaG93QWxsUHJvbXB0cz17c2hvd0FsbFByb21wdHN9XG4gICAgICBzZXRTaG93QWxsUHJvbXB0cz17c2V0U2hvd0FsbFByb21wdHN9XG4gICAgICBvZmZzZXRZPXtvZmZzZXRZfVxuICAgICAgb25TdWdnZXN0aW9uQ2xpY2s9e29uU3VnZ2VzdGlvbkNsaWNrfVxuICAgICAgZGlzcGxheU5hbWU9e2Rpc3BsYXlFbnRpdHlOYW1lfVxuICAgIC8+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJXYXRjaGxpc3RDaGF0Qm90Iiwid29ya2Zsb3dzIiwib25TdWdnZXN0aW9uQ2xpY2siLCJjdXJyZW50SW50ZXJhY3Rpb24iLCJ1c2VySW5pdGlhbHMiLCJ3YXRjaGxpc3QiLCJzZWxlY3RlZEVudGl0eSIsInNob3dBbGxQcm9tcHRzIiwic2V0U2hvd0FsbFByb21wdHMiLCJvZmZzZXRZIiwiaXNDbGllbnRXYXRjaGxpc3QiLCJpdGVtcyIsImxlbmd0aCIsIkJveCIsInN4IiwicHQiLCJweCIsIndpZHRoIiwibWF4V2lkdGgiLCJteCIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwiZ2FwIiwiQmlnZGF0YUNoYXRBdmF0YXIiLCJoZWlnaHQiLCJUeXBvZ3JhcGh5IiwidmFyaWFudCIsImNvbG9yIiwiZm9udFNpemUiLCJtdCIsIlVzZXJJbnB1dCIsImRpc2FibGVTY3JvbGwiLCJkaXNwbGF5ZWRNZXNzYWdlIiwidXNlcklucHV0IiwiTG9hZGluZ1Jlc3BvbnNlU2tlbGV0b24iLCJkaXNwbGF5RW50aXR5TmFtZSIsIm5hbWUiLCJtZXRhZGF0YTEiLCJXYXRjaGxpc3RDaGF0Qm90RGVmYXVsdFN1Z2dlc3Rpb25zIiwiZGlzcGxheU5hbWUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBMkJhQTs7O2VBQUFBOzs7O3dCQXpCcUI7c0JBR2lCO3NCQUNuQjtvREFDbUI7QUFvQjVDLE1BQU1BLG1CQUFtQixDQUFDLEVBQy9CQyxTQUFTLEVBQ1RDLGlCQUFpQixFQUNqQkMsa0JBQWtCLEVBQ2xCQyxZQUFZLEVBQ1pDLFNBQVMsRUFDVEMsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLGlCQUFpQixFQUNqQkMsVUFBVSxDQUFDLEVBQ0w7SUFDTixJQUFJSixVQUFVSyxpQkFBaUIsSUFBSUwsVUFBVU0sS0FBSyxDQUFDQyxNQUFNLEtBQUssR0FBRztRQUMvRCxxQkFDRSxzQkFBQ0MsU0FBRztZQUNGQyxJQUFJO2dCQUNGQyxJQUFJO2dCQUNKQyxJQUFJO2dCQUNKQyxPQUFPO2dCQUNQQyxVQUFVO2dCQUNWQyxJQUFJO1lBQ047OzhCQUVBLHNCQUFDTixTQUFHO29CQUFDQyxJQUFJO3dCQUFFTSxTQUFTO3dCQUFRQyxZQUFZO3dCQUFVQyxLQUFLO29CQUFFOztzQ0FDdkQscUJBQUNDLHlCQUFpQjs0QkFBQ0MsUUFBUTs0QkFBSVAsT0FBTzs7c0NBQ3RDLHFCQUFDUSxnQkFBVTs0QkFBQ0MsU0FBUTs0QkFBUUMsT0FBTTtzQ0FBaUI7Ozs7OEJBSXJELHFCQUFDRixnQkFBVTtvQkFBQ1gsSUFBSTt3QkFBRWMsVUFBVTt3QkFBSUMsSUFBSTtvQkFBRTs4QkFBRzs7OztJQU0vQztJQUNBLElBQUkxQixvQkFBb0I7WUFXZkE7UUFWUCxxQkFDRSxzQkFBQ1UsU0FBRztZQUNGQyxJQUFJO2dCQUNGQyxJQUFJO2dCQUNKRSxPQUFPO2dCQUNQQyxVQUFVO2dCQUNWQyxJQUFJO1lBQ047OzhCQUVBLHFCQUFDVyxlQUFTO29CQUFDSixTQUFRO29CQUFTdEIsY0FBY0E7b0JBQWMyQixhQUFhOzhCQUNsRTVCLENBQUFBLHVDQUFBQSxtQkFBbUI2QixnQkFBZ0IsY0FBbkM3QixrREFBQUEsdUNBQXVDQSxtQkFBbUI4QixTQUFTOzs4QkFFdEUscUJBQUNDLDZCQUF1QjtvQkFBQ1IsU0FBUTs7OztJQUd2QztJQUVBLE1BQU1TLG9CQUFvQjdCLENBQUFBLDJCQUFBQSxxQ0FBQUEsZUFBZ0I4QixJQUFJLElBQzFDLENBQUMsRUFBRTlCLDJCQUFBQSxxQ0FBQUEsZUFBZ0I4QixJQUFJLENBQUMsQ0FBQyxFQUFFOUIsQ0FBQUEsMkJBQUFBLHFDQUFBQSxlQUFnQitCLFNBQVMsSUFBRyxDQUFDLENBQUMsRUFBRS9CLDJCQUFBQSxxQ0FBQUEsZUFBZ0IrQixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQzlGaEMsVUFBVStCLElBQUk7SUFFbEIscUJBQ0UscUJBQUNFLHNFQUFrQztRQUNqQ2hDLGdCQUFnQkE7UUFDaEJMLFdBQVdBO1FBQ1hNLGdCQUFnQkE7UUFDaEJDLG1CQUFtQkE7UUFDbkJDLFNBQVNBO1FBQ1RQLG1CQUFtQkE7UUFDbkJxQyxhQUFhSjs7QUFHbkIifQ==