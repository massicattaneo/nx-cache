15209c9ecbffc0904aa4ef713b92f819
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/browser.ts
var browser_exports = {};
__export(browser_exports, {
    inBrowser: ()=>inBrowser,
    isBrowserOnline: ()=>isBrowserOnline,
    isValidBrowser: ()=>isValidBrowser,
    isValidBrowserOnline: ()=>isValidBrowserOnline,
    userAgentIsRobot: ()=>userAgentIsRobot
});
module.exports = __toCommonJS(browser_exports);
function inBrowser() {
    return typeof window !== "undefined";
}
var botAgents = [
    "bot",
    "spider",
    "crawl",
    "APIs-Google",
    "AdsBot",
    "Googlebot",
    "mediapartners",
    "Google Favicon",
    "FeedFetcher",
    "Google-Read-Aloud",
    "DuplexWeb-Google",
    "googleweblight",
    "bing",
    "yandex",
    "baidu",
    "duckduck",
    "yahoo",
    "ecosia",
    "ia_archiver",
    "facebook",
    "instagram",
    "pinterest",
    "reddit",
    "slack",
    "twitter",
    "whatsapp",
    "youtube",
    "semrush"
];
var botAgentRegex = new RegExp(botAgents.join("|"), "i");
function userAgentIsRobot(userAgent) {
    return !userAgent ? false : botAgentRegex.test(userAgent);
}
function isValidBrowser() {
    var _window;
    const navigator = inBrowser() ? (_window = window) === null || _window === void 0 ? void 0 : _window.navigator : null;
    if (!navigator) {
        return false;
    }
    return !userAgentIsRobot(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) && !(navigator === null || navigator === void 0 ? void 0 : navigator.webdriver);
}
function isBrowserOnline() {
    var _window, _navigator_connection, _navigator_connection1;
    const navigator = inBrowser() ? (_window = window) === null || _window === void 0 ? void 0 : _window.navigator : null;
    if (!navigator) {
        return false;
    }
    const isNavigatorOnline = navigator === null || navigator === void 0 ? void 0 : navigator.onLine;
    const isExperimentalConnectionOnline = (navigator === null || navigator === void 0 ? void 0 : (_navigator_connection = navigator.connection) === null || _navigator_connection === void 0 ? void 0 : _navigator_connection.rtt) !== 0 && (navigator === null || navigator === void 0 ? void 0 : (_navigator_connection1 = navigator.connection) === null || _navigator_connection1 === void 0 ? void 0 : _navigator_connection1.downlink) !== 0;
    return isExperimentalConnectionOnline && isNavigatorOnline;
}
function isValidBrowserOnline() {
    return isBrowserOnline() && isValidBrowser();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    inBrowser,
    isBrowserOnline,
    isValidBrowser,
    isValidBrowserOnline,
    userAgentIsRobot
}); //# sourceMappingURL=browser.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9icm93c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIHRoZSB3aW5kb3cgb2JqZWN0IGlzIGRlZmluZWQuIFlvdSBjYW4gYWxzbyB1c2UgdGhpcyB0byBjaGVjayBpZiBzb21ldGhpbmcgaXMgaGFwcGVuaW5nIG9uIHRoZSBjbGllbnQgc2lkZS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5Ccm93c2VyKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmNvbnN0IGJvdEFnZW50cyA9IFtcbiAgJ2JvdCcsXG4gICdzcGlkZXInLFxuICAnY3Jhd2wnLFxuICAnQVBJcy1Hb29nbGUnLFxuICAnQWRzQm90JyxcbiAgJ0dvb2dsZWJvdCcsXG4gICdtZWRpYXBhcnRuZXJzJyxcbiAgJ0dvb2dsZSBGYXZpY29uJyxcbiAgJ0ZlZWRGZXRjaGVyJyxcbiAgJ0dvb2dsZS1SZWFkLUFsb3VkJyxcbiAgJ0R1cGxleFdlYi1Hb29nbGUnLFxuICAnZ29vZ2xld2VibGlnaHQnLFxuICAnYmluZycsXG4gICd5YW5kZXgnLFxuICAnYmFpZHUnLFxuICAnZHVja2R1Y2snLFxuICAneWFob28nLFxuICAnZWNvc2lhJyxcbiAgJ2lhX2FyY2hpdmVyJyxcbiAgJ2ZhY2Vib29rJyxcbiAgJ2luc3RhZ3JhbScsXG4gICdwaW50ZXJlc3QnLFxuICAncmVkZGl0JyxcbiAgJ3NsYWNrJyxcbiAgJ3R3aXR0ZXInLFxuICAnd2hhdHNhcHAnLFxuICAneW91dHViZScsXG4gICdzZW1ydXNoJyxcbl07XG5jb25zdCBib3RBZ2VudFJlZ2V4ID0gbmV3IFJlZ0V4cChib3RBZ2VudHMuam9pbignfCcpLCAnaScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdXNlciBhZ2VudCBpcyBhIGJvdC5cbiAqIEBwYXJhbSB1c2VyQWdlbnQgLSBBbnkgdXNlciBhZ2VudCBzdHJpbmdcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlckFnZW50SXNSb2JvdCh1c2VyQWdlbnQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gIXVzZXJBZ2VudCA/IGZhbHNlIDogYm90QWdlbnRSZWdleC50ZXN0KHVzZXJBZ2VudCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGVudmlyb25tZW50IGlzIGEgYnJvd3NlciBhbmQgdGhlIHVzZXIgYWdlbnQgaXMgbm90IGEgYm90LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQnJvd3NlcigpOiBib29sZWFuIHtcbiAgY29uc3QgbmF2aWdhdG9yID0gaW5Ccm93c2VyKCkgPyB3aW5kb3c/Lm5hdmlnYXRvciA6IG51bGw7XG4gIGlmICghbmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhdXNlckFnZW50SXNSb2JvdChuYXZpZ2F0b3I/LnVzZXJBZ2VudCkgJiYgIW5hdmlnYXRvcj8ud2ViZHJpdmVyO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBhIGJyb3dzZXIgYW5kIGlmIHRoZSBuYXZpZ2F0b3IgaXMgb25saW5lLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJPbmxpbmUoKTogYm9vbGVhbiB7XG4gIGNvbnN0IG5hdmlnYXRvciA9IGluQnJvd3NlcigpID8gd2luZG93Py5uYXZpZ2F0b3IgOiBudWxsO1xuICBpZiAoIW5hdmlnYXRvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGlzTmF2aWdhdG9yT25saW5lID0gbmF2aWdhdG9yPy5vbkxpbmU7XG5cbiAgLy8gQmVpbmcgZXh0cmEgc2FmZSB3aXRoIHRoZSBleHBlcmltZW50YWwgYGNvbm5lY3Rpb25gIHByb3BlcnR5LCBhcyBpdCBpcyBub3QgZGVmaW5lZCBpbiBhbGwgYnJvd3NlcnNcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05hdmlnYXRvci9jb25uZWN0aW9uI2Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuICAvLyBAdHMtaWdub3JlXG4gIGNvbnN0IGlzRXhwZXJpbWVudGFsQ29ubmVjdGlvbk9ubGluZSA9IG5hdmlnYXRvcj8uY29ubmVjdGlvbj8ucnR0ICE9PSAwICYmIG5hdmlnYXRvcj8uY29ubmVjdGlvbj8uZG93bmxpbmsgIT09IDA7XG4gIHJldHVybiBpc0V4cGVyaW1lbnRhbENvbm5lY3Rpb25PbmxpbmUgJiYgaXNOYXZpZ2F0b3JPbmxpbmU7XG59XG5cbi8qKlxuICogUnVucyBgaXNCcm93c2VyT25saW5lYCBhbmQgYGlzVmFsaWRCcm93c2VyYCB0byBjaGVjayBpZiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBhIHZhbGlkIGJyb3dzZXIgYW5kIGlmIHRoZSBuYXZpZ2F0b3IgaXMgb25saW5lLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQnJvd3Nlck9ubGluZSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzQnJvd3Nlck9ubGluZSgpICYmIGlzVmFsaWRCcm93c2VyKCk7XG59XG4iXSwibmFtZXMiOlsiYnJvd3Nlcl9leHBvcnRzIiwiX19leHBvcnQiLCJpbkJyb3dzZXIiLCJpc0Jyb3dzZXJPbmxpbmUiLCJpc1ZhbGlkQnJvd3NlciIsImlzVmFsaWRCcm93c2VyT25saW5lIiwidXNlckFnZW50SXNSb2JvdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3RvQ29tbW9uSlMiLCJ3aW5kb3ciLCJib3RBZ2VudHMiLCJib3RBZ2VudFJlZ2V4IiwiUmVnRXhwIiwiam9pbiIsInVzZXJBZ2VudCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ3ZWJkcml2ZXIiLCJpc05hdmlnYXRvck9ubGluZSIsIm9uTGluZSIsImlzRXhwZXJpbWVudGFsQ29ubmVjdGlvbk9ubGluZSIsImNvbm5lY3Rpb24iLCJydHQiLCJkb3dubGluayJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGtCQUFBLENBQUE7QUFBQUMsU0FBQUQsaUJBQUE7SUFBQUUsV0FBQSxJQUFBQTtJQUFBQyxpQkFBQSxJQUFBQTtJQUFBQyxnQkFBQSxJQUFBQTtJQUFBQyxzQkFBQSxJQUFBQTtJQUFBQyxrQkFBQSxJQUFBQTtBQUFBO0FBQUFDLE9BQUFDLE9BQUEsR0FBQUMsYUFBQVQ7QUFJTyxTQUFTRTtJQUNkLE9BQU8sT0FBT1EsV0FBVztBQUMzQjtBQUVBLElBQU1DLFlBQVk7SUFDaEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRjtBQUNBLElBQU1DLGdCQUFnQixJQUFJQyxPQUFPRixVQUFVRyxJQUFBLENBQUssTUFBTTtBQU8vQyxTQUFTUixpQkFBaUJTLFNBQUE7SUFDL0IsT0FBTyxDQUFDQSxZQUFZLFFBQVFILGNBQWNJLElBQUEsQ0FBS0Q7QUFDakQ7QUFNTyxTQUFTWDtRQUNrQk07SUFBaEMsTUFBTU8sWUFBWWYsZUFBY1EsVUFBQUEsb0JBQUFBLDhCQUFBQSxRQUFRTyxTQUFBLEdBQVk7SUFDcEQsSUFBSSxDQUFDQSxXQUFXO1FBQ2QsT0FBTztJQUNUO0lBQ0EsT0FBTyxDQUFDWCxpQkFBaUJXLHNCQUFBQSxnQ0FBQUEsVUFBV0YsU0FBUyxLQUFLLEVBQUNFLHNCQUFBQSxnQ0FBQUEsVUFBV0MsU0FBQTtBQUNoRTtBQU1PLFNBQVNmO1FBQ2tCTyxTQVVPTyx1QkFBb0NBO0lBVjNFLE1BQU1BLFlBQVlmLGVBQWNRLFVBQUFBLG9CQUFBQSw4QkFBQUEsUUFBUU8sU0FBQSxHQUFZO0lBQ3BELElBQUksQ0FBQ0EsV0FBVztRQUNkLE9BQU87SUFDVDtJQUVBLE1BQU1FLG9CQUFvQkYsc0JBQUFBLGdDQUFBQSxVQUFXRyxNQUFBO0lBS3JDLE1BQU1DLGlDQUFpQ0osQ0FBQUEsc0JBQUFBLGlDQUFBQSx3QkFBQUEsVUFBV0ssVUFBQSxjQUFYTCw0Q0FBQUEsc0JBQXVCTSxHQUFBLE1BQVEsS0FBS04sQ0FBQUEsc0JBQUFBLGlDQUFBQSx5QkFBQUEsVUFBV0ssVUFBQSxjQUFYTCw2Q0FBQUEsdUJBQXVCTyxRQUFBLE1BQWE7SUFDL0csT0FBT0gsa0NBQWtDRjtBQUMzQztBQU1PLFNBQVNkO0lBQ2QsT0FBT0YscUJBQXFCQztBQUM5QiJ9