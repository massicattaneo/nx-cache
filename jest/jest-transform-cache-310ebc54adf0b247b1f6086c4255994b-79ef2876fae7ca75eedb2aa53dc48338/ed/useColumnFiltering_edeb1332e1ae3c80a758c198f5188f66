9ee8151fb6d459add1ee5ad96797c16a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useColumnFiltering", {
    enumerable: true,
    get: function() {
        return useColumnFiltering;
    }
});
const _react = require("react");
const _tables = require("../../tables");
function useColumnFiltering(selectedCategory, searchQuery) {
    const availableColumns = (0, _react.useMemo)(()=>{
        const table = _tables.watchlistDataTables[selectedCategory];
        if (!table) return [];
        const columns = [];
        const seenColumns = new Set();
        table.columns.forEach((columnDef)=>{
            var _columnDef_meta, _columnDef_meta1;
            if (((_columnDef_meta = columnDef.meta) === null || _columnDef_meta === void 0 ? void 0 : _columnDef_meta.endpoint) && ((_columnDef_meta1 = columnDef.meta) === null || _columnDef_meta1 === void 0 ? void 0 : _columnDef_meta1.columnKeys)) {
                const { endpoint, columnKeys, menuLabel } = columnDef.meta;
                // Use the primary key (first key) as the representative
                const primaryColumnKey = columnKeys[0].toString();
                // Create a unique identifier to prevent duplicates
                const columnId = `${endpoint}-${primaryColumnKey}-${selectedCategory}`;
                if (!seenColumns.has(columnId)) {
                    seenColumns.add(columnId);
                    columns.push({
                        endpoint,
                        columnKey: primaryColumnKey,
                        displayName: menuLabel !== null && menuLabel !== void 0 ? menuLabel : primaryColumnKey,
                        sourceTab: selectedCategory
                    });
                }
            }
        });
        return columns;
    }, [
        selectedCategory
    ]);
    const filteredColumns = (0, _react.useMemo)(()=>{
        if (!searchQuery.trim()) return availableColumns;
        const query = searchQuery.toLowerCase();
        return availableColumns.filter((column)=>column.displayName.toLowerCase().includes(query));
    }, [
        availableColumns,
        searchQuery
    ]);
    return {
        availableColumns,
        filteredColumns
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9DdXN0b21EYXRhVmlldy9ob29rcy91c2VDb2x1bW5GaWx0ZXJpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBGaW5hbmNlRGF0YVRhYnMgfSBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlV2F0Y2hsaXN0c0ZpbmFuY2VEYXRhVGFiTmF2aWdhdGlvblwiXG5pbXBvcnQgeyB3YXRjaGxpc3REYXRhVGFibGVzIH0gZnJvbSBcIi4uLy4uL3RhYmxlc1wiXG5pbXBvcnQgeyBVSUN1c3RvbUNvbHVtbiB9IGZyb20gXCIuLi90eXBlc1wiXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VDb2x1bW5GaWx0ZXJpbmcoc2VsZWN0ZWRDYXRlZ29yeTogRmluYW5jZURhdGFUYWJzLCBzZWFyY2hRdWVyeTogc3RyaW5nKSB7XG4gIGNvbnN0IGF2YWlsYWJsZUNvbHVtbnMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB0YWJsZSA9IHdhdGNobGlzdERhdGFUYWJsZXNbc2VsZWN0ZWRDYXRlZ29yeV1cbiAgICBpZiAoIXRhYmxlKSByZXR1cm4gW11cblxuICAgIGNvbnN0IGNvbHVtbnM6IEFycmF5PFVJQ3VzdG9tQ29sdW1uPiA9IFtdXG4gICAgY29uc3Qgc2VlbkNvbHVtbnMgPSBuZXcgU2V0PHN0cmluZz4oKVxuXG4gICAgdGFibGUuY29sdW1ucy5mb3JFYWNoKGNvbHVtbkRlZiA9PiB7XG4gICAgICBpZiAoY29sdW1uRGVmLm1ldGE/LmVuZHBvaW50ICYmIGNvbHVtbkRlZi5tZXRhPy5jb2x1bW5LZXlzKSB7XG4gICAgICAgIGNvbnN0IHsgZW5kcG9pbnQsIGNvbHVtbktleXMsIG1lbnVMYWJlbCB9ID0gY29sdW1uRGVmLm1ldGFcblxuICAgICAgICAvLyBVc2UgdGhlIHByaW1hcnkga2V5IChmaXJzdCBrZXkpIGFzIHRoZSByZXByZXNlbnRhdGl2ZVxuICAgICAgICBjb25zdCBwcmltYXJ5Q29sdW1uS2V5ID0gY29sdW1uS2V5c1swXS50b1N0cmluZygpXG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gcHJldmVudCBkdXBsaWNhdGVzXG4gICAgICAgIGNvbnN0IGNvbHVtbklkID0gYCR7ZW5kcG9pbnR9LSR7cHJpbWFyeUNvbHVtbktleX0tJHtzZWxlY3RlZENhdGVnb3J5fWBcblxuICAgICAgICBpZiAoIXNlZW5Db2x1bW5zLmhhcyhjb2x1bW5JZCkpIHtcbiAgICAgICAgICBzZWVuQ29sdW1ucy5hZGQoY29sdW1uSWQpXG5cbiAgICAgICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICAgICAgZW5kcG9pbnQsXG4gICAgICAgICAgICBjb2x1bW5LZXk6IHByaW1hcnlDb2x1bW5LZXksXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogbWVudUxhYmVsID8/IHByaW1hcnlDb2x1bW5LZXksXG4gICAgICAgICAgICBzb3VyY2VUYWI6IHNlbGVjdGVkQ2F0ZWdvcnksXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gY29sdW1uc1xuICB9LCBbc2VsZWN0ZWRDYXRlZ29yeV0pXG5cbiAgY29uc3QgZmlsdGVyZWRDb2x1bW5zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFzZWFyY2hRdWVyeS50cmltKCkpIHJldHVybiBhdmFpbGFibGVDb2x1bW5zXG5cbiAgICBjb25zdCBxdWVyeSA9IHNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKClcbiAgICByZXR1cm4gYXZhaWxhYmxlQ29sdW1ucy5maWx0ZXIoY29sdW1uID0+IGNvbHVtbi5kaXNwbGF5TmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KSlcbiAgfSwgW2F2YWlsYWJsZUNvbHVtbnMsIHNlYXJjaFF1ZXJ5XSlcblxuICByZXR1cm4geyBhdmFpbGFibGVDb2x1bW5zLCBmaWx0ZXJlZENvbHVtbnMgfVxufVxuIl0sIm5hbWVzIjpbInVzZUNvbHVtbkZpbHRlcmluZyIsInNlbGVjdGVkQ2F0ZWdvcnkiLCJzZWFyY2hRdWVyeSIsImF2YWlsYWJsZUNvbHVtbnMiLCJ1c2VNZW1vIiwidGFibGUiLCJ3YXRjaGxpc3REYXRhVGFibGVzIiwiY29sdW1ucyIsInNlZW5Db2x1bW5zIiwiU2V0IiwiZm9yRWFjaCIsImNvbHVtbkRlZiIsIm1ldGEiLCJlbmRwb2ludCIsImNvbHVtbktleXMiLCJtZW51TGFiZWwiLCJwcmltYXJ5Q29sdW1uS2V5IiwidG9TdHJpbmciLCJjb2x1bW5JZCIsImhhcyIsImFkZCIsInB1c2giLCJjb2x1bW5LZXkiLCJkaXNwbGF5TmFtZSIsInNvdXJjZVRhYiIsImZpbHRlcmVkQ29sdW1ucyIsInRyaW0iLCJxdWVyeSIsInRvTG93ZXJDYXNlIiwiZmlsdGVyIiwiY29sdW1uIiwiaW5jbHVkZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBS2dCQTs7O2VBQUFBOzs7dUJBTFE7d0JBRVk7QUFHN0IsU0FBU0EsbUJBQW1CQyxnQkFBaUMsRUFBRUMsV0FBbUI7SUFDdkYsTUFBTUMsbUJBQW1CQyxJQUFBQSxjQUFPLEVBQUM7UUFDL0IsTUFBTUMsUUFBUUMsMkJBQW1CLENBQUNMLGlCQUFpQjtRQUNuRCxJQUFJLENBQUNJLE9BQU8sT0FBTyxFQUFFO1FBRXJCLE1BQU1FLFVBQWlDLEVBQUU7UUFDekMsTUFBTUMsY0FBYyxJQUFJQztRQUV4QkosTUFBTUUsT0FBTyxDQUFDRyxPQUFPLENBQUNDLENBQUFBO2dCQUNoQkEsaUJBQTRCQTtZQUFoQyxJQUFJQSxFQUFBQSxrQkFBQUEsVUFBVUMsSUFBSSxjQUFkRCxzQ0FBQUEsZ0JBQWdCRSxRQUFRLE9BQUlGLG1CQUFBQSxVQUFVQyxJQUFJLGNBQWRELHVDQUFBQSxpQkFBZ0JHLFVBQVUsR0FBRTtnQkFDMUQsTUFBTSxFQUFFRCxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsU0FBUyxFQUFFLEdBQUdKLFVBQVVDLElBQUk7Z0JBRTFELHdEQUF3RDtnQkFDeEQsTUFBTUksbUJBQW1CRixVQUFVLENBQUMsRUFBRSxDQUFDRyxRQUFRO2dCQUUvQyxtREFBbUQ7Z0JBQ25ELE1BQU1DLFdBQVcsQ0FBQyxFQUFFTCxTQUFTLENBQUMsRUFBRUcsaUJBQWlCLENBQUMsRUFBRWYsaUJBQWlCLENBQUM7Z0JBRXRFLElBQUksQ0FBQ08sWUFBWVcsR0FBRyxDQUFDRCxXQUFXO29CQUM5QlYsWUFBWVksR0FBRyxDQUFDRjtvQkFFaEJYLFFBQVFjLElBQUksQ0FBQzt3QkFDWFI7d0JBQ0FTLFdBQVdOO3dCQUNYTyxhQUFhUixzQkFBQUEsdUJBQUFBLFlBQWFDO3dCQUMxQlEsV0FBV3ZCO29CQUNiO2dCQUNGO1lBQ0Y7UUFDRjtRQUVBLE9BQU9NO0lBQ1QsR0FBRztRQUFDTjtLQUFpQjtJQUVyQixNQUFNd0Isa0JBQWtCckIsSUFBQUEsY0FBTyxFQUFDO1FBQzlCLElBQUksQ0FBQ0YsWUFBWXdCLElBQUksSUFBSSxPQUFPdkI7UUFFaEMsTUFBTXdCLFFBQVF6QixZQUFZMEIsV0FBVztRQUNyQyxPQUFPekIsaUJBQWlCMEIsTUFBTSxDQUFDQyxDQUFBQSxTQUFVQSxPQUFPUCxXQUFXLENBQUNLLFdBQVcsR0FBR0csUUFBUSxDQUFDSjtJQUNyRixHQUFHO1FBQUN4QjtRQUFrQkQ7S0FBWTtJQUVsQyxPQUFPO1FBQUVDO1FBQWtCc0I7SUFBZ0I7QUFDN0MifQ==