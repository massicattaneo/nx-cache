{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-string/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the nodeâ€™s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n"],"names":["toString","emptyOptions","value","options","settings","includeImageAlt","includeHtml","one","node","type","alt","all","children","Array","isArray","values","result","index","length","join","Boolean"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;;;CASC,GAED,oBAAoB;;;;+BAgBJA;;;eAAAA;;;AAfhB,MAAMC,eAAe,CAAC;AAef,SAASD,SAASE,KAAK,EAAEC,OAAO;IACrC,MAAMC,WAAWD,WAAWF;IAC5B,MAAMI,kBACJ,OAAOD,SAASC,eAAe,KAAK,YAChCD,SAASC,eAAe,GACxB;IACN,MAAMC,cACJ,OAAOF,SAASE,WAAW,KAAK,YAAYF,SAASE,WAAW,GAAG;IAErE,OAAOC,IAAIL,OAAOG,iBAAiBC;AACrC;AAEA;;;;;;;;;;;CAWC,GACD,SAASC,IAAIL,KAAK,EAAEG,eAAe,EAAEC,WAAW;IAC9C,IAAIE,KAAKN,QAAQ;QACf,IAAI,WAAWA,OAAO;YACpB,OAAOA,MAAMO,IAAI,KAAK,UAAU,CAACH,cAAc,KAAKJ,MAAMA,KAAK;QACjE;QAEA,IAAIG,mBAAmB,SAASH,SAASA,MAAMQ,GAAG,EAAE;YAClD,OAAOR,MAAMQ,GAAG;QAClB;QAEA,IAAI,cAAcR,OAAO;YACvB,OAAOS,IAAIT,MAAMU,QAAQ,EAAEP,iBAAiBC;QAC9C;IACF;IAEA,IAAIO,MAAMC,OAAO,CAACZ,QAAQ;QACxB,OAAOS,IAAIT,OAAOG,iBAAiBC;IACrC;IAEA,OAAO;AACT;AAEA;;;;;;;;;;;CAWC,GACD,SAASK,IAAII,MAAM,EAAEV,eAAe,EAAEC,WAAW;IAC/C,0BAA0B,GAC1B,MAAMU,SAAS,EAAE;IACjB,IAAIC,QAAQ,CAAC;IAEb,MAAO,EAAEA,QAAQF,OAAOG,MAAM,CAAE;QAC9BF,MAAM,CAACC,MAAM,GAAGV,IAAIQ,MAAM,CAACE,MAAM,EAAEZ,iBAAiBC;IACtD;IAEA,OAAOU,OAAOG,IAAI,CAAC;AACrB;AAEA;;;;;;;CAOC,GACD,SAASX,KAAKN,KAAK;IACjB,OAAOkB,QAAQlB,SAAS,OAAOA,UAAU;AAC3C"}