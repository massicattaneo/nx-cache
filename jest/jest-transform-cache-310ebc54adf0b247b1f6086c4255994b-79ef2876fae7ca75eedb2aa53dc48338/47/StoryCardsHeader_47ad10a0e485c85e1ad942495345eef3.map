{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/results-story-card/src/StoryCardsHeader/StoryCardsHeader.tsx"],"sourcesContent":["import { useMemo } from \"react\"\nimport { CqsQuerySortEnum } from \"@rp/common/api-types\"\nimport { RpqlDateFilter } from \"@rp/common/api-types\"\nimport { DATE_OPTIONS } from \"@rp/common/utils\"\nimport { Datepicker, formatInitialDates } from \"@rp/react/web/common/composite-components\"\n// Hooks\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\n// Context\nimport { useQueryContext } from \"@rp/react/web/common/providers\"\n// Components\nimport { ScopeSelector } from \"../ScopeSelector\"\nimport { ResultsCount } from \"./ResultsCount\"\n// Styles\nimport { SortersContainer, StoryCardsHeaderRoot } from \"./StoryCardsHeader.styles\"\nimport StorySorter from \"./StorySorter\"\n\nexport const SORT_TYPES = [CqsQuerySortEnum.Relevance, CqsQuerySortEnum.Date]\n\nconst StoryCardsHeader = () => {\n  const { isMobile } = useDeviceInfo()\n\n  // DatePicker\n  const {\n    savedQuery: {\n      id,\n      query: { sort = \"\", date },\n    },\n    actions: { setSort, setDate },\n  } = useQueryContext()\n\n  const adaptedDateOptions = useMemo(\n    () =>\n      Object.fromEntries(\n        Object.entries(DATE_OPTIONS).map(([key, option]) => [\n          key,\n          {\n            label: option.label,\n            start: option.start(),\n            end: option.end(),\n          },\n        ]),\n      ),\n    [],\n  )\n\n  const handleDateSubmit = (date: RpqlDateFilter) => {\n    setDate(date)\n  }\n\n  return (\n    <StoryCardsHeaderRoot>\n      <ScopeSelector />\n\n      {isMobile ? null : (\n        <div>\n          <ResultsCount />\n          <SortersContainer>\n            <StorySorter queryId={id} sorterOptions={SORT_TYPES} sort={sort} setSort={setSort} />\n            <Datepicker\n              date={date ? formatInitialDates(date[0], adaptedDateOptions) : null}\n              defaultOption={\"any_time\"}\n              options={adaptedDateOptions}\n              onSubmit={handleDateSubmit}\n            />\n          </SortersContainer>\n        </div>\n      )}\n    </StoryCardsHeaderRoot>\n  )\n}\n\nexport { StoryCardsHeader }\n"],"names":["SORT_TYPES","StoryCardsHeader","CqsQuerySortEnum","Relevance","Date","isMobile","useDeviceInfo","savedQuery","id","query","sort","date","actions","setSort","setDate","useQueryContext","adaptedDateOptions","useMemo","Object","fromEntries","entries","DATE_OPTIONS","map","key","option","label","start","end","handleDateSubmit","StoryCardsHeaderRoot","ScopeSelector","div","ResultsCount","SortersContainer","StorySorter","queryId","sorterOptions","Datepicker","formatInitialDates","defaultOption","options","onSubmit"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAgBaA,UAAU;eAAVA;;IAuDJC,gBAAgB;eAAhBA;;;;uBAvEe;0BACS;uBAEJ;qCACkB;uBAEjB;2BAEE;+BAEF;8BACD;wCAE0B;oEAC/B;;;;;;AAEjB,MAAMD,aAAa;IAACE,0BAAgB,CAACC,SAAS;IAAED,0BAAgB,CAACE,IAAI;CAAC;AAE7E,MAAMH,mBAAmB;IACvB,MAAM,EAAEI,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAElC,aAAa;IACb,MAAM,EACJC,YAAY,EACVC,EAAE,EACFC,OAAO,EAAEC,OAAO,EAAE,EAAEC,IAAI,EAAE,EAC3B,EACDC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE,EAC9B,GAAGC,IAAAA,0BAAe;IAEnB,MAAMC,qBAAqBC,IAAAA,cAAO,EAChC,IACEC,OAAOC,WAAW,CAChBD,OAAOE,OAAO,CAACC,mBAAY,EAAEC,GAAG,CAAC,CAAC,CAACC,KAAKC,OAAO,GAAK;gBAClDD;gBACA;oBACEE,OAAOD,OAAOC,KAAK;oBACnBC,OAAOF,OAAOE,KAAK;oBACnBC,KAAKH,OAAOG,GAAG;gBACjB;aACD,IAEL,EAAE;IAGJ,MAAMC,mBAAmB,CAACjB;QACxBG,QAAQH;IACV;IAEA,qBACE,sBAACkB,4CAAoB;;0BACnB,qBAACC,4BAAa;YAEbzB,WAAW,qBACV,sBAAC0B;;kCACC,qBAACC,0BAAY;kCACb,sBAACC,wCAAgB;;0CACf,qBAACC,oBAAW;gCAACC,SAAS3B;gCAAI4B,eAAepC;gCAAYU,MAAMA;gCAAMG,SAASA;;0CAC1E,qBAACwB,+BAAU;gCACT1B,MAAMA,OAAO2B,IAAAA,uCAAkB,EAAC3B,IAAI,CAAC,EAAE,EAAEK,sBAAsB;gCAC/DuB,eAAe;gCACfC,SAASxB;gCACTyB,UAAUb;;;;;;;;AAOxB"}