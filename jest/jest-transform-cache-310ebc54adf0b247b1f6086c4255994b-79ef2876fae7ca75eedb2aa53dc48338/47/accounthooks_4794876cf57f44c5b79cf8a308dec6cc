5d152d7be605ff629f4b4ac82d8fa0da
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useIsBriefLimitMet: function() {
        return useIsBriefLimitMet;
    },
    useIsFreemium: function() {
        return useIsFreemium;
    },
    useIsWatchlistEntityLimitMet: function() {
        return useIsWatchlistEntityLimitMet;
    },
    useIsWatchlistLimitMet: function() {
        return useIsWatchlistLimitMet;
    },
    useResetPassword: function() {
        return useResetPassword;
    },
    useSendCode: function() {
        return useSendCode;
    }
});
const _userdataquota = require("@rp/react/tanstack-api/user-data-quota");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _reactquery = require("@tanstack/react-query");
const useSendCode = (signIn, errorAction)=>{
    return (0, _reactquery.useMutation)({
        mutationFn: signIn === null || signIn === void 0 ? void 0 : signIn.create,
        onError: (err)=>errorAction(err)
    });
};
const useResetPassword = (signIn, setActive, onError)=>{
    return (0, _reactquery.useMutation)({
        mutationFn: signIn === null || signIn === void 0 ? void 0 : signIn.attemptFirstFactor,
        onSuccess: (result)=>{
            if (result.status === "complete") {
                setActive === null || setActive === void 0 ? void 0 : setActive({
                    session: result.createdSessionId
                });
            } else {
                onError();
            }
        },
        onError: (error)=>{
            onError(error);
        }
    });
};
const useIsBriefLimitMet = (quota, briefConfigs)=>{
    var _allInfo_briefs;
    const { data: allInfo } = (0, _userdataquota.useQuotaDetails)();
    // const { data: briefConfigs } = useUserBriefConfigs()
    const isFreemium = (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "SUBSCRIBED" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL-PENDING";
    const briefsMaxQuota = allInfo === null || allInfo === void 0 ? void 0 : (_allInfo_briefs = allInfo.briefs) === null || _allInfo_briefs === void 0 ? void 0 : _allInfo_briefs.maxValue;
    const maxBriefsAllowed = briefsMaxQuota ? briefsMaxQuota : 0;
    const briefConsumed = briefConfigs ? briefConfigs === null || briefConfigs === void 0 ? void 0 : briefConfigs.length : 0;
    return isFreemium && maxBriefsAllowed <= briefConsumed;
};
const useIsWatchlistLimitMet = (quota)=>{
    var _allInfo_watchlist;
    const { data: allInfo } = (0, _userdataquota.useQuotaDetails)();
    const { data: results } = (0, _watchlist.useAllWatchlists)("user");
    const isFreemium = (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "SUBSCRIBED" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL-PENDING";
    const watchlistMaxQuota = allInfo === null || allInfo === void 0 ? void 0 : (_allInfo_watchlist = allInfo.watchlist) === null || _allInfo_watchlist === void 0 ? void 0 : _allInfo_watchlist.maxValue;
    const watchlistQuotaAllowed = watchlistMaxQuota ? watchlistMaxQuota : 0;
    const watchlistsConsumed = results ? results.length : 0;
    return isFreemium && watchlistQuotaAllowed <= watchlistsConsumed;
};
const useIsWatchlistEntityLimitMet = (quota, watchlistEntityAmount)=>{
    var _allInfo_watchlistEntity;
    const { data: allInfo } = (0, _userdataquota.useQuotaDetails)();
    const isFreemium = (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "SUBSCRIBED" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL-PENDING";
    const watchlistEntityMaxQuota = allInfo === null || allInfo === void 0 ? void 0 : (_allInfo_watchlistEntity = allInfo.watchlistEntity) === null || _allInfo_watchlistEntity === void 0 ? void 0 : _allInfo_watchlistEntity.maxValue;
    const watchlistQuotaAllowed = watchlistEntityMaxQuota ? watchlistEntityMaxQuota : 0;
    const watchlistEntityConsumed = watchlistEntityAmount;
    return isFreemium && watchlistQuotaAllowed <= watchlistEntityConsumed;
};
const useIsFreemium = (quota)=>{
    const isFreemium = (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "SUBSCRIBED" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL" && (quota === null || quota === void 0 ? void 0 : quota.subscriptionStatus) !== "TRIAL-PENDING";
    return isFreemium;
};

//# sourceMappingURL=data:application/json;base64,