ea0ae9eeaf8afb4897ec246cc5448dd6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updateSlidesClasses;
    }
});
const _utils = require("../../shared/utils.js");
function updateSlidesClasses() {
    const swiper = this;
    const { slides, params, slidesEl, activeIndex } = swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    const getFilteredSlide = (selector)=>{
        return (0, _utils.elementChildren)(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];
    };
    slides.forEach((slideEl)=>{
        slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);
    });
    let activeSlide;
    if (isVirtual) {
        if (params.loop) {
            let slideIndex = activeIndex - swiper.virtual.slidesBefore;
            if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;
            if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;
            activeSlide = getFilteredSlide(`[data-swiper-slide-index="${slideIndex}"]`);
        } else {
            activeSlide = getFilteredSlide(`[data-swiper-slide-index="${activeIndex}"]`);
        }
    } else {
        activeSlide = slides[activeIndex];
    }
    if (activeSlide) {
        // Active classes
        activeSlide.classList.add(params.slideActiveClass);
        // Next Slide
        let nextSlide = (0, _utils.elementNextAll)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
        if (params.loop && !nextSlide) {
            nextSlide = slides[0];
        }
        if (nextSlide) {
            nextSlide.classList.add(params.slideNextClass);
        }
        // Prev Slide
        let prevSlide = (0, _utils.elementPrevAll)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];
        if (params.loop && !prevSlide === 0) {
            prevSlide = slides[slides.length - 1];
        }
        if (prevSlide) {
            prevSlide.classList.add(params.slidePrevClass);
        }
    }
    swiper.emitSlidesClasses();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzQ2xhc3Nlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4sIGVsZW1lbnROZXh0QWxsLCBlbGVtZW50UHJldkFsbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzW2FjdGl2ZUluZGV4XTtcbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICAvLyBBY3RpdmUgY2xhc3Nlc1xuICAgIGFjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gICAgLy8gTmV4dCBTbGlkZVxuICAgIGxldCBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgaWYgKHBhcmFtcy5sb29wICYmICFuZXh0U2xpZGUpIHtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlc1swXTtcbiAgICB9XG4gICAgaWYgKG5leHRTbGlkZSkge1xuICAgICAgbmV4dFNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICB9XG4gICAgLy8gUHJldiBTbGlkZVxuICAgIGxldCBwcmV2U2xpZGUgPSBlbGVtZW50UHJldkFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgaWYgKHBhcmFtcy5sb29wICYmICFwcmV2U2xpZGUgPT09IDApIHtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGlmIChwcmV2U2xpZGUpIHtcbiAgICAgIHByZXZTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufSJdLCJuYW1lcyI6WyJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwic3dpcGVyIiwic2xpZGVzIiwicGFyYW1zIiwic2xpZGVzRWwiLCJhY3RpdmVJbmRleCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwiZ2V0RmlsdGVyZWRTbGlkZSIsInNlbGVjdG9yIiwiZWxlbWVudENoaWxkcmVuIiwic2xpZGVDbGFzcyIsImZvckVhY2giLCJzbGlkZUVsIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJhY3RpdmVTbGlkZSIsImxvb3AiLCJzbGlkZUluZGV4Iiwic2xpZGVzQmVmb3JlIiwibGVuZ3RoIiwiYWRkIiwibmV4dFNsaWRlIiwiZWxlbWVudE5leHRBbGwiLCJwcmV2U2xpZGUiLCJlbGVtZW50UHJldkFsbCIsImVtaXRTbGlkZXNDbGFzc2VzIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBQ0E7OztlQUF3QkE7Ozt1QkFEd0M7QUFDakQsU0FBU0E7SUFDdEIsTUFBTUMsU0FBUyxJQUFJO0lBQ25CLE1BQU0sRUFDSkMsTUFBTSxFQUNOQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsV0FBVyxFQUNaLEdBQUdKO0lBQ0osTUFBTUssWUFBWUwsT0FBT00sT0FBTyxJQUFJSixPQUFPSSxPQUFPLENBQUNDLE9BQU87SUFDMUQsTUFBTUMsbUJBQW1CQyxDQUFBQTtRQUN2QixPQUFPQyxJQUFBQSxzQkFBZSxFQUFDUCxVQUFVLENBQUMsQ0FBQyxFQUFFRCxPQUFPUyxVQUFVLENBQUMsRUFBRUYsU0FBUyxjQUFjLEVBQUVBLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNsRztJQUNBUixPQUFPVyxPQUFPLENBQUNDLENBQUFBO1FBQ2JBLFFBQVFDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDYixPQUFPYyxnQkFBZ0IsRUFBRWQsT0FBT2UsY0FBYyxFQUFFZixPQUFPZ0IsY0FBYztJQUNoRztJQUNBLElBQUlDO0lBQ0osSUFBSWQsV0FBVztRQUNiLElBQUlILE9BQU9rQixJQUFJLEVBQUU7WUFDZixJQUFJQyxhQUFhakIsY0FBY0osT0FBT00sT0FBTyxDQUFDZ0IsWUFBWTtZQUMxRCxJQUFJRCxhQUFhLEdBQUdBLGFBQWFyQixPQUFPTSxPQUFPLENBQUNMLE1BQU0sQ0FBQ3NCLE1BQU0sR0FBR0Y7WUFDaEUsSUFBSUEsY0FBY3JCLE9BQU9NLE9BQU8sQ0FBQ0wsTUFBTSxDQUFDc0IsTUFBTSxFQUFFRixjQUFjckIsT0FBT00sT0FBTyxDQUFDTCxNQUFNLENBQUNzQixNQUFNO1lBQzFGSixjQUFjWCxpQkFBaUIsQ0FBQywwQkFBMEIsRUFBRWEsV0FBVyxFQUFFLENBQUM7UUFDNUUsT0FBTztZQUNMRixjQUFjWCxpQkFBaUIsQ0FBQywwQkFBMEIsRUFBRUosWUFBWSxFQUFFLENBQUM7UUFDN0U7SUFDRixPQUFPO1FBQ0xlLGNBQWNsQixNQUFNLENBQUNHLFlBQVk7SUFDbkM7SUFDQSxJQUFJZSxhQUFhO1FBQ2YsaUJBQWlCO1FBQ2pCQSxZQUFZTCxTQUFTLENBQUNVLEdBQUcsQ0FBQ3RCLE9BQU9jLGdCQUFnQjtRQUVqRCxhQUFhO1FBQ2IsSUFBSVMsWUFBWUMsSUFBQUEscUJBQWMsRUFBQ1AsYUFBYSxDQUFDLENBQUMsRUFBRWpCLE9BQU9TLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckYsSUFBSVQsT0FBT2tCLElBQUksSUFBSSxDQUFDSyxXQUFXO1lBQzdCQSxZQUFZeEIsTUFBTSxDQUFDLEVBQUU7UUFDdkI7UUFDQSxJQUFJd0IsV0FBVztZQUNiQSxVQUFVWCxTQUFTLENBQUNVLEdBQUcsQ0FBQ3RCLE9BQU9lLGNBQWM7UUFDL0M7UUFDQSxhQUFhO1FBQ2IsSUFBSVUsWUFBWUMsSUFBQUEscUJBQWMsRUFBQ1QsYUFBYSxDQUFDLENBQUMsRUFBRWpCLE9BQU9TLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckYsSUFBSVQsT0FBT2tCLElBQUksSUFBSSxDQUFDTyxjQUFjLEdBQUc7WUFDbkNBLFlBQVkxQixNQUFNLENBQUNBLE9BQU9zQixNQUFNLEdBQUcsRUFBRTtRQUN2QztRQUNBLElBQUlJLFdBQVc7WUFDYkEsVUFBVWIsU0FBUyxDQUFDVSxHQUFHLENBQUN0QixPQUFPZ0IsY0FBYztRQUMvQztJQUNGO0lBQ0FsQixPQUFPNkIsaUJBQWlCO0FBQzFCIn0=