{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-markdown/lib/handle/heading.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n"],"names":["heading","node","_","state","info","rank","Math","max","min","depth","tracker","createTracker","formatHeadingAsSetext","exit","enter","subexit","value","containerPhrasing","current","before","after","repeat","length","lastIndexOf","sequence","move","test","charCodeAt","toString","toUpperCase","slice","options","closeAtx"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAWeA;;;eAAAA;;;uCAToB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAS7B,SAASA,QAAQC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI;IAC1C,MAAMC,OAAOC,KAAKC,GAAG,CAACD,KAAKE,GAAG,CAAC,GAAGP,KAAKQ,KAAK,IAAI,IAAI;IACpD,MAAMC,UAAUP,MAAMQ,aAAa,CAACP;IAEpC,IAAIQ,IAAAA,4CAAqB,EAACX,MAAME,QAAQ;QACtC,MAAMU,OAAOV,MAAMW,KAAK,CAAC;QACzB,MAAMC,UAAUZ,MAAMW,KAAK,CAAC;QAC5B,MAAME,QAAQb,MAAMc,iBAAiB,CAAChB,MAAM,wCACvCS,QAAQQ,OAAO;YAClBC,QAAQ;YACRC,OAAO;;QAETL;QACAF;QAEA,OACEG,QACA,OACA,AAACX,CAAAA,SAAS,IAAI,MAAM,GAAE,EAAGgB,MAAM,CAC7B,kBAAkB;QAClBL,MAAMM,MAAM,GACV,6DAA6D;QAC7D,uBAAuB;QACtBhB,CAAAA,KAAKC,GAAG,CAACS,MAAMO,WAAW,CAAC,OAAOP,MAAMO,WAAW,CAAC,SAAS,CAAA;IAGtE;IAEA,MAAMC,WAAW,IAAIH,MAAM,CAAChB;IAC5B,MAAMQ,OAAOV,MAAMW,KAAK,CAAC;IACzB,MAAMC,UAAUZ,MAAMW,KAAK,CAAC;IAE5B,6EAA6E;IAC7E,gEAAgE;IAChE,4EAA4E;IAC5E,yCAAyC;IACzCJ,QAAQe,IAAI,CAACD,WAAW;IAExB,IAAIR,QAAQb,MAAMc,iBAAiB,CAAChB,MAAM;QACxCkB,QAAQ;QACRC,OAAO;OACJV,QAAQQ,OAAO;IAGpB,IAAI,SAASQ,IAAI,CAACV,QAAQ;QACxB,8DAA8D;QAC9DA,QACE,QACAA,MAAMW,UAAU,CAAC,GAAGC,QAAQ,CAAC,IAAIC,WAAW,KAC5C,MACAb,MAAMc,KAAK,CAAC;IAChB;IAEAd,QAAQA,QAAQQ,WAAW,MAAMR,QAAQQ;IAEzC,IAAIrB,MAAM4B,OAAO,CAACC,QAAQ,EAAE;QAC1BhB,SAAS,MAAMQ;IACjB;IAEAT;IACAF;IAEA,OAAOG;AACT"}