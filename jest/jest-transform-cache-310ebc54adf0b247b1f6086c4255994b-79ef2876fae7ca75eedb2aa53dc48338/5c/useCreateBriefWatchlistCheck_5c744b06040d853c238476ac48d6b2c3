2672c0514236fac52928e650bfbe96a7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useCreateBriefWatchlistCheck", {
    enumerable: true,
    get: function() {
        return useCreateBriefWatchlistCheck;
    }
});
const _react = require("react");
const _brief = require("@rp/react/common/brief");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _providers = require("@rp/react/web/common/providers");
// This hook is a temporary solution for the briefs to confirm if a watchlist
// has a company or not. We expect this to be obsolete in the next few months.
const useCreateBriefWatchlistCheck = ()=>{
    const { form } = (0, _brief.useBriefConfigForm)();
    const { entities, isLoadingWatchlist: isLoadingWatchlistEntities, isLoadingEntities: isFetchingWatchlistEntities, isError } = (0, _watchlist.useWatchlistEntities)(form.watchlistId);
    const { enqueueError } = (0, _providers.useSnackbar)();
    const hasCompanies = entities.some((item)=>item.category === "Companies");
    (0, _react.useEffect)(()=>{
        if (!isLoadingWatchlistEntities && !hasCompanies && form.watchlistId && !isFetchingWatchlistEntities) {
            enqueueError("Watchlists without companies cannot be used to generate the Brief.");
        }
    }, [
        isLoadingWatchlistEntities,
        hasCompanies,
        enqueueError,
        form,
        isFetchingWatchlistEntities
    ]);
    return {
        isError,
        isLoadingWatchlistEntities,
        hasCompanies,
        isFetchingWatchlistEntities
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9ob29rcy91c2VDcmVhdGVCcmllZldhdGNobGlzdENoZWNrL3VzZUNyZWF0ZUJyaWVmV2F0Y2hsaXN0Q2hlY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZUJyaWVmQ29uZmlnRm9ybSB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2JyaWVmXCJcbmltcG9ydCB7IHVzZVdhdGNobGlzdEVudGl0aWVzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvd2F0Y2hsaXN0XCJcbmltcG9ydCB7IHVzZVNuYWNrYmFyIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5cbnR5cGUgVXNlQ3JlYXRlQnJpZWZXYXRjaGxpc3RDaGVja1N0YXRlID0ge1xuICBpc0xvYWRpbmdXYXRjaGxpc3RFbnRpdGllczogYm9vbGVhblxuICBoYXNDb21wYW5pZXM6IGJvb2xlYW5cbiAgaXNGZXRjaGluZ1dhdGNobGlzdEVudGl0aWVzOiBib29sZWFuXG4gIGlzRXJyb3I6IGJvb2xlYW5cbn1cblxuLy8gVGhpcyBob29rIGlzIGEgdGVtcG9yYXJ5IHNvbHV0aW9uIGZvciB0aGUgYnJpZWZzIHRvIGNvbmZpcm0gaWYgYSB3YXRjaGxpc3Rcbi8vIGhhcyBhIGNvbXBhbnkgb3Igbm90LiBXZSBleHBlY3QgdGhpcyB0byBiZSBvYnNvbGV0ZSBpbiB0aGUgbmV4dCBmZXcgbW9udGhzLlxuXG5jb25zdCB1c2VDcmVhdGVCcmllZldhdGNobGlzdENoZWNrID0gKCk6IFVzZUNyZWF0ZUJyaWVmV2F0Y2hsaXN0Q2hlY2tTdGF0ZSA9PiB7XG4gIGNvbnN0IHsgZm9ybSB9ID0gdXNlQnJpZWZDb25maWdGb3JtKClcbiAgY29uc3Qge1xuICAgIGVudGl0aWVzLFxuICAgIGlzTG9hZGluZ1dhdGNobGlzdDogaXNMb2FkaW5nV2F0Y2hsaXN0RW50aXRpZXMsXG4gICAgaXNMb2FkaW5nRW50aXRpZXM6IGlzRmV0Y2hpbmdXYXRjaGxpc3RFbnRpdGllcyxcbiAgICBpc0Vycm9yLFxuICB9ID0gdXNlV2F0Y2hsaXN0RW50aXRpZXMoZm9ybS53YXRjaGxpc3RJZClcbiAgY29uc3QgeyBlbnF1ZXVlRXJyb3IgfSA9IHVzZVNuYWNrYmFyKClcblxuICBjb25zdCBoYXNDb21wYW5pZXMgPSBlbnRpdGllcy5zb21lKGl0ZW0gPT4gaXRlbS5jYXRlZ29yeSA9PT0gXCJDb21wYW5pZXNcIilcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgICFpc0xvYWRpbmdXYXRjaGxpc3RFbnRpdGllcyAmJlxuICAgICAgIWhhc0NvbXBhbmllcyAmJlxuICAgICAgZm9ybS53YXRjaGxpc3RJZCAmJlxuICAgICAgIWlzRmV0Y2hpbmdXYXRjaGxpc3RFbnRpdGllc1xuICAgICkge1xuICAgICAgZW5xdWV1ZUVycm9yKFwiV2F0Y2hsaXN0cyB3aXRob3V0IGNvbXBhbmllcyBjYW5ub3QgYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgQnJpZWYuXCIpXG4gICAgfVxuICB9LCBbaXNMb2FkaW5nV2F0Y2hsaXN0RW50aXRpZXMsIGhhc0NvbXBhbmllcywgZW5xdWV1ZUVycm9yLCBmb3JtLCBpc0ZldGNoaW5nV2F0Y2hsaXN0RW50aXRpZXNdKVxuXG4gIHJldHVybiB7XG4gICAgaXNFcnJvcixcbiAgICBpc0xvYWRpbmdXYXRjaGxpc3RFbnRpdGllcyxcbiAgICBoYXNDb21wYW5pZXMsXG4gICAgaXNGZXRjaGluZ1dhdGNobGlzdEVudGl0aWVzLFxuICB9XG59XG5cbmV4cG9ydCB7IHVzZUNyZWF0ZUJyaWVmV2F0Y2hsaXN0Q2hlY2sgfVxuZXhwb3J0IHR5cGUgeyBVc2VDcmVhdGVCcmllZldhdGNobGlzdENoZWNrU3RhdGUgfVxuIl0sIm5hbWVzIjpbInVzZUNyZWF0ZUJyaWVmV2F0Y2hsaXN0Q2hlY2siLCJmb3JtIiwidXNlQnJpZWZDb25maWdGb3JtIiwiZW50aXRpZXMiLCJpc0xvYWRpbmdXYXRjaGxpc3QiLCJpc0xvYWRpbmdXYXRjaGxpc3RFbnRpdGllcyIsImlzTG9hZGluZ0VudGl0aWVzIiwiaXNGZXRjaGluZ1dhdGNobGlzdEVudGl0aWVzIiwiaXNFcnJvciIsInVzZVdhdGNobGlzdEVudGl0aWVzIiwid2F0Y2hsaXN0SWQiLCJlbnF1ZXVlRXJyb3IiLCJ1c2VTbmFja2JhciIsImhhc0NvbXBhbmllcyIsInNvbWUiLCJpdGVtIiwiY2F0ZWdvcnkiLCJ1c2VFZmZlY3QiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBOENTQTs7O2VBQUFBOzs7dUJBOUNpQjt1QkFDUzsyQkFDRTsyQkFDVDtBQVM1Qiw2RUFBNkU7QUFDN0UsOEVBQThFO0FBRTlFLE1BQU1BLCtCQUErQjtJQUNuQyxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHQyxJQUFBQSx5QkFBa0I7SUFDbkMsTUFBTSxFQUNKQyxRQUFRLEVBQ1JDLG9CQUFvQkMsMEJBQTBCLEVBQzlDQyxtQkFBbUJDLDJCQUEyQixFQUM5Q0MsT0FBTyxFQUNSLEdBQUdDLElBQUFBLCtCQUFvQixFQUFDUixLQUFLUyxXQUFXO0lBQ3pDLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUdDLElBQUFBLHNCQUFXO0lBRXBDLE1BQU1DLGVBQWVWLFNBQVNXLElBQUksQ0FBQ0MsQ0FBQUEsT0FBUUEsS0FBS0MsUUFBUSxLQUFLO0lBRTdEQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFDRSxDQUFDWiw4QkFDRCxDQUFDUSxnQkFDRFosS0FBS1MsV0FBVyxJQUNoQixDQUFDSCw2QkFDRDtZQUNBSSxhQUFhO1FBQ2Y7SUFDRixHQUFHO1FBQUNOO1FBQTRCUTtRQUFjRjtRQUFjVjtRQUFNTTtLQUE0QjtJQUU5RixPQUFPO1FBQ0xDO1FBQ0FIO1FBQ0FRO1FBQ0FOO0lBQ0Y7QUFDRiJ9