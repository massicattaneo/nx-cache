{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-gfm-autolink-literal/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n"],"names":["gfmAutolinkLiteralFromMarkdown","gfmAutolinkLiteralToMarkdown","inConstruct","notInConstruct","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","unsafe","character","before","after","token","type","title","url","children","config","autolinkProtocol","call","data","node","stack","length","assert","sliceSerialize","autolinkEmail","tree","findAndReplace","findUrl","findEmail","ignore","_","protocol","domain","path","match","prefix","previous","test","isCorrectDomain","parts","splitUrl","result","value","atext","label","split","trailExec","exec","undefined","slice","index","trail","closingParenIndex","indexOf","openingParens","ccount","closingParens","email","code","input","charCodeAt","unicodeWhitespace","unicodePunctuation"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}