{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/rpjson/src/lib/document-enhancer/enhance-document.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { ContentBlock, ContentBlockTypes, TextBlock } from \"@rp/react/rpjson/types\"\nimport {\n  DocumentEnhancerOptions,\n  EnhancedDocumentTypes,\n  EnhancedRpJsonDocument,\n} from \"@rp/react/rpjson/types\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\nimport { uniqueIdIterator } from \"../unique-id-iterator/unique-id-iterator\"\nimport { enhanceBlock } from \"./enhance-block\"\nimport { getDocumentEnhancerMemo, setDocumentEnhancerMemo } from \"./enhance-document-memo\"\nimport { findPageIndexes } from \"./find-page-indexes\"\nimport { createDefaultStats } from \"./statistics\"\n\nconst emptyEnhancedDocument: EnhancedRpJsonDocument = {\n  pages: {},\n  title: {\n    id: 0,\n    tree: [],\n    type: ContentBlockTypes.TABLE,\n    rows: [],\n  },\n  stats: { entities: {}, paragraphs: [] },\n  lastReactId: 0,\n}\n\nexport const useEnhancedDocument = (\n  rpjson: RpJsonDocument | undefined,\n  options: DocumentEnhancerOptions = {},\n): EnhancedRpJsonDocument => {\n  if (!rpjson) return emptyEnhancedDocument\n  if (getDocumentEnhancerMemo(rpjson, options)) return getDocumentEnhancerMemo(rpjson, options)\n  const { body = [], title: rpJsonTitle = {} } = rpjson.content\n  const idIterator = uniqueIdIterator()\n  const stats = createDefaultStats()\n\n  const titleBlock: TextBlock = { text: \"\", ...rpJsonTitle, type: ContentBlockTypes.HEADER }\n  const title = enhanceBlock(titleBlock, {\n    tree: [],\n    textStartAt: 0,\n    stats,\n    paragraphNumber: 0,\n    idIterator,\n    sentenceIterator: uniqueIdIterator(1),\n    rpjson,\n  })\n  const countPages = body\n    .reduce(\n      (acc: Array<number>, block: ContentBlock) => acc.concat(findPageIndexes(block, options)),\n      [],\n    )\n    .filter((page: number, index: number, pages: Array<number>) => pages.indexOf(page) === index)\n  const pages = countPages.reduce((acc, pageIndex) => {\n    const id = idIterator()\n    const content = body\n      .map((block, index) => ({ block, index }))\n      .filter(({ block }) => findPageIndexes(block, options).indexOf(pageIndex) !== -1)\n      .map(({ block, index }: { block: ContentBlock; index: number }) => {\n        const sentenceIterator = uniqueIdIterator(1)\n        return {\n          ...enhanceBlock(block, {\n            tree: [],\n            textStartAt: 0,\n            stats,\n            paragraphNumber: index + 1,\n            idIterator,\n            sentenceIterator,\n            rpjson,\n          }),\n          id: idIterator(),\n        }\n      })\n    return { ...acc, [pageIndex]: { type: EnhancedDocumentTypes.PAGE, tree: [], content, id } }\n  }, {})\n  const retValue = { pages, title, stats, lastReactId: idIterator() }\n  setDocumentEnhancerMemo(rpjson, options, retValue)\n  return retValue\n}\n"],"names":["useEnhancedDocument","emptyEnhancedDocument","pages","title","id","tree","type","ContentBlockTypes","TABLE","rows","stats","entities","paragraphs","lastReactId","rpjson","options","getDocumentEnhancerMemo","body","rpJsonTitle","content","idIterator","uniqueIdIterator","createDefaultStats","titleBlock","text","HEADER","enhanceBlock","textStartAt","paragraphNumber","sentenceIterator","countPages","reduce","acc","block","concat","findPageIndexes","filter","page","index","indexOf","pageIndex","map","EnhancedDocumentTypes","PAGE","retValue","setDocumentEnhancerMemo"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,oCAAoC;;;;+BA0BvBA;;;eAAAA;;;uBAzB8C;kCAO1B;8BACJ;qCACoC;iCACjC;4BACG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEnC,MAAMC,wBAAgD;IACpDC,OAAO,CAAC;IACRC,OAAO;QACLC,IAAI;QACJC,MAAM,EAAE;QACRC,MAAMC,wBAAiB,CAACC,KAAK;QAC7BC,MAAM,EAAE;IACV;IACAC,OAAO;QAAEC,UAAU,CAAC;QAAGC,YAAY,EAAE;IAAC;IACtCC,aAAa;AACf;AAEO,MAAMb,sBAAsB,CACjCc,QACAC,UAAmC,CAAC,CAAC;IAErC,IAAI,CAACD,QAAQ,OAAOb;IACpB,IAAIe,IAAAA,4CAAuB,EAACF,QAAQC,UAAU,OAAOC,IAAAA,4CAAuB,EAACF,QAAQC;IACrF,MAAM,EAAEE,OAAO,EAAE,EAAEd,OAAOe,cAAc,CAAC,CAAC,EAAE,GAAGJ,OAAOK,OAAO;IAC7D,MAAMC,aAAaC,IAAAA,kCAAgB;IACnC,MAAMX,QAAQY,IAAAA,8BAAkB;IAEhC,MAAMC,aAAwB;QAAEC,MAAM;OAAON;QAAaZ,MAAMC,wBAAiB,CAACkB,MAAM;;IACxF,MAAMtB,QAAQuB,IAAAA,0BAAY,EAACH,YAAY;QACrClB,MAAM,EAAE;QACRsB,aAAa;QACbjB;QACAkB,iBAAiB;QACjBR;QACAS,kBAAkBR,IAAAA,kCAAgB,EAAC;QACnCP;IACF;IACA,MAAMgB,aAAab,KAChBc,MAAM,CACL,CAACC,KAAoBC,QAAwBD,IAAIE,MAAM,CAACC,IAAAA,gCAAe,EAACF,OAAOlB,WAC/E,EAAE,EAEHqB,MAAM,CAAC,CAACC,MAAcC,OAAepC,QAAyBA,MAAMqC,OAAO,CAACF,UAAUC;IACzF,MAAMpC,QAAQ4B,WAAWC,MAAM,CAAC,CAACC,KAAKQ;QACpC,MAAMpC,KAAKgB;QACX,MAAMD,UAAUF,KACbwB,GAAG,CAAC,CAACR,OAAOK,QAAW,CAAA;gBAAEL;gBAAOK;YAAM,CAAA,GACtCF,MAAM,CAAC,CAAC,EAAEH,KAAK,EAAE,GAAKE,IAAAA,gCAAe,EAACF,OAAOlB,SAASwB,OAAO,CAACC,eAAe,CAAC,GAC9EC,GAAG,CAAC,CAAC,EAAER,KAAK,EAAEK,KAAK,EAA0C;YAC5D,MAAMT,mBAAmBR,IAAAA,kCAAgB,EAAC;YAC1C,OAAO,wCACFK,IAAAA,0BAAY,EAACO,OAAO;gBACrB5B,MAAM,EAAE;gBACRsB,aAAa;gBACbjB;gBACAkB,iBAAiBU,QAAQ;gBACzBlB;gBACAS;gBACAf;YACF;gBACAV,IAAIgB;;QAER;QACF,OAAO,wCAAKY;YAAK,CAACQ,UAAU,EAAE;gBAAElC,MAAMoC,4BAAqB,CAACC,IAAI;gBAAEtC,MAAM,EAAE;gBAAEc;gBAASf;YAAG;;IAC1F,GAAG,CAAC;IACJ,MAAMwC,WAAW;QAAE1C;QAAOC;QAAOO;QAAOG,aAAaO;IAAa;IAClEyB,IAAAA,4CAAuB,EAAC/B,QAAQC,SAAS6B;IACzC,OAAOA;AACT"}