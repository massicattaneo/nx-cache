feba046317ea07b311ba9b53135e07c8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InlineAttributionDisplay", {
    enumerable: true,
    get: function() {
        return InlineAttributionDisplay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _utils = require("@rp/common/utils");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _ExternalFavicon = require("../ExternalFavicon");
const _removeSnippetEllipsisSpace = require("../removeSnippetEllipsisSpace");
const _InlineAttributionSelector = require("./InlineAttributionSelector");
const InlineAttributionDisplay = ({ attributions, selectedAttribution, setSelectedAttribution })=>{
    const [selectedChunk, setSelectedChunk] = (0, _react.useState)(0);
    const matches = attributions[selectedAttribution].data;
    const data = matches[selectedChunk];
    const { hd, sourceName, ts } = matches[0];
    const setAttributionAndResetChunk = (id)=>{
        setSelectedChunk(0);
        setSelectedAttribution(id);
    };
    const [relatedSource, documentScope, contentType, srcKey, language] = data.type === "CQS" ? [
        data.relatedSource,
        data.documentScope,
        data.contentType,
        data.srcKey,
        data.language
    ] : [];
    const [externalFavicon] = data.type === "EXTERNAL" ? [
        data.externalFavicon
    ] : [];
    const { isLoaded, src, hasError } = (0, _providers.useSourceImage)(relatedSource ? [
        relatedSource
    ] : []);
    const image = isLoaded ? /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
        alt: hd,
        src: src
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
        height: "100%",
        sx: {
            transform: "none"
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            py: 2,
            borderRadius: 2,
            backgroundColor: "elevation.dp03",
            "& > p": {
                fontSize: 14,
                mt: 1.5
            }
        },
        children: [
            attributions.length > 1 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_InlineAttributionSelector.InlineAttributionSelector, {
                attributions: attributions,
                selectedIndex: selectedAttribution,
                onClick: setAttributionAndResetChunk
            }) : null,
            relatedSource && !hasError && src !== "" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    px: 2
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                    sx: {
                        width: "100%",
                        height: 95,
                        mb: 1.5,
                        "& img": {
                            objectFit: "cover",
                            height: 1,
                            width: 1,
                            borderRadius: 2
                        }
                    },
                    children: image
                })
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    color: "text.secondary",
                    alignItems: "center",
                    px: 2,
                    "& p": {
                        fontSize: 12,
                        letterSpacing: 0.25
                    }
                },
                children: [
                    documentScope ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.DocumentIcon, {
                        documentScope: documentScope,
                        contentType: contentType,
                        text: sourceName,
                        srcKey: srcKey
                    }) : null,
                    externalFavicon ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                        sx: {
                            display: "flex",
                            alignItems: "center",
                            gap: 0.5,
                            mr: 0.5,
                            overflow: "hidden",
                            "& img, & svg": {
                                height: 16,
                                width: 16
                            },
                            "& div": {
                                display: "flex"
                            }
                        },
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_ExternalFavicon.ExternalFavicon, {
                                faviconUrl: externalFavicon,
                                alt: sourceName
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                sx: {
                                    whiteSpace: "nowrap",
                                    textOverflow: "ellipsis",
                                    overflow: "hidden"
                                },
                                children: sourceName
                            })
                        ]
                    }) : null,
                    ts ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                        sx: {
                            flexShrink: 0
                        },
                        children: [
                            "· ",
                            (0, _utils.getTimePassed)(ts)
                        ]
                    }) : null,
                    language ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                        sx: {
                            ml: 0.5,
                            flexShrink: 0
                        },
                        children: [
                            "· ",
                            language
                        ]
                    }) : null
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                sx: {
                    px: 2,
                    fontWeight: 700,
                    lineHeight: "20px",
                    display: "-webkit-box",
                    overflowWrap: "break-word",
                    WebkitBoxOrient: "vertical",
                    WebkitLineClamp: 4,
                    overflow: "hidden",
                    color: "text.primary"
                },
                children: (0, _removeSnippetEllipsisSpace.removeSnippetEllipsisSpace)(hd)
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                sx: {
                    color: "text.secondary",
                    display: "-webkit-box",
                    overflowWrap: "break-word",
                    WebkitBoxOrient: "vertical",
                    WebkitLineClamp: 4,
                    overflow: "hidden",
                    px: 2
                },
                children: (0, _removeSnippetEllipsisSpace.removeSnippetEllipsisSpace)(matches[selectedChunk].text)
            }),
            matches.length > 1 ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    px: 0.75
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                        "aria-label": "Previous chunk",
                        size: "small",
                        onClick: ()=>setSelectedChunk((prev)=>Math.max(prev - 1, 0)),
                        onMouseDown: (event)=>event.preventDefault(),
                        disabled: selectedChunk === 0,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.KeyboardArrowLeft, {})
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                        sx: {
                            color: "text.700",
                            fontSize: 14
                        },
                        children: [
                            selectedChunk + 1,
                            " of ",
                            matches.length
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                        "aria-label": "Next chunk",
                        size: "small",
                        onClick: ()=>setSelectedChunk((prev)=>Math.min(prev + 1, matches.length - 1)),
                        onMouseDown: (event)=>event.preventDefault(),
                        disabled: selectedChunk === matches.length - 1,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.KeyboardArrowRight, {})
                    })
                ]
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    px: 2
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                    onClick: matches[selectedChunk].onClick,
                    variant: "contained-light",
                    sx: (theme)=>({
                            color: "primary.main",
                            width: 1,
                            letterSpacing: 1,
                            mt: 2,
                            fontSize: 12,
                            "&:hover": {
                                backgroundColor: (0, _core.alpha)(theme.palette.primary.main, 0.12),
                                outline: 1,
                                outlineColor: "primary.main"
                            }
                        }),
                    children: "Read more"
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L0NoYXQvQ2hhdFJlc3BvbnNlL0lubGluZUF0dHJpYnV0aW9uL0lubGluZUF0dHJpYnV0aW9uRGlzcGxheS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgZ2V0VGltZVBhc3NlZCB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IERvY3VtZW50SWNvbiB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyB1c2VTb3VyY2VJbWFnZSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgQm94LCBCdXR0b24sIEljb25CdXR0b24sIFNrZWxldG9uLCBUeXBvZ3JhcGh5LCBhbHBoYSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IEtleWJvYXJkQXJyb3dMZWZ0LCBLZXlib2FyZEFycm93UmlnaHQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvaWNvbnNcIlxuaW1wb3J0IHsgRXh0ZXJuYWxGYXZpY29uIH0gZnJvbSBcIi4uL0V4dGVybmFsRmF2aWNvblwiXG5pbXBvcnQgeyByZW1vdmVTbmlwcGV0RWxsaXBzaXNTcGFjZSB9IGZyb20gXCIuLi9yZW1vdmVTbmlwcGV0RWxsaXBzaXNTcGFjZVwiXG5pbXBvcnQgeyBJbmxpbmVBdHRyaWJ1dGlvblNlbGVjdG9yIH0gZnJvbSBcIi4vSW5saW5lQXR0cmlidXRpb25TZWxlY3RvclwiXG5pbXBvcnQgeyBHcm91cGVkSW5saW5lQXR0cmlidXRpb25MaXN0IH0gZnJvbSBcIi4vZ2V0SW5saW5lQXR0cmlidXRpb25EYXRhXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgYXR0cmlidXRpb25zOiBHcm91cGVkSW5saW5lQXR0cmlidXRpb25MaXN0XG4gIHNlbGVjdGVkQXR0cmlidXRpb246IG51bWJlclxuICBzZXRTZWxlY3RlZEF0dHJpYnV0aW9uOiAoaW5kZXg6IG51bWJlcikgPT4gdm9pZFxufVxuY29uc3QgSW5saW5lQXR0cmlidXRpb25EaXNwbGF5ID0gKHtcbiAgYXR0cmlidXRpb25zLFxuICBzZWxlY3RlZEF0dHJpYnV0aW9uLFxuICBzZXRTZWxlY3RlZEF0dHJpYnV0aW9uLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgW3NlbGVjdGVkQ2h1bmssIHNldFNlbGVjdGVkQ2h1bmtdID0gdXNlU3RhdGUoMClcbiAgY29uc3QgbWF0Y2hlcyA9IGF0dHJpYnV0aW9uc1tzZWxlY3RlZEF0dHJpYnV0aW9uXS5kYXRhXG4gIGNvbnN0IGRhdGEgPSBtYXRjaGVzW3NlbGVjdGVkQ2h1bmtdXG4gIGNvbnN0IHsgaGQsIHNvdXJjZU5hbWUsIHRzIH0gPSBtYXRjaGVzWzBdXG5cbiAgY29uc3Qgc2V0QXR0cmlidXRpb25BbmRSZXNldENodW5rID0gKGlkOiBudW1iZXIpID0+IHtcbiAgICBzZXRTZWxlY3RlZENodW5rKDApXG4gICAgc2V0U2VsZWN0ZWRBdHRyaWJ1dGlvbihpZClcbiAgfVxuXG4gIGNvbnN0IFtyZWxhdGVkU291cmNlLCBkb2N1bWVudFNjb3BlLCBjb250ZW50VHlwZSwgc3JjS2V5LCBsYW5ndWFnZV0gPVxuICAgIGRhdGEudHlwZSA9PT0gXCJDUVNcIlxuICAgICAgPyBbZGF0YS5yZWxhdGVkU291cmNlLCBkYXRhLmRvY3VtZW50U2NvcGUsIGRhdGEuY29udGVudFR5cGUsIGRhdGEuc3JjS2V5LCBkYXRhLmxhbmd1YWdlXVxuICAgICAgOiBbXVxuICBjb25zdCBbZXh0ZXJuYWxGYXZpY29uXSA9IGRhdGEudHlwZSA9PT0gXCJFWFRFUk5BTFwiID8gW2RhdGEuZXh0ZXJuYWxGYXZpY29uXSA6IFtdXG5cbiAgY29uc3QgeyBpc0xvYWRlZCwgc3JjLCBoYXNFcnJvciB9ID0gdXNlU291cmNlSW1hZ2UocmVsYXRlZFNvdXJjZSA/IFtyZWxhdGVkU291cmNlXSA6IFtdKVxuXG4gIGNvbnN0IGltYWdlID0gaXNMb2FkZWQgPyAoXG4gICAgPGltZyBhbHQ9e2hkfSBzcmM9e3NyY30gLz5cbiAgKSA6IChcbiAgICA8U2tlbGV0b24gaGVpZ2h0PVwiMTAwJVwiIHN4PXt7IHRyYW5zZm9ybTogXCJub25lXCIgfX0gLz5cbiAgKVxuXG4gIHJldHVybiAoXG4gICAgPEJveFxuICAgICAgc3g9e3tcbiAgICAgICAgcHk6IDIsXG4gICAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImVsZXZhdGlvbi5kcDAzXCIsXG4gICAgICAgIFwiJiA+IHBcIjoge1xuICAgICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgICBtdDogMS41LFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7YXR0cmlidXRpb25zLmxlbmd0aCA+IDEgPyAoXG4gICAgICAgIDxJbmxpbmVBdHRyaWJ1dGlvblNlbGVjdG9yXG4gICAgICAgICAgYXR0cmlidXRpb25zPXthdHRyaWJ1dGlvbnN9XG4gICAgICAgICAgc2VsZWN0ZWRJbmRleD17c2VsZWN0ZWRBdHRyaWJ1dGlvbn1cbiAgICAgICAgICBvbkNsaWNrPXtzZXRBdHRyaWJ1dGlvbkFuZFJlc2V0Q2h1bmt9XG4gICAgICAgIC8+XG4gICAgICApIDogbnVsbH1cbiAgICAgIHtyZWxhdGVkU291cmNlICYmICFoYXNFcnJvciAmJiBzcmMgIT09IFwiXCIgPyAoXG4gICAgICAgIDxCb3hcbiAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgcHg6IDIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgaGVpZ2h0OiA5NSxcbiAgICAgICAgICAgICAgbWI6IDEuNSxcbiAgICAgICAgICAgICAgXCImIGltZ1wiOiB7IG9iamVjdEZpdDogXCJjb3ZlclwiLCBoZWlnaHQ6IDEsIHdpZHRoOiAxLCBib3JkZXJSYWRpdXM6IDIgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2ltYWdlfVxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgICkgOiBudWxsfVxuICAgICAgPEJveFxuICAgICAgICBzeD17e1xuICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgIGNvbG9yOiBcInRleHQuc2Vjb25kYXJ5XCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICBweDogMixcbiAgICAgICAgICBcIiYgcFwiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAwLjI1LFxuICAgICAgICAgIH0sXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtkb2N1bWVudFNjb3BlID8gKFxuICAgICAgICAgIDxEb2N1bWVudEljb25cbiAgICAgICAgICAgIGRvY3VtZW50U2NvcGU9e2RvY3VtZW50U2NvcGV9XG4gICAgICAgICAgICBjb250ZW50VHlwZT17Y29udGVudFR5cGV9XG4gICAgICAgICAgICB0ZXh0PXtzb3VyY2VOYW1lfVxuICAgICAgICAgICAgc3JjS2V5PXtzcmNLZXl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIHtleHRlcm5hbEZhdmljb24gPyAoXG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgIGdhcDogMC41LFxuICAgICAgICAgICAgICBtcjogMC41LFxuICAgICAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgXCImIGltZywgJiBzdmdcIjoge1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTYsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgIFwiJiBkaXZcIjoge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RXh0ZXJuYWxGYXZpY29uIGZhdmljb25Vcmw9e2V4dGVybmFsRmF2aWNvbn0gYWx0PXtzb3VyY2VOYW1lfSAvPlxuICAgICAgICAgICAgPFR5cG9ncmFwaHkgc3g9e3sgd2hpdGVTcGFjZTogXCJub3dyYXBcIiwgdGV4dE92ZXJmbG93OiBcImVsbGlwc2lzXCIsIG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxuICAgICAgICAgICAgICB7c291cmNlTmFtZX1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIHt0cyA/IDxUeXBvZ3JhcGh5IHN4PXt7IGZsZXhTaHJpbms6IDAgfX0+wrcge2dldFRpbWVQYXNzZWQodHMpfTwvVHlwb2dyYXBoeT4gOiBudWxsfVxuICAgICAgICB7bGFuZ3VhZ2UgPyA8VHlwb2dyYXBoeSBzeD17eyBtbDogMC41LCBmbGV4U2hyaW5rOiAwIH19PsK3IHtsYW5ndWFnZX08L1R5cG9ncmFwaHk+IDogbnVsbH1cbiAgICAgIDwvQm94PlxuICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBweDogMixcbiAgICAgICAgICBmb250V2VpZ2h0OiA3MDAsXG4gICAgICAgICAgbGluZUhlaWdodDogXCIyMHB4XCIsXG4gICAgICAgICAgZGlzcGxheTogXCItd2Via2l0LWJveFwiLFxuICAgICAgICAgIG92ZXJmbG93V3JhcDogXCJicmVhay13b3JkXCIsXG4gICAgICAgICAgV2Via2l0Qm94T3JpZW50OiBcInZlcnRpY2FsXCIsXG4gICAgICAgICAgV2Via2l0TGluZUNsYW1wOiA0LFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIGNvbG9yOiBcInRleHQucHJpbWFyeVwiLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7cmVtb3ZlU25pcHBldEVsbGlwc2lzU3BhY2UoaGQpfVxuICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiLXdlYmtpdC1ib3hcIixcbiAgICAgICAgICBvdmVyZmxvd1dyYXA6IFwiYnJlYWstd29yZFwiLFxuICAgICAgICAgIFdlYmtpdEJveE9yaWVudDogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgIFdlYmtpdExpbmVDbGFtcDogNCxcbiAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICBweDogMixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3JlbW92ZVNuaXBwZXRFbGxpcHNpc1NwYWNlKG1hdGNoZXNbc2VsZWN0ZWRDaHVua10udGV4dCl9XG4gICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICB7bWF0Y2hlcy5sZW5ndGggPiAxID8gKFxuICAgICAgICA8Qm94XG4gICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIHB4OiAwLjc1LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlByZXZpb3VzIGNodW5rXCJcbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTZWxlY3RlZENodW5rKHByZXYgPT4gTWF0aC5tYXgocHJldiAtIDEsIDApKX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3NlbGVjdGVkQ2h1bmsgPT09IDB9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEtleWJvYXJkQXJyb3dMZWZ0IC8+XG4gICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICBjb2xvcjogXCJ0ZXh0LjcwMFwiLFxuICAgICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtzZWxlY3RlZENodW5rICsgMX0gb2Yge21hdGNoZXMubGVuZ3RofVxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIk5leHQgY2h1bmtcIlxuICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNlbGVjdGVkQ2h1bmsocHJldiA9PiBNYXRoLm1pbihwcmV2ICsgMSwgbWF0Y2hlcy5sZW5ndGggLSAxKSl9XG4gICAgICAgICAgICBvbk1vdXNlRG93bj17ZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtzZWxlY3RlZENodW5rID09PSBtYXRjaGVzLmxlbmd0aCAtIDF9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEtleWJvYXJkQXJyb3dSaWdodCAvPlxuICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgPC9Cb3g+XG4gICAgICApIDogbnVsbH1cbiAgICAgIDxCb3hcbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBweDogMixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e21hdGNoZXNbc2VsZWN0ZWRDaHVua10ub25DbGlja31cbiAgICAgICAgICB2YXJpYW50PVwiY29udGFpbmVkLWxpZ2h0XCJcbiAgICAgICAgICBzeD17dGhlbWUgPT4gKHtcbiAgICAgICAgICAgIGNvbG9yOiBcInByaW1hcnkubWFpblwiLFxuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAxLFxuICAgICAgICAgICAgbXQ6IDIsXG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXG5cbiAgICAgICAgICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuMTIpLFxuICAgICAgICAgICAgICBvdXRsaW5lOiAxLFxuICAgICAgICAgICAgICBvdXRsaW5lQ29sb3I6IFwicHJpbWFyeS5tYWluXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgUmVhZCBtb3JlXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gIClcbn1cblxuZXhwb3J0IHsgSW5saW5lQXR0cmlidXRpb25EaXNwbGF5IH1cbiJdLCJuYW1lcyI6WyJJbmxpbmVBdHRyaWJ1dGlvbkRpc3BsYXkiLCJhdHRyaWJ1dGlvbnMiLCJzZWxlY3RlZEF0dHJpYnV0aW9uIiwic2V0U2VsZWN0ZWRBdHRyaWJ1dGlvbiIsInNlbGVjdGVkQ2h1bmsiLCJzZXRTZWxlY3RlZENodW5rIiwidXNlU3RhdGUiLCJtYXRjaGVzIiwiZGF0YSIsImhkIiwic291cmNlTmFtZSIsInRzIiwic2V0QXR0cmlidXRpb25BbmRSZXNldENodW5rIiwiaWQiLCJyZWxhdGVkU291cmNlIiwiZG9jdW1lbnRTY29wZSIsImNvbnRlbnRUeXBlIiwic3JjS2V5IiwibGFuZ3VhZ2UiLCJ0eXBlIiwiZXh0ZXJuYWxGYXZpY29uIiwiaXNMb2FkZWQiLCJzcmMiLCJoYXNFcnJvciIsInVzZVNvdXJjZUltYWdlIiwiaW1hZ2UiLCJpbWciLCJhbHQiLCJTa2VsZXRvbiIsImhlaWdodCIsInN4IiwidHJhbnNmb3JtIiwiQm94IiwicHkiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250U2l6ZSIsIm10IiwibGVuZ3RoIiwiSW5saW5lQXR0cmlidXRpb25TZWxlY3RvciIsInNlbGVjdGVkSW5kZXgiLCJvbkNsaWNrIiwicHgiLCJ3aWR0aCIsIm1iIiwib2JqZWN0Rml0IiwiZGlzcGxheSIsImNvbG9yIiwiYWxpZ25JdGVtcyIsImxldHRlclNwYWNpbmciLCJEb2N1bWVudEljb24iLCJ0ZXh0IiwiZ2FwIiwibXIiLCJvdmVyZmxvdyIsIkV4dGVybmFsRmF2aWNvbiIsImZhdmljb25VcmwiLCJUeXBvZ3JhcGh5Iiwid2hpdGVTcGFjZSIsInRleHRPdmVyZmxvdyIsImZsZXhTaHJpbmsiLCJnZXRUaW1lUGFzc2VkIiwibWwiLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm92ZXJmbG93V3JhcCIsIldlYmtpdEJveE9yaWVudCIsIldlYmtpdExpbmVDbGFtcCIsInJlbW92ZVNuaXBwZXRFbGxpcHNpc1NwYWNlIiwianVzdGlmeUNvbnRlbnQiLCJJY29uQnV0dG9uIiwiYXJpYS1sYWJlbCIsInNpemUiLCJwcmV2IiwiTWF0aCIsIm1heCIsIm9uTW91c2VEb3duIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImRpc2FibGVkIiwiS2V5Ym9hcmRBcnJvd0xlZnQiLCJtaW4iLCJLZXlib2FyZEFycm93UmlnaHQiLCJCdXR0b24iLCJ2YXJpYW50IiwidGhlbWUiLCJhbHBoYSIsInBhbGV0dGUiLCJwcmltYXJ5IiwibWFpbiIsIm91dGxp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