d782189c006eecd650e81a9214fc556d
/* eslint-disable no-console */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dbStub: function() {
        return dbStub;
    },
    mswStub: function() {
        return mswStub;
    },
    mswTrpcHandlers: function() {
        return mswTrpcHandlers;
    }
});
const _msw = require("msw");
const _environment = require("@rp/common/environment");
const _jsondb = require("@rp/common/json-db");
const _trpc = require("@rp/common/trpc");
const _database = require("../database");
const _trpc1 = require("../trpc");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const dbStub = new _jsondb.JsonDb((0, _database.newEmptyDb)());
async function streamToString(stream) {
    if (!stream) return "";
    try {
        const reader = stream.getReader();
        const decoder = new TextDecoder();
        let result = "";
        // eslint-disable-next-line no-constant-condition
        while(true){
            const { done, value } = await reader.read();
            if (done) break;
            result += decoder.decode(value, {
                stream: true
            });
        }
        // Flush any remaining bytes
        result += decoder.decode();
        return result;
    } catch (error) {
        return "";
    }
}
const createContext = async (info)=>{
    const headers = [];
    info.request.headers.forEach((value, key)=>{
        return headers.push({
            key,
            value
        });
    });
    let jsonBody = {};
    await new Promise((res)=>setTimeout(res, 300)) // simulate BE latency
    ;
    const rawBody = await streamToString(info.request.body);
    try {
        jsonBody = JSON.parse(rawBody);
    } catch (e) {
    //
    }
    return {
        db: dbStub,
        request: {
            headers: headers.reduce((acc, { key, value })=>{
                return _object_spread_props(_object_spread({}, acc), {
                    [key]: value.toString()
                });
            }, {}),
            method: info.request.method.toUpperCase(),
            url: new URL(info.request.url),
            jsonBody,
            rawBody
        }
    };
};
const { handler: bigdataHandler, mock: api, clearAllMocks: apiClear } = (0, _trpc.trpcHttpAdapter)({
    router: _trpc1.trpcBigdataApiRouter,
    createContext
});
const { handler: textAnalyticsHandler, mock: ta, clearAllMocks: taClear } = (0, _trpc.trpcHttpAdapter)({
    router: _trpc1.trpcTextAnalyticsApiRouter,
    createContext
});
const { handler, mock: clerk, clearAllMocks: clerkClear } = (0, _trpc.trpcHttpAdapter)({
    router: _trpc1.clerkApiRouter,
    createContext
});
const chat = _msw.ws.link(_environment.environment.app.wsUrl);
const { onMessage } = (0, _trpc1.chatWebsocketApi)({
    db: dbStub
});
// Helpers to simulate the behavior of the application
// givenIsANewLoggedUser({ db: dbStub, mock: { api, clerk } })
// givenIsANewLoggedOutUser({ db: dbStub, mock: { api, clerk } })
const mswTrpcHandlers = [
    _msw.http.all(`${_environment.environment.app.apiUrl}/**`, async (info)=>{
        try {
            const res = await bigdataHandler(info);
            if (res) return _msw.HttpResponse.json(res.json);
            return;
        } catch (error) {
            console.error("Error in bigdataHandler:", error);
            return _msw.HttpResponse.json({
                error: "Internal Server Error"
            }, {
                status: 500
            });
        }
    }),
    _msw.http.all(`${_environment.environment.app.taUrl}/**`, async (info)=>{
        try {
            const res = await textAnalyticsHandler(info);
            if (res) return _msw.HttpResponse.json(res.json);
            return;
        } catch (error) {
            console.error("Error in textAnalyticsHandler:", error);
            return _msw.HttpResponse.json({
                error: "Internal Server Error"
            }, {
                status: 500
            });
        }
    }),
    _msw.http.all(`${_environment.environment.clerk.origin}/**`, async (info)=>{
        try {
            const res = await handler(info);
            if (res) return _msw.HttpResponse.json(res.json);
            return;
        } catch (error) {
            console.error("Error in clerkHandler:", error);
            return _msw.HttpResponse.json({
                error: "Internal Server Error"
            }, {
                status: 500
            });
        }
    }),
    chat.addEventListener("connection", ({ client })=>{
        client.addEventListener("message", async (event)=>{
            const { messages } = await onMessage(event.data);
            for (const message of messages){
                client.send(JSON.stringify(message));
                await new Promise((resolve)=>setTimeout(resolve, 300)) // simulate BE latency
                ;
            }
        });
    })
];
const mswStub = {
    api,
    apiClear,
    ta,
    taClear,
    clerk,
    clerkClear
};

//# sourceMappingURL=data:application/json;base64,