acc49807140a20fca2b73429377006d2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return effectInit;
    }
});
function effectInit(params) {
    const { effect, swiper, on, setTranslate, setTransition, overwriteParams, perspective, recreateShadows, getEffectParams } = params;
    on('beforeInit', ()=>{
        if (swiper.params.effect !== effect) return;
        swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);
        if (perspective && perspective()) {
            swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
        }
        const overwriteParamsResult = overwriteParams ? overwriteParams() : {};
        Object.assign(swiper.params, overwriteParamsResult);
        Object.assign(swiper.originalParams, overwriteParamsResult);
    });
    on('setTranslate', ()=>{
        if (swiper.params.effect !== effect) return;
        setTranslate();
    });
    on('setTransition', (_s, duration)=>{
        if (swiper.params.effect !== effect) return;
        setTransition(duration);
    });
    on('transitionEnd', ()=>{
        if (swiper.params.effect !== effect) return;
        if (recreateShadows) {
            if (!getEffectParams || !getEffectParams().slideShadows) return;
            // remove shadows
            swiper.slides.forEach((slideEl)=>{
                slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach((shadowEl)=>shadowEl.remove());
            });
            // create new one
            recreateShadows();
        }
    });
    let requireUpdateOnVirtual;
    on('virtualUpdate', ()=>{
        if (swiper.params.effect !== effect) return;
        if (!swiper.slides.length) {
            requireUpdateOnVirtual = true;
        }
        requestAnimationFrame(()=>{
            if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {
                setTranslate();
                requireUpdateOnVirtual = false;
            }
        });
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVmZmVjdEluaXQocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICBlZmZlY3QsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtcyxcbiAgICBwZXJzcGVjdGl2ZSxcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zXG4gIH0gPSBwYXJhbXM7XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtlZmZlY3R9YCk7XG4gICAgaWYgKHBlcnNwZWN0aXZlICYmIHBlcnNwZWN0aXZlKCkpIHtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgfVxuICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKHJlY3JlYXRlU2hhZG93cykge1xuICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuO1xuICAgICAgLy8gcmVtb3ZlIHNoYWRvd3NcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHNoYWRvd0VsLnJlbW92ZSgpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gY3JlYXRlIG5ldyBvbmVcbiAgICAgIHJlY3JlYXRlU2hhZG93cygpO1xuICAgIH1cbiAgfSk7XG4gIGxldCByZXF1aXJlVXBkYXRlT25WaXJ0dWFsO1xuICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0iXSwibmFtZXMiOlsiZWZmZWN0SW5pdCIsInBhcmFtcyIsImVmZmVjdCIsInN3aXBlciIsIm9uIiwic2V0VHJhbnNsYXRlIiwic2V0VHJhbnNpdGlvbiIsIm92ZXJ3cml0ZVBhcmFtcyIsInBlcnNwZWN0aXZlIiwicmVjcmVhdGVTaGFkb3dzIiwiZ2V0RWZmZWN0UGFyYW1zIiwiY2xhc3NOYW1lcyIsInB1c2giLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwib3ZlcndyaXRlUGFyYW1zUmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwib3JpZ2luYWxQYXJhbXMiLCJfcyIsImR1cmF0aW9uIiwic2xpZGVTaGFkb3dzIiwic2xpZGVzIiwiZm9yRWFjaCIsInNsaWRlRWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hhZG93RWwiLCJyZW1vdmUiLCJyZXF1aXJlVXBkYXRlT25WaXJ0dWFsIiwibGVuZ3RoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBQUE7OztlQUF3QkE7OztBQUFULFNBQVNBLFdBQVdDLE1BQU07SUFDdkMsTUFBTSxFQUNKQyxNQUFNLEVBQ05DLE1BQU0sRUFDTkMsRUFBRSxFQUNGQyxZQUFZLEVBQ1pDLGFBQWEsRUFDYkMsZUFBZSxFQUNmQyxXQUFXLEVBQ1hDLGVBQWUsRUFDZkMsZUFBZSxFQUNoQixHQUFHVDtJQUNKRyxHQUFHLGNBQWM7UUFDZixJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQ0MsT0FBT1EsVUFBVSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFVCxPQUFPRixNQUFNLENBQUNZLHNCQUFzQixDQUFDLEVBQUVYLE9BQU8sQ0FBQztRQUN6RSxJQUFJTSxlQUFlQSxlQUFlO1lBQ2hDTCxPQUFPUSxVQUFVLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVULE9BQU9GLE1BQU0sQ0FBQ1ksc0JBQXNCLENBQUMsRUFBRSxDQUFDO1FBQ3BFO1FBQ0EsTUFBTUMsd0JBQXdCUCxrQkFBa0JBLG9CQUFvQixDQUFDO1FBQ3JFUSxPQUFPQyxNQUFNLENBQUNiLE9BQU9GLE1BQU0sRUFBRWE7UUFDN0JDLE9BQU9DLE1BQU0sQ0FBQ2IsT0FBT2MsY0FBYyxFQUFFSDtJQUN2QztJQUNBVixHQUFHLGdCQUFnQjtRQUNqQixJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQ0c7SUFDRjtJQUNBRCxHQUFHLGlCQUFpQixDQUFDYyxJQUFJQztRQUN2QixJQUFJaEIsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckNJLGNBQWNhO0lBQ2hCO0lBQ0FmLEdBQUcsaUJBQWlCO1FBQ2xCLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDLElBQUlPLGlCQUFpQjtZQUNuQixJQUFJLENBQUNDLG1CQUFtQixDQUFDQSxrQkFBa0JVLFlBQVksRUFBRTtZQUN6RCxpQkFBaUI7WUFDakJqQixPQUFPa0IsTUFBTSxDQUFDQyxPQUFPLENBQUNDLENBQUFBO2dCQUNwQkEsUUFBUUMsZ0JBQWdCLENBQUMsZ0hBQWdIRixPQUFPLENBQUNHLENBQUFBLFdBQVlBLFNBQVNDLE1BQU07WUFDOUs7WUFDQSxpQkFBaUI7WUFDakJqQjtRQUNGO0lBQ0Y7SUFDQSxJQUFJa0I7SUFDSnZCLEdBQUcsaUJBQWlCO1FBQ2xCLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDLElBQUksQ0FBQ0MsT0FBT2tCLE1BQU0sQ0FBQ08sTUFBTSxFQUFFO1lBQ3pCRCx5QkFBeUI7UUFDM0I7UUFDQUUsc0JBQXNCO1lBQ3BCLElBQUlGLDBCQUEwQnhCLE9BQU9rQixNQUFNLElBQUlsQixPQUFPa0IsTUFBTSxDQUFDTyxNQUFNLEVBQUU7Z0JBQ25FdkI7Z0JBQ0FzQix5QkFBeUI7WUFDM0I7UUFDRjtJQUNGO0FBQ0YifQ==