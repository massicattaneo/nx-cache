{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/utils/src/lib/uuid.ts"],"sourcesContent":["/**\nA function that returns a universally unique identifier (uuid).  \nexample: 1b83fd69-abe7-468c-bea1-306a8aa1c81d\n@returns `string` : 32 character uuid (see example)\n*/\nconst getUuid = () => {\n  const hashTable = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n  const uuid = []\n  for (let i = 0; i < 36; i++) {\n    if (i === 8 || i === 13 || i === 18 || i === 23) {\n      uuid[i] = \"-\"\n    } else {\n      uuid[i] = hashTable[Math.ceil(Math.random() * hashTable.length - 1)]\n    }\n  }\n  return uuid.join(\"\")\n}\n\nexport { getUuid }\n"],"names":["getUuid","hashTable","uuid","i","Math","ceil","random","length","join"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;AAIA;;;;+BAcSA;;;eAAAA;;;AAbT,MAAMA,UAAU;IACd,MAAMC,YAAY;QAAC;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;QAAK;KAAI;IAClG,MAAMC,OAAO,EAAE;IACf,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAIA,IAAK;QAC3B,IAAIA,MAAM,KAAKA,MAAM,MAAMA,MAAM,MAAMA,MAAM,IAAI;YAC/CD,IAAI,CAACC,EAAE,GAAG;QACZ,OAAO;YACLD,IAAI,CAACC,EAAE,GAAGF,SAAS,CAACG,KAAKC,IAAI,CAACD,KAAKE,MAAM,KAAKL,UAAUM,MAAM,GAAG,GAAG;QACtE;IACF;IACA,OAAOL,KAAKM,IAAI,CAAC;AACnB"}