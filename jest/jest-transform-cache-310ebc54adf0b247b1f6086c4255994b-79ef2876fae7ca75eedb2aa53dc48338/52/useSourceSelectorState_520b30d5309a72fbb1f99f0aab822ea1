ccb63dd88f6444cbbdf6e32bca442470
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSourceSelectorState", {
    enumerable: true,
    get: function() {
        return useSourceSelectorState;
    }
});
const _react = require("react");
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _providers = require("@rp/react/web/common/providers");
const _sourceSelectorconstants = require("../sourceSelector.constants");
const _getIsAutosuggestSourceSelectedAnywhereFunc = require("../utils/getIsAutosuggestSourceSelectedAnywhereFunc");
const _getIsContentElementSelectedByID = require("../utils/getIsContentElementSelectedByID");
const _getIsSourceSelectorPristine = require("../utils/getIsSourceSelectorPristine");
const _getPackageAndSourceIntersectionFunc = require("../utils/getPackageAndSourceIntersectionFunc");
const _getSourceSelectionTotals = require("../utils/getSourceSelectionTotals");
const _handleApplyClickFunc = require("../utils/handleApplyClickFunc");
const _removeContentSelectionFunc = require("../utils/removeContentSelectionFunc");
const _resetSourceSelectorState = require("../utils/resetSourceSelectorState");
const _setSelectedSourceFunc = require("../utils/setSelectedSourceFunc");
const _togglePackageSelectionFunc = require("../utils/togglePackageSelectionFunc");
const _toggleSourceSelectionFunc = require("../utils/toggleSourceSelectionFunc");
const _useSourceSelectorStateInitializeFull = require("./useSourceSelectorStateInitializeFull");
function useSourceSelectorState({ initialState, applyCallback, allContentPackages, allAutosuggestSources }) {
    const { enqueueError } = (0, _providers.useSnackbar)();
    const { enableWebFeSourceSelectorV1SelectAll } = (0, _launchdarklyreactclientsdk.useFlags)();
    const [selectedAllPackages, setSelectedAllPackages] = (0, _react.useState)([]);
    const [selectedSources, setSelectedSources] = (0, _react.useState)([]);
    const [isFilterInclude, setIsFilterInclude] = (0, _react.useState)(true);
    const { initialStateFull, isInitializingState } = (0, _useSourceSelectorStateInitializeFull.useSourceSelectorStateInitializeFull)({
        initialState,
        setSelectedSources,
        setSelectedAllPackages,
        setIsFilterInclude
    });
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers.useModal)();
    const hasReachedMaxSelection = (0, _react.useMemo)(()=>selectedSources.length + selectedAllPackages.length >= _sourceSelectorconstants.CONTENT_SOURCES_MAX_SELECTION, [
        selectedSources,
        selectedAllPackages
    ]);
    const showMaxSelectionErrorToast = (0, _react.useCallback)(()=>{
        enqueueError(`You've reached the limit of ${_sourceSelectorconstants.CONTENT_SOURCES_MAX_SELECTION} sources`);
    }, [
        enqueueError
    ]);
    // TODO: effect to initialize state
    const toggleSourceSelection = (0, _react.useCallback)((e)=>(0, _toggleSourceSelectionFunc.toggleSourceSelectionFunc)({
            e,
            selectedSources,
            setSelectedSources,
            allAutosuggestSources,
            hasReachedMaxSelection,
            showMaxSelectionErrorToast,
            planComparisonHandleOpen
        }), [
        selectedSources,
        allAutosuggestSources,
        hasReachedMaxSelection,
        showMaxSelectionErrorToast,
        planComparisonHandleOpen
    ]);
    const setSelectedSource = (0, _react.useCallback)((source)=>(0, _setSelectedSourceFunc.setSelectedSourceFunc)({
            source,
            selectedSources,
            setSelectedSources,
            planComparisonHandleOpen
        }), [
        planComparisonHandleOpen,
        selectedSources
    ]);
    const togglePackageSelectAllSelection = (0, _react.useCallback)((e)=>(0, _togglePackageSelectionFunc.togglePackageSelectionFunc)({
            e,
            selectedAllPackages,
            setSelectedAllPackages,
            allContentPackages,
            hasReachedMaxSelection,
            showMaxSelectionErrorToast,
            planComparisonHandleOpen
        }), [
        selectedAllPackages,
        allContentPackages,
        hasReachedMaxSelection,
        showMaxSelectionErrorToast,
        planComparisonHandleOpen
    ]);
    const getIsPackageSelectAllSelected = (0, _react.useCallback)((id)=>(0, _getIsContentElementSelectedByID.getIsContentElementSelectedByID)(id, selectedAllPackages), [
        selectedAllPackages
    ]);
    const getIsContentAutosuggestSelectedByID = (0, _react.useCallback)((id)=>(0, _getIsContentElementSelectedByID.getIsContentElementSelectedByID)(id, selectedSources), [
        selectedSources
    ]);
    const getPackageAndSourceIntersection = (0, _react.useCallback)((autosuggestSource)=>(0, _getPackageAndSourceIntersectionFunc.getPackageAndSourceIntersectionFunc)(autosuggestSource, selectedAllPackages), [
        selectedAllPackages
    ]);
    const handleResetClick = (0, _react.useCallback)(()=>{
        (0, _resetSourceSelectorState.resetSourceSelectorState)({
            setSelectedAllPackages,
            setSelectedSources,
            setIsFilterInclude,
            initialStateFull
        });
    }, [
        initialStateFull
    ]);
    const handleApplyClick = (0, _react.useCallback)(()=>{
        (0, _handleApplyClickFunc.handleApplyClickFunc)({
            isFilterInclude,
            selectedSources,
            selectedAllPackages: enableWebFeSourceSelectorV1SelectAll ? selectedAllPackages : [],
            applyCallback
        });
    }, [
        applyCallback,
        isFilterInclude,
        selectedAllPackages,
        selectedSources,
        enableWebFeSourceSelectorV1SelectAll
    ]);
    const isPristine = (0, _react.useMemo)(()=>(0, _getIsSourceSelectorPristine.getIsSourceSelectorPristine)({
            isFilterInclude,
            selectedSources,
            selectedAllPackages,
            initialStateFull
        }), [
        isFilterInclude,
        selectedSources,
        selectedAllPackages,
        initialStateFull
    ]);
    const removeContentSelection = (0, _react.useCallback)((selectedContentElement)=>{
        (0, _removeContentSelectionFunc.removeContentSelectionFunc)({
            selectedContentElement,
            selectedSources,
            selectedAllPackages,
            setSelectedSources,
            setSelectedAllPackages
        });
    }, [
        selectedAllPackages,
        selectedSources
    ]);
    const toggleIsFilterInclude = (0, _react.useCallback)(()=>setIsFilterInclude((s)=>!s), []);
    const getIsAutosuggestSourceSelectedAnywhere = (0, _react.useCallback)((autosuggestSource)=>(0, _getIsAutosuggestSourceSelectedAnywhereFunc.getIsAutosuggestSourceSelectedAnywhereFunc)({
            autosuggestSource,
            selectedAllPackages,
            selectedSources
        }), [
        selectedSources,
        selectedAllPackages
    ]);
    const sourceSelectionTotals = (0, _react.useMemo)(()=>(0, _getSourceSelectionTotals.getSourceSelectionTotals)({
            selectedAllPackages,
            selectedSources
        }), [
        selectedAllPackages,
        selectedSources
    ]);
    return {
        getIsAutosuggestSourceSelectedAnywhere,
        getIsContentAutosuggestSelectedByID,
        getIsPackageSelectAllSelected,
        getPackageAndSourceIntersection,
        handleApplyClick,
        handleResetClick,
        isFilterInclude,
        isInitializingState,
        isPristine,
        removeContentSelection,
        selectedAllPackages,
        selectedSources,
        setSelectedSource,
        sourceSelectionTotals,
        toggleIsFilterInclude,
        togglePackageSelectAllSelection,
        toggleSourceSelection
    };
}

//# sourceMappingURL=data:application/json;base64,