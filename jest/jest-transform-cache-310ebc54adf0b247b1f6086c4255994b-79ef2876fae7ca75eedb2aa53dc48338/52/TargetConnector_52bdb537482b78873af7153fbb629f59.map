{"version":3,"sources":["../../src/internals/TargetConnector.ts"],"sourcesContent":["import { shallowEqual } from '@react-dnd/shallowequal'\nimport type { Backend, Identifier, Unsubscribe } from 'dnd-core'\nimport type { RefObject } from 'react'\n\nimport type { DropTargetOptions } from '../types/index.js'\nimport { isRef } from './isRef.js'\nimport type { Connector } from './SourceConnector.js'\nimport { wrapConnectorHooks } from './wrapConnectorHooks.js'\n\nexport class TargetConnector implements Connector {\n\tpublic hooks = wrapConnectorHooks({\n\t\tdropTarget: (node: any, options: DropTargetOptions) => {\n\t\t\tthis.clearDropTarget()\n\t\t\tthis.dropTargetOptions = options\n\t\t\tif (isRef(node)) {\n\t\t\t\tthis.dropTargetRef = node\n\t\t\t} else {\n\t\t\t\tthis.dropTargetNode = node\n\t\t\t}\n\t\t\tthis.reconnect()\n\t\t},\n\t})\n\n\tprivate handlerId: Identifier | null = null\n\t// The drop target may either be attached via ref or connect function\n\tprivate dropTargetRef: RefObject<any> | null = null\n\tprivate dropTargetNode: any\n\tprivate dropTargetOptionsInternal: DropTargetOptions | null = null\n\tprivate unsubscribeDropTarget: Unsubscribe | undefined\n\n\tprivate lastConnectedHandlerId: Identifier | null = null\n\tprivate lastConnectedDropTarget: any = null\n\tprivate lastConnectedDropTargetOptions: DropTargetOptions | null = null\n\tprivate readonly backend: Backend\n\n\tpublic constructor(backend: Backend) {\n\t\tthis.backend = backend\n\t}\n\n\tpublic get connectTarget(): any {\n\t\treturn this.dropTarget\n\t}\n\n\tpublic reconnect(): void {\n\t\t// if nothing has changed then don't resubscribe\n\t\tconst didChange =\n\t\t\tthis.didHandlerIdChange() ||\n\t\t\tthis.didDropTargetChange() ||\n\t\t\tthis.didOptionsChange()\n\n\t\tif (didChange) {\n\t\t\tthis.disconnectDropTarget()\n\t\t}\n\n\t\tconst dropTarget = this.dropTarget\n\t\tif (!this.handlerId) {\n\t\t\treturn\n\t\t}\n\t\tif (!dropTarget) {\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\treturn\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis.lastConnectedHandlerId = this.handlerId\n\t\t\tthis.lastConnectedDropTarget = dropTarget\n\t\t\tthis.lastConnectedDropTargetOptions = this.dropTargetOptions\n\n\t\t\tthis.unsubscribeDropTarget = this.backend.connectDropTarget(\n\t\t\t\tthis.handlerId,\n\t\t\t\tdropTarget,\n\t\t\t\tthis.dropTargetOptions,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic receiveHandlerId(newHandlerId: Identifier | null): void {\n\t\tif (newHandlerId === this.handlerId) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.handlerId = newHandlerId\n\t\tthis.reconnect()\n\t}\n\n\tpublic get dropTargetOptions(): DropTargetOptions {\n\t\treturn this.dropTargetOptionsInternal\n\t}\n\tpublic set dropTargetOptions(options: DropTargetOptions) {\n\t\tthis.dropTargetOptionsInternal = options\n\t}\n\n\tprivate didHandlerIdChange(): boolean {\n\t\treturn this.lastConnectedHandlerId !== this.handlerId\n\t}\n\n\tprivate didDropTargetChange(): boolean {\n\t\treturn this.lastConnectedDropTarget !== this.dropTarget\n\t}\n\n\tprivate didOptionsChange(): boolean {\n\t\treturn !shallowEqual(\n\t\t\tthis.lastConnectedDropTargetOptions,\n\t\t\tthis.dropTargetOptions,\n\t\t)\n\t}\n\n\tpublic disconnectDropTarget() {\n\t\tif (this.unsubscribeDropTarget) {\n\t\t\tthis.unsubscribeDropTarget()\n\t\t\tthis.unsubscribeDropTarget = undefined\n\t\t}\n\t}\n\n\tprivate get dropTarget() {\n\t\treturn (\n\t\t\tthis.dropTargetNode || (this.dropTargetRef && this.dropTargetRef.current)\n\t\t)\n\t}\n\n\tprivate clearDropTarget() {\n\t\tthis.dropTargetRef = null\n\t\tthis.dropTargetNode = null\n\t}\n}\n"],"names":["TargetConnector","connectTarget","dropTarget","reconnect","didChange","didHandlerIdChange","didDropTargetChange","didOptionsChange","disconnectDropTarget","handlerId","lastConnectedDropTarget","lastConnectedHandlerId","lastConnectedDropTargetOptions","dropTargetOptions","unsubscribeDropTarget","backend","connectDropTarget","receiveHandlerId","newHandlerId","dropTargetOptionsInternal","options","shallowEqual","undefined","dropTargetNode","dropTargetRef","current","clearDropTarget","constructor","hooks","wrapConnectorHooks","node","isRef"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASaA;;;eAAAA;;;8BATgB;uBAKP;oCAEa;AAE5B,MAAMA;IA8BZ,IAAWC,gBAAqB;QAC/B,OAAO,IAAI,CAACC,UAAU;;IAGvBC,YAAyB;QACxB,gDAAgD;QAChD,MAAMC,YACL,IAAI,CAACC,kBAAkB,MACvB,IAAI,CAACC,mBAAmB,MACxB,IAAI,CAACC,gBAAgB;QAEtB,IAAIH,WAAW;YACd,IAAI,CAACI,oBAAoB;;QAG1B,MAAMN,aAAa,IAAI,CAACA,UAAU;QAClC,IAAI,CAAC,IAAI,CAACO,SAAS,EAAE;YACpB;;QAED,IAAI,CAACP,YAAY;YAChB,IAAI,CAACQ,uBAAuB,GAAGR;YAC/B;;QAGD,IAAIE,WAAW;YACd,IAAI,CAACO,sBAAsB,GAAG,IAAI,CAACF,SAAS;YAC5C,IAAI,CAACC,uBAAuB,GAAGR;YAC/B,IAAI,CAACU,8BAA8B,GAAG,IAAI,CAACC,iBAAiB;YAE5D,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACC,OAAO,CAACC,iBAAiB,CAC1D,IAAI,CAACP,SAAS,EACdP,YACA,IAAI,CAACW,iBAAiB;;;IAKzBI,iBAAwBC,YAA+B,EAAQ;QAC9D,IAAIA,iBAAiB,IAAI,CAACT,SAAS,EAAE;YACpC;;QAGD,IAAI,CAACA,SAAS,GAAGS;QACjB,IAAI,CAACf,SAAS;;IAGf,IAAWU,oBAAuC;QACjD,OAAO,IAAI,CAACM,yBAAyB;;IAEtC,IAAWN,kBAAkBO,OAA0B,EAAE;QACxD,IAAI,CAACD,yBAAyB,GAAGC;;IAGlCf,qBAAsC;QACrC,OAAO,IAAI,CAACM,sBAAsB,KAAK,IAAI,CAACF,SAAS;;IAGtDH,sBAAuC;QACtC,OAAO,IAAI,CAACI,uBAAuB,KAAK,IAAI,CAACR,UAAU;;IAGxDK,mBAAoC;QACnC,OAAO,CAACc,IAAAA,0BAAY,EACnB,IAAI,CAACT,8BAA8B,EACnC,IAAI,CAACC,iBAAiB;;IAIxBL,uBAA8B;QAC7B,IAAI,IAAI,CAACM,qBAAqB,EAAE;YAC/B,IAAI,CAACA,qBAAqB;YAC1B,IAAI,CAACA,qBAAqB,GAAGQ;;;IAI/B,IAAYpB,aAAa;QACxB,OACC,IAAI,CAACqB,cAAc,IAAK,IAAI,CAACC,aAAa,IAAI,IAAI,CAACA,aAAa,CAACC,OAAO;;IAI1EC,kBAA0B;QACzB,IAAI,CAACF,aAAa,GAAG;QACrB,IAAI,CAACD,cAAc,GAAG;;IAvFvBI,YAAmBZ,OAAgB,CAAE;QAzBrC,IAAA,CAAOa,KAAK,GAAGC,IAAAA,sCAAkB,EAAC;YACjC3B,YAAY,CAAC4B,MAAWV;gBACvB,IAAI,CAACM,eAAe;gBACpB,IAAI,CAACb,iBAAiB,GAAGO;gBACzB,IAAIW,IAAAA,YAAK,EAACD,OAAO;oBAChB,IAAI,CAACN,aAAa,GAAGM;uBACf;oBACN,IAAI,CAACP,cAAc,GAAGO;;gBAEvB,IAAI,CAAC3B,SAAS;;;QAIhB,IAAA,CAAQM,SAAS,GAAsB;QACvC,qEAAqE;QACrE,IAAA,CAAQe,aAAa,GAA0B;QAE/C,IAAA,CAAQL,yBAAyB,GAA6B;QAG9D,IAAA,CAAQR,sBAAsB,GAAsB;QACpD,IAAA,CAAQD,uBAAuB,GAAQ;QACvC,IAAA,CAAQE,8BAA8B,GAA6B;QAIlE,IAAI,CAACG,OAAO,GAAGA"}