{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/source-selector/src/hooks/useSourceSelectorState.ts"],"sourcesContent":["import { useCallback, useMemo, useState } from \"react\"\nimport { useFlags } from \"launchdarkly-react-client-sdk\"\nimport type {\n  AutosuggestSource,\n  ContentPackage,\n  SourceSelectorSubmission,\n} from \"@rp/react/tanstack-api/content\"\nimport { useModal, useSnackbar } from \"@rp/react/web/common/providers\"\nimport { CONTENT_SOURCES_MAX_SELECTION } from \"../sourceSelector.constants\"\nimport {\n  SourceSelectionTotals,\n  SourceSelectorFeatureFlags,\n  SourceSelectorSelectedPackageInfo,\n  SourceSelectorSelectedSourceInfo,\n} from \"../sourceSelector.types\"\nimport { getIsAutosuggestSourceSelectedAnywhereFunc } from \"../utils/getIsAutosuggestSourceSelectedAnywhereFunc\"\nimport { getIsContentElementSelectedByID } from \"../utils/getIsContentElementSelectedByID\"\nimport { getIsSourceSelectorPristine } from \"../utils/getIsSourceSelectorPristine\"\nimport { getPackageAndSourceIntersectionFunc } from \"../utils/getPackageAndSourceIntersectionFunc\"\nimport { getSourceSelectionTotals } from \"../utils/getSourceSelectionTotals\"\nimport { handleApplyClickFunc } from \"../utils/handleApplyClickFunc\"\nimport { removeContentSelectionFunc } from \"../utils/removeContentSelectionFunc\"\nimport { resetSourceSelectorState } from \"../utils/resetSourceSelectorState\"\nimport { setSelectedSourceFunc } from \"../utils/setSelectedSourceFunc\"\nimport { togglePackageSelectionFunc } from \"../utils/togglePackageSelectionFunc\"\nimport { toggleSourceSelectionFunc } from \"../utils/toggleSourceSelectionFunc\"\nimport { useSourceSelectorStateInitializeFull } from \"./useSourceSelectorStateInitializeFull\"\n\ntype UseSourceSelectorProps = {\n  initialState: SourceSelectorSubmission | undefined\n  applyCallback: (sourceSelectionSubmission: SourceSelectorSubmission) => void\n  allContentPackages: Array<ContentPackage>\n  allAutosuggestSources: Array<AutosuggestSource>\n}\n\ntype UseSourceSelectorState = {\n  getIsAutosuggestSourceSelectedAnywhere: (autosuggestSource: AutosuggestSource) => boolean\n  getIsContentAutosuggestSelectedByID: (id: string) => boolean\n  getIsPackageSelectAllSelected: (id: string | undefined) => boolean\n  getPackageAndSourceIntersection: (autosuggestSource: AutosuggestSource) => Array<string> | null\n  handleApplyClick: () => void\n  handleResetClick: () => void\n  isFilterInclude: boolean\n  isInitializingState: boolean\n  isPristine: boolean\n  removeContentSelection: (\n    selection: SourceSelectorSelectedPackageInfo | SourceSelectorSelectedSourceInfo,\n  ) => void\n  selectedAllPackages: Array<SourceSelectorSelectedPackageInfo>\n  selectedSources: Array<SourceSelectorSelectedSourceInfo>\n  setSelectedSource: (source: AutosuggestSource) => void\n  sourceSelectionTotals: SourceSelectionTotals\n  toggleIsFilterInclude: () => void\n  togglePackageSelectAllSelection: (e: React.MouseEvent<HTMLDivElement>) => void\n  toggleSourceSelection: (e: React.MouseEvent<HTMLDivElement>) => void\n}\n\nfunction useSourceSelectorState({\n  initialState,\n  applyCallback,\n  allContentPackages,\n  allAutosuggestSources,\n}: UseSourceSelectorProps): UseSourceSelectorState {\n  const { enqueueError } = useSnackbar()\n  const { enableWebFeSourceSelectorV1SelectAll } = useFlags<SourceSelectorFeatureFlags>()\n  const [selectedAllPackages, setSelectedAllPackages] = useState<\n    Array<SourceSelectorSelectedPackageInfo>\n  >([])\n  const [selectedSources, setSelectedSources] = useState<Array<SourceSelectorSelectedSourceInfo>>(\n    [],\n  )\n  const [isFilterInclude, setIsFilterInclude] = useState(true)\n\n  const { initialStateFull, isInitializingState } = useSourceSelectorStateInitializeFull({\n    initialState,\n    setSelectedSources,\n    setSelectedAllPackages,\n    setIsFilterInclude,\n  })\n\n  const {\n    planComparisonModal: { handleOpen: planComparisonHandleOpen },\n  } = useModal()\n\n  const hasReachedMaxSelection = useMemo(\n    () => selectedSources.length + selectedAllPackages.length >= CONTENT_SOURCES_MAX_SELECTION,\n    [selectedSources, selectedAllPackages],\n  )\n\n  const showMaxSelectionErrorToast = useCallback(() => {\n    enqueueError(`You've reached the limit of ${CONTENT_SOURCES_MAX_SELECTION} sources`)\n  }, [enqueueError])\n\n  // TODO: effect to initialize state\n\n  const toggleSourceSelection = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) =>\n      toggleSourceSelectionFunc({\n        e,\n        selectedSources,\n        setSelectedSources,\n        allAutosuggestSources,\n        hasReachedMaxSelection,\n        showMaxSelectionErrorToast,\n        planComparisonHandleOpen,\n      }),\n    [\n      selectedSources,\n      allAutosuggestSources,\n      hasReachedMaxSelection,\n      showMaxSelectionErrorToast,\n      planComparisonHandleOpen,\n    ],\n  )\n\n  const setSelectedSource = useCallback(\n    (source: AutosuggestSource) =>\n      setSelectedSourceFunc({\n        source,\n        selectedSources,\n        setSelectedSources,\n        planComparisonHandleOpen,\n      }),\n    [planComparisonHandleOpen, selectedSources],\n  )\n\n  const togglePackageSelectAllSelection = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) =>\n      togglePackageSelectionFunc({\n        e,\n        selectedAllPackages,\n        setSelectedAllPackages,\n        allContentPackages,\n        hasReachedMaxSelection,\n        showMaxSelectionErrorToast,\n        planComparisonHandleOpen,\n      }),\n    [\n      selectedAllPackages,\n      allContentPackages,\n      hasReachedMaxSelection,\n      showMaxSelectionErrorToast,\n      planComparisonHandleOpen,\n    ],\n  )\n\n  const getIsPackageSelectAllSelected = useCallback(\n    (id: string | undefined) => getIsContentElementSelectedByID(id, selectedAllPackages),\n    [selectedAllPackages],\n  )\n\n  const getIsContentAutosuggestSelectedByID = useCallback(\n    (id: string) => getIsContentElementSelectedByID(id, selectedSources),\n    [selectedSources],\n  )\n\n  const getPackageAndSourceIntersection = useCallback(\n    (autosuggestSource: AutosuggestSource): Array<string> | null =>\n      getPackageAndSourceIntersectionFunc(autosuggestSource, selectedAllPackages),\n    [selectedAllPackages],\n  )\n\n  const handleResetClick = useCallback(() => {\n    resetSourceSelectorState({\n      setSelectedAllPackages,\n      setSelectedSources,\n      setIsFilterInclude,\n      initialStateFull,\n    })\n  }, [initialStateFull])\n\n  const handleApplyClick = useCallback(() => {\n    handleApplyClickFunc({\n      isFilterInclude,\n      selectedSources,\n      selectedAllPackages: enableWebFeSourceSelectorV1SelectAll ? selectedAllPackages : [],\n      applyCallback,\n    })\n  }, [\n    applyCallback,\n    isFilterInclude,\n    selectedAllPackages,\n    selectedSources,\n    enableWebFeSourceSelectorV1SelectAll,\n  ])\n\n  const isPristine = useMemo(\n    () =>\n      getIsSourceSelectorPristine({\n        isFilterInclude,\n        selectedSources,\n        selectedAllPackages,\n        initialStateFull,\n      }),\n    [isFilterInclude, selectedSources, selectedAllPackages, initialStateFull],\n  )\n\n  const removeContentSelection = useCallback(\n    (\n      selectedContentElement: SourceSelectorSelectedPackageInfo | SourceSelectorSelectedSourceInfo,\n    ) => {\n      removeContentSelectionFunc({\n        selectedContentElement,\n        selectedSources,\n        selectedAllPackages,\n        setSelectedSources,\n        setSelectedAllPackages,\n      })\n    },\n    [selectedAllPackages, selectedSources],\n  )\n\n  const toggleIsFilterInclude = useCallback(() => setIsFilterInclude(s => !s), [])\n\n  const getIsAutosuggestSourceSelectedAnywhere = useCallback(\n    (autosuggestSource: AutosuggestSource) =>\n      getIsAutosuggestSourceSelectedAnywhereFunc({\n        autosuggestSource,\n        selectedAllPackages,\n        selectedSources,\n      }),\n    [selectedSources, selectedAllPackages],\n  )\n\n  const sourceSelectionTotals = useMemo(\n    () =>\n      getSourceSelectionTotals({\n        selectedAllPackages,\n        selectedSources,\n      }),\n    [selectedAllPackages, selectedSources],\n  )\n\n  return {\n    getIsAutosuggestSourceSelectedAnywhere,\n    getIsContentAutosuggestSelectedByID,\n    getIsPackageSelectAllSelected,\n    getPackageAndSourceIntersection,\n    handleApplyClick,\n    handleResetClick,\n    isFilterInclude,\n    isInitializingState,\n    isPristine,\n    removeContentSelection,\n    selectedAllPackages,\n    selectedSources,\n    setSelectedSource,\n    sourceSelectionTotals,\n    toggleIsFilterInclude,\n    togglePackageSelectAllSelection,\n    toggleSourceSelection,\n  }\n}\n\nexport { useSourceSelectorState }\n"],"names":["useSourceSelectorState","initialState","applyCallback","allContentPackages","allAutosuggestSources","enqueueError","useSnackbar","enableWebFeSourceSelectorV1SelectAll","useFlags","selectedAllPackages","setSelectedAllPackages","useState","selectedSources","setSelectedSources","isFilterInclude","setIsFilterInclude","initialStateFull","isInitializingState","useSourceSelectorStateInitializeFull","planComparisonModal","handleOpen","planComparisonHandleOpen","useModal","hasReachedMaxSelection","useMemo","length","CONTENT_SOURCES_MAX_SELECTION","showMaxSelectionErrorToast","useCallback","toggleSourceSelection","e","toggleSourceSelectionFunc","setSelectedSource","source","setSelectedSourceFunc","togglePackageSelectAllSelection","togglePackageSelectionFunc","getIsPackageSelectAllSelected","id","getIsContentElementSelectedByID","getIsContentAutosuggestSelectedByID","getPackageAndSourceIntersection","autosuggestSource","getPackageAndSourceIntersectionFunc","handleResetClick","resetSourceSelectorState","handleApplyClick","handleApplyClickFunc","isPristine","getIsSourceSelectorPristine","removeContentSelection","selectedContentElement","removeContentSelectionFunc","toggleIsFilterInclude","s","getIsAutosuggestSourceSelectedAnywhere","getIsAutosuggestSourceSelectedAnywhereFunc","sourceSelectionTotals","getSourceSelectionTotals"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}