aa6ca31f1a59284a6fcc03f4ca4c1473
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAgentEvents", {
    enumerable: true,
    get: function() {
        return useAgentEvents;
    }
});
const _react = require("react");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _useSSE = require("../useSSE");
const _handlers = require("./handlers");
const _getPromptWithContext = require("./utils/getPromptWithContext");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var _getApiEnvironmentConfig_url;
const EVENT_SOURCE_URL = (_getApiEnvironmentConfig_url = (0, _utils.getApiEnvironmentConfig)("agents").url) !== null && _getApiEnvironmentConfig_url !== void 0 ? _getApiEnvironmentConfig_url : "";
const PATH = "/bff/v1/agent/execute";
const defaultAgentData = {
    frames: [],
    answerStream: [],
    closed: false,
    isLoading: true,
    error: undefined,
    requestId: "",
    references: {}
};
function useAgentEvents(props) {
    const { chatId, onComplete, agentEnabled, onError } = props;
    const onCompleteCallbackExecuted = (0, _react.useRef)(false);
    const [agentData, setAgentData] = (0, _react.useState)(defaultAgentData);
    const [isFrameCompleted, setFrameCompleted] = (0, _react.useState)(false);
    const handleErrorMessage = (0, _react.useCallback)(function handleErrorMessage(disposeConnection, data) {
        if (data) {
            setAgentData((prevState)=>{
                var _data_requestId;
                return _object_spread_props(_object_spread({}, prevState), {
                    error: data.error,
                    requestId: (_data_requestId = data.requestId) !== null && _data_requestId !== void 0 ? _data_requestId : prevState.requestId
                });
            });
        }
        var _data_error;
        onError === null || onError === void 0 ? void 0 : onError({
            response: "",
            responseBlocks: [],
            timings: {
                start: Date.now()
            },
            auditTraces: [],
            originSources: [],
            interactionType: "user_message",
            statusData: {
                step: "completed",
                queries: []
            },
            auditBlocks: []
        }, {
            message: (_data_error = data === null || data === void 0 ? void 0 : data.error) !== null && _data_error !== void 0 ? _data_error : "WebSocket connection error",
            type: "ERROR"
        });
        disposeConnection();
    }, [
        onError
    ]);
    const getBody = (0, _react.useCallback)(function getBody() {
        const requestId = `${Date.now()}`;
        setAgentData(_object_spread_props(_object_spread({}, defaultAgentData), {
            requestId
        }));
        var _props_executionMode;
        _customerio.chatCustomerIo.inputAgentPromptSubmit({
            chatId: props.chatId,
            executionMode: (_props_executionMode = props.executionMode) !== null && _props_executionMode !== void 0 ? _props_executionMode : "research",
            requestId
        });
        return JSON.stringify({
            requestId,
            chat_id: props.chatId,
            message: (0, _getPromptWithContext.getPromptWithContext)(props.inputMessage, props.context),
            mode: props.executionMode
        });
    }, [
        props.chatId,
        props.context,
        props.executionMode,
        props.inputMessage
    ]);
    const handleAgentEvent = (0, _react.useCallback)(function handleAgentEvent(event, disposeConnection) {
        const data = JSON.parse(event.data);
        switch(data.type){
            case "THINKING":
                setAgentData((prev)=>(0, _handlers.handleThinkingMessage)(prev, data));
                break;
            case "ACTION":
                setAgentData((prev)=>(0, _handlers.handleActionMessage)(prev, data));
                break;
            case "AUDIT":
                setAgentData((prev)=>(0, _handlers.handleAuditMessage)(prev, data));
                break;
            case "ANSWER":
                setAgentData((prev)=>(0, _handlers.handleAnswerMessage)(prev, data));
                break;
            case "GROUNDING":
                if (!props.enableAgentGrounding) {
                    break;
                }
                setAgentData((prev)=>(0, _handlers.handleGroundingMessage)(prev, data));
                break;
            case "COMPLETE":
                setFrameCompleted(true);
                setAgentData((prev)=>(0, _handlers.handleCompleteMessage)(prev, {
                        executionMode: props.executionMode,
                        chatId
                    }));
                break;
            case "ERROR":
                handleErrorMessage(disposeConnection, data);
                break;
            default:
                break;
        }
    }, [
        chatId,
        handleErrorMessage,
        props.executionMode,
        props.enableAgentGrounding
    ]);
    (0, _react.useEffect)(()=>{
        if (isFrameCompleted && agentEnabled && !onCompleteCallbackExecuted.current) {
            onComplete(agentData);
            onCompleteCallbackExecuted.current = true;
        }
    }, [
        isFrameCompleted,
        agentData,
        agentEnabled,
        onComplete
    ]);
    var _props_agentEndpointUrl;
    (0, _useSSE.useSSE)({
        url: `${(_props_agentEndpointUrl = props.agentEndpointUrl) !== null && _props_agentEndpointUrl !== void 0 ? _props_agentEndpointUrl : EVENT_SOURCE_URL}${PATH}`,
        enabled: agentEnabled !== null && agentEnabled !== void 0 ? agentEnabled : false,
        getBody,
        onError: handleErrorMessage,
        onMessage: handleAgentEvent
    });
    return {
        agentData
    };
}

//# sourceMappingURL=data:application/json;base64,