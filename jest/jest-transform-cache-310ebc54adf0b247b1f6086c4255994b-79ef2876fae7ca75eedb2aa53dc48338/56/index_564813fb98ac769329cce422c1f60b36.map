{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/vfile/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n"],"names":["VFile","order","basename","path","undefined","assertNonEmpty","assertPart","join","dirname","assertPath","extname","codePointAt","Error","includes","stem","history","length","isUrl","urlToPath","push","fail","causeOrReason","optionsOrParentOrPlace","origin","message","fatal","info","VFileMessage","name","file","messages","toString","encoding","value","decoder","TextDecoder","decode","constructor","options","isUint8Array","cwd","proc","data","map","result","stored","index","prop","part","sep","Boolean"],"rangeMappingsmappings":"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"}