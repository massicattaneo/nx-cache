8ae20e9d7cfee4b87e7b40194bd25a65
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useUserSettings", {
    enumerable: true,
    get: function() {
        return useUserSettings;
    }
});
const _react = require("react");
const _useLocalStorage = require("./useLocalStorage");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const LOCAL_STORAGE_KEY = "userSettings";
const DEFAULT_SETTINGS = {
    sorting: {
        files: {
            field: "date",
            direction: "desc"
        },
        savedSearches: {
            field: "lastExecuted",
            direction: "desc"
        },
        recentSearches: {
            field: "lastExecuted",
            direction: "desc"
        },
        publicSearches: {
            field: "lastExecuted",
            direction: "desc"
        },
        publicWatchlists: {
            field: "lastUpdated",
            direction: "desc"
        },
        watchlistTable: {
            field: "name",
            direction: "asc"
        },
        userWatchlists: {
            field: "name",
            direction: "asc"
        },
        findResults: {
            field: "lastUpdated",
            direction: "desc"
        },
        notifications: {
            field: "name",
            direction: "asc"
        },
        chats: {
            field: "dateCreated",
            direction: "desc"
        }
    }
};
function useUserSettings() {
    const [userSettings, setUserSettings] = (0, _useLocalStorage.useLocalStorage)(LOCAL_STORAGE_KEY, DEFAULT_SETTINGS);
    const setSorting = (0, _react.useCallback)((page, value)=>{
        setUserSettings(_object_spread_props(_object_spread({}, userSettings), {
            sorting: _object_spread_props(_object_spread({}, userSettings.sorting), {
                [page]: value
            })
        }));
    }, [
        setUserSettings,
        userSettings
    ]);
    // Each time we add a new setting, it will be undefined on localStorage
    const safeUserSettings = (0, _react.useMemo)(()=>({
            sorting: _object_spread({}, DEFAULT_SETTINGS.sorting, userSettings.sorting)
        }), [
        userSettings
    ]);
    return {
        userSettings: safeUserSettings,
        actions: {
            setSorting
        }
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9ob29rcy9zcmMvdXNlVXNlclNldHRpbmdzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IHVzZUxvY2FsU3RvcmFnZSB9IGZyb20gXCIuL3VzZUxvY2FsU3RvcmFnZVwiXG5cbnR5cGUgVXNlclNldHRpbmdzUGFnZSA9XG4gIHwgXCJzYXZlZFNlYXJjaGVzXCJcbiAgfCBcInJlY2VudFNlYXJjaGVzXCJcbiAgfCBcInB1YmxpY1NlYXJjaGVzXCJcbiAgfCBcInB1YmxpY1dhdGNobGlzdHNcIlxuICB8IFwiZmlsZXNcIlxuICB8IFwidXNlcldhdGNobGlzdHNcIlxuICB8IFwid2F0Y2hsaXN0VGFibGVcIlxuICB8IFwiZmluZFJlc3VsdHNcIlxuICB8IFwibm90aWZpY2F0aW9uc1wiXG4gIHwgXCJjaGF0c1wiXG5cbnR5cGUgU2VsZWN0ZWRTb3J0PFQ+ID0ge1xuICBmaWVsZDoga2V5b2YgVFxuICBkaXJlY3Rpb246IFwiZGVzY1wiIHwgXCJhc2NcIlxufVxuXG50eXBlIFVzZXJTZXR0aW5nczxUPiA9IHtcbiAgc29ydGluZzogUmVjb3JkPFVzZXJTZXR0aW5nc1BhZ2UsIFNlbGVjdGVkU29ydDxUPj5cbn1cblxudHlwZSBEZWZhdWx0U29ydGluZyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj5cblxuY29uc3QgTE9DQUxfU1RPUkFHRV9LRVkgPSBcInVzZXJTZXR0aW5nc1wiXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBVc2VyU2V0dGluZ3M8RGVmYXVsdFNvcnRpbmc+ID0ge1xuICBzb3J0aW5nOiB7XG4gICAgZmlsZXM6IHtcbiAgICAgIGZpZWxkOiBcImRhdGVcIixcbiAgICAgIGRpcmVjdGlvbjogXCJkZXNjXCIsXG4gICAgfSxcbiAgICBzYXZlZFNlYXJjaGVzOiB7XG4gICAgICBmaWVsZDogXCJsYXN0RXhlY3V0ZWRcIixcbiAgICAgIGRpcmVjdGlvbjogXCJkZXNjXCIsXG4gICAgfSxcbiAgICByZWNlbnRTZWFyY2hlczoge1xuICAgICAgZmllbGQ6IFwibGFzdEV4ZWN1dGVkXCIsXG4gICAgICBkaXJlY3Rpb246IFwiZGVzY1wiLFxuICAgIH0sXG4gICAgcHVibGljU2VhcmNoZXM6IHtcbiAgICAgIGZpZWxkOiBcImxhc3RFeGVjdXRlZFwiLFxuICAgICAgZGlyZWN0aW9uOiBcImRlc2NcIixcbiAgICB9LFxuICAgIHB1YmxpY1dhdGNobGlzdHM6IHtcbiAgICAgIGZpZWxkOiBcImxhc3RVcGRhdGVkXCIsXG4gICAgICBkaXJlY3Rpb246IFwiZGVzY1wiLFxuICAgIH0sXG4gICAgd2F0Y2hsaXN0VGFibGU6IHtcbiAgICAgIGZpZWxkOiBcIm5hbWVcIixcbiAgICAgIGRpcmVjdGlvbjogXCJhc2NcIixcbiAgICB9LFxuICAgIHVzZXJXYXRjaGxpc3RzOiB7XG4gICAgICBmaWVsZDogXCJuYW1lXCIsXG4gICAgICBkaXJlY3Rpb246IFwiYXNjXCIsXG4gICAgfSxcbiAgICBmaW5kUmVzdWx0czoge1xuICAgICAgZmllbGQ6IFwibGFzdFVwZGF0ZWRcIixcbiAgICAgIGRpcmVjdGlvbjogXCJkZXNjXCIsXG4gICAgfSxcbiAgICBub3RpZmljYXRpb25zOiB7XG4gICAgICBmaWVsZDogXCJuYW1lXCIsXG4gICAgICBkaXJlY3Rpb246IFwiYXNjXCIsXG4gICAgfSxcbiAgICBjaGF0czoge1xuICAgICAgZmllbGQ6IFwiZGF0ZUNyZWF0ZWRcIixcbiAgICAgIGRpcmVjdGlvbjogXCJkZXNjXCIsXG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24gdXNlVXNlclNldHRpbmdzPFQgZXh0ZW5kcyBEZWZhdWx0U29ydGluZz4oKSB7XG4gIGNvbnN0IFt1c2VyU2V0dGluZ3MsIHNldFVzZXJTZXR0aW5nc10gPSB1c2VMb2NhbFN0b3JhZ2U8VXNlclNldHRpbmdzPFQ+PihcbiAgICBMT0NBTF9TVE9SQUdFX0tFWSxcbiAgICBERUZBVUxUX1NFVFRJTkdTLFxuICApXG5cbiAgY29uc3Qgc2V0U29ydGluZyA9IHVzZUNhbGxiYWNrKFxuICAgIChwYWdlOiBVc2VyU2V0dGluZ3NQYWdlLCB2YWx1ZTogU2VsZWN0ZWRTb3J0PFQ+KSA9PiB7XG4gICAgICBzZXRVc2VyU2V0dGluZ3Moe1xuICAgICAgICAuLi51c2VyU2V0dGluZ3MsXG4gICAgICAgIHNvcnRpbmc6IHtcbiAgICAgICAgICAuLi51c2VyU2V0dGluZ3Muc29ydGluZyxcbiAgICAgICAgICBbcGFnZV06IHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9LFxuICAgIFtzZXRVc2VyU2V0dGluZ3MsIHVzZXJTZXR0aW5nc10sXG4gIClcblxuICAvLyBFYWNoIHRpbWUgd2UgYWRkIGEgbmV3IHNldHRpbmcsIGl0IHdpbGwgYmUgdW5kZWZpbmVkIG9uIGxvY2FsU3RvcmFnZVxuICBjb25zdCBzYWZlVXNlclNldHRpbmdzOiBVc2VyU2V0dGluZ3M8VD4gPSB1c2VNZW1vKFxuICAgICgpID0+ICh7IHNvcnRpbmc6IHsgLi4uREVGQVVMVF9TRVRUSU5HUy5zb3J0aW5nLCAuLi51c2VyU2V0dGluZ3Muc29ydGluZyB9IH0pLFxuICAgIFt1c2VyU2V0dGluZ3NdLFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyU2V0dGluZ3M6IHNhZmVVc2VyU2V0dGluZ3MsXG4gICAgYWN0aW9uczoge1xuICAgICAgc2V0U29ydGluZyxcbiAgICB9LFxuICB9XG59XG5cbmV4cG9ydCB7IHVzZVVzZXJTZXR0aW5ncyB9XG4iXSwibmFtZXMiOlsidXNlVXNlclNldHRpbmdzIiwiTE9DQUxfU1RPUkFHRV9LRVkiLCJERUZBVUxUX1NFVFRJTkdTIiwic29ydGluZyIsImZpbGVzIiwiZmllbGQiLCJkaXJlY3Rpb24iLCJzYXZlZFNlYXJjaGVzIiwicmVjZW50U2VhcmNoZXMiLCJwdWJsaWNTZWFyY2hlcyIsInB1YmxpY1dhdGNobGlzdHMiLCJ3YXRjaGxpc3RUYWJsZSIsInVzZXJXYXRjaGxpc3RzIiwiZmluZFJlc3VsdHMiLCJub3RpZmljYXRpb25zIiwiY2hhdHMiLCJ1c2VyU2V0dGluZ3MiLCJzZXRVc2VyU2V0dGluZ3MiLCJ1c2VMb2NhbFN0b3JhZ2UiLCJzZXRTb3J0aW5nIiwidXNlQ2FsbGJhY2siLCJwYWdlIiwidmFsdWUiLCJzYWZlVXNlclNldHRpbmdzIiwidXNlTWVtbyIsImFjdGlvbnMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF5R1NBOzs7ZUFBQUE7Ozt1QkF6RzRCO2lDQUNMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCaEMsTUFBTUMsb0JBQW9CO0FBQzFCLE1BQU1DLG1CQUFpRDtJQUNyREMsU0FBUztRQUNQQyxPQUFPO1lBQ0xDLE9BQU87WUFDUEMsV0FBVztRQUNiO1FBQ0FDLGVBQWU7WUFDYkYsT0FBTztZQUNQQyxXQUFXO1FBQ2I7UUFDQUUsZ0JBQWdCO1lBQ2RILE9BQU87WUFDUEMsV0FBVztRQUNiO1FBQ0FHLGdCQUFnQjtZQUNkSixPQUFPO1lBQ1BDLFdBQVc7UUFDYjtRQUNBSSxrQkFBa0I7WUFDaEJMLE9BQU87WUFDUEMsV0FBVztRQUNiO1FBQ0FLLGdCQUFnQjtZQUNkTixPQUFPO1lBQ1BDLFdBQVc7UUFDYjtRQUNBTSxnQkFBZ0I7WUFDZFAsT0FBTztZQUNQQyxXQUFXO1FBQ2I7UUFDQU8sYUFBYTtZQUNYUixPQUFPO1lBQ1BDLFdBQVc7UUFDYjtRQUNBUSxlQUFlO1lBQ2JULE9BQU87WUFDUEMsV0FBVztRQUNiO1FBQ0FTLE9BQU87WUFDTFYsT0FBTztZQUNQQyxXQUFXO1FBQ2I7SUFDRjtBQUNGO0FBRUEsU0FBU047SUFDUCxNQUFNLENBQUNnQixjQUFjQyxnQkFBZ0IsR0FBR0MsSUFBQUEsZ0NBQWUsRUFDckRqQixtQkFDQUM7SUFHRixNQUFNaUIsYUFBYUMsSUFBQUEsa0JBQVcsRUFDNUIsQ0FBQ0MsTUFBd0JDO1FBQ3ZCTCxnQkFBZ0Isd0NBQ1hEO1lBQ0hiLFNBQVMsd0NBQ0phLGFBQWFiLE9BQU87Z0JBQ3ZCLENBQUNrQixLQUFLLEVBQUVDOzs7SUFHZCxHQUNBO1FBQUNMO1FBQWlCRDtLQUFhO0lBR2pDLHVFQUF1RTtJQUN2RSxNQUFNTyxtQkFBb0NDLElBQUFBLGNBQU8sRUFDL0MsSUFBTyxDQUFBO1lBQUVyQixTQUFTLG1CQUFLRCxpQkFBaUJDLE9BQU8sRUFBS2EsYUFBYWIsT0FBTztRQUFHLENBQUEsR0FDM0U7UUFBQ2E7S0FBYTtJQUdoQixPQUFPO1FBQ0xBLGNBQWNPO1FBQ2RFLFNBQVM7WUFDUE47UUFDRjtJQUNGO0FBQ0YifQ==