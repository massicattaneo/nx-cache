deafeef1d6c49ad509578dea5e84cd04
// Packages
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesPage", {
    enumerable: true,
    get: function() {
        return FilesPage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _providers = require("@rp/react/common/providers");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _files = require("@rp/react/web/common/files");
const _headercomponents = require("@rp/react/web/common/header-components");
const _hooks = require("@rp/react/web/common/hooks");
const _layout = require("@rp/react/web/common/layout");
const _providers1 = require("@rp/react/web/common/providers");
const _documentviewer = require("@rp/react/web/document-viewer");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _Files = /*#__PURE__*/ _interop_require_default(require("../../components/Hub/Files"));
const _HubHeader = require("../../components/Hub/HubHeader/HubHeader");
const _FileMobileHeader = require("./FileMobileHeader");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const PRIVATE_FILES = "private-files";
const SHARED_FILES = "shared-files";
const tabValues = {
    [PRIVATE_FILES]: 0,
    [SHARED_FILES]: 1
};
// =================
// Hub Page
// =================
function UploadFileButton({ onSuccess, disableUpload }) {
    const ref = (0, _react.useRef)(null);
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const handleClick = ()=>{
        var _ref_current;
        disableUpload ? planComparisonHandleOpen(_settings.FILES_FEATURE_NAME) : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.open();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_layout.HeaderButton, {
        onClick: handleClick,
        startIcon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.FileUploadOutlined, {}),
        children: [
            "Upload File",
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_files.UploadFiles, {
                location: "filesPage",
                multiple: true,
                ref: ref,
                onSubmit: ()=>{
                    onSuccess();
                }
            })
        ]
    }, "header-button");
}
function FilesHeader({ value, selected, filterTerm, disableUpload, handleChange, planComparisonHandleOpen }) {
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const { id = "" } = (0, _reactrouterdom.useParams)();
    const { deleteFiles, chatWithFiles } = (0, _files.useFileActions)();
    const [_, setSearchParams] = (0, _reactrouterdom.useSearchParams)();
    const { hasEntitlement } = (0, _providers.useAccount)();
    const { t } = (0, _reacti18next.useTranslation)();
    const findFilesPlaceholder = t(value === tabValues[PRIVATE_FILES] ? "filePage.findMyFilesPlaceholder" : "filePage.findSharedWithMePlaceholder");
    const onFileUpload = ()=>{
        if (disableUpload) {
            planComparisonHandleOpen(_settings.FILES_FEATURE_NAME);
        }
        window.scrollTo({
            top: 0,
            behavior: "smooth"
        });
        handleChange(tabValues[PRIVATE_FILES]);
    };
    const setFilterTerm = (0, _react.useCallback)((term)=>{
        setSearchParams((prev)=>{
            const { find: _ } = prev, rest = _object_without_properties(prev, [
                "find"
            ]);
            return term.length ? _object_spread_props(_object_spread({}, rest), {
                find: term
            }) : rest;
        }, {
            replace: true
        });
    }, [
        setSearchParams
    ]);
    const headerItems = [];
    if (hasEntitlement("file:upload")) {
        headerItems.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(UploadFileButton, {
            onSuccess: onFileUpload,
            disableUpload: disableUpload
        }, "upload-file-button"));
    }
    if (isMobile) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_FileMobileHeader.FilesMobileHeader, {
            id: id,
            page: "Files",
            label: "Files",
            filterTerm: filterTerm,
            setFilterTerm: setFilterTerm,
            placeholder: findFilesPlaceholder,
            onClick: disableUpload ? undefined : "uploadFiles",
            buttonLabel: "Upload File",
            icon: {
                Icon: _icons.Attachment,
                IconButton: _icons.FileUploadOutlined
            },
            onDeleteClick: selected.length ? ()=>{
                deleteFiles(selected.filter((i)=>!i.shared).map((i)=>i.id));
            } : undefined,
            onChatClick: selected.length ? ()=>chatWithFiles(selected.map((i)=>i.id)) : undefined,
            onFileUpload: onFileUpload
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_HubHeader.HubHeader, {
        id: id,
        label: "Files",
        page: "Files",
        filterTerm: filterTerm,
        setFilterTerm: setFilterTerm,
        placeholder: findFilesPlaceholder,
        rightItems: headerItems
    });
}
const FilesPage = ()=>{
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [selected, setSelected] = (0, _react.useState)([]);
    const invalidateSharedFiles = (0, _file.useInvalidateSharedFiles)();
    const { disableUpload } = (0, _file.useQuota)();
    const [searchParams] = (0, _reactrouterdom.useSearchParams)();
    const { canShare } = (0, _providers.useAccount)();
    const [tab, setTab] = (0, _react.useState)(()=>{
        var _searchParams_get;
        const key = (_searchParams_get = searchParams.get("tab")) !== null && _searchParams_get !== void 0 ? _searchParams_get : "";
        var _tabValues_key;
        return (_tabValues_key = tabValues[key]) !== null && _tabValues_key !== void 0 ? _tabValues_key : tabValues[PRIVATE_FILES];
    });
    var _searchParams_get;
    const filterTerm = (_searchParams_get = searchParams.get("find")) !== null && _searchParams_get !== void 0 ? _searchParams_get : "";
    const replace = (0, _hooks.useReplaceSearchParam)();
    const handleChange = (newValue)=>{
        if (newValue === tabValues[PRIVATE_FILES]) {
            replace(()=>undefined);
        }
        if (newValue === tabValues[SHARED_FILES]) {
            replace(()=>SHARED_FILES);
            invalidateSharedFiles();
        }
        setTab(newValue);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_basecomponents.PageWrapperStyled, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_headercomponents.HtmlPageHead, {
                title: "Files"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(FilesHeader, {
                value: tab,
                selected: selected,
                filterTerm: filterTerm,
                disableUpload: disableUpload,
                handleChange: handleChange,
                planComparisonHandleOpen: planComparisonHandleOpen
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_documentviewer.DocumentViewerPage, {
                rpjsonHeaderOffset: isMobile ? 0 : undefined,
                pdfHeaderOffset: 56,
                disableCheckbox: true,
                backTitle: "Back to Files",
                contentContainerProps: {
                    sx: {
                        display: "flex"
                    }
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        width: "100%",
                        position: "relative"
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            sx: {
                                position: "relative",
                                pt: 2
                            },
                            children: [
                                canShare ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubFileToggleTabs, {
                                    size: "small",
                                    value: tab,
                                    setValue: handleChange
                                }) : null,
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.QuotaReachedMessage, {
                                    sx: {
                                        mt: canShare ? 2 : 0
                                    },
                                    onClick: ()=>{
                                        planComparisonHandleOpen(_settings.FILES_FEATURE_NAME);
                                    }
                                })
                            ]
                        }),
                        tab === tabValues[PRIVATE_FILES] && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Files.default, {
                            selected: selected,
                            setSelected: setSelected,
                            disableUpload: disableUpload,
                            filterTerm: filterTerm
                        }),
                        tab === tabValues[SHARED_FILES] && /*#__PURE__*/ (0, _jsxruntime.jsx)(_Files.default, {
                            selected: selected,
                            setSelected: setSelected,
                            disableUpload: disableUpload,
                            filterTerm: filterTerm,
                            shared: true
                        })
                    ]
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,