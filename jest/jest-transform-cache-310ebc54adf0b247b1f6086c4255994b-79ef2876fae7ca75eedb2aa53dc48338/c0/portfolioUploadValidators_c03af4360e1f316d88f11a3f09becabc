5905e7ba9611b4206b744c73fd6fd244
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getUniqueMappingJsonIds: function() {
        return getUniqueMappingJsonIds;
    },
    getUniqueRpIds: function() {
        return getUniqueRpIds;
    }
});
const regExp = /"?rp_entity_id"?:\s?"([^"]+)"/;
const getUniqueMappingJsonIds = (value)=>{
    const ids = [];
    let string = value;
    let [matched, entityId] = string.replace(/\n/g, "").match(regExp) || [];
    while(matched && entityId){
        ids.push(entityId);
        string = string.replace(matched, "");
        [matched, entityId] = string.match(regExp) || [];
    }
    return ids.filter((item, index, array)=>array.indexOf(item) === index).map((key)=>({
            key,
            queryType: "entity"
        }));
};
const getUniqueRpIds = (value)=>{
    const formatted = value.replace(/\n/g, " ").replace(/\s\s/g, " ").trim();
    if (formatted.match(/,/)) {
        const ids = formatted.split(",").map((item)=>item.trim());
        return ids.filter((item, index, array)=>array.indexOf(item) === index).map((key)=>({
                key,
                queryType: "entity"
            }));
    } else {
        const ids = formatted.split(" ").map((item)=>item.trim());
        return ids.filter((item)=>item).filter((item, index, array)=>array.indexOf(item) === index).map((key)=>({
                key,
                queryType: "entity"
            }));
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi93YXRjaGxpc3QtZWRpdG9yL3NyYy9XYXRjaGxpc3RQb3J0Zm9saW9VcGxvYWQvcG9ydGZvbGlvVXBsb2FkVmFsaWRhdG9ycy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVnRXhwID0gL1wiP3JwX2VudGl0eV9pZFwiPzpcXHM/XCIoW15cIl0rKVwiL1xuXG5jb25zdCBnZXRVbmlxdWVNYXBwaW5nSnNvbklkcyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGlkcyA9IFtdXG4gIGxldCBzdHJpbmcgPSB2YWx1ZVxuICBsZXQgW21hdGNoZWQsIGVudGl0eUlkXSA9IHN0cmluZy5yZXBsYWNlKC9cXG4vZywgXCJcIikubWF0Y2gocmVnRXhwKSB8fCBbXVxuICB3aGlsZSAobWF0Y2hlZCAmJiBlbnRpdHlJZCkge1xuICAgIGlkcy5wdXNoKGVudGl0eUlkKVxuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKG1hdGNoZWQsIFwiXCIpXG4gICAgO1ttYXRjaGVkLCBlbnRpdHlJZF0gPSBzdHJpbmcubWF0Y2gocmVnRXhwKSB8fCBbXVxuICB9XG4gIHJldHVybiBpZHNcbiAgICAuZmlsdGVyKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2YoaXRlbSkgPT09IGluZGV4KVxuICAgIC5tYXAoa2V5ID0+ICh7IGtleSwgcXVlcnlUeXBlOiBcImVudGl0eVwiIH0pKVxufVxuXG5jb25zdCBnZXRVbmlxdWVScElkcyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IHZhbHVlLnJlcGxhY2UoL1xcbi9nLCBcIiBcIikucmVwbGFjZSgvXFxzXFxzL2csIFwiIFwiKS50cmltKClcbiAgaWYgKGZvcm1hdHRlZC5tYXRjaCgvLC8pKSB7XG4gICAgY29uc3QgaWRzID0gZm9ybWF0dGVkLnNwbGl0KFwiLFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSlcbiAgICByZXR1cm4gaWRzXG4gICAgICAuZmlsdGVyKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2YoaXRlbSkgPT09IGluZGV4KVxuICAgICAgLm1hcChrZXkgPT4gKHsga2V5LCBxdWVyeVR5cGU6IFwiZW50aXR5XCIgfSkpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaWRzID0gZm9ybWF0dGVkLnNwbGl0KFwiIFwiKS5tYXAoaXRlbSA9PiBpdGVtLnRyaW0oKSlcbiAgICByZXR1cm4gaWRzXG4gICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbSlcbiAgICAgIC5maWx0ZXIoKGl0ZW0sIGluZGV4LCBhcnJheSkgPT4gYXJyYXkuaW5kZXhPZihpdGVtKSA9PT0gaW5kZXgpXG4gICAgICAubWFwKGtleSA9PiAoeyBrZXksIHF1ZXJ5VHlwZTogXCJlbnRpdHlcIiB9KSlcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRVbmlxdWVNYXBwaW5nSnNvbklkcywgZ2V0VW5pcXVlUnBJZHMgfVxuIl0sIm5hbWVzIjpbImdldFVuaXF1ZU1hcHBpbmdKc29uSWRzIiwiZ2V0VW5pcXVlUnBJZHMiLCJyZWdFeHAiLCJ2YWx1ZSIsImlkcyIsInN0cmluZyIsIm1hdGNoZWQiLCJlbnRpdHlJZCIsInJlcGxhY2UiLCJtYXRjaCIsInB1c2giLCJmaWx0ZXIiLCJpdGVtIiwiaW5kZXgiLCJhcnJheSIsImluZGV4T2YiLCJtYXAiLCJrZXkiLCJxdWVyeVR5cGUiLCJmb3JtYXR0ZWQiLCJ0cmltIiwic3BsaXQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWdDU0EsdUJBQXVCO2VBQXZCQTs7SUFBeUJDLGNBQWM7ZUFBZEE7OztBQWhDbEMsTUFBTUMsU0FBUztBQUVmLE1BQU1GLDBCQUEwQixDQUFDRztJQUMvQixNQUFNQyxNQUFNLEVBQUU7SUFDZCxJQUFJQyxTQUFTRjtJQUNiLElBQUksQ0FBQ0csU0FBU0MsU0FBUyxHQUFHRixPQUFPRyxPQUFPLENBQUMsT0FBTyxJQUFJQyxLQUFLLENBQUNQLFdBQVcsRUFBRTtJQUN2RSxNQUFPSSxXQUFXQyxTQUFVO1FBQzFCSCxJQUFJTSxJQUFJLENBQUNIO1FBQ1RGLFNBQVNBLE9BQU9HLE9BQU8sQ0FBQ0YsU0FBUztRQUNoQyxDQUFDQSxTQUFTQyxTQUFTLEdBQUdGLE9BQU9JLEtBQUssQ0FBQ1AsV0FBVyxFQUFFO0lBQ25EO0lBQ0EsT0FBT0UsSUFDSk8sTUFBTSxDQUFDLENBQUNDLE1BQU1DLE9BQU9DLFFBQVVBLE1BQU1DLE9BQU8sQ0FBQ0gsVUFBVUMsT0FDdkRHLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBUSxDQUFBO1lBQUVBO1lBQUtDLFdBQVc7UUFBUyxDQUFBO0FBQzVDO0FBRUEsTUFBTWpCLGlCQUFpQixDQUFDRTtJQUN0QixNQUFNZ0IsWUFBWWhCLE1BQU1LLE9BQU8sQ0FBQyxPQUFPLEtBQUtBLE9BQU8sQ0FBQyxTQUFTLEtBQUtZLElBQUk7SUFDdEUsSUFBSUQsVUFBVVYsS0FBSyxDQUFDLE1BQU07UUFDeEIsTUFBTUwsTUFBTWUsVUFBVUUsS0FBSyxDQUFDLEtBQUtMLEdBQUcsQ0FBQ0osQ0FBQUEsT0FBUUEsS0FBS1EsSUFBSTtRQUN0RCxPQUFPaEIsSUFDSk8sTUFBTSxDQUFDLENBQUNDLE1BQU1DLE9BQU9DLFFBQVVBLE1BQU1DLE9BQU8sQ0FBQ0gsVUFBVUMsT0FDdkRHLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBUSxDQUFBO2dCQUFFQTtnQkFBS0MsV0FBVztZQUFTLENBQUE7SUFDNUMsT0FBTztRQUNMLE1BQU1kLE1BQU1lLFVBQVVFLEtBQUssQ0FBQyxLQUFLTCxHQUFHLENBQUNKLENBQUFBLE9BQVFBLEtBQUtRLElBQUk7UUFDdEQsT0FBT2hCLElBQ0pPLE1BQU0sQ0FBQ0MsQ0FBQUEsT0FBUUEsTUFDZkQsTUFBTSxDQUFDLENBQUNDLE1BQU1DLE9BQU9DLFFBQVVBLE1BQU1DLE9BQU8sQ0FBQ0gsVUFBVUMsT0FDdkRHLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBUSxDQUFBO2dCQUFFQTtnQkFBS0MsV0FBVztZQUFTLENBQUE7SUFDNUM7QUFDRiJ9