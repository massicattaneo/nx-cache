651bfcab936381c7b9c2cbd880c0f8a0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SuggestionFilter", {
    enumerable: true,
    get: function() {
        return SuggestionFilter;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _MultiCheckboxSelectItem = require("./MultiCheckboxSelectItem");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const formatLabel = (category, value)=>{
    if (category !== "Topics") return value;
    return (0, _utils.formatTopicGroupToLabel)(value);
};
const mapToSuggestItem = (category, values)=>values.map((value)=>({
            value,
            label: formatLabel(category, value),
            count: 0
        }));
const removeDuplicates = (values)=>(item, index, array)=>{
        if (values.includes(item.value)) return false;
        const itemIndex = array.findIndex((sub)=>sub.value === item.value);
        return index === itemIndex;
    };
const SuggestionFilter = ({ facets, isLoading, field, values, categoryFilter, setFilters, suggestionQuery })=>{
    const [search, setSearch, rawSearch] = (0, _hooks.useDebouncedState)("", 300);
    const params = _object_spread_props(_object_spread({}, suggestionQuery), {
        facetQuery: {
            field: field.key,
            value: search
        }
    });
    const { data, isLoading: isFetching } = (0, _suggestion.useWatchlistFacets)(params);
    const loading = isLoading || !!rawSearch && isFetching;
    var _facets_field_key, _data_results;
    const items = [
        ...(_facets_field_key = facets[field.key]) !== null && _facets_field_key !== void 0 ? _facets_field_key : [],
        ...(_data_results = data === null || data === void 0 ? void 0 : data.results) !== null && _data_results !== void 0 ? _data_results : []
    ].filter(removeDuplicates(values)).map((i)=>_object_spread_props(_object_spread({}, i), {
            label: formatLabel(categoryFilter, i.value),
            count: i.count
        }));
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.MultiCheckboxSelect, {
        search: rawSearch,
        onSearch: (value)=>setSearch(value),
        initialElements: 20,
        isLoading: loading,
        items: items,
        value: mapToSuggestItem(categoryFilter, values),
        onChange: (newVal)=>{
            setFilters === null || setFilters === void 0 ? void 0 : setFilters((prev)=>{
                return _object_spread_props(_object_spread({}, prev), {
                    [categoryFilter]: _object_spread_props(_object_spread({}, prev[categoryFilter]), {
                        [field.key]: newVal.map((i)=>i.value)
                    })
                });
            });
        },
        label: (0, _utils.capitalize)(field.label.toLowerCase()),
        placeholder: `Find a ${(0, _utils.capitalize)(field.label.toLowerCase())}`,
        renderItem: (item, index, searchTerm)=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MultiCheckboxSelectItem.MultiCheckboxSelectItem, {
                item: item,
                searchTerm: searchTerm
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi93YXRjaGxpc3QtZWRpdG9yL3NyYy9TdWdnZXN0aW9uRmlsdGVycy9TdWdnZXN0aW9uRmlsdGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNwYXRjaCwgU2V0U3RhdGVBY3Rpb24gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgY2FwaXRhbGl6ZSwgZm9ybWF0VG9waWNHcm91cFRvTGFiZWwgfSBmcm9tIFwiQHJwL2NvbW1vbi91dGlsc1wiXG5pbXBvcnQgeyB1c2VEZWJvdW5jZWRTdGF0ZSB9IGZyb20gXCJAcnAvcmVhY3QvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IFdhdGNobGlzdEdyb3VwcyB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2Rpc2NvdmVyeS1wYW5lbC1jb25maWdcIlxuaW1wb3J0IHtcbiAgR2VuZXJpY1dhdGNobGlzdEF1dG9zdWdnZXN0UG9zdFBhcmFtcyxcbiAgV2F0Y2hsaXN0QXV0b3N1Z2dlc3RQb3N0UmVzcG9uc2UsXG4gIFdhdGNobGlzdFN1Z2dlc3Rpb25GaWx0ZXJzLFxuICB1c2VXYXRjaGxpc3RGYWNldHMsXG59IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3N1Z2dlc3Rpb25cIlxuaW1wb3J0IHsgTXVsdGlDaGVja2JveFNlbGVjdCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyBNdWx0aUNoZWNrYm94U2VsZWN0SXRlbSB9IGZyb20gXCIuL011bHRpQ2hlY2tib3hTZWxlY3RJdGVtXCJcblxudHlwZSBGYWNldEl0ZW0gPSB7IHZhbHVlOiBzdHJpbmc7IGNvdW50OiBudW1iZXIgfVxuXG50eXBlIFByb3BzID0ge1xuICBjYXRlZ29yeUZpbHRlcjogc3RyaW5nXG4gIGZhY2V0czogUmVxdWlyZWQ8V2F0Y2hsaXN0QXV0b3N1Z2dlc3RQb3N0UmVzcG9uc2U+W1wiZmFjZXRzXCJdXG4gIGlzTG9hZGluZz86IGJvb2xlYW5cbiAgZmllbGQ6IFdhdGNobGlzdEdyb3Vwc1tcImZpZWxkc1wiXVtudW1iZXJdXG4gIHZhbHVlczogQXJyYXk8c3RyaW5nPlxuICBzZXRGaWx0ZXJzPzogRGlzcGF0Y2g8U2V0U3RhdGVBY3Rpb248V2F0Y2hsaXN0U3VnZ2VzdGlvbkZpbHRlcnM+PlxuICBzdWdnZXN0aW9uUXVlcnk6IEdlbmVyaWNXYXRjaGxpc3RBdXRvc3VnZ2VzdFBvc3RQYXJhbXNcbn1cblxuY29uc3QgZm9ybWF0TGFiZWwgPSAoY2F0ZWdvcnk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICBpZiAoY2F0ZWdvcnkgIT09IFwiVG9waWNzXCIpIHJldHVybiB2YWx1ZVxuICByZXR1cm4gZm9ybWF0VG9waWNHcm91cFRvTGFiZWwodmFsdWUpXG59XG5cbmNvbnN0IG1hcFRvU3VnZ2VzdEl0ZW0gPSAoY2F0ZWdvcnk6IHN0cmluZywgdmFsdWVzOiBBcnJheTxzdHJpbmc+KSA9PlxuICB2YWx1ZXMubWFwKHZhbHVlID0+ICh7IHZhbHVlLCBsYWJlbDogZm9ybWF0TGFiZWwoY2F0ZWdvcnksIHZhbHVlKSwgY291bnQ6IDAgfSkpXG5cbmNvbnN0IHJlbW92ZUR1cGxpY2F0ZXMgPVxuICAodmFsdWVzOiBBcnJheTxzdHJpbmc+KSA9PiAoaXRlbTogRmFjZXRJdGVtLCBpbmRleDogbnVtYmVyLCBhcnJheTogQXJyYXk8RmFjZXRJdGVtPikgPT4ge1xuICAgIGlmICh2YWx1ZXMuaW5jbHVkZXMoaXRlbS52YWx1ZSkpIHJldHVybiBmYWxzZVxuICAgIGNvbnN0IGl0ZW1JbmRleCA9IGFycmF5LmZpbmRJbmRleChzdWIgPT4gc3ViLnZhbHVlID09PSBpdGVtLnZhbHVlKVxuICAgIHJldHVybiBpbmRleCA9PT0gaXRlbUluZGV4XG4gIH1cblxuY29uc3QgU3VnZ2VzdGlvbkZpbHRlciA9ICh7XG4gIGZhY2V0cyxcbiAgaXNMb2FkaW5nLFxuICBmaWVsZCxcbiAgdmFsdWVzLFxuICBjYXRlZ29yeUZpbHRlcixcbiAgc2V0RmlsdGVycyxcbiAgc3VnZ2VzdGlvblF1ZXJ5LFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgW3NlYXJjaCwgc2V0U2VhcmNoLCByYXdTZWFyY2hdID0gdXNlRGVib3VuY2VkU3RhdGUoXCJcIiwgMzAwKVxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgLi4uc3VnZ2VzdGlvblF1ZXJ5LFxuICAgIGZhY2V0UXVlcnk6IHsgZmllbGQ6IGZpZWxkLmtleSwgdmFsdWU6IHNlYXJjaCB9LFxuICB9XG4gIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nOiBpc0ZldGNoaW5nIH0gPSB1c2VXYXRjaGxpc3RGYWNldHMocGFyYW1zKVxuICBjb25zdCBsb2FkaW5nID0gaXNMb2FkaW5nIHx8ICghIXJhd1NlYXJjaCAmJiBpc0ZldGNoaW5nKVxuXG4gIGNvbnN0IGl0ZW1zID0gWy4uLihmYWNldHNbZmllbGQua2V5XSA/PyBbXSksIC4uLihkYXRhPy5yZXN1bHRzID8/IFtdKV1cbiAgICAuZmlsdGVyKHJlbW92ZUR1cGxpY2F0ZXModmFsdWVzKSlcbiAgICAubWFwKGkgPT4gKHtcbiAgICAgIC4uLmksXG4gICAgICBsYWJlbDogZm9ybWF0TGFiZWwoY2F0ZWdvcnlGaWx0ZXIsIGkudmFsdWUpLFxuICAgICAgY291bnQ6IGkuY291bnQsXG4gICAgfSkpXG5cbiAgcmV0dXJuIChcbiAgICA8TXVsdGlDaGVja2JveFNlbGVjdFxuICAgICAgc2VhcmNoPXtyYXdTZWFyY2h9XG4gICAgICBvblNlYXJjaD17dmFsdWUgPT4gc2V0U2VhcmNoKHZhbHVlKX1cbiAgICAgIGluaXRpYWxFbGVtZW50cz17MjB9XG4gICAgICBpc0xvYWRpbmc9e2xvYWRpbmd9XG4gICAgICBpdGVtcz17aXRlbXN9XG4gICAgICB2YWx1ZT17bWFwVG9TdWdnZXN0SXRlbShjYXRlZ29yeUZpbHRlciwgdmFsdWVzKX1cbiAgICAgIG9uQ2hhbmdlPXtuZXdWYWwgPT4ge1xuICAgICAgICBzZXRGaWx0ZXJzPy4ocHJldiA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICBbY2F0ZWdvcnlGaWx0ZXJdOiB7XG4gICAgICAgICAgICAgIC4uLnByZXZbY2F0ZWdvcnlGaWx0ZXJdLFxuICAgICAgICAgICAgICBbZmllbGQua2V5XTogbmV3VmFsLm1hcChpID0+IGkudmFsdWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9fVxuICAgICAgbGFiZWw9e2NhcGl0YWxpemUoZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSl9XG4gICAgICBwbGFjZWhvbGRlcj17YEZpbmQgYSAke2NhcGl0YWxpemUoZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSl9YH1cbiAgICAgIHJlbmRlckl0ZW09eyhpdGVtLCBpbmRleCwgc2VhcmNoVGVybSkgPT4ge1xuICAgICAgICByZXR1cm4gPE11bHRpQ2hlY2tib3hTZWxlY3RJdGVtIGl0ZW09e2l0ZW19IHNlYXJjaFRlcm09e3NlYXJjaFRlcm19IC8+XG4gICAgICB9fVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IHsgU3VnZ2VzdGlvbkZpbHRlciB9XG4iXSwibmFtZXMiOlsiU3VnZ2VzdGlvbkZpbHRlciIsImZvcm1hdExhYmVsIiwiY2F0ZWdvcnkiLCJ2YWx1ZSIsImZvcm1hdFRvcGljR3JvdXBUb0xhYmVsIiwibWFwVG9TdWdnZXN0SXRlbSIsInZhbHVlcyIsIm1hcCIsImxhYmVsIiwiY291bnQiLCJyZW1vdmVEdXBsaWNhdGVzIiwiaXRlbSIsImluZGV4IiwiYXJyYXkiLCJpbmNsdWRlcyIsIml0ZW1JbmRleCIsImZpbmRJbmRleCIsInN1YiIsImZhY2V0cyIsImlzTG9hZGluZyIsImZpZWxkIiwiY2F0ZWdvcnlGaWx0ZXIiLCJzZXRGaWx0ZXJzIiwic3VnZ2VzdGlvblF1ZXJ5Iiwic2VhcmNoIiwic2V0U2VhcmNoIiwicmF3U2VhcmNoIiwidXNlRGVib3VuY2VkU3RhdGUiLCJwYXJhbXMiLCJmYWNldFF1ZXJ5Iiwia2V5IiwiZGF0YSIsImlzRmV0Y2hpbmciLCJ1c2VXYXRjaGxpc3RGYWNldHMiLCJsb2FkaW5nIiwiaXRlbXMiLCJyZXN1bHRzIiwiZmlsdGVyIiwiaSIsIk11bHRpQ2hlY2tib3hTZWxlY3QiLCJvblNlYXJjaCIsImluaXRpYWxFbGVtZW50cyIsIm9uQ2hhbmdlIiwibmV3VmFsIiwicHJldiIsImNhcGl0YWxpemUiLCJ0b0xvd2VyQ2FzZSIsInBsYWNlaG9sZGVyIiwicmVuZGVySXRlbSIsInNlYXJjaFRlcm0iLCJNdWx0aUNoZWNrYm94U2VsZWN0SXRlbSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE2RlNBOzs7ZUFBQUE7Ozs7dUJBNUYyQzt1QkFDbEI7NEJBTzNCO3FDQUM2Qjt5Q0FDSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjeEMsTUFBTUMsY0FBYyxDQUFDQyxVQUFrQkM7SUFDckMsSUFBSUQsYUFBYSxVQUFVLE9BQU9DO0lBQ2xDLE9BQU9DLElBQUFBLDhCQUF1QixFQUFDRDtBQUNqQztBQUVBLE1BQU1FLG1CQUFtQixDQUFDSCxVQUFrQkksU0FDMUNBLE9BQU9DLEdBQUcsQ0FBQ0osQ0FBQUEsUUFBVSxDQUFBO1lBQUVBO1lBQU9LLE9BQU9QLFlBQVlDLFVBQVVDO1lBQVFNLE9BQU87UUFBRSxDQUFBO0FBRTlFLE1BQU1DLG1CQUNKLENBQUNKLFNBQTBCLENBQUNLLE1BQWlCQyxPQUFlQztRQUMxRCxJQUFJUCxPQUFPUSxRQUFRLENBQUNILEtBQUtSLEtBQUssR0FBRyxPQUFPO1FBQ3hDLE1BQU1ZLFlBQVlGLE1BQU1HLFNBQVMsQ0FBQ0MsQ0FBQUEsTUFBT0EsSUFBSWQsS0FBSyxLQUFLUSxLQUFLUixLQUFLO1FBQ2pFLE9BQU9TLFVBQVVHO0lBQ25CO0FBRUYsTUFBTWYsbUJBQW1CLENBQUMsRUFDeEJrQixNQUFNLEVBQ05DLFNBQVMsRUFDVEMsS0FBSyxFQUNMZCxNQUFNLEVBQ05lLGNBQWMsRUFDZEMsVUFBVSxFQUNWQyxlQUFlLEVBQ1Q7SUFDTixNQUFNLENBQUNDLFFBQVFDLFdBQVdDLFVBQVUsR0FBR0MsSUFBQUEsd0JBQWlCLEVBQUMsSUFBSTtJQUM3RCxNQUFNQyxTQUFTLHdDQUNWTDtRQUNITSxZQUFZO1lBQUVULE9BQU9BLE1BQU1VLEdBQUc7WUFBRTNCLE9BQU9xQjtRQUFPOztJQUVoRCxNQUFNLEVBQUVPLElBQUksRUFBRVosV0FBV2EsVUFBVSxFQUFFLEdBQUdDLElBQUFBLDhCQUFrQixFQUFDTDtJQUMzRCxNQUFNTSxVQUFVZixhQUFjLENBQUMsQ0FBQ08sYUFBYU07UUFFMUJkLG1CQUE4QmE7SUFBakQsTUFBTUksUUFBUTtXQUFLakIsQ0FBQUEsb0JBQUFBLE1BQU0sQ0FBQ0UsTUFBTVUsR0FBRyxDQUFDLGNBQWpCWiwrQkFBQUEsb0JBQXFCLEVBQUU7V0FBT2EsQ0FBQUEsZ0JBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTUssT0FBTyxjQUFiTCwyQkFBQUEsZ0JBQWlCLEVBQUU7S0FBRSxDQUNuRU0sTUFBTSxDQUFDM0IsaUJBQWlCSixTQUN4QkMsR0FBRyxDQUFDK0IsQ0FBQUEsSUFBTSx3Q0FDTkE7WUFDSDlCLE9BQU9QLFlBQVlvQixnQkFBZ0JpQixFQUFFbkMsS0FBSztZQUMxQ00sT0FBTzZCLEVBQUU3QixLQUFLOztJQUdsQixxQkFDRSxxQkFBQzhCLHdDQUFtQjtRQUNsQmYsUUFBUUU7UUFDUmMsVUFBVXJDLENBQUFBLFFBQVNzQixVQUFVdEI7UUFDN0JzQyxpQkFBaUI7UUFDakJ0QixXQUFXZTtRQUNYQyxPQUFPQTtRQUNQaEMsT0FBT0UsaUJBQWlCZ0IsZ0JBQWdCZjtRQUN4Q29DLFVBQVVDLENBQUFBO1lBQ1JyQix1QkFBQUEsaUNBQUFBLFdBQWFzQixDQUFBQTtnQkFDWCxPQUFPLHdDQUNGQTtvQkFDSCxDQUFDdkIsZUFBZSxFQUFFLHdDQUNidUIsSUFBSSxDQUFDdkIsZUFBZTt3QkFDdkIsQ0FBQ0QsTUFBTVUsR0FBRyxDQUFDLEVBQUVhLE9BQU9wQyxHQUFHLENBQUMrQixDQUFBQSxJQUFLQSxFQUFFbkMsS0FBSzs7O1lBRzFDO1FBQ0Y7UUFDQUssT0FBT3FDLElBQUFBLGlCQUFVLEVBQUN6QixNQUFNWixLQUFLLENBQUNzQyxXQUFXO1FBQ3pDQyxhQUFhLENBQUMsT0FBTyxFQUFFRixJQUFBQSxpQkFBVSxFQUFDekIsTUFBTVosS0FBSyxDQUFDc0MsV0FBVyxJQUFJLENBQUM7UUFDOURFLFlBQVksQ0FBQ3JDLE1BQU1DLE9BQU9xQztZQUN4QixxQkFBTyxxQkFBQ0MsZ0RBQXVCO2dCQUFDdkMsTUFBTUE7Z0JBQU1zQyxZQUFZQTs7UUFDMUQ7O0FBR04ifQ==