{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/rpjson/src/lib/generateRpJsonParts.ts"],"sourcesContent":["import { Entity, Event } from \"@rp/react/rpjson/types\"\nimport { ContentBlock, NormalizedCoordinates, TextBlock } from \"@rp/react/rpjson/types\"\nimport { RpJsonDocument } from \"@rp/react/rpjson/types\"\n\nconst defaultBodyItem = {\n  text: \"text\",\n  entities: [],\n  sentences: [],\n  markers: [],\n}\n\nexport const generateTextContentBlock = (\n  text: string,\n  analytics: {\n    coordinates?: Array<NormalizedCoordinates>\n    type?: TextBlock[\"type\"]\n    entities?: Array<Array<string | number>>\n    events?: Array<Array<string | number>>\n    sentences?: Array<Array<number>>\n  },\n): TextBlock => {\n  const { type, entities, events, sentences, coordinates = [] } = analytics\n  return {\n    type,\n    text,\n    normalized_coordinates: coordinates,\n    entities: (entities || []).map(array => ({\n      rp_entity_id: array[0].toString(),\n      start: Number(array[1]),\n      end: Number(array[2]),\n      entity_type: (array[3] || \"\").toString(),\n      entity_name: (array[4] || \"\").toString(),\n    })),\n    events: (events || []).map(array => ({\n      event_similarity_key: array[0].toString(),\n      start: Number(array[1]),\n      end: Number(array[2]),\n    })),\n    sentences: (sentences || []).map(array => ({\n      start: Number(array[0]),\n      end: Number(array[1]),\n      sentiment: \"0.00\",\n      sentiment_confidence: \"0.00\",\n      sentenceNumber: 1,\n    })),\n    markers: [],\n  }\n}\n\ntype RpJsonDocumentMock = {\n  titleText?: string\n  body?: Array<ContentBlock>\n  analyticsEvents?: Array<Event>\n  analyticsEntities?: Array<Entity>\n}\n\nconst getEntities = (body: Array<ContentBlock>): Array<Entity> => {\n  const entities: Array<Entity> = []\n  body.forEach(item => {\n    if (!item.type && item?.entities?.length) {\n      item.entities.forEach(entity => {\n        if (!entities.find(sub => sub.rp_entity_id === entity.rp_entity_id))\n          entities.push({\n            rp_entity_id: entity.rp_entity_id,\n            entity_name: entity.entity_name || \"\",\n            entity_type: entity.entity_type || \"\",\n            country_code: \"\",\n            entity_hierarchy_level: 0,\n            entity_detection_type: \"direct\",\n            entity_detection_distance: 0,\n            entity_relevance: 0,\n            document_record_index: 0,\n          })\n      })\n    }\n  })\n  return entities\n}\n\nconst getEvents = (body: Array<ContentBlock>): Array<Event> => {\n  const events: Array<Event> = []\n  body.forEach(item => {\n    if (!item.type && item?.events?.length) {\n      item.events.forEach(event => {\n        if (!events.find(sub => sub.event_similarity_key === event.event_similarity_key))\n          events.push({\n            event_similarity_key: event.event_similarity_key,\n            topic: \"\",\n            group: \"\",\n            type: \"\",\n            event_relevance: 0,\n            roles: [],\n          })\n      })\n    }\n  })\n  return events\n}\n\nexport const generateRPJSONDocument = ({\n  titleText = \"title\",\n  body = [defaultBodyItem],\n}: RpJsonDocumentMock): RpJsonDocument => {\n  const entities = getEntities(body)\n  const events = getEvents(body)\n  return {\n    document: {\n      rp_document_id: Math.random().toString(),\n      source: { rp_external_source_id: \"rp_external_source_id\", rp_provider_id: \"rp_provider_id\" },\n      timestamps_utc: {\n        analytics: \"2022-07-30 06:17:54.148\",\n        published: \"2022-07-30 06:17:00.000\",\n        reception: \"2022-07-30 06:17:53.355\",\n        revision: \"2022-07-30 06:17:54.148\",\n      },\n      metadata: {},\n    },\n    analytics: {\n      document: {\n        analytics_version: \"analytics_version\",\n        analytics_revision_number: 0,\n        product_key: \"product_key\",\n      },\n      entities,\n      events,\n    },\n    software_versions: {\n      collection_build: \"collection_build\",\n      classification_build: \"classification_build\",\n      metadata_build: \"metadata_build\",\n    },\n    content: {\n      stats: { word_count: 0, extraction_byte_count: 0, byte_count: 0 },\n      title: {\n        text: titleText,\n        sentences: [],\n        markers: [],\n      },\n      body,\n    },\n  }\n}\n"],"names":["generateRPJSONDocument","generateTextContentBlock","defaultBodyItem","text","entities","sentences","markers","analytics","type","events","coordinates","normalized_coordinates","map","array","rp_entity_id","toString","start","Number","end","entity_type","entity_name","event_similarity_key","sentiment","sentiment_confidence","sentenceNumber","getEntities","body","forEach","item","length","entity","find","sub","push","country_code","entity_hierarchy_level","entity_detection_type","entity_detection_distance","entity_relevance","document_record_index","getEvents","event","topic","group","event_relevance","roles","titleText","document","rp_document_id","Math","random","source","rp_external_source_id","rp_provider_id","timestamps_utc","published","reception","revision","metadata","analytics_version","analytics_revision_number","product_key","software_versions","collection_build","classification_build","metadata_build","content","stats","word_count","extraction_byte_count","byte_count","title"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}