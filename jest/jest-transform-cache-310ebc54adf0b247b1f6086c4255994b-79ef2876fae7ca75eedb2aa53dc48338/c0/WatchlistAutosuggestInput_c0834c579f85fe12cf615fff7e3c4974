b26e2bede9a81391529e47165621f7d9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WatchlistAutosuggestInput: function() {
        return WatchlistAutosuggestInput;
    },
    getWatchlistAutosuggestFilters: function() {
        return getWatchlistAutosuggestFilters;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _suggestion = require("@rp/react/tanstack-api/suggestion");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _AutoCompleteCustoms = require("./AutoCompleteCustoms");
const _WatchlistAutosuggestPopper = require("./WatchlistAutosuggestPopper");
const _WatchlistAutosuggestPopperOption = require("./WatchlistAutosuggestPopperOption");
const _useHandleKeyDown = require("./useHandleKeyDown");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getWatchlistAutosuggestFilters = (customFilter)=>{
    switch(customFilter){
        case "stocks":
            return {
                category: [
                    "Companies"
                ],
                group1: [
                    "Public"
                ]
            };
        case "privateCompanies":
            return {
                category: [
                    "Companies"
                ],
                group1: [
                    "Private"
                ]
            };
        case "etfs":
            return {
                category: [
                    "ETFs"
                ]
            };
        default:
            return {
                category: [
                    "Companies",
                    "ETFs"
                ]
            };
    }
};
const SELECT_LINE_HEIGHT = 40;
const AUTOSUGGEST_ITEM_PREFIX = "autosuggest-item-";
const WatchlistAutosuggestInput = /*#__PURE__*/ (0, _react.forwardRef)(({ onChange, placeholder, onClose, open, setOpen, selectedItems, displayItems = 10, disabled, clearOnEnter, autoFocus, inputProps, setQuery, rawQuery, data, isLoading, hasNextPage, fetchNextPage, showTicker, onHorizontalSelect, children }, ref)=>{
    const theme = (0, _core.useTheme)();
    const [visibleSubsidiaries, setVisibleSubsidiaries] = (0, _react.useState)([]);
    const [containerRef, setContainerRef] = (0, _react.useState)(null);
    const inputRef = (0, _react.useRef)(null);
    (0, _react.useImperativeHandle)(ref, ()=>({
            focus: ()=>{
                if (inputRef.current) {
                    inputRef.current.focus();
                }
            },
            addEventListener: (type, listener)=>{
                var _inputRef_current;
                (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.addEventListener(type, listener);
            },
            removeEventListener: (type, listener)=>{
                var _inputRef_current;
                (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.removeEventListener(type, listener);
            }
        }));
    const options = (0, _react.useMemo)(()=>{
        const flatten = (data === null || data === void 0 ? void 0 : data.pages.flatMap((page)=>page.results)) || [];
        return (0, _suggestion.groupCompanySuggestions)(flatten, visibleSubsidiaries);
    }, [
        data === null || data === void 0 ? void 0 : data.pages,
        visibleSubsidiaries
    ]);
    (0, _react.useEffect)(()=>{
        const withoutSelected = options.filter((item)=>!(selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.includes(item.id))) || [];
        if (withoutSelected && withoutSelected.length < displayItems && hasNextPage) {
            fetchNextPage();
        }
    }, [
        fetchNextPage,
        hasNextPage,
        options,
        displayItems,
        selectedItems
    ]);
    const { handleInputKeydown, selectedOption, setSelectedOption } = (0, _useHandleKeyDown.useHandleKeyDown)(options, {
        autoSelectFirstOption: open,
        onArrowDown: (0, _react.useCallback)((id)=>{
            if (id) {
                const selectedLi = document.querySelector(`#${AUTOSUGGEST_ITEM_PREFIX}${id}`);
                selectedLi === null || selectedLi === void 0 ? void 0 : selectedLi.scrollIntoView({
                    behavior: "smooth",
                    block: "nearest"
                });
            }
            setOpen(true);
        }, [
            setOpen
        ]),
        onArrowUp: (0, _react.useCallback)((id)=>{
            if (id) {
                const selectedLi = document.querySelector(`#${AUTOSUGGEST_ITEM_PREFIX}${id}`);
                selectedLi === null || selectedLi === void 0 ? void 0 : selectedLi.scrollIntoView({
                    behavior: "smooth",
                    block: "nearest"
                });
            }
            setOpen(true);
        }, [
            setOpen
        ]),
        onArrowLeft: (0, _react.useCallback)(()=>{
            if (rawQuery === "") onHorizontalSelect === null || onHorizontalSelect === void 0 ? void 0 : onHorizontalSelect(-1);
        }, [
            rawQuery,
            onHorizontalSelect
        ]),
        onArrowRight: (0, _react.useCallback)(()=>{
            if (rawQuery === "") onHorizontalSelect === null || onHorizontalSelect === void 0 ? void 0 : onHorizontalSelect(1);
        }, [
            rawQuery,
            onHorizontalSelect
        ]),
        onEscape: (0, _react.useCallback)(()=>setOpen(false), [
            setOpen
        ]),
        onEnter: (0, _react.useCallback)((index)=>{
            if (index !== null) {
                onChange(options[index]);
            }
            if (clearOnEnter) {
                setQuery("");
            }
            setOpen(false);
            setQuery("");
            setVisibleSubsidiaries([]);
        }, [
            clearOnEnter,
            onChange,
            options,
            setOpen,
            setQuery
        ])
    });
    const handleInputChange = (0, _react.useCallback)((event)=>{
        setOpen(true);
        setSelectedOption(null);
        setVisibleSubsidiaries([]);
        setQuery(event.target.value);
    }, [
        setOpen,
        setQuery,
        setSelectedOption
    ]);
    const handleChange = (0, _react.useCallback)((value)=>{
        if (!value) return;
        setOpen(false);
        setQuery("");
        onChange(value);
        setSelectedOption(null);
        setVisibleSubsidiaries([]);
    }, [
        onChange,
        setOpen,
        setQuery,
        setSelectedOption
    ]);
    const toggleSubsidiaries = (0, _react.useCallback)((parentId)=>{
        const key = parentId.replace(AUTOSUGGEST_ITEM_PREFIX, "");
        setSelectedOption(key);
        const isCurrentlyOpen = visibleSubsidiaries.includes(key);
        if (isCurrentlyOpen) {
            setVisibleSubsidiaries((prev)=>prev.filter((id)=>id !== key));
        } else {
            setVisibleSubsidiaries((prev)=>[
                    ...prev,
                    key
                ]);
        }
    }, [
        setSelectedOption,
        visibleSubsidiaries
    ]);
    const onClickAway = (0, _react.useCallback)(()=>{
        if (document.activeElement === inputRef.current) return;
        setOpen(false);
        setQuery("");
        setSelectedOption(null);
    }, [
        setOpen,
        setQuery,
        setSelectedOption
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_AutoCompleteCustoms.ResultsAutosuggestInputStyled, {
                sx: {
                    "& .Mui-focused fieldset": {
                        borderColor: "rgba(255, 255, 255, 0.3) !important",
                        borderBottomLeftRadius: "8px",
                        borderBottomRightRadius: "8px"
                    },
                    [`& .Mui-focused.${_AutoCompleteCustoms.autosuggestInputClasses.input}`]: {
                        borderBottomLeftRadius: "8px",
                        borderBottomRightRadius: "8px"
                    }
                },
                inputRef: inputRef,
                inputVariant: "search",
                isPopperOpen: open && options.length > 0,
                autoFocus: autoFocus,
                classes: {
                    root: _AutoCompleteCustoms.autosuggestInputClasses.inputRoot
                },
                placeholder: placeholder,
                variant: "outlined",
                InputLabelProps: {
                    shrink: true
                },
                InputProps: _object_spread_props(_object_spread({
                    classes: {
                        root: _AutoCompleteCustoms.autosuggestInputClasses.input,
                        input: "data-hj-allow"
                    }
                }, inputProps), {
                    startAdornment: onClose ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                        position: "start",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                            "data-testid": "back-arrow-button",
                            onClick: onClose,
                            size: "small",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowBack, {})
                        })
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                        position: "start",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {})
                    })
                }),
                value: rawQuery,
                "data-testid": "unified-search-autocomplete",
                autoComplete: "off",
                onClick: ()=>setOpen(true),
                onChange: handleInputChange,
                onBlur: ()=>setSelectedOption(null),
                onFocus: ()=>setOpen(true),
                ref: setContainerRef,
                onKeyDown: handleInputKeydown,
                disabled: disabled
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistAutosuggestPopper.WatchlistAutosuggestPopper, {
                open: open,
                onClickAway: onClickAway,
                options: options,
                isLoading: isLoading,
                maxPopperHeight: displayItems * SELECT_LINE_HEIGHT,
                renderOption: (option)=>{
                    const key = (0, _suggestion.isEntitySuggestion)(option) ? option.key : option.id;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistAutosuggestPopperOption.WatchlistAutosuggestPopperOption, {
                        toggleSubsidiaries: toggleSubsidiaries,
                        id: `${AUTOSUGGEST_ITEM_PREFIX}${key}`,
                        isChecked: selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.includes(key),
                        selectedOption: selectedOption,
                        highlightValue: rawQuery,
                        onClick: handleChange,
                        entity: option,
                        showTicker: showTicker,
                        backgroundColor: theme.palette.elevation.dp08
                    }, key);
                },
                inputRef: containerRef,
                backgroundColor: theme.palette.elevation.dp08,
                children: children
            })
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,