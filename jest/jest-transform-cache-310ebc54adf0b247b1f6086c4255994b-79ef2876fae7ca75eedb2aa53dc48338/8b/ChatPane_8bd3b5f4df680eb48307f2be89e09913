e569c663689d5b06210eed08e98030e9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ChatPane", {
    enumerable: true,
    get: function() {
        return ChatPane;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _jotai = require("jotai");
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _reactrouter = require("react-router");
const _clerkreact = require("@clerk/clerk-react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _chat = require("@rp/react/web/chat");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _resultsstorycard = require("@rp/react/web/common/results-story-card");
const _core = require("@rp/react/web/mui/core");
const _router = require("@rp/react/web/router");
const _chatfeedback = require("../../../../../atoms/chat-feedback");
const _websocketendpoint = require("../../../../../atoms/web-socket-endpoint");
const _useChatPane = require("../../hooks/useChatPane");
const _FilesDashPane = require("../FilesDashPane");
const _ChatPaneHeader = require("./ChatPaneHeader");
const _ChatPaneInput = require("./ChatPaneInput");
const _ChatPaneLoadingChat = require("./ChatPaneLoadingChat");
const _ChatPaneSuggestions = require("./ChatPaneSuggestions");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// keeps chat input filter from rendering
const emptyFieldIds = [];
// TODO: Implement this
const onAuditTrailScroll = ()=>{};
function ChatPane({ width, close, selectedFiles }) {
    const { webFeEnableEngineAgents } = (0, _launchdarklyreactclientsdk.useFlags)();
    const navigate = (0, _reactrouter.useNavigate)();
    const enableUseMasterRouter = (0, _hooks.getlocalOverrideFlags)("webFeEnableEngineAgents", webFeEnableEngineAgents);
    const { id: documentId = "" } = (0, _reactrouter.useParams)();
    const [feedback, setFeedback] = (0, _jotai.useAtom)(_chatfeedback.chatFeedbackAtom);
    const { chat: { id: chatId, savedChat }, files: { setFileIds, fileIds }, helpers: { resetChatState }, mutations: { addPrompt, addResponse, regenerateLastResponse, editLastQuestion }, scope: { scope, setScope }, ui: { context, isAuditMode, timingsMap, currentInteraction, setCurrentInteraction } } = (0, _chat.useChatDataContext)();
    const { user } = (0, _clerkreact.useUser)();
    var _getUserInitials;
    const userInitials = (_getUserInitials = (0, _utils.getUserInitials)(user === null || user === void 0 ? void 0 : user.fullName)) !== null && _getUserInitials !== void 0 ? _getUserInitials : "";
    (0, _react.useEffect)(()=>{
        if (!context) return;
        const fileIds = selectedFiles.map((file)=>file.id);
        setScope(selectedFiles.length > 0 ? undefined : "files");
        setFileIds(fileIds);
        context.current = {
            fileIds
        };
    }, [
        context,
        documentId,
        setFileIds,
        setScope,
        selectedFiles
    ]);
    const { webSocketEndpoint } = (0, _websocketendpoint.useWebSocketEndpointAtom)();
    const scrollRef = (0, _react.useRef)(null);
    const { enqueueInfo } = (0, _providers.useSnackbar)();
    const { shouldShowChat, shouldShowLoadingChat, shouldShowSuggestions, name } = (0, _useChatPane.useChatPane)({
        chatId,
        currentInteraction,
        selectedFiles
    });
    const handleNewChat = (0, _react.useCallback)(()=>{
        resetChatState();
        navigate(_router.FILES_ROUTE, {
            replace: true
        });
    }, [
        navigate,
        resetChatState
    ]);
    if (!width) return null;
    var _feedback_chatId;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_FilesDashPane.FilesDashPane, {
        width: width,
        minWidth: "350px",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatPaneHeader.ChatPaneHeader, {
                close: close,
                name: name,
                handleNewChat: handleNewChat
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                ref: scrollRef,
                sx: (theme)=>_object_spread_props(_object_spread({
                        height: "calc(100vh - 150px)",
                        overscrollBehavior: "contain",
                        overflowY: "scroll",
                        overflowX: "hidden",
                        scrollbarGutter: "stable",
                        p: 2,
                        mb: "16px",
                        pb: 20
                    }, theme.onHoverScrollbarStyles), {
                        "&:hover": _object_spread({}, theme.scrollbarStyles)
                    }),
                children: [
                    shouldShowSuggestions && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatPaneSuggestions.ChatPaneSuggestions, {
                        name: name,
                        isSingleDocument: !!documentId,
                        addPrompt: addPrompt
                    }),
                    shouldShowLoadingChat && !!currentInteraction && /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatPaneLoadingChat.ChatPaneLoadingChat, {
                        currentInteraction: currentInteraction,
                        userInitials: userInitials
                    }),
                    shouldShowChat && !!chatId && /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat.Chat, {
                        parentScrollContainer: scrollRef.current,
                        scrollContainer: scrollRef.current,
                        onAuditTrailScroll: onAuditTrailScroll,
                        variant: "mobile",
                        useMasterRouter: enableUseMasterRouter,
                        chat: savedChat,
                        filesIds: fileIds,
                        auditMode: isAuditMode,
                        onResponseComplete: addResponse,
                        userInitials: userInitials,
                        moreActions: null,
                        onRegenerateResponse: regenerateLastResponse,
                        onEdit: editLastQuestion,
                        onChatFeedbackSuccess: ({ feedbackSentiment, interactionTimestamp })=>{
                            setFeedback((prev)=>_object_spread_props(_object_spread({}, prev), {
                                    [chatId]: _object_spread_props(_object_spread({}, prev[chatId]), {
                                        [interactionTimestamp]: feedbackSentiment
                                    })
                                }));
                        },
                        renderCard: ({ story, interactionTimestamp, chatId }, index)=>{
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_resultsstorycard.ChunkStoryCard, {
                                onCardClick: ()=>{
                                    _customerio.chatCustomerIo.chunkStoryCardClick({
                                        chatId,
                                        documentId: story.id,
                                        interactionTimestamp
                                    });
                                },
                                story: story,
                                index: index
                            }, story.id);
                        },
                        getTimings: (id)=>timingsMap[id],
                        scope: scope,
                        areMetricsEnabled: true,
                        currentInteraction: currentInteraction,
                        onError: (_, error)=>{
                            if (error.type === "ERROR") {
                                setCurrentInteraction((prev)=>{
                                    return prev !== undefined ? _object_spread_props(_object_spread({}, prev), {
                                        error: true
                                    }) : undefined;
                                });
                                reportError(new Error(error === null || error === void 0 ? void 0 : error.message));
                                enqueueInfo(_settings.SUMMARY_ERROR_MESSAGES[(0, _utils.randomIntFromInterval)(0, 4)]);
                            }
                        },
                        chatFeedback: (_feedback_chatId = feedback[chatId]) !== null && _feedback_chatId !== void 0 ? _feedback_chatId : {},
                        addPrompt: (prompt)=>{
                            addPrompt({
                                prompt,
                                entities: []
                            });
                        },
                        webSocketUrl: webSocketEndpoint
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    position: "absolute",
                    bottom: 0,
                    left: 0,
                    right: "5px",
                    height: "120px",
                    bgcolor: "elevation.dp01"
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ChatPaneInput.ChatPaneInput, {
                    name: name,
                    addPrompt: addPrompt,
                    filesIds: emptyFieldIds,
                    hasChat: !!chatId
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,