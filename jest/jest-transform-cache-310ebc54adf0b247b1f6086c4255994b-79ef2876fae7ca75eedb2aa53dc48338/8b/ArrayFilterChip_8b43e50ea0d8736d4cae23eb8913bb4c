f8972cc138c8efbd34bfba39501a9bee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ArrayFilterChip", {
    enumerable: true,
    get: function() {
        return ArrayFilterChip;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _hooks = require("@rp/react/web/common/hooks");
const _utils = require("@rp/react/web/common/vendors/utils");
const _icons = require("@rp/react/web/icons");
const _NameDisplay = require("../NameDisplay");
const _AdvancedDropdown = require("../dropdowns/AdvancedDropdown");
const _BaseChip = require("./BaseChip");
const _Chipstyles = require("./Chip.styles");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const iconMap = {
    language: "LANG",
    rp_topic: "EVNT",
    source: "SRCE",
    keyword: "keyword"
};
const ArrayFilterChip = /*#__PURE__*/ (0, _react.forwardRef)(({ filter, onRemove, query }, ref)=>{
    var _filter_metadata;
    const [anchorEl, setAnchorEl] = (0, _react.useState)(null);
    const open = Boolean(anchorEl);
    (0, _hooks.useDisableIOSTouch)(open);
    const total = filter.value.length;
    var _filter_metadata_subType, _ref;
    const icon = (_ref = (_filter_metadata_subType = (_filter_metadata = filter.metadata) === null || _filter_metadata === void 0 ? void 0 : _filter_metadata.subType) !== null && _filter_metadata_subType !== void 0 ? _filter_metadata_subType : iconMap[filter.type]) !== null && _ref !== void 0 ? _ref : "";
    const handleClick = (event)=>{
        setAnchorEl(event.currentTarget);
    };
    const handleClose = ()=>{
        setAnchorEl(null);
    };
    const handleRemoveItem = (id)=>{
        handleClose();
        var _query_id, _query_saveStatus;
        _utils.tagManagerEvents.queryRefinement({
            action: "remove",
            component: "queryBar",
            queryId: (_query_id = query === null || query === void 0 ? void 0 : query.id) !== null && _query_id !== void 0 ? _query_id : "",
            queryType: filter.type,
            savedStatus: (_query_saveStatus = query === null || query === void 0 ? void 0 : query.saveStatus) !== null && _query_saveStatus !== void 0 ? _query_saveStatus : "unsaved"
        });
        // If the filter is a keyword and it has only one value, remove the filter
        if (filter.type === "keyword" && filter.value.length === 1) {
            onRemove === null || onRemove === void 0 ? void 0 : onRemove();
            return;
        }
        query === null || query === void 0 ? void 0 : query.actions.expression.updateFilter(filter.id, (filter)=>{
            if (!Array.isArray(filter.value)) {
                return filter;
            }
            return _object_spread_props(_object_spread({}, filter), {
                value: filter.value.filter((currentId)=>currentId !== id)
            });
        });
    };
    const handleOperationChange = (operation)=>{
        var _filter_metadata;
        const items = Array.isArray(filter.value) ? filter.value.map((value)=>{
            var _filter_metadata;
            return {
                type: filter.type,
                value,
                entityType: filter === null || filter === void 0 ? void 0 : (_filter_metadata = filter.metadata) === null || _filter_metadata === void 0 ? void 0 : _filter_metadata.subType,
                operation
            };
        }) : [
            {
                type: filter.type,
                value: filter.value,
                entityType: filter === null || filter === void 0 ? void 0 : (_filter_metadata = filter.metadata) === null || _filter_metadata === void 0 ? void 0 : _filter_metadata.subType,
                operation
            }
        ];
        var _query_id, _query_saveStatus;
        _utils.tagManagerEvents.queryRefinement({
            action: "changeOperation",
            component: "queryBar",
            queryId: (_query_id = query === null || query === void 0 ? void 0 : query.id) !== null && _query_id !== void 0 ? _query_id : "",
            queryType: filter.type,
            savedStatus: (_query_saveStatus = query === null || query === void 0 ? void 0 : query.saveStatus) !== null && _query_saveStatus !== void 0 ? _query_saveStatus : "unsaved"
        });
        query === null || query === void 0 ? void 0 : query.actions.expression.updateItems(filter.id, items);
    };
    const handleIndividuallyOperation = (operation, entityId)=>{
        var _filter_metadata;
        const items = Array.isArray(filter.value) ? filter.value.map((value)=>{
            var _filter_metadata;
            return {
                type: filter.type,
                value,
                entityType: filter === null || filter === void 0 ? void 0 : (_filter_metadata = filter.metadata) === null || _filter_metadata === void 0 ? void 0 : _filter_metadata.subType,
                operation: value === entityId ? operation : filter.operation
            };
        }) : [
            {
                type: filter.type,
                value: filter.value,
                entityType: filter === null || filter === void 0 ? void 0 : (_filter_metadata = filter.metadata) === null || _filter_metadata === void 0 ? void 0 : _filter_metadata.subType,
                operation
            }
        ];
        var _query_id, _query_saveStatus;
        _utils.tagManagerEvents.queryRefinement({
            action: "changeOperation",
            component: "queryBar",
            queryId: (_query_id = query === null || query === void 0 ? void 0 : query.id) !== null && _query_id !== void 0 ? _query_id : "",
            queryType: filter.type,
            savedStatus: (_query_saveStatus = query === null || query === void 0 ? void 0 : query.saveStatus) !== null && _query_saveStatus !== void 0 ? _query_saveStatus : "unsaved"
        });
        query === null || query === void 0 ? void 0 : query.actions.expression.updateItems(filter.id, items);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_BaseChip.BaseChip, {
                clickable: true,
                icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.QueryIcon, {
                    icon: icon
                }),
                onClick: handleClick,
                onRemove: onRemove,
                selected: query && open,
                ref: ref,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Chipstyles.ChipLabel, {
                        children: filter.value.map((id, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_NameDisplay.NameDisplay, {
                                        filterType: filter.type,
                                        entityId: id
                                    }),
                                    index < total - 1 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Chipstyles.Separator, {}) : null
                                ]
                            }, `fragment-${filter.id}-${id}`))
                    }),
                    total > 1 ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Chipstyles.TotalDisplay, {
                        children: [
                            "(",
                            total,
                            ")"
                        ]
                    }) : null
                ]
            }),
            query ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Chipstyles.PopoverStyled, {
                open: open,
                anchorEl: anchorEl,
                onClose: handleClose,
                anchorOrigin: {
                    vertical: "bottom",
                    horizontal: "left"
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AdvancedDropdown.AdvancedDropdown, {
                    query: query,
                    filter: filter,
                    icon: icon,
                    onRemove: handleRemoveItem,
                    onChange: handleOperationChange,
                    individualChange: handleIndividuallyOperation
                })
            }) : null
        ]
    });
});

//# sourceMappingURL=data:application/json;base64,