f7332556c0c9c7ec58cbc47d12b11ed3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "EllipsisTooltip", {
    enumerable: true,
    get: function() {
        return EllipsisTooltip;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _EllipsisTooltipstyles = require("./EllipsisTooltip.styles");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const EllipsisTooltip = ({ tooltipText, enterDelay = 300, tooltipPlacement = "top", typographyProps = {}, tooltipProps = {}, tooltipStyles = {}, children, forceShowTooltip = false, vertical = false, numberOfLines = 2, disabled = false })=>{
    var _ref_current, _ref_current1;
    const { isMobile, isHoverDevice } = (0, _hooks.useDeviceInfo)();
    const [showTooltip, setShowTooltip] = (0, _react.useState)(false);
    const ref = (0, _react.useRef)(null);
    (0, _react.useEffect)(()=>{
        if (forceShowTooltip) {
            setShowTooltip(true);
            return ()=>{
                setShowTooltip(false);
            };
        }
        ref.current && setShowTooltip(vertical ? ref.current.scrollHeight > ref.current.clientHeight : ref.current.scrollWidth > ref.current.clientWidth);
        return ()=>{
            setShowTooltip(false);
        };
    }, [
        (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.scrollWidth,
        (_ref_current1 = ref.current) === null || _ref_current1 === void 0 ? void 0 : _ref_current1.clientWidth,
        forceShowTooltip,
        vertical
    ]);
    const overflowStyles = vertical ? {
        overflowY: "hidden",
        display: "-webkit-box",
        overflowWrap: "break-word",
        WebkitBoxOrient: "vertical",
        WebkitLineClamp: numberOfLines
    } : {
        whiteSpace: "nowrap",
        overflow: "hidden",
        textOverflow: "ellipsis"
    };
    return disabled ? children : /*#__PURE__*/ (0, _jsxruntime.jsx)(_EllipsisTooltipstyles.StyledTooltip, _object_spread_props(_object_spread({}, tooltipProps), {
        tooltipStyles: tooltipStyles,
        title: tooltipText,
        disableHoverListener: !showTooltip || isMobile || !isHoverDevice,
        disableTouchListener: true,
        disableFocusListener: true,
        disableInteractive: true,
        enterDelay: enterDelay,
        placement: tooltipPlacement,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, _object_spread_props(_object_spread({
            ref: ref
        }, typographyProps), {
            component: typographyProps.component || "span",
            style: _object_spread({}, overflowStyles, typographyProps.style),
            children: children
        }))
    }));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvRWxsaXBzaXNUb29sdGlwL0VsbGlwc2lzVG9vbHRpcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VEZXZpY2VJbmZvIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IFR5cG9ncmFwaHkgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5pbXBvcnQgeyBTdHlsZWRUb29sdGlwIH0gZnJvbSBcIi4vRWxsaXBzaXNUb29sdGlwLnN0eWxlc1wiXG5pbXBvcnQgeyBQcm9wcyB9IGZyb20gXCIuL0VsbGlwc2lzVG9vbHRpcC50eXBlc1wiXG5cbmNvbnN0IEVsbGlwc2lzVG9vbHRpcDogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgdG9vbHRpcFRleHQsXG4gIGVudGVyRGVsYXkgPSAzMDAsXG4gIHRvb2x0aXBQbGFjZW1lbnQgPSBcInRvcFwiLFxuICB0eXBvZ3JhcGh5UHJvcHMgPSB7fSxcbiAgdG9vbHRpcFByb3BzID0ge30sXG4gIHRvb2x0aXBTdHlsZXMgPSB7fSxcbiAgY2hpbGRyZW4sXG4gIGZvcmNlU2hvd1Rvb2x0aXAgPSBmYWxzZSxcbiAgdmVydGljYWwgPSBmYWxzZSxcbiAgbnVtYmVyT2ZMaW5lcyA9IDIsXG4gIGRpc2FibGVkID0gZmFsc2UsXG59KSA9PiB7XG4gIGNvbnN0IHsgaXNNb2JpbGUsIGlzSG92ZXJEZXZpY2UgfSA9IHVzZURldmljZUluZm8oKVxuICBjb25zdCBbc2hvd1Rvb2x0aXAsIHNldFNob3dUb29sdGlwXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCByZWYgPSB1c2VSZWY8SFRNTFBhcmFncmFwaEVsZW1lbnQ+KG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZm9yY2VTaG93VG9vbHRpcCkge1xuICAgICAgc2V0U2hvd1Rvb2x0aXAodHJ1ZSlcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHNldFNob3dUb29sdGlwKGZhbHNlKVxuICAgICAgfVxuICAgIH1cbiAgICByZWYuY3VycmVudCAmJlxuICAgICAgc2V0U2hvd1Rvb2x0aXAoXG4gICAgICAgIHZlcnRpY2FsXG4gICAgICAgICAgPyByZWYuY3VycmVudC5zY3JvbGxIZWlnaHQgPiByZWYuY3VycmVudC5jbGllbnRIZWlnaHRcbiAgICAgICAgICA6IHJlZi5jdXJyZW50LnNjcm9sbFdpZHRoID4gcmVmLmN1cnJlbnQuY2xpZW50V2lkdGgsXG4gICAgICApXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNldFNob3dUb29sdGlwKGZhbHNlKVxuICAgIH1cbiAgfSwgW3JlZi5jdXJyZW50Py5zY3JvbGxXaWR0aCwgcmVmLmN1cnJlbnQ/LmNsaWVudFdpZHRoLCBmb3JjZVNob3dUb29sdGlwLCB2ZXJ0aWNhbF0pXG5cbiAgY29uc3Qgb3ZlcmZsb3dTdHlsZXMgPSB2ZXJ0aWNhbFxuICAgID8gKHtcbiAgICAgICAgb3ZlcmZsb3dZOiBcImhpZGRlblwiLFxuICAgICAgICBkaXNwbGF5OiBcIi13ZWJraXQtYm94XCIsXG4gICAgICAgIG92ZXJmbG93V3JhcDogXCJicmVhay13b3JkXCIsXG4gICAgICAgIFdlYmtpdEJveE9yaWVudDogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICBXZWJraXRMaW5lQ2xhbXA6IG51bWJlck9mTGluZXMsXG4gICAgICB9IGFzIGNvbnN0KVxuICAgIDogKHtcbiAgICAgICAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgIHRleHRPdmVyZmxvdzogXCJlbGxpcHNpc1wiLFxuICAgICAgfSBhcyBjb25zdClcblxuICByZXR1cm4gZGlzYWJsZWQgPyAoXG4gICAgY2hpbGRyZW5cbiAgKSA6IChcbiAgICA8U3R5bGVkVG9vbHRpcFxuICAgICAgey4uLnRvb2x0aXBQcm9wc31cbiAgICAgIHRvb2x0aXBTdHlsZXM9e3Rvb2x0aXBTdHlsZXN9XG4gICAgICB0aXRsZT17dG9vbHRpcFRleHR9XG4gICAgICBkaXNhYmxlSG92ZXJMaXN0ZW5lcj17IXNob3dUb29sdGlwIHx8IGlzTW9iaWxlIHx8ICFpc0hvdmVyRGV2aWNlfVxuICAgICAgZGlzYWJsZVRvdWNoTGlzdGVuZXJcbiAgICAgIGRpc2FibGVGb2N1c0xpc3RlbmVyXG4gICAgICBkaXNhYmxlSW50ZXJhY3RpdmVcbiAgICAgIGVudGVyRGVsYXk9e2VudGVyRGVsYXl9XG4gICAgICBwbGFjZW1lbnQ9e3Rvb2x0aXBQbGFjZW1lbnR9XG4gICAgPlxuICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHsuLi50eXBvZ3JhcGh5UHJvcHN9XG4gICAgICAgIGNvbXBvbmVudD17dHlwb2dyYXBoeVByb3BzLmNvbXBvbmVudCB8fCBcInNwYW5cIn1cbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAuLi5vdmVyZmxvd1N0eWxlcyxcbiAgICAgICAgICAuLi50eXBvZ3JhcGh5UHJvcHMuc3R5bGUsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICA8L1N0eWxlZFRvb2x0aXA+XG4gIClcbn1cblxuZXhwb3J0IHsgRWxsaXBzaXNUb29sdGlwIH1cbiJdLCJuYW1lcyI6WyJFbGxpcHNpc1Rvb2x0aXAiLCJ0b29sdGlwVGV4dCIsImVudGVyRGVsYXkiLCJ0b29sdGlwUGxhY2VtZW50IiwidHlwb2dyYXBoeVByb3BzIiwidG9vbHRpcFByb3BzIiwidG9vbHRpcFN0eWxlcyIsImNoaWxkcmVuIiwiZm9yY2VTaG93VG9vbHRpcCIsInZlcnRpY2FsIiwibnVtYmVyT2ZMaW5lcyIsImRpc2FibGVkIiwicmVmIiwiaXNNb2JpbGUiLCJpc0hvdmVyRGV2aWNlIiwidXNlRGV2aWNlSW5mbyIsInNob3dUb29sdGlwIiwic2V0U2hvd1Rvb2x0aXAiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxXaWR0aCIsImNsaWVudFdpZHRoIiwib3ZlcmZsb3dTdHlsZXMiLCJvdmVyZmxvd1kiLCJkaXNwbGF5Iiwib3ZlcmZsb3dXcmFwIiwiV2Via2l0Qm94T3JpZW50IiwiV2Via2l0TGluZUNsYW1wIiwid2hpdGVTcGFjZSIsIm92ZXJmbG93IiwidGV4dE92ZXJmbG93IiwiU3R5bGVkVG9vbHRpcCIsInRpdGxlIiwiZGlzYWJsZUhvdmVyTGlzdGVuZXIiLCJkaXNhYmxlVG91Y2hMaXN0ZW5lciIsImRpc2FibGVGb2N1c0xpc3RlbmVyIiwiZGlzYWJsZUludGVyYWN0aXZlIiwicGxhY2VtZW50IiwiVHlwb2dyYXBoeSIsImNvbXBvbmVudCIsInN0eWxlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQW9GU0E7OztlQUFBQTs7OzsrREFwRjBDO3VCQUNyQjtzQkFDSDt1Q0FDRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUc5QixNQUFNQSxrQkFBbUMsQ0FBQyxFQUN4Q0MsV0FBVyxFQUNYQyxhQUFhLEdBQUcsRUFDaEJDLG1CQUFtQixLQUFLLEVBQ3hCQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQ3BCQyxlQUFlLENBQUMsQ0FBQyxFQUNqQkMsZ0JBQWdCLENBQUMsQ0FBQyxFQUNsQkMsUUFBUSxFQUNSQyxtQkFBbUIsS0FBSyxFQUN4QkMsV0FBVyxLQUFLLEVBQ2hCQyxnQkFBZ0IsQ0FBQyxFQUNqQkMsV0FBVyxLQUFLLEVBQ2pCO1FBcUJLQyxjQUEwQkE7SUFwQjlCLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxhQUFhLEVBQUUsR0FBR0MsSUFBQUEsb0JBQWE7SUFDakQsTUFBTSxDQUFDQyxhQUFhQyxlQUFlLEdBQUdDLElBQUFBLGVBQVEsRUFBQztJQUMvQyxNQUFNTixNQUFNTyxJQUFBQSxhQUFNLEVBQXVCO0lBRXpDQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSVosa0JBQWtCO1lBQ3BCUyxlQUFlO1lBQ2YsT0FBTztnQkFDTEEsZUFBZTtZQUNqQjtRQUNGO1FBQ0FMLElBQUlTLE9BQU8sSUFDVEosZUFDRVIsV0FDSUcsSUFBSVMsT0FBTyxDQUFDQyxZQUFZLEdBQUdWLElBQUlTLE9BQU8sQ0FBQ0UsWUFBWSxHQUNuRFgsSUFBSVMsT0FBTyxDQUFDRyxXQUFXLEdBQUdaLElBQUlTLE9BQU8sQ0FBQ0ksV0FBVztRQUV6RCxPQUFPO1lBQ0xSLGVBQWU7UUFDakI7SUFDRixHQUFHO1NBQUNMLGVBQUFBLElBQUlTLE9BQU8sY0FBWFQsbUNBQUFBLGFBQWFZLFdBQVc7U0FBRVosZ0JBQUFBLElBQUlTLE9BQU8sY0FBWFQsb0NBQUFBLGNBQWFhLFdBQVc7UUFBRWpCO1FBQWtCQztLQUFTO0lBRW5GLE1BQU1pQixpQkFBaUJqQixXQUNsQjtRQUNDa0IsV0FBVztRQUNYQyxTQUFTO1FBQ1RDLGNBQWM7UUFDZEMsaUJBQWlCO1FBQ2pCQyxpQkFBaUJyQjtJQUNuQixJQUNDO1FBQ0NzQixZQUFZO1FBQ1pDLFVBQVU7UUFDVkMsY0FBYztJQUNoQjtJQUVKLE9BQU92QixXQUNMSix5QkFFQSxxQkFBQzRCLG9DQUFhLDBDQUNSOUI7UUFDSkMsZUFBZUE7UUFDZjhCLE9BQU9uQztRQUNQb0Msc0JBQXNCLENBQUNyQixlQUFlSCxZQUFZLENBQUNDO1FBQ25Ed0Isb0JBQW9CO1FBQ3BCQyxvQkFBb0I7UUFDcEJDLGtCQUFrQjtRQUNsQnRDLFlBQVlBO1FBQ1p1QyxXQUFXdEM7a0JBRVgsY0FBQSxxQkFBQ3VDLGdCQUFVO1lBQ1Q5QixLQUFLQTtXQUNEUjtZQUNKdUMsV0FBV3ZDLGdCQUFnQnVDLFNBQVMsSUFBSTtZQUN4Q0MsT0FBTyxtQkFDRmxCLGdCQUNBdEIsZ0JBQWdCd0MsS0FBSztzQkFHekJyQzs7O0FBSVQifQ==