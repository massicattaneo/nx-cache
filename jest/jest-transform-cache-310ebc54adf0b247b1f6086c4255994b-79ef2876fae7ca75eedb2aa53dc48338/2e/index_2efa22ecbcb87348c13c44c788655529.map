{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-factory-whitespace/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n"],"names":["factoryWhitespace","effects","ok","seen","start","code","markdownLineEnding","enter","consume","exit","markdownSpace","factorySpace"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;CAGC;;;;+BAsBeA;;;eAAAA;;;uCApBW;wCACqB;AAmBzC,SAASA,kBAAkBC,OAAO,EAAEC,EAAE;IAC3C,oBAAoB,GACpB,IAAIC;IACJ,OAAOC;IAEP,kBAAkB,GAClB,SAASA,MAAMC,IAAI;QACjB,IAAIC,IAAAA,0CAAkB,EAACD,OAAO;YAC5BJ,QAAQM,KAAK,CAAC;YACdN,QAAQO,OAAO,CAACH;YAChBJ,QAAQQ,IAAI,CAAC;YACbN,OAAO;YACP,OAAOC;QACT;QACA,IAAIM,IAAAA,qCAAa,EAACL,OAAO;YACvB,OAAOM,IAAAA,mCAAY,EACjBV,SACAG,OACAD,OAAO,eAAe,cACtBE;QACJ;QACA,OAAOH,GAAGG;IACZ;AACF"}