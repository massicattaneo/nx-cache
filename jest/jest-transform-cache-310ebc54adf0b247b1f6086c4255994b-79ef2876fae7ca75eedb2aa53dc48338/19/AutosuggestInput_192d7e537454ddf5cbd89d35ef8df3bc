0e2bdd452f2bf7865821f35561924820
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AutosuggestInput", {
    enumerable: true,
    get: function() {
        return AutosuggestInput;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _AutoCompleteCustoms = require("./AutoCompleteCustoms");
const _AutosuggestPopper = require("./AutosuggestPopper");
const _useAutosuggestInput = require("./useAutosuggestInput");
const AutosuggestInput = ({ onChange, forceShowRecentSearches, onSearchClick, selectedItems, excludeQueryTypes, variant, placeholder, keepOpen = false, onClose })=>{
    const [inputRef, setInputRef] = (0, _react.useState)(null);
    const [inputFocusRef, setInputFocusRef] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>inputFocusRef === null || inputFocusRef === void 0 ? void 0 : inputFocusRef.focus(), [
        inputFocusRef
    ]);
    const { options, value, showRecentSearches, searchValue, toggleSubsidiaries, handleChange, handleInputChange, closePopper, handleInputKeydown, selectedOption, open, setOpen, setSelectedOption } = (0, _useAutosuggestInput.useAutosuggestInput)({
        onChange,
        forceShowRecentSearches,
        onSearchClick,
        selectedItems,
        excludeQueryTypes,
        keepOpen
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_AutoCompleteCustoms.ResultsAutosuggestInputStyled, {
                inputRef: setInputFocusRef,
                inputVariant: variant,
                isPopperOpen: open && options.length > 0,
                autoFocus: true,
                classes: {
                    root: _AutoCompleteCustoms.autosuggestInputClasses.inputRoot
                },
                placeholder: placeholder,
                variant: "outlined",
                InputLabelProps: {
                    shrink: true
                },
                InputProps: {
                    classes: {
                        root: _AutoCompleteCustoms.autosuggestInputClasses.input,
                        input: "data-hj-allow"
                    },
                    startAdornment: onClose ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                        position: "start",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                            "data-testid": "back-arrow-button",
                            onClick: onClose,
                            size: "small",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowBack, {})
                        })
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputAdornment, {
                        position: "start",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {})
                    })
                },
                value: value,
                "data-testid": "unified-search-autocomplete",
                autoComplete: "off",
                onClick: ()=>setOpen(true),
                onChange: handleInputChange,
                onBlur: ()=>{
                    closePopper();
                    setSelectedOption(null);
                },
                ref: setInputRef,
                onKeyDown: handleInputKeydown
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_AutosuggestPopper.AutosuggestPopper, {
                open: open,
                options: options,
                dropdownTitle: showRecentSearches ? "Recent Searches" : undefined,
                selectedOption: selectedOption,
                inputRef: inputRef,
                searchValue: searchValue,
                toggleSubsidiaries: toggleSubsidiaries,
                handleChange: handleChange
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9zZWFyY2gtYXV0b3N1Z2dlc3QtaW5wdXQvc3JjL2xpYi9VbmlmaWVkU2VhcmNoL0F1dG9zdWdnZXN0SW5wdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgSWNvbkJ1dHRvbiwgSW5wdXRBZG9ybm1lbnQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5pbXBvcnQgeyBBcnJvd0JhY2ssIFNlYXJjaCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9pY29uc1wiXG5pbXBvcnQgeyBSZXN1bHRzQXV0b3N1Z2dlc3RJbnB1dFN0eWxlZCwgYXV0b3N1Z2dlc3RJbnB1dENsYXNzZXMgfSBmcm9tIFwiLi9BdXRvQ29tcGxldGVDdXN0b21zXCJcbmltcG9ydCB7IEF1dG9zdWdnZXN0UG9wcGVyIH0gZnJvbSBcIi4vQXV0b3N1Z2dlc3RQb3BwZXJcIlxuaW1wb3J0IHsgVHlwZXNlbnNlU2VhcmNoSW5wdXRQcm9wcyB9IGZyb20gXCIuL1VuaWZpZWRTZWFyY2gudHlwZXNcIlxuaW1wb3J0IHsgdXNlQXV0b3N1Z2dlc3RJbnB1dCB9IGZyb20gXCIuL3VzZUF1dG9zdWdnZXN0SW5wdXRcIlxuXG5jb25zdCBBdXRvc3VnZ2VzdElucHV0ID0gKHtcbiAgb25DaGFuZ2UsXG4gIGZvcmNlU2hvd1JlY2VudFNlYXJjaGVzLFxuICBvblNlYXJjaENsaWNrLFxuICBzZWxlY3RlZEl0ZW1zLFxuICBleGNsdWRlUXVlcnlUeXBlcyxcbiAgdmFyaWFudCxcbiAgcGxhY2Vob2xkZXIsXG4gIGtlZXBPcGVuID0gZmFsc2UsXG4gIG9uQ2xvc2UsXG59OiBUeXBlc2Vuc2VTZWFyY2hJbnB1dFByb3BzKSA9PiB7XG4gIGNvbnN0IFtpbnB1dFJlZiwgc2V0SW5wdXRSZWZdID0gdXNlU3RhdGU8SFRNTERpdkVsZW1lbnQgfCBudWxsPihudWxsKVxuICBjb25zdCBbaW5wdXRGb2N1c1JlZiwgc2V0SW5wdXRGb2N1c1JlZl0gPSB1c2VTdGF0ZTxIVE1MSW5wdXRFbGVtZW50IHwgbnVsbD4obnVsbClcblxuICB1c2VFZmZlY3QoKCkgPT4gaW5wdXRGb2N1c1JlZj8uZm9jdXMoKSwgW2lucHV0Rm9jdXNSZWZdKVxuXG4gIGNvbnN0IHtcbiAgICBvcHRpb25zLFxuICAgIHZhbHVlLFxuICAgIHNob3dSZWNlbnRTZWFyY2hlcyxcbiAgICBzZWFyY2hWYWx1ZSxcbiAgICB0b2dnbGVTdWJzaWRpYXJpZXMsXG4gICAgaGFuZGxlQ2hhbmdlLFxuICAgIGhhbmRsZUlucHV0Q2hhbmdlLFxuICAgIGNsb3NlUG9wcGVyLFxuICAgIGhhbmRsZUlucHV0S2V5ZG93bixcbiAgICBzZWxlY3RlZE9wdGlvbixcbiAgICBvcGVuLFxuICAgIHNldE9wZW4sXG4gICAgc2V0U2VsZWN0ZWRPcHRpb24sXG4gIH0gPSB1c2VBdXRvc3VnZ2VzdElucHV0KHtcbiAgICBvbkNoYW5nZSxcbiAgICBmb3JjZVNob3dSZWNlbnRTZWFyY2hlcyxcbiAgICBvblNlYXJjaENsaWNrLFxuICAgIHNlbGVjdGVkSXRlbXMsXG4gICAgZXhjbHVkZVF1ZXJ5VHlwZXMsXG4gICAga2VlcE9wZW4sXG4gIH0pXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFJlc3VsdHNBdXRvc3VnZ2VzdElucHV0U3R5bGVkXG4gICAgICAgIGlucHV0UmVmPXtzZXRJbnB1dEZvY3VzUmVmfVxuICAgICAgICBpbnB1dFZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAgICAgIGlzUG9wcGVyT3Blbj17b3BlbiAmJiBvcHRpb25zLmxlbmd0aCA+IDB9XG4gICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICBjbGFzc2VzPXt7IHJvb3Q6IGF1dG9zdWdnZXN0SW5wdXRDbGFzc2VzLmlucHV0Um9vdCB9fVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgIHZhcmlhbnQ9e1wib3V0bGluZWRcIn1cbiAgICAgICAgSW5wdXRMYWJlbFByb3BzPXt7XG4gICAgICAgICAgc2hyaW5rOiB0cnVlLFxuICAgICAgICB9fVxuICAgICAgICBJbnB1dFByb3BzPXt7XG4gICAgICAgICAgY2xhc3NlczogeyByb290OiBhdXRvc3VnZ2VzdElucHV0Q2xhc3Nlcy5pbnB1dCwgaW5wdXQ6IFwiZGF0YS1oai1hbGxvd1wiIH0sXG4gICAgICAgICAgc3RhcnRBZG9ybm1lbnQ6IG9uQ2xvc2UgPyAoXG4gICAgICAgICAgICA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJzdGFydFwiPlxuICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBkYXRhLXRlc3RpZD1cImJhY2stYXJyb3ctYnV0dG9uXCIgb25DbGljaz17b25DbG9zZX0gc2l6ZT1cInNtYWxsXCI+XG4gICAgICAgICAgICAgICAgPEFycm93QmFjayAvPlxuICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8SW5wdXRBZG9ybm1lbnQgcG9zaXRpb249XCJzdGFydFwiPlxuICAgICAgICAgICAgICA8U2VhcmNoIC8+XG4gICAgICAgICAgICA8L0lucHV0QWRvcm5tZW50PlxuICAgICAgICAgICksXG4gICAgICAgIH19XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJ1bmlmaWVkLXNlYXJjaC1hdXRvY29tcGxldGVcIlxuICAgICAgICBhdXRvQ29tcGxldGU9XCJvZmZcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRPcGVuKHRydWUpfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17KCkgPT4ge1xuICAgICAgICAgIGNsb3NlUG9wcGVyKClcbiAgICAgICAgICBzZXRTZWxlY3RlZE9wdGlvbihudWxsKVxuICAgICAgICB9fVxuICAgICAgICByZWY9e3NldElucHV0UmVmfVxuICAgICAgICBvbktleURvd249e2hhbmRsZUlucHV0S2V5ZG93bn1cbiAgICAgIC8+XG5cbiAgICAgIDxBdXRvc3VnZ2VzdFBvcHBlclxuICAgICAgICBvcGVuPXtvcGVufVxuICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICBkcm9wZG93blRpdGxlPXtzaG93UmVjZW50U2VhcmNoZXMgPyBcIlJlY2VudCBTZWFyY2hlc1wiIDogdW5kZWZpbmVkfVxuICAgICAgICBzZWxlY3RlZE9wdGlvbj17c2VsZWN0ZWRPcHRpb259XG4gICAgICAgIGlucHV0UmVmPXtpbnB1dFJlZn1cbiAgICAgICAgc2VhcmNoVmFsdWU9e3NlYXJjaFZhbHVlfVxuICAgICAgICB0b2dnbGVTdWJzaWRpYXJpZXM9e3RvZ2dsZVN1YnNpZGlhcmllc31cbiAgICAgICAgaGFuZGxlQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAvPlxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCB7IEF1dG9zdWdnZXN0SW5wdXQgfVxuIl0sIm5hbWVzIjpbIkF1dG9zdWdnZXN0SW5wdXQiLCJvbkNoYW5nZSIsImZvcmNlU2hvd1JlY2VudFNlYXJjaGVzIiwib25TZWFyY2hDbGljayIsInNlbGVjdGVkSXRlbXMiLCJleGNsdWRlUXVlcnlUeXBlcyIsInZhcmlhbnQiLCJwbGFjZWhvbGRlciIsImtlZXBPcGVuIiwib25DbG9zZSIsImlucHV0UmVmIiwic2V0SW5wdXRSZWYiLCJ1c2VTdGF0ZSIsImlucHV0Rm9jdXNSZWYiLCJzZXRJbnB1dEZvY3VzUmVmIiwidXNlRWZmZWN0IiwiZm9jdXMiLCJvcHRpb25zIiwidmFsdWUiLCJzaG93UmVjZW50U2VhcmNoZXMiLCJzZWFyY2hWYWx1ZSIsInRvZ2dsZVN1YnNpZGlhcmllcyIsImhhbmRsZUNoYW5nZSIsImhhbmRsZUlucHV0Q2hhbmdlIiwiY2xvc2VQb3BwZXIiLCJoYW5kbGVJbnB1dEtleWRvd24iLCJzZWxlY3RlZE9wdGlvbiIsIm9wZW4iLCJzZXRPcGVuIiwic2V0U2VsZWN0ZWRPcHRpb24iLCJ1c2VBdXRvc3VnZ2VzdElucHV0IiwiUmVzdWx0c0F1dG9zdWdnZXN0SW5wdXRTdHlsZWQiLCJpbnB1dFZhcmlhbnQiLCJpc1BvcHBlck9wZW4iLCJsZW5ndGgiLCJhdXRvRm9jdXMiLCJjbGFzc2VzIiwicm9vdCIsImF1dG9zdWdnZXN0SW5wdXRDbGFzc2VzIiwiaW5wdXRSb290IiwiSW5wdXRMYWJlbFByb3BzIiwic2hyaW5rIiwiSW5wdXRQcm9wcyIsImlucHV0Iiwic3RhcnRBZG9ybm1lbnQiLCJJbnB1dEFkb3JubWVudCIsInBvc2l0aW9uIiwiSWNvbkJ1dHRvbiIsImRhdGEtdGVzdGlkIiwib25DbGljayIsInNpemUiLCJBcnJvd0JhY2siLCJTZWFyY2giLCJhdXRvQ29tcGxldGUiLCJvbkJsdXIiLCJyZWYiLCJvbktleURvd24iLCJBdXRvc3VnZ2VzdFBvcHBlciIsImRyb3Bkb3duVGl0bGUiLCJ1bmRlZmluZWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFxR1NBOzs7ZUFBQUE7Ozs7dUJBckcyQjtzQkFDTzt1QkFDVDtxQ0FDcUM7bUNBQ3JDO3FDQUVFO0FBRXBDLE1BQU1BLG1CQUFtQixDQUFDLEVBQ3hCQyxRQUFRLEVBQ1JDLHVCQUF1QixFQUN2QkMsYUFBYSxFQUNiQyxhQUFhLEVBQ2JDLGlCQUFpQixFQUNqQkMsT0FBTyxFQUNQQyxXQUFXLEVBQ1hDLFdBQVcsS0FBSyxFQUNoQkMsT0FBTyxFQUNtQjtJQUMxQixNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR0MsSUFBQUEsZUFBUSxFQUF3QjtJQUNoRSxNQUFNLENBQUNDLGVBQWVDLGlCQUFpQixHQUFHRixJQUFBQSxlQUFRLEVBQTBCO0lBRTVFRyxJQUFBQSxnQkFBUyxFQUFDLElBQU1GLDBCQUFBQSxvQ0FBQUEsY0FBZUcsS0FBSyxJQUFJO1FBQUNIO0tBQWM7SUFFdkQsTUFBTSxFQUNKSSxPQUFPLEVBQ1BDLEtBQUssRUFDTEMsa0JBQWtCLEVBQ2xCQyxXQUFXLEVBQ1hDLGtCQUFrQixFQUNsQkMsWUFBWSxFQUNaQyxpQkFBaUIsRUFDakJDLFdBQVcsRUFDWEMsa0JBQWtCLEVBQ2xCQyxjQUFjLEVBQ2RDLElBQUksRUFDSkMsT0FBTyxFQUNQQyxpQkFBaUIsRUFDbEIsR0FBR0MsSUFBQUEsd0NBQW1CLEVBQUM7UUFDdEI3QjtRQUNBQztRQUNBQztRQUNBQztRQUNBQztRQUNBRztJQUNGO0lBRUEscUJBQ0U7OzBCQUNFLHFCQUFDdUIsa0RBQTZCO2dCQUM1QnJCLFVBQVVJO2dCQUNWa0IsY0FBYzFCO2dCQUNkMkIsY0FBY04sUUFBUVYsUUFBUWlCLE1BQU0sR0FBRztnQkFDdkNDLFNBQVM7Z0JBQ1RDLFNBQVM7b0JBQUVDLE1BQU1DLDRDQUF1QixDQUFDQyxTQUFTO2dCQUFDO2dCQUNuRGhDLGFBQWFBO2dCQUNiRCxTQUFTO2dCQUNUa0MsaUJBQWlCO29CQUNmQyxRQUFRO2dCQUNWO2dCQUNBQyxZQUFZO29CQUNWTixTQUFTO3dCQUFFQyxNQUFNQyw0Q0FBdUIsQ0FBQ0ssS0FBSzt3QkFBRUEsT0FBTztvQkFBZ0I7b0JBQ3ZFQyxnQkFBZ0JuQyx3QkFDZCxxQkFBQ29DLG9CQUFjO3dCQUFDQyxVQUFTO2tDQUN2QixjQUFBLHFCQUFDQyxnQkFBVTs0QkFBQ0MsZUFBWTs0QkFBb0JDLFNBQVN4Qzs0QkFBU3lDLE1BQUs7c0NBQ2pFLGNBQUEscUJBQUNDLGdCQUFTOzt1Q0FJZCxxQkFBQ04sb0JBQWM7d0JBQUNDLFVBQVM7a0NBQ3ZCLGNBQUEscUJBQUNNLGFBQU07O2dCQUdiO2dCQUNBbEMsT0FBT0E7Z0JBQ1A4QixlQUFZO2dCQUNaSyxjQUFhO2dCQUNiSixTQUFTLElBQU1yQixRQUFRO2dCQUN2QjNCLFVBQVVzQjtnQkFDVitCLFFBQVE7b0JBQ045QjtvQkFDQUssa0JBQWtCO2dCQUNwQjtnQkFDQTBCLEtBQUs1QztnQkFDTDZDLFdBQVcvQjs7MEJBR2IscUJBQUNnQyxvQ0FBaUI7Z0JBQ2hCOUIsTUFBTUE7Z0JBQ05WLFNBQVNBO2dCQUNUeUMsZUFBZXZDLHFCQUFxQixvQkFBb0J3QztnQkFDeERqQyxnQkFBZ0JBO2dCQUNoQmhCLFVBQVVBO2dCQUNWVSxhQUFhQTtnQkFDYkMsb0JBQW9CQTtnQkFDcEJDLGNBQWNBOzs7O0FBSXRCIn0=