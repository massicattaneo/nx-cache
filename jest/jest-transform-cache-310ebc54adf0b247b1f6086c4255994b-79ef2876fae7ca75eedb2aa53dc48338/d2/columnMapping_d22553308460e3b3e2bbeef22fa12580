a06d0f18608bba4391c26f14f7d8202e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    apiColumnToUIColumn: function() {
        return apiColumnToUIColumn;
    },
    apiColumnsToUIColumns: function() {
        return apiColumnsToUIColumns;
    },
    uiColumnToApiColumn: function() {
        return uiColumnToApiColumn;
    },
    uiColumnsToApiColumns: function() {
        return uiColumnsToApiColumns;
    }
});
const _tables = require("../tables");
function apiColumnToUIColumn(apiColumn) {
    try {
        // Find which table/tab contains this endpoint+columnKey combination
        for (const [tableName, table] of Object.entries(_tables.watchlistDataTables)){
            if (tableName === "custom" || tableName === "smartGrid") continue;
            // Check if this table has a column with matching endpoint and primary columnKey
            const matchingColumn = table.columns.find((columnDef)=>{
                var _columnDef_meta, _columnDef_meta1, _columnKeys_;
                if (((_columnDef_meta = columnDef.meta) === null || _columnDef_meta === void 0 ? void 0 : _columnDef_meta.endpoint) !== apiColumn.endpoint) return false;
                const columnKeys = (_columnDef_meta1 = columnDef.meta) === null || _columnDef_meta1 === void 0 ? void 0 : _columnDef_meta1.columnKeys;
                if (!columnKeys) return false;
                // Match using the primary key (first key in the array)
                const primaryKey = (_columnKeys_ = columnKeys[0]) === null || _columnKeys_ === void 0 ? void 0 : _columnKeys_.toString();
                return primaryKey === apiColumn.columnKey;
            });
            if (matchingColumn) {
                var _matchingColumn_meta;
                return {
                    endpoint: apiColumn.endpoint,
                    columnKey: apiColumn.columnKey,
                    displayName: ((_matchingColumn_meta = matchingColumn.meta) === null || _matchingColumn_meta === void 0 ? void 0 : _matchingColumn_meta.menuLabel) || apiColumn.columnKey,
                    sourceTab: tableName
                };
            }
        }
        // Fallback if no matching column found
        return {
            endpoint: apiColumn.endpoint,
            columnKey: apiColumn.columnKey,
            displayName: apiColumn.columnKey,
            sourceTab: "pricing"
        };
    } catch (error) {
        // Return null if conversion fails
        return null;
    }
}
function uiColumnToApiColumn(uiColumn) {
    return {
        endpoint: uiColumn.endpoint,
        columnKey: uiColumn.columnKey
    };
}
function apiColumnsToUIColumns(apiColumns) {
    return apiColumns.map(apiColumnToUIColumn).filter((column)=>column !== null);
}
function uiColumnsToApiColumns(uiColumns) {
    return uiColumns.map(uiColumnToApiColumn);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy91dGlscy9jb2x1bW5NYXBwaW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaUN1c3RvbUNvbHVtbiB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3dhdGNobGlzdFwiXG5pbXBvcnQgeyBGaW5hbmNlRGF0YVRhYnMgfSBmcm9tIFwiLi4vLi4vaG9va3MvdXNlV2F0Y2hsaXN0c0ZpbmFuY2VEYXRhVGFiTmF2aWdhdGlvblwiXG5pbXBvcnQgeyBVSUN1c3RvbUNvbHVtbiB9IGZyb20gXCIuLi9DdXN0b21EYXRhVmlldy90eXBlc1wiXG5pbXBvcnQgeyB3YXRjaGxpc3REYXRhVGFibGVzIH0gZnJvbSBcIi4uL3RhYmxlc1wiXG5cbi8qKlxuICogQ29udmVydHMgQVBJIGNvbHVtbiBmb3JtYXQgdG8gVUkgY29sdW1uIGZvcm1hdCBieSBsb29raW5nIHVwIGRpc3BsYXkgaW5mb3JtYXRpb25cbiAqIGZyb20gdGhlIHRhYmxlIGRlZmluaXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcGlDb2x1bW5Ub1VJQ29sdW1uKGFwaUNvbHVtbjogQXBpQ3VzdG9tQ29sdW1uKTogVUlDdXN0b21Db2x1bW4gfCBudWxsIHtcbiAgdHJ5IHtcbiAgICAvLyBGaW5kIHdoaWNoIHRhYmxlL3RhYiBjb250YWlucyB0aGlzIGVuZHBvaW50K2NvbHVtbktleSBjb21iaW5hdGlvblxuICAgIGZvciAoY29uc3QgW3RhYmxlTmFtZSwgdGFibGVdIG9mIE9iamVjdC5lbnRyaWVzKHdhdGNobGlzdERhdGFUYWJsZXMpKSB7XG4gICAgICBpZiAodGFibGVOYW1lID09PSBcImN1c3RvbVwiIHx8IHRhYmxlTmFtZSA9PT0gXCJzbWFydEdyaWRcIikgY29udGludWVcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyB0YWJsZSBoYXMgYSBjb2x1bW4gd2l0aCBtYXRjaGluZyBlbmRwb2ludCBhbmQgcHJpbWFyeSBjb2x1bW5LZXlcbiAgICAgIGNvbnN0IG1hdGNoaW5nQ29sdW1uID0gdGFibGUuY29sdW1ucy5maW5kKGNvbHVtbkRlZiA9PiB7XG4gICAgICAgIGlmIChjb2x1bW5EZWYubWV0YT8uZW5kcG9pbnQgIT09IGFwaUNvbHVtbi5lbmRwb2ludCkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3QgY29sdW1uS2V5cyA9IGNvbHVtbkRlZi5tZXRhPy5jb2x1bW5LZXlzXG4gICAgICAgIGlmICghY29sdW1uS2V5cykgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgLy8gTWF0Y2ggdXNpbmcgdGhlIHByaW1hcnkga2V5IChmaXJzdCBrZXkgaW4gdGhlIGFycmF5KVxuICAgICAgICBjb25zdCBwcmltYXJ5S2V5ID0gY29sdW1uS2V5c1swXT8udG9TdHJpbmcoKVxuICAgICAgICByZXR1cm4gcHJpbWFyeUtleSA9PT0gYXBpQ29sdW1uLmNvbHVtbktleVxuICAgICAgfSlcblxuICAgICAgaWYgKG1hdGNoaW5nQ29sdW1uKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW5kcG9pbnQ6IGFwaUNvbHVtbi5lbmRwb2ludCxcbiAgICAgICAgICBjb2x1bW5LZXk6IGFwaUNvbHVtbi5jb2x1bW5LZXksXG4gICAgICAgICAgZGlzcGxheU5hbWU6IG1hdGNoaW5nQ29sdW1uLm1ldGE/Lm1lbnVMYWJlbCB8fCBhcGlDb2x1bW4uY29sdW1uS2V5LFxuICAgICAgICAgIHNvdXJjZVRhYjogdGFibGVOYW1lIGFzIEZpbmFuY2VEYXRhVGFicyxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGlmIG5vIG1hdGNoaW5nIGNvbHVtbiBmb3VuZFxuICAgIHJldHVybiB7XG4gICAgICBlbmRwb2ludDogYXBpQ29sdW1uLmVuZHBvaW50LFxuICAgICAgY29sdW1uS2V5OiBhcGlDb2x1bW4uY29sdW1uS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGFwaUNvbHVtbi5jb2x1bW5LZXksXG4gICAgICBzb3VyY2VUYWI6IFwicHJpY2luZ1wiIGFzIEZpbmFuY2VEYXRhVGFicywgLy8gRGVmYXVsdCBmYWxsYmFja1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBSZXR1cm4gbnVsbCBpZiBjb252ZXJzaW9uIGZhaWxzXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIFVJIGNvbHVtbiBmb3JtYXQgYmFjayB0byBBUEkgY29sdW1uIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdWlDb2x1bW5Ub0FwaUNvbHVtbih1aUNvbHVtbjogVUlDdXN0b21Db2x1bW4pOiBBcGlDdXN0b21Db2x1bW4ge1xuICByZXR1cm4ge1xuICAgIGVuZHBvaW50OiB1aUNvbHVtbi5lbmRwb2ludCxcbiAgICBjb2x1bW5LZXk6IHVpQ29sdW1uLmNvbHVtbktleSxcbiAgfSBhcyBBcGlDdXN0b21Db2x1bW5cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhcnJheSBvZiBBUEkgY29sdW1ucyB0byBVSSBjb2x1bW5zLCBmaWx0ZXJpbmcgb3V0IGFueSB0aGF0IGZhaWwgY29udmVyc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBpQ29sdW1uc1RvVUlDb2x1bW5zKGFwaUNvbHVtbnM6IEFycmF5PEFwaUN1c3RvbUNvbHVtbj4pOiBBcnJheTxVSUN1c3RvbUNvbHVtbj4ge1xuICByZXR1cm4gYXBpQ29sdW1uc1xuICAgIC5tYXAoYXBpQ29sdW1uVG9VSUNvbHVtbilcbiAgICAuZmlsdGVyKChjb2x1bW4pOiBjb2x1bW4gaXMgVUlDdXN0b21Db2x1bW4gPT4gY29sdW1uICE9PSBudWxsKVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IG9mIFVJIGNvbHVtbnMgdG8gQVBJIGNvbHVtbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVpQ29sdW1uc1RvQXBpQ29sdW1ucyh1aUNvbHVtbnM6IEFycmF5PFVJQ3VzdG9tQ29sdW1uPik6IEFycmF5PEFwaUN1c3RvbUNvbHVtbj4ge1xuICByZXR1cm4gdWlDb2x1bW5zLm1hcCh1aUNvbHVtblRvQXBpQ29sdW1uKVxufVxuIl0sIm5hbWVzIjpbImFwaUNvbHVtblRvVUlDb2x1bW4iLCJhcGlDb2x1bW5zVG9VSUNvbHVtbnMiLCJ1aUNvbHVtblRvQXBpQ29sdW1uIiwidWlDb2x1bW5zVG9BcGlDb2x1bW5zIiwiYXBpQ29sdW1uIiwidGFibGVOYW1lIiwidGFibGUiLCJPYmplY3QiLCJlbnRyaWVzIiwid2F0Y2hsaXN0RGF0YVRhYmxlcyIsIm1hdGNoaW5nQ29sdW1uIiwiY29sdW1ucyIsImZpbmQiLCJjb2x1bW5EZWYiLCJjb2x1bW5LZXlzIiwibWV0YSIsImVuZHBvaW50IiwicHJpbWFyeUtleSIsInRvU3RyaW5nIiwiY29sdW1uS2V5IiwiZGlzcGxheU5hbWUiLCJtZW51TGFiZWwiLCJzb3VyY2VUYWIiLCJlcnJvciIsInVpQ29sdW1uIiwiYXBpQ29sdW1ucyIsIm1hcCIsImZpbHRlciIsImNvbHVtbiIsInVpQ29sdW1ucyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQVNnQkEsbUJBQW1CO2VBQW5CQTs7SUFzREFDLHFCQUFxQjtlQUFyQkE7O0lBVkFDLG1CQUFtQjtlQUFuQkE7O0lBbUJBQyxxQkFBcUI7ZUFBckJBOzs7d0JBckVvQjtBQU03QixTQUFTSCxvQkFBb0JJLFNBQTBCO0lBQzVELElBQUk7UUFDRixvRUFBb0U7UUFDcEUsS0FBSyxNQUFNLENBQUNDLFdBQVdDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDQywyQkFBbUIsRUFBRztZQUNwRSxJQUFJSixjQUFjLFlBQVlBLGNBQWMsYUFBYTtZQUV6RCxnRkFBZ0Y7WUFDaEYsTUFBTUssaUJBQWlCSixNQUFNSyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsQ0FBQUE7b0JBQ3BDQSxpQkFFZUEsa0JBSUFDO2dCQU5uQixJQUFJRCxFQUFBQSxrQkFBQUEsVUFBVUUsSUFBSSxjQUFkRixzQ0FBQUEsZ0JBQWdCRyxRQUFRLE1BQUtaLFVBQVVZLFFBQVEsRUFBRSxPQUFPO2dCQUU1RCxNQUFNRixjQUFhRCxtQkFBQUEsVUFBVUUsSUFBSSxjQUFkRix1Q0FBQUEsaUJBQWdCQyxVQUFVO2dCQUM3QyxJQUFJLENBQUNBLFlBQVksT0FBTztnQkFFeEIsdURBQXVEO2dCQUN2RCxNQUFNRyxjQUFhSCxlQUFBQSxVQUFVLENBQUMsRUFBRSxjQUFiQSxtQ0FBQUEsYUFBZUksUUFBUTtnQkFDMUMsT0FBT0QsZUFBZWIsVUFBVWUsU0FBUztZQUMzQztZQUVBLElBQUlULGdCQUFnQjtvQkFJSEE7Z0JBSGYsT0FBTztvQkFDTE0sVUFBVVosVUFBVVksUUFBUTtvQkFDNUJHLFdBQVdmLFVBQVVlLFNBQVM7b0JBQzlCQyxhQUFhVixFQUFBQSx1QkFBQUEsZUFBZUssSUFBSSxjQUFuQkwsMkNBQUFBLHFCQUFxQlcsU0FBUyxLQUFJakIsVUFBVWUsU0FBUztvQkFDbEVHLFdBQVdqQjtnQkFDYjtZQUNGO1FBQ0Y7UUFFQSx1Q0FBdUM7UUFDdkMsT0FBTztZQUNMVyxVQUFVWixVQUFVWSxRQUFRO1lBQzVCRyxXQUFXZixVQUFVZSxTQUFTO1lBQzlCQyxhQUFhaEIsVUFBVWUsU0FBUztZQUNoQ0csV0FBVztRQUNiO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2Qsa0NBQWtDO1FBQ2xDLE9BQU87SUFDVDtBQUNGO0FBS08sU0FBU3JCLG9CQUFvQnNCLFFBQXdCO0lBQzFELE9BQU87UUFDTFIsVUFBVVEsU0FBU1IsUUFBUTtRQUMzQkcsV0FBV0ssU0FBU0wsU0FBUztJQUMvQjtBQUNGO0FBS08sU0FBU2xCLHNCQUFzQndCLFVBQWtDO0lBQ3RFLE9BQU9BLFdBQ0pDLEdBQUcsQ0FBQzFCLHFCQUNKMkIsTUFBTSxDQUFDLENBQUNDLFNBQXFDQSxXQUFXO0FBQzdEO0FBS08sU0FBU3pCLHNCQUFzQjBCLFNBQWdDO0lBQ3BFLE9BQU9BLFVBQVVILEdBQUcsQ0FBQ3hCO0FBQ3ZCIn0=