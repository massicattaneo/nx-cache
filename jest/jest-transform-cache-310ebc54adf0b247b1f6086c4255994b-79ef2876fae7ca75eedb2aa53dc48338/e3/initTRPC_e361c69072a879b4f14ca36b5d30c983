b2e458661fcd4df1fab596c8bad65581
'use strict';
var createProxy = require('./createProxy.js');
var formatter = require('./error/formatter.js');
var middleware = require('./middleware.js');
var procedureBuilder = require('./procedureBuilder.js');
var rootConfig = require('./rootConfig.js');
var router = require('./router.js');
var transformer = require('./transformer.js');
class TRPCBuilder {
    /**
   * Add a context shape as a generic to the root object
   * @link https://trpc.io/docs/v11/server/context
   */ context() {
        return new TRPCBuilder();
    }
    /**
   * Add a meta shape as a generic to the root object
   * @link https://trpc.io/docs/v11/quickstart
   */ meta() {
        return new TRPCBuilder();
    }
    /**
   * Create the root object
   * @link https://trpc.io/docs/v11/server/routers#initialize-trpc
   */ create(opts) {
        var // eslint-disable-next-line @typescript-eslint/dot-notation
        _globalThis_process;
        var _opts_transformer, _opts_isDev, _opts_allowOutsideOfServer, _opts_errorFormatter, _opts_isServer;
        const config = {
            transformer: transformer.getDataTransformer((_opts_transformer = opts === null || opts === void 0 ? void 0 : opts.transformer) !== null && _opts_transformer !== void 0 ? _opts_transformer : transformer.defaultTransformer),
            isDev: (_opts_isDev = opts === null || opts === void 0 ? void 0 : opts.isDev) !== null && _opts_isDev !== void 0 ? _opts_isDev : ((_globalThis_process = globalThis.process) === null || _globalThis_process === void 0 ? void 0 : _globalThis_process.env['NODE_ENV']) !== 'production',
            allowOutsideOfServer: (_opts_allowOutsideOfServer = opts === null || opts === void 0 ? void 0 : opts.allowOutsideOfServer) !== null && _opts_allowOutsideOfServer !== void 0 ? _opts_allowOutsideOfServer : false,
            errorFormatter: (_opts_errorFormatter = opts === null || opts === void 0 ? void 0 : opts.errorFormatter) !== null && _opts_errorFormatter !== void 0 ? _opts_errorFormatter : formatter.defaultFormatter,
            isServer: (_opts_isServer = opts === null || opts === void 0 ? void 0 : opts.isServer) !== null && _opts_isServer !== void 0 ? _opts_isServer : rootConfig.isServerDefault,
            /**
       * These are just types, they can't be used at runtime
       * @internal
       */ $types: createProxy.createFlatProxy((key)=>{
                throw new Error(`Tried to access "$types.${key}" which is not available at runtime`);
            })
        };
        {
            var _opts_isServer1;
            // Server check
            const isServer = (_opts_isServer1 = opts === null || opts === void 0 ? void 0 : opts.isServer) !== null && _opts_isServer1 !== void 0 ? _opts_isServer1 : rootConfig.isServerDefault;
            if (!isServer && (opts === null || opts === void 0 ? void 0 : opts.allowOutsideOfServer) !== true) {
                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);
            }
        }
        return {
            /**
       * Your router config
       * @internal
       */ _config: config,
            /**
       * Builder object for creating procedures
       * @link https://trpc.io/docs/v11/server/procedures
       */ procedure: procedureBuilder.createBuilder({
                meta: opts === null || opts === void 0 ? void 0 : opts.defaultMeta
            }),
            /**
       * Create reusable middlewares
       * @link https://trpc.io/docs/v11/server/middlewares
       */ middleware: middleware.createMiddlewareFactory(),
            /**
       * Create a router
       * @link https://trpc.io/docs/v11/server/routers
       */ router: router.createRouterFactory(config),
            /**
       * Merge Routers
       * @link https://trpc.io/docs/v11/server/merging-routers
       */ mergeRouters: router.mergeRouters,
            /**
       * Create a server-side caller for a router
       * @link https://trpc.io/docs/v11/server/server-side-calls
       */ createCallerFactory: router.createCallerFactory()
        };
    }
}
/**
 * Builder to initialize the tRPC root object - use this exactly once per backend
 * @link https://trpc.io/docs/v11/quickstart
 */ const initTRPC = new TRPCBuilder();
exports.initTRPC = initTRPC;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvaW5pdFRSUEMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlUHJveHkgPSByZXF1aXJlKCcuL2NyZWF0ZVByb3h5LmpzJyk7XG52YXIgZm9ybWF0dGVyID0gcmVxdWlyZSgnLi9lcnJvci9mb3JtYXR0ZXIuanMnKTtcbnZhciBtaWRkbGV3YXJlID0gcmVxdWlyZSgnLi9taWRkbGV3YXJlLmpzJyk7XG52YXIgcHJvY2VkdXJlQnVpbGRlciA9IHJlcXVpcmUoJy4vcHJvY2VkdXJlQnVpbGRlci5qcycpO1xudmFyIHJvb3RDb25maWcgPSByZXF1aXJlKCcuL3Jvb3RDb25maWcuanMnKTtcbnZhciByb3V0ZXIgPSByZXF1aXJlKCcuL3JvdXRlci5qcycpO1xudmFyIHRyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1lci5qcycpO1xuXG5jbGFzcyBUUlBDQnVpbGRlciB7XG4gICAgLyoqXG4gICAqIEFkZCBhIGNvbnRleHQgc2hhcGUgYXMgYSBnZW5lcmljIHRvIHRoZSByb290IG9iamVjdFxuICAgKiBAbGluayBodHRwczovL3RycGMuaW8vZG9jcy92MTEvc2VydmVyL2NvbnRleHRcbiAgICovIGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVFJQQ0J1aWxkZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEFkZCBhIG1ldGEgc2hhcGUgYXMgYSBnZW5lcmljIHRvIHRoZSByb290IG9iamVjdFxuICAgKiBAbGluayBodHRwczovL3RycGMuaW8vZG9jcy92MTEvcXVpY2tzdGFydFxuICAgKi8gbWV0YSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUUlBDQnVpbGRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICogQ3JlYXRlIHRoZSByb290IG9iamVjdFxuICAgKiBAbGluayBodHRwczovL3RycGMuaW8vZG9jcy92MTEvc2VydmVyL3JvdXRlcnMjaW5pdGlhbGl6ZS10cnBjXG4gICAqLyBjcmVhdGUob3B0cykge1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1lcjogdHJhbnNmb3JtZXIuZ2V0RGF0YVRyYW5zZm9ybWVyKG9wdHM/LnRyYW5zZm9ybWVyID8/IHRyYW5zZm9ybWVyLmRlZmF1bHRUcmFuc2Zvcm1lciksXG4gICAgICAgICAgICBpc0Rldjogb3B0cz8uaXNEZXYgPz8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9kb3Qtbm90YXRpb25cbiAgICAgICAgICAgIGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52WydOT0RFX0VOViddICE9PSAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICBhbGxvd091dHNpZGVPZlNlcnZlcjogb3B0cz8uYWxsb3dPdXRzaWRlT2ZTZXJ2ZXIgPz8gZmFsc2UsXG4gICAgICAgICAgICBlcnJvckZvcm1hdHRlcjogb3B0cz8uZXJyb3JGb3JtYXR0ZXIgPz8gZm9ybWF0dGVyLmRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBpc1NlcnZlcjogb3B0cz8uaXNTZXJ2ZXIgPz8gcm9vdENvbmZpZy5pc1NlcnZlckRlZmF1bHQsXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIFRoZXNlIGFyZSBqdXN0IHR5cGVzLCB0aGV5IGNhbid0IGJlIHVzZWQgYXQgcnVudGltZVxuICAgICAgICogQGludGVybmFsXG4gICAgICAgKi8gJHR5cGVzOiBjcmVhdGVQcm94eS5jcmVhdGVGbGF0UHJveHkoKGtleSk9PntcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIGFjY2VzcyBcIiR0eXBlcy4ke2tleX1cIiB3aGljaCBpcyBub3QgYXZhaWxhYmxlIGF0IHJ1bnRpbWVgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFNlcnZlciBjaGVja1xuICAgICAgICAgICAgY29uc3QgaXNTZXJ2ZXIgPSBvcHRzPy5pc1NlcnZlciA/PyByb290Q29uZmlnLmlzU2VydmVyRGVmYXVsdDtcbiAgICAgICAgICAgIGlmICghaXNTZXJ2ZXIgJiYgb3B0cz8uYWxsb3dPdXRzaWRlT2ZTZXJ2ZXIgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSdyZSB0cnlpbmcgdG8gdXNlIEB0cnBjL3NlcnZlciBpbiBhIG5vbi1zZXJ2ZXIgZW52aXJvbm1lbnQuIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBkZWZhdWx0LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAqIFlvdXIgcm91dGVyIGNvbmZpZ1xuICAgICAgICogQGludGVybmFsXG4gICAgICAgKi8gX2NvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBCdWlsZGVyIG9iamVjdCBmb3IgY3JlYXRpbmcgcHJvY2VkdXJlc1xuICAgICAgICogQGxpbmsgaHR0cHM6Ly90cnBjLmlvL2RvY3MvdjExL3NlcnZlci9wcm9jZWR1cmVzXG4gICAgICAgKi8gcHJvY2VkdXJlOiBwcm9jZWR1cmVCdWlsZGVyLmNyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIG1ldGE6IG9wdHM/LmRlZmF1bHRNZXRhXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlIHJldXNhYmxlIG1pZGRsZXdhcmVzXG4gICAgICAgKiBAbGluayBodHRwczovL3RycGMuaW8vZG9jcy92MTEvc2VydmVyL21pZGRsZXdhcmVzXG4gICAgICAgKi8gbWlkZGxld2FyZTogbWlkZGxld2FyZS5jcmVhdGVNaWRkbGV3YXJlRmFjdG9yeSgpLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGUgYSByb3V0ZXJcbiAgICAgICAqIEBsaW5rIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9zZXJ2ZXIvcm91dGVyc1xuICAgICAgICovIHJvdXRlcjogcm91dGVyLmNyZWF0ZVJvdXRlckZhY3RvcnkoY29uZmlnKSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICogTWVyZ2UgUm91dGVyc1xuICAgICAgICogQGxpbmsgaHR0cHM6Ly90cnBjLmlvL2RvY3MvdjExL3NlcnZlci9tZXJnaW5nLXJvdXRlcnNcbiAgICAgICAqLyBtZXJnZVJvdXRlcnM6IHJvdXRlci5tZXJnZVJvdXRlcnMsXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIHNlcnZlci1zaWRlIGNhbGxlciBmb3IgYSByb3V0ZXJcbiAgICAgICAqIEBsaW5rIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9zZXJ2ZXIvc2VydmVyLXNpZGUtY2FsbHNcbiAgICAgICAqLyBjcmVhdGVDYWxsZXJGYWN0b3J5OiByb3V0ZXIuY3JlYXRlQ2FsbGVyRmFjdG9yeSgpXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBCdWlsZGVyIHRvIGluaXRpYWxpemUgdGhlIHRSUEMgcm9vdCBvYmplY3QgLSB1c2UgdGhpcyBleGFjdGx5IG9uY2UgcGVyIGJhY2tlbmRcbiAqIEBsaW5rIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9xdWlja3N0YXJ0XG4gKi8gY29uc3QgaW5pdFRSUEMgPSBuZXcgVFJQQ0J1aWxkZXIoKTtcblxuZXhwb3J0cy5pbml0VFJQQyA9IGluaXRUUlBDO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVByb3h5IiwicmVxdWlyZSIsImZvcm1hdHRlciIsIm1pZGRsZXdhcmUiLCJwcm9jZWR1cmVCdWlsZGVyIiwicm9vdENvbmZpZyIsInJvdXRlciIsInRyYW5zZm9ybWVyIiwiVFJQQ0J1aWxkZXIiLCJjb250ZXh0IiwibWV0YSIsImNyZWF0ZSIsIm9wdHMiLCJnbG9iYWxUaGlzIiwiY29uZmlnIiwiZ2V0RGF0YVRyYW5zZm9ybWVyIiwiZGVmYXVsdFRyYW5zZm9ybWVyIiwiaXNEZXYiLCJwcm9jZXNzIiwiZW52IiwiYWxsb3dPdXRzaWRlT2ZTZXJ2ZXIiLCJlcnJvckZvcm1hdHRlciIsImRlZmF1bHRGb3JtYXR0ZXIiLCJpc1NlcnZlciIsImlzU2VydmVyRGVmYXVsdCIsIiR0eXBlcyIsImNyZWF0ZUZsYXRQcm94eSIsImtleSIsIkVycm9yIiwiX2NvbmZpZyIsInByb2NlZHVyZSIsImNyZWF0ZUJ1aWxkZXIiLCJkZWZhdWx0TWV0YSIsImNyZWF0ZU1pZGRsZXdhcmVGYWN0b3J5IiwiY3JlYXRlUm91dGVyRmFjdG9yeSIsIm1lcmdlUm91dGVycyIsImNyZWF0ZUNhbGxlckZhY3RvcnkiLCJpbml0VFJQQyIsImV4cG9ydHMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBY0MsUUFBUTtBQUMxQixJQUFJQyxZQUFZRCxRQUFRO0FBQ3hCLElBQUlFLGFBQWFGLFFBQVE7QUFDekIsSUFBSUcsbUJBQW1CSCxRQUFRO0FBQy9CLElBQUlJLGFBQWFKLFFBQVE7QUFDekIsSUFBSUssU0FBU0wsUUFBUTtBQUNyQixJQUFJTSxjQUFjTixRQUFRO0FBRTFCLE1BQU1PO0lBQ0Y7OztHQUdELEdBQUdDLFVBQVU7UUFDUixPQUFPLElBQUlEO0lBQ2Y7SUFDQTs7O0dBR0QsR0FBR0UsT0FBTztRQUNMLE9BQU8sSUFBSUY7SUFDZjtJQUNBOzs7R0FHRCxHQUFHRyxPQUFPQyxJQUFJLEVBQUU7WUFHZSwyREFBMkQ7UUFDakZDO1lBRjRDRCxtQkFDckNBLGFBRWVBLDRCQUNOQSxzQkFDTkE7UUFOZCxNQUFNRSxTQUFTO1lBQ1hQLGFBQWFBLFlBQVlRLGtCQUFrQixDQUFDSCxDQUFBQSxvQkFBQUEsaUJBQUFBLDJCQUFBQSxLQUFNTCxXQUFXLGNBQWpCSywrQkFBQUEsb0JBQXFCTCxZQUFZUyxrQkFBa0I7WUFDL0ZDLE9BQU9MLENBQUFBLGNBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTUssS0FBSyxjQUFYTCx5QkFBQUEsY0FDUEMsRUFBQUEsc0JBQUFBLFdBQVdLLE9BQU8sY0FBbEJMLDBDQUFBQSxvQkFBb0JNLEdBQUcsQ0FBQyxXQUFXLE1BQUs7WUFDeENDLHNCQUFzQlIsQ0FBQUEsNkJBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVEsb0JBQW9CLGNBQTFCUix3Q0FBQUEsNkJBQThCO1lBQ3BEUyxnQkFBZ0JULENBQUFBLHVCQUFBQSxpQkFBQUEsMkJBQUFBLEtBQU1TLGNBQWMsY0FBcEJULGtDQUFBQSx1QkFBd0JWLFVBQVVvQixnQkFBZ0I7WUFDbEVDLFVBQVVYLENBQUFBLGlCQUFBQSxpQkFBQUEsMkJBQUFBLEtBQU1XLFFBQVEsY0FBZFgsNEJBQUFBLGlCQUFrQlAsV0FBV21CLGVBQWU7WUFDdEQ7OztPQUdMLEdBQUdDLFFBQVF6QixZQUFZMEIsZUFBZSxDQUFDLENBQUNDO2dCQUMvQixNQUFNLElBQUlDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRUQsSUFBSSxtQ0FBbUMsQ0FBQztZQUN2RjtRQUNKO1FBQ0E7Z0JBRXFCZjtZQURqQixlQUFlO1lBQ2YsTUFBTVcsV0FBV1gsQ0FBQUEsa0JBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVcsUUFBUSxjQUFkWCw2QkFBQUEsa0JBQWtCUCxXQUFXbUIsZUFBZTtZQUM3RCxJQUFJLENBQUNELFlBQVlYLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVEsb0JBQW9CLE1BQUssTUFBTTtnQkFDbEQsTUFBTSxJQUFJUSxNQUFNLENBQUMsZ0dBQWdHLENBQUM7WUFDdEg7UUFDSjtRQUNBLE9BQU87WUFDSDs7O09BR0wsR0FBR0MsU0FBU2Y7WUFDUDs7O09BR0wsR0FBR2dCLFdBQVcxQixpQkFBaUIyQixhQUFhLENBQUM7Z0JBQ3BDckIsSUFBSSxFQUFFRSxpQkFBQUEsMkJBQUFBLEtBQU1vQixXQUFXO1lBQzNCO1lBQ0E7OztPQUdMLEdBQUc3QixZQUFZQSxXQUFXOEIsdUJBQXVCO1lBQzVDOzs7T0FHTCxHQUFHM0IsUUFBUUEsT0FBTzRCLG1CQUFtQixDQUFDcEI7WUFDakM7OztPQUdMLEdBQUdxQixjQUFjN0IsT0FBTzZCLFlBQVk7WUFDL0I7OztPQUdMLEdBQUdDLHFCQUFxQjlCLE9BQU84QixtQkFBbUI7UUFDakQ7SUFDSjtBQUNKO0FBQ0E7OztDQUdDLEdBQUcsTUFBTUMsV0FBVyxJQUFJN0I7QUFFekI4QixRQUFRRCxRQUFRLEdBQUdBIn0=