c8eb7b5803b710f0ff91a202627b3536
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SnapshotButton", {
    enumerable: true,
    get: function() {
        return SnapshotButton;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _basecomponents = require("@rp/react/web/common/base-components");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _Snackbar = require("../Snackbar");
const _FeedbackContext = require("./FeedbackContext");
const _useSnapshot = require("./useSnapshot");
const SnapshotButton = ({ snapshotData, isSaved, isLoading, notEnoughResults })=>{
    const { isFeedbackMode } = (0, _FeedbackContext.useFeedbackContext)();
    const [disableButton, setDisableButton] = (0, _react.useState)(false);
    const { mutateAsync: sendSnapshot } = (0, _useSnapshot.useSnapshot)();
    const { enqueueInfo } = (0, _Snackbar.useSnackbar)();
    // Open feedback drawer
    const handleSnapshot = ()=>{
        if (!isSaved) {
            enqueueInfo("To create a snapshot, save your search first.");
            return;
        }
        setDisableButton(true);
        sendSnapshot({
            snapshotData
        });
    };
    (0, _react.useEffect)(()=>{
        if (disableButton) {
            setTimeout(()=>setDisableButton(false), 1000 * 10);
        }
    }, [
        disableButton
    ]);
    if (!isFeedbackMode) return null;
    const disabled = disableButton || isLoading || notEnoughResults;
    const disabledText = "Taking a snapshot is currently not available";
    const notEnoughResultsText = "Not enough results for a snapshot";
    const snapshotText = "Take a snapshot";
    const tooltipText = ()=>{
        if (disableButton || isLoading) return disabledText;
        if (notEnoughResults) return notEnoughResultsText;
        return snapshotText;
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
        title: tooltipText(),
        placement: "bottom",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                role: "feedback-button",
                onClick: handleSnapshot,
                size: "large",
                disabled: disabled,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.CameraAlt, {})
            })
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL0ZlZWRiYWNrQ29udGV4dC9TbmFwc2hvdEJ1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBSUFRvb2x0aXAgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vYmFzZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IEljb25CdXR0b24gfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5pbXBvcnQgeyBDYW1lcmFBbHQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvaWNvbnNcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiLi4vU25hY2tiYXJcIlxuaW1wb3J0IHsgdXNlRmVlZGJhY2tDb250ZXh0IH0gZnJvbSBcIi4vRmVlZGJhY2tDb250ZXh0XCJcbmltcG9ydCB7IFNuYXBzaG90UHJvcHMsIHVzZVNuYXBzaG90IH0gZnJvbSBcIi4vdXNlU25hcHNob3RcIlxuXG5leHBvcnQgY29uc3QgU25hcHNob3RCdXR0b24gPSAoe1xuICBzbmFwc2hvdERhdGEsXG4gIGlzU2F2ZWQsXG4gIGlzTG9hZGluZyxcbiAgbm90RW5vdWdoUmVzdWx0cyxcbn06IFNuYXBzaG90UHJvcHMgJiB7IGlzU2F2ZWQ6IGJvb2xlYW47IGlzTG9hZGluZzogYm9vbGVhbjsgbm90RW5vdWdoUmVzdWx0czogYm9vbGVhbiB9KSA9PiB7XG4gIGNvbnN0IHsgaXNGZWVkYmFja01vZGUgfSA9IHVzZUZlZWRiYWNrQ29udGV4dCgpXG4gIGNvbnN0IFtkaXNhYmxlQnV0dG9uLCBzZXREaXNhYmxlQnV0dG9uXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCB7IG11dGF0ZUFzeW5jOiBzZW5kU25hcHNob3QgfSA9IHVzZVNuYXBzaG90KClcbiAgY29uc3QgeyBlbnF1ZXVlSW5mbyB9ID0gdXNlU25hY2tiYXIoKVxuXG4gIC8vIE9wZW4gZmVlZGJhY2sgZHJhd2VyXG4gIGNvbnN0IGhhbmRsZVNuYXBzaG90ID0gKCkgPT4ge1xuICAgIGlmICghaXNTYXZlZCkge1xuICAgICAgZW5xdWV1ZUluZm8oXCJUbyBjcmVhdGUgYSBzbmFwc2hvdCwgc2F2ZSB5b3VyIHNlYXJjaCBmaXJzdC5cIilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldERpc2FibGVCdXR0b24odHJ1ZSlcbiAgICBzZW5kU25hcHNob3QoeyBzbmFwc2hvdERhdGEgfSlcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVCdXR0b24pIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gc2V0RGlzYWJsZUJ1dHRvbihmYWxzZSksIDEwMDAgKiAxMClcbiAgICB9XG4gIH0sIFtkaXNhYmxlQnV0dG9uXSlcblxuICBpZiAoIWlzRmVlZGJhY2tNb2RlKSByZXR1cm4gbnVsbFxuXG4gIGNvbnN0IGRpc2FibGVkID0gZGlzYWJsZUJ1dHRvbiB8fCBpc0xvYWRpbmcgfHwgbm90RW5vdWdoUmVzdWx0c1xuXG4gIGNvbnN0IGRpc2FibGVkVGV4dCA9IFwiVGFraW5nIGEgc25hcHNob3QgaXMgY3VycmVudGx5IG5vdCBhdmFpbGFibGVcIlxuICBjb25zdCBub3RFbm91Z2hSZXN1bHRzVGV4dCA9IFwiTm90IGVub3VnaCByZXN1bHRzIGZvciBhIHNuYXBzaG90XCJcbiAgY29uc3Qgc25hcHNob3RUZXh0ID0gXCJUYWtlIGEgc25hcHNob3RcIlxuXG4gIGNvbnN0IHRvb2x0aXBUZXh0ID0gKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlQnV0dG9uIHx8IGlzTG9hZGluZykgcmV0dXJuIGRpc2FibGVkVGV4dFxuICAgIGlmIChub3RFbm91Z2hSZXN1bHRzKSByZXR1cm4gbm90RW5vdWdoUmVzdWx0c1RleHRcbiAgICByZXR1cm4gc25hcHNob3RUZXh0XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSUFRvb2x0aXAgdGl0bGU9e3Rvb2x0aXBUZXh0KCl9IHBsYWNlbWVudD1cImJvdHRvbVwiPlxuICAgICAgPGRpdj5cbiAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICByb2xlPVwiZmVlZGJhY2stYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTbmFwc2hvdH1cbiAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxDYW1lcmFBbHQgLz5cbiAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9SUFRvb2x0aXA+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJTbmFwc2hvdEJ1dHRvbiIsInNuYXBzaG90RGF0YSIsImlzU2F2ZWQiLCJpc0xvYWRpbmciLCJub3RFbm91Z2hSZXN1bHRzIiwiaXNGZWVkYmFja01vZGUiLCJ1c2VGZWVkYmFja0NvbnRleHQiLCJkaXNhYmxlQnV0dG9uIiwic2V0RGlzYWJsZUJ1dHRvbiIsInVzZVN0YXRlIiwibXV0YXRlQXN5bmMiLCJzZW5kU25hcHNob3QiLCJ1c2VTbmFwc2hvdCIsImVucXVldWVJbmZvIiwidXNlU25hY2tiYXIiLCJoYW5kbGVTbmFwc2hvdCIsInVzZUVmZmVjdCIsInNldFRpbWVvdXQiLCJkaXNhYmxlZCIsImRpc2FibGVkVGV4dCIsIm5vdEVub3VnaFJlc3VsdHNUZXh0Iiwic25hcHNob3RUZXh0IiwidG9vbHRpcFRleHQiLCJSUFRvb2x0aXAiLCJ0aXRsZSIsInBsYWNlbWVudCIsImRpdiIsIkljb25CdXR0b24iLCJyb2xlIiwib25DbGljayIsInNpemUiLCJDYW1lcmFBbHQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFRYUE7OztlQUFBQTs7Ozt1QkFSdUI7Z0NBQ1Y7c0JBQ0M7dUJBQ0Q7MEJBQ0U7aUNBQ087NkJBQ1E7QUFFcEMsTUFBTUEsaUJBQWlCLENBQUMsRUFDN0JDLFlBQVksRUFDWkMsT0FBTyxFQUNQQyxTQUFTLEVBQ1RDLGdCQUFnQixFQUNvRTtJQUNwRixNQUFNLEVBQUVDLGNBQWMsRUFBRSxHQUFHQyxJQUFBQSxtQ0FBa0I7SUFDN0MsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBQ25ELE1BQU0sRUFBRUMsYUFBYUMsWUFBWSxFQUFFLEdBQUdDLElBQUFBLHdCQUFXO0lBQ2pELE1BQU0sRUFBRUMsV0FBVyxFQUFFLEdBQUdDLElBQUFBLHFCQUFXO0lBRW5DLHVCQUF1QjtJQUN2QixNQUFNQyxpQkFBaUI7UUFDckIsSUFBSSxDQUFDYixTQUFTO1lBQ1pXLFlBQVk7WUFDWjtRQUNGO1FBRUFMLGlCQUFpQjtRQUNqQkcsYUFBYTtZQUFFVjtRQUFhO0lBQzlCO0lBRUFlLElBQUFBLGdCQUFTLEVBQUM7UUFDUixJQUFJVCxlQUFlO1lBQ2pCVSxXQUFXLElBQU1ULGlCQUFpQixRQUFRLE9BQU87UUFDbkQ7SUFDRixHQUFHO1FBQUNEO0tBQWM7SUFFbEIsSUFBSSxDQUFDRixnQkFBZ0IsT0FBTztJQUU1QixNQUFNYSxXQUFXWCxpQkFBaUJKLGFBQWFDO0lBRS9DLE1BQU1lLGVBQWU7SUFDckIsTUFBTUMsdUJBQXVCO0lBQzdCLE1BQU1DLGVBQWU7SUFFckIsTUFBTUMsY0FBYztRQUNsQixJQUFJZixpQkFBaUJKLFdBQVcsT0FBT2dCO1FBQ3ZDLElBQUlmLGtCQUFrQixPQUFPZ0I7UUFDN0IsT0FBT0M7SUFDVDtJQUVBLHFCQUNFLHFCQUFDRSx5QkFBUztRQUFDQyxPQUFPRjtRQUFlRyxXQUFVO2tCQUN6QyxjQUFBLHFCQUFDQztzQkFDQyxjQUFBLHFCQUFDQyxnQkFBVTtnQkFDVEMsTUFBSztnQkFDTEMsU0FBU2Q7Z0JBQ1RlLE1BQUs7Z0JBQ0xaLFVBQVVBOzBCQUVWLGNBQUEscUJBQUNhLGdCQUFTOzs7O0FBS3BCIn0=