b934c2b729cd37c3e6426a7c6bf89ae6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createHover", {
    enumerable: true,
    get: function() {
        return createHover;
    }
});
const _invariant = require("@react-dnd/invariant");
const _matchesType = require("../../utils/matchesType.js");
const _types = require("./types.js");
function createHover(manager) {
    return function hover(targetIdsArg, { clientOffset } = {}) {
        verifyTargetIdsIsArray(targetIdsArg);
        const targetIds = targetIdsArg.slice(0);
        const monitor = manager.getMonitor();
        const registry = manager.getRegistry();
        const draggedItemType = monitor.getItemType();
        removeNonMatchingTargetIds(targetIds, registry, draggedItemType);
        checkInvariants(targetIds, monitor, registry);
        hoverAllTargets(targetIds, monitor, registry);
        return {
            type: _types.HOVER,
            payload: {
                targetIds,
                clientOffset: clientOffset || null
            }
        };
    };
}
function verifyTargetIdsIsArray(targetIdsArg) {
    (0, _invariant.invariant)(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
}
function checkInvariants(targetIds, monitor, registry) {
    (0, _invariant.invariant)(monitor.isDragging(), 'Cannot call hover while not dragging.');
    (0, _invariant.invariant)(!monitor.didDrop(), 'Cannot call hover after drop.');
    for(let i = 0; i < targetIds.length; i++){
        const targetId = targetIds[i];
        (0, _invariant.invariant)(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
        const target = registry.getTarget(targetId);
        (0, _invariant.invariant)(target, 'Expected targetIds to be registered.');
    }
}
function removeNonMatchingTargetIds(targetIds, registry, draggedItemType) {
    // Remove those targetIds that don't match the targetType.  This
    // fixes shallow isOver which would only be non-shallow because of
    // non-matching targets.
    for(let i = targetIds.length - 1; i >= 0; i--){
        const targetId = targetIds[i];
        const targetType = registry.getTargetType(targetId);
        if (!(0, _matchesType.matchesType)(targetType, draggedItemType)) {
            targetIds.splice(i, 1);
        }
    }
}
function hoverAllTargets(targetIds, monitor, registry) {
    // Finally call hover on all matching targets.
    targetIds.forEach(function(targetId) {
        const target = registry.getTarget(targetId);
        target.hover(monitor, targetId);
    });
} //# sourceMappingURL=hover.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hY3Rpb25zL2RyYWdEcm9wL2hvdmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50J1xuXG5pbXBvcnQgdHlwZSB7XG5cdEFjdGlvbixcblx0RHJhZ0Ryb3BNYW5hZ2VyLFxuXHREcmFnRHJvcE1vbml0b3IsXG5cdEhhbmRsZXJSZWdpc3RyeSxcblx0SG92ZXJPcHRpb25zLFxuXHRIb3ZlclBheWxvYWQsXG5cdElkZW50aWZpZXIsXG59IGZyb20gJy4uLy4uL2ludGVyZmFjZXMuanMnXG5pbXBvcnQgeyBtYXRjaGVzVHlwZSB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoZXNUeXBlLmpzJ1xuaW1wb3J0IHsgSE9WRVIgfSBmcm9tICcuL3R5cGVzLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSG92ZXIobWFuYWdlcjogRHJhZ0Ryb3BNYW5hZ2VyKSB7XG5cdHJldHVybiBmdW5jdGlvbiBob3Zlcihcblx0XHR0YXJnZXRJZHNBcmc6IHN0cmluZ1tdLFxuXHRcdHsgY2xpZW50T2Zmc2V0IH06IEhvdmVyT3B0aW9ucyA9IHt9LFxuXHQpOiBBY3Rpb248SG92ZXJQYXlsb2FkPiB7XG5cdFx0dmVyaWZ5VGFyZ2V0SWRzSXNBcnJheSh0YXJnZXRJZHNBcmcpXG5cdFx0Y29uc3QgdGFyZ2V0SWRzID0gdGFyZ2V0SWRzQXJnLnNsaWNlKDApXG5cdFx0Y29uc3QgbW9uaXRvciA9IG1hbmFnZXIuZ2V0TW9uaXRvcigpXG5cdFx0Y29uc3QgcmVnaXN0cnkgPSBtYW5hZ2VyLmdldFJlZ2lzdHJ5KClcblx0XHRjb25zdCBkcmFnZ2VkSXRlbVR5cGUgPSBtb25pdG9yLmdldEl0ZW1UeXBlKClcblx0XHRyZW1vdmVOb25NYXRjaGluZ1RhcmdldElkcyh0YXJnZXRJZHMsIHJlZ2lzdHJ5LCBkcmFnZ2VkSXRlbVR5cGUpXG5cdFx0Y2hlY2tJbnZhcmlhbnRzKHRhcmdldElkcywgbW9uaXRvciwgcmVnaXN0cnkpXG5cdFx0aG92ZXJBbGxUYXJnZXRzKHRhcmdldElkcywgbW9uaXRvciwgcmVnaXN0cnkpXG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogSE9WRVIsXG5cdFx0XHRwYXlsb2FkOiB7XG5cdFx0XHRcdHRhcmdldElkcyxcblx0XHRcdFx0Y2xpZW50T2Zmc2V0OiBjbGllbnRPZmZzZXQgfHwgbnVsbCxcblx0XHRcdH0sXG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVRhcmdldElkc0lzQXJyYXkodGFyZ2V0SWRzQXJnOiBzdHJpbmdbXSkge1xuXHRpbnZhcmlhbnQoQXJyYXkuaXNBcnJheSh0YXJnZXRJZHNBcmcpLCAnRXhwZWN0ZWQgdGFyZ2V0SWRzIHRvIGJlIGFuIGFycmF5LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW52YXJpYW50cyhcblx0dGFyZ2V0SWRzOiBzdHJpbmdbXSxcblx0bW9uaXRvcjogRHJhZ0Ryb3BNb25pdG9yLFxuXHRyZWdpc3RyeTogSGFuZGxlclJlZ2lzdHJ5LFxuKSB7XG5cdGludmFyaWFudChtb25pdG9yLmlzRHJhZ2dpbmcoKSwgJ0Nhbm5vdCBjYWxsIGhvdmVyIHdoaWxlIG5vdCBkcmFnZ2luZy4nKVxuXHRpbnZhcmlhbnQoIW1vbml0b3IuZGlkRHJvcCgpLCAnQ2Fubm90IGNhbGwgaG92ZXIgYWZ0ZXIgZHJvcC4nKVxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldElkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IHRhcmdldElkID0gdGFyZ2V0SWRzW2ldIGFzIHN0cmluZ1xuXHRcdGludmFyaWFudChcblx0XHRcdHRhcmdldElkcy5sYXN0SW5kZXhPZih0YXJnZXRJZCkgPT09IGksXG5cdFx0XHQnRXhwZWN0ZWQgdGFyZ2V0SWRzIHRvIGJlIHVuaXF1ZSBpbiB0aGUgcGFzc2VkIGFycmF5LicsXG5cdFx0KVxuXG5cdFx0Y29uc3QgdGFyZ2V0ID0gcmVnaXN0cnkuZ2V0VGFyZ2V0KHRhcmdldElkKVxuXHRcdGludmFyaWFudCh0YXJnZXQsICdFeHBlY3RlZCB0YXJnZXRJZHMgdG8gYmUgcmVnaXN0ZXJlZC4nKVxuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vbk1hdGNoaW5nVGFyZ2V0SWRzKFxuXHR0YXJnZXRJZHM6IHN0cmluZ1tdLFxuXHRyZWdpc3RyeTogSGFuZGxlclJlZ2lzdHJ5LFxuXHRkcmFnZ2VkSXRlbVR5cGU6IElkZW50aWZpZXIgfCBudWxsLFxuKSB7XG5cdC8vIFJlbW92ZSB0aG9zZSB0YXJnZXRJZHMgdGhhdCBkb24ndCBtYXRjaCB0aGUgdGFyZ2V0VHlwZS4gIFRoaXNcblx0Ly8gZml4ZXMgc2hhbGxvdyBpc092ZXIgd2hpY2ggd291bGQgb25seSBiZSBub24tc2hhbGxvdyBiZWNhdXNlIG9mXG5cdC8vIG5vbi1tYXRjaGluZyB0YXJnZXRzLlxuXHRmb3IgKGxldCBpID0gdGFyZ2V0SWRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0Y29uc3QgdGFyZ2V0SWQgPSB0YXJnZXRJZHNbaV0gYXMgc3RyaW5nXG5cdFx0Y29uc3QgdGFyZ2V0VHlwZSA9IHJlZ2lzdHJ5LmdldFRhcmdldFR5cGUodGFyZ2V0SWQpXG5cdFx0aWYgKCFtYXRjaGVzVHlwZSh0YXJnZXRUeXBlLCBkcmFnZ2VkSXRlbVR5cGUpKSB7XG5cdFx0XHR0YXJnZXRJZHMuc3BsaWNlKGksIDEpXG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGhvdmVyQWxsVGFyZ2V0cyhcblx0dGFyZ2V0SWRzOiBzdHJpbmdbXSxcblx0bW9uaXRvcjogRHJhZ0Ryb3BNb25pdG9yLFxuXHRyZWdpc3RyeTogSGFuZGxlclJlZ2lzdHJ5LFxuKSB7XG5cdC8vIEZpbmFsbHkgY2FsbCBob3ZlciBvbiBhbGwgbWF0Y2hpbmcgdGFyZ2V0cy5cblx0dGFyZ2V0SWRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldElkKSB7XG5cdFx0Y29uc3QgdGFyZ2V0ID0gcmVnaXN0cnkuZ2V0VGFyZ2V0KHRhcmdldElkKVxuXHRcdHRhcmdldC5ob3Zlcihtb25pdG9yLCB0YXJnZXRJZClcblx0fSlcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGVIb3ZlciIsIm1hbmFnZXIiLCJob3ZlciIsInRhcmdldElkc0FyZyIsImNsaWVudE9mZnNldCIsInZlcmlmeVRhcmdldElkc0lzQXJyYXkiLCJ0YXJnZXRJZHMiLCJzbGljZSIsIm1vbml0b3IiLCJnZXRNb25pdG9yIiwicmVnaXN0cnkiLCJnZXRSZWdpc3RyeSIsImRyYWdnZWRJdGVtVHlwZSIsImdldEl0ZW1UeXBlIiwicmVtb3ZlTm9uTWF0Y2hpbmdUYXJnZXRJZHMiLCJjaGVja0ludmFyaWFudHMiLCJob3ZlckFsbFRhcmdldHMiLCJ0eXBlIiwiSE9WRVIiLCJwYXlsb2FkIiwiaW52YXJpYW50IiwiQXJyYXkiLCJpc0FycmF5IiwiaXNEcmFnZ2luZyIsImRpZERyb3AiLCJpIiwibGVuZ3RoIiwidGFyZ2V0SWQiLCJsYXN0SW5kZXhPZiIsInRhcmdldCIsImdldFRhcmdldCIsInRhcmdldFR5cGUiLCJnZXRUYXJnZXRUeXBlIiwibWF0Y2hlc1R5cGUiLCJzcGxpY2UiLCJmb3JFYWNoIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBY2dCQTs7O2VBQUFBOzs7MkJBZFU7NkJBV0U7dUJBQ047QUFFZixTQUFTQSxZQUFZQyxPQUF3QjtJQUNuRCxPQUFPLFNBQVNDLE1BQ2ZDLFlBQXNCLEVBQ3RCLEVBQUVDLFlBQVksRUFBZ0IsR0FBRyxDQUFBLENBQUU7UUFFbkNDLHVCQUF1QkY7UUFDdkIsTUFBTUcsWUFBWUgsYUFBYUksS0FBSyxDQUFDO1FBQ3JDLE1BQU1DLFVBQVVQLFFBQVFRLFVBQVU7UUFDbEMsTUFBTUMsV0FBV1QsUUFBUVUsV0FBVztRQUNwQyxNQUFNQyxrQkFBa0JKLFFBQVFLLFdBQVc7UUFDM0NDLDJCQUEyQlIsV0FBV0ksVUFBVUU7UUFDaERHLGdCQUFnQlQsV0FBV0UsU0FBU0U7UUFDcENNLGdCQUFnQlYsV0FBV0UsU0FBU0U7UUFFcEMsT0FBTztZQUNOTyxNQUFNQyxZQUFLO1lBQ1hDLFNBQVM7Z0JBQ1JiO2dCQUNBRixjQUFjQSxnQkFBZ0I7Ozs7O0FBTWxDLFNBQVNDLHVCQUF1QkYsWUFBc0I7SUFDckRpQixJQUFBQSxvQkFBUyxFQUFDQyxNQUFNQyxPQUFPLENBQUNuQixlQUFlOztBQUd4QyxTQUFTWSxnQkFDUlQsU0FBbUIsRUFDbkJFLE9BQXdCLEVBQ3hCRSxRQUF5QjtJQUV6QlUsSUFBQUEsb0JBQVMsRUFBQ1osUUFBUWUsVUFBVSxJQUFJO0lBQ2hDSCxJQUFBQSxvQkFBUyxFQUFDLENBQUNaLFFBQVFnQixPQUFPLElBQUk7SUFDOUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUluQixVQUFVb0IsTUFBTSxFQUFFRCxJQUFLO1FBQzFDLE1BQU1FLFdBQVdyQixTQUFTLENBQUNtQixFQUFFO1FBQzdCTCxJQUFBQSxvQkFBUyxFQUNSZCxVQUFVc0IsV0FBVyxDQUFDRCxjQUFjRixHQUNwQztRQUdELE1BQU1JLFNBQVNuQixTQUFTb0IsU0FBUyxDQUFDSDtRQUNsQ1AsSUFBQUEsb0JBQVMsRUFBQ1MsUUFBUTs7O0FBSXBCLFNBQVNmLDJCQUNSUixTQUFtQixFQUNuQkksUUFBeUIsRUFDekJFLGVBQWtDO0lBRWxDLGdFQUFnRTtJQUNoRSxrRUFBa0U7SUFDbEUsd0JBQXdCO0lBQ3hCLElBQUssSUFBSWEsSUFBSW5CLFVBQVVvQixNQUFNLEdBQUcsR0FBR0QsS0FBSyxHQUFHQSxJQUFLO1FBQy9DLE1BQU1FLFdBQVdyQixTQUFTLENBQUNtQixFQUFFO1FBQzdCLE1BQU1NLGFBQWFyQixTQUFTc0IsYUFBYSxDQUFDTDtRQUMxQyxJQUFJLENBQUNNLElBQUFBLHdCQUFXLEVBQUNGLFlBQVluQixrQkFBa0I7WUFDOUNOLFVBQVU0QixNQUFNLENBQUNULEdBQUc7Ozs7QUFLdkIsU0FBU1QsZ0JBQ1JWLFNBQW1CLEVBQ25CRSxPQUF3QixFQUN4QkUsUUFBeUI7SUFFekIsOENBQThDO0lBQzlDSixVQUFVNkIsT0FBTyxDQUFDLFNBQVVSLFFBQVE7UUFDbkMsTUFBTUUsU0FBU25CLFNBQVNvQixTQUFTLENBQUNIO1FBQ2xDRSxPQUFPM0IsS0FBSyxDQUFDTSxTQUFTbUIifQ==