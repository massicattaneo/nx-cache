190436eabad9eef7602e134a486b4fed
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "userDataWatchlistsProcedures", {
    enumerable: true,
    get: function() {
        return userDataWatchlistsProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _watchlists = require("@rp/common/zod-contracts/watchlists");
const _server = require("@trpc/server");
const _database = require("../../../../database");
const _bigdataapiprocedure = require("../../bigdata-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const UPLOAD_PATH = "/files-upload/:id";
const watchlistListInputSchema = _zod.z.object({
    owned: _zod.z.boolean().optional(),
    shared: _zod.z.enum([
        "company"
    ]).optional(),
    globalType: _zod.z.enum([
        "thematic",
        "community"
    ]).optional(),
    globalStatus: _zod.z.enum([
        "private",
        "draft",
        "published",
        "archived"
    ]).optional()
});
const userDataWatchlistsProcedures = {
    id: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/user-data/watchlists/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).query(async ({ ctx, input })=>{
        const watchlist = await ctx.db.collection("watchlists").findOne({
            id: input.id
        });
        if (!watchlist) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return watchlist;
    }),
    list: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/user-data/watchlists"
        }
    }).input(watchlistListInputSchema).output(_contracts.bigdataSchemas.st_user_watchlists_ListObjectsResponse_Input).query(async ({ input, ctx })=>{
        const user_id = input.owned ? _database.userOwner.ownerUserId : _database.userCollaborator.ownerUserId;
        const list = ctx.db.collection("watchlists");
        if (input.globalType) {
            return {
                results: await list.find((item)=>{
                    var _item_global;
                    return ((_item_global = item.global) === null || _item_global === void 0 ? void 0 : _item_global.type) === input.globalType;
                })
            };
        } else if (input.owned) {
            return {
                results: await list.find({
                    user_id
                })
            };
        } else {
            return {
                results: await list.find((item)=>{
                    if (item.shared.isPublic && item.isFavorite) return true;
                    if (item.shared.isPublic) return false;
                    return true;
                })
            };
        }
    }),
    create: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/watchlists"
        }
    }).input(_contracts.bigdataSchemas.st_user_watchlists_CreateWatchlistParams).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(({ ctx, input })=>{
        return ctx.db.collection("watchlists").insertOne((0, _database.generateWatchlist)(input));
    }),
    delete: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "DELETE",
            path: "/user-data/watchlists/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_zod.z.object({
        id: _zod.z.string()
    })).query(async ({ input, ctx })=>{
        await ctx.db.collection("watchlists").deleteOne({
            id: input.id
        });
        return {
            id: input.id
        };
    }),
    share: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/watchlists/:id/share"
        }
    }).input(_contracts.bigdataSchemas.st_user_watchlists_WatchlistShareRequest.extend({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(async ({ ctx, input })=>{
        var _input_company;
        const item = await ctx.db.collection("watchlists").findOne({
            id: input.id
        });
        if (!item) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        var _input_company_permission, _input_isPublic;
        ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            shared: _object_spread_props(_object_spread({}, item.shared), {
                company: {
                    organizationId: item.shared.company.organizationId,
                    permission: (_input_company_permission = (_input_company = input.company) === null || _input_company === void 0 ? void 0 : _input_company.permission) !== null && _input_company_permission !== void 0 ? _input_company_permission : "undefined"
                },
                isPublic: (_input_isPublic = input.isPublic) !== null && _input_isPublic !== void 0 ? _input_isPublic : false
            })
        });
        return item;
    }),
    patch: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PATCH",
            path: "/user-data/watchlists/:id"
        }
    }).input(_contracts.bigdataSchemas.st_user_watchlists_PatchWatchlistParams.extend({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(async ({ ctx, input })=>{
        const date = new Date().toISOString();
        var _input_name, _input_items, _input_description;
        const res = await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            name: (_input_name = input.name) !== null && _input_name !== void 0 ? _input_name : undefined,
            items: (_input_items = input.items) !== null && _input_items !== void 0 ? _input_items : undefined,
            description: (_input_description = input.description) !== null && _input_description !== void 0 ? _input_description : undefined,
            lastUpdated: date,
            lastInteracted: date
        });
        if (!res) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return res;
    }),
    put: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PUT",
            path: "/user-data/watchlists/:id"
        }
    }).input(_contracts.bigdataSchemas.st_user_watchlists_PutWatchlistParams.extend({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(async ({ ctx, input })=>{
        const date = new Date().toISOString();
        var _input_name, _input_description, _input_items;
        const res = await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            name: (_input_name = input.name) !== null && _input_name !== void 0 ? _input_name : undefined,
            description: (_input_description = input.description) !== null && _input_description !== void 0 ? _input_description : undefined,
            items: (_input_items = input.items) !== null && _input_items !== void 0 ? _input_items : undefined,
            lastUpdated: date,
            lastInteracted: date
        });
        if (!res) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return res;
    }),
    dependencies: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/watchlists/dependencies"
        }
    }).input(_zod.z.object({})).output(_zod.z.array(_zod.z.string())).mutation(async ()=>{
        return [];
    }),
    saveImage: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/watchlists/:id/generate-presigned-url"
        }
    }).input(_watchlists.watchlistSaveImageInputSchema).output(_contracts.bigdataSchemas.st_user_watchlists_GeneratePresignedUrlResponse).mutation(async ({ ctx, input })=>{
        const key = (0, _database.generateId)();
        const url = `${ctx.request.url.origin}${UPLOAD_PATH.replace(":id", key)}`;
        await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            imageUrl: url
        });
        return {
            url,
            key
        };
    }),
    deleteImage: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/watchlists/:id/assets"
        }
    }).input(_watchlists.watchlistSaveImageInputSchema).output(_zod.z.null()).mutation(async ({ ctx, input })=>{
        await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            imageUrl: undefined
        });
        return null;
    }),
    favorite: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PUT",
            path: "/user-data/watchlists/:id/favorite"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(async ({ input, ctx })=>{
        const res = await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            isFavorite: true
        });
        if (!res) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return res;
    }),
    unfavorite: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PUT",
            path: "/user-data/watchlists/:id/unfavorite"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_watchlists_WatchlistResponse_Input).mutation(async ({ input, ctx })=>{
        const res = await ctx.db.collection("watchlists").updateOne({
            id: input.id
        }, {
            isFavorite: false
        });
        if (!res) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return res;
    })
};

//# sourceMappingURL=data:application/json;base64,