{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/development/src/lib/trpc/bigdata-api/procedures/autosuggest-procedure.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { bigdataSchemas } from \"@rp/common/contracts\"\nimport { panelConfig } from \"../../../msw/mocks/config/panelConfig\"\nimport { bigdataApiProcedure } from \"../bigdata-api-procedure\"\n\nexport const autosuggestProcedures = {\n  get: bigdataApiProcedure\n    .meta({ openapi: { method: \"GET\", path: \"/autosuggest\" } })\n    .input(z.object({}))\n    .output(bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse)\n    .query(async ({ ctx }) => {\n      return {\n        results: await ctx.db.collection(\"autosuggest\").find(),\n      }\n    }),\n  search: bigdataApiProcedure\n    .meta({ openapi: { method: \"POST\", path: \"/autosuggest/search\" } })\n    .input(bigdataSchemas.st_autosuggest_vespa_AutosuggestRequest)\n    .output(bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse)\n    .query(async ({ ctx }) => {\n      const results = await ctx.db.collection(\"autosuggest\").find({ category: \"Sources\" })\n      return {\n        count: results.length,\n        page: 1,\n        results,\n      }\n    }),\n  watchlistBatchUpload: bigdataApiProcedure\n    .meta({ openapi: { method: \"POST\", path: \"/watchlist-autosuggest/batch-upload\" } })\n    .input(z.object({}))\n    .output(bigdataSchemas.st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input)\n    .query(async ({ ctx }) => {\n      const data = Buffer.from(ctx.request.rawBody ?? \"\", \"base64\").toString(\"utf-8\")\n      const lines = data.split(\"\\n\").slice(1)\n      const list: Array<{ name: string; ticker: string }> = lines.map((line: string) => {\n        const [name, ticker] = line.split(\",\")\n        return { ticker, name }\n      })\n      const entities = await Promise.all(\n        list.map(async ({ ticker }) => {\n          const data = await ctx.db.collection(\"autosuggest\").findOne({ ticker })\n          return { companyInfo: { name: data?.name, ticker }, data }\n        }),\n      )\n      return { entities, timeTaken: 100 }\n    }),\n\n  watchlist: bigdataApiProcedure\n    .meta({ openapi: { method: \"POST\", path: \"/watchlist-autosuggest\" } })\n    .input(bigdataSchemas.st_autosuggest_vespa_WatchlistAutosuggestRequest)\n    .output(bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse)\n    .query(async ({ ctx, input }) => {\n      const list = (await ctx.db.collection(\"autosuggest\").find({})).filter(item => {\n        return (\n          item.category !== \"Sources\" &&\n          (item.name.toLowerCase().includes(input.query?.toLowerCase() ?? \"\") ||\n            item.key.toLowerCase().includes(input.query?.toLowerCase() ?? \"\"))\n        )\n      })\n      const results = list\n        .filter(item =>\n          input.category?.length ? input.category.includes(item.category ?? \"\") : true,\n        )\n        .filter(item => (input.group1?.length ? input.group1.includes(item.group1 ?? \"\") : true))\n        .filter(item => (input.group2?.length ? input.group2.includes(item.group2 ?? \"\") : true))\n        .filter(item => (input.group3?.length ? input.group3.includes(item.group3 ?? \"\") : true))\n        .filter(item => (input.group4?.length ? input.group4.includes(item.group4 ?? \"\") : true))\n        .filter(item => (input.group5?.length ? input.group5.includes(item.group5 ?? \"\") : true))\n      const groups = results.reduce((acc, item) => {\n        const groups = [\n          \"group1\" as const,\n          \"group2\" as const,\n          \"group3\" as const,\n          \"group4\" as const,\n          \"group5\" as const,\n        ]\n        groups.forEach(group => {\n          if (item[group]) {\n            const array = acc[group] ?? []\n            if (!array.find(i => i.value === item[group])) {\n              array.push({ value: item[group] ?? \"\", count: 1 })\n            } else {\n              const index = array.findIndex(i => i.value === item[group])\n              array[index].count += 1\n            }\n            Object.assign(acc, { [group]: array })\n          }\n        })\n        return acc\n      }, {} as Record<string, Array<{ value: string; count: number }>>)\n      const category = panelConfig.discoveryPanelCategories.map(cat => {\n        return {\n          value: cat.label,\n          count: list.filter(item => item.category === cat.label).length,\n        }\n      }, {} as Record<string, number>)\n      return {\n        count: results.length,\n        page: 1,\n        results,\n        facets: {\n          category,\n          ...groups,\n        },\n      }\n    }),\n}\n"],"names":["autosuggestProcedures","get","bigdataApiProcedure","meta","openapi","method","path","input","z","object","output","bigdataSchemas","st_autosuggest_vespa_AutosuggestResponse","query","ctx","results","db","collection","find","search","st_autosuggest_vespa_AutosuggestRequest","category","count","length","page","watchlistBatchUpload","st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input","data","Buffer","from","request","rawBody","toString","lines","split","slice","list","map","line","name","ticker","entities","Promise","all","findOne","companyInfo","timeTaken","watchlist","st_autosuggest_vespa_WatchlistAutosuggestRequest","filter","item","toLowerCase","includes","key","group1","group2","group3","group4","group5","groups","reduce","acc","forEach","group","array","i","value","push","index","findIndex","Object","assign","panelConfig","discoveryPanelCategories","cat","label","facets"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAKaA;;;eAAAA;;;qBALK;2BACa;6BACH;qCACQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE7B,MAAMA,wBAAwB;IACnCC,KAAKC,wCAAmB,CACrBC,IAAI,CAAC;QAAEC,SAAS;YAAEC,QAAQ;YAAOC,MAAM;QAAe;IAAE,GACxDC,KAAK,CAACC,MAAC,CAACC,MAAM,CAAC,CAAC,IAChBC,MAAM,CAACC,yBAAc,CAACC,wCAAwC,EAC9DC,KAAK,CAAC,OAAO,EAAEC,GAAG,EAAE;QACnB,OAAO;YACLC,SAAS,MAAMD,IAAIE,EAAE,CAACC,UAAU,CAAC,eAAeC,IAAI;QACtD;IACF;IACFC,QAAQjB,wCAAmB,CACxBC,IAAI,CAAC;QAAEC,SAAS;YAAEC,QAAQ;YAAQC,MAAM;QAAsB;IAAE,GAChEC,KAAK,CAACI,yBAAc,CAACS,uCAAuC,EAC5DV,MAAM,CAACC,yBAAc,CAACC,wCAAwC,EAC9DC,KAAK,CAAC,OAAO,EAAEC,GAAG,EAAE;QACnB,MAAMC,UAAU,MAAMD,IAAIE,EAAE,CAACC,UAAU,CAAC,eAAeC,IAAI,CAAC;YAAEG,UAAU;QAAU;QAClF,OAAO;YACLC,OAAOP,QAAQQ,MAAM;YACrBC,MAAM;YACNT;QACF;IACF;IACFU,sBAAsBvB,wCAAmB,CACtCC,IAAI,CAAC;QAAEC,SAAS;YAAEC,QAAQ;YAAQC,MAAM;QAAsC;IAAE,GAChFC,KAAK,CAACC,MAAC,CAACC,MAAM,CAAC,CAAC,IAChBC,MAAM,CAACC,yBAAc,CAACe,yDAAyD,EAC/Eb,KAAK,CAAC,OAAO,EAAEC,GAAG,EAAE;YACMA;QAAzB,MAAMa,OAAOC,OAAOC,IAAI,CAACf,CAAAA,uBAAAA,IAAIgB,OAAO,CAACC,OAAO,cAAnBjB,kCAAAA,uBAAuB,IAAI,UAAUkB,QAAQ,CAAC;QACvE,MAAMC,QAAQN,KAAKO,KAAK,CAAC,MAAMC,KAAK,CAAC;QACrC,MAAMC,OAAgDH,MAAMI,GAAG,CAAC,CAACC;YAC/D,MAAM,CAACC,MAAMC,OAAO,GAAGF,KAAKJ,KAAK,CAAC;YAClC,OAAO;gBAAEM;gBAAQD;YAAK;QACxB;QACA,MAAME,WAAW,MAAMC,QAAQC,GAAG,CAChCP,KAAKC,GAAG,CAAC,OAAO,EAAEG,MAAM,EAAE;YACxB,MAAMb,OAAO,MAAMb,IAAIE,EAAE,CAACC,UAAU,CAAC,eAAe2B,OAAO,CAAC;gBAAEJ;YAAO;YACrE,OAAO;gBAAEK,aAAa;oBAAEN,IAAI,EAAEZ,iBAAAA,2BAAAA,KAAMY,IAAI;oBAAEC;gBAAO;gBAAGb;YAAK;QAC3D;QAEF,OAAO;YAAEc;YAAUK,WAAW;QAAI;IACpC;IAEFC,WAAW7C,wCAAmB,CAC3BC,IAAI,CAAC;QAAEC,SAAS;YAAEC,QAAQ;YAAQC,MAAM;QAAyB;IAAE,GACnEC,KAAK,CAACI,yBAAc,CAACqC,gDAAgD,EACrEtC,MAAM,CAACC,yBAAc,CAACC,wCAAwC,EAC9DC,KAAK,CAAC,OAAO,EAAEC,GAAG,EAAEP,KAAK,EAAE;QAC1B,MAAM6B,OAAO,AAAC,CAAA,MAAMtB,IAAIE,EAAE,CAACC,UAAU,CAAC,eAAeC,IAAI,CAAC,CAAC,EAAC,EAAG+B,MAAM,CAACC,CAAAA;gBAGhC3C,cACAA;gBADAA,0BACAA;YAHpC,OACE2C,KAAK7B,QAAQ,KAAK,aACjB6B,CAAAA,KAAKX,IAAI,CAACY,WAAW,GAAGC,QAAQ,CAAC7C,CAAAA,4BAAAA,eAAAA,MAAMM,KAAK,cAAXN,mCAAAA,aAAa4C,WAAW,gBAAxB5C,sCAAAA,2BAA8B,OAC9D2C,KAAKG,GAAG,CAACF,WAAW,GAAGC,QAAQ,CAAC7C,CAAAA,6BAAAA,gBAAAA,MAAMM,KAAK,cAAXN,oCAAAA,cAAa4C,WAAW,gBAAxB5C,uCAAAA,4BAA8B,GAAE;QAEtE;QACA,MAAMQ,UAAUqB,KACba,MAAM,CAACC,CAAAA;gBACN3C;gBAAiD2C;mBAAjD3C,EAAAA,kBAAAA,MAAMc,QAAQ,cAAdd,sCAAAA,gBAAgBgB,MAAM,IAAGhB,MAAMc,QAAQ,CAAC+B,QAAQ,CAACF,CAAAA,iBAAAA,KAAK7B,QAAQ,cAAb6B,4BAAAA,iBAAiB,MAAM;QAAG,GAE5ED,MAAM,CAACC,CAAAA;gBAAS3C;gBAA6C2C;mBAA7C3C,EAAAA,gBAAAA,MAAM+C,MAAM,cAAZ/C,oCAAAA,cAAcgB,MAAM,IAAGhB,MAAM+C,MAAM,CAACF,QAAQ,CAACF,CAAAA,eAAAA,KAAKI,MAAM,cAAXJ,0BAAAA,eAAe,MAAM;QAAG,GACrFD,MAAM,CAACC,CAAAA;gBAAS3C;gBAA6C2C;mBAA7C3C,EAAAA,gBAAAA,MAAMgD,MAAM,cAAZhD,oCAAAA,cAAcgB,MAAM,IAAGhB,MAAMgD,MAAM,CAACH,QAAQ,CAACF,CAAAA,eAAAA,KAAKK,MAAM,cAAXL,0BAAAA,eAAe,MAAM;QAAG,GACrFD,MAAM,CAACC,CAAAA;gBAAS3C;gBAA6C2C;mBAA7C3C,EAAAA,gBAAAA,MAAMiD,MAAM,cAAZjD,oCAAAA,cAAcgB,MAAM,IAAGhB,MAAMiD,MAAM,CAACJ,QAAQ,CAACF,CAAAA,eAAAA,KAAKM,MAAM,cAAXN,0BAAAA,eAAe,MAAM;QAAG,GACrFD,MAAM,CAACC,CAAAA;gBAAS3C;gBAA6C2C;mBAA7C3C,EAAAA,gBAAAA,MAAMkD,MAAM,cAAZlD,oCAAAA,cAAcgB,MAAM,IAAGhB,MAAMkD,MAAM,CAACL,QAAQ,CAACF,CAAAA,eAAAA,KAAKO,MAAM,cAAXP,0BAAAA,eAAe,MAAM;QAAG,GACrFD,MAAM,CAACC,CAAAA;gBAAS3C;gBAA6C2C;mBAA7C3C,EAAAA,gBAAAA,MAAMmD,MAAM,cAAZnD,oCAAAA,cAAcgB,MAAM,IAAGhB,MAAMmD,MAAM,CAACN,QAAQ,CAACF,CAAAA,eAAAA,KAAKQ,MAAM,cAAXR,0BAAAA,eAAe,MAAM;QAAG;QACxF,MAAMS,SAAS5C,QAAQ6C,MAAM,CAAC,CAACC,KAAKX;YAClC,MAAMS,SAAS;gBACb;gBACA;gBACA;gBACA;gBACA;aACD;YACDA,OAAOG,OAAO,CAACC,CAAAA;gBACb,IAAIb,IAAI,CAACa,MAAM,EAAE;wBACDF;oBAAd,MAAMG,QAAQH,CAAAA,aAAAA,GAAG,CAACE,MAAM,cAAVF,wBAAAA,aAAc,EAAE;oBAC9B,IAAI,CAACG,MAAM9C,IAAI,CAAC+C,CAAAA,IAAKA,EAAEC,KAAK,KAAKhB,IAAI,CAACa,MAAM,GAAG;4BACzBb;wBAApBc,MAAMG,IAAI,CAAC;4BAAED,OAAOhB,CAAAA,cAAAA,IAAI,CAACa,MAAM,cAAXb,yBAAAA,cAAe;4BAAI5B,OAAO;wBAAE;oBAClD,OAAO;wBACL,MAAM8C,QAAQJ,MAAMK,SAAS,CAACJ,CAAAA,IAAKA,EAAEC,KAAK,KAAKhB,IAAI,CAACa,MAAM;wBAC1DC,KAAK,CAACI,MAAM,CAAC9C,KAAK,IAAI;oBACxB;oBACAgD,OAAOC,MAAM,CAACV,KAAK;wBAAE,CAACE,MAAM,EAAEC;oBAAM;gBACtC;YACF;YACA,OAAOH;QACT,GAAG,CAAC;QACJ,MAAMxC,WAAWmD,wBAAW,CAACC,wBAAwB,CAACpC,GAAG,CAACqC,CAAAA;YACxD,OAAO;gBACLR,OAAOQ,IAAIC,KAAK;gBAChBrD,OAAOc,KAAKa,MAAM,CAACC,CAAAA,OAAQA,KAAK7B,QAAQ,KAAKqD,IAAIC,KAAK,EAAEpD,MAAM;YAChE;QACF,GAAG,CAAC;QACJ,OAAO;YACLD,OAAOP,QAAQQ,MAAM;YACrBC,MAAM;YACNT;YACA6D,QAAQ;gBACNvD;eACGsC;QAEP;IACF;AACJ"}