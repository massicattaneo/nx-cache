{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/block-quote.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n"],"names":["blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","state","containerState","open","enter","_container","consume","after","markdownSpace","contStart","factorySpace","contBefore","parser","constructs","disable","null","includes","undefined","attempt"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;CAMC;;;;+BAKYA;;;eAAAA;;;uCAHc;wCACC;AAErB,MAAMA,aAAa;IACxBC,MAAM;IACNC,UAAUC;IACVC,cAAc;QACZF,UAAUG;IACZ;IACAC;AACF;AAEA;;;CAGC,GACD,SAASH,wBAAwBI,OAAO,EAAEC,EAAE,EAAEC,GAAG;IAC/C,MAAMC,OAAO,IAAI;IACjB,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,MAAMC,IAAI;QACjB,IAAIA,SAAS,IAAI;YACf,MAAMC,QAAQH,KAAKI,cAAc;YACjC,IAAI,CAACD,MAAME,IAAI,EAAE;gBACfR,QAAQS,KAAK,CAAC,cAAc;oBAC1BC,YAAY;gBACd;gBACAJ,MAAME,IAAI,GAAG;YACf;YACAR,QAAQS,KAAK,CAAC;YACdT,QAAQS,KAAK,CAAC;YACdT,QAAQW,OAAO,CAACN;YAChBL,QAAQD,IAAI,CAAC;YACb,OAAOa;QACT;QACA,OAAOV,IAAIG;IACb;IAEA;;;;;;;;;GASC,GACD,SAASO,MAAMP,IAAI;QACjB,IAAIQ,IAAAA,qCAAa,EAACR,OAAO;YACvBL,QAAQS,KAAK,CAAC;YACdT,QAAQW,OAAO,CAACN;YAChBL,QAAQD,IAAI,CAAC;YACbC,QAAQD,IAAI,CAAC;YACb,OAAOE;QACT;QACAD,QAAQD,IAAI,CAAC;QACb,OAAOE,GAAGI;IACZ;AACF;AAEA;;;;;;;;;;;CAWC,GACD,SAASP,+BAA+BE,OAAO,EAAEC,EAAE,EAAEC,GAAG;IACtD,MAAMC,OAAO,IAAI;IACjB,OAAOW;IAEP;;;;;;;;;;;;GAYC,GACD,SAASA,UAAUT,IAAI;QACrB,IAAIQ,IAAAA,qCAAa,EAACR,OAAO;YACvB,gCAAgC;YAEhC,OAAOU,IAAAA,mCAAY,EACjBf,SACAgB,YACA,cACAb,KAAKc,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,kBACzCC,YACA,GACJjB;QACJ;QACA,OAAOW,WAAWX;IACpB;IAEA;;;;;;;;;;;;GAYC,GACD,SAASW,WAAWX,IAAI;QACtB,OAAOL,QAAQuB,OAAO,CAAC9B,YAAYQ,IAAIC,KAAKG;IAC9C;AACF;AAEA,mBAAmB,GACnB,SAASN,KAAKC,OAAO;IACnBA,QAAQD,IAAI,CAAC;AACf"}