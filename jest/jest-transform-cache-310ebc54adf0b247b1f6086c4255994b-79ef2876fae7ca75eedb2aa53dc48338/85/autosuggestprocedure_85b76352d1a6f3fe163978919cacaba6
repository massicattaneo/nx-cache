219a9b8cd2b4626d1bde1b1e16b43992
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "autosuggestProcedures", {
    enumerable: true,
    get: function() {
        return autosuggestProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _panelConfig = require("../../../msw/mocks/config/panelConfig");
const _bigdataapiprocedure = require("../bigdata-api-procedure");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const autosuggestProcedures = {
    get: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/autosuggest"
        }
    }).input(_zod.z.object({})).output(_contracts.bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse).query(async ({ ctx })=>{
        return {
            results: await ctx.db.collection("autosuggest").find()
        };
    }),
    search: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/autosuggest/search"
        }
    }).input(_contracts.bigdataSchemas.st_autosuggest_vespa_AutosuggestRequest).output(_contracts.bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse).query(async ({ ctx })=>{
        const results = await ctx.db.collection("autosuggest").find({
            category: "Sources"
        });
        return {
            count: results.length,
            page: 1,
            results
        };
    }),
    watchlistBatchUpload: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/watchlist-autosuggest/batch-upload"
        }
    }).input(_zod.z.object({})).output(_contracts.bigdataSchemas.st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input).query(async ({ ctx })=>{
        var _ctx_request_rawBody;
        const data = Buffer.from((_ctx_request_rawBody = ctx.request.rawBody) !== null && _ctx_request_rawBody !== void 0 ? _ctx_request_rawBody : "", "base64").toString("utf-8");
        const lines = data.split("\n").slice(1);
        const list = lines.map((line)=>{
            const [name, ticker] = line.split(",");
            return {
                ticker,
                name
            };
        });
        const entities = await Promise.all(list.map(async ({ ticker })=>{
            const data = await ctx.db.collection("autosuggest").findOne({
                ticker
            });
            return {
                companyInfo: {
                    name: data === null || data === void 0 ? void 0 : data.name,
                    ticker
                },
                data
            };
        }));
        return {
            entities,
            timeTaken: 100
        };
    }),
    watchlist: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/watchlist-autosuggest"
        }
    }).input(_contracts.bigdataSchemas.st_autosuggest_vespa_WatchlistAutosuggestRequest).output(_contracts.bigdataSchemas.st_autosuggest_vespa_AutosuggestResponse).query(async ({ ctx, input })=>{
        const list = (await ctx.db.collection("autosuggest").find({})).filter((item)=>{
            var _input_query, _input_query1;
            var _input_query_toLowerCase, _input_query_toLowerCase1;
            return item.category !== "Sources" && (item.name.toLowerCase().includes((_input_query_toLowerCase = (_input_query = input.query) === null || _input_query === void 0 ? void 0 : _input_query.toLowerCase()) !== null && _input_query_toLowerCase !== void 0 ? _input_query_toLowerCase : "") || item.key.toLowerCase().includes((_input_query_toLowerCase1 = (_input_query1 = input.query) === null || _input_query1 === void 0 ? void 0 : _input_query1.toLowerCase()) !== null && _input_query_toLowerCase1 !== void 0 ? _input_query_toLowerCase1 : ""));
        });
        const results = list.filter((item)=>{
            var _input_category;
            var _item_category;
            return ((_input_category = input.category) === null || _input_category === void 0 ? void 0 : _input_category.length) ? input.category.includes((_item_category = item.category) !== null && _item_category !== void 0 ? _item_category : "") : true;
        }).filter((item)=>{
            var _input_group1;
            var _item_group1;
            return ((_input_group1 = input.group1) === null || _input_group1 === void 0 ? void 0 : _input_group1.length) ? input.group1.includes((_item_group1 = item.group1) !== null && _item_group1 !== void 0 ? _item_group1 : "") : true;
        }).filter((item)=>{
            var _input_group2;
            var _item_group2;
            return ((_input_group2 = input.group2) === null || _input_group2 === void 0 ? void 0 : _input_group2.length) ? input.group2.includes((_item_group2 = item.group2) !== null && _item_group2 !== void 0 ? _item_group2 : "") : true;
        }).filter((item)=>{
            var _input_group3;
            var _item_group3;
            return ((_input_group3 = input.group3) === null || _input_group3 === void 0 ? void 0 : _input_group3.length) ? input.group3.includes((_item_group3 = item.group3) !== null && _item_group3 !== void 0 ? _item_group3 : "") : true;
        }).filter((item)=>{
            var _input_group4;
            var _item_group4;
            return ((_input_group4 = input.group4) === null || _input_group4 === void 0 ? void 0 : _input_group4.length) ? input.group4.includes((_item_group4 = item.group4) !== null && _item_group4 !== void 0 ? _item_group4 : "") : true;
        }).filter((item)=>{
            var _input_group5;
            var _item_group5;
            return ((_input_group5 = input.group5) === null || _input_group5 === void 0 ? void 0 : _input_group5.length) ? input.group5.includes((_item_group5 = item.group5) !== null && _item_group5 !== void 0 ? _item_group5 : "") : true;
        });
        const groups = results.reduce((acc, item)=>{
            const groups = [
                "group1",
                "group2",
                "group3",
                "group4",
                "group5"
            ];
            groups.forEach((group)=>{
                if (item[group]) {
                    var _acc_group;
                    const array = (_acc_group = acc[group]) !== null && _acc_group !== void 0 ? _acc_group : [];
                    if (!array.find((i)=>i.value === item[group])) {
                        var _item_group;
                        array.push({
                            value: (_item_group = item[group]) !== null && _item_group !== void 0 ? _item_group : "",
                            count: 1
                        });
                    } else {
                        const index = array.findIndex((i)=>i.value === item[group]);
                        array[index].count += 1;
                    }
                    Object.assign(acc, {
                        [group]: array
                    });
                }
            });
            return acc;
        }, {});
        const category = _panelConfig.panelConfig.discoveryPanelCategories.map((cat)=>{
            return {
                value: cat.label,
                count: list.filter((item)=>item.category === cat.label).length
            };
        }, {});
        return {
            count: results.length,
            page: 1,
            results,
            facets: _object_spread({
                category
            }, groups)
        };
    })
};

//# sourceMappingURL=data:application/json;base64,