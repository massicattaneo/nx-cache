{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/SearchResultsPage/SearchResultsPage.tsx"],"sourcesContent":["import { useCallback, useEffect } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\nimport { useUser } from \"@clerk/clerk-react\"\nimport { CqsSavedQuery } from \"@rp/common/api-types\"\nimport { QueryUpdate, useSavedQuery } from \"@rp/react/tanstack-api/user-data-queries\"\nimport { useUpdateSavedQueryField } from \"@rp/react/tanstack-api/user-data-queries\"\nimport { LoadingSpinner } from \"@rp/react/web/common/base-components\"\nimport { useCopySearchSnackbar } from \"@rp/react/web/common/providers\"\nimport { FeedbackProvider } from \"@rp/react/web/common/providers\"\nimport { useSnackbar } from \"@rp/react/web/common/providers\"\nimport { QueryProvider, useQueryContext } from \"@rp/react/web/common/providers\"\nimport { useResultsPageState } from \"@rp/react/web/common/providers\"\nimport { SEARCH_ROUTE } from \"@rp/react/web/router\"\nimport { useFeatureAtom } from \"../../atoms/feature-flags\"\nimport { Results } from \"../Results\"\n\nconst SearchResultsFeedback = () => {\n  const {\n    searchQuery: { ranking: queryRanking },\n    savedQuery,\n  } = useQueryContext()\n  const [isFeedbackMode, setIsFeedbackMode] = useFeatureAtom(\"enableFeedbackMode\")\n  const { enqueueError } = useSnackbar()\n  const { mutateAsync: onUpdate } = useUpdateSavedQueryField({ enqueueError })\n  return (\n    <FeedbackProvider\n      queryRanking={queryRanking}\n      savedQuery={savedQuery}\n      isFeedbackMode={isFeedbackMode}\n      setIsFeedbackMode={setIsFeedbackMode}\n      onUpdate={onUpdate}\n    >\n      <Results />\n    </FeedbackProvider>\n  )\n}\n\nexport { SearchResultsFeedback }\n\nexport const SearchResultsPage = () => {\n  const params = useParams()\n  const navigate = useNavigate()\n  const { enqueueError } = useSnackbar()\n  // Use the ID from the URL to fetch the search and populate current search state\n  const { isError, data: { id = undefined } = {} } = useSavedQuery(params.id ?? \"\")\n\n  // Push the user back to home page if there's an error\n  // TODO: Show a snackbar\n  if (isError) {\n    navigate(SEARCH_ROUTE)\n    enqueueError(\"Query does not exist\")\n  }\n\n  const { user } = useUser()\n  const { showSnackbar, isCopying } = useCopySearchSnackbar()\n  const [_, setResultsPageState] = useResultsPageState()\n\n  const checkPermission = useCallback(\n    (query?: CqsSavedQuery, updates?: QueryUpdate) => {\n      const allowed =\n        user?.id === query?.ownerUserId || query?.shared.company.permission === \"write\"\n      if (query && updates && !allowed) {\n        const newQuery = { ...query, ...updates.fields, name: `Copy of ${query.name}` }\n        showSnackbar(newQuery)\n      }\n      return allowed\n    },\n\n    [showSnackbar, user?.id],\n  )\n\n  useEffect(() => {\n    setResultsPageState(\"loading\")\n  }, [setResultsPageState])\n\n  return id && !isCopying ? (\n    <QueryProvider\n      key={params.id}\n      id={params.id ?? \"\"}\n      patchCheck={checkPermission}\n      setResultsState={setResultsPageState}\n    >\n      <SearchResultsFeedback />\n    </QueryProvider>\n  ) : (\n    <LoadingSpinner />\n  )\n}\n"],"names":["SearchResultsFeedback","SearchResultsPage","searchQuery","ranking","queryRanking","savedQuery","useQueryContext","isFeedbackMode","setIsFeedbackMode","useFeatureAtom","enqueueError","useSnackbar","mutateAsync","onUpdate","useUpdateSavedQueryField","FeedbackProvider","Results","params","useParams","navigate","useNavigate","isError","data","id","undefined","useSavedQuery","SEARCH_ROUTE","user","useUser","showSnackbar","isCopying","useCopySearchSnackbar","_","setResultsPageState","useResultsPageState","checkPermission","useCallback","query","updates","allowed","ownerUserId","shared","company","permission","newQuery","fields","name","useEffect","QueryProvider","patchCheck","setResultsState","LoadingSpinner"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAqCSA,qBAAqB;eAArBA;;IAEIC,iBAAiB;eAAjBA;;;;uBAvC0B;gCACA;4BACf;iCAEmB;gCAEZ;2BACO;wBAKT;8BACE;yBACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,MAAMD,wBAAwB;IAC5B,MAAM,EACJE,aAAa,EAAEC,SAASC,YAAY,EAAE,EACtCC,UAAU,EACX,GAAGC,IAAAA,0BAAe;IACnB,MAAM,CAACC,gBAAgBC,kBAAkB,GAAGC,IAAAA,4BAAc,EAAC;IAC3D,MAAM,EAAEC,YAAY,EAAE,GAAGC,IAAAA,sBAAW;IACpC,MAAM,EAAEC,aAAaC,QAAQ,EAAE,GAAGC,IAAAA,yCAAwB,EAAC;QAAEJ;IAAa;IAC1E,qBACE,qBAACK,2BAAgB;QACfX,cAAcA;QACdC,YAAYA;QACZE,gBAAgBA;QAChBC,mBAAmBA;QACnBK,UAAUA;kBAEV,cAAA,qBAACG,gBAAO;;AAGd;AAIO,MAAMf,oBAAoB;IAC/B,MAAMgB,SAASC,IAAAA,yBAAS;IACxB,MAAMC,WAAWC,IAAAA,2BAAW;IAC5B,MAAM,EAAEV,YAAY,EAAE,GAAGC,IAAAA,sBAAW;QAE6BM;IADjE,gFAAgF;IAChF,MAAM,EAAEI,OAAO,EAAEC,MAAM,EAAEC,KAAKC,SAAS,EAAE,GAAG,CAAC,CAAC,EAAE,GAAGC,IAAAA,8BAAa,EAACR,CAAAA,aAAAA,OAAOM,EAAE,cAATN,wBAAAA,aAAa;IAE9E,sDAAsD;IACtD,wBAAwB;IACxB,IAAII,SAAS;QACXF,SAASO,oBAAY;QACrBhB,aAAa;IACf;IAEA,MAAM,EAAEiB,IAAI,EAAE,GAAGC,IAAAA,mBAAO;IACxB,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAE,GAAGC,IAAAA,gCAAqB;IACzD,MAAM,CAACC,GAAGC,oBAAoB,GAAGC,IAAAA,8BAAmB;IAEpD,MAAMC,kBAAkBC,IAAAA,kBAAW,EACjC,CAACC,OAAuBC;QACtB,MAAMC,UACJZ,CAAAA,iBAAAA,2BAAAA,KAAMJ,EAAE,OAAKc,kBAAAA,4BAAAA,MAAOG,WAAW,KAAIH,CAAAA,kBAAAA,4BAAAA,MAAOI,MAAM,CAACC,OAAO,CAACC,UAAU,MAAK;QAC1E,IAAIN,SAASC,WAAW,CAACC,SAAS;YAChC,MAAMK,WAAW,wCAAKP,OAAUC,QAAQO,MAAM;gBAAEC,MAAM,CAAC,QAAQ,EAAET,MAAMS,IAAI,CAAC,CAAC;;YAC7EjB,aAAae;QACf;QACA,OAAOL;IACT,GAEA;QAACV;QAAcF,iBAAAA,2BAAAA,KAAMJ,EAAE;KAAC;IAG1BwB,IAAAA,gBAAS,EAAC;QACRd,oBAAoB;IACtB,GAAG;QAACA;KAAoB;QAKhBhB;IAHR,OAAOM,MAAM,CAACO,0BACZ,qBAACkB,wBAAa;QAEZzB,IAAIN,CAAAA,cAAAA,OAAOM,EAAE,cAATN,yBAAAA,cAAa;QACjBgC,YAAYd;QACZe,iBAAiBjB;kBAEjB,cAAA,qBAACjC;OALIiB,OAAOM,EAAE,kBAQhB,qBAAC4B,8BAAc;AAEnB"}