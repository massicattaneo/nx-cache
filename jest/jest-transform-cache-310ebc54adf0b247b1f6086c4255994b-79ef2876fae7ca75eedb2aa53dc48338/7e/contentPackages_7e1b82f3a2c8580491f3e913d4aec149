fabc36a80e2985ac036e2ab279392e7f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockContentPackagesAll: function() {
        return mockContentPackagesAll;
    },
    mockContentPackagesResponse: function() {
        return mockContentPackagesResponse;
    }
});
const NUMBER_OF_MOCK_CONTENT_PACKAGES = 20;
const mockContentPackagesAll = [
    {
        id: "all",
        name: "ALL",
        detailedDescription: "All the content available in Bigdata.",
        shortDescription: "All the content available in Bigdata.",
        appEnabled: true,
        apiEnabled: true,
        catalogEnabled: null,
        logo: null,
        userId: 4702,
        createdAt: "2025-07-10T11:22:48.743452",
        updatedAt: null,
        entitled: true,
        sourceCount: 2000
    },
    {
        id: "public",
        name: "PUBLIC",
        detailedDescription: "All the freemium content collected from MoreOver and Opoint.",
        shortDescription: "All the freemium content collected from MoreOver and Opoint.",
        appEnabled: true,
        apiEnabled: true,
        catalogEnabled: null,
        logo: null,
        userId: 4702,
        createdAt: "2025-07-10T11:22:48.743452",
        updatedAt: null,
        entitled: true,
        sourceCount: 1000
    },
    ...new Array(NUMBER_OF_MOCK_CONTENT_PACKAGES - 2).fill(null).map((_, idx)=>({
            id: `content-package-${idx}`,
            name: `Content Package ${idx}`,
            detailedDescription: `This is the mock description of the content package of index ${idx}`,
            shortDescription: `This is the mock description of the content package of index ${idx}`,
            appEnabled: idx % 2 !== 0,
            apiEnabled: idx % 5 !== 0,
            catalogEnabled: null,
            logo: null,
            userId: 4702,
            createdAt: "2025-07-10T11:22:48.743452",
            updatedAt: null,
            entitled: idx % 3 !== 0,
            sourceCount: (idx + 1) * 100 % 42 + 1
        }))
];
const mockContentPackagesResponse = {
    meta: {
        page: 1,
        limit: 10,
        total: 22,
        queryTime: 0.6880474030003825
    },
    results: mockContentPackagesAll
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2NvbnRlbnQvc3JjL19fbW9ja3NfXy9jb250ZW50UGFja2FnZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudFBhY2thZ2UsIENvbnRlbnRQYWNrYWdlc1Jlc3BvbnNlIH0gZnJvbSBcIi4uL2NvbnRlbnQudHlwZXNcIlxuXG5jb25zdCBOVU1CRVJfT0ZfTU9DS19DT05URU5UX1BBQ0tBR0VTID0gMjBcbmNvbnN0IG1vY2tDb250ZW50UGFja2FnZXNBbGw6IEFycmF5PENvbnRlbnRQYWNrYWdlPiA9IFtcbiAge1xuICAgIGlkOiBcImFsbFwiLFxuICAgIG5hbWU6IFwiQUxMXCIsXG4gICAgZGV0YWlsZWREZXNjcmlwdGlvbjogXCJBbGwgdGhlIGNvbnRlbnQgYXZhaWxhYmxlIGluIEJpZ2RhdGEuXCIsXG4gICAgc2hvcnREZXNjcmlwdGlvbjogXCJBbGwgdGhlIGNvbnRlbnQgYXZhaWxhYmxlIGluIEJpZ2RhdGEuXCIsXG4gICAgYXBwRW5hYmxlZDogdHJ1ZSxcbiAgICBhcGlFbmFibGVkOiB0cnVlLFxuICAgIGNhdGFsb2dFbmFibGVkOiBudWxsLFxuICAgIGxvZ286IG51bGwsXG4gICAgdXNlcklkOiA0NzAyLFxuICAgIGNyZWF0ZWRBdDogXCIyMDI1LTA3LTEwVDExOjIyOjQ4Ljc0MzQ1MlwiLFxuICAgIHVwZGF0ZWRBdDogbnVsbCxcbiAgICBlbnRpdGxlZDogdHJ1ZSxcbiAgICBzb3VyY2VDb3VudDogMjAwMCxcbiAgfSxcbiAge1xuICAgIGlkOiBcInB1YmxpY1wiLFxuICAgIG5hbWU6IFwiUFVCTElDXCIsXG4gICAgZGV0YWlsZWREZXNjcmlwdGlvbjogXCJBbGwgdGhlIGZyZWVtaXVtIGNvbnRlbnQgY29sbGVjdGVkIGZyb20gTW9yZU92ZXIgYW5kIE9wb2ludC5cIixcbiAgICBzaG9ydERlc2NyaXB0aW9uOiBcIkFsbCB0aGUgZnJlZW1pdW0gY29udGVudCBjb2xsZWN0ZWQgZnJvbSBNb3JlT3ZlciBhbmQgT3BvaW50LlwiLFxuICAgIGFwcEVuYWJsZWQ6IHRydWUsXG4gICAgYXBpRW5hYmxlZDogdHJ1ZSxcbiAgICBjYXRhbG9nRW5hYmxlZDogbnVsbCxcbiAgICBsb2dvOiBudWxsLFxuICAgIHVzZXJJZDogNDcwMixcbiAgICBjcmVhdGVkQXQ6IFwiMjAyNS0wNy0xMFQxMToyMjo0OC43NDM0NTJcIixcbiAgICB1cGRhdGVkQXQ6IG51bGwsXG4gICAgZW50aXRsZWQ6IHRydWUsXG4gICAgc291cmNlQ291bnQ6IDEwMDAsXG4gIH0sXG4gIC4uLm5ldyBBcnJheShOVU1CRVJfT0ZfTU9DS19DT05URU5UX1BBQ0tBR0VTIC0gMikuZmlsbChudWxsKS5tYXAoKF8sIGlkeCkgPT4gKHtcbiAgICBpZDogYGNvbnRlbnQtcGFja2FnZS0ke2lkeH1gLFxuICAgIG5hbWU6IGBDb250ZW50IFBhY2thZ2UgJHtpZHh9YCxcbiAgICBkZXRhaWxlZERlc2NyaXB0aW9uOiBgVGhpcyBpcyB0aGUgbW9jayBkZXNjcmlwdGlvbiBvZiB0aGUgY29udGVudCBwYWNrYWdlIG9mIGluZGV4ICR7aWR4fWAsXG4gICAgc2hvcnREZXNjcmlwdGlvbjogYFRoaXMgaXMgdGhlIG1vY2sgZGVzY3JpcHRpb24gb2YgdGhlIGNvbnRlbnQgcGFja2FnZSBvZiBpbmRleCAke2lkeH1gLFxuICAgIGFwcEVuYWJsZWQ6IGlkeCAlIDIgIT09IDAsXG4gICAgYXBpRW5hYmxlZDogaWR4ICUgNSAhPT0gMCxcbiAgICBjYXRhbG9nRW5hYmxlZDogbnVsbCxcbiAgICBsb2dvOiBudWxsLFxuICAgIHVzZXJJZDogNDcwMixcbiAgICBjcmVhdGVkQXQ6IFwiMjAyNS0wNy0xMFQxMToyMjo0OC43NDM0NTJcIixcbiAgICB1cGRhdGVkQXQ6IG51bGwsXG4gICAgZW50aXRsZWQ6IGlkeCAlIDMgIT09IDAsXG4gICAgc291cmNlQ291bnQ6ICgoKGlkeCArIDEpICogMTAwKSAlIDQyKSArIDEsXG4gIH0pKSxcbl1cblxuY29uc3QgbW9ja0NvbnRlbnRQYWNrYWdlc1Jlc3BvbnNlOiBDb250ZW50UGFja2FnZXNSZXNwb25zZSA9IHtcbiAgbWV0YToge1xuICAgIHBhZ2U6IDEsXG4gICAgbGltaXQ6IDEwLFxuICAgIHRvdGFsOiAyMixcbiAgICBxdWVyeVRpbWU6IDAuNjg4MDQ3NDAzMDAwMzgyNSxcbiAgfSxcbiAgcmVzdWx0czogbW9ja0NvbnRlbnRQYWNrYWdlc0FsbCxcbn1cblxuZXhwb3J0IHsgbW9ja0NvbnRlbnRQYWNrYWdlc1Jlc3BvbnNlLCBtb2NrQ29udGVudFBhY2thZ2VzQWxsIH1cbiJdLCJuYW1lcyI6WyJtb2NrQ29udGVudFBhY2thZ2VzQWxsIiwibW9ja0NvbnRlbnRQYWNrYWdlc1Jlc3BvbnNlIiwiTlVNQkVSX09GX01PQ0tfQ09OVEVOVF9QQUNLQUdFUyIsImlkIiwibmFtZSIsImRldGFpbGVkRGVzY3JpcHRpb24iLCJzaG9ydERlc2NyaXB0aW9uIiwiYXBwRW5hYmxlZCIsImFwaUVuYWJsZWQiLCJjYXRhbG9nRW5hYmxlZCIsImxvZ28iLCJ1c2VySWQiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJlbnRpdGxlZCIsInNvdXJjZUNvdW50IiwiQXJyYXkiLCJmaWxsIiwibWFwIiwiXyIsImlkeCIsIm1ldGEiLCJwYWdlIiwibGltaXQiLCJ0b3RhbCIsInF1ZXJ5VGltZSIsInJlc3VsdHMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBNkRzQ0Esc0JBQXNCO2VBQXRCQTs7SUFBN0JDLDJCQUEyQjtlQUEzQkE7OztBQTNEVCxNQUFNQyxrQ0FBa0M7QUFDeEMsTUFBTUYseUJBQWdEO0lBQ3BEO1FBQ0VHLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxxQkFBcUI7UUFDckJDLGtCQUFrQjtRQUNsQkMsWUFBWTtRQUNaQyxZQUFZO1FBQ1pDLGdCQUFnQjtRQUNoQkMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLFdBQVc7UUFDWEMsV0FBVztRQUNYQyxVQUFVO1FBQ1ZDLGFBQWE7SUFDZjtJQUNBO1FBQ0VaLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxxQkFBcUI7UUFDckJDLGtCQUFrQjtRQUNsQkMsWUFBWTtRQUNaQyxZQUFZO1FBQ1pDLGdCQUFnQjtRQUNoQkMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLFdBQVc7UUFDWEMsV0FBVztRQUNYQyxVQUFVO1FBQ1ZDLGFBQWE7SUFDZjtPQUNHLElBQUlDLE1BQU1kLGtDQUFrQyxHQUFHZSxJQUFJLENBQUMsTUFBTUMsR0FBRyxDQUFDLENBQUNDLEdBQUdDLE1BQVMsQ0FBQTtZQUM1RWpCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRWlCLElBQUksQ0FBQztZQUM1QmhCLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRWdCLElBQUksQ0FBQztZQUM5QmYscUJBQXFCLENBQUMsNkRBQTZELEVBQUVlLElBQUksQ0FBQztZQUMxRmQsa0JBQWtCLENBQUMsNkRBQTZELEVBQUVjLElBQUksQ0FBQztZQUN2RmIsWUFBWWEsTUFBTSxNQUFNO1lBQ3hCWixZQUFZWSxNQUFNLE1BQU07WUFDeEJYLGdCQUFnQjtZQUNoQkMsTUFBTTtZQUNOQyxRQUFRO1lBQ1JDLFdBQVc7WUFDWEMsV0FBVztZQUNYQyxVQUFVTSxNQUFNLE1BQU07WUFDdEJMLGFBQWEsQUFBR0ssQ0FBQUEsTUFBTSxDQUFBLElBQUssTUFBTyxLQUFNO1FBQzFDLENBQUE7Q0FDRDtBQUVELE1BQU1uQiw4QkFBdUQ7SUFDM0RvQixNQUFNO1FBQ0pDLE1BQU07UUFDTkMsT0FBTztRQUNQQyxPQUFPO1FBQ1BDLFdBQVc7SUFDYjtJQUNBQyxTQUFTMUI7QUFDWCJ9