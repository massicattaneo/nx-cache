041b934f385f67b47c5f5fd266583b12
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useListSorter", {
    enumerable: true,
    get: function() {
        return useListSorter;
    }
});
const _react = require("react");
function useListSorter({ direction, sortBy, onChange: handleChange }) {
    const [sortByValue, setSortByValue] = (0, _react.useState)(sortBy);
    const [directionValue, setDirection] = (0, _react.useState)(direction);
    const sorterFn = (0, _react.useCallback)((a, b)=>{
        const valueA = a[sortByValue ? sortByValue : Object.keys(a)[0]];
        const valueB = b[sortByValue ? sortByValue : Object.keys(b)[0]];
        if (typeof valueA === "string" && typeof valueB === "string") {
            const sortValue = valueA.localeCompare(valueB);
            return directionValue === "asc" ? sortValue : -sortValue;
        }
        if (typeof valueA === "number" && typeof valueB === "number") {
            return directionValue === "asc" ? valueA - valueB : valueB - valueA;
        }
        return 0;
    }, [
        directionValue,
        sortByValue
    ]);
    const onChange = (0, _react.useCallback)(({ sortBy, direction })=>{
        setSortByValue(sortBy);
        setDirection(direction);
        handleChange === null || handleChange === void 0 ? void 0 : handleChange(sortBy, direction);
    }, [
        handleChange
    ]);
    return {
        sortBy: sortByValue,
        direction: directionValue,
        onChange,
        sorterFn
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlTGlzdFNvcnRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgTGlzdFNvcnRlckRpcmVjdGlvbiwgT25MaXN0U29ydGVyRGlyZWN0aW9uQ2hhbmdlIH0gZnJvbSBcIkBycC9jb21tb24vdXRpbHNcIlxuXG50eXBlIFByb3BzPFQ+ID0ge1xuICBzb3J0Qnk6IGtleW9mIFRcbiAgZGlyZWN0aW9uOiBcImFzY1wiIHwgXCJkZXNjXCJcbiAgb25DaGFuZ2U/OiAoc29ydEJ5OiBrZXlvZiBULCBkaXJlY3Rpb246IExpc3RTb3J0ZXJEaXJlY3Rpb24pID0+IHZvaWRcbn1cblxuZnVuY3Rpb24gdXNlTGlzdFNvcnRlcjxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgdW5rbm93bj4+KHtcbiAgZGlyZWN0aW9uLFxuICBzb3J0QnksXG4gIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG59OiBQcm9wczxUPikge1xuICBjb25zdCBbc29ydEJ5VmFsdWUsIHNldFNvcnRCeVZhbHVlXSA9IHVzZVN0YXRlPGtleW9mIFQ+KHNvcnRCeSlcbiAgY29uc3QgW2RpcmVjdGlvblZhbHVlLCBzZXREaXJlY3Rpb25dID0gdXNlU3RhdGU8TGlzdFNvcnRlckRpcmVjdGlvbj4oZGlyZWN0aW9uKVxuXG4gIGNvbnN0IHNvcnRlckZuID0gdXNlQ2FsbGJhY2soXG4gICAgKGE6IFQsIGI6IFQpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlQSA9IGFbc29ydEJ5VmFsdWUgPyBzb3J0QnlWYWx1ZSA6IChPYmplY3Qua2V5cyhhKVswXSBhcyBrZXlvZiBUKV1cbiAgICAgIGNvbnN0IHZhbHVlQiA9IGJbc29ydEJ5VmFsdWUgPyBzb3J0QnlWYWx1ZSA6IChPYmplY3Qua2V5cyhiKVswXSBhcyBrZXlvZiBUKV1cblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZUEgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlQiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzb3J0VmFsdWUgPSB2YWx1ZUEubG9jYWxlQ29tcGFyZSh2YWx1ZUIpXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb25WYWx1ZSA9PT0gXCJhc2NcIiA/IHNvcnRWYWx1ZSA6IC1zb3J0VmFsdWVcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVBID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZUIgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvblZhbHVlID09PSBcImFzY1wiID8gdmFsdWVBIC0gdmFsdWVCIDogdmFsdWVCIC0gdmFsdWVBXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwXG4gICAgfSxcbiAgICBbZGlyZWN0aW9uVmFsdWUsIHNvcnRCeVZhbHVlXSxcbiAgKVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKHsgc29ydEJ5LCBkaXJlY3Rpb24gfTogT25MaXN0U29ydGVyRGlyZWN0aW9uQ2hhbmdlPFQ+KSA9PiB7XG4gICAgICBzZXRTb3J0QnlWYWx1ZShzb3J0QnkpXG4gICAgICBzZXREaXJlY3Rpb24oZGlyZWN0aW9uKVxuICAgICAgaGFuZGxlQ2hhbmdlPy4oc29ydEJ5LCBkaXJlY3Rpb24pXG4gICAgfSxcbiAgICBbaGFuZGxlQ2hhbmdlXSxcbiAgKVxuXG4gIHJldHVybiB7IHNvcnRCeTogc29ydEJ5VmFsdWUsIGRpcmVjdGlvbjogZGlyZWN0aW9uVmFsdWUsIG9uQ2hhbmdlLCBzb3J0ZXJGbiB9XG59XG5cbmV4cG9ydCB7IHVzZUxpc3RTb3J0ZXIgfVxuIl0sIm5hbWVzIjpbInVzZUxpc3RTb3J0ZXIiLCJkaXJlY3Rpb24iLCJzb3J0QnkiLCJvbkNoYW5nZSIsImhhbmRsZUNoYW5nZSIsInNvcnRCeVZhbHVlIiwic2V0U29ydEJ5VmFsdWUiLCJ1c2VTdGF0ZSIsImRpcmVjdGlvblZhbHVlIiwic2V0RGlyZWN0aW9uIiwic29ydGVyRm4iLCJ1c2VDYWxsYmFjayIsImEiLCJiIiwidmFsdWVBIiwiT2JqZWN0Iiwia2V5cyIsInZhbHVlQiIsInNvcnRWYWx1ZSIsImxvY2FsZUNvbXBhcmUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQStDU0E7OztlQUFBQTs7O3VCQS9DNkI7QUFTdEMsU0FBU0EsY0FBbUUsRUFDMUVDLFNBQVMsRUFDVEMsTUFBTSxFQUNOQyxVQUFVQyxZQUFZLEVBQ2I7SUFDVCxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR0MsSUFBQUEsZUFBUSxFQUFVTDtJQUN4RCxNQUFNLENBQUNNLGdCQUFnQkMsYUFBYSxHQUFHRixJQUFBQSxlQUFRLEVBQXNCTjtJQUVyRSxNQUFNUyxXQUFXQyxJQUFBQSxrQkFBVyxFQUMxQixDQUFDQyxHQUFNQztRQUNMLE1BQU1DLFNBQVNGLENBQUMsQ0FBQ1AsY0FBY0EsY0FBZVUsT0FBT0MsSUFBSSxDQUFDSixFQUFFLENBQUMsRUFBRSxDQUFhO1FBQzVFLE1BQU1LLFNBQVNKLENBQUMsQ0FBQ1IsY0FBY0EsY0FBZVUsT0FBT0MsSUFBSSxDQUFDSCxFQUFFLENBQUMsRUFBRSxDQUFhO1FBRTVFLElBQUksT0FBT0MsV0FBVyxZQUFZLE9BQU9HLFdBQVcsVUFBVTtZQUM1RCxNQUFNQyxZQUFZSixPQUFPSyxhQUFhLENBQUNGO1lBQ3ZDLE9BQU9ULG1CQUFtQixRQUFRVSxZQUFZLENBQUNBO1FBQ2pEO1FBQ0EsSUFBSSxPQUFPSixXQUFXLFlBQVksT0FBT0csV0FBVyxVQUFVO1lBQzVELE9BQU9ULG1CQUFtQixRQUFRTSxTQUFTRyxTQUFTQSxTQUFTSDtRQUMvRDtRQUVBLE9BQU87SUFDVCxHQUNBO1FBQUNOO1FBQWdCSDtLQUFZO0lBRy9CLE1BQU1GLFdBQVdRLElBQUFBLGtCQUFXLEVBQzFCLENBQUMsRUFBRVQsTUFBTSxFQUFFRCxTQUFTLEVBQWtDO1FBQ3BESyxlQUFlSjtRQUNmTyxhQUFhUjtRQUNiRyx5QkFBQUEsbUNBQUFBLGFBQWVGLFFBQVFEO0lBQ3pCLEdBQ0E7UUFBQ0c7S0FBYTtJQUdoQixPQUFPO1FBQUVGLFFBQVFHO1FBQWFKLFdBQVdPO1FBQWdCTDtRQUFVTztJQUFTO0FBQzlFIn0=