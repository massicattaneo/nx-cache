{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-extension-gfm-table/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @typedef {import('./infer.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n\n// To do: micromark@5: use `infer` here, when all events are exposed.\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub tables when serializing to HTML.\n */\nexport function gfmTableHtml() {\n  return {\n    enter: {\n      table(token) {\n        const tableAlign = token._align\n        this.lineEndingIfNeeded()\n        this.tag('<table>')\n        this.setData('tableAlign', tableAlign)\n      },\n      tableBody() {\n        this.tag('<tbody>')\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        const align = alignment[tableAlign[tableColumn]]\n        if (align === undefined) {\n          // Capture results to ignore them.\n          this.buffer()\n        } else {\n          this.lineEndingIfNeeded()\n          this.tag('<td' + align + '>')\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded()\n        this.tag('<thead>')\n      },\n      tableHeader() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        const align = alignment[tableAlign[tableColumn]]\n        this.lineEndingIfNeeded()\n        this.tag('<th' + align + '>')\n      },\n      tableRow() {\n        this.setData('tableColumn', 0)\n        this.lineEndingIfNeeded()\n        this.tag('<tr>')\n      }\n    },\n    exit: {\n      // Overwrite the default code text data handler to unescape escaped pipes when\n      // they are in tables.\n      codeTextData(token) {\n        let value = this.sliceSerialize(token)\n        if (this.getData('tableAlign')) {\n          value = value.replace(/\\\\([\\\\|])/g, replace)\n        }\n        this.raw(this.encode(value))\n      },\n      table() {\n        this.setData('tableAlign')\n        // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n        // but we do need to reset it to match a funky newline GH generates for\n        // list items combined with tables.\n        this.setData('slurpAllLineEndings')\n        this.lineEndingIfNeeded()\n        this.tag('</table>')\n      },\n      tableBody() {\n        this.lineEndingIfNeeded()\n        this.tag('</tbody>')\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign')\n        const tableColumn = this.getData('tableColumn')\n        if (tableColumn in tableAlign) {\n          this.tag('</td>')\n          this.setData('tableColumn', tableColumn + 1)\n        } else {\n          // Stop capturing.\n          this.resume()\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded()\n        this.tag('</thead>')\n      },\n      tableHeader() {\n        const tableColumn = this.getData('tableColumn')\n        this.tag('</th>')\n        this.setData('tableColumn', tableColumn + 1)\n      },\n      tableRow() {\n        const tableAlign = this.getData('tableAlign')\n        let tableColumn = this.getData('tableColumn')\n        while (tableColumn < tableAlign.length) {\n          this.lineEndingIfNeeded()\n          this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n          tableColumn++\n        }\n        this.setData('tableColumn', tableColumn)\n        this.lineEndingIfNeeded()\n        this.tag('</tr>')\n      }\n    }\n  }\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n"],"names":["gfmTableHtml","alignment","none","left","right","center","enter","table","token","tableAlign","_align","lineEndingIfNeeded","tag","setData","tableBody","tableData","getData","tableColumn","align","undefined","buffer","tableHead","tableHeader","tableRow","exit","codeTextData","value","sliceSerialize","replace","raw","encode","resume","length","$0","$1"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}