7063c3daa1d9ed4975166f59c841a0c3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistDataTabsToggles", {
    enumerable: true,
    get: function() {
        return WatchlistDataTabsToggles;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _financeDataTabTablesSchema = require("../financeDataTabTablesSchema");
const _useWatchlistsDataTabsFeatureFlag = require("../hooks/useWatchlistsDataTabsFeatureFlag");
const _CustomDataView = require("./CustomDataView");
const _useCustomColumns = require("./CustomDataView/hooks/useCustomColumns");
const _WatchlistDataTabsTogglesStyled = require("./WatchlistDataTabsTogglesStyled");
const _tables = require("./tables");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Constants moved to top for better maintainability
const LAYOUT_CONSTANTS = {
    MIN_TAB_WIDTH: _WatchlistDataTabsTogglesStyled.STYLED_LAYOUT_CONSTANTS.MIN_TAB_WIDTH,
    MORE_BUTTON_WIDTH: _WatchlistDataTabsTogglesStyled.STYLED_LAYOUT_CONSTANTS.MORE_BUTTON_WIDTH,
    CONTAINER_PADDING: 16,
    MOBILE_MAX_TABS: 2,
    MOBILE_MAX_TAB_WIDTH: _WatchlistDataTabsTogglesStyled.STYLED_LAYOUT_CONSTANTS.MOBILE_MAX_TAB_WIDTH,
    DESKTOP_MAX_TAB_WIDTH: _WatchlistDataTabsTogglesStyled.STYLED_LAYOUT_CONSTANTS.DESKTOP_MAX_TAB_WIDTH,
    RESIZE_DEBOUNCE_MS: 150,
    // Optimized spacing constants for better space utilization
    TAB_MARGIN: 8,
    TAB_GAP: 4,
    MORE_BUTTON_MARGIN: 4,
    SAFETY_BUFFER: 8
};
function WatchlistDataTabsToggles({ dataTab, setDataTab }) {
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [active] = (0, _useWatchlistsDataTabsFeatureFlag.useWatchlistsDataTabsFeatureFlag)();
    const containerRef = (0, _react.useRef)(null);
    const resizeTimeoutRef = (0, _react.useRef)(undefined);
    const [visibleTabsCount, setVisibleTabsCount] = (0, _react.useState)(active.length);
    const [moreMenuAnchor, setMoreMenuAnchor] = (0, _react.useState)(null);
    // Feature flag for custom data views
    const { webBeEnableCustomDataViewsWe } = (0, _launchdarklyreactclientsdk.useFlags)();
    const enableCustomDataViews = (0, _hooks.getlocalOverrideFlags)("webBeEnableCustomDataViewsWe", webBeEnableCustomDataViewsWe);
    // Custom columns functionality
    const { customColumns, saveColumns } = (0, _useCustomColumns.useCustomColumns)();
    const [isCustomModalOpen, setIsCustomModalOpen] = (0, _react.useState)(false);
    // State for custom tab ordering (TradingView-like behavior)
    const [customTabOrder, setCustomTabOrder] = (0, _react.useState)(null);
    // Memoize active tables computation to prevent unnecessary re-renders
    const activeTables = (0, _react.useMemo)(()=>{
        // Get the correct order from the schema, then filter by active tabs
        const schemaOrder = _financeDataTabTablesSchema.financeDataTabTablesSchema.options;
        // Use custom order if available, otherwise use schema order
        const orderToUse = customTabOrder || schemaOrder;
        return orderToUse.filter((tableName)=>{
            // Check if tab is in active list
            if (!active.includes(tableName)) return false;
            // Filter out custom tab if feature flag is disabled
            if (tableName === "custom" && !enableCustomDataViews) return false;
            return true;
        }).map((tableName)=>_tables.watchlistDataTables[tableName]);
    }, [
        active,
        customTabOrder,
        enableCustomDataViews
    ]);
    // Memoize tab split to prevent unnecessary array operations
    const { visibleTables, overflowTables, hasOverflow } = (0, _react.useMemo)(()=>{
        const visible = activeTables.slice(0, visibleTabsCount);
        const overflow = activeTables.slice(visibleTabsCount);
        return {
            visibleTables: visible,
            overflowTables: overflow,
            hasOverflow: overflow.length > 0
        };
    }, [
        activeTables,
        visibleTabsCount
    ]);
    // Memoize whether current tab is in overflow for More button styling
    const isCurrentTabInOverflow = (0, _react.useMemo)(()=>{
        return overflowTables.some((t)=>t.tableName === dataTab);
    }, [
        overflowTables,
        dataTab
    ]);
    // Calculate how many tabs can fit in the available space
    const calculateVisibleTabs = (0, _react.useCallback)(()=>{
        // Always show at least 1 tab if we have any active tabs
        if (active.length === 0) {
            setVisibleTabsCount(0);
            return;
        }
        if (!containerRef.current || active.length < 2) {
            setVisibleTabsCount(active.length);
            return;
        }
        const containerWidth = containerRef.current.offsetWidth - LAYOUT_CONSTANTS.CONTAINER_PADDING;
        // Guard against invalid container widths - always show at least 1 tab
        if (containerWidth <= 0) {
            setVisibleTabsCount(Math.min(1, active.length));
            return;
        }
        // On mobile, show fewer tabs by default to prevent squashing
        if (isMobile) {
            const mobileMaxTabs = Math.min(LAYOUT_CONSTANTS.MOBILE_MAX_TABS, active.length);
            setVisibleTabsCount(Math.max(1, mobileMaxTabs));
            return;
        }
        // Calculate the actual space needed per tab including margins and gaps
        const spacePerTab = LAYOUT_CONSTANTS.MIN_TAB_WIDTH + LAYOUT_CONSTANTS.TAB_MARGIN;
        // Optimized check: Can all tabs fit without overflow?
        const totalSpaceNeededForAllTabs = active.length * spacePerTab + (active.length - 1) * LAYOUT_CONSTANTS.TAB_GAP + LAYOUT_CONSTANTS.SAFETY_BUFFER;
        if (totalSpaceNeededForAllTabs <= containerWidth) {
            // All tabs fit comfortably
            setVisibleTabsCount(active.length);
        } else {
            // Need More button - calculate space more efficiently
            const moreButtonTotalWidth = LAYOUT_CONSTANTS.MORE_BUTTON_WIDTH + LAYOUT_CONSTANTS.MORE_BUTTON_MARGIN;
            const availableWidthForTabs = containerWidth - moreButtonTotalWidth - LAYOUT_CONSTANTS.SAFETY_BUFFER;
            // Calculate maximum tabs that can fit, accounting for gaps between them
            let maxVisibleTabs = 1 // Start with at least 1 tab
            ;
            let spaceUsed = LAYOUT_CONSTANTS.MIN_TAB_WIDTH + LAYOUT_CONSTANTS.TAB_MARGIN;
            // Add tabs one by one until we run out of space
            for(let i = 2; i <= active.length; i++){
                const additionalSpaceNeeded = LAYOUT_CONSTANTS.MIN_TAB_WIDTH + LAYOUT_CONSTANTS.TAB_MARGIN + LAYOUT_CONSTANTS.TAB_GAP;
                if (spaceUsed + additionalSpaceNeeded <= availableWidthForTabs) {
                    spaceUsed += additionalSpaceNeeded;
                    maxVisibleTabs = i;
                } else {
                    break;
                }
            }
            // Ensure we always leave at least one tab for overflow (unless we only have 2 total)
            const visibleCount = active.length <= 2 ? 1 : Math.min(maxVisibleTabs, active.length - 1);
            setVisibleTabsCount(Math.max(1, visibleCount));
        }
    }, [
        active.length,
        isMobile
    ]);
    // Debounced resize handler to improve performance
    const handleResize = (0, _react.useCallback)(()=>{
        if (resizeTimeoutRef.current) {
            clearTimeout(resizeTimeoutRef.current);
        }
        resizeTimeoutRef.current = setTimeout(()=>{
            calculateVisibleTabs();
        }, LAYOUT_CONSTANTS.RESIZE_DEBOUNCE_MS);
    }, [
        calculateVisibleTabs
    ]);
    // Setup ResizeObserver to monitor container size changes
    // This handles dynamic layout changes beyond just window resizing, such as:
    // - Sidebars opening/closing
    // - Other UI elements expanding/collapsing
    // - CSS changes affecting container width
    // - Dynamic content loading that affects layout
    (0, _react.useEffect)(()=>{
        calculateVisibleTabs();
        if (!containerRef.current) return;
        // ResizeObserver to watch for container dimension changes
        let resizeObserver = null;
        if (typeof ResizeObserver !== "undefined") {
            resizeObserver = new ResizeObserver((entries)=>{
                for (const entry of entries){
                    // Only trigger if the container width actually changed and is valid
                    const newWidth = entry.contentRect.width;
                    if (newWidth > 0) {
                        handleResize();
                    }
                }
            });
            resizeObserver.observe(containerRef.current);
        }
        // Fallback window resize listener for browsers without ResizeObserver support
        // or edge cases where ResizeObserver might not catch everything
        window.addEventListener("resize", handleResize);
        return ()=>{
            if (resizeObserver) {
                resizeObserver.disconnect();
            }
            window.removeEventListener("resize", handleResize);
            if (resizeTimeoutRef.current) {
                clearTimeout(resizeTimeoutRef.current);
            }
        };
    }, [
        calculateVisibleTabs,
        handleResize
    ]);
    const handleTabChange = (0, _react.useCallback)((newTab)=>{
        setDataTab(newTab);
        setMoreMenuAnchor(null) // Close more menu if open
        ;
        // TradingView-like behavior: If selecting from overflow menu, reorder tabs
        const isSelectingFromOverflow = overflowTables.some((t)=>t.tableName === newTab);
        if (isSelectingFromOverflow && visibleTabsCount > 0) {
            // Get current order from activeTables
            const currentOrder = activeTables.map((t)=>t.tableName);
            // Find the selected tab and remove it from current position
            const selectedTabIndex = currentOrder.indexOf(newTab);
            const newOrder = [
                ...currentOrder
            ];
            newOrder.splice(selectedTabIndex, 1);
            // Insert the selected tab at the last visible position
            const insertPosition = Math.min(visibleTabsCount - 1, newOrder.length);
            newOrder.splice(insertPosition, 0, newTab);
            // Update custom tab order
            setCustomTabOrder(newOrder);
        }
    }, [
        setDataTab,
        overflowTables,
        visibleTabsCount,
        activeTables
    ]);
    const handleCustomColumnsSave = (0, _react.useCallback)(async (columns)=>{
        try {
            // Save selected columns
            await saveColumns(columns);
            // Switch to custom tab after adding columns
            setDataTab("custom");
            setIsCustomModalOpen(false);
        } catch (error) {
        // Handle error silently or show user-friendly message
        }
    }, [
        saveColumns,
        setDataTab
    ]);
    const handleCustomModalClose = (0, _react.useCallback)(()=>{
        setIsCustomModalOpen(false);
    }, []);
    const handleMoreClick = (0, _react.useCallback)((event)=>{
        setMoreMenuAnchor(event.currentTarget);
    }, []);
    const handleMoreClose = (0, _react.useCallback)(()=>{
        setMoreMenuAnchor(null);
    }, []);
    // Handle keyboard navigation for accessibility
    const handleMenuKeyDown = (0, _react.useCallback)((event)=>{
        if (event.key === "Escape") {
            setMoreMenuAnchor(null);
            // Return focus to More button
            if (containerRef.current) {
                const moreButton = containerRef.current.querySelector('[aria-label="More data views"]');
                moreButton === null || moreButton === void 0 ? void 0 : moreButton.focus();
            }
        }
    }, []);
    if (active.length < 2) return null;
    const isMenuOpen = Boolean(moreMenuAnchor);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WatchlistDataTabsTogglesStyled.WatchlistDataTabsTogglesContainer, {
                ref: containerRef,
                sx: {
                    "& .MuiTab-root": {
                        maxWidth: isMobile ? LAYOUT_CONSTANTS.MOBILE_MAX_TAB_WIDTH : LAYOUT_CONSTANTS.DESKTOP_MAX_TAB_WIDTH
                    }
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsTogglesStyled.WatchlistDataTabsTogglesStyled, {
                        role: "tablist",
                        "aria-label": "Watchlist Data Tabs",
                        variant: "standard",
                        value: isCurrentTabInOverflow ? false : dataTab,
                        onChange: (ev, newValue)=>handleTabChange(newValue),
                        children: visibleTables.map((table)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Tab, {
                                iconPosition: "start",
                                icon: table.tableIcon,
                                label: table.tableLabel,
                                value: table.tableName
                            }, table.tableName))
                    }),
                    hasOverflow && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WatchlistDataTabsTogglesStyled.WatchlistDataTabsMoreButton, {
                                onClick: handleMoreClick,
                                variant: "text",
                                "aria-label": "More data views",
                                "aria-expanded": isMenuOpen,
                                "aria-haspopup": "menu",
                                isCurrentTabInOverflow: isCurrentTabInOverflow,
                                children: [
                                    "More",
                                    isMenuOpen ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowDropUp, {
                                        fontSize: "small"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowDropDown, {
                                        fontSize: "small"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTabsTogglesStyled.WatchlistDataTabsMoreMenu, {
                                anchorEl: moreMenuAnchor,
                                open: isMenuOpen,
                                onClose: handleMoreClose,
                                onKeyDown: handleMenuKeyDown,
                                anchorOrigin: {
                                    vertical: "bottom",
                                    horizontal: "left"
                                },
                                transformOrigin: {
                                    vertical: "top",
                                    horizontal: "left"
                                },
                                MenuListProps: {
                                    "aria-label": "Additional data views"
                                },
                                children: overflowTables.map((table)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.MenuItem, {
                                        selected: table.tableName === dataTab,
                                        onClick: ()=>handleTabChange(table.tableName),
                                        children: [
                                            table.tableIcon,
                                            table.tableLabel
                                        ]
                                    }, table.tableName))
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomDataView.CustomColumnSelectorModal, {
                open: isCustomModalOpen,
                onClose: handleCustomModalClose,
                onSave: handleCustomColumnsSave,
                initialColumns: customColumns
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,