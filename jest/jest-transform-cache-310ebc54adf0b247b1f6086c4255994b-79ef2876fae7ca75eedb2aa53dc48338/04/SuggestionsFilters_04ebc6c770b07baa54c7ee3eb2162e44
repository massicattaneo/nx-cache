2ad3dbe78170a98ec9c669b309f00255
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SuggestionsFilters", {
    enumerable: true,
    get: function() {
        return SuggestionsFilters;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _react1 = require("swiper/react");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _core = require("@rp/react/web/mui/core");
const _SuggestionFilter = require("./SuggestionFilter");
const SuggestionsFilters = ({ categoryFilter, maxWidth = "initial", clearText = "Clear filters", filters, setFilters, facets, isLoading = false, suggestionQuery, fields, hideClearFilter })=>{
    const swiperRef = (0, _react.useRef)(null);
    const res = filters[categoryFilter !== null && categoryFilter !== void 0 ? categoryFilter : ""];
    (0, _react.useEffect)(()=>{
        var _swiperRef_current_swiper, _swiperRef_current;
        (_swiperRef_current = swiperRef.current) === null || _swiperRef_current === void 0 ? void 0 : (_swiperRef_current_swiper = _swiperRef_current.swiper) === null || _swiperRef_current_swiper === void 0 ? void 0 : _swiperRef_current_swiper.update();
    }, [
        res
    ]);
    if (!categoryFilter) return null;
    const activeFilter = filters[categoryFilter];
    const disableClearFilter = !Object.values(activeFilter !== null && activeFilter !== void 0 ? activeFilter : {}).filter((arr)=>arr.length).length;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            !hideClearFilter ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                disabled: disableClearFilter,
                sx: (theme)=>({
                        fontSize: 12,
                        mr: 1,
                        cursor: "pointer",
                        whiteSpace: "nowrap",
                        color: theme.palette.red[200],
                        textTransform: "none"
                    }),
                onClick: ()=>setFilters === null || setFilters === void 0 ? void 0 : setFilters({}),
                children: clearText
            }) : null,
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    position: "relative",
                    maxWidth
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.SwiperWithFadingArrows, {
                    height: 32,
                    ref: swiperRef,
                    slidesPerGroup: 1,
                    spaceBetween: 8,
                    children: fields.map((field)=>{
                        var _activeFilter_field_key;
                        const values = (_activeFilter_field_key = activeFilter === null || activeFilter === void 0 ? void 0 : activeFilter[field.key]) !== null && _activeFilter_field_key !== void 0 ? _activeFilter_field_key : [];
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.SwiperSlide, {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SuggestionFilter.SuggestionFilter, {
                                facets: facets,
                                isLoading: isLoading,
                                values: values,
                                field: field,
                                categoryFilter: categoryFilter,
                                suggestionQuery: suggestionQuery,
                                setFilters: setFilters
                            })
                        }, field.key);
                    })
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi93YXRjaGxpc3QtZWRpdG9yL3NyYy9TdWdnZXN0aW9uRmlsdGVycy9TdWdnZXN0aW9uc0ZpbHRlcnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoLCBTZXRTdGF0ZUFjdGlvbiwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgU3dpcGVyUmVmLCBTd2lwZXJTbGlkZSB9IGZyb20gXCJzd2lwZXIvcmVhY3RcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0R3JvdXBzIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvZGlzY292ZXJ5LXBhbmVsLWNvbmZpZ1wiXG5pbXBvcnQge1xuICBHZW5lcmljV2F0Y2hsaXN0QXV0b3N1Z2dlc3RQb3N0UGFyYW1zLFxuICBXYXRjaGxpc3RBdXRvc3VnZ2VzdFBvc3RSZXNwb25zZSxcbiAgV2F0Y2hsaXN0U3VnZ2VzdGlvbkZpbHRlcnMsXG59IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3N1Z2dlc3Rpb25cIlxuaW1wb3J0IHsgU3dpcGVyV2l0aEZhZGluZ0Fycm93cyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyBCb3gsIEJ1dHRvbiB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IFN1Z2dlc3Rpb25GaWx0ZXIgfSBmcm9tIFwiLi9TdWdnZXN0aW9uRmlsdGVyXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgY2F0ZWdvcnlGaWx0ZXI6IHN0cmluZyB8IHVuZGVmaW5lZFxuICBtYXhXaWR0aD86IG51bWJlciB8IHN0cmluZ1xuICBjbGVhclRleHQ/OiBzdHJpbmdcbiAgZmlsdGVyczogV2F0Y2hsaXN0U3VnZ2VzdGlvbkZpbHRlcnNcbiAgc2V0RmlsdGVycz86IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPFdhdGNobGlzdFN1Z2dlc3Rpb25GaWx0ZXJzPj5cbiAgZmFjZXRzOiBSZXF1aXJlZDxXYXRjaGxpc3RBdXRvc3VnZ2VzdFBvc3RSZXNwb25zZT5bXCJmYWNldHNcIl1cbiAgaXNMb2FkaW5nPzogYm9vbGVhblxuICBzdWdnZXN0aW9uUXVlcnk6IEdlbmVyaWNXYXRjaGxpc3RBdXRvc3VnZ2VzdFBvc3RQYXJhbXNcbiAgZmllbGRzOiBXYXRjaGxpc3RHcm91cHNbXCJmaWVsZHNcIl1cbiAgaGlkZUNsZWFyRmlsdGVyPzogYm9vbGVhblxufVxuXG5jb25zdCBTdWdnZXN0aW9uc0ZpbHRlcnMgPSAoe1xuICBjYXRlZ29yeUZpbHRlcixcbiAgbWF4V2lkdGggPSBcImluaXRpYWxcIixcbiAgY2xlYXJUZXh0ID0gXCJDbGVhciBmaWx0ZXJzXCIsXG4gIGZpbHRlcnMsXG4gIHNldEZpbHRlcnMsXG4gIGZhY2V0cyxcbiAgaXNMb2FkaW5nID0gZmFsc2UsXG4gIHN1Z2dlc3Rpb25RdWVyeSxcbiAgZmllbGRzLFxuICBoaWRlQ2xlYXJGaWx0ZXIsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCBzd2lwZXJSZWYgPSB1c2VSZWY8U3dpcGVyUmVmPihudWxsKVxuICBjb25zdCByZXMgPSBmaWx0ZXJzW2NhdGVnb3J5RmlsdGVyID8/IFwiXCJdXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzd2lwZXJSZWYuY3VycmVudD8uc3dpcGVyPy51cGRhdGUoKVxuICB9LCBbcmVzXSlcblxuICBpZiAoIWNhdGVnb3J5RmlsdGVyKSByZXR1cm4gbnVsbFxuXG4gIGNvbnN0IGFjdGl2ZUZpbHRlciA9IGZpbHRlcnNbY2F0ZWdvcnlGaWx0ZXJdXG4gIGNvbnN0IGRpc2FibGVDbGVhckZpbHRlciA9ICFPYmplY3QudmFsdWVzKGFjdGl2ZUZpbHRlciA/PyB7fSkuZmlsdGVyKGFyciA9PiBhcnIubGVuZ3RoKS5sZW5ndGhcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7IWhpZGVDbGVhckZpbHRlciA/IChcbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlQ2xlYXJGaWx0ZXJ9XG4gICAgICAgICAgc3g9e3RoZW1lID0+ICh7XG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgICAgICBtcjogMSxcbiAgICAgICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucmVkWzIwMF0sXG4gICAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcIm5vbmVcIixcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRGaWx0ZXJzPy4oe30pfVxuICAgICAgICA+XG4gICAgICAgICAge2NsZWFyVGV4dH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICApIDogbnVsbH1cblxuICAgICAgPEJveCBzeD17eyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLCBtYXhXaWR0aCB9fT5cbiAgICAgICAgPFN3aXBlcldpdGhGYWRpbmdBcnJvd3MgaGVpZ2h0PXszMn0gcmVmPXtzd2lwZXJSZWZ9IHNsaWRlc1Blckdyb3VwPXsxfSBzcGFjZUJldHdlZW49ezh9PlxuICAgICAgICAgIHtmaWVsZHMubWFwKGZpZWxkID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGFjdGl2ZUZpbHRlcj8uW2ZpZWxkLmtleV0gPz8gW11cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxTd2lwZXJTbGlkZSBrZXk9e2ZpZWxkLmtleX0+XG4gICAgICAgICAgICAgICAgPFN1Z2dlc3Rpb25GaWx0ZXJcbiAgICAgICAgICAgICAgICAgIGZhY2V0cz17ZmFjZXRzfVxuICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICAgICAgICAgICAgICB2YWx1ZXM9e3ZhbHVlc31cbiAgICAgICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgICAgIGNhdGVnb3J5RmlsdGVyPXtjYXRlZ29yeUZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25RdWVyeT17c3VnZ2VzdGlvblF1ZXJ5fVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVycz17c2V0RmlsdGVyc31cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L1N3aXBlclNsaWRlPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L1N3aXBlcldpdGhGYWRpbmdBcnJvd3M+XG4gICAgICA8L0JveD5cbiAgICA8Lz5cbiAgKVxufVxuXG5leHBvcnQgeyBTdWdnZXN0aW9uc0ZpbHRlcnMgfVxuIl0sIm5hbWVzIjpbIlN1Z2dlc3Rpb25zRmlsdGVycyIsImNhdGVnb3J5RmlsdGVyIiwibWF4V2lkdGgiLCJjbGVhclRleHQiLCJmaWx0ZXJzIiwic2V0RmlsdGVycyIsImZhY2V0cyIsImlzTG9hZGluZyIsInN1Z2dlc3Rpb25RdWVyeSIsImZpZWxkcyIsImhpZGVDbGVhckZpbHRlciIsInN3aXBlclJlZiIsInVzZVJlZiIsInJlcyIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJzd2lwZXIiLCJ1cGRhdGUiLCJhY3RpdmVGaWx0ZXIiLCJkaXNhYmxlQ2xlYXJGaWx0ZXIiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJhcnIiLCJsZW5ndGgiLCJCdXR0b24iLCJkaXNhYmxlZCIsInN4IiwidGhlbWUiLCJmb250U2l6ZSIsIm1yIiwiY3Vyc29yIiwid2hpdGVTcGFjZSIsImNvbG9yIiwicGFsZXR0ZSIsInJlZCIsInRleHRUcmFuc2Zvcm0iLCJvbkNsaWNrIiwiQm94IiwicG9zaXRpb24iLCJTd2lwZXJXaXRoRmFkaW5nQXJyb3dzIiwiaGVpZ2h0IiwicmVmIiwic2xpZGVzUGVyR3JvdXAiLCJzcGFjZUJldHdlZW4iLCJtYXAiLCJmaWVsZCIsImtleSIsIlN3aXBlclNsaWRlIiwiU3VnZ2VzdGlvbkZpbHRlciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBNEZTQTs7O2VBQUFBOzs7O3VCQTVGbUQ7d0JBQ3JCO3FDQU9BO3NCQUNYO2tDQUNLO0FBZWpDLE1BQU1BLHFCQUFxQixDQUFDLEVBQzFCQyxjQUFjLEVBQ2RDLFdBQVcsU0FBUyxFQUNwQkMsWUFBWSxlQUFlLEVBQzNCQyxPQUFPLEVBQ1BDLFVBQVUsRUFDVkMsTUFBTSxFQUNOQyxZQUFZLEtBQUssRUFDakJDLGVBQWUsRUFDZkMsTUFBTSxFQUNOQyxlQUFlLEVBQ1Q7SUFDTixNQUFNQyxZQUFZQyxJQUFBQSxhQUFNLEVBQVk7SUFDcEMsTUFBTUMsTUFBTVQsT0FBTyxDQUFDSCwyQkFBQUEsNEJBQUFBLGlCQUFrQixHQUFHO0lBRXpDYSxJQUFBQSxnQkFBUyxFQUFDO1lBQ1JILDJCQUFBQTtTQUFBQSxxQkFBQUEsVUFBVUksT0FBTyxjQUFqQkosMENBQUFBLDRCQUFBQSxtQkFBbUJLLE1BQU0sY0FBekJMLGdEQUFBQSwwQkFBMkJNLE1BQU07SUFDbkMsR0FBRztRQUFDSjtLQUFJO0lBRVIsSUFBSSxDQUFDWixnQkFBZ0IsT0FBTztJQUU1QixNQUFNaUIsZUFBZWQsT0FBTyxDQUFDSCxlQUFlO0lBQzVDLE1BQU1rQixxQkFBcUIsQ0FBQ0MsT0FBT0MsTUFBTSxDQUFDSCx5QkFBQUEsMEJBQUFBLGVBQWdCLENBQUMsR0FBR0ksTUFBTSxDQUFDQyxDQUFBQSxNQUFPQSxJQUFJQyxNQUFNLEVBQUVBLE1BQU07SUFFOUYscUJBQ0U7O1lBQ0csQ0FBQ2QsZ0NBQ0EscUJBQUNlLFlBQU07Z0JBQ0xDLFVBQVVQO2dCQUNWUSxJQUFJQyxDQUFBQSxRQUFVLENBQUE7d0JBQ1pDLFVBQVU7d0JBQ1ZDLElBQUk7d0JBQ0pDLFFBQVE7d0JBQ1JDLFlBQVk7d0JBQ1pDLE9BQU9MLE1BQU1NLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLElBQUk7d0JBQzdCQyxlQUFlO29CQUNqQixDQUFBO2dCQUNBQyxTQUFTLElBQU1oQyx1QkFBQUEsaUNBQUFBLFdBQWEsQ0FBQzswQkFFNUJGO2lCQUVEOzBCQUVKLHFCQUFDbUMsU0FBRztnQkFBQ1gsSUFBSTtvQkFBRVksVUFBVTtvQkFBWXJDO2dCQUFTOzBCQUN4QyxjQUFBLHFCQUFDc0MsMkNBQXNCO29CQUFDQyxRQUFRO29CQUFJQyxLQUFLL0I7b0JBQVdnQyxnQkFBZ0I7b0JBQUdDLGNBQWM7OEJBQ2xGbkMsT0FBT29DLEdBQUcsQ0FBQ0MsQ0FBQUE7NEJBQ0s1Qjt3QkFBZixNQUFNRyxTQUFTSCxDQUFBQSwwQkFBQUEseUJBQUFBLG1DQUFBQSxZQUFjLENBQUM0QixNQUFNQyxHQUFHLENBQUMsY0FBekI3QixxQ0FBQUEsMEJBQTZCLEVBQUU7d0JBQzlDLHFCQUNFLHFCQUFDOEIsbUJBQVc7c0NBQ1YsY0FBQSxxQkFBQ0Msa0NBQWdCO2dDQUNmM0MsUUFBUUE7Z0NBQ1JDLFdBQVdBO2dDQUNYYyxRQUFRQTtnQ0FDUnlCLE9BQU9BO2dDQUNQN0MsZ0JBQWdCQTtnQ0FDaEJPLGlCQUFpQkE7Z0NBQ2pCSCxZQUFZQTs7MkJBUkV5QyxNQUFNQyxHQUFHO29CQVkvQjs7Ozs7QUFLViJ9