da162166971052bbfcb89011cb0bc0d1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistSmartGridColumn", {
    enumerable: true,
    get: function() {
        return WatchlistSmartGridColumn;
    }
});
const _react = require("react");
const _hooks = require("@rp/react/common/hooks");
const _chat = require("@rp/react/tanstack-api/chat");
function WatchlistSmartGridColumn({ id, chatId, title, prompt, scope, timeRange, watchlistName, watchlistId, entities, onSmartGridSummary, onChatId }) {
    const isCreatingChat = (0, _react.useRef)(false);
    const { mutateAsync } = (0, _chat.useCreateChat)();
    const input = `Focus on information from the ${timeRange} for all your research for the below topic:\n${title} ${prompt}`;
    const { summary, status } = (0, _hooks.usePersistedChat)({
        chatId,
        inputMessage: input,
        enabled: !!prompt && !!chatId,
        scope: scope,
        watchlistId,
        interactionType: "watchlist",
        enableTracking: true,
        entities: entities.map((entity)=>({
                key: entity.key,
                name: entity.name,
                type: entity.queryType
            }))
    });
    (0, _react.useEffect)(()=>{
        if (chatId === "" && !isCreatingChat.current) {
            isCreatingChat.current = true;
            mutateAsync({
                name: `${watchlistName}: ${title}; ${prompt}`
            }).then((chat)=>{
                onChatId(id, chat.id);
                isCreatingChat.current = false;
            });
        }
    }, [
        chatId,
        mutateAsync,
        onChatId,
        id,
        prompt,
        watchlistName,
        title,
        timeRange
    ]);
    (0, _react.useEffect)(()=>{
        if (!chatId) return;
        onSmartGridSummary(summary, status, chatId);
    }, [
        onSmartGridSummary,
        status,
        summary,
        chatId
    ]);
    return null;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RTbWFydEdyaWQvV2F0Y2hsaXN0U21hcnRHcmlkQ29sdW1uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiXG5pbXBvcnQgeyBDcXNJdGVtLCBDcXNTY29wZVNjaGVtYSB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5pbXBvcnQgeyBTdW1tYXJ5U3RhdGUsIFN1bW1hcnlTdGF0dXMsIHVzZVBlcnNpc3RlZENoYXQgfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyB1c2VDcmVhdGVDaGF0IH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvY2hhdFwiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGlkOiBzdHJpbmdcbiAgY2hhdElkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBwcm9tcHQ6IHN0cmluZ1xuICBzY29wZTogei5pbmZlcjx0eXBlb2YgQ3FzU2NvcGVTY2hlbWE+IHwgdW5kZWZpbmVkXG4gIHRpbWVSYW5nZTogc3RyaW5nXG4gIHdhdGNobGlzdE5hbWU6IHN0cmluZ1xuICB3YXRjaGxpc3RJZDogc3RyaW5nXG4gIGVudGl0aWVzOiBBcnJheTxDcXNJdGVtPlxuICBvblNtYXJ0R3JpZFN1bW1hcnk6IChzdW1tYXJ5OiBTdW1tYXJ5U3RhdGUsIHN0YXRlOiBTdW1tYXJ5U3RhdHVzLCBjaGF0SWQ6IHN0cmluZykgPT4gdm9pZFxuICBvbkNoYXRJZDogKHByb21wdDogc3RyaW5nLCBjaGF0SWQ6IHN0cmluZykgPT4gdm9pZFxufVxuXG5mdW5jdGlvbiBXYXRjaGxpc3RTbWFydEdyaWRDb2x1bW4oe1xuICBpZCxcbiAgY2hhdElkLFxuICB0aXRsZSxcbiAgcHJvbXB0LFxuICBzY29wZSxcbiAgdGltZVJhbmdlLFxuICB3YXRjaGxpc3ROYW1lLFxuICB3YXRjaGxpc3RJZCxcbiAgZW50aXRpZXMsXG4gIG9uU21hcnRHcmlkU3VtbWFyeSxcbiAgb25DaGF0SWQsXG59OiBQcm9wcykge1xuICBjb25zdCBpc0NyZWF0aW5nQ2hhdCA9IHVzZVJlZihmYWxzZSlcbiAgY29uc3QgeyBtdXRhdGVBc3luYyB9ID0gdXNlQ3JlYXRlQ2hhdCgpXG4gIGNvbnN0IGlucHV0ID0gYEZvY3VzIG9uIGluZm9ybWF0aW9uIGZyb20gdGhlICR7dGltZVJhbmdlfSBmb3IgYWxsIHlvdXIgcmVzZWFyY2ggZm9yIHRoZSBiZWxvdyB0b3BpYzpcXG4ke3RpdGxlfSAke3Byb21wdH1gXG4gIGNvbnN0IHsgc3VtbWFyeSwgc3RhdHVzIH0gPSB1c2VQZXJzaXN0ZWRDaGF0KHtcbiAgICBjaGF0SWQsXG4gICAgaW5wdXRNZXNzYWdlOiBpbnB1dCxcbiAgICBlbmFibGVkOiAhIXByb21wdCAmJiAhIWNoYXRJZCxcbiAgICBzY29wZTogc2NvcGUsXG4gICAgd2F0Y2hsaXN0SWQsXG4gICAgaW50ZXJhY3Rpb25UeXBlOiBcIndhdGNobGlzdFwiLFxuICAgIGVuYWJsZVRyYWNraW5nOiB0cnVlLFxuICAgIGVudGl0aWVzOiBlbnRpdGllcy5tYXAoZW50aXR5ID0+ICh7XG4gICAgICBrZXk6IGVudGl0eS5rZXksXG4gICAgICBuYW1lOiBlbnRpdHkubmFtZSxcbiAgICAgIHR5cGU6IGVudGl0eS5xdWVyeVR5cGUsXG4gICAgfSkpLFxuICB9KVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNoYXRJZCA9PT0gXCJcIiAmJiAhaXNDcmVhdGluZ0NoYXQuY3VycmVudCkge1xuICAgICAgaXNDcmVhdGluZ0NoYXQuY3VycmVudCA9IHRydWVcbiAgICAgIG11dGF0ZUFzeW5jKHsgbmFtZTogYCR7d2F0Y2hsaXN0TmFtZX06ICR7dGl0bGV9OyAke3Byb21wdH1gIH0pLnRoZW4oY2hhdCA9PiB7XG4gICAgICAgIG9uQ2hhdElkKGlkLCBjaGF0LmlkKVxuICAgICAgICBpc0NyZWF0aW5nQ2hhdC5jdXJyZW50ID0gZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICB9LCBbY2hhdElkLCBtdXRhdGVBc3luYywgb25DaGF0SWQsIGlkLCBwcm9tcHQsIHdhdGNobGlzdE5hbWUsIHRpdGxlLCB0aW1lUmFuZ2VdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjaGF0SWQpIHJldHVyblxuICAgIG9uU21hcnRHcmlkU3VtbWFyeShzdW1tYXJ5LCBzdGF0dXMsIGNoYXRJZClcbiAgfSwgW29uU21hcnRHcmlkU3VtbWFyeSwgc3RhdHVzLCBzdW1tYXJ5LCBjaGF0SWRdKVxuXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCB7IFdhdGNobGlzdFNtYXJ0R3JpZENvbHVtbiB9XG4iXSwibmFtZXMiOlsiV2F0Y2hsaXN0U21hcnRHcmlkQ29sdW1uIiwiaWQiLCJjaGF0SWQiLCJ0aXRsZSIsInByb21wdCIsInNjb3BlIiwidGltZVJhbmdlIiwid2F0Y2hsaXN0TmFtZSIsIndhdGNobGlzdElkIiwiZW50aXRpZXMiLCJvblNtYXJ0R3JpZFN1bW1hcnkiLCJvbkNoYXRJZCIsImlzQ3JlYXRpbmdDaGF0IiwidXNlUmVmIiwibXV0YXRlQXN5bmMiLCJ1c2VDcmVhdGVDaGF0IiwiaW5wdXQiLCJzdW1tYXJ5Iiwic3RhdHVzIiwidXNlUGVyc2lzdGVkQ2hhdCIsImlucHV0TWVzc2FnZSIsImVuYWJsZWQiLCJpbnRlcmFjdGlvblR5cGUiLCJlbmFibGVUcmFja2luZyIsIm1hcCIsImVudGl0eSIsImtleSIsIm5hbWUiLCJ0eXBlIiwicXVlcnlUeXBlIiwidXNlRWZmZWN0IiwiY3VycmVudCIsInRoZW4iLCJjaGF0Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBcUVTQTs7O2VBQUFBOzs7dUJBckV5Qjt1QkFHNEI7c0JBQ2hDO0FBZ0I5QixTQUFTQSx5QkFBeUIsRUFDaENDLEVBQUUsRUFDRkMsTUFBTSxFQUNOQyxLQUFLLEVBQ0xDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxTQUFTLEVBQ1RDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxRQUFRLEVBQ1JDLGtCQUFrQixFQUNsQkMsUUFBUSxFQUNGO0lBQ04sTUFBTUMsaUJBQWlCQyxJQUFBQSxhQUFNLEVBQUM7SUFDOUIsTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBR0MsSUFBQUEsbUJBQWE7SUFDckMsTUFBTUMsUUFBUSxDQUFDLDhCQUE4QixFQUFFVixVQUFVLDZDQUE2QyxFQUFFSCxNQUFNLENBQUMsRUFBRUMsT0FBTyxDQUFDO0lBQ3pILE1BQU0sRUFBRWEsT0FBTyxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsSUFBQUEsdUJBQWdCLEVBQUM7UUFDM0NqQjtRQUNBa0IsY0FBY0o7UUFDZEssU0FBUyxDQUFDLENBQUNqQixVQUFVLENBQUMsQ0FBQ0Y7UUFDdkJHLE9BQU9BO1FBQ1BHO1FBQ0FjLGlCQUFpQjtRQUNqQkMsZ0JBQWdCO1FBQ2hCZCxVQUFVQSxTQUFTZSxHQUFHLENBQUNDLENBQUFBLFNBQVcsQ0FBQTtnQkFDaENDLEtBQUtELE9BQU9DLEdBQUc7Z0JBQ2ZDLE1BQU1GLE9BQU9FLElBQUk7Z0JBQ2pCQyxNQUFNSCxPQUFPSSxTQUFTO1lBQ3hCLENBQUE7SUFDRjtJQUVBQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsSUFBSTVCLFdBQVcsTUFBTSxDQUFDVSxlQUFlbUIsT0FBTyxFQUFFO1lBQzVDbkIsZUFBZW1CLE9BQU8sR0FBRztZQUN6QmpCLFlBQVk7Z0JBQUVhLE1BQU0sQ0FBQyxFQUFFcEIsY0FBYyxFQUFFLEVBQUVKLE1BQU0sRUFBRSxFQUFFQyxPQUFPLENBQUM7WUFBQyxHQUFHNEIsSUFBSSxDQUFDQyxDQUFBQTtnQkFDbEV0QixTQUFTVixJQUFJZ0MsS0FBS2hDLEVBQUU7Z0JBQ3BCVyxlQUFlbUIsT0FBTyxHQUFHO1lBQzNCO1FBQ0Y7SUFDRixHQUFHO1FBQUM3QjtRQUFRWTtRQUFhSDtRQUFVVjtRQUFJRztRQUFRRztRQUFlSjtRQUFPRztLQUFVO0lBRS9Fd0IsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUksQ0FBQzVCLFFBQVE7UUFDYlEsbUJBQW1CTyxTQUFTQyxRQUFRaEI7SUFDdEMsR0FBRztRQUFDUTtRQUFvQlE7UUFBUUQ7UUFBU2Y7S0FBTztJQUVoRCxPQUFPO0FBQ1QifQ==