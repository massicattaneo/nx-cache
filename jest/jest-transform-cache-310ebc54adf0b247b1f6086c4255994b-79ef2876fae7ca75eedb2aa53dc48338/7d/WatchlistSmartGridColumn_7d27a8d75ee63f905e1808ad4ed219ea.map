{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/watchlists/src/lib/WatchlistSmartGrid/WatchlistSmartGridColumn.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\"\nimport { z } from \"zod\"\nimport { CqsItem, CqsScopeSchema } from \"@rp/common/api-types\"\nimport { SummaryState, SummaryStatus, usePersistedChat } from \"@rp/react/common/hooks\"\nimport { useCreateChat } from \"@rp/react/tanstack-api/chat\"\n\ntype Props = {\n  id: string\n  chatId: string\n  title: string\n  prompt: string\n  scope: z.infer<typeof CqsScopeSchema> | undefined\n  timeRange: string\n  watchlistName: string\n  watchlistId: string\n  entities: Array<CqsItem>\n  onSmartGridSummary: (summary: SummaryState, state: SummaryStatus, chatId: string) => void\n  onChatId: (prompt: string, chatId: string) => void\n}\n\nfunction WatchlistSmartGridColumn({\n  id,\n  chatId,\n  title,\n  prompt,\n  scope,\n  timeRange,\n  watchlistName,\n  watchlistId,\n  entities,\n  onSmartGridSummary,\n  onChatId,\n}: Props) {\n  const isCreatingChat = useRef(false)\n  const { mutateAsync } = useCreateChat()\n  const input = `Focus on information from the ${timeRange} for all your research for the below topic:\\n${title} ${prompt}`\n  const { summary, status } = usePersistedChat({\n    chatId,\n    inputMessage: input,\n    enabled: !!prompt && !!chatId,\n    scope: scope,\n    watchlistId,\n    interactionType: \"watchlist\",\n    enableTracking: true,\n    entities: entities.map(entity => ({\n      key: entity.key,\n      name: entity.name,\n      type: entity.queryType,\n    })),\n  })\n\n  useEffect(() => {\n    if (chatId === \"\" && !isCreatingChat.current) {\n      isCreatingChat.current = true\n      mutateAsync({ name: `${watchlistName}: ${title}; ${prompt}` }).then(chat => {\n        onChatId(id, chat.id)\n        isCreatingChat.current = false\n      })\n    }\n  }, [chatId, mutateAsync, onChatId, id, prompt, watchlistName, title, timeRange])\n\n  useEffect(() => {\n    if (!chatId) return\n    onSmartGridSummary(summary, status, chatId)\n  }, [onSmartGridSummary, status, summary, chatId])\n\n  return null\n}\n\nexport { WatchlistSmartGridColumn }\n"],"names":["WatchlistSmartGridColumn","id","chatId","title","prompt","scope","timeRange","watchlistName","watchlistId","entities","onSmartGridSummary","onChatId","isCreatingChat","useRef","mutateAsync","useCreateChat","input","summary","status","usePersistedChat","inputMessage","enabled","interactionType","enableTracking","map","entity","key","name","type","queryType","useEffect","current","then","chat"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqESA;;;eAAAA;;;uBArEyB;uBAG4B;sBAChC;AAgB9B,SAASA,yBAAyB,EAChCC,EAAE,EACFC,MAAM,EACNC,KAAK,EACLC,MAAM,EACNC,KAAK,EACLC,SAAS,EACTC,aAAa,EACbC,WAAW,EACXC,QAAQ,EACRC,kBAAkB,EAClBC,QAAQ,EACF;IACN,MAAMC,iBAAiBC,IAAAA,aAAM,EAAC;IAC9B,MAAM,EAAEC,WAAW,EAAE,GAAGC,IAAAA,mBAAa;IACrC,MAAMC,QAAQ,CAAC,8BAA8B,EAAEV,UAAU,6CAA6C,EAAEH,MAAM,CAAC,EAAEC,OAAO,CAAC;IACzH,MAAM,EAAEa,OAAO,EAAEC,MAAM,EAAE,GAAGC,IAAAA,uBAAgB,EAAC;QAC3CjB;QACAkB,cAAcJ;QACdK,SAAS,CAAC,CAACjB,UAAU,CAAC,CAACF;QACvBG,OAAOA;QACPG;QACAc,iBAAiB;QACjBC,gBAAgB;QAChBd,UAAUA,SAASe,GAAG,CAACC,CAAAA,SAAW,CAAA;gBAChCC,KAAKD,OAAOC,GAAG;gBACfC,MAAMF,OAAOE,IAAI;gBACjBC,MAAMH,OAAOI,SAAS;YACxB,CAAA;IACF;IAEAC,IAAAA,gBAAS,EAAC;QACR,IAAI5B,WAAW,MAAM,CAACU,eAAemB,OAAO,EAAE;YAC5CnB,eAAemB,OAAO,GAAG;YACzBjB,YAAY;gBAAEa,MAAM,CAAC,EAAEpB,cAAc,EAAE,EAAEJ,MAAM,EAAE,EAAEC,OAAO,CAAC;YAAC,GAAG4B,IAAI,CAACC,CAAAA;gBAClEtB,SAASV,IAAIgC,KAAKhC,EAAE;gBACpBW,eAAemB,OAAO,GAAG;YAC3B;QACF;IACF,GAAG;QAAC7B;QAAQY;QAAaH;QAAUV;QAAIG;QAAQG;QAAeJ;QAAOG;KAAU;IAE/EwB,IAAAA,gBAAS,EAAC;QACR,IAAI,CAAC5B,QAAQ;QACbQ,mBAAmBO,SAASC,QAAQhB;IACtC,GAAG;QAACQ;QAAoBQ;QAAQD;QAASf;KAAO;IAEhD,OAAO;AACT"}