141ba9d8f75eab9da78e2601e8c71216
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MentionsPanel", {
    enumerable: true,
    get: function() {
        return MentionsPanel;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _documentviewer = require("@rp/react/web/common/document-viewer");
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
const _rpjson = require("@rp/react/web/rpjson");
const _useMentionPreview = require("../hooks/useMentionPreview");
const _LoadingMentions = require("./LoadingMentions");
const _MentionHeader = require("./MentionHeader");
const _Mentionsstyles = require("./Mentions.styles");
const _MentionsCard = require("./MentionsCard");
const _MentionsClusterView = require("./MentionsClusterView");
const MentionsPanel = ({ rowData, handleClose, onChange, title, onAddToWatchlist, onExclude, isFeedbackMode })=>{
    const [cluster, setCluster] = (0, _react.useState)(null);
    const closeClusterView = (0, _react.useCallback)(()=>{
        setCluster(null);
    }, []);
    const { searchQuery, queryId } = (0, _providers.useQueryContext)();
    const { stories, fetchNextPage, isFetchingNextPage, hasNextPage, isLoading: isLoadingMentions } = (0, _useMentionPreview.useMentionPreview)(rowData, true);
    const highlights = [
        ...(0, _documentviewer.useEntitiesStyles)([
            rowData.key
        ], [
            "entity",
            "rp_topic"
        ].includes(rowData.queryType))
    ];
    if (cluster) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MentionsClusterView.MentionsClusterView, {
            isFeedbackMode: isFeedbackMode,
            rowData: rowData,
            cluster: cluster,
            onExclude: onExclude,
            onChange: onChange,
            onAddToWatchlist: onAddToWatchlist,
            onClose: closeClusterView,
            queryId: queryId,
            query: searchQuery,
            highlights: highlights
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_MentionHeader.MentionHeader, {
                onClose: handleClose,
                item: rowData,
                backButtonTitle: `Back to ${(0, _core.capitalize)(title)}`,
                onChange: onChange,
                onExclude: onExclude,
                onAddToWatchlist: onAddToWatchlist
            }),
            isLoadingMentions ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingMentions.LoadingMentions, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_rpjson.RpJsonAnnotationStyles, {
                highlights: highlights,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Mentionsstyles.MentionsList, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.ShowMoreList, {
                        renderItem: (item, index)=>{
                            if ((0, _apitypes.isChunkStory)(item)) {
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    children: "Chunks on mentions not implemented yet."
                                }, item.id);
                            }
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_MentionsCard.MentionsCard, {
                                isFeedbackMode: isFeedbackMode,
                                story: item,
                                query: searchQuery,
                                index: index,
                                queryId: queryId,
                                onClusterClick: (cluster)=>setCluster(cluster)
                            }, item.id);
                        },
                        items: stories,
                        loading: isFetchingNextPage,
                        fetchNextPage: fetchNextPage,
                        hasNextPage: hasNextPage
                    })
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9kaXNjb3Zlcnktc2lkZWJhci9zcmMvTWVudGlvbnMvTWVudGlvbnNQYW5lbC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENxc0NodW5rU3RvcnksIENxc0l0ZW0sIENxc1N0b3J5LCBpc0NodW5rU3RvcnkgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IFNob3dNb3JlTGlzdCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyB1c2VFbnRpdGllc1N0eWxlcyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9kb2N1bWVudC12aWV3ZXJcIlxuaW1wb3J0IHsgdXNlUXVlcnlDb250ZXh0IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgUnBKc29uQW5ub3RhdGlvblN0eWxlcyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JwanNvblwiXG5pbXBvcnQgeyB1c2VNZW50aW9uUHJldmlldyB9IGZyb20gXCIuLi9ob29rcy91c2VNZW50aW9uUHJldmlld1wiXG5pbXBvcnQgeyBMb2FkaW5nTWVudGlvbnMgfSBmcm9tIFwiLi9Mb2FkaW5nTWVudGlvbnNcIlxuaW1wb3J0IHsgTWVudGlvbkhlYWRlciB9IGZyb20gXCIuL01lbnRpb25IZWFkZXJcIlxuaW1wb3J0IHsgTWVudGlvbnNMaXN0IH0gZnJvbSBcIi4vTWVudGlvbnMuc3R5bGVzXCJcbmltcG9ydCB7IE1lbnRpb25zQ2FyZCB9IGZyb20gXCIuL01lbnRpb25zQ2FyZFwiXG5pbXBvcnQgeyBNZW50aW9uc0NsdXN0ZXJWaWV3IH0gZnJvbSBcIi4vTWVudGlvbnNDbHVzdGVyVmlld1wiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIHJvd0RhdGE6IENxc0l0ZW1cbiAgaGFuZGxlQ2xvc2U6ICgpID0+IHZvaWRcbiAgb25DaGFuZ2U6IChpdGVtOiBDcXNJdGVtKSA9PiB2b2lkXG4gIHRpdGxlOiBzdHJpbmdcbiAgb25BZGRUb1dhdGNobGlzdD86ICh3YXRjaGxpc3Q6IFdhdGNobGlzdCkgPT4gdm9pZFxuICBvbkV4Y2x1ZGU6IChpdGVtOiBDcXNJdGVtKSA9PiB2b2lkXG4gIGlzRmVlZGJhY2tNb2RlOiBib29sZWFuXG59XG5cbmNvbnN0IE1lbnRpb25zUGFuZWwgPSAoe1xuICByb3dEYXRhLFxuICBoYW5kbGVDbG9zZSxcbiAgb25DaGFuZ2UsXG4gIHRpdGxlLFxuICBvbkFkZFRvV2F0Y2hsaXN0LFxuICBvbkV4Y2x1ZGUsXG4gIGlzRmVlZGJhY2tNb2RlLFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgW2NsdXN0ZXIsIHNldENsdXN0ZXJdID0gdXNlU3RhdGU8QXJyYXk8Q3FzU3Rvcnk+IHwgbnVsbD4obnVsbClcblxuICBjb25zdCBjbG9zZUNsdXN0ZXJWaWV3ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldENsdXN0ZXIobnVsbClcbiAgfSwgW10pXG5cbiAgY29uc3QgeyBzZWFyY2hRdWVyeSwgcXVlcnlJZCB9ID0gdXNlUXVlcnlDb250ZXh0KClcblxuICBjb25zdCB7XG4gICAgc3RvcmllcyxcbiAgICBmZXRjaE5leHRQYWdlLFxuICAgIGlzRmV0Y2hpbmdOZXh0UGFnZSxcbiAgICBoYXNOZXh0UGFnZSxcbiAgICBpc0xvYWRpbmc6IGlzTG9hZGluZ01lbnRpb25zLFxuICB9ID0gdXNlTWVudGlvblByZXZpZXcocm93RGF0YSwgdHJ1ZSlcblxuICBjb25zdCBoaWdobGlnaHRzID0gW1xuICAgIC4uLnVzZUVudGl0aWVzU3R5bGVzKFtyb3dEYXRhLmtleV0sIFtcImVudGl0eVwiLCBcInJwX3RvcGljXCJdLmluY2x1ZGVzKHJvd0RhdGEucXVlcnlUeXBlKSksXG4gIF1cblxuICBpZiAoY2x1c3Rlcikge1xuICAgIHJldHVybiAoXG4gICAgICA8TWVudGlvbnNDbHVzdGVyVmlld1xuICAgICAgICBpc0ZlZWRiYWNrTW9kZT17aXNGZWVkYmFja01vZGV9XG4gICAgICAgIHJvd0RhdGE9e3Jvd0RhdGF9XG4gICAgICAgIGNsdXN0ZXI9e2NsdXN0ZXJ9XG4gICAgICAgIG9uRXhjbHVkZT17b25FeGNsdWRlfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIG9uQWRkVG9XYXRjaGxpc3Q9e29uQWRkVG9XYXRjaGxpc3R9XG4gICAgICAgIG9uQ2xvc2U9e2Nsb3NlQ2x1c3RlclZpZXd9XG4gICAgICAgIHF1ZXJ5SWQ9e3F1ZXJ5SWR9XG4gICAgICAgIHF1ZXJ5PXtzZWFyY2hRdWVyeX1cbiAgICAgICAgaGlnaGxpZ2h0cz17aGlnaGxpZ2h0c31cbiAgICAgIC8+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPE1lbnRpb25IZWFkZXJcbiAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgIGl0ZW09e3Jvd0RhdGF9XG4gICAgICAgIGJhY2tCdXR0b25UaXRsZT17YEJhY2sgdG8gJHtjYXBpdGFsaXplKHRpdGxlKX1gfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIG9uRXhjbHVkZT17b25FeGNsdWRlfVxuICAgICAgICBvbkFkZFRvV2F0Y2hsaXN0PXtvbkFkZFRvV2F0Y2hsaXN0fVxuICAgICAgLz5cbiAgICAgIHtpc0xvYWRpbmdNZW50aW9ucyA/IChcbiAgICAgICAgPExvYWRpbmdNZW50aW9ucyAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPFJwSnNvbkFubm90YXRpb25TdHlsZXMgaGlnaGxpZ2h0cz17aGlnaGxpZ2h0c30+XG4gICAgICAgICAgPE1lbnRpb25zTGlzdD5cbiAgICAgICAgICAgIDxTaG93TW9yZUxpc3Q8Q3FzU3RvcnkgfCBDcXNDaHVua1N0b3J5PlxuICAgICAgICAgICAgICByZW5kZXJJdGVtPXsoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNDaHVua1N0b3J5KGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l0ZW0uaWR9PkNodW5rcyBvbiBtZW50aW9ucyBub3QgaW1wbGVtZW50ZWQgeWV0LjwvZGl2PlxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8TWVudGlvbnNDYXJkXG4gICAgICAgICAgICAgICAgICAgIGlzRmVlZGJhY2tNb2RlPXtpc0ZlZWRiYWNrTW9kZX1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxuICAgICAgICAgICAgICAgICAgICBzdG9yeT17aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgcXVlcnk9e3NlYXJjaFF1ZXJ5fVxuICAgICAgICAgICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5SWQ9e3F1ZXJ5SWR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2x1c3RlckNsaWNrPXtjbHVzdGVyID0+IHNldENsdXN0ZXIoY2x1c3Rlcil9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgaXRlbXM9e3N0b3JpZXN9XG4gICAgICAgICAgICAgIGxvYWRpbmc9e2lzRmV0Y2hpbmdOZXh0UGFnZX1cbiAgICAgICAgICAgICAgZmV0Y2hOZXh0UGFnZT17ZmV0Y2hOZXh0UGFnZX1cbiAgICAgICAgICAgICAgaGFzTmV4dFBhZ2U9e2hhc05leHRQYWdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L01lbnRpb25zTGlzdD5cbiAgICAgICAgPC9ScEpzb25Bbm5vdGF0aW9uU3R5bGVzPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgeyBNZW50aW9uc1BhbmVsIH1cbiJdLCJuYW1lcyI6WyJNZW50aW9uc1BhbmVsIiwicm93RGF0YSIsImhhbmRsZUNsb3NlIiwib25DaGFuZ2UiLCJ0aXRsZSIsIm9uQWRkVG9XYXRjaGxpc3QiLCJvbkV4Y2x1ZGUiLCJpc0ZlZWRiYWNrTW9kZSIsImNsdXN0ZXIiLCJzZXRDbHVzdGVyIiwidXNlU3RhdGUiLCJjbG9zZUNsdXN0ZXJWaWV3IiwidXNlQ2FsbGJhY2siLCJzZWFyY2hRdWVyeSIsInF1ZXJ5SWQiLCJ1c2VRdWVyeUNvbnRleHQiLCJzdG9yaWVzIiwiZmV0Y2hOZXh0UGFnZSIsImlzRmV0Y2hpbmdOZXh0UGFnZSIsImhhc05leHRQYWdlIiwiaXNMb2FkaW5nIiwiaXNMb2FkaW5nTWVudGlvbnMiLCJ1c2VNZW50aW9uUHJldmlldyIsImhpZ2hsaWdodHMiLCJ1c2VFbnRpdGllc1N0eWxlcyIsImtleSIsImluY2x1ZGVzIiwicXVlcnlUeXBlIiwiTWVudGlvbnNDbHVzdGVyVmlldyIsIm9uQ2xvc2UiLCJxdWVyeSIsImRpdiIsIk1lbnRpb25IZWFkZXIiLCJpdGVtIiwiYmFja0J1dHRvblRpdGxlIiwiY2FwaXRhbGl6ZSIsIkxvYWRpbmdNZW50aW9ucyIsIlJwSnNvbkFubm90YXRpb25TdHlsZXMiLCJNZW50aW9uc0xpc3QiLCJTaG93TW9yZUxpc3QiLCJyZW5kZXJJdGVtIiwiaW5kZXgiLCJpc0NodW5rU3RvcnkiLCJpZCIsIk1lbnRpb25zQ2FyZCIsInN0b3J5Iiwib25DbHVzdGVyQ2xpY2siLCJpdGVtcyIsImxvYWRpbmciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFvSFNBOzs7ZUFBQUE7Ozs7dUJBcEg2QjswQkFDeUI7cUNBRWxDO2dDQUNLOzJCQUNGO3NCQUNMO3dCQUNZO21DQUNMO2lDQUNGOytCQUNGO2dDQUNEOzhCQUNBO3FDQUNPO0FBWXBDLE1BQU1BLGdCQUFnQixDQUFDLEVBQ3JCQyxPQUFPLEVBQ1BDLFdBQVcsRUFDWEMsUUFBUSxFQUNSQyxLQUFLLEVBQ0xDLGdCQUFnQixFQUNoQkMsU0FBUyxFQUNUQyxjQUFjLEVBQ1I7SUFDTixNQUFNLENBQUNDLFNBQVNDLFdBQVcsR0FBR0MsSUFBQUEsZUFBUSxFQUF5QjtJQUUvRCxNQUFNQyxtQkFBbUJDLElBQUFBLGtCQUFXLEVBQUM7UUFDbkNILFdBQVc7SUFDYixHQUFHLEVBQUU7SUFFTCxNQUFNLEVBQUVJLFdBQVcsRUFBRUMsT0FBTyxFQUFFLEdBQUdDLElBQUFBLDBCQUFlO0lBRWhELE1BQU0sRUFDSkMsT0FBTyxFQUNQQyxhQUFhLEVBQ2JDLGtCQUFrQixFQUNsQkMsV0FBVyxFQUNYQyxXQUFXQyxpQkFBaUIsRUFDN0IsR0FBR0MsSUFBQUEsb0NBQWlCLEVBQUNyQixTQUFTO0lBRS9CLE1BQU1zQixhQUFhO1dBQ2RDLElBQUFBLGlDQUFpQixFQUFDO1lBQUN2QixRQUFRd0IsR0FBRztTQUFDLEVBQUU7WUFBQztZQUFVO1NBQVcsQ0FBQ0MsUUFBUSxDQUFDekIsUUFBUTBCLFNBQVM7S0FDdEY7SUFFRCxJQUFJbkIsU0FBUztRQUNYLHFCQUNFLHFCQUFDb0Isd0NBQW1CO1lBQ2xCckIsZ0JBQWdCQTtZQUNoQk4sU0FBU0E7WUFDVE8sU0FBU0E7WUFDVEYsV0FBV0E7WUFDWEgsVUFBVUE7WUFDVkUsa0JBQWtCQTtZQUNsQndCLFNBQVNsQjtZQUNURyxTQUFTQTtZQUNUZ0IsT0FBT2pCO1lBQ1BVLFlBQVlBOztJQUdsQjtJQUVBLHFCQUNFLHNCQUFDUTs7MEJBQ0MscUJBQUNDLDRCQUFhO2dCQUNaSCxTQUFTM0I7Z0JBQ1QrQixNQUFNaEM7Z0JBQ05pQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUVDLElBQUFBLGdCQUFVLEVBQUMvQixPQUFPLENBQUM7Z0JBQy9DRCxVQUFVQTtnQkFDVkcsV0FBV0E7Z0JBQ1hELGtCQUFrQkE7O1lBRW5CZ0Isa0NBQ0MscUJBQUNlLGdDQUFlLHNCQUVoQixxQkFBQ0MsOEJBQXNCO2dCQUFDZCxZQUFZQTswQkFDbEMsY0FBQSxxQkFBQ2UsNEJBQVk7OEJBQ1gsY0FBQSxxQkFBQ0MsaUNBQVk7d0JBQ1hDLFlBQVksQ0FBQ1AsTUFBTVE7NEJBQ2pCLElBQUlDLElBQUFBLHNCQUFZLEVBQUNULE9BQU87Z0NBQ3RCLHFCQUFPLHFCQUFDRjs4Q0FBa0I7bUNBQVRFLEtBQUtVLEVBQUU7NEJBQzFCOzRCQUVBLHFCQUNFLHFCQUFDQywwQkFBWTtnQ0FDWHJDLGdCQUFnQkE7Z0NBRWhCc0MsT0FBT1o7Z0NBQ1BILE9BQU9qQjtnQ0FDUDRCLE9BQU9BO2dDQUNQM0IsU0FBU0E7Z0NBQ1RnQyxnQkFBZ0J0QyxDQUFBQSxVQUFXQyxXQUFXRDsrQkFMakN5QixLQUFLVSxFQUFFO3dCQVFsQjt3QkFDQUksT0FBTy9CO3dCQUNQZ0MsU0FBUzlCO3dCQUNURCxlQUFlQTt3QkFDZkUsYUFBYUE7Ozs7OztBQU8zQiJ9