02b4d029ffda9fcfaa1aaf9d81c6b79d
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "blankLine", {
    enumerable: true,
    get: function() {
        return blankLine;
    }
});
const _micromarkfactoryspace = require("micromark-factory-space");
const _micromarkutilcharacter = require("micromark-util-character");
const blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
};
/**
 * @this {TokenizeContext}
 * @type {Tokenizer}
 */ function tokenizeBlankLine(effects, ok, nok) {
    return start;
    /**
   * Start of blank line.
   *
   * > üëâ **Note**: `‚ê†` represents a space character.
   *
   * ```markdown
   * > | ‚ê†‚ê†‚êä
   *     ^
   * > | ‚êä
   *     ^
   * ```
   *
   * @type {State}
   */ function start(code) {
        return (0, _micromarkutilcharacter.markdownSpace)(code) ? (0, _micromarkfactoryspace.factorySpace)(effects, after, 'linePrefix')(code) : after(code);
    }
    /**
   * At eof/eol, after optional whitespace.
   *
   * > üëâ **Note**: `‚ê†` represents a space character.
   *
   * ```markdown
   * > | ‚ê†‚ê†‚êä
   *       ^
   * > | ‚êä
   *     ^
   * ```
   *
   * @type {State}
   */ function after(code) {
        return code === null || (0, _micromarkutilcharacter.markdownLineEnding)(code) ? ok(code) : nok(code);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2xpYi9ibGFuay1saW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgYmxhbmtMaW5lID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVCbGFua0xpbmUsXG4gIHBhcnRpYWw6IHRydWVcbn1cblxuLyoqXG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqL1xuZnVuY3Rpb24gdG9rZW5pemVCbGFua0xpbmUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKipcbiAgICogU3RhcnQgb2YgYmxhbmsgbGluZS5cbiAgICpcbiAgICogPiDwn5GJICoqTm90ZSoqOiBg4pCgYCByZXByZXNlbnRzIGEgc3BhY2UgY2hhcmFjdGVyLlxuICAgKlxuICAgKiBgYGBtYXJrZG93blxuICAgKiA+IHwg4pCg4pCg4pCKXG4gICAqICAgICBeXG4gICAqID4gfCDikIpcbiAgICogICAgIF5cbiAgICogYGBgXG4gICAqXG4gICAqIEB0eXBlIHtTdGF0ZX1cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25TcGFjZShjb2RlKVxuICAgICAgPyBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsICdsaW5lUHJlZml4JykoY29kZSlcbiAgICAgIDogYWZ0ZXIoY29kZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBdCBlb2YvZW9sLCBhZnRlciBvcHRpb25hbCB3aGl0ZXNwYWNlLlxuICAgKlxuICAgKiA+IPCfkYkgKipOb3RlKio6IGDikKBgIHJlcHJlc2VudHMgYSBzcGFjZSBjaGFyYWN0ZXIuXG4gICAqXG4gICAqIGBgYG1hcmtkb3duXG4gICAqID4gfCDikKDikKDikIpcbiAgICogICAgICAgXlxuICAgKiA+IHwg4pCKXG4gICAqICAgICBeXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7U3RhdGV9XG4gICAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpID8gb2soY29kZSkgOiBub2soY29kZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImJsYW5rTGluZSIsInRva2VuaXplIiwidG9rZW5pemVCbGFua0xpbmUiLCJwYXJ0aWFsIiwiZWZmZWN0cyIsIm9rIiwibm9rIiwic3RhcnQiLCJjb2RlIiwibWFya2Rvd25TcGFjZSIsImZhY3RvcnlTcGFjZSIsImFmdGVyIiwibWFya2Rvd25MaW5lRW5kaW5nIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDOzs7OytCQUtZQTs7O2VBQUFBOzs7dUNBSGM7d0NBQ3FCO0FBRXpDLE1BQU1BLFlBQVk7SUFDdkJDLFVBQVVDO0lBQ1ZDLFNBQVM7QUFDWDtBQUVBOzs7Q0FHQyxHQUNELFNBQVNELGtCQUFrQkUsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7SUFDekMsT0FBT0M7SUFFUDs7Ozs7Ozs7Ozs7OztHQWFDLEdBQ0QsU0FBU0EsTUFBTUMsSUFBSTtRQUNqQixPQUFPQyxJQUFBQSxxQ0FBYSxFQUFDRCxRQUNqQkUsSUFBQUEsbUNBQVksRUFBQ04sU0FBU08sT0FBTyxjQUFjSCxRQUMzQ0csTUFBTUg7SUFDWjtJQUVBOzs7Ozs7Ozs7Ozs7O0dBYUMsR0FDRCxTQUFTRyxNQUFNSCxJQUFJO1FBQ2pCLE9BQU9BLFNBQVMsUUFBUUksSUFBQUEsMENBQWtCLEVBQUNKLFFBQVFILEdBQUdHLFFBQVFGLElBQUlFO0lBQ3BFO0FBQ0YifQ==