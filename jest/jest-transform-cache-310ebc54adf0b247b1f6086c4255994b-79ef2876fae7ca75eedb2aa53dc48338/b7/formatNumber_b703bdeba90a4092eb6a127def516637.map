{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/utils/src/lib/formatNumber.ts"],"sourcesContent":["const formatNumber = (\n  value: number | bigint,\n  locale?: string | Array<string>,\n  options?: Intl.NumberFormatOptions | undefined,\n) => new Intl.NumberFormat(locale, options).format(value)\n\nconst formatNumberShort = (\n  value: number | bigint,\n  locale?: string | Array<string>,\n  options?: Intl.NumberFormatOptions,\n): string => {\n  const num = typeof value === \"bigint\" ? Number(value) : value\n  const absNum = Math.abs(num)\n\n  if (absNum >= 1_000_000_000) {\n    return `${formatNumber(num / 1_000_000_000, locale, options)}B`\n  }\n\n  if (absNum >= 1_000_000) {\n    return `${formatNumber(num / 1_000_000, locale, options)}M`\n  }\n\n  return formatNumber(num, locale, options)\n}\n\nexport { formatNumber, formatNumberShort }\n"],"names":["formatNumber","formatNumberShort","value","locale","options","Intl","NumberFormat","format","num","Number","absNum","Math","abs"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAyBSA,YAAY;eAAZA;;IAAcC,iBAAiB;eAAjBA;;;AAzBvB,MAAMD,eAAe,CACnBE,OACAC,QACAC,UACG,IAAIC,KAAKC,YAAY,CAACH,QAAQC,SAASG,MAAM,CAACL;AAEnD,MAAMD,oBAAoB,CACxBC,OACAC,QACAC;IAEA,MAAMI,MAAM,OAAON,UAAU,WAAWO,OAAOP,SAASA;IACxD,MAAMQ,SAASC,KAAKC,GAAG,CAACJ;IAExB,IAAIE,UAAU,YAAe;QAC3B,OAAO,CAAC,EAAEV,aAAaQ,MAAM,YAAeL,QAAQC,SAAS,CAAC,CAAC;IACjE;IAEA,IAAIM,UAAU,SAAW;QACvB,OAAO,CAAC,EAAEV,aAAaQ,MAAM,SAAWL,QAAQC,SAAS,CAAC,CAAC;IAC7D;IAEA,OAAOJ,aAAaQ,KAAKL,QAAQC;AACnC"}