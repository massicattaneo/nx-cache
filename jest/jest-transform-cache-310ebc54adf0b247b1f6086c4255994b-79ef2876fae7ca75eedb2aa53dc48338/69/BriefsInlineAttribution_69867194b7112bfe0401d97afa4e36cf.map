{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/brief/src/components/BriefReport/BriefReportSection/BriefsInlineAttribution.tsx"],"sourcesContent":["import { MouseEvent, createElement, useState } from \"react\"\nimport { REDIRECT_PROVIDERS } from \"@rp/common/settings\"\nimport { INLINE_ATTRIBUTION_REGEX } from \"@rp/common/utils\"\nimport { getRefList } from \"@rp/react/common/chat\"\nimport { BriefSources } from \"@rp/react/tanstack-api/brief\"\nimport {\n  GroupedInlineAttributionList,\n  InlineAttributionArrowButton,\n  InlineAttributionListModal,\n  groupInlineAttributions,\n} from \"@rp/react/web/chat\"\nimport { useDeviceInfo, useHashParams } from \"@rp/react/web/common/hooks\"\nimport { useDocumentViewerData } from \"@rp/react/web/common/providers\"\nimport { getUrlWithTextFragment } from \"@rp/web/utils\"\nimport { transformSourceIntoChunk } from \"./transformSourceIntoChunk\"\n\ntype RendererFuncProps = {\n  sources: BriefSources\n}\n\nconst briefsInlineAttributionRenderer =\n  ({ sources }: RendererFuncProps) =>\n  ({ children, className }: { className?: string; children?: React.ReactNode }) => {\n    if (typeof children === \"string\" && children.match(INLINE_ATTRIBUTION_REGEX)) {\n      return <BriefsInlineAttribution refId={children} sources={sources} />\n    }\n\n    const code = createElement(\"code\", className ? { className: className } : null, children)\n    return createElement(\"code\", {}, code)\n  }\n\ntype Props = {\n  refId: string\n  sources: BriefSources\n}\n\nconst BriefsInlineAttribution = ({ refId, sources }: Props) => {\n  const { setDocumentData } = useDocumentViewerData()\n  const { isMobile } = useDeviceInfo()\n  const [, setHashParams] = useHashParams()\n  const [showTooltip, setShowTooltip] = useState(false)\n\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const listData = getRefList(refId)\n  let groups: GroupedInlineAttributionList | undefined = undefined\n\n  if (listData !== null) {\n    const attributionData = listData.map(item => {\n      const chunk = sources[item.id]\n      if (!chunk || item.type !== \"CQS\") {\n        return undefined\n      }\n\n      const url = chunk.url\n\n      return {\n        type: \"CQS\" as const,\n        hd: chunk.headline,\n        text: chunk.text,\n        sourceName: chunk.sourceName ?? \"Unknown Source\",\n        language: chunk.language ?? \"English\",\n        ts: chunk.ts,\n        documentScope: chunk.documentScope,\n        contentType: chunk.contentType,\n        srcKey: chunk.sourceKey,\n        url: url ?? null,\n        documentId: chunk.documentId,\n        rpProviderId: chunk.rpProviderId,\n        relatedSource: {\n          id: chunk.documentId,\n          hd: chunk.headline,\n          imageUrls: chunk.imageUrl ? [chunk.imageUrl] : null,\n          name: chunk.sourceName,\n        },\n        onClick:\n          url && REDIRECT_PROVIDERS.includes(chunk.rpProviderId ?? \"\")\n            ? () => {\n                window.open(\n                  getUrlWithTextFragment(url, chunk.text),\n                  \"_blank\",\n                  \"noopener,noreferrer\",\n                )\n                setShowTooltip(false)\n              }\n            : () => {\n                setDocumentData({\n                  documentId: chunk.documentId,\n                  documentScope: \"news\",\n                  language: \"English\",\n                  chunks: [transformSourceIntoChunk(chunk)],\n                  startingChunkId: chunk.chunkId,\n                })\n\n                chunk.documentScope === \"files\"\n                  ? setHashParams({ document: chunk.documentId, private: \"true\" })\n                  : setHashParams({ document: chunk.documentId })\n              },\n      }\n    })\n\n    groups = groupInlineAttributions(attributionData)\n  }\n\n  if (groups === undefined || groups.length === 0) {\n    return \"\"\n  }\n\n  const { onClick } = groups[0].data[0]\n\n  const onButtonClick = (ev: MouseEvent) => {\n    if (isMobile) {\n      setIsModalOpen(true)\n    } else {\n      onClick(ev)\n      setShowTooltip(false)\n    }\n  }\n\n  return (\n    <InlineAttributionListModal\n      attributions={groups}\n      closeModal={() => setIsModalOpen(false)}\n      isOpen={isModalOpen}\n      showTooltip={showTooltip}\n      onOpenTooltip={() => {\n        setShowTooltip(true)\n      }}\n      onCloseTooltip={() => setShowTooltip(false)}\n    >\n      <InlineAttributionArrowButton onClick={onButtonClick} isModalOpen={isModalOpen} />\n    </InlineAttributionListModal>\n  )\n}\n\nexport { briefsInlineAttributionRenderer }\n"],"names":["briefsInlineAttributionRenderer","sources","children","className","match","INLINE_ATTRIBUTION_REGEX","BriefsInlineAttribution","refId","code","createElement","setDocumentData","useDocumentViewerData","isMobile","useDeviceInfo","setHashParams","useHashParams","showTooltip","setShowTooltip","useState","isModalOpen","setIsModalOpen","listData","getRefList","groups","undefined","attributionData","map","item","chunk","id","type","url","hd","headline","text","sourceName","language","ts","documentScope","contentType","srcKey","sourceKey","documentId","rpProviderId","relatedSource","imageUrls","imageUrl","name","onClick","REDIRECT_PROVIDERS","includes","window","open","getUrlWithTextFragment","chunks","transformSourceIntoChunk","startingChunkId","chunkId","document","private","groupInlineAttributions","length","data","onButtonClick","ev","InlineAttributionListModal","attributions","closeModal","isOpen","onOpenTooltip","onCloseTooltip","InlineAttributionArrowButton"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}