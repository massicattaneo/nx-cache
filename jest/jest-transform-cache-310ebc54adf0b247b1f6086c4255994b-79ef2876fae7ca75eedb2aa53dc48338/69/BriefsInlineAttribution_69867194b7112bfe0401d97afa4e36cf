c786f968ba12927fbc6c32dcfba1943e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "briefsInlineAttributionRenderer", {
    enumerable: true,
    get: function() {
        return briefsInlineAttributionRenderer;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _chat = require("@rp/react/common/chat");
const _chat1 = require("@rp/react/web/chat");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _utils1 = require("@rp/web/utils");
const _transformSourceIntoChunk = require("./transformSourceIntoChunk");
const briefsInlineAttributionRenderer = ({ sources })=>({ children, className })=>{
        if (typeof children === "string" && children.match(_utils.INLINE_ATTRIBUTION_REGEX)) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(BriefsInlineAttribution, {
                refId: children,
                sources: sources
            });
        }
        const code = /*#__PURE__*/ (0, _react.createElement)("code", className ? {
            className: className
        } : null, children);
        return /*#__PURE__*/ (0, _react.createElement)("code", {}, code);
    };
const BriefsInlineAttribution = ({ refId, sources })=>{
    const { setDocumentData } = (0, _providers.useDocumentViewerData)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [, setHashParams] = (0, _hooks.useHashParams)();
    const [showTooltip, setShowTooltip] = (0, _react.useState)(false);
    const [isModalOpen, setIsModalOpen] = (0, _react.useState)(false);
    const listData = (0, _chat.getRefList)(refId);
    let groups = undefined;
    if (listData !== null) {
        const attributionData = listData.map((item)=>{
            const chunk = sources[item.id];
            if (!chunk || item.type !== "CQS") {
                return undefined;
            }
            const url = chunk.url;
            var _chunk_sourceName, _chunk_language, _chunk_rpProviderId;
            return {
                type: "CQS",
                hd: chunk.headline,
                text: chunk.text,
                sourceName: (_chunk_sourceName = chunk.sourceName) !== null && _chunk_sourceName !== void 0 ? _chunk_sourceName : "Unknown Source",
                language: (_chunk_language = chunk.language) !== null && _chunk_language !== void 0 ? _chunk_language : "English",
                ts: chunk.ts,
                documentScope: chunk.documentScope,
                contentType: chunk.contentType,
                srcKey: chunk.sourceKey,
                url: url !== null && url !== void 0 ? url : null,
                documentId: chunk.documentId,
                rpProviderId: chunk.rpProviderId,
                relatedSource: {
                    id: chunk.documentId,
                    hd: chunk.headline,
                    imageUrls: chunk.imageUrl ? [
                        chunk.imageUrl
                    ] : null,
                    name: chunk.sourceName
                },
                onClick: url && _settings.REDIRECT_PROVIDERS.includes((_chunk_rpProviderId = chunk.rpProviderId) !== null && _chunk_rpProviderId !== void 0 ? _chunk_rpProviderId : "") ? ()=>{
                    window.open((0, _utils1.getUrlWithTextFragment)(url, chunk.text), "_blank", "noopener,noreferrer");
                    setShowTooltip(false);
                } : ()=>{
                    setDocumentData({
                        documentId: chunk.documentId,
                        documentScope: "news",
                        language: "English",
                        chunks: [
                            (0, _transformSourceIntoChunk.transformSourceIntoChunk)(chunk)
                        ],
                        startingChunkId: chunk.chunkId
                    });
                    chunk.documentScope === "files" ? setHashParams({
                        document: chunk.documentId,
                        private: "true"
                    }) : setHashParams({
                        document: chunk.documentId
                    });
                }
            };
        });
        groups = (0, _chat1.groupInlineAttributions)(attributionData);
    }
    if (groups === undefined || groups.length === 0) {
        return "";
    }
    const { onClick } = groups[0].data[0];
    const onButtonClick = (ev)=>{
        if (isMobile) {
            setIsModalOpen(true);
        } else {
            onClick(ev);
            setShowTooltip(false);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat1.InlineAttributionListModal, {
        attributions: groups,
        closeModal: ()=>setIsModalOpen(false),
        isOpen: isModalOpen,
        showTooltip: showTooltip,
        onOpenTooltip: ()=>{
            setShowTooltip(true);
        },
        onCloseTooltip: ()=>setShowTooltip(false),
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_chat1.InlineAttributionArrowButton, {
            onClick: onButtonClick,
            isModalOpen: isModalOpen
        })
    });
};

//# sourceMappingURL=data:application/json;base64,