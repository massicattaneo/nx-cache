0d3e9e02f4a25046aa05f26575a82ebb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "userDataChatsProcedures", {
    enumerable: true,
    get: function() {
        return userDataChatsProcedures;
    }
});
const _zod = require("zod");
const _contracts = require("@rp/common/contracts");
const _server = require("@trpc/server");
const _generateChat = require("../../../../database/generators/generateChat");
const _bigdataapiprocedure = require("../../bigdata-api-procedure");
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const userDataChatsProcedures = {
    list: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/user-data/chats"
        }
    }).input(_contracts.bigdataSchemas.st_user_chats_ListUserChatsRequest).output(_zod.z.union([
        _contracts.bigdataSchemas.st_user_chats_ListUserChatResponse,
        _contracts.bigdataSchemas.st_user_chats_PaginatedListUserChatResponse
    ])).query(async ({ ctx, input })=>{
        const items = await ctx.db.collection("chats").find();
        if (input === null || input === void 0 ? void 0 : input.limit) return {
            items
        };
        return items;
    }),
    create: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/chats"
        }
    }).input(_contracts.bigdataSchemas.st_user_chats_CreateUserChatWithoutUserId).output(_contracts.bigdataSchemas.st_user_chats_UserChatResponse).mutation(({ ctx, input })=>ctx.db.collection("chats").insertOne((0, _generateChat.generateChat)(input))),
    id: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "GET",
            path: "/user-data/chats/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_contracts.bigdataSchemas.st_user_chats_UserChatResponse).query(async ({ ctx, input })=>{
        const chat = await ctx.db.collection("chats").findOne({
            id: input.id
        });
        if (!chat) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return chat;
    }),
    patch: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "PATCH",
            path: "/user-data/chats/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string(),
        name: _zod.z.string().optional()
    })).output(_contracts.bigdataSchemas.st_user_chats_UserChatUpdatedResponse).mutation(async (opts)=>{
        const _opts_input = opts.input, { id } = _opts_input, chat = _object_without_properties(_opts_input, [
            "id"
        ]);
        const ret = await opts.ctx.db.collection("chats").updateOne({
            id
        }, chat);
        if (!ret) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return ret;
    }),
    delete: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "DELETE",
            path: "/user-data/chats/:id"
        }
    }).input(_zod.z.object({
        id: _zod.z.string()
    })).output(_zod.z.object({
        id: _zod.z.string()
    })).mutation(async (opts)=>{
        await opts.ctx.db.collection("chats").deleteOne({
            id: opts.input.id
        });
        return {
            id: opts.input.id
        };
    }),
    share: _bigdataapiprocedure.bigdataApiProcedure.meta({
        openapi: {
            method: "POST",
            path: "/user-data/chats/:id/share"
        }
    }).input(_zod.z.object({
        id: _zod.z.string(),
        public: _zod.z.boolean()
    })).output(_contracts.bigdataSchemas.st_user_chats_UserChatSharedResponse).mutation(async (opts)=>{
        const chat = await opts.ctx.db.collection("chats").updateOne({
            id: opts.input.id
        }, {
            isPublic: opts.input.public
        });
        if (!chat) throw new _server.TRPCError({
            code: "NOT_FOUND"
        });
        return chat;
    })
};

//# sourceMappingURL=data:application/json;base64,