86cc8ea18099986db2d0254ee76c28a3
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').List} List
 * @typedef {import('../state.js').State} State
 */ // Make VS Code show references to the above types.
'';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "list", {
    enumerable: true,
    get: function() {
        return list;
    }
});
function list(state, node) {
    /** @type {Properties} */ const properties = {};
    const results = state.all(node);
    let index = -1;
    if (typeof node.start === 'number' && node.start !== 1) {
        properties.start = node.start;
    }
    // Like GitHub, add a class for custom styling.
    while(++index < results.length){
        const child = results[index];
        if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {
            properties.className = [
                'contains-task-list'
            ];
            break;
        }
    }
    /** @type {Element} */ const result = {
        type: 'element',
        tagName: node.ordered ? 'ol' : 'ul',
        properties,
        children: state.wrap(results, true)
    };
    state.patch(node, result);
    return state.applyData(node, result);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTGlzdH0gTGlzdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vLyBNYWtlIFZTIENvZGUgc2hvdyByZWZlcmVuY2VzIHRvIHRoZSBhYm92ZSB0eXBlcy5cbicnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgbGlzdGAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtMaXN0fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuICBjb25zdCByZXN1bHRzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgaWYgKHR5cGVvZiBub2RlLnN0YXJ0ID09PSAnbnVtYmVyJyAmJiBub2RlLnN0YXJ0ICE9PSAxKSB7XG4gICAgcHJvcGVydGllcy5zdGFydCA9IG5vZGUuc3RhcnRcbiAgfVxuXG4gIC8vIExpa2UgR2l0SHViLCBhZGQgYSBjbGFzcyBmb3IgY3VzdG9tIHN0eWxpbmcuXG4gIHdoaWxlICgrK2luZGV4IDwgcmVzdWx0cy5sZW5ndGgpIHtcbiAgICBjb25zdCBjaGlsZCA9IHJlc3VsdHNbaW5kZXhdXG5cbiAgICBpZiAoXG4gICAgICBjaGlsZC50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICAgIGNoaWxkLnRhZ05hbWUgPT09ICdsaScgJiZcbiAgICAgIGNoaWxkLnByb3BlcnRpZXMgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkoY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUpICYmXG4gICAgICBjaGlsZC5wcm9wZXJ0aWVzLmNsYXNzTmFtZS5pbmNsdWRlcygndGFzay1saXN0LWl0ZW0nKVxuICAgICkge1xuICAgICAgcHJvcGVydGllcy5jbGFzc05hbWUgPSBbJ2NvbnRhaW5zLXRhc2stbGlzdCddXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiBub2RlLm9yZGVyZWQgPyAnb2wnIDogJ3VsJyxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHJlc3VsdHMsIHRydWUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiJdLCJuYW1lcyI6WyJsaXN0Iiwic3RhdGUiLCJub2RlIiwicHJvcGVydGllcyIsInJlc3VsdHMiLCJhbGwiLCJpbmRleCIsInN0YXJ0IiwibGVuZ3RoIiwiY2hpbGQiLCJ0eXBlIiwidGFnTmFtZSIsIkFycmF5IiwiaXNBcnJheSIsImNsYXNzTmFtZSIsImluY2x1ZGVzIiwicmVzdWx0Iiwib3JkZXJlZCIsImNoaWxkcmVuIiwid3JhcCIsInBhdGNoIiwiYXBwbHlEYXRhIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FFRCxtREFBbUQ7QUFDbkQ7Ozs7OytCQVlnQkE7OztlQUFBQTs7O0FBQVQsU0FBU0EsS0FBS0MsS0FBSyxFQUFFQyxJQUFJO0lBQzlCLHVCQUF1QixHQUN2QixNQUFNQyxhQUFhLENBQUM7SUFDcEIsTUFBTUMsVUFBVUgsTUFBTUksR0FBRyxDQUFDSDtJQUMxQixJQUFJSSxRQUFRLENBQUM7SUFFYixJQUFJLE9BQU9KLEtBQUtLLEtBQUssS0FBSyxZQUFZTCxLQUFLSyxLQUFLLEtBQUssR0FBRztRQUN0REosV0FBV0ksS0FBSyxHQUFHTCxLQUFLSyxLQUFLO0lBQy9CO0lBRUEsK0NBQStDO0lBQy9DLE1BQU8sRUFBRUQsUUFBUUYsUUFBUUksTUFBTSxDQUFFO1FBQy9CLE1BQU1DLFFBQVFMLE9BQU8sQ0FBQ0UsTUFBTTtRQUU1QixJQUNFRyxNQUFNQyxJQUFJLEtBQUssYUFDZkQsTUFBTUUsT0FBTyxLQUFLLFFBQ2xCRixNQUFNTixVQUFVLElBQ2hCUyxNQUFNQyxPQUFPLENBQUNKLE1BQU1OLFVBQVUsQ0FBQ1csU0FBUyxLQUN4Q0wsTUFBTU4sVUFBVSxDQUFDVyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxtQkFDcEM7WUFDQVosV0FBV1csU0FBUyxHQUFHO2dCQUFDO2FBQXFCO1lBQzdDO1FBQ0Y7SUFDRjtJQUVBLG9CQUFvQixHQUNwQixNQUFNRSxTQUFTO1FBQ2JOLE1BQU07UUFDTkMsU0FBU1QsS0FBS2UsT0FBTyxHQUFHLE9BQU87UUFDL0JkO1FBQ0FlLFVBQVVqQixNQUFNa0IsSUFBSSxDQUFDZixTQUFTO0lBQ2hDO0lBQ0FILE1BQU1tQixLQUFLLENBQUNsQixNQUFNYztJQUNsQixPQUFPZixNQUFNb0IsU0FBUyxDQUFDbkIsTUFBTWM7QUFDL0IifQ==