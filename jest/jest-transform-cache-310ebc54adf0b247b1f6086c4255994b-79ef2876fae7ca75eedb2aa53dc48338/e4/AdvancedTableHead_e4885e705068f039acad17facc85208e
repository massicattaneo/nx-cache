c34f65afaaad23b1c9eb2910584ab3ee
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AdvancedTableHead", {
    enumerable: true,
    get: function() {
        return AdvancedTableHead;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _core = require("@rp/react/web/mui/core");
const _AdvancedTablestyles = require("./AdvancedTable.styles");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const HubTableHeadStyled = (0, _core.styled)("div")(()=>({
        [`& > span > span`]: {
            border: 0,
            clip: "rect(0 0 0 0)",
            height: 1,
            margin: -1,
            overflow: "hidden",
            padding: 0,
            position: "absolute",
            top: 20,
            width: 1
        }
    }));
const AdvancedTableHead = /*#__PURE__*/ _react.default.forwardRef(({ order, orderBy, onRequestSort, columns, style }, ref)=>{
    const createSortHandler = (cellId)=>(event)=>{
            if (onRequestSort) {
                onRequestSort(event, cellId);
            }
        };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableHead, {
        ref: ref,
        style: style,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableRow, {
            children: columns.map((headCell)=>{
                if (headCell.renderCell) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Fragment, {
                        children: headCell.renderCell()
                    }, headCell.id);
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AdvancedTablestyles.AdvancedTableHeadCell, {
                    sortDirection: orderBy === headCell.id ? order : false,
                    size: "small",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(HubTableHeadStyled, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.TableSortLabel, {
                            active: orderBy === headCell.id,
                            direction: orderBy === headCell.id ? order : "asc",
                            onClick: createSortHandler(headCell.id),
                            children: [
                                headCell.label,
                                orderBy === headCell.id ? /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                    children: order === "desc" ? "sorted descending" : "sorted ascending"
                                }) : null
                            ]
                        })
                    })
                }, headCell.id);
            })
        })
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvQWR2YW5jZWRUYWJsZS9BZHZhbmNlZFRhYmxlSGVhZC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IEFkdmFuY2VkVGFibGVDb2x1bW4gfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vdHlwZXNcIlxuaW1wb3J0IHsgVGFibGVIZWFkLCBUYWJsZVJvdywgVGFibGVTb3J0TGFiZWwsIHN0eWxlZCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcbmltcG9ydCB7IEFkdmFuY2VkVGFibGVIZWFkQ2VsbCB9IGZyb20gXCIuL0FkdmFuY2VkVGFibGUuc3R5bGVzXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgb3JkZXI6IFwiYXNjXCIgfCBcImRlc2NcIlxuICBvcmRlckJ5OiBzdHJpbmdcbiAgY29sdW1uczogQXJyYXk8QWR2YW5jZWRUYWJsZUNvbHVtbj5cbiAgb25SZXF1ZXN0U29ydD86IChldmVudDogUmVhY3QuTW91c2VFdmVudCwgaWQ6IHN0cmluZykgPT4gdm9pZFxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcbn1cblxuY29uc3QgSHViVGFibGVIZWFkU3R5bGVkID0gc3R5bGVkKFwiZGl2XCIpKCgpID0+ICh7XG4gIFtgJiA+IHNwYW4gPiBzcGFuYF06IHtcbiAgICBib3JkZXI6IDAsXG4gICAgY2xpcDogXCJyZWN0KDAgMCAwIDApXCIsXG4gICAgaGVpZ2h0OiAxLFxuICAgIG1hcmdpbjogLTEsXG4gICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgIHRvcDogMjAsXG4gICAgd2lkdGg6IDEsXG4gIH0sXG59KSlcblxuY29uc3QgQWR2YW5jZWRUYWJsZUhlYWQgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50LCBQcm9wcz4oXG4gICh7IG9yZGVyLCBvcmRlckJ5LCBvblJlcXVlc3RTb3J0LCBjb2x1bW5zLCBzdHlsZSB9LCByZWYpID0+IHtcbiAgICBjb25zdCBjcmVhdGVTb3J0SGFuZGxlciA9IChjZWxsSWQ6IHN0cmluZykgPT4gKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiB7XG4gICAgICBpZiAob25SZXF1ZXN0U29ydCkge1xuICAgICAgICBvblJlcXVlc3RTb3J0KGV2ZW50LCBjZWxsSWQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUYWJsZUhlYWQgcmVmPXtyZWZ9IHN0eWxlPXtzdHlsZX0+XG4gICAgICAgIDxUYWJsZVJvdz5cbiAgICAgICAgICB7Y29sdW1ucy5tYXAoaGVhZENlbGwgPT4ge1xuICAgICAgICAgICAgaWYgKGhlYWRDZWxsLnJlbmRlckNlbGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxGcmFnbWVudCBrZXk9e2hlYWRDZWxsLmlkfT57aGVhZENlbGwucmVuZGVyQ2VsbCgpfTwvRnJhZ21lbnQ+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8QWR2YW5jZWRUYWJsZUhlYWRDZWxsXG4gICAgICAgICAgICAgICAga2V5PXtoZWFkQ2VsbC5pZH1cbiAgICAgICAgICAgICAgICBzb3J0RGlyZWN0aW9uPXtvcmRlckJ5ID09PSBoZWFkQ2VsbC5pZCA/IG9yZGVyIDogZmFsc2V9XG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxIdWJUYWJsZUhlYWRTdHlsZWQ+XG4gICAgICAgICAgICAgICAgICA8VGFibGVTb3J0TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlPXtvcmRlckJ5ID09PSBoZWFkQ2VsbC5pZH1cbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPXtvcmRlckJ5ID09PSBoZWFkQ2VsbC5pZCA/IG9yZGVyIDogXCJhc2NcIn1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y3JlYXRlU29ydEhhbmRsZXIoaGVhZENlbGwuaWQpfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7aGVhZENlbGwubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIHtvcmRlckJ5ID09PSBoZWFkQ2VsbC5pZCA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57b3JkZXIgPT09IFwiZGVzY1wiID8gXCJzb3J0ZWQgZGVzY2VuZGluZ1wiIDogXCJzb3J0ZWQgYXNjZW5kaW5nXCJ9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgIDwvVGFibGVTb3J0TGFiZWw+XG4gICAgICAgICAgICAgICAgPC9IdWJUYWJsZUhlYWRTdHlsZWQ+XG4gICAgICAgICAgICAgIDwvQWR2YW5jZWRUYWJsZUhlYWRDZWxsPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pfVxuICAgICAgICA8L1RhYmxlUm93PlxuICAgICAgPC9UYWJsZUhlYWQ+XG4gICAgKVxuICB9LFxuKVxuXG5leHBvcnQgeyBBZHZhbmNlZFRhYmxlSGVhZCB9XG4iXSwibmFtZXMiOlsiQWR2YW5jZWRUYWJsZUhlYWQiLCJIdWJUYWJsZUhlYWRTdHlsZWQiLCJzdHlsZWQiLCJib3JkZXIiLCJjbGlwIiwiaGVpZ2h0IiwibWFyZ2luIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwicG9zaXRpb24iLCJ0b3AiLCJ3aWR0aCIsIlJlYWN0IiwiZm9yd2FyZFJlZiIsIm9yZGVyIiwib3JkZXJCeSIsIm9uUmVxdWVzdFNvcnQiLCJjb2x1bW5zIiwic3R5bGUiLCJyZWYiLCJjcmVhdGVTb3J0SGFuZGxlciIsImNlbGxJZCIsImV2ZW50IiwiVGFibGVIZWFkIiwiVGFibGVSb3ciLCJtYXAiLCJoZWFkQ2VsbCIsInJlbmRlckNlbGwiLCJGcmFnbWVudCIsImlkIiwiQWR2YW5jZWRUYWJsZUhlYWRDZWxsIiwic29ydERpcmVjdGlvbiIsInNpemUiLCJUYWJsZVNvcnRMYWJlbCIsImFjdGl2ZSIsImRpcmVjdGlvbiIsIm9uQ2xpY2siLCJsYWJlbCIsInNwYW4iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBcUVTQTs7O2VBQUFBOzs7OytEQXJFdUI7c0JBRTRCO3FDQUN0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVXRDLE1BQU1DLHFCQUFxQkMsSUFBQUEsWUFBTSxFQUFDLE9BQU8sSUFBTyxDQUFBO1FBQzlDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFO1lBQ25CQyxRQUFRO1lBQ1JDLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxRQUFRLENBQUM7WUFDVEMsVUFBVTtZQUNWQyxTQUFTO1lBQ1RDLFVBQVU7WUFDVkMsS0FBSztZQUNMQyxPQUFPO1FBQ1Q7SUFDRixDQUFBO0FBRUEsTUFBTVgsa0NBQW9CWSxjQUFLLENBQUNDLFVBQVUsQ0FDeEMsQ0FBQyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsYUFBYSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRSxFQUFFQztJQUNsRCxNQUFNQyxvQkFBb0IsQ0FBQ0MsU0FBbUIsQ0FBQ0M7WUFDN0MsSUFBSU4sZUFBZTtnQkFDakJBLGNBQWNNLE9BQU9EO1lBQ3ZCO1FBQ0Y7SUFFQSxxQkFDRSxxQkFBQ0UsZUFBUztRQUFDSixLQUFLQTtRQUFLRCxPQUFPQTtrQkFDMUIsY0FBQSxxQkFBQ00sY0FBUTtzQkFDTlAsUUFBUVEsR0FBRyxDQUFDQyxDQUFBQTtnQkFDWCxJQUFJQSxTQUFTQyxVQUFVLEVBQUU7b0JBQ3ZCLHFCQUFPLHFCQUFDQyxlQUFRO2tDQUFvQkYsU0FBU0MsVUFBVTt1QkFBakNELFNBQVNHLEVBQUU7Z0JBQ25DO2dCQUNBLHFCQUNFLHFCQUFDQywwQ0FBcUI7b0JBRXBCQyxlQUFlaEIsWUFBWVcsU0FBU0csRUFBRSxHQUFHZixRQUFRO29CQUNqRGtCLE1BQUs7OEJBRUwsY0FBQSxxQkFBQy9CO2tDQUNDLGNBQUEsc0JBQUNnQyxvQkFBYzs0QkFDYkMsUUFBUW5CLFlBQVlXLFNBQVNHLEVBQUU7NEJBQy9CTSxXQUFXcEIsWUFBWVcsU0FBU0csRUFBRSxHQUFHZixRQUFROzRCQUM3Q3NCLFNBQVNoQixrQkFBa0JNLFNBQVNHLEVBQUU7O2dDQUVyQ0gsU0FBU1csS0FBSztnQ0FDZHRCLFlBQVlXLFNBQVNHLEVBQUUsaUJBQ3RCLHFCQUFDUzs4Q0FBTXhCLFVBQVUsU0FBUyxzQkFBc0I7cUNBQzlDOzs7O21CQWJIWSxTQUFTRyxFQUFFO1lBa0J0Qjs7O0FBSVIifQ==