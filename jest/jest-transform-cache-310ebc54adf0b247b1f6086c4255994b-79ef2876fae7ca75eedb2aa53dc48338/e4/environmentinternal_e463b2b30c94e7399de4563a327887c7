646bec0e133862b0df6a67007354e125
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "environment", {
    enumerable: true,
    get: function() {
        return environment;
    }
});
const _environmentinternal = require("./common/environment.internal");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var _process_env_NX_PUBLIC_HOST;
const proxyHost = (_process_env_NX_PUBLIC_HOST = process.env["NX_PUBLIC_HOST"]) !== null && _process_env_NX_PUBLIC_HOST !== void 0 ? _process_env_NX_PUBLIC_HOST : "localhost";
const proxyOrigin = `http://${proxyHost}:3000`;
const environment = _object_spread_props(_object_spread({}, _environmentinternal.environment), {
    flags: {
        enableDevTools: true,
        enableFeedbackMode: true,
        enablePortfolioUpload: true,
        enableMSW: false,
        enableQaaTools: false,
        enableChatMetrics: false,
        enableUseMasterRouter: true,
        enableReduceTimeToShowNativeRateModal: false,
        enableCommunityLink: false,
        enableAgentMode: true,
        enableLegalConsentModal: true,
        search: false,
        file: true,
        watchlist: true,
        brief: true,
        chat: true,
        enableFreemium: true,
        enableSourceFiles: true,
        enableSourceEarningsCalls: true,
        enableSourceRegulatoryFilings: true,
        enableSourceEstimates: true,
        enableSourceJobAnalytics: true,
        enableSourcePricingData: true,
        enableSourceSentiment: true,
        enableSourceCrunchbase: true,
        enableSourceKnowledgeGraph: true,
        enableSourceEtfHoldings: true,
        enableSourceMarketIntelligence: true,
        enableSourceFactsetTranscripts: true,
        enableSourcePricingCulture: true,
        enableSourceQuartrPro: true,
        enableSourceCryptoMarkets: true,
        enableSourceMiddleEastMarkets: true,
        enableSourceFinancialTimes: false,
        enableSourceExpertNetworks: true,
        enablePDFHighlight: false,
        enableFilePageV2: false,
        enableCustomInstructions: true
    },
    app: {
        title: "Bigdata",
        url: "http://localhost:3000",
        apiUrl: process.env["NX_PUBLIC_LOCAL_PROXY"] ? `${proxyOrigin}/bigdata-api` : "https://api.dev.bigdata.com",
        proxyUrl: "https://app.bigdata.com/api",
        taUrl: process.env["NX_PUBLIC_LOCAL_PROXY"] ? `${proxyOrigin}/bigdata-api/bigdata-ta/1.0` : "https://dev.text-analytics.bigdata.com/1.0",
        wsUrl: process.env["NX_PUBLIC_LOCAL_PROXY"] ? `ws://${proxyHost}:3000/bigdata-ws` : "wss://ws.dev.bigdata.com",
        marketingUrl: "https://dev.bigdata.com",
        salesPortalUrl: "https://sites.google.com/ravenpack.com/ravenpacksalesportal/home",
        docsUrl: "https://docs.bigdata.com",
        agentsUrl: "https://agents.dev.internal.bigdata.com"
    },
    nativeApp: {
        iosId: "com.ravenpack.bigdata",
        androidId: "com.bigdata.ravenpack",
        nativeChartUrl: `${_environmentinternal.environment.webAppUrl}/native-chart/index.html`
    },
    tagManager: {
        id: ""
    },
    googleAnalytics: {
        id: ""
    },
    sentry: {
        enabled: false,
        dsn: "https://a22cdeea23844503a05f91d7b6a9147c@sentry.ravenpack.com/15"
    },
    sentryNative: {
        enabled: false,
        dsn: "https://5cbf1c15a56443919b1190b35f0f712d@sentry.ravenpack.com/22"
    },
    hotjar: {
        id: null
    },
    slack: {
        clientId: "11775596802.5609459978054",
        botName: "Bigdata APP-DEV"
    },
    clerk: {
        clerkPubKey: "pk_test_dG91Y2hlZC1oYWRkb2NrLTEzLmNsZXJrLmFjY291bnRzLmRldiQ",
        adminWatchlistUserId: "user_2uB2npXahcP3LlTCXdhoYWs4DWR",
        origin: "https://touched-haddock-13.clerk.accounts.dev"
    },
    customerIo: {
        writeKey: "f6df7f51ec7082d00d01",
        hostName: "analytics.dev.bigdata.com"
    },
    customerIoNative: {
        siteId: "9b2ecc06a4d7389260d6",
        apiKey: "3b3373d686496ffee9d5"
    },
    chargebee: {
        site: "bigdata-test",
        publishableKey: "test_C66cQ1vKb5N4KpqOPbxE6WOoM5SVF09f"
    },
    launchDarkly: {
        mobileKey: "mob-a6cf1902-f4bf-4b2c-aff8-e0d6ed218d22",
        webKey: "6863e7cfac6dda09422cef9c"
    }
});

//# sourceMappingURL=data:application/json;base64,