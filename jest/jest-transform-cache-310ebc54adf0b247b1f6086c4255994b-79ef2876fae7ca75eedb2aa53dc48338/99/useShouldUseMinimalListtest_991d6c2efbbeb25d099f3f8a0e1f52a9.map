{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/components/Hub/Files/FilesList/hooks/useShouldUseMinimalList.test.ts"],"sourcesContent":["import { RenderHookResult, act, renderHook } from \"@testing-library/react\"\nimport {\n  MINIMAL_LIST_BREAK_WIDTH,\n  UseShouldUseMinimalistListState,\n  useShouldUseMinimalList,\n} from \"./useShouldUseMinimalList\"\n\nlet renderedHook: RenderHookResult<UseShouldUseMinimalistListState, undefined>\n\nconst expectedInitialState = {\n  setDivRef: expect.any(Function),\n  shouldUseMinimalList: true,\n}\n\nconst mockObserve = jest.fn()\nconst mockDisconnect = jest.fn()\n\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(props => mockObserve(props)),\n  unobserve: jest.fn(),\n  disconnect: mockDisconnect,\n}))\n\nbeforeEach(jest.clearAllMocks)\n\n// TODO: Find a way to assert the resize observer (cb and unmount)\n\ndescribe(\"useShouldUseMinimalistList\", () => {\n  describe(\"on initial render\", () => {\n    beforeEach(() => {\n      renderedHook = renderHook(useShouldUseMinimalList)\n    })\n\n    it(\"should return correct initial state\", () => {\n      expect(renderedHook.result.current).toStrictEqual(expectedInitialState)\n    })\n  })\n\n  describe(\"when sets to small element\", () => {\n    const event = { offsetWidth: MINIMAL_LIST_BREAK_WIDTH - 10 } as HTMLDivElement\n    beforeEach(() => {\n      renderedHook = renderHook(useShouldUseMinimalList)\n\n      act(() => renderedHook.result.current.setDivRef(event))\n    })\n\n    it(\"should return correct initial state\", () => {\n      expect(mockObserve).toHaveBeenCalledWith(event)\n    })\n  })\n\n  describe(\"when sets to large element\", () => {\n    const event = { offsetWidth: MINIMAL_LIST_BREAK_WIDTH + 10 } as HTMLDivElement\n    beforeEach(() => {\n      renderedHook = renderHook(useShouldUseMinimalList)\n\n      act(() => renderedHook.result.current.setDivRef(event))\n    })\n\n    it(\"should return correct initial state\", () => {\n      expect(mockObserve).toHaveBeenCalledWith(event)\n    })\n  })\n})\n"],"names":["renderedHook","expectedInitialState","setDivRef","expect","any","Function","shouldUseMinimalList","mockObserve","jest","fn","mockDisconnect","global","ResizeObserver","mockImplementation","observe","props","unobserve","disconnect","beforeEach","clearAllMocks","describe","renderHook","useShouldUseMinimalList","it","result","current","toStrictEqual","event","offsetWidth","MINIMAL_LIST_BREAK_WIDTH","act","toHaveBeenCalledWith"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;uBAAkD;yCAK3C;AAEP,IAAIA;AAEJ,MAAMC,uBAAuB;IAC3BC,WAAWC,OAAOC,GAAG,CAACC;IACtBC,sBAAsB;AACxB;AAEA,MAAMC,cAAcC,KAAKC,EAAE;AAC3B,MAAMC,iBAAiBF,KAAKC,EAAE;AAE9BE,OAAOC,cAAc,GAAGJ,KAAKC,EAAE,GAAGI,kBAAkB,CAAC,IAAO,CAAA;QAC1DC,SAASN,KAAKC,EAAE,CAACM,CAAAA,QAASR,YAAYQ;QACtCC,WAAWR,KAAKC,EAAE;QAClBQ,YAAYP;IACd,CAAA;AAEAQ,WAAWV,KAAKW,aAAa;AAE7B,kEAAkE;AAElEC,SAAS,8BAA8B;IACrCA,SAAS,qBAAqB;QAC5BF,WAAW;YACTlB,eAAeqB,IAAAA,iBAAU,EAACC,gDAAuB;QACnD;QAEAC,GAAG,uCAAuC;YACxCpB,OAAOH,aAAawB,MAAM,CAACC,OAAO,EAAEC,aAAa,CAACzB;QACpD;IACF;IAEAmB,SAAS,8BAA8B;QACrC,MAAMO,QAAQ;YAAEC,aAAaC,iDAAwB,GAAG;QAAG;QAC3DX,WAAW;YACTlB,eAAeqB,IAAAA,iBAAU,EAACC,gDAAuB;YAEjDQ,IAAAA,UAAG,EAAC,IAAM9B,aAAawB,MAAM,CAACC,OAAO,CAACvB,SAAS,CAACyB;QAClD;QAEAJ,GAAG,uCAAuC;YACxCpB,OAAOI,aAAawB,oBAAoB,CAACJ;QAC3C;IACF;IAEAP,SAAS,8BAA8B;QACrC,MAAMO,QAAQ;YAAEC,aAAaC,iDAAwB,GAAG;QAAG;QAC3DX,WAAW;YACTlB,eAAeqB,IAAAA,iBAAU,EAACC,gDAAuB;YAEjDQ,IAAAA,UAAG,EAAC,IAAM9B,aAAawB,MAAM,CAACC,OAAO,CAACvB,SAAS,CAACyB;QAClD;QAEAJ,GAAG,uCAAuC;YACxCpB,OAAOI,aAAawB,oBAAoB,CAACJ;QAC3C;IACF;AACF"}