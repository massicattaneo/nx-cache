bb64cb475cc9d813a1a6bd3f1ba13602
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    findEntityInAnalytics: function() {
        return findEntityInAnalytics;
    },
    getRelationship: function() {
        return getRelationship;
    },
    useAppereances: function() {
        return useAppereances;
    },
    useDocumentAnalytics: function() {
        return useDocumentAnalytics;
    }
});
const _react = require("react");
const _rpjson = require("@rp/react/common/rpjson");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _useDiscoveryPanelPreviewhelpers = require("./useDiscoveryPanelPreview.helpers");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getDocumentIds = (rpjsonDocument)=>{
    const { analytics: { entities = [], events = [] } } = rpjsonDocument || {
        analytics: {}
    };
    const documentIds = {};
    for (const event of events){
        var _event_topic, _event_group, _event_type, _event_sub_type;
        const key = `${(_event_topic = event.topic) !== null && _event_topic !== void 0 ? _event_topic : ""},${(_event_group = event.group) !== null && _event_group !== void 0 ? _event_group : ""},${(_event_type = event.type) !== null && _event_type !== void 0 ? _event_type : ""},${(_event_sub_type = event.sub_type) !== null && _event_sub_type !== void 0 ? _event_sub_type : ""},`;
        if (!documentIds[key]) documentIds[key] = {
            queryType: "rp_topic",
            key
        };
    }
    for (const entity of entities){
        if (entity.entity_detection_type !== "direct") continue;
        const key = entity.rp_entity_id;
        if (!documentIds[key]) documentIds[key] = {
            queryType: "entity",
            key
        };
    }
    return Object.values(documentIds);
};
const getRelationship = (id, expression, entitiesInWatchlists)=>{
    if (!expression || entitiesInWatchlists === undefined) {
        return "result";
    }
    if ((0, _userdataqueries.getExpressionIds)(expression).some((entity)=>entity === id)) {
        return "direct";
    }
    if (entitiesInWatchlists === null || entitiesInWatchlists === void 0 ? void 0 : entitiesInWatchlists.some((entity)=>entity === id)) {
        return "indirect";
    }
    return "result";
};
const reduceAppearances = (appearances)=>{
    // Several entities could be in the same sentence and paragraph coordinates
    // For this purpose we would only need one copy of each
    const uniqueAppearances = {};
    for (const appearance of appearances){
        if (uniqueAppearances[`${appearance.pnum}-${appearance.snum}`] === undefined) {
            uniqueAppearances[`${appearance.pnum}-${appearance.snum}`] = appearance;
        }
    }
    return Object.values(uniqueAppearances);
};
const useAppereances = (filter, rpjsonDocument)=>{
    const { stats } = (0, _rpjson.useEnhancedDocument)(rpjsonDocument);
    return reduceAppearances(stats.entities[filter.key].appearances);
};
const useDocumentAnalytics = (rpjsonDocument, expression)=>{
    const docIds = (0, _react.useMemo)(()=>getDocumentIds(rpjsonDocument), [
        rpjsonDocument
    ]);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [analytics, setAnalytics] = (0, _react.useState)({});
    const { ids, addByIds } = (0, _cqsbyids.useCqsByIdsContext)();
    const { stats } = (0, _rpjson.useEnhancedDocument)(rpjsonDocument);
    const entitiesInWatchlists = (0, _watchlist.useEntitiesFromWatchlists)(expression);
    (0, _react.useEffect)(()=>{
        addByIds(docIds);
    }, [
        addByIds,
        docIds
    ]);
    (0, _react.useEffect)(()=>{
        if (rpjsonDocument && docIds.filter((item)=>{
            var _ids_item_key;
            var _ids_item_key_isLoading;
            return (_ids_item_key_isLoading = (_ids_item_key = ids[item.key]) === null || _ids_item_key === void 0 ? void 0 : _ids_item_key.isLoading) !== null && _ids_item_key_isLoading !== void 0 ? _ids_item_key_isLoading : true;
        }).length === 0) {
            setIsLoading(false);
        }
    }, [
        ids,
        docIds,
        rpjsonDocument
    ]);
    (0, _react.useEffect)(()=>{
        const mapped = docIds.map((item)=>{
            var _ids_item_key;
            if (item.queryType === "entity") {
                var _ids_item_key1;
                return _object_spread_props(_object_spread({}, (_ids_item_key1 = ids[item.key]) === null || _ids_item_key1 === void 0 ? void 0 : _ids_item_key1.data), {
                    queryRelationship: getRelationship(item.key, expression, entitiesInWatchlists),
                    volume: stats.entities[item.key] ? reduceAppearances(stats.entities[item.key].appearances).length : 0
                });
            }
            return _object_spread_props(_object_spread({}, (_ids_item_key = ids[item.key]) === null || _ids_item_key === void 0 ? void 0 : _ids_item_key.data), {
                category: "Topics",
                queryRelationship: getRelationship(item.key, expression, entitiesInWatchlists),
                volume: stats.entities[item.key] ? reduceAppearances(stats.entities[item.key].appearances).length : 0
            });
        });
        const ordered = mapped.sort((a, b)=>b.volume - a.volume);
        const grouped = ordered.filter((item)=>item.key).reduce((acc, item)=>{
            if (!item.category) return acc;
            const id = item.category.toLowerCase();
            return _object_spread_props(_object_spread({}, acc), {
                [id]: [
                    ...acc[id] || [],
                    item
                ]
            });
        }, {});
        const modifiedGroups = (0, _useDiscoveryPanelPreviewhelpers.modifyDiscoveryPanelData)(grouped);
        setAnalytics(modifiedGroups);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        docIds,
        ids,
        expression,
        stats
    ]);
    return {
        analytics,
        isLoading
    };
};
const findEntityInAnalytics = (analytics, entityId)=>{
    return Object.values(analytics).flat().find((entity)=>entityId === entity.key);
};

//# sourceMappingURL=data:application/json;base64,