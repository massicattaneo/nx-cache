{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/markdown-table/index.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its ‚Äúvisible‚Äù size.\n *   Note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n"],"names":["markdownTable","table","options","align","concat","stringLength","defaultStringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","length","row","sizes","columnIndex","cell","serialize","alignDelimiters","size","undefined","push","toAlignment","code","before","after","Math","max","repeat","splice","lines","line","delimiterStart","padding","delimiterEnd","join","replace","value","String","codePointAt"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}