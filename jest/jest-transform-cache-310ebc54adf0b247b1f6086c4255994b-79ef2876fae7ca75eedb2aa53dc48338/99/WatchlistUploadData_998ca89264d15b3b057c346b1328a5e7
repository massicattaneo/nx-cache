bee0c89c2af781e97d604ea95da6872e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WATCHLIST_MODAL_SCROLLABLE_ID: function() {
        return WATCHLIST_MODAL_SCROLLABLE_ID;
    },
    WatchlistUploadData: function() {
        return WatchlistUploadData;
    },
    extendItems: function() {
        return extendItems;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _utils = require("@rp/common/utils");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _WatchlistUploadDataSection = require("./WatchlistUploadDataSection");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const WATCHLIST_MODAL_SCROLLABLE_ID = "watchlist-modal-scrollable";
const extendItems = (data, watchlist)=>{
    return data.map((item)=>{
        var _item_data;
        var _item_data_key;
        return _object_spread_props(_object_spread({}, item), {
            isInWatchlist: watchlist.items.includes((_item_data_key = (_item_data = item.data) === null || _item_data === void 0 ? void 0 : _item_data.key) !== null && _item_data_key !== void 0 ? _item_data_key : "")
        });
    });
};
const WatchlistUploadData = ({ data: rawData, onClose, watchlist, onSubmit })=>{
    const ref = (0, _react.useRef)(null);
    const scroll = (0, _react.useRef)(0);
    const [data, setData] = (0, _react.useState)(extendItems(rawData.entities.filter((data)=>!data.isConflict), watchlist));
    const [conflicts, setConflicts] = (0, _react.useState)(extendItems(rawData.entities.filter((data)=>data.isConflict), watchlist));
    const originalConflicts = rawData.entities.filter((i)=>i.isConflict).length;
    (0, _react.useEffect)(()=>{
        const current = ref.current;
        if (!current) return;
        current === null || current === void 0 ? void 0 : current.scrollTo(0, 0);
        const handler = ()=>{
            var _ref_current;
            var _ref_current_scrollTop;
            scroll.current = (_ref_current_scrollTop = (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.scrollTop) !== null && _ref_current_scrollTop !== void 0 ? _ref_current_scrollTop : 0;
        };
        current.addEventListener("scroll", handler);
        return ()=>{
            current.removeEventListener("scroll", handler);
        };
    }, []);
    const toAdd = [
        ...data.filter((i)=>!i.isInWatchlist && !i.isDeleted),
        ...conflicts.filter((i)=>!i.isConflict && !i.isInWatchlist && !i.isDeleted)
    ];
    const excludeIds = (0, _react.useMemo)(()=>{
        return [
            ...watchlist.items,
            ...data.filter((i)=>!i.isDeleted).map((i)=>{
                var _i_data;
                var _i_data_key;
                return (_i_data_key = (_i_data = i.data) === null || _i_data === void 0 ? void 0 : _i_data.key) !== null && _i_data_key !== void 0 ? _i_data_key : "";
            }),
            ...conflicts.filter((i)=>!i.isDeleted).map((i)=>{
                var _i_data;
                var _i_data_key;
                return (_i_data_key = (_i_data = i.data) === null || _i_data === void 0 ? void 0 : _i_data.key) !== null && _i_data_key !== void 0 ? _i_data_key : "";
            })
        ];
    }, [
        conflicts,
        data,
        watchlist.items
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    gap: 1
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                        sx: {
                            fontSize: 14,
                            color: "grey.300"
                        },
                        children: [
                            data.length,
                            " ",
                            data.length === 1 ? "entity" : "entities",
                            " found"
                        ]
                    }),
                    originalConflicts > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                                sx: {
                                    fontSize: 14,
                                    color: "grey.300"
                                },
                                children: "|"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                                onClick: ()=>{
                                    var _ref_current;
                                    const el = (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.querySelector(".conflicts");
                                    el === null || el === void 0 ? void 0 : el.scrollIntoView({
                                        behavior: "smooth",
                                        block: "start"
                                    });
                                },
                                sx: {
                                    cursor: "pointer",
                                    fontSize: 14,
                                    color: "error.light",
                                    display: "flex",
                                    alignItems: "center"
                                },
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.InfoOutlined, {
                                        sx: {
                                            fontSize: 14,
                                            mr: 0.5
                                        }
                                    }),
                                    originalConflicts,
                                    " conflict",
                                    originalConflicts === 1 ? "" : "s"
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    mt: 2
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            ref: ref,
                            id: WATCHLIST_MODAL_SCROLLABLE_ID,
                            sx: (theme)=>_object_spread({
                                    height: "calc(450px)",
                                    overflowY: "auto"
                                }, theme.scrollbarStyles),
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistUploadDataSection.WatchlistUploadDataSection, {
                                    labels: [
                                        "match",
                                        "matches"
                                    ],
                                    onSortChange: ()=>{
                                        var _ref_current;
                                        return (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.scrollTo(0, scroll.current);
                                    },
                                    data: data,
                                    setData: setData,
                                    watchlist: watchlist,
                                    excludeIds: excludeIds
                                }),
                                conflicts.filter((item)=>!item.isDeleted).length ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                                            sx: {
                                                pb: 6
                                            }
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistUploadDataSection.WatchlistUploadDataSection, {
                                            labels: [
                                                "conflict",
                                                "conflicts"
                                            ],
                                            labelClassName: "conflicts",
                                            onSortChange: ()=>{
                                                var _ref_current;
                                                return (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.scrollTo(0, scroll.current);
                                            },
                                            data: conflicts,
                                            setData: setConflicts,
                                            watchlist: watchlist,
                                            excludeIds: excludeIds
                                        })
                                    ]
                                }) : null
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                            sx: {
                                display: "flex",
                                justifyContent: "flex-end",
                                mt: 2,
                                gap: 2
                            },
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                                    onClick: onClose,
                                    variant: "text",
                                    color: "inherit",
                                    "data-testid": "dialog-close-button",
                                    children: "Cancel"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                                    role: "form-submit",
                                    onClick: ()=>{
                                        onSubmit(toAdd.map((i)=>i.data).filter(_utils.isDefined), {
                                            conflicts: {
                                                deleted: conflicts.filter((i)=>i.isDeleted).length,
                                                resolved: conflicts.filter((i)=>!i.isConflict && !i.isDeleted).length,
                                                unresolved: conflicts.filter((i)=>i.isConflict && !i.isDeleted).length
                                            },
                                            matched: {
                                                deleted: data.filter((i)=>i.isDeleted).length,
                                                modified: data.filter((i)=>i.isModified && !i.isDeleted).length,
                                                unmodified: data.filter((i)=>!i.isModified && !i.isDeleted).length
                                            }
                                        });
                                    },
                                    autoFocus: true,
                                    variant: "contained",
                                    type: "submit",
                                    children: toAdd.length === 0 ? "Done" : `Add ${toAdd.length} ${toAdd.length === 1 ? "entity" : "entities"}`
                                })
                            ]
                        })
                    ]
                })
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,