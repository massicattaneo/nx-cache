fce03769aeb78519742e9a42f53a2840
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    chatQueryKeys: function() {
        return chatQueryKeys;
    },
    useChat: function() {
        return useChat;
    },
    useChats: function() {
        return useChats;
    },
    useCreateChat: function() {
        return useCreateChat;
    },
    useDeleteChat: function() {
        return useDeleteChat;
    },
    useOptimisticChat: function() {
        return useOptimisticChat;
    },
    usePaginatedChats: function() {
        return usePaginatedChats;
    },
    usePatchChat: function() {
        return usePatchChat;
    },
    useShareChat: function() {
        return useShareChat;
    }
});
const _react = require("react");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _reactquery = require("@tanstack/react-query");
const _chattypes = require("./chat.types");
const _enrichEngineCharWidgetSpec = require("./enrichEngineCharWidgetSpec");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const USE_QUERY_RETRY_DEFAULT = 3;
// -----------------
// Query Keys
// -----------------
const chatQueryKeys = {
    all: ()=>[
            "chats"
        ],
    chat: (chatId)=>[
            "chats",
            chatId
        ],
    paginatedList: (params)=>{
        return params ? [
            "paginatedChats",
            "paginatedList",
            params
        ] : [
            "paginatedChats",
            "paginatedList"
        ];
    }
};
// -----------------
// Network Requests
// -----------------
const CHAT_PATH = "/user-data/chats";
const renameChat = async ({ id, name })=>{
    const { data } = await _axiosclient.axiosClient.patch(`${CHAT_PATH}/${id}`, {
        name
    });
    return data;
};
const getAllChats = async ()=>{
    const { data } = await _axiosclient.axiosClient.get(`${CHAT_PATH}`);
    return data;
};
const getAllPaginatedChats = async (params)=>{
    const { data } = await _axiosclient.axiosClient.get(`${CHAT_PATH}`, {
        params: _object_spread_props(_object_spread({}, params), {
            limit: params === null || params === void 0 ? void 0 : params.limit
        })
    });
    return data;
};
const getChatById = async (queryClient, id)=>{
    const { data } = await _axiosclient.axiosClient.get(`${CHAT_PATH}/${id}`);
    const interactions = await Promise.all(data.interactions.map((interaction)=>{
        return (0, _enrichEngineCharWidgetSpec.enrichEngineCharWidgetSpec)(queryClient, interaction);
    }));
    return _object_spread_props(_object_spread({}, data), {
        interactions
    });
};
const createChat = async (createChatBody)=>{
    const { data } = await _axiosclient.axiosClient.post(CHAT_PATH, createChatBody);
    return data;
};
const deleteChat = async (id)=>{
    await _axiosclient.axiosClient.delete(`${CHAT_PATH}/${id}`);
    return {
        id
    };
};
const shareChat = async (shareChatData)=>{
    const { id } = shareChatData;
    const { data } = await _axiosclient.axiosClient.post(`${CHAT_PATH}/${id}/share`, {
        public: shareChatData.isPublic
    });
    return data;
};
// -----------------
// Query Hooks
// -----------------
const usePaginatedChats = (params = {
    limit: 20
})=>{
    return (0, _reactquery.useInfiniteQuery)({
        queryKey: chatQueryKeys.paginatedList(params),
        queryFn: async ({ pageParam })=>{
            const response = await getAllPaginatedChats(pageParam === "" ? params : _object_spread_props(_object_spread({}, params), {
                cursor: pageParam
            }));
            return _object_spread_props(_object_spread({}, response), {
                items: response.items.map((chat)=>(0, _utils.mapToISOTimestamp)(chat))
            });
        },
        initialPageParam: "",
        getNextPageParam: (lastPage)=>{
            return lastPage.cursor;
        },
        gcTime: Infinity,
        staleTime: Infinity
    });
};
const useChat = (id, disableRetry)=>{
    var _result_data, _result_data1;
    const queryClient = (0, _reactquery.useQueryClient)();
    const result = (0, _reactquery.useQuery)({
        queryKey: chatQueryKeys.chat(id !== null && id !== void 0 ? id : "error"),
        queryFn: (key)=>getChatById(queryClient, key.queryKey[1]),
        enabled: id !== undefined,
        retry: disableRetry ? false : USE_QUERY_RETRY_DEFAULT,
        staleTime: 24 * 60 * 60 * 1000,
        select: (chat)=>{
            return _object_spread_props(_object_spread({}, chat), {
                interactions: chat.interactions.map((interaction)=>{
                    if (!(0, _chattypes.isUserInteraction)(interaction) || !interaction.auditTraces) {
                        return interaction;
                    }
                    return _object_spread_props(_object_spread({}, interaction), {
                        auditTraces: interaction.auditTraces.map((trace)=>_object_spread_props(_object_spread({}, trace), {
                                results: trace.results.map((result)=>{
                                    if (result.type === "CQS") {
                                        return _object_spread_props(_object_spread({}, result), {
                                            values: result.values.map(_utils.mapToISOTimestamp)
                                        });
                                    }
                                    if (result.type === "EXTERNAL") {
                                        return _object_spread_props(_object_spread({}, result), {
                                            values: result.values.map(_utils.mapToISOTimestamp)
                                        });
                                    }
                                    return result;
                                })
                            }))
                    });
                })
            });
        }
    });
    const int = (_result_data1 = result.data) === null || _result_data1 === void 0 ? void 0 : _result_data1.interactions[((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.interactions.length) - 1];
    const lastWatchlistId = int && (0, _chattypes.isUserInteraction)(int) ? int.scopeWatchlistId : undefined;
    return _object_spread_props(_object_spread({}, result), {
        lastWatchlistId
    });
};
const useCreateChat = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: createChat,
        onSuccess: (data)=>{
            queryClient.setQueryData(chatQueryKeys.chat(data.id), data);
            queryClient.setQueryData(chatQueryKeys.all(), (oldChats)=>{
                if (!oldChats) return [
                    data
                ];
                return [
                    data,
                    ...oldChats
                ];
            });
            queryClient.setQueriesData({
                queryKey: chatQueryKeys.paginatedList()
            }, (old)=>{
                if (!(old === null || old === void 0 ? void 0 : old.pages)) return old;
                return _object_spread_props(_object_spread({}, old), {
                    pages: [
                        _object_spread_props(_object_spread({}, old.pages[0]), {
                            items: [
                                data,
                                ...old.pages[0].items
                            ]
                        }),
                        ...old.pages.slice(1)
                    ]
                });
            });
        }
    });
};
const useDeleteChat = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: (id)=>deleteChat(id),
        onSuccess: (data)=>{
            queryClient.setQueryData(chatQueryKeys.all(), (oldChats)=>{
                if (!oldChats) return [];
                return oldChats.filter((chat)=>chat.id !== data.id);
            });
            queryClient.setQueriesData({
                queryKey: chatQueryKeys.paginatedList()
            }, (old)=>{
                if (!(old === null || old === void 0 ? void 0 : old.pages)) return old;
                return _object_spread_props(_object_spread({}, old), {
                    pages: old.pages.map((page)=>_object_spread_props(_object_spread({}, page), {
                            items: page.items.filter((chat)=>chat.id !== data.id)
                        }))
                });
            });
            queryClient.removeQueries({
                queryKey: chatQueryKeys.chat(data.id)
            });
        }
    });
};
const useChats = ()=>{
    return (0, _reactquery.useQuery)({
        queryKey: chatQueryKeys.all(),
        queryFn: async ()=>getAllChats(),
        gcTime: Infinity,
        staleTime: Infinity,
        select: (chats)=>{
            return chats.map((chat)=>(0, _utils.mapToISOTimestamp)(chat));
        }
    });
};
const useOptimisticChat = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const addInteraction = (0, _react.useCallback)((chatId, interaction)=>{
        queryClient.setQueryData(chatQueryKeys.chat(chatId), (prev)=>{
            if (!prev) {
                return prev;
            }
            const prevCopy = _object_spread({}, prev);
            prevCopy.interactions = prevCopy.interactions.length > 0 && prevCopy.interactions[prevCopy.interactions.length - 1].interactionTimestamp === interaction.interactionTimestamp ? prevCopy.interactions : [
                ...prevCopy.interactions,
                interaction
            ];
            return prevCopy;
        });
    }, [
        queryClient
    ]);
    const removeLastInteraction = (0, _react.useCallback)((chatId)=>{
        let removedInteraction;
        queryClient.setQueryData(chatQueryKeys.chat(chatId), (prev)=>{
            if (!prev) {
                return prev;
            }
            const lastInteraction = prev.interactions[prev.interactions.length - 1];
            if (lastInteraction !== undefined && (0, _chattypes.isUserInteraction)(lastInteraction)) {
                removedInteraction = lastInteraction;
            }
            const prevCopy = _object_spread({}, prev);
            prevCopy.interactions = prevCopy.interactions.slice(0, -1);
            return prevCopy;
        });
        return removedInteraction;
    }, [
        queryClient
    ]);
    return {
        addInteraction,
        removeLastInteraction
    };
};
const useShareChat = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: shareChat,
        onMutate: (data)=>{
            const previousChat = queryClient.getQueryData(chatQueryKeys.chat(data.id));
            queryClient.setQueryData(chatQueryKeys.chat(data.id), (prev)=>{
                if (!prev) return prev;
                return _object_spread_props(_object_spread({}, prev), {
                    isPublic: data.isPublic
                });
            });
            queryClient.setQueriesData({
                queryKey: chatQueryKeys.paginatedList()
            }, (old)=>{
                if (!(old === null || old === void 0 ? void 0 : old.pages)) return old;
                return _object_spread_props(_object_spread({}, old), {
                    pages: old.pages.map((page)=>_object_spread_props(_object_spread({}, page), {
                            items: page.items.map((chat)=>chat.id === data.id ? _object_spread_props(_object_spread({}, chat), {
                                    isPublic: data.isPublic
                                }) : chat)
                        }))
                });
            });
            return [
                previousChat
            ];
        },
        onError: (_, variables, context)=>{
            const [previousChat] = context !== null && context !== void 0 ? context : [];
            if (previousChat !== undefined) {
                queryClient.setQueryData(chatQueryKeys.chat(variables.id), previousChat);
            }
        }
    });
};
const usePatchChat = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const onMutate = async (patchChat)=>{
        await queryClient.cancelQueries({
            queryKey: chatQueryKeys.chat(patchChat.id)
        });
        const previousChat = queryClient.getQueryData(chatQueryKeys.chat(patchChat.id));
        queryClient.setQueryData(chatQueryKeys.chat(patchChat.id), (prev)=>{
            return !prev ? undefined : _object_spread_props(_object_spread({}, prev), {
                name: patchChat.name
            });
        });
        return {
            previousChat
        };
    };
    const onSuccess = (data)=>{
        queryClient.setQueryData(chatQueryKeys.all(), (oldChats)=>{
            if (!oldChats) return [];
            return oldChats.map((chat)=>chat.id === data.id ? _object_spread_props(_object_spread({}, chat), {
                    name: data.name
                }) : chat);
        });
        queryClient.setQueriesData({
            queryKey: chatQueryKeys.paginatedList()
        }, (old)=>{
            if (!(old === null || old === void 0 ? void 0 : old.pages)) return old;
            return _object_spread_props(_object_spread({}, old), {
                pages: old.pages.map((page)=>_object_spread_props(_object_spread({}, page), {
                        items: page.items.map((chat)=>chat.id === data.id ? _object_spread_props(_object_spread({}, chat), {
                                name: data.name
                            }) : chat)
                    }))
            });
        });
    };
    return (0, _reactquery.useMutation)({
        mutationFn: renameChat,
        onMutate,
        onSuccess
    });
};

//# sourceMappingURL=data:application/json;base64,