085c051dd8261226b0f94f51021ba509
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "watchlistCustomerIo", {
    enumerable: true,
    get: function() {
        return watchlistCustomerIo;
    }
});
const _adapters = require("@rp/adapters");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const defaultData = {
    open: null,
    startUpload: null,
    endUpload: null,
    uploadMethod: "none"
};
const uploadModalData = Object.assign({}, defaultData);
const sendUploadModalEvent = (name, data)=>{
    if (!uploadModalData.open) return;
    var _uploadModalData_uploadMethod;
    const common = {
        sinceOpenModal: Date.now() - uploadModalData.open,
        uploadMethod: (_uploadModalData_uploadMethod = uploadModalData.uploadMethod) !== null && _uploadModalData_uploadMethod !== void 0 ? _uploadModalData_uploadMethod : "none"
    };
    if (uploadModalData.endUpload && uploadModalData.startUpload) {
        Object.assign(common, {
            sinceProcessingComplete: Date.now() - uploadModalData.endUpload,
            processingFileDuration: uploadModalData.endUpload - uploadModalData.startUpload
        });
    }
    _adapters.adapters.customerIo.track({
        name,
        data: _object_spread({}, common, data)
    });
};
const watchlistCustomerIo = {
    watchlistApi: {
        create (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlist",
                data: _object_spread({
                    action: "create"
                }, data)
            });
        },
        update (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlist",
                data: _object_spread({
                    action: "update"
                }, data)
            });
        },
        delete (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlist",
                data: _object_spread({
                    action: "delete"
                }, data)
            });
        },
        favorite (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlist",
                data: _object_spread({
                    action: "favorite"
                }, data)
            });
        },
        unfavorite (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlist",
                data: _object_spread({
                    action: "unfavorite"
                }, data)
            });
        }
    },
    uploadModal: {
        setTimestamp (key) {
            Object.assign(uploadModalData, {
                [key]: Date.now()
            });
        },
        setUploadMethod (method) {
            Object.assign(uploadModalData, {
                uploadMethod: method
            });
        },
        reset () {
            Object.assign(uploadModalData, defaultData);
        },
        sendCancel (props) {
            sendUploadModalEvent("watchlistUpload", _object_spread({
                type: "cancel"
            }, props));
        },
        sendError (watchlistId, { message }) {
            sendUploadModalEvent("watchlistUpload", {
                type: "error",
                watchlistId,
                errorMessage: message
            });
        },
        sendSubmit (props) {
            sendUploadModalEvent("watchlistUpload", _object_spread({
                type: "submit"
            }, props));
        }
    },
    dataView: {
        cellClick (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlistDataViewInteracted",
                data: _object_spread({
                    action: "tableCellClick"
                }, data)
            });
        },
        accessed (dataViewName) {
            _adapters.adapters.customerIo.track({
                name: "watchlistDataViewInteracted",
                data: {
                    action: "accessed",
                    dataViewName
                }
            });
        },
        upgradeButtonClicked (dataViewName) {
            _adapters.adapters.customerIo.track({
                name: "watchlistDataViewInteracted",
                data: {
                    action: "upgradeButtonClicked",
                    dataViewName
                }
            });
        },
        downloadButtonClicked (dataViewName) {
            _adapters.adapters.customerIo.track({
                name: "watchlistDataViewInteracted",
                data: {
                    action: "csvExported",
                    dataViewName
                }
            });
        },
        columnsModified (data) {
            _adapters.adapters.customerIo.track({
                name: "watchlistDataViewInteracted",
                data: _object_spread({
                    action: "columnsModified"
                }, data)
            });
        }
    }
};

//# sourceMappingURL=data:application/json;base64,