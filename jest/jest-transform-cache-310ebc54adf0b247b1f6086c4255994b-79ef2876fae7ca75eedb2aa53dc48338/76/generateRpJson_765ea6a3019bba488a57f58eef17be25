1f47cf945f56cdbc44639759fa297524
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateFile: function() {
        return generateFile;
    },
    generateRpJsonFromFile: function() {
        return generateRpJsonFromFile;
    }
});
const _generateDate = require("./generateDate");
const _generateId = require("./generateId");
const _generateServerFile = require("./generateServerFile");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const generateRpJsonTextBlock = (text, analytics)=>{
    const { type, entities, events, sentences } = analytics;
    return {
        type,
        text,
        entities: (entities || []).map((entity)=>({
                rp_entity_id: entity.key,
                start: entity.start,
                end: entity.end,
                entity_type: entity.entityType,
                entity_name: entity.name
            })),
        events: (events || []).map((event)=>({
                event_similarity_key: event.key,
                start: event.start,
                end: event.end
            })),
        sentences: (sentences || []).map((sentence)=>({
                start: sentence.start,
                end: sentence.end,
                sentiment: "0.00",
                sentiment_confidence: "0.00",
                sentenceNumber: 1
            })),
        markers: []
    };
};
const getEntities = (body, rpIds = [])=>{
    const entities = [];
    body.forEach((item)=>{
        var _item_entities;
        if (!item.type && (item === null || item === void 0 ? void 0 : (_item_entities = item.entities) === null || _item_entities === void 0 ? void 0 : _item_entities.length)) {
            item.entities.forEach((entity)=>{
                const cqs = rpIds.find((sub)=>sub.key === entity.rp_entity_id);
                if (!entities.find((sub)=>sub.rp_entity_id === entity.rp_entity_id)) entities.push({
                    rp_entity_id: entity.rp_entity_id,
                    entity_name: (cqs === null || cqs === void 0 ? void 0 : cqs.name) || "",
                    entity_type: (cqs === null || cqs === void 0 ? void 0 : cqs.entityType) || "",
                    country_code: "",
                    entity_hierarchy_level: 0,
                    entity_detection_type: "direct",
                    entity_detection_distance: 0,
                    entity_relevance: 0,
                    document_record_index: 0
                });
            });
        }
    });
    return entities;
};
const getEvents = (body)=>{
    const events = [];
    body.forEach((item)=>{
        var _item_events;
        if (!item.type && (item === null || item === void 0 ? void 0 : (_item_events = item.events) === null || _item_events === void 0 ? void 0 : _item_events.length)) {
            item.events.forEach((event)=>{
                if (!events.find((sub)=>sub.event_similarity_key === event.event_similarity_key)) events.push({
                    event_similarity_key: event.event_similarity_key,
                    topic: "",
                    group: "",
                    type: "",
                    event_relevance: 0,
                    roles: []
                });
            });
        }
    });
    return events;
};
const generateRpJsonFromFile = (options, cqsItems = [])=>{
    const lines = (options.content || "").split("\n");
    const sentences = lines.map((text)=>({
            start: 0,
            end: text.length,
            text
        }));
    const body = sentences.map((sentence)=>{
        const entities = cqsItems.reduce((acc, item)=>{
            const rec = [
                ...acc
            ];
            let pos = 0;
            while(sentence.text.indexOf(item.name, pos) !== -1){
                const start = sentence.text.indexOf(item.name, pos);
                rec.push(_object_spread({
                    start,
                    end: start + item.name.length
                }, item));
                pos = start + item.name.length;
            }
            return rec;
        }, []);
        return generateRpJsonTextBlock(sentence.text, {
            entities: entities,
            sentences: [
                sentence
            ]
        });
    });
    const rpjson = {
        document: {
            rp_document_id: (0, _generateId.generateId)(),
            source: {
                rp_external_source_id: "rp_external_source_id",
                rp_provider_id: "rp_provider_id"
            },
            timestamps_utc: {
                analytics: (0, _generateDate.generateDate)(),
                published: (0, _generateDate.generateDate)(),
                reception: (0, _generateDate.generateDate)(),
                revision: (0, _generateDate.generateDate)()
            },
            metadata: {}
        },
        analytics: {
            document: {
                analytics_version: "analytics_version",
                analytics_revision_number: 0,
                product_key: "product_key"
            },
            entities: getEntities(body, cqsItems),
            events: getEvents(body)
        },
        software_versions: {
            collection_build: "collection_build",
            classification_build: "classification_build",
            metadata_build: "metadata_build"
        },
        content: {
            stats: {
                word_count: 0,
                extraction_byte_count: 0,
                byte_count: 0
            },
            title: {
                text: options.name,
                sentences: [],
                markers: []
            },
            body
        }
    };
    return rpjson;
};
const generateFile = (options)=>{
    const id = (0, _generateId.generateId)();
    const file = (0, _generateServerFile.generateServerFile)(_object_spread({
        id
    }, options));
    const rpjson = generateRpJsonFromFile(options, options.cqsItems);
    return {
        id,
        file,
        content: options.content,
        rpjson
    };
};

//# sourceMappingURL=data:application/json;base64,