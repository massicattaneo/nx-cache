{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/development/src/lib/database/generators/generateRpJson.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { bigdataSchemas } from \"@rp/common/contracts\"\nimport { DbCqs } from \"../db.types\"\nimport { generateDate } from \"./generateDate\"\nimport { generateId } from \"./generateId\"\nimport { generateServerFile } from \"./generateServerFile\"\n\ntype TextBlock = z.infer<typeof bigdataSchemas.st_documents_TextBlock>\ntype Entity = z.infer<typeof bigdataSchemas.st_documents_AnalyticEntity>\ntype Event = z.infer<typeof bigdataSchemas.st_documents_AnalyticEvent>\ntype RpJsonDocument = z.infer<typeof bigdataSchemas.st_documents_Rpjson>\ntype ContentBlock = z.infer<typeof bigdataSchemas.st_documents_TextBlock>\ntype FileOptions = { content?: string; name: string }\ntype AnalyticEntity = DbCqs & { start: number; end: number }\n\nconst generateRpJsonTextBlock = (\n  text: string,\n  analytics: {\n    type?: TextBlock[\"type\"]\n    entities?: Array<AnalyticEntity>\n    events?: Array<{ key: string; start: number; end: number }>\n    sentences?: Array<{ start: number; end: number }>\n  },\n): TextBlock => {\n  const { type, entities, events, sentences } = analytics\n  return {\n    type,\n    text,\n    entities: (entities || []).map(entity => ({\n      rp_entity_id: entity.key,\n      start: entity.start,\n      end: entity.end,\n      entity_type: entity.entityType,\n      entity_name: entity.name,\n    })),\n    events: (events || []).map(event => ({\n      event_similarity_key: event.key,\n      start: event.start,\n      end: event.end,\n    })),\n    sentences: (sentences || []).map(sentence => ({\n      start: sentence.start,\n      end: sentence.end,\n      sentiment: \"0.00\",\n      sentiment_confidence: \"0.00\",\n      sentenceNumber: 1,\n    })),\n    markers: [],\n  }\n}\n\nconst getEntities = (body: Array<ContentBlock>, rpIds: Array<DbCqs> = []): Array<Entity> => {\n  const entities: Array<Entity> = []\n  body.forEach(item => {\n    if (!item.type && item?.entities?.length) {\n      item.entities.forEach(entity => {\n        const cqs = rpIds.find(sub => sub.key === entity.rp_entity_id)\n        if (!entities.find(sub => sub.rp_entity_id === entity.rp_entity_id))\n          entities.push({\n            rp_entity_id: entity.rp_entity_id,\n            entity_name: cqs?.name || \"\",\n            entity_type: cqs?.entityType || \"\",\n            country_code: \"\",\n            entity_hierarchy_level: 0,\n            entity_detection_type: \"direct\",\n            entity_detection_distance: 0,\n            entity_relevance: 0,\n            document_record_index: 0,\n          })\n      })\n    }\n  })\n  return entities\n}\n\nconst getEvents = (body: Array<ContentBlock>): Array<Event> => {\n  const events: Array<Event> = []\n  body.forEach(item => {\n    if (!item.type && item?.events?.length) {\n      item.events.forEach(event => {\n        if (!events.find(sub => sub.event_similarity_key === event.event_similarity_key))\n          events.push({\n            event_similarity_key: event.event_similarity_key,\n            topic: \"\",\n            group: \"\",\n            type: \"\",\n            event_relevance: 0,\n            roles: [],\n          })\n      })\n    }\n  })\n  return events\n}\n\nexport const generateRpJsonFromFile = (options: FileOptions, cqsItems: Array<DbCqs> = []) => {\n  const lines = (options.content || \"\").split(\"\\n\")\n  const sentences = lines.map(text => ({ start: 0, end: text.length, text }))\n  const body = sentences.map(sentence => {\n    const entities = cqsItems.reduce((acc, item) => {\n      const rec: Array<AnalyticEntity> = [...acc]\n      let pos = 0\n      while (sentence.text.indexOf(item.name, pos) !== -1) {\n        const start = sentence.text.indexOf(item.name, pos)\n        rec.push({ start, end: start + item.name.length, ...item })\n        pos = start + item.name.length\n      }\n      return rec\n    }, [] as Array<AnalyticEntity>)\n    return generateRpJsonTextBlock(sentence.text, { entities: entities, sentences: [sentence] })\n  })\n  const rpjson: RpJsonDocument = {\n    document: {\n      rp_document_id: generateId(),\n      source: { rp_external_source_id: \"rp_external_source_id\", rp_provider_id: \"rp_provider_id\" },\n      timestamps_utc: {\n        analytics: generateDate(),\n        published: generateDate(),\n        reception: generateDate(),\n        revision: generateDate(),\n      },\n      metadata: {},\n    },\n    analytics: {\n      document: {\n        analytics_version: \"analytics_version\",\n        analytics_revision_number: 0,\n        product_key: \"product_key\",\n      },\n      entities: getEntities(body, cqsItems),\n      events: getEvents(body),\n    },\n    software_versions: {\n      collection_build: \"collection_build\",\n      classification_build: \"classification_build\",\n      metadata_build: \"metadata_build\",\n    },\n    content: {\n      stats: { word_count: 0, extraction_byte_count: 0, byte_count: 0 },\n      title: {\n        text: options.name,\n        sentences: [],\n        markers: [],\n      },\n      body,\n    },\n  }\n  return rpjson\n}\n\ntype FileAndRpJson = FileOptions & {\n  cqsItems?: Array<DbCqs>\n} & Partial<Parameters<typeof generateServerFile>[0]>\n\nexport const generateFile = (options: FileAndRpJson) => {\n  const id = generateId()\n  const file = generateServerFile({ id, ...options })\n  const rpjson = generateRpJsonFromFile(options, options.cqsItems)\n  return { id, file, content: options.content, rpjson }\n}\n"],"names":["generateFile","generateRpJsonFromFile","generateRpJsonTextBlock","text","analytics","type","entities","events","sentences","map","entity","rp_entity_id","key","start","end","entity_type","entityType","entity_name","name","event","event_similarity_key","sentence","sentiment","sentiment_confidence","sentenceNumber","markers","getEntities","body","rpIds","forEach","item","length","cqs","find","sub","push","country_code","entity_hierarchy_level","entity_detection_type","entity_detection_distance","entity_relevance","document_record_index","getEvents","topic","group","event_relevance","roles","options","cqsItems","lines","content","split","reduce","acc","rec","pos","indexOf","rpjson","document","rp_document_id","generateId","source","rp_external_source_id","rp_provider_id","timestamps_utc","generateDate","published","reception","revision","metadata","analytics_version","analytics_revision_number","product_key","software_versions","collection_build","classification_build","metadata_build","stats","word_count","extraction_byte_count","byte_count","title","id","file","generateServerFile"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}