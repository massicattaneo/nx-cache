915766ac0e6ae4fcd4b758fa684513f7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "chatCustomerIo", {
    enumerable: true,
    get: function() {
        return chatCustomerIo;
    }
});
const _customerIOChatEvents = require("./customerIOChatEvents");
const transformOriginToType = (origin)=>{
    switch(origin){
        case "trending":
            return "trending";
        case "feed":
            return "feed";
        case "files":
            return "files";
        case "watchlist":
            return "watchlist";
        case "suggestedPrompts":
            return "suggestedPrompts";
        case "entity":
            return "entity";
        case "brief":
            return "brief";
        default:
            return null;
    }
};
let message = null;
let agentMessage = null;
const chatCustomerIo = {
    toggleAuditMode (params) {
        (0, _customerIOChatEvents.sendChatAudit)({
            action: params.isAuditMode ? "enableAudit" : "disableAudit",
            chatId: params.chatId
        });
    },
    chunkStoryCardClick (params) {
        (0, _customerIOChatEvents.sendChatAudit)({
            chatId: params.chatId,
            interactionTimestamp: params.interactionTimestamp,
            action: "readDocument",
            documentId: params.documentId
        });
    },
    responseAuditToggleClick (params) {
        (0, _customerIOChatEvents.sendChatAudit)({
            interactionTimestamp: params.interactionTimestamp,
            action: "showAudit",
            chatId: params.chatId
        });
    },
    responseAuditCopyClick (params) {
        (0, _customerIOChatEvents.sendChatAudit)({
            interactionTimestamp: params.interactionTimestamp,
            action: "copyText",
            chatId: params.chatId
        });
    },
    auditTrailOpenQuestionClick (params) {
        (0, _customerIOChatEvents.sendChatAudit)({
            interactionTimestamp: params.interactionTimestamp,
            action: "openQuestion",
            chatId: params.chatId
        });
    },
    userFeedback (params) {
        (0, _customerIOChatEvents.sendChatFeedback)(params);
    },
    agentFeedback (params) {
        (0, _customerIOChatEvents.sendAgentChatFeedback)(params);
    },
    agentCopyResponse (params) {
        (0, _customerIOChatEvents.sendAgentCopyResponse)(params);
    },
    sourceInteraction (params) {
        (0, _customerIOChatEvents.sendChatSourceInteraction)(params);
    },
    sourceInlineModalInteraction (params) {
        (0, _customerIOChatEvents.sendChatInlineSourceModalInteraction)(params);
    },
    shareChatInteraction (params) {
        (0, _customerIOChatEvents.sendChatShareInteraction)(params);
    },
    nativeChatInputResize (params) {
        (0, _customerIOChatEvents.sendNativeChatInputResizeInteraction)(params);
    },
    nativeChatLeaveWhileAnswerNotCompleted (params) {
        (0, _customerIOChatEvents.sendNativeChatLeaveWhileAnswerNotCompletedInteraction)(params);
    },
    editLastQuestionClick (params) {
        message = {
            submitChatId: params.chatId,
            origin: null,
            index: params.index,
            scope: params.scope,
            promptTopics: null,
            promptTask: null,
            type: null,
            status: "edited",
            files: params.files,
            watchlists: params.watchlists,
            followUpSuggestionIndex: null,
            dataViewAtClick: null,
            promptCategory: null,
            promptCompanyType: null,
            promptContextLevel: null,
            clickedSuggestedPromptText: null,
            suggestedPromptClassification: null
        };
    },
    regenerateLastQuestionClick (params) {
        message = {
            submitChatId: params.chatId,
            origin: null,
            index: params.index,
            scope: params.scope,
            promptTopics: null,
            promptTask: null,
            type: null,
            status: "regenerated",
            files: params.files,
            watchlists: params.watchlists,
            followUpSuggestionIndex: null,
            dataViewAtClick: null,
            promptCategory: null,
            promptCompanyType: null,
            promptContextLevel: null,
            clickedSuggestedPromptText: null,
            suggestedPromptClassification: null
        };
    },
    inputPromptSubmit (params) {
        var _params_watchlistPrompt, _params_watchlistPrompt1, _params_watchlistPrompt2, _params_watchlistPrompt3, _params_watchlistPrompt4, _params_watchlistPrompt5;
        var _params_watchlistPrompt_promptContextLevel, _params_watchlistPrompt_promptCategory, _params_watchlistPrompt_promptCompanyType, _params_watchlistPrompt_dataViewAtClick, _params_watchlistPrompt_clickedSuggestedPromptText, _params_watchlistPrompt_suggestedPromptClassification;
        message = {
            submitChatId: params.chatId,
            origin: params.origin,
            index: params.index,
            scope: params.scope,
            promptTopics: params.promptTopics,
            promptTask: params.promptTask,
            type: transformOriginToType(params.origin),
            status: null,
            files: params.files,
            watchlists: params.watchlists,
            followUpSuggestionIndex: params.followUpSuggestionIndex,
            promptContextLevel: (_params_watchlistPrompt_promptContextLevel = (_params_watchlistPrompt = params.watchlistPrompt) === null || _params_watchlistPrompt === void 0 ? void 0 : _params_watchlistPrompt.promptContextLevel) !== null && _params_watchlistPrompt_promptContextLevel !== void 0 ? _params_watchlistPrompt_promptContextLevel : null,
            promptCategory: (_params_watchlistPrompt_promptCategory = (_params_watchlistPrompt1 = params.watchlistPrompt) === null || _params_watchlistPrompt1 === void 0 ? void 0 : _params_watchlistPrompt1.promptCategory) !== null && _params_watchlistPrompt_promptCategory !== void 0 ? _params_watchlistPrompt_promptCategory : null,
            promptCompanyType: (_params_watchlistPrompt_promptCompanyType = (_params_watchlistPrompt2 = params.watchlistPrompt) === null || _params_watchlistPrompt2 === void 0 ? void 0 : _params_watchlistPrompt2.promptCompanyType) !== null && _params_watchlistPrompt_promptCompanyType !== void 0 ? _params_watchlistPrompt_promptCompanyType : null,
            dataViewAtClick: (_params_watchlistPrompt_dataViewAtClick = (_params_watchlistPrompt3 = params.watchlistPrompt) === null || _params_watchlistPrompt3 === void 0 ? void 0 : _params_watchlistPrompt3.dataViewAtClick) !== null && _params_watchlistPrompt_dataViewAtClick !== void 0 ? _params_watchlistPrompt_dataViewAtClick : null,
            clickedSuggestedPromptText: (_params_watchlistPrompt_clickedSuggestedPromptText = (_params_watchlistPrompt4 = params.watchlistPrompt) === null || _params_watchlistPrompt4 === void 0 ? void 0 : _params_watchlistPrompt4.clickedSuggestedPromptText) !== null && _params_watchlistPrompt_clickedSuggestedPromptText !== void 0 ? _params_watchlistPrompt_clickedSuggestedPromptText : null,
            suggestedPromptClassification: (_params_watchlistPrompt_suggestedPromptClassification = (_params_watchlistPrompt5 = params.watchlistPrompt) === null || _params_watchlistPrompt5 === void 0 ? void 0 : _params_watchlistPrompt5.suggestedPromptClassification) !== null && _params_watchlistPrompt_suggestedPromptClassification !== void 0 ? _params_watchlistPrompt_suggestedPromptClassification : null
        };
    },
    inputAgentPromptSubmit (params) {
        agentMessage = {
            submitChatId: params.chatId,
            executionMode: params.executionMode,
            requestId: params.requestId
        };
    },
    agentSummaryCompleted (params) {
        if (!agentMessage || agentMessage.submitChatId !== params.chatId) return;
        (0, _customerIOChatEvents.sendAgentChatInteraction)({
            chatId: params.chatId,
            interactionTimestamp: params.interactionTimestamp,
            executionMode: params.executionMode,
            requestId: params.requestId
        });
        agentMessage = null;
    },
    summaryCompleted (params) {
        if (!message || message.submitChatId !== params.chatId) return;
        (0, _customerIOChatEvents.sendChatInteraction)({
            chatId: params.chatId,
            interactionTimestamp: params.interactionTimestamp,
            type: message.index === 0 ? message.type : null,
            action: message.index === 0 ? "new" : "followUp",
            index: message.index,
            scope: message.scope,
            status: message.status,
            responseStatus: "completed",
            promptTopics: message.promptTopics,
            promptTask: message.promptTask,
            files: message.files,
            watchlists: message.watchlists,
            followUpSuggestionIndex: message.followUpSuggestionIndex
        });
        message = null;
    },
    summaryError (params) {
        if (!message || message.submitChatId !== params.chatId) return;
        var _params_interactionTimestamp;
        (0, _customerIOChatEvents.sendChatInteraction)({
            chatId: params.chatId,
            interactionTimestamp: (_params_interactionTimestamp = params.interactionTimestamp) !== null && _params_interactionTimestamp !== void 0 ? _params_interactionTimestamp : null,
            type: message.index === 0 ? message.type : null,
            action: message.index === 0 ? "new" : "followUp",
            index: message.index,
            scope: message.scope,
            status: message.status,
            responseStatus: "error",
            promptTopics: message.promptTopics,
            promptTask: message.promptTask,
            files: message.files,
            watchlists: message.watchlists,
            followUpSuggestionIndex: message.followUpSuggestionIndex
        });
        message = null;
    },
    inputStopClick () {
        if (!message) return;
        (0, _customerIOChatEvents.sendChatInteraction)({
            chatId: message.submitChatId,
            interactionTimestamp: null,
            type: message.index === 0 ? message.type : null,
            action: message.index === 0 ? "new" : "followUp",
            index: message.index,
            scope: message.scope,
            status: message.status,
            responseStatus: "stopped",
            promptTopics: message.promptTopics,
            promptTask: message.promptTask,
            files: message.files,
            watchlists: message.watchlists,
            followUpSuggestionIndex: message.followUpSuggestionIndex
        });
        message = null;
    },
    abandoned () {
        if (!message) return;
        (0, _customerIOChatEvents.sendChatInteraction)({
            chatId: message.submitChatId,
            interactionTimestamp: null,
            type: message.index === 0 ? message.type : null,
            action: message.index === 0 ? "new" : "followUp",
            index: message.index,
            scope: message.scope,
            status: message.status,
            responseStatus: "abandoned",
            promptTopics: message.promptTopics,
            promptTask: message.promptTask,
            files: message.files,
            watchlists: message.watchlists,
            followUpSuggestionIndex: message.followUpSuggestionIndex
        });
        message = null;
    },
    getMessage () {
        return message;
    }
};

//# sourceMappingURL=data:application/json;base64,