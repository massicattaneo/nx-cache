802a65cb804b9e6083eb48dae10b044c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_OPERATION: function() {
        return DEFAULT_OPERATION;
    },
    convertItemToFilter: function() {
        return convertItemToFilter;
    }
});
const _typeguards = require("../type-guards");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// I've added this local storage check to be able to switch between the default operation without
// needing to redeploy the application as I feel this will need testing.
const getDefaultOperation = ()=>{
    const value = localStorage.getItem("__explore_default_operation__");
    return value === "in" || value === "all" ? value : "in";
};
const DEFAULT_OPERATION = getDefaultOperation();
const convertItemToFilter = (item, operation = DEFAULT_OPERATION)=>{
    if (operation === "not-in") {
        return {
            type: "not",
            value: convertItemToFilter(item, "in")
        };
    }
    if ((0, _typeguards.isEntityItem)(item)) {
        return {
            type: "entity",
            operation: operation,
            metadata: {
                subType: item.entityType
            },
            value: [
                item.value
            ]
        };
    }
    if ((0, _typeguards.isMacroSearchItem)(item)) {
        return {
            type: item.type,
            operation: "all",
            value: item.value.map((filter)=>_object_spread_props(_object_spread({}, filter), {
                    operation: "in"
                })),
            metadata: {
                labels: item.labels
            }
        };
    }
    if (item.type === "watchlist") {
        return {
            type: "watchlist",
            operation: operation,
            value: item.value
        };
    }
    if (item.type === "keyword") {
        return {
            type: "keyword",
            operation: operation,
            value: [
                item.value
            ]
        };
    }
    return {
        type: item.type,
        operation: operation,
        value: [
            item.value
        ]
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2Nxcy1xdWVyeS1jb250ZXh0L3NyYy9saWIvY29udmVydC1pdGVtLXRvLWZpbHRlci9jb252ZXJ0SXRlbVRvRmlsdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJwcWxBcnJheU9wZXJhdGlvbnMsIFJwcWxGaWx0ZXIgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgRmlsdGVySXRlbSB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2Nxcy1xdWVyeS1jb250ZXh0XCJcbmltcG9ydCB7IGlzRW50aXR5SXRlbSwgaXNNYWNyb1NlYXJjaEl0ZW0gfSBmcm9tIFwiLi4vdHlwZS1ndWFyZHNcIlxuXG4vLyBJJ3ZlIGFkZGVkIHRoaXMgbG9jYWwgc3RvcmFnZSBjaGVjayB0byBiZSBhYmxlIHRvIHN3aXRjaCBiZXR3ZWVuIHRoZSBkZWZhdWx0IG9wZXJhdGlvbiB3aXRob3V0XG4vLyBuZWVkaW5nIHRvIHJlZGVwbG95IHRoZSBhcHBsaWNhdGlvbiBhcyBJIGZlZWwgdGhpcyB3aWxsIG5lZWQgdGVzdGluZy5cbmNvbnN0IGdldERlZmF1bHRPcGVyYXRpb24gPSAoKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJfX2V4cGxvcmVfZGVmYXVsdF9vcGVyYXRpb25fX1wiKVxuICByZXR1cm4gdmFsdWUgPT09IFwiaW5cIiB8fCB2YWx1ZSA9PT0gXCJhbGxcIiA/IHZhbHVlIDogXCJpblwiXG59XG5jb25zdCBERUZBVUxUX09QRVJBVElPTjogUnBxbEFycmF5T3BlcmF0aW9ucyA9IGdldERlZmF1bHRPcGVyYXRpb24oKVxuXG50eXBlIEV4dGVuZGVkQXJyYXlPcGVyYXRpb25zID0gUnBxbEFycmF5T3BlcmF0aW9ucyB8IFwibm90LWluXCJcblxuY29uc3QgY29udmVydEl0ZW1Ub0ZpbHRlciA9IChcbiAgaXRlbTogRmlsdGVySXRlbSxcbiAgb3BlcmF0aW9uOiBFeHRlbmRlZEFycmF5T3BlcmF0aW9ucyA9IERFRkFVTFRfT1BFUkFUSU9OLFxuKTogUnBxbEZpbHRlciA9PiB7XG4gIGlmIChvcGVyYXRpb24gPT09IFwibm90LWluXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJub3RcIixcbiAgICAgIHZhbHVlOiBjb252ZXJ0SXRlbVRvRmlsdGVyKGl0ZW0sIFwiaW5cIiksXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzRW50aXR5SXRlbShpdGVtKSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImVudGl0eVwiLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICBtZXRhZGF0YTogeyBzdWJUeXBlOiBpdGVtLmVudGl0eVR5cGUgfSxcbiAgICAgIHZhbHVlOiBbaXRlbS52YWx1ZV0sXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzTWFjcm9TZWFyY2hJdGVtKGl0ZW0pKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IGl0ZW0udHlwZSxcbiAgICAgIG9wZXJhdGlvbjogXCJhbGxcIiBhcyBjb25zdCxcbiAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLm1hcChmaWx0ZXIgPT4gKHsgLi4uZmlsdGVyLCBvcGVyYXRpb246IFwiaW5cIiBhcyBjb25zdCB9KSksXG4gICAgICBtZXRhZGF0YTogeyBsYWJlbHM6IGl0ZW0ubGFiZWxzIH0sXG4gICAgfVxuICB9XG5cbiAgaWYgKGl0ZW0udHlwZSA9PT0gXCJ3YXRjaGxpc3RcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIndhdGNobGlzdFwiLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICB2YWx1ZTogaXRlbS52YWx1ZSxcbiAgICB9XG4gIH1cblxuICBpZiAoaXRlbS50eXBlID09PSBcImtleXdvcmRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImtleXdvcmRcIixcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgdmFsdWU6IFtpdGVtLnZhbHVlXSxcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6IGl0ZW0udHlwZSxcbiAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICB2YWx1ZTogW2l0ZW0udmFsdWVdLFxuICB9XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRJdGVtVG9GaWx0ZXIsIERFRkFVTFRfT1BFUkFUSU9OIH1cbmV4cG9ydCB0eXBlIHsgRXh0ZW5kZWRBcnJheU9wZXJhdGlvbnMgfVxuIl0sIm5hbWVzIjpbIkRFRkFVTFRfT1BFUkFUSU9OIiwiY29udmVydEl0ZW1Ub0ZpbHRlciIsImdldERlZmF1bHRPcGVyYXRpb24iLCJ2YWx1ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJpdGVtIiwib3BlcmF0aW9uIiwidHlwZSIsImlzRW50aXR5SXRlbSIsIm1ldGFkYXRhIiwic3ViVHlwZSIsImVudGl0eVR5cGUiLCJpc01hY3JvU2VhcmNoSXRlbSIsIm1hcCIsImZpbHRlciIsImxhYmVscyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBa0U4QkEsaUJBQWlCO2VBQWpCQTs7SUFBckJDLG1CQUFtQjtlQUFuQkE7Ozs0QkFoRXVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVoRCxpR0FBaUc7QUFDakcsd0VBQXdFO0FBQ3hFLE1BQU1DLHNCQUFzQjtJQUMxQixNQUFNQyxRQUFRQyxhQUFhQyxPQUFPLENBQUM7SUFDbkMsT0FBT0YsVUFBVSxRQUFRQSxVQUFVLFFBQVFBLFFBQVE7QUFDckQ7QUFDQSxNQUFNSCxvQkFBeUNFO0FBSS9DLE1BQU1ELHNCQUFzQixDQUMxQkssTUFDQUMsWUFBcUNQLGlCQUFpQjtJQUV0RCxJQUFJTyxjQUFjLFVBQVU7UUFDMUIsT0FBTztZQUNMQyxNQUFNO1lBQ05MLE9BQU9GLG9CQUFvQkssTUFBTTtRQUNuQztJQUNGO0lBRUEsSUFBSUcsSUFBQUEsd0JBQVksRUFBQ0gsT0FBTztRQUN0QixPQUFPO1lBQ0xFLE1BQU07WUFDTkQsV0FBV0E7WUFDWEcsVUFBVTtnQkFBRUMsU0FBU0wsS0FBS00sVUFBVTtZQUFDO1lBQ3JDVCxPQUFPO2dCQUFDRyxLQUFLSCxLQUFLO2FBQUM7UUFDckI7SUFDRjtJQUVBLElBQUlVLElBQUFBLDZCQUFpQixFQUFDUCxPQUFPO1FBQzNCLE9BQU87WUFDTEUsTUFBTUYsS0FBS0UsSUFBSTtZQUNmRCxXQUFXO1lBQ1hKLE9BQU9HLEtBQUtILEtBQUssQ0FBQ1csR0FBRyxDQUFDQyxDQUFBQSxTQUFXLHdDQUFLQTtvQkFBUVIsV0FBVzs7WUFDekRHLFVBQVU7Z0JBQUVNLFFBQVFWLEtBQUtVLE1BQU07WUFBQztRQUNsQztJQUNGO0lBRUEsSUFBSVYsS0FBS0UsSUFBSSxLQUFLLGFBQWE7UUFDN0IsT0FBTztZQUNMQSxNQUFNO1lBQ05ELFdBQVdBO1lBQ1hKLE9BQU9HLEtBQUtILEtBQUs7UUFDbkI7SUFDRjtJQUVBLElBQUlHLEtBQUtFLElBQUksS0FBSyxXQUFXO1FBQzNCLE9BQU87WUFDTEEsTUFBTTtZQUNORCxXQUFXQTtZQUNYSixPQUFPO2dCQUFDRyxLQUFLSCxLQUFLO2FBQUM7UUFDckI7SUFDRjtJQUVBLE9BQU87UUFDTEssTUFBTUYsS0FBS0UsSUFBSTtRQUNmRCxXQUFXQTtRQUNYSixPQUFPO1lBQUNHLEtBQUtILEtBQUs7U0FBQztJQUNyQjtBQUNGIn0=