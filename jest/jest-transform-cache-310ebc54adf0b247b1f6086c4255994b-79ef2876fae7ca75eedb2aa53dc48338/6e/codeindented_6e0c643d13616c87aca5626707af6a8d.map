{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/code-indented.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n"],"names":["codeIndented","name","tokenize","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","partial","effects","ok","nok","self","start","code","enter","factorySpace","afterPrefix","tail","events","length","type","sliceSerialize","atBreak","after","markdownLineEnding","attempt","inside","exit","consume","parser","lazy","now","line"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}