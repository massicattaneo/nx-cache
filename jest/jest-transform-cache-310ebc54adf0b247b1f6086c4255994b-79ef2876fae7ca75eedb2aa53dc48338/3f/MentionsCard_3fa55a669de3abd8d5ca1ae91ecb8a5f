ec9ca045c5e03fb0140255069e88d79d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MentionsCard", {
    enumerable: true,
    get: function() {
        return MentionsCard;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _apitypes = require("@rp/common/api-types");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _documentviewer = require("@rp/react/web/common/document-viewer");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _cqsquerycontext = require("@rp/react/web/cqs-query-context");
const _cqsutils = require("@rp/react/web/cqs-utils");
const _core = require("@rp/react/web/mui/core");
const _Mentionsstyles = require("./Mentions.styles");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const MentionsCard = ({ story, query, index, queryId, onClusterClick, isFeedbackMode })=>{
    const [_, setHashParams] = (0, _hooks.useHashParams)();
    const { id, hd, sentences, documentScope, ts, language = "", srcName = "Unknown Source", contentType, srcKey } = story;
    const cluster = (0, _apitypes.isClusterStory)(story) ? story.cluster : [];
    const isPrivate = documentScope === "files";
    const relevantSentenceId = (0, _cqsutils.getRelevantSentenceId)(story);
    const { setDocumentData } = (0, _providers.useDocumentViewerData)();
    const isVisited = (0, _hooks.useVisitedDocument)(id);
    const { redirectToContent } = (0, _hooks.useExternalLinkUrl)(id);
    const relevantSentence = (0, _cqsquerycontext.getDisplaySentence)(story);
    const { pnum, entities: sentenceEntities = [] } = relevantSentence;
    const { entities: headlineSentences = [] } = sentences[0].pnum === 0 ? sentences[0] : {};
    const handleClick = ()=>{
        if (story.url && story.rpProviderId === "MRVR") {
            redirectToContent(story.url, relevantSentence.text);
            return;
        }
        setDocumentData({
            documentId: id,
            documentScope,
            language,
            query,
            queryId
        });
        isPrivate ? setHashParams({
            document: id,
            private: "true"
        }) : setHashParams({
            document: id
        });
    };
    const handleToggleCluster = (event)=>{
        event.stopPropagation();
        onClusterClick === null || onClusterClick === void 0 ? void 0 : onClusterClick(cluster);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        style: {
            paddingBottom: "12px"
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_Mentionsstyles.MentionsCardContainer, {
            onClick: handleClick,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    style: {
                        display: "flex"
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                        tooltipText: hd,
                        typographyProps: {
                            sx: {
                                color: isVisited ? "visited" : "info.light",
                                whiteSpace: "nowrap"
                            }
                        },
                        children: hd
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "mentions-header",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.DocumentIcon, {
                            documentScope: documentScope,
                            text: isPrivate ? null : srcName,
                            contentType: contentType,
                            srcKey: srcKey
                        }),
                        cluster.length ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Link, {
                            component: "button",
                            onClick: handleToggleCluster,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_compositecomponents.StoryCardDate, {
                                sx: {
                                    color: "primary.light",
                                    display: "block"
                                },
                                children: [
                                    "+",
                                    cluster.length,
                                    " more"
                                ]
                            })
                        }) : null,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_documentviewer.DateAndTranslatedInfo, {
                            language: language,
                            timestamp: ts,
                            dense: true
                        })
                    ]
                }),
                pnum !== 0 ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Mentionsstyles.MentionsRpJsonContentBlockDisplay, {
                    block: relevantSentence,
                    markupDetections: true
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    children: "Headline only"
                }),
                isFeedbackMode && /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.StoryCardRanking, {
                    sentenceId: relevantSentenceId,
                    resultIndex: index,
                    sentenceEntities: pnum === 0 ? [] : sentenceEntities,
                    headlineEntities: headlineSentences,
                    documentId: story.id,
                    hideRating: true
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,