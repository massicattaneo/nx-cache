{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/discovery-sidebar/src/Mentions/MentionsCard.tsx"],"sourcesContent":["import React from \"react\"\nimport {\n  CqsClusterSummaryStory,\n  CqsSearchQuery,\n  CqsStory,\n  isClusterStory,\n} from \"@rp/common/api-types\"\nimport { DocumentIcon } from \"@rp/react/web/common/composite-components\"\nimport { StoryCardDate } from \"@rp/react/web/common/composite-components\"\nimport { StoryCardRanking } from \"@rp/react/web/common/composite-components\"\nimport { EllipsisTooltip } from \"@rp/react/web/common/composite-components\"\nimport { DateAndTranslatedInfo } from \"@rp/react/web/common/document-viewer\"\nimport { useExternalLinkUrl, useHashParams } from \"@rp/react/web/common/hooks\"\nimport { useVisitedDocument } from \"@rp/react/web/common/hooks\"\nimport { useDocumentViewerData } from \"@rp/react/web/common/providers\"\nimport { getDisplaySentence } from \"@rp/react/web/cqs-query-context\"\nimport { getRelevantSentenceId } from \"@rp/react/web/cqs-utils\"\nimport { Link } from \"@rp/react/web/mui/core\"\nimport { MentionsCardContainer, MentionsRpJsonContentBlockDisplay } from \"./Mentions.styles\"\n\nexport type MentionsCardProps = {\n  story: CqsStory | CqsClusterSummaryStory\n  query?: CqsSearchQuery\n  index: number\n  queryId: string\n  onClusterClick?: (cluster: CqsClusterSummaryStory[\"cluster\"]) => void\n  isFeedbackMode: boolean\n}\n\nexport const MentionsCard = ({\n  story,\n  query,\n  index,\n  queryId,\n  onClusterClick,\n  isFeedbackMode,\n}: MentionsCardProps) => {\n  const [_, setHashParams] = useHashParams()\n  const {\n    id,\n    hd,\n    sentences,\n    documentScope,\n    ts,\n    language = \"\",\n    srcName = \"Unknown Source\",\n    contentType,\n    srcKey,\n  } = story\n\n  const cluster = isClusterStory(story) ? story.cluster : []\n  const isPrivate = documentScope === \"files\"\n  const relevantSentenceId = getRelevantSentenceId(story)\n  const { setDocumentData } = useDocumentViewerData()\n\n  const isVisited = useVisitedDocument(id)\n  const { redirectToContent } = useExternalLinkUrl(id)\n\n  const relevantSentence = getDisplaySentence(story)\n  const { pnum, entities: sentenceEntities = [] } = relevantSentence\n  const { entities: headlineSentences = [] } = sentences[0].pnum === 0 ? sentences[0] : {}\n\n  const handleClick = () => {\n    if (story.url && story.rpProviderId === \"MRVR\") {\n      redirectToContent(story.url, relevantSentence.text)\n      return\n    }\n\n    setDocumentData({\n      documentId: id,\n      documentScope,\n      language,\n      query,\n      queryId,\n    })\n\n    isPrivate ? setHashParams({ document: id, private: \"true\" }) : setHashParams({ document: id })\n  }\n\n  const handleToggleCluster = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.stopPropagation()\n    onClusterClick?.(cluster)\n  }\n\n  return (\n    <div style={{ paddingBottom: \"12px\" }}>\n      <MentionsCardContainer onClick={handleClick}>\n        <div style={{ display: \"flex\" }}>\n          <EllipsisTooltip\n            tooltipText={hd}\n            typographyProps={{\n              sx: {\n                color: isVisited ? \"visited\" : \"info.light\",\n                whiteSpace: \"nowrap\",\n              },\n            }}\n          >\n            {hd}\n          </EllipsisTooltip>\n        </div>\n        <div className=\"mentions-header\">\n          <DocumentIcon\n            documentScope={documentScope}\n            text={isPrivate ? null : srcName}\n            contentType={contentType}\n            srcKey={srcKey}\n          />\n          {cluster.length ? (\n            <Link component=\"button\" onClick={handleToggleCluster}>\n              <StoryCardDate sx={{ color: \"primary.light\", display: \"block\" }}>\n                +{cluster.length} more\n              </StoryCardDate>\n            </Link>\n          ) : null}\n          <DateAndTranslatedInfo language={language} timestamp={ts} dense />\n        </div>\n        {pnum !== 0 ? (\n          <MentionsRpJsonContentBlockDisplay block={relevantSentence} markupDetections />\n        ) : (\n          <span>Headline only</span>\n        )}\n        {isFeedbackMode && (\n          <StoryCardRanking\n            sentenceId={relevantSentenceId}\n            resultIndex={index}\n            sentenceEntities={pnum === 0 ? [] : sentenceEntities}\n            headlineEntities={headlineSentences}\n            documentId={story.id}\n            hideRating\n          />\n        )}\n      </MentionsCardContainer>\n    </div>\n  )\n}\n"],"names":["MentionsCard","story","query","index","queryId","onClusterClick","isFeedbackMode","_","setHashParams","useHashParams","id","hd","sentences","documentScope","ts","language","srcName","contentType","srcKey","cluster","isClusterStory","isPrivate","relevantSentenceId","getRelevantSentenceId","setDocumentData","useDocumentViewerData","isVisited","useVisitedDocument","redirectToContent","useExternalLinkUrl","relevantSentence","getDisplaySentence","pnum","entities","sentenceEntities","headlineSentences","handleClick","url","rpProviderId","text","documentId","document","private","handleToggleCluster","event","stopPropagation","div","style","paddingBottom","MentionsCardContainer","onClick","display","EllipsisTooltip","tooltipText","typographyProps","sx","color","whiteSpace","className","DocumentIcon","length","Link","component","StoryCardDate","DateAndTranslatedInfo","timestamp","dense","MentionsRpJsonContentBlockDisplay","block","markupDetections","span","StoryCardRanking","sentenceId","resultIndex","headlineEntities","hideRating"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}