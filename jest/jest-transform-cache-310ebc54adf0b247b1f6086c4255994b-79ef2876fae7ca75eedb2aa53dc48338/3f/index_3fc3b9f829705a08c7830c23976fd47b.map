{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/unist-util-is/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n"],"names":["convert","is","node","test","index","parent","context","check","undefined","Number","POSITIVE_INFINITY","Error","children","looksLikeANode","call","ok","castFactory","Array","isArray","anyFactory","propsFactory","typeFactory","tests","checks","length","any","parameters","apply","checkAsRecord","all","nodeAsRecord","key","type","testFunction","value","Boolean"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}