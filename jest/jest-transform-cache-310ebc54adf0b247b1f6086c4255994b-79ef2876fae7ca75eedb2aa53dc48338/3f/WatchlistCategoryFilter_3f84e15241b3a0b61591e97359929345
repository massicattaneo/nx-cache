bf51db0643ad6fb869e91a5da62ce155
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "WatchlistCategoryFilter", {
    enumerable: true,
    get: function() {
        return WatchlistCategoryFilter;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _react1 = require("swiper/react");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _icons = require("@rp/react/web/icons");
const _core = require("@rp/react/web/mui/core");
const CategoryChip = ({ label, selectedCategory, setSelectedCategory, icon, count, index })=>{
    const swiper = (0, _react1.useSwiper)();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Chip, {
        label: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
            sx: {
                display: "flex",
                alignItems: "center",
                gap: 1
            },
            children: [
                label !== null && label !== void 0 ? label : "All",
                count ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    variant: "caption",
                    component: "span",
                    lineHeight: 1,
                    children: [
                        "(",
                        formatter.format(count),
                        ")"
                    ]
                }) : undefined
            ]
        }),
        icon: icon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.IconEntity, {
            icon: icon
        }) : undefined,
        sx: {
            pl: icon ? 0.75 : undefined,
            fontSize: 16,
            "&, &:hover, &:focus": {
                backgroundColor: selectedCategory === label ? "primary.main" : "transparent",
                color: selectedCategory === label ? "common.black" : undefined,
                border: selectedCategory === label ? undefined : "1px solid rgba(255, 255, 255, 0.12)"
            },
            "& svg": {
                fontSize: 16,
                color: selectedCategory === label ? "#121212 !important" : undefined
            },
            "& span span": {
                color: selectedCategory === label ? "common.black" : "text.secondary"
            }
        },
        onClick: ()=>{
            setSelectedCategory(label);
            swiper.slideTo(index);
        }
    });
};
const ALL_VALUE = undefined;
const formatter = Intl.NumberFormat("en", {
    notation: "compact"
});
const WatchlistCategoryFilter = ({ categories, counts, onChange })=>{
    const swiperRef = (0, _react.useRef)(null);
    const [selectedCategory, setSelectedCategory] = (0, _react.useState)(ALL_VALUE);
    const watchlistCategories = (0, _react.useMemo)(()=>categories.filter((category)=>category.watchlistFilter), [
        categories
    ]);
    (0, _react.useEffect)(()=>{
        var _swiperRef_current;
        (_swiperRef_current = swiperRef.current) === null || _swiperRef_current === void 0 ? void 0 : _swiperRef_current.swiper.update();
    }, [
        categories,
        counts
    ]);
    (0, _react.useEffect)(()=>{
        var _swiperRef_current;
        onChange(selectedCategory);
        (_swiperRef_current = swiperRef.current) === null || _swiperRef_current === void 0 ? void 0 : _swiperRef_current.swiper.update();
    }, [
        selectedCategory,
        onChange
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            gap: 1,
            maxWidth: "100%",
            overflow: "auto",
            position: "relative"
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_compositecomponents.SwiperWithFadingArrows, {
            bgColor: "#1E1E1E",
            height: 32,
            ref: swiperRef,
            slidesPerGroup: 1,
            spaceBetween: 8,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.SwiperSlide, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CategoryChip, {
                        label: ALL_VALUE,
                        selectedCategory: selectedCategory,
                        setSelectedCategory: setSelectedCategory,
                        count: counts.All,
                        index: 0
                    })
                }),
                watchlistCategories.map((category, index)=>{
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.SwiperSlide, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(CategoryChip, {
                            label: category.label,
                            selectedCategory: selectedCategory,
                            setSelectedCategory: setSelectedCategory,
                            count: counts[category.label],
                            icon: category.icon,
                            index: index
                        })
                    }, category.category);
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,