b160c36f3346936a1a8494de9485b96f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ShareProvider: function() {
        return ShareProvider;
    },
    useShareContext: function() {
        return useShareContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _settings = require("@rp/common/settings");
const ShareContext = /*#__PURE__*/ (0, _react.createContext)(null);
const ShareProvider = ({ children })=>{
    const { search, hash, pathname } = window.location;
    const params = new URLSearchParams(search);
    const source = params.get(_settings.INTERNAL_ACTION_QUERY_PARAM);
    const cameFromShare = source === _settings.INTERNAL_QUERY_PARAM_ACTIONS.SHARE;
    const entryPointPathname = cameFromShare ? pathname : null;
    if (cameFromShare) {
        params.delete(_settings.INTERNAL_ACTION_QUERY_PARAM);
        const newSearch = params.toString();
        const newUrl = `${pathname}${newSearch ? `?${newSearch}` : ""}${hash}`;
        window.history.replaceState(null, "", newUrl);
    }
    const [cameFromLinkPathname] = (0, _react.useState)(entryPointPathname);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(ShareContext.Provider, {
        value: {
            cameFromLinkPathname
        },
        children: children
    });
};
const useShareContext = ()=>{
    const context = (0, _react.useContext)(ShareContext);
    if (!context) {
        throw new Error("useShareContext must be used within a ShareProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL1NoYXJlQ29udGV4dC9TaGFyZUNvbnRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3BzV2l0aENoaWxkcmVuLCBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBJTlRFUk5BTF9BQ1RJT05fUVVFUllfUEFSQU0sIElOVEVSTkFMX1FVRVJZX1BBUkFNX0FDVElPTlMgfSBmcm9tIFwiQHJwL2NvbW1vbi9zZXR0aW5nc1wiXG5cbnR5cGUgTW9kYWxDb250ZXh0VHlwZSA9IHtcbiAgY2FtZUZyb21MaW5rUGF0aG5hbWU6IHN0cmluZyB8IG51bGxcbn1cblxuY29uc3QgU2hhcmVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxNb2RhbENvbnRleHRUeXBlIHwgbnVsbD4obnVsbClcblxuY29uc3QgU2hhcmVQcm92aWRlciA9ICh7IGNoaWxkcmVuIH06IFByb3BzV2l0aENoaWxkcmVuKSA9PiB7XG4gIGNvbnN0IHsgc2VhcmNoLCBoYXNoLCBwYXRobmFtZSB9ID0gd2luZG93LmxvY2F0aW9uXG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKVxuICBjb25zdCBzb3VyY2UgPSBwYXJhbXMuZ2V0KElOVEVSTkFMX0FDVElPTl9RVUVSWV9QQVJBTSlcbiAgY29uc3QgY2FtZUZyb21TaGFyZSA9IHNvdXJjZSA9PT0gSU5URVJOQUxfUVVFUllfUEFSQU1fQUNUSU9OUy5TSEFSRVxuICBjb25zdCBlbnRyeVBvaW50UGF0aG5hbWUgPSBjYW1lRnJvbVNoYXJlID8gcGF0aG5hbWUgOiBudWxsXG4gIGlmIChjYW1lRnJvbVNoYXJlKSB7XG4gICAgcGFyYW1zLmRlbGV0ZShJTlRFUk5BTF9BQ1RJT05fUVVFUllfUEFSQU0pXG4gICAgY29uc3QgbmV3U2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKClcbiAgICBjb25zdCBuZXdVcmwgPSBgJHtwYXRobmFtZX0ke25ld1NlYXJjaCA/IGA/JHtuZXdTZWFyY2h9YCA6IFwiXCJ9JHtoYXNofWBcbiAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgXCJcIiwgbmV3VXJsKVxuICB9XG4gIGNvbnN0IFtjYW1lRnJvbUxpbmtQYXRobmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihlbnRyeVBvaW50UGF0aG5hbWUpXG4gIHJldHVybiA8U2hhcmVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGNhbWVGcm9tTGlua1BhdGhuYW1lIH19PntjaGlsZHJlbn08L1NoYXJlQ29udGV4dC5Qcm92aWRlcj5cbn1cblxuY29uc3QgdXNlU2hhcmVDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChTaGFyZUNvbnRleHQpXG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVzZVNoYXJlQ29udGV4dCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgU2hhcmVQcm92aWRlclwiKVxuICB9XG4gIHJldHVybiBjb250ZXh0XG59XG5cbmV4cG9ydCB7IFNoYXJlUHJvdmlkZXIsIHVzZVNoYXJlQ29udGV4dCB9XG4iXSwibmFtZXMiOlsiU2hhcmVQcm92aWRlciIsInVzZVNoYXJlQ29udGV4dCIsIlNoYXJlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJjaGlsZHJlbiIsInNlYXJjaCIsImhhc2giLCJwYXRobmFtZSIsIndpbmRvdyIsImxvY2F0aW9uIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic291cmNlIiwiZ2V0IiwiSU5URVJOQUxfQUNUSU9OX1FVRVJZX1BBUkFNIiwiY2FtZUZyb21TaGFyZSIsIklOVEVSTkFMX1FVRVJZX1BBUkFNX0FDVElPTlMiLCJTSEFSRSIsImVudHJ5UG9pbnRQYXRobmFtZSIsImRlbGV0ZSIsIm5ld1NlYXJjaCIsInRvU3RyaW5nIiwibmV3VXJsIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsImNhbWVGcm9tTGlua1BhdGhuYW1lIiwidXNlU3RhdGUiLCJQcm92aWRlciIsInZhbHVlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBaUNTQSxhQUFhO2VBQWJBOztJQUFlQyxlQUFlO2VBQWZBOzs7O3VCQWpDK0M7MEJBQ0c7QUFNMUUsTUFBTUMsNkJBQWVDLElBQUFBLG9CQUFhLEVBQTBCO0FBRTVELE1BQU1ILGdCQUFnQixDQUFDLEVBQUVJLFFBQVEsRUFBcUI7SUFDcEQsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFLEdBQUdDLE9BQU9DLFFBQVE7SUFDbEQsTUFBTUMsU0FBUyxJQUFJQyxnQkFBZ0JOO0lBQ25DLE1BQU1PLFNBQVNGLE9BQU9HLEdBQUcsQ0FBQ0MscUNBQTJCO0lBQ3JELE1BQU1DLGdCQUFnQkgsV0FBV0ksc0NBQTRCLENBQUNDLEtBQUs7SUFDbkUsTUFBTUMscUJBQXFCSCxnQkFBZ0JSLFdBQVc7SUFDdEQsSUFBSVEsZUFBZTtRQUNqQkwsT0FBT1MsTUFBTSxDQUFDTCxxQ0FBMkI7UUFDekMsTUFBTU0sWUFBWVYsT0FBT1csUUFBUTtRQUNqQyxNQUFNQyxTQUFTLENBQUMsRUFBRWYsU0FBUyxFQUFFYSxZQUFZLENBQUMsQ0FBQyxFQUFFQSxVQUFVLENBQUMsR0FBRyxHQUFHLEVBQUVkLEtBQUssQ0FBQztRQUN0RUUsT0FBT2UsT0FBTyxDQUFDQyxZQUFZLENBQUMsTUFBTSxJQUFJRjtJQUN4QztJQUNBLE1BQU0sQ0FBQ0cscUJBQXFCLEdBQUdDLElBQUFBLGVBQVEsRUFBZ0JSO0lBQ3ZELHFCQUFPLHFCQUFDaEIsYUFBYXlCLFFBQVE7UUFBQ0MsT0FBTztZQUFFSDtRQUFxQjtrQkFBSXJCOztBQUNsRTtBQUVBLE1BQU1ILGtCQUFrQjtJQUN0QixNQUFNNEIsVUFBVUMsSUFBQUEsaUJBQVUsRUFBQzVCO0lBQzNCLElBQUksQ0FBQzJCLFNBQVM7UUFDWixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxPQUFPRjtBQUNUIn0=