{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/cqs-by-ids/src/bigdata-cqs-by-ids-context.tsx"],"sourcesContent":["import { PropsWithChildren, createContext, useCallback, useContext, useEffect } from \"react\"\nimport { AxiosInstance } from \"axios\"\nimport { atom, useAtom } from \"jotai\"\nimport { CqsItem, PostByIdsRequest, PostByIdsResponse } from \"@rp/common/api-types\"\nimport { chunkArray } from \"@rp/common/utils\"\nimport { QueryClient, useQueryClient } from \"@tanstack/react-query\"\n\nconst CQS_QUERY_BY_ID_CHUNK_SIZE = 100\n\nexport type IdElement = {\n  data: CqsItem\n  isLoading: boolean\n  isError: boolean\n  startLoading: boolean\n}\n\ntype CqsTypes = {\n  validateIds: (array: PostByIdsRequest) => Promise<PostByIdsRequest>\n  addByIds: (id: Array<Partial<CqsItem>>) => void\n  ids: Record<string, IdElement>\n}\n\nconst get = (client: AxiosInstance, queryClient: QueryClient) => async (ids: PostByIdsRequest) => {\n  const all = await Promise.all(\n    chunkArray(ids, CQS_QUERY_BY_ID_CHUNK_SIZE).map(async chunk => {\n      const { data } = await queryClient.fetchQuery({\n        queryKey: [\"cqs-by-ids-granular-cache\", chunk],\n        queryFn: () =>\n          client.post<PostByIdsResponse>(\n            `/cqs/by-ids`,\n            chunk.map(item => ({ key: item.key, queryType: item.queryType })),\n          ),\n        retry: 3,\n      })\n      return data\n    }),\n  )\n  const init: PostByIdsResponse = {}\n  return all.reduce((acc, item) => ({ ...acc, ...item }), init)\n}\n\nconst CqsContext = createContext<CqsTypes | undefined>(undefined)\n\ntype Props = PropsWithChildren & {\n  client: AxiosInstance\n}\n\nconst createIdElement = (\n  data?: Partial<CqsItem>,\n  rest?: Partial<Omit<IdElement, \"data\">>,\n): IdElement => {\n  return {\n    data: {\n      ...data,\n      key: data?.key ?? \"\",\n      name: data?.name ?? \"\",\n      queryType: data?.queryType ?? \"\",\n      volume: data?.volume ?? 0,\n      queryRelationship: data?.queryRelationship ?? \"direct\",\n      entityType: data?.entityType ?? \"\",\n    },\n    isLoading: rest?.isLoading ?? false,\n    isError: rest?.isError ?? false,\n    startLoading: rest?.startLoading ?? false,\n  }\n}\n\nconst cqsAtom = atom<Record<string, IdElement>>({})\n\nconst CqsByIdsProvider = ({ children, client }: Props) => {\n  const [ids, setIds] = useAtom(cqsAtom)\n  const queryClient = useQueryClient()\n  const validateIds = useCallback(\n    async (array: PostByIdsRequest) => {\n      const data = await get(client, queryClient)(array)\n      return array.filter(item => {\n        return !!data[item.key]\n      })\n    },\n    [client, queryClient],\n  )\n\n  const addByIds = useCallback(\n    (items: Array<Partial<CqsItem>>) => {\n      setIds(prev => {\n        const toAdd = items\n          .filter(item =>\n            [\"source\", \"rp_topic\", \"entity\", \"language\"].includes(item.queryType || \"\"),\n          )\n          .filter(item => !Object.keys(prev).includes(item?.key || \"\"))\n        if (!toAdd.length) return prev\n        const entries = toAdd.map(item => [\n          item?.key,\n          // TODO: Review how this will affect items without groups, like Languages\n          item.group1\n            ? createIdElement(item, { isLoading: false, startLoading: true })\n            : createIdElement(item, { isLoading: true }),\n        ])\n        return { ...prev, ...Object.fromEntries(entries) }\n      })\n    },\n    [setIds],\n  )\n\n  useEffect(() => {\n    const values = Object.values(ids)\n    const filtered = values.filter(item => item.isLoading && !item.startLoading)\n    if (filtered.length > 0) {\n      filtered.forEach(item => Object.assign(item, { startLoading: true }))\n      const items = filtered.map(item => item.data)\n      if (!items.length) return\n      get(\n        client,\n        queryClient,\n      )(items)\n        .then(res => {\n          const entries = filtered.map(data => {\n            const element = res[data.data.key]\n              ? createIdElement(res[data.data.key], { startLoading: true })\n              : createIdElement(\n                  { ...data.data, name: `Error (${data.data.key})` },\n                  { isError: true, startLoading: true },\n                )\n            return [data.data.key, element]\n          })\n          setIds(prev => ({ ...prev, ...Object.fromEntries(entries) }))\n        })\n        .catch(() => {\n          const entries = filtered.map(item => [\n            item.data.key,\n            createIdElement(item.data, { startLoading: true, isError: true }),\n          ])\n          setIds(prev => ({ ...prev, ...Object.fromEntries(entries) }))\n        })\n    }\n  }, [ids, client, queryClient, setIds])\n\n  return (\n    <CqsContext.Provider\n      value={{\n        validateIds,\n        addByIds,\n        ids,\n      }}\n    >\n      {children}\n    </CqsContext.Provider>\n  )\n}\n\nconst useCqsByIdsContext = () => {\n  const context = useContext(CqsContext)\n  if (!context) {\n    throw new Error(\"useCqsByIdsContext must be used within a CqByIdsProvider\")\n  }\n  return context\n}\n\nexport { CqsByIdsProvider, useCqsByIdsContext }\n"],"names":["CqsByIdsProvider","useCqsByIdsContext","CQS_QUERY_BY_ID_CHUNK_SIZE","get","client","queryClient","ids","all","Promise","chunkArray","map","chunk","data","fetchQuery","queryKey","queryFn","post","item","key","queryType","retry","init","reduce","acc","CqsContext","createContext","undefined","createIdElement","rest","name","volume","queryRelationship","entityType","isLoading","isError","startLoading","cqsAtom","atom","children","setIds","useAtom","useQueryClient","validateIds","useCallback","array","filter","addByIds","items","prev","toAdd","includes","Object","keys","length","entries","group1","fromEntries","useEffect","values","filtered","forEach","assign","then","res","element","catch","Provider","value","context","useContext","Error"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}