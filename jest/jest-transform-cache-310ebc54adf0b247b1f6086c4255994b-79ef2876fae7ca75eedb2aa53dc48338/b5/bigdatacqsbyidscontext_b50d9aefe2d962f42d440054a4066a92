bc3096e7dfb8560ec54ae04b1b13aa25
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CqsByIdsProvider: function() {
        return CqsByIdsProvider;
    },
    useCqsByIdsContext: function() {
        return useCqsByIdsContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _jotai = require("jotai");
const _utils = require("@rp/common/utils");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const CQS_QUERY_BY_ID_CHUNK_SIZE = 100;
const get = (client, queryClient)=>async (ids)=>{
        const all = await Promise.all((0, _utils.chunkArray)(ids, CQS_QUERY_BY_ID_CHUNK_SIZE).map(async (chunk)=>{
            const { data } = await queryClient.fetchQuery({
                queryKey: [
                    "cqs-by-ids-granular-cache",
                    chunk
                ],
                queryFn: ()=>client.post(`/cqs/by-ids`, chunk.map((item)=>({
                            key: item.key,
                            queryType: item.queryType
                        }))),
                retry: 3
            });
            return data;
        }));
        const init = {};
        return all.reduce((acc, item)=>_object_spread({}, acc, item), init);
    };
const CqsContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const createIdElement = (data, rest)=>{
    var _data_key, _data_name, _data_queryType, _data_volume, _data_queryRelationship, _data_entityType, _rest_isLoading, _rest_isError, _rest_startLoading;
    return {
        data: _object_spread_props(_object_spread({}, data), {
            key: (_data_key = data === null || data === void 0 ? void 0 : data.key) !== null && _data_key !== void 0 ? _data_key : "",
            name: (_data_name = data === null || data === void 0 ? void 0 : data.name) !== null && _data_name !== void 0 ? _data_name : "",
            queryType: (_data_queryType = data === null || data === void 0 ? void 0 : data.queryType) !== null && _data_queryType !== void 0 ? _data_queryType : "",
            volume: (_data_volume = data === null || data === void 0 ? void 0 : data.volume) !== null && _data_volume !== void 0 ? _data_volume : 0,
            queryRelationship: (_data_queryRelationship = data === null || data === void 0 ? void 0 : data.queryRelationship) !== null && _data_queryRelationship !== void 0 ? _data_queryRelationship : "direct",
            entityType: (_data_entityType = data === null || data === void 0 ? void 0 : data.entityType) !== null && _data_entityType !== void 0 ? _data_entityType : ""
        }),
        isLoading: (_rest_isLoading = rest === null || rest === void 0 ? void 0 : rest.isLoading) !== null && _rest_isLoading !== void 0 ? _rest_isLoading : false,
        isError: (_rest_isError = rest === null || rest === void 0 ? void 0 : rest.isError) !== null && _rest_isError !== void 0 ? _rest_isError : false,
        startLoading: (_rest_startLoading = rest === null || rest === void 0 ? void 0 : rest.startLoading) !== null && _rest_startLoading !== void 0 ? _rest_startLoading : false
    };
};
const cqsAtom = (0, _jotai.atom)({});
const CqsByIdsProvider = ({ children, client })=>{
    const [ids, setIds] = (0, _jotai.useAtom)(cqsAtom);
    const queryClient = (0, _reactquery.useQueryClient)();
    const validateIds = (0, _react.useCallback)(async (array)=>{
        const data = await get(client, queryClient)(array);
        return array.filter((item)=>{
            return !!data[item.key];
        });
    }, [
        client,
        queryClient
    ]);
    const addByIds = (0, _react.useCallback)((items)=>{
        setIds((prev)=>{
            const toAdd = items.filter((item)=>[
                    "source",
                    "rp_topic",
                    "entity",
                    "language"
                ].includes(item.queryType || "")).filter((item)=>!Object.keys(prev).includes((item === null || item === void 0 ? void 0 : item.key) || ""));
            if (!toAdd.length) return prev;
            const entries = toAdd.map((item)=>[
                    item === null || item === void 0 ? void 0 : item.key,
                    // TODO: Review how this will affect items without groups, like Languages
                    item.group1 ? createIdElement(item, {
                        isLoading: false,
                        startLoading: true
                    }) : createIdElement(item, {
                        isLoading: true
                    })
                ]);
            return _object_spread({}, prev, Object.fromEntries(entries));
        });
    }, [
        setIds
    ]);
    (0, _react.useEffect)(()=>{
        const values = Object.values(ids);
        const filtered = values.filter((item)=>item.isLoading && !item.startLoading);
        if (filtered.length > 0) {
            filtered.forEach((item)=>Object.assign(item, {
                    startLoading: true
                }));
            const items = filtered.map((item)=>item.data);
            if (!items.length) return;
            get(client, queryClient)(items).then((res)=>{
                const entries = filtered.map((data)=>{
                    const element = res[data.data.key] ? createIdElement(res[data.data.key], {
                        startLoading: true
                    }) : createIdElement(_object_spread_props(_object_spread({}, data.data), {
                        name: `Error (${data.data.key})`
                    }), {
                        isError: true,
                        startLoading: true
                    });
                    return [
                        data.data.key,
                        element
                    ];
                });
                setIds((prev)=>_object_spread({}, prev, Object.fromEntries(entries)));
            }).catch(()=>{
                const entries = filtered.map((item)=>[
                        item.data.key,
                        createIdElement(item.data, {
                            startLoading: true,
                            isError: true
                        })
                    ]);
                setIds((prev)=>_object_spread({}, prev, Object.fromEntries(entries)));
            });
        }
    }, [
        ids,
        client,
        queryClient,
        setIds
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(CqsContext.Provider, {
        value: {
            validateIds,
            addByIds,
            ids
        },
        children: children
    });
};
const useCqsByIdsContext = ()=>{
    const context = (0, _react.useContext)(CqsContext);
    if (!context) {
        throw new Error("useCqsByIdsContext must be used within a CqByIdsProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,