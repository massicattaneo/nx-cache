{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/trpc/src/lib/createTrpcHttpMocker.ts"],"sourcesContent":["import {\n  TRPCCombinedDataTransformer,\n  inferProcedureInput,\n  inferProcedureOutput,\n} from \"@trpc/server\"\nimport { CustomProcedure, CustomRouter } from \"./trpcAdaptersUtils\"\n\ntype ErrorStatuses = 400 | 401 | 402 | 403 | 404 | 500\n\ntype FulfillResponse<K extends CustomProcedure> =\n  | {\n      status?: 200\n      json: inferProcedureOutput<K>\n    }\n  | { status: ErrorStatuses; json?: Error }\n\ntype FulfillHandler<K extends CustomProcedure | CustomRouter | undefined> =\n  K extends CustomProcedure\n    ?\n        | FulfillResponse<K>\n        | ((input: inferProcedureInput<K>, response: inferProcedureOutput<K>) => FulfillResponse<K>)\n    : unknown\n\ntype TrpcPlaywrightMock<Router> = {\n  [key in keyof Router]: Router[key] extends CustomProcedure\n    ? {\n        fulfill: (response: FulfillHandler<Router[key]>) => Promise<{ clear: () => void }>\n      }\n    : TrpcPlaywrightMock<Router[key]>\n}\n\ntype Config = {\n  transformer?: TRPCCombinedDataTransformer\n}\n\ntype ConfigWthMocks = Config & {\n  mocks: Record<string, FulfillHandler<CustomProcedure>>\n}\n\nconst defaultTransformer: TRPCCombinedDataTransformer = {\n  input: { serialize: obj => obj, deserialize: obj => obj },\n  output: { serialize: obj => obj, deserialize: obj => obj },\n}\n\nconst createTypedTRPC = <Router extends CustomRouter>(\n  { transformer = defaultTransformer, mocks }: ConfigWthMocks = { mocks: {} },\n  pathParts: Array<string> = [],\n  context?: Router,\n): TrpcPlaywrightMock<Router> => {\n  return new Proxy<TrpcPlaywrightMock<Router>>({} as TrpcPlaywrightMock<Router>, {\n    get(proxy, procedureKey: keyof typeof context) {\n      if (procedureKey === \"fulfill\") {\n        return (response: FulfillHandler<typeof context>) => {\n          Object.assign(mocks, { [pathParts.join(\".\")]: response })\n          return Promise.resolve({\n            clear: () => {\n              Object.assign(mocks, { [pathParts.join(\".\")]: undefined })\n            },\n          })\n        }\n      }\n      return createTypedTRPC(\n        { transformer, mocks },\n        [...pathParts, procedureKey],\n        proxy[procedureKey],\n      )\n    },\n  })\n}\n\nexport const createTrpcHttpMocker = <Router extends CustomRouter>(config: Config = {}) => {\n  const mocks: Record<string, FulfillHandler<CustomProcedure>> = {}\n  return {\n    mock: createTypedTRPC<Router>({ ...config, mocks }),\n    hasMock: (path: string) => {\n      return mocks[path]\n    },\n    clearAllMocks: () => {\n      Object.keys(mocks).forEach(key => {\n        Object.assign(mocks, { [key]: undefined })\n      })\n    },\n  }\n}\n"],"names":["createTrpcHttpMocker","defaultTransformer","input","serialize","obj","deserialize","output","createTypedTRPC","transformer","mocks","pathParts","context","Proxy","get","proxy","procedureKey","response","Object","assign","join","Promise","resolve","clear","undefined","config","mock","hasMock","path","clearAllMocks","keys","forEach","key"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAsEaA;;;eAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/Bb,MAAMC,qBAAkD;IACtDC,OAAO;QAAEC,WAAWC,CAAAA,MAAOA;QAAKC,aAAaD,CAAAA,MAAOA;IAAI;IACxDE,QAAQ;QAAEH,WAAWC,CAAAA,MAAOA;QAAKC,aAAaD,CAAAA,MAAOA;IAAI;AAC3D;AAEA,MAAMG,kBAAkB,CACtB,EAAEC,cAAcP,kBAAkB,EAAEQ,KAAK,EAAkB,GAAG;IAAEA,OAAO,CAAC;AAAE,CAAC,EAC3EC,YAA2B,EAAE,EAC7BC;IAEA,OAAO,IAAIC,MAAkC,CAAC,GAAiC;QAC7EC,KAAIC,KAAK,EAAEC,YAAkC;YAC3C,IAAIA,iBAAiB,WAAW;gBAC9B,OAAO,CAACC;oBACNC,OAAOC,MAAM,CAACT,OAAO;wBAAE,CAACC,UAAUS,IAAI,CAAC,KAAK,EAAEH;oBAAS;oBACvD,OAAOI,QAAQC,OAAO,CAAC;wBACrBC,OAAO;4BACLL,OAAOC,MAAM,CAACT,OAAO;gCAAE,CAACC,UAAUS,IAAI,CAAC,KAAK,EAAEI;4BAAU;wBAC1D;oBACF;gBACF;YACF;YACA,OAAOhB,gBACL;gBAAEC;gBAAaC;YAAM,GACrB;mBAAIC;gBAAWK;aAAa,EAC5BD,KAAK,CAACC,aAAa;QAEvB;IACF;AACF;AAEO,MAAMf,uBAAuB,CAA8BwB,SAAiB,CAAC,CAAC;IACnF,MAAMf,QAAyD,CAAC;IAChE,OAAO;QACLgB,MAAMlB,gBAAwB,wCAAKiB;YAAQf;;QAC3CiB,SAAS,CAACC;YACR,OAAOlB,KAAK,CAACkB,KAAK;QACpB;QACAC,eAAe;YACbX,OAAOY,IAAI,CAACpB,OAAOqB,OAAO,CAACC,CAAAA;gBACzBd,OAAOC,MAAM,CAACT,OAAO;oBAAE,CAACsB,IAAI,EAAER;gBAAU;YAC1C;QACF;IACF;AACF"}