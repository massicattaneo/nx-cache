d3d75d497782cff86b26741449b18b3d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDynamicCQSName", {
    enumerable: true,
    get: function() {
        return useDynamicCQSName;
    }
});
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _utils = require("@rp/common/utils");
const _rpql = require("@rp/react/rpql");
const _common = require("@rp/react/tanstack-api/common");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _reactquery = require("@tanstack/react-query");
const _getExpressionIds = require("./getExpressionIds");
const useDynamicCQSName = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const { ids } = (0, _cqsbyids.useCqsByIdsContext)();
    const requestedIds = (0, _react.useRef)([]);
    const makeDynamicName = (0, _react.useCallback)((fields, { separator } = {
        separator: " | "
    })=>{
        var _fields_query;
        const expression = (_fields_query = fields.query) === null || _fields_query === void 0 ? void 0 : _fields_query.expression;
        const expressionQueryKeys = expression ? (0, _getExpressionIds.getExpressionIds)(expression, {
            format: "queryKey"
        }) : [];
        requestedIds.current = expressionQueryKeys.filter((queryKey)=>queryKey[0] !== "keyword");
        const macroSearchLabels = expression ? Object.values((0, _rpql.flattenQuery)(expression).filterMap).filter(_apitypes.isRpqlFlatMatchFilter).flatMap((macroFilter)=>{
            var _macroFilter_metadata;
            var _macroFilter_metadata_labels;
            return [
                ...new Set(Object.values((_macroFilter_metadata_labels = (_macroFilter_metadata = macroFilter.metadata) === null || _macroFilter_metadata === void 0 ? void 0 : _macroFilter_metadata.labels) !== null && _macroFilter_metadata_labels !== void 0 ? _macroFilter_metadata_labels : {}))
            ];
        }) : [];
        const keywords = expressionQueryKeys.filter((queryKey)=>queryKey[0] === "keyword").map((queryKey)=>queryKey[1]);
        const names = expressionQueryKeys.filter((queryKey)=>queryKey[0] !== "keyword").map((queryKey)=>{
            var _ids_queryKey_;
            return (_ids_queryKey_ = ids[queryKey[1]]) === null || _ids_queryKey_ === void 0 ? void 0 : _ids_queryKey_.data.name;
        }).filter((string)=>string);
        const watchlists = expressionQueryKeys.filter((queryKey)=>queryKey[0] === "watchlist").map(([, id])=>queryClient.getQueryData(_common.watchlistQueryKeys.watchlist(id))).map((watchlist)=>watchlist === null || watchlist === void 0 ? void 0 : watchlist.name).filter((string)=>string);
        const strings = [
            ...names,
            ...macroSearchLabels,
            ...keywords,
            ...watchlists
        ];
        const name = strings.length ? strings.join(separator) : (0, _utils.defaultSaveName)("search");
        return name;
    }, [
        ids,
        queryClient
    ]);
    const makeDynamicNameAsync = (0, _react.useCallback)(async (fields, { separator } = {
        separator: " | "
    })=>{
        var _fields_query;
        const expression = (_fields_query = fields.query) === null || _fields_query === void 0 ? void 0 : _fields_query.expression;
        const expressionQueryKeys = expression ? (0, _getExpressionIds.getExpressionIds)(expression, {
            format: "queryKey"
        }) : [];
        const watchlists = expressionQueryKeys.filter(([type, id])=>{
            return type === "watchlist" && !queryClient.getQueryData(_common.watchlistQueryKeys.watchlist(id));
        });
        await Promise.all(watchlists.map(([, watchlistId])=>queryClient.fetchQuery({
                queryKey: _common.watchlistQueryKeys.watchlist(watchlistId),
                queryFn: ()=>(0, _common.getWatchlistById)(watchlistId)
            })));
        return makeDynamicName(fields, {
            separator
        });
    }, [
        makeDynamicName,
        queryClient
    ]);
    return {
        makeDynamicName,
        makeDynamicNameAsync
    };
};

//# sourceMappingURL=data:application/json;base64,