{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/user-data-queries/src/useDynamicCQSName.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\"\nimport { CqsUserDataQueriesPostRequest, Watchlist } from \"@rp/common/api-types\"\nimport { isRpqlFlatMatchFilter } from \"@rp/common/api-types\"\nimport { defaultSaveName } from \"@rp/common/utils\"\nimport { flattenQuery } from \"@rp/react/rpql\"\nimport { getWatchlistById, watchlistQueryKeys } from \"@rp/react/tanstack-api/common\"\nimport { useCqsByIdsContext } from \"@rp/react/tanstack-api/cqs-by-ids\"\nimport { useQueryClient } from \"@tanstack/react-query\"\nimport { getExpressionIds } from \"./getExpressionIds\"\n\nconst useDynamicCQSName = () => {\n  const queryClient = useQueryClient()\n  const { ids } = useCqsByIdsContext()\n  const requestedIds = useRef<Array<Array<string>>>([])\n\n  const makeDynamicName = useCallback(\n    (fields: CqsUserDataQueriesPostRequest, { separator } = { separator: \" | \" }): string => {\n      const expression = fields.query?.expression\n\n      const expressionQueryKeys = expression\n        ? (getExpressionIds(expression, {\n            format: \"queryKey\",\n          }) as Array<Array<string>>)\n        : []\n\n      requestedIds.current = expressionQueryKeys.filter(queryKey => queryKey[0] !== \"keyword\")\n\n      const macroSearchLabels = expression\n        ? Object.values(flattenQuery(expression).filterMap)\n            .filter(isRpqlFlatMatchFilter)\n            .flatMap(macroFilter => [...new Set(Object.values(macroFilter.metadata?.labels ?? {}))])\n        : []\n\n      const keywords = expressionQueryKeys\n        .filter(queryKey => queryKey[0] === \"keyword\")\n        .map(queryKey => queryKey[1])\n\n      const names = expressionQueryKeys\n        .filter(queryKey => queryKey[0] !== \"keyword\")\n        .map(queryKey => ids[queryKey[1]]?.data.name)\n        .filter(string => string)\n\n      const watchlists = expressionQueryKeys\n        .filter(queryKey => queryKey[0] === \"watchlist\")\n        .map(([, id]) => queryClient.getQueryData<Watchlist>(watchlistQueryKeys.watchlist(id)))\n        .map(watchlist => watchlist?.name)\n        .filter(string => string)\n\n      const strings = [...names, ...macroSearchLabels, ...keywords, ...watchlists]\n      const name = strings.length ? strings.join(separator) : defaultSaveName(\"search\")\n      return name\n    },\n    [ids, queryClient],\n  )\n\n  const makeDynamicNameAsync = useCallback(\n    async (\n      fields: CqsUserDataQueriesPostRequest,\n      { separator } = { separator: \" | \" },\n    ): Promise<string> => {\n      const expression = fields.query?.expression\n      const expressionQueryKeys = expression\n        ? (getExpressionIds(expression, {\n            format: \"queryKey\",\n          }) as Array<Array<string>>)\n        : []\n      const watchlists = expressionQueryKeys.filter(([type, id]) => {\n        return (\n          type === \"watchlist\" &&\n          !queryClient.getQueryData<Watchlist>(watchlistQueryKeys.watchlist(id))\n        )\n      })\n      await Promise.all(\n        watchlists.map(([, watchlistId]) =>\n          queryClient.fetchQuery({\n            queryKey: watchlistQueryKeys.watchlist(watchlistId),\n            queryFn: () => getWatchlistById(watchlistId),\n          }),\n        ),\n      )\n      return makeDynamicName(fields, { separator })\n    },\n    [makeDynamicName, queryClient],\n  )\n\n  return { makeDynamicName, makeDynamicNameAsync }\n}\n\nexport { useDynamicCQSName }\n"],"names":["useDynamicCQSName","queryClient","useQueryClient","ids","useCqsByIdsContext","requestedIds","useRef","makeDynamicName","useCallback","fields","separator","expression","query","expressionQueryKeys","getExpressionIds","format","current","filter","queryKey","macroSearchLabels","Object","values","flattenQuery","filterMap","isRpqlFlatMatchFilter","flatMap","macroFilter","Set","metadata","labels","keywords","map","names","data","name","string","watchlists","id","getQueryData","watchlistQueryKeys","watchlist","strings","length","join","defaultSaveName","makeDynamicNameAsync","type","Promise","all","watchlistId","fetchQuery","queryFn","getWatchlistById"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}