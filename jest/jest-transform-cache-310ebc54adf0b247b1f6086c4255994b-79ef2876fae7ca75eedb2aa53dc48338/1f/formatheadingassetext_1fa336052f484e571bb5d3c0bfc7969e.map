{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n"],"names":["formatHeadingAsSetext","node","state","literalWithBreak","visit","test","value","type","EXIT","Boolean","depth","toString","options","setext"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;CAGC;;;;+BAUeA;;;eAAAA;;;gCARU;mCACH;AAOhB,SAASA,sBAAsBC,IAAI,EAAEC,KAAK;IAC/C,IAAIC,mBAAmB;IAEvB,uCAAuC;IACvC,sBAAsB;IACtBC,IAAAA,qBAAK,EAACH,MAAM,SAAUA,IAAI;QACxB,IACE,AAAC,WAAWA,QAAQ,WAAWI,IAAI,CAACJ,KAAKK,KAAK,KAC9CL,KAAKM,IAAI,KAAK,SACd;YACAJ,mBAAmB;YACnB,OAAOK,oBAAI;QACb;IACF;IAEA,OAAOC,QACL,AAAC,CAAA,CAACR,KAAKS,KAAK,IAAIT,KAAKS,KAAK,GAAG,CAAA,KAC3BC,IAAAA,2BAAQ,EAACV,SACRC,CAAAA,MAAMU,OAAO,CAACC,MAAM,IAAIV,gBAAe;AAE9C"}