6b2a46a8486921e9c0f7c31efb38ca9f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useColumnCategories", {
    enumerable: true,
    get: function() {
        return useColumnCategories;
    }
});
const _react = require("react");
const _tables = require("../../tables");
function useColumnCategories(searchQuery) {
    // Get all available categories (excluding custom and smartGrid)
    const availableCategories = (0, _react.useMemo)(()=>{
        const allCategories = Object.keys(_tables.watchlistDataTables).filter((key)=>key !== "custom" && key !== "smartGrid");
        // If there's no search query, return all categories
        if (!searchQuery.trim()) {
            return allCategories;
        }
        // Filter categories that have at least one matching column
        const query = searchQuery.toLowerCase();
        return allCategories.filter((category)=>{
            const table = _tables.watchlistDataTables[category];
            if (!table) return false;
            // Check if any column in this category matches the search
            return table.columns.some((columnDef)=>{
                var _columnDef_meta, _columnDef_meta1;
                // Skip built-in columns
                if (columnDef.id === "ticker" || columnDef.id === "name" || columnDef.id === "actions") {
                    return false;
                }
                if (((_columnDef_meta = columnDef.meta) === null || _columnDef_meta === void 0 ? void 0 : _columnDef_meta.endpoint) && ((_columnDef_meta1 = columnDef.meta) === null || _columnDef_meta1 === void 0 ? void 0 : _columnDef_meta1.columnKeys)) {
                    return columnDef.meta.columnKeys.some((columnKey)=>{
                        var _columnDef_meta;
                        const displayName = ((_columnDef_meta = columnDef.meta) === null || _columnDef_meta === void 0 ? void 0 : _columnDef_meta.menuLabel) || String(columnKey);
                        return displayName.toLowerCase().includes(query) || String(columnKey).toLowerCase().includes(query);
                    });
                }
                return false;
            });
        });
    }, [
        searchQuery
    ]);
    return {
        availableCategories
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9DdXN0b21EYXRhVmlldy9ob29rcy91c2VDb2x1bW5DYXRlZ29yaWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgRmluYW5jZURhdGFUYWJzIH0gZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3VzZVdhdGNobGlzdHNGaW5hbmNlRGF0YVRhYk5hdmlnYXRpb25cIlxuaW1wb3J0IHsgd2F0Y2hsaXN0RGF0YVRhYmxlcyB9IGZyb20gXCIuLi8uLi90YWJsZXNcIlxuXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29sdW1uQ2F0ZWdvcmllcyhzZWFyY2hRdWVyeTogc3RyaW5nKSB7XG4gIC8vIEdldCBhbGwgYXZhaWxhYmxlIGNhdGVnb3JpZXMgKGV4Y2x1ZGluZyBjdXN0b20gYW5kIHNtYXJ0R3JpZClcbiAgY29uc3QgYXZhaWxhYmxlQ2F0ZWdvcmllcyA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IGFsbENhdGVnb3JpZXMgPSBPYmplY3Qua2V5cyh3YXRjaGxpc3REYXRhVGFibGVzKS5maWx0ZXIoXG4gICAgICAoa2V5KToga2V5IGlzIEZpbmFuY2VEYXRhVGFicyA9PiBrZXkgIT09IFwiY3VzdG9tXCIgJiYga2V5ICE9PSBcInNtYXJ0R3JpZFwiLFxuICAgICkgYXMgQXJyYXk8RmluYW5jZURhdGFUYWJzPlxuXG4gICAgLy8gSWYgdGhlcmUncyBubyBzZWFyY2ggcXVlcnksIHJldHVybiBhbGwgY2F0ZWdvcmllc1xuICAgIGlmICghc2VhcmNoUXVlcnkudHJpbSgpKSB7XG4gICAgICByZXR1cm4gYWxsQ2F0ZWdvcmllc1xuICAgIH1cblxuICAgIC8vIEZpbHRlciBjYXRlZ29yaWVzIHRoYXQgaGF2ZSBhdCBsZWFzdCBvbmUgbWF0Y2hpbmcgY29sdW1uXG4gICAgY29uc3QgcXVlcnkgPSBzZWFyY2hRdWVyeS50b0xvd2VyQ2FzZSgpXG4gICAgcmV0dXJuIGFsbENhdGVnb3JpZXMuZmlsdGVyKGNhdGVnb3J5ID0+IHtcbiAgICAgIGNvbnN0IHRhYmxlID0gd2F0Y2hsaXN0RGF0YVRhYmxlc1tjYXRlZ29yeV1cbiAgICAgIGlmICghdGFibGUpIHJldHVybiBmYWxzZVxuXG4gICAgICAvLyBDaGVjayBpZiBhbnkgY29sdW1uIGluIHRoaXMgY2F0ZWdvcnkgbWF0Y2hlcyB0aGUgc2VhcmNoXG4gICAgICByZXR1cm4gdGFibGUuY29sdW1ucy5zb21lKGNvbHVtbkRlZiA9PiB7XG4gICAgICAgIC8vIFNraXAgYnVpbHQtaW4gY29sdW1uc1xuICAgICAgICBpZiAoY29sdW1uRGVmLmlkID09PSBcInRpY2tlclwiIHx8IGNvbHVtbkRlZi5pZCA9PT0gXCJuYW1lXCIgfHwgY29sdW1uRGVmLmlkID09PSBcImFjdGlvbnNcIikge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbHVtbkRlZi5tZXRhPy5lbmRwb2ludCAmJiBjb2x1bW5EZWYubWV0YT8uY29sdW1uS2V5cykge1xuICAgICAgICAgIHJldHVybiBjb2x1bW5EZWYubWV0YS5jb2x1bW5LZXlzLnNvbWUoKGNvbHVtbktleTogc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGNvbHVtbkRlZi5tZXRhPy5tZW51TGFiZWwgfHwgU3RyaW5nKGNvbHVtbktleSlcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIGRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkpIHx8XG4gICAgICAgICAgICAgIFN0cmluZyhjb2x1bW5LZXkpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0pXG4gICAgfSlcbiAgfSwgW3NlYXJjaFF1ZXJ5XSlcblxuICByZXR1cm4geyBhdmFpbGFibGVDYXRlZ29yaWVzIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VDb2x1bW5DYXRlZ29yaWVzIiwic2VhcmNoUXVlcnkiLCJhdmFpbGFibGVDYXRlZ29yaWVzIiwidXNlTWVtbyIsImFsbENhdGVnb3JpZXMiLCJPYmplY3QiLCJrZXlzIiwid2F0Y2hsaXN0RGF0YVRhYmxlcyIsImZpbHRlciIsImtleSIsInRyaW0iLCJxdWVyeSIsInRvTG93ZXJDYXNlIiwiY2F0ZWdvcnkiLCJ0YWJsZSIsImNvbHVtbnMiLCJzb21lIiwiY29sdW1uRGVmIiwiaWQiLCJtZXRhIiwiZW5kcG9pbnQiLCJjb2x1bW5LZXlzIiwiY29sdW1uS2V5IiwiZGlzcGxheU5hbWUiLCJtZW51TGFiZWwiLCJTdHJpbmciLCJpbmNsdWRlcyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBSWdCQTs7O2VBQUFBOzs7dUJBSlE7d0JBRVk7QUFFN0IsU0FBU0Esb0JBQW9CQyxXQUFtQjtJQUNyRCxnRUFBZ0U7SUFDaEUsTUFBTUMsc0JBQXNCQyxJQUFBQSxjQUFPLEVBQUM7UUFDbEMsTUFBTUMsZ0JBQWdCQyxPQUFPQyxJQUFJLENBQUNDLDJCQUFtQixFQUFFQyxNQUFNLENBQzNELENBQUNDLE1BQWdDQSxRQUFRLFlBQVlBLFFBQVE7UUFHL0Qsb0RBQW9EO1FBQ3BELElBQUksQ0FBQ1IsWUFBWVMsSUFBSSxJQUFJO1lBQ3ZCLE9BQU9OO1FBQ1Q7UUFFQSwyREFBMkQ7UUFDM0QsTUFBTU8sUUFBUVYsWUFBWVcsV0FBVztRQUNyQyxPQUFPUixjQUFjSSxNQUFNLENBQUNLLENBQUFBO1lBQzFCLE1BQU1DLFFBQVFQLDJCQUFtQixDQUFDTSxTQUFTO1lBQzNDLElBQUksQ0FBQ0MsT0FBTyxPQUFPO1lBRW5CLDBEQUEwRDtZQUMxRCxPQUFPQSxNQUFNQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsQ0FBQUE7b0JBTXBCQSxpQkFBNEJBO2dCQUxoQyx3QkFBd0I7Z0JBQ3hCLElBQUlBLFVBQVVDLEVBQUUsS0FBSyxZQUFZRCxVQUFVQyxFQUFFLEtBQUssVUFBVUQsVUFBVUMsRUFBRSxLQUFLLFdBQVc7b0JBQ3RGLE9BQU87Z0JBQ1Q7Z0JBRUEsSUFBSUQsRUFBQUEsa0JBQUFBLFVBQVVFLElBQUksY0FBZEYsc0NBQUFBLGdCQUFnQkcsUUFBUSxPQUFJSCxtQkFBQUEsVUFBVUUsSUFBSSxjQUFkRix1Q0FBQUEsaUJBQWdCSSxVQUFVLEdBQUU7b0JBQzFELE9BQU9KLFVBQVVFLElBQUksQ0FBQ0UsVUFBVSxDQUFDTCxJQUFJLENBQUMsQ0FBQ007NEJBQ2pCTDt3QkFBcEIsTUFBTU0sY0FBY04sRUFBQUEsa0JBQUFBLFVBQVVFLElBQUksY0FBZEYsc0NBQUFBLGdCQUFnQk8sU0FBUyxLQUFJQyxPQUFPSDt3QkFDeEQsT0FDRUMsWUFBWVgsV0FBVyxHQUFHYyxRQUFRLENBQUNmLFVBQ25DYyxPQUFPSCxXQUFXVixXQUFXLEdBQUdjLFFBQVEsQ0FBQ2Y7b0JBRTdDO2dCQUNGO2dCQUNBLE9BQU87WUFDVDtRQUNGO0lBQ0YsR0FBRztRQUFDVjtLQUFZO0lBRWhCLE9BQU87UUFBRUM7SUFBb0I7QUFDL0IifQ==