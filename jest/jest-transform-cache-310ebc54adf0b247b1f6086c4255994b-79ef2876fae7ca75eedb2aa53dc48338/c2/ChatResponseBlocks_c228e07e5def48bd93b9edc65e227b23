c969ac7bb01b5b29efde4b1457b9db14
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ChatResponseBlocks", {
    enumerable: true,
    get: function() {
        return ChatResponseBlocks;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _core = require("@rp/react/web/mui/core");
const _CollapsableBlock = require("./CollapsableBlock");
const _EngineBlock = require("./EngineBlock");
const _TextBlock = require("./TextBlock");
const ChatResponseBlocks = ({ responseBlocks, mode, inlineAttributionProps })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        children: responseBlocks.map((block, index)=>{
            switch(block.type){
                case "COLLAPSE":
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_CollapsableBlock.CollapsableBlock, {
                        title: block.title,
                        isReady: mode === "history",
                        contents: block.content.value,
                        inlineAttributionProps: inlineAttributionProps
                    }, block.title);
                case "TEXT":
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_TextBlock.TextBlock, {
                        isReady: mode === "history",
                        contents: block.value,
                        inlineAttributionProps: inlineAttributionProps
                    }, index);
                case "ENGINE":
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_EngineBlock.EngineBlock, {
                        content: block.answer
                    }, index);
                default:
                    return null;
            }
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L0NoYXQvQ2hhdFJlc3BvbnNlL0NoYXRSZXNwb25zZUJsb2Nrcy9DaGF0UmVzcG9uc2VCbG9ja3MudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1bW1hcnlTdGF0ZSwgY3JlYXRlQ2h1bmtNYXAgfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyBTdG9yZWRSZXNwb25zZUJsb2NrTGlzdCB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2NoYXRcIlxuaW1wb3J0IHsgQm94IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgT25Vc2VySW50ZXJhY3Rpb25Qcm9wcyB9IGZyb20gXCIuLi9DaGF0UmVzcG9uc2VcIlxuaW1wb3J0IHsgQ29sbGFwc2FibGVCbG9jayB9IGZyb20gXCIuL0NvbGxhcHNhYmxlQmxvY2tcIlxuaW1wb3J0IHsgRW5naW5lQmxvY2sgfSBmcm9tIFwiLi9FbmdpbmVCbG9ja1wiXG5pbXBvcnQgeyBUZXh0QmxvY2sgfSBmcm9tIFwiLi9UZXh0QmxvY2tcIlxuXG50eXBlIENodW5rTWFwID0gUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlQ2h1bmtNYXA+W1wiY2h1bmtNYXBcIl1cbnR5cGUgRXh0ZXJuYWxNYXAgPSBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVDaHVua01hcD5bXCJleHRlcm5hbE1hcFwiXVxuXG50eXBlIFByb3BzID0ge1xuICByZXNwb25zZUJsb2NrczogU3RvcmVkUmVzcG9uc2VCbG9ja0xpc3QgfCBTdW1tYXJ5U3RhdGVbXCJyZXNwb25zZUJsb2Nrc1wiXVxuICBtb2RlOiBcImN1cnJlbnRcIiB8IFwiaGlzdG9yeVwiXG4gIGlubGluZUF0dHJpYnV0aW9uUHJvcHM6IHtcbiAgICBjaHVua01hcDogQ2h1bmtNYXBcbiAgICBleHRlcm5hbE1hcDogRXh0ZXJuYWxNYXBcbiAgICBvblVzZXJJbnRlcmFjdGlvbjogKHByb3BzOiBPblVzZXJJbnRlcmFjdGlvblByb3BzKSA9PiB2b2lkXG4gIH1cbn1cblxuY29uc3QgQ2hhdFJlc3BvbnNlQmxvY2tzID0gKHsgcmVzcG9uc2VCbG9ja3MsIG1vZGUsIGlubGluZUF0dHJpYnV0aW9uUHJvcHMgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAge3Jlc3BvbnNlQmxvY2tzLm1hcCgoYmxvY2ssIGluZGV4KSA9PiB7XG4gICAgICAgIHN3aXRjaCAoYmxvY2sudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJDT0xMQVBTRVwiOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPENvbGxhcHNhYmxlQmxvY2tcbiAgICAgICAgICAgICAgICBrZXk9e2Jsb2NrLnRpdGxlfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtibG9jay50aXRsZX1cbiAgICAgICAgICAgICAgICBpc1JlYWR5PXttb2RlID09PSBcImhpc3RvcnlcIn1cbiAgICAgICAgICAgICAgICBjb250ZW50cz17YmxvY2suY29udGVudC52YWx1ZX1cbiAgICAgICAgICAgICAgICBpbmxpbmVBdHRyaWJ1dGlvblByb3BzPXtpbmxpbmVBdHRyaWJ1dGlvblByb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgY2FzZSBcIlRFWFRcIjpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxUZXh0QmxvY2tcbiAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgIGlzUmVhZHk9e21vZGUgPT09IFwiaGlzdG9yeVwifVxuICAgICAgICAgICAgICAgIGNvbnRlbnRzPXtibG9jay52YWx1ZX1cbiAgICAgICAgICAgICAgICBpbmxpbmVBdHRyaWJ1dGlvblByb3BzPXtpbmxpbmVBdHRyaWJ1dGlvblByb3BzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgY2FzZSBcIkVOR0lORVwiOlxuICAgICAgICAgICAgcmV0dXJuIDxFbmdpbmVCbG9jayBrZXk9e2luZGV4fSBjb250ZW50PXtibG9jay5hbnN3ZXJ9IC8+XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH0pfVxuICAgIDwvQm94PlxuICApXG59XG5cbmV4cG9ydCB7IENoYXRSZXNwb25zZUJsb2NrcyB9XG4iXSwibmFtZXMiOlsiQ2hhdFJlc3BvbnNlQmxvY2tzIiwicmVzcG9uc2VCbG9ja3MiLCJtb2RlIiwiaW5saW5lQXR0cmlidXRpb25Qcm9wcyIsIkJveCIsIm1hcCIsImJsb2NrIiwiaW5kZXgiLCJ0eXBlIiwiQ29sbGFwc2FibGVCbG9jayIsInRpdGxlIiwiaXNSZWFkeSIsImNvbnRlbnRzIiwiY29udGVudCIsInZhbHVlIiwiVGV4dEJsb2NrIiwiRW5naW5lQmxvY2siLCJhbnN3ZXIiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBeURTQTs7O2VBQUFBOzs7O3NCQXZEVztrQ0FFYTs2QkFDTDsyQkFDRjtBQWUxQixNQUFNQSxxQkFBcUIsQ0FBQyxFQUFFQyxjQUFjLEVBQUVDLElBQUksRUFBRUMsc0JBQXNCLEVBQVM7SUFDakYscUJBQ0UscUJBQUNDLFNBQUc7a0JBQ0RILGVBQWVJLEdBQUcsQ0FBQyxDQUFDQyxPQUFPQztZQUMxQixPQUFRRCxNQUFNRSxJQUFJO2dCQUNoQixLQUFLO29CQUNILHFCQUNFLHFCQUFDQyxrQ0FBZ0I7d0JBRWZDLE9BQU9KLE1BQU1JLEtBQUs7d0JBQ2xCQyxTQUFTVCxTQUFTO3dCQUNsQlUsVUFBVU4sTUFBTU8sT0FBTyxDQUFDQyxLQUFLO3dCQUM3Qlgsd0JBQXdCQTt1QkFKbkJHLE1BQU1JLEtBQUs7Z0JBUXRCLEtBQUs7b0JBQ0gscUJBQ0UscUJBQUNLLG9CQUFTO3dCQUVSSixTQUFTVCxTQUFTO3dCQUNsQlUsVUFBVU4sTUFBTVEsS0FBSzt3QkFDckJYLHdCQUF3QkE7dUJBSG5CSTtnQkFPWCxLQUFLO29CQUNILHFCQUFPLHFCQUFDUyx3QkFBVzt3QkFBYUgsU0FBU1AsTUFBTVcsTUFBTTt1QkFBNUJWO2dCQUMzQjtvQkFDRSxPQUFPO1lBQ1g7UUFDRjs7QUFHTiJ9