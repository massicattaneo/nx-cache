b56d6c4a0fc334ae63ddb1f7d41560d5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "trpcHttpAdapter", {
    enumerable: true,
    get: function() {
        return trpcHttpAdapter;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _createTrpcHttpMocker = require("./createTrpcHttpMocker");
const _trpcAdaptersUtils = require("./trpcAdaptersUtils");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function trpcHttpAdapter({ router, createContext, onFulfill, onContinue }) {
    const paths = (0, _trpcAdaptersUtils.getTrpcRouterPaths)(router);
    const { mock, hasMock, clearAllMocks } = (0, _createTrpcHttpMocker.createTrpcHttpMocker)();
    const handler = async function callProcedure(params) {
        const ctx = await createContext(params);
        const procedure = Object.values(router._def.procedures).find((proc)=>{
            if (!(0, _trpcAdaptersUtils.isProcedure)(proc)) return false;
            const meta = (0, _trpcAdaptersUtils.isOpenApiMeta)(proc._def.meta) ? proc._def.meta : null;
            if (!meta) return false;
            const { path, method } = meta.openapi;
            const { match } = (0, _trpcAdaptersUtils.matchPattern)(ctx.request.url.pathname, path);
            return method === ctx.request.method && match;
        });
        if (procedure && (0, _trpcAdaptersUtils.isProcedure)(procedure)) {
            var _paths_find;
            const { path = "" } = (_paths_find = paths.find(({ procedure: p })=>p === procedure)) !== null && _paths_find !== void 0 ? _paths_find : {};
            const mockResponse = hasMock(path);
            const meta = (0, _trpcAdaptersUtils.isOpenApiMeta)(procedure._def.meta) ? procedure._def.meta : null;
            var _meta_openapi_path;
            const rawInput = _object_spread({}, _qs.default.parse(ctx.request.url.search, {
                ignoreQueryPrefix: true,
                decoder (str, defaultDecoder, charset, type) {
                    if (type === "value") {
                        if (str === "true") return true;
                        if (str === "false") return false;
                        const num = Number(str);
                        if (!isNaN(num) && str.trim() !== "") return num;
                    }
                    return defaultDecoder(str);
                }
            }), (0, _trpcAdaptersUtils.extractParams)(ctx.request.url.pathname, (_meta_openapi_path = meta === null || meta === void 0 ? void 0 : meta.openapi.path) !== null && _meta_openapi_path !== void 0 ? _meta_openapi_path : ""), ctx.request.jsonBody instanceof Object ? ctx.request.jsonBody : {});
            const json = await procedure({
                ctx,
                getRawInput: async ()=>rawInput,
                path: ctx.request.url.pathname,
                type: procedure._def.type
            });
            if (mockResponse) {
                const res = mockResponse instanceof Function ? mockResponse(rawInput, json) : mockResponse;
                var _res_status;
                const response = {
                    status: (_res_status = res.status) !== null && _res_status !== void 0 ? _res_status : 200,
                    json: res.json
                };
                var _onFulfill;
                return (_onFulfill = onFulfill === null || onFulfill === void 0 ? void 0 : onFulfill(params, response)) !== null && _onFulfill !== void 0 ? _onFulfill : res;
            }
            const res = {
                status: 200,
                json
            };
            var _onFulfill1;
            return (_onFulfill1 = onFulfill === null || onFulfill === void 0 ? void 0 : onFulfill(params, res)) !== null && _onFulfill1 !== void 0 ? _onFulfill1 : res;
        }
        return onContinue === null || onContinue === void 0 ? void 0 : onContinue(params);
    };
    return {
        handler,
        mock,
        clearAllMocks
    };
}

//# sourceMappingURL=data:application/json;base64,