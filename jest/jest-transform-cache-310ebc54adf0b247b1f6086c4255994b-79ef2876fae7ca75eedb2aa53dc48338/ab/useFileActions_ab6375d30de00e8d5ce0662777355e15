1396a03fb0732e77ee822a15bc153282
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFileActions", {
    enumerable: true,
    get: function() {
        return useFileActions;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _utils = require("@rp/common/utils");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _icons = require("@rp/react/web/mui/icons");
const _router = /*#__PURE__*/ _interop_require_wildcard(require("@rp/react/web/router"));
const _downloadFile = require("./downloadFile");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const useFileActions = ({ isForFilesPage = false } = {})=>{
    const { setDocumentData, removeDocumentData } = (0, _providers.useDocumentViewerData)();
    const [, setHashParams] = (0, _hooks.useHashParams)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { deleteFilesModal: { handleOpen: handleOpenDeleteFiles }, editFileNameModal: { handleOpen: handleOpenEditText }, shareInfoModal: { handleOpen: openInfoModal } } = (0, _providers.useModal)();
    const openDocumentViewer = (file)=>{
        if ((0, _utils.isFileStatusCompleted)(file.status)) {
            setDocumentData({
                documentId: file.id
            });
            if (isForFilesPage) {
                navigate(_router.FILES_ID_ROUTE.replace(":id", file.id));
                setHashParams({
                    private: "true"
                });
            } else {
                setHashParams({
                    document: file.id,
                    private: "true"
                });
            }
        }
    };
    const closeDocumentViewer = ()=>{
        removeDocumentData();
        navigate(_router.FILES_ROUTE, {
            replace: true
        });
    };
    // ****************
    // Action Controls
    // ****************
    const onDownload = (file, downloadFormat)=>{
        (0, _downloadFile.downloadFile)(file, downloadFormat);
    // TODO
    // setIsHover({})
    };
    const onEdit = (file)=>{
        handleOpenEditText({
            value: (0, _utils.removeFileExtension)(file.name),
            description: "Choose a name for this file",
            id: file.id,
            editHook: _file.usePatchFile
        });
    };
    const deleteFiles = (filesIds)=>{
        return new Promise((resolve)=>{
            handleOpenDeleteFiles({
                filesIds,
                onSuccess: ()=>resolve(undefined)
            });
        });
    };
    const chatWithFiles = (0, _react.useCallback)((filesIds)=>{
        const state = {
            filesIds
        };
        navigate(_router.CHAT_ROUTE, {
            state
        });
    }, [
        navigate
    ]);
    const actions = {
        open: {
            id: "open",
            label: "Open",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.OpenInNew, {}),
            onClick: (file)=>openDocumentViewer(file)
        },
        close: {
            id: "close",
            label: "Close",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Close, {}),
            onClick: closeDocumentViewer
        },
        download: {
            id: "download",
            label: "Download",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Download, {}),
            onClick: ()=>{},
            nestedActions: [
                {
                    id: "original",
                    label: "Original",
                    onClick: (file)=>onDownload(file, null),
                    icon: null
                },
                {
                    id: "annotated",
                    label: "Annotations",
                    onClick: (file)=>onDownload(file, "annotated"),
                    icon: null
                }
            ]
        },
        rename: {
            id: "rename",
            label: "Rename",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Edit, {}),
            onClick: (file)=>onEdit(file)
        },
        remove: {
            id: "remove",
            label: "Delete",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Delete, {}),
            onClick: (file)=>{
                return new Promise((resolve)=>{
                    handleOpenDeleteFiles({
                        filesIds: [
                            file.id
                        ],
                        onSuccess: ()=>resolve(undefined)
                    });
                });
            }
        },
        view: {
            id: "view",
            label: "View",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.RemoveRedEye, {}),
            onClick: (file)=>openDocumentViewer(file)
        },
        chat: {
            id: "chat",
            label: "Chat",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ChatBubbleOutline, {}),
            onClick: (file)=>{
                const state = {
                    filesIds: [
                        file.id
                    ]
                };
                navigate(_router.CHAT_ROUTE, {
                    state
                });
            }
        },
        share: {
            id: "share",
            label: "Share",
            icon: (file)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ShareIcon, {
                    size: 24,
                    shared: !!(file.sharedWith && file.sharedWith.length > 0)
                }),
            onClick: (file)=>{
                const data = _object_spread_props(_object_spread({}, file), {
                    dataType: "file"
                });
                openInfoModal(data);
            }
        }
    };
    return {
        actions,
        openDocumentViewer,
        deleteFiles,
        chatWithFiles
    };
};

//# sourceMappingURL=data:application/json;base64,