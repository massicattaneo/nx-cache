{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/common/trpc/src/lib/trpcHttpAdapter.ts"],"sourcesContent":["import qs from \"qs\"\nimport { createTrpcHttpMocker } from \"./createTrpcHttpMocker\"\nimport {\n  CustomRouter,\n  extractParams,\n  getTrpcRouterPaths,\n  isOpenApiMeta,\n  isProcedure,\n  matchPattern,\n} from \"./trpcAdaptersUtils\"\n\nexport function trpcHttpAdapter<\n  ContextParam,\n  TRouter extends CustomRouter,\n  TContext extends {\n    request: {\n      headers: Record<string, string>\n      method: \"GET\" | \"POST\" | \"PATCH\" | \"PUT\" | \"DELETE\"\n      url: URL\n      jsonBody: unknown\n      rawBody: null | string\n    }\n  } = {\n    request: {\n      headers: Record<string, string>\n      method: \"GET\" | \"POST\" | \"PATCH\" | \"PUT\" | \"DELETE\"\n      url: URL\n      jsonBody: unknown\n      rawBody: null | string\n    }\n  },\n>({\n  router,\n  createContext,\n  onFulfill,\n  onContinue,\n}: {\n  router: TRouter\n  createContext: (params: ContextParam) => Promise<TContext>\n  onFulfill?: (\n    params: ContextParam,\n    response: { status?: number; json: unknown },\n  ) => { status?: number; json: unknown }\n  onContinue?: (params: ContextParam) => undefined\n}) {\n  const paths = getTrpcRouterPaths(router)\n  const { mock, hasMock, clearAllMocks } = createTrpcHttpMocker<TRouter>()\n  const handler = async function callProcedure(params: ContextParam) {\n    const ctx = await createContext(params)\n    const procedure = Object.values(router._def.procedures).find(proc => {\n      if (!isProcedure(proc)) return false\n      const meta = isOpenApiMeta(proc._def.meta) ? proc._def.meta : null\n      if (!meta) return false\n      const { path, method } = meta.openapi\n      const { match } = matchPattern(ctx.request.url.pathname, path)\n      return method === ctx.request.method && match\n    })\n    if (procedure && isProcedure(procedure)) {\n      const { path = \"\" } = paths.find(({ procedure: p }) => p === procedure) ?? {}\n      const mockResponse = hasMock(path)\n      const meta = isOpenApiMeta(procedure._def.meta) ? procedure._def.meta : null\n      const rawInput = {\n        ...qs.parse(ctx.request.url.search, {\n          ignoreQueryPrefix: true,\n          decoder(str, defaultDecoder, charset, type) {\n            if (type === \"value\") {\n              if (str === \"true\") return true\n              if (str === \"false\") return false\n              const num = Number(str)\n              if (!isNaN(num) && str.trim() !== \"\") return num\n            }\n            return defaultDecoder(str)\n          },\n        }),\n        ...extractParams(ctx.request.url.pathname, meta?.openapi.path ?? \"\"),\n        ...(ctx.request.jsonBody instanceof Object ? ctx.request.jsonBody : {}),\n      }\n      const json = await procedure({\n        ctx,\n        getRawInput: async () => rawInput,\n        path: ctx.request.url.pathname,\n        type: procedure._def.type,\n      })\n      if (mockResponse) {\n        const res = mockResponse instanceof Function ? mockResponse(rawInput, json) : mockResponse\n        const response = { status: res.status ?? 200, json: res.json }\n        return onFulfill?.(params, response) ?? res\n      }\n      const res = { status: 200, json }\n      return onFulfill?.(params, res) ?? res\n    }\n    return onContinue?.(params)\n  }\n  return { handler, mock, clearAllMocks }\n}\n"],"names":["trpcHttpAdapter","router","createContext","onFulfill","onContinue","paths","getTrpcRouterPaths","mock","hasMock","clearAllMocks","createTrpcHttpMocker","handler","callProcedure","params","ctx","procedure","Object","values","_def","procedures","find","proc","isProcedure","meta","isOpenApiMeta","path","method","openapi","match","matchPattern","request","url","pathname","p","mockResponse","rawInput","qs","parse","search","ignoreQueryPrefix","decoder","str","defaultDecoder","charset","type","num","Number","isNaN","trim","extractParams","jsonBody","json","getRawInput","res","Function","response","status"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}