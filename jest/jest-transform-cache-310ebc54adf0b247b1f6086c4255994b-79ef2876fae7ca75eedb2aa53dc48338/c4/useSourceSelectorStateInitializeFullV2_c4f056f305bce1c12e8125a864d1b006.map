{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/source-selector/src/hooks/useSourceSelectorStateInitializeFullV2.ts"],"sourcesContent":["import { type Dispatch, type SetStateAction, useEffect, useMemo } from \"react\"\nimport { SourceSelectorSubmissionV2 } from \"@rp/react/tanstack-api/content\"\nimport {\n  SourceSelectionInitialStateFullV2,\n  SourceSelectorSelectedCategoryInfo,\n  SourceSelectorSelectedSourceInfoV2,\n} from \"../sourceSelector.types\"\n\n// const defaultInitialSourceSelectorState: SourceSelectorSubmissionV2 = {\n//   isFilterInclude: true,\n//   sourceIDs: [],\n//   categoryIDs: [],\n// }\n\ntype UseInitializeSourceSelectorStateProps = {\n  initialState: SourceSelectorSubmissionV2 | undefined\n  setSelectedSources: Dispatch<SetStateAction<Array<SourceSelectorSelectedSourceInfoV2>>>\n  setSelectedCategories: Dispatch<SetStateAction<Array<SourceSelectorSelectedCategoryInfo>>>\n  setIsFilterInclude: Dispatch<SetStateAction<boolean>>\n}\n\ntype UseSourceSelectorStateInitializeFullState = {\n  initialStateFull: SourceSelectionInitialStateFullV2 | null\n  isInitializingState: boolean\n  hasInitializingError: boolean\n}\n\nfunction useSourceSelectorStateInitializeFullV2({\n  // initialState = defaultInitialSourceSelectorState,\n  setSelectedSources,\n  setIsFilterInclude,\n}: UseInitializeSourceSelectorStateProps): UseSourceSelectorStateInitializeFullState {\n  // TODO: get initial state from API\n  const initialStateFull: SourceSelectionInitialStateFullV2 = useMemo(\n    () => ({\n      isFilterInclude: true,\n      sources: [] as Array<SourceSelectorSelectedSourceInfoV2>,\n      categories: [] as Array<SourceSelectorSelectedCategoryInfo>,\n    }),\n    [],\n  )\n\n  useEffect(() => {\n    setSelectedSources(initialStateFull.sources)\n    setIsFilterInclude(initialStateFull.isFilterInclude)\n  }, [initialStateFull, setIsFilterInclude, setSelectedSources])\n\n  return {\n    initialStateFull,\n    isInitializingState: false,\n    hasInitializingError: false,\n  }\n}\n\nexport { useSourceSelectorStateInitializeFullV2 }\nexport type { UseSourceSelectorStateInitializeFullState, UseInitializeSourceSelectorStateProps }\n"],"names":["useSourceSelectorStateInitializeFullV2","setSelectedSources","setIsFilterInclude","initialStateFull","useMemo","isFilterInclude","sources","categories","useEffect","isInitializingState","hasInitializingError"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAsDSA;;;eAAAA;;;uBAtD8D;AA2BvE,SAASA,uCAAuC,EAC9C,oDAAoD;AACpDC,kBAAkB,EAClBC,kBAAkB,EACoB;IACtC,mCAAmC;IACnC,MAAMC,mBAAsDC,IAAAA,cAAO,EACjE,IAAO,CAAA;YACLC,iBAAiB;YACjBC,SAAS,EAAE;YACXC,YAAY,EAAE;QAChB,CAAA,GACA,EAAE;IAGJC,IAAAA,gBAAS,EAAC;QACRP,mBAAmBE,iBAAiBG,OAAO;QAC3CJ,mBAAmBC,iBAAiBE,eAAe;IACrD,GAAG;QAACF;QAAkBD;QAAoBD;KAAmB;IAE7D,OAAO;QACLE;QACAM,qBAAqB;QACrBC,sBAAsB;IACxB;AACF"}