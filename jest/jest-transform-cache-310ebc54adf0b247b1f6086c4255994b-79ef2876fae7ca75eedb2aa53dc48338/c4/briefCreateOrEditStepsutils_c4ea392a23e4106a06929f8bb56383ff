86b9a3d2ace1951520aab45c79b974bd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getHasValidDaysData: function() {
        return getHasValidDaysData;
    },
    getHasValidTimeData: function() {
        return getHasValidTimeData;
    },
    getIsScheduleValid: function() {
        return getIsScheduleValid;
    },
    getIsSelectNameStepDisabled: function() {
        return getIsSelectNameStepDisabled;
    },
    getIsSelectScheduleStepDisabled: function() {
        return getIsSelectScheduleStepDisabled;
    },
    getIsSelectWatchlistStepDisabled: function() {
        return getIsSelectWatchlistStepDisabled;
    }
});
const _apitypes = require("@rp/common/api-types");
const getHasValidDaysData = (cronExp)=>cronExp.split(/\s+/gm)[4] !== "*";
const getHasValidTimeData = (cronExp)=>cronExp.split(/\s+/gm).slice(0, 2).every((datum)=>isFinite(+datum));
const getIsScheduleValid = (schedule)=>!!(schedule.schedulerExpression && getHasValidDaysData(schedule.schedulerExpression) && getHasValidTimeData(schedule.schedulerExpression) && schedule.timezone && schedule.destination && (0, _apitypes.isEmailNotificationSchedule)(schedule) && schedule.destinationParams.emails.length > 0);
const getIsSelectWatchlistStepDisabled = (form, hasCompanies)=>!hasCompanies || !form.watchlistId;
const getIsSelectScheduleStepDisabled = (form)=>!getIsScheduleValid(form.schedule);
const getIsSelectNameStepDisabled = (form)=>!form.name;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy91dGlscy9icmllZkNyZWF0ZU9yRWRpdFN0ZXBzLnV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vdGlmaWNhdGlvblNjaGVkdWxlLCBpc0VtYWlsTm90aWZpY2F0aW9uU2NoZWR1bGUgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgQnJpZWZDb25maWdGb3JtIH0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvYnJpZWZcIlxuXG5jb25zdCBnZXRIYXNWYWxpZERheXNEYXRhID0gKGNyb25FeHA6IHN0cmluZyk6IGJvb2xlYW4gPT4gY3JvbkV4cC5zcGxpdCgvXFxzKy9nbSlbNF0gIT09IFwiKlwiXG5cbmNvbnN0IGdldEhhc1ZhbGlkVGltZURhdGEgPSAoY3JvbkV4cDogc3RyaW5nKTogYm9vbGVhbiA9PlxuICBjcm9uRXhwXG4gICAgLnNwbGl0KC9cXHMrL2dtKVxuICAgIC5zbGljZSgwLCAyKVxuICAgIC5ldmVyeShkYXR1bSA9PiBpc0Zpbml0ZSgrZGF0dW0pKVxuXG5jb25zdCBnZXRJc1NjaGVkdWxlVmFsaWQgPSAoc2NoZWR1bGU6IE5vdGlmaWNhdGlvblNjaGVkdWxlKTogYm9vbGVhbiA9PlxuICAhIShcbiAgICBzY2hlZHVsZS5zY2hlZHVsZXJFeHByZXNzaW9uICYmXG4gICAgZ2V0SGFzVmFsaWREYXlzRGF0YShzY2hlZHVsZS5zY2hlZHVsZXJFeHByZXNzaW9uKSAmJlxuICAgIGdldEhhc1ZhbGlkVGltZURhdGEoc2NoZWR1bGUuc2NoZWR1bGVyRXhwcmVzc2lvbikgJiZcbiAgICBzY2hlZHVsZS50aW1lem9uZSAmJlxuICAgIHNjaGVkdWxlLmRlc3RpbmF0aW9uICYmXG4gICAgaXNFbWFpbE5vdGlmaWNhdGlvblNjaGVkdWxlKHNjaGVkdWxlKSAmJlxuICAgIHNjaGVkdWxlLmRlc3RpbmF0aW9uUGFyYW1zLmVtYWlscy5sZW5ndGggPiAwXG4gIClcblxuY29uc3QgZ2V0SXNTZWxlY3RXYXRjaGxpc3RTdGVwRGlzYWJsZWQgPSAoZm9ybTogQnJpZWZDb25maWdGb3JtLCBoYXNDb21wYW5pZXM6IGJvb2xlYW4pOiBib29sZWFuID0+XG4gICFoYXNDb21wYW5pZXMgfHwgIWZvcm0ud2F0Y2hsaXN0SWRcblxuY29uc3QgZ2V0SXNTZWxlY3RTY2hlZHVsZVN0ZXBEaXNhYmxlZCA9IChmb3JtOiBCcmllZkNvbmZpZ0Zvcm0pOiBib29sZWFuID0+XG4gICFnZXRJc1NjaGVkdWxlVmFsaWQoZm9ybS5zY2hlZHVsZSlcblxuY29uc3QgZ2V0SXNTZWxlY3ROYW1lU3RlcERpc2FibGVkID0gKGZvcm06IEJyaWVmQ29uZmlnRm9ybSk6IGJvb2xlYW4gPT4gIWZvcm0ubmFtZVxuXG5leHBvcnQge1xuICBnZXRJc1NlbGVjdFdhdGNobGlzdFN0ZXBEaXNhYmxlZCxcbiAgZ2V0SXNTZWxlY3RTY2hlZHVsZVN0ZXBEaXNhYmxlZCxcbiAgZ2V0SXNTZWxlY3ROYW1lU3RlcERpc2FibGVkLFxuICBnZXRJc1NjaGVkdWxlVmFsaWQsXG4gIGdldEhhc1ZhbGlkVGltZURhdGEsXG4gIGdldEhhc1ZhbGlkRGF5c0RhdGEsXG59XG4iXSwibmFtZXMiOlsiZ2V0SGFzVmFsaWREYXlzRGF0YSIsImdldEhhc1ZhbGlkVGltZURhdGEiLCJnZXRJc1NjaGVkdWxlVmFsaWQiLCJnZXRJc1NlbGVjdE5hbWVTdGVwRGlzYWJsZWQiLCJnZXRJc1NlbGVjdFNjaGVkdWxlU3RlcERpc2FibGVkIiwiZ2V0SXNTZWxlY3RXYXRjaGxpc3RTdGVwRGlzYWJsZWQiLCJjcm9uRXhwIiwic3BsaXQiLCJzbGljZSIsImV2ZXJ5IiwiZGF0dW0iLCJpc0Zpbml0ZSIsInNjaGVkdWxlIiwic2NoZWR1bGVyRXhwcmVzc2lvbiIsInRpbWV6b25lIiwiZGVzdGluYXRpb24iLCJpc0VtYWlsTm90aWZpY2F0aW9uU2NoZWR1bGUiLCJkZXN0aW5hdGlvblBhcmFtcyIsImVtYWlscyIsImxlbmd0aCIsImZvcm0iLCJoYXNDb21wYW5pZXMiLCJ3YXRjaGxpc3RJZCIsIm5hbWUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQW9DRUEsbUJBQW1CO2VBQW5CQTs7SUFEQUMsbUJBQW1CO2VBQW5CQTs7SUFEQUMsa0JBQWtCO2VBQWxCQTs7SUFEQUMsMkJBQTJCO2VBQTNCQTs7SUFEQUMsK0JBQStCO2VBQS9CQTs7SUFEQUMsZ0NBQWdDO2VBQWhDQTs7OzBCQS9CZ0U7QUFHbEUsTUFBTUwsc0JBQXNCLENBQUNNLFVBQTZCQSxRQUFRQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSztBQUV4RixNQUFNTixzQkFBc0IsQ0FBQ0ssVUFDM0JBLFFBQ0dDLEtBQUssQ0FBQyxTQUNOQyxLQUFLLENBQUMsR0FBRyxHQUNUQyxLQUFLLENBQUNDLENBQUFBLFFBQVNDLFNBQVMsQ0FBQ0Q7QUFFOUIsTUFBTVIscUJBQXFCLENBQUNVLFdBQzFCLENBQUMsQ0FDQ0EsQ0FBQUEsU0FBU0MsbUJBQW1CLElBQzVCYixvQkFBb0JZLFNBQVNDLG1CQUFtQixLQUNoRFosb0JBQW9CVyxTQUFTQyxtQkFBbUIsS0FDaERELFNBQVNFLFFBQVEsSUFDakJGLFNBQVNHLFdBQVcsSUFDcEJDLElBQUFBLHFDQUEyQixFQUFDSixhQUM1QkEsU0FBU0ssaUJBQWlCLENBQUNDLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHLENBQUE7QUFHL0MsTUFBTWQsbUNBQW1DLENBQUNlLE1BQXVCQyxlQUMvRCxDQUFDQSxnQkFBZ0IsQ0FBQ0QsS0FBS0UsV0FBVztBQUVwQyxNQUFNbEIsa0NBQWtDLENBQUNnQixPQUN2QyxDQUFDbEIsbUJBQW1Ca0IsS0FBS1IsUUFBUTtBQUVuQyxNQUFNVCw4QkFBOEIsQ0FBQ2lCLE9BQW1DLENBQUNBLEtBQUtHLElBQUkifQ==