{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/user-data-queries/src/getExpressionIds.ts"],"sourcesContent":["import {\n  isRpqlFlatArrayFilter,\n  isRpqlFlatExclusiveArrayBaseFilter,\n  isRpqlFlatMatchFilter,\n} from \"@rp/common/api-types\"\nimport { RpqlFilter } from \"@rp/common/api-types\"\nimport { flattenQuery } from \"@rp/react/rpql\"\nimport { MacroSearchItem } from \"@rp/react/tanstack-api/cqs-query-context\"\nimport { generateMacroIds, makeSuggestionId } from \"@rp/react/tanstack-api/suggestion\"\n\ntype FilterMap = ReturnType<typeof flattenQuery>[\"filterMap\"]\ntype Format = \"suggestionId\" | \"queryKey\"\nconst defaultTypes = [\"rp_topic\", \"entity\", \"language\", \"source\", \"watchlist\", \"keyword\", \"topic\"]\n\nconst formatResult = (format: Format | undefined, type: string, value: string) => {\n  if (format === \"queryKey\") {\n    return [type, value]\n  }\n\n  if (format === \"suggestionId\") {\n    return makeSuggestionId(value, type)\n  }\n\n  return value\n}\n\nconst getExpressionMacros = (filterMap: FilterMap): Array<MacroSearchItem> => {\n  const flatMacros = Object.values(filterMap).filter(isRpqlFlatMatchFilter)\n\n  const macroItems: Array<MacroSearchItem> = flatMacros.map(flatMacro => {\n    const groups = flatMacro.value.map(groupId => {\n      const group = filterMap[groupId]\n\n      if (!group || !isRpqlFlatArrayFilter(group)) {\n        throw new Error(\"Invalid children found as part of a macro search\")\n      }\n\n      return {\n        type: group.type,\n        operation: \"in\" as const,\n        value: group.value,\n      }\n    })\n\n    return {\n      ...flatMacro,\n      type: flatMacro.type,\n      value: groups,\n      operation: \"all\",\n    }\n  })\n\n  return macroItems\n}\n\nconst getExpressionIds = (\n  expression: RpqlFilter,\n  options?: {\n    types?: Array<string>\n    format?: Format\n    excludeNot?: boolean\n    includeMacros?: boolean\n  },\n) => {\n  const { filterMap } = flattenQuery(expression)\n  const filterTypes = options?.types ?? defaultTypes\n  const format = options?.format\n  const excludeNot = options?.excludeNot ?? false\n  const ids = Object.values(filterMap)\n    .filter(filter => filterTypes.includes(filter.type))\n    .filter(filter => (excludeNot ? !isRpqlFlatExclusiveArrayBaseFilter(filter) : true))\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .flatMap((filter: any) => {\n      if (typeof filter.value === \"string\") {\n        return [formatResult(format, filter.type, filter.value)]\n      }\n\n      if (Array.isArray(filter.value)) {\n        return filter.value.map((item: string | number) => {\n          const type = filter.type === \"source\" ? \"entity\" : filter.type\n          return formatResult(format, type, item.toString())\n        })\n      }\n      return filter.value\n    })\n\n  if (options?.includeMacros) {\n    const macros = getExpressionMacros(filterMap)\n    for (const macro of macros) {\n      ids.push(...generateMacroIds(macro))\n    }\n  }\n\n  return ids\n}\n\nexport { getExpressionIds }\n"],"names":["getExpressionIds","defaultTypes","formatResult","format","type","value","makeSuggestionId","getExpressionMacros","filterMap","flatMacros","Object","values","filter","isRpqlFlatMatchFilter","macroItems","map","flatMacro","groups","groupId","group","isRpqlFlatArrayFilter","Error","operation","expression","options","flattenQuery","filterTypes","types","excludeNot","ids","includes","isRpqlFlatExclusiveArrayBaseFilter","flatMap","Array","isArray","item","toString","includeMacros","macros","macro","push","generateMacroIds"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgGSA;;;eAAAA;;;0BA5FF;sBAEsB;4BAEsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAInD,MAAMC,eAAe;IAAC;IAAY;IAAU;IAAY;IAAU;IAAa;IAAW;CAAQ;AAElG,MAAMC,eAAe,CAACC,QAA4BC,MAAcC;IAC9D,IAAIF,WAAW,YAAY;QACzB,OAAO;YAACC;YAAMC;SAAM;IACtB;IAEA,IAAIF,WAAW,gBAAgB;QAC7B,OAAOG,IAAAA,4BAAgB,EAACD,OAAOD;IACjC;IAEA,OAAOC;AACT;AAEA,MAAME,sBAAsB,CAACC;IAC3B,MAAMC,aAAaC,OAAOC,MAAM,CAACH,WAAWI,MAAM,CAACC,+BAAqB;IAExE,MAAMC,aAAqCL,WAAWM,GAAG,CAACC,CAAAA;QACxD,MAAMC,SAASD,UAAUX,KAAK,CAACU,GAAG,CAACG,CAAAA;YACjC,MAAMC,QAAQX,SAAS,CAACU,QAAQ;YAEhC,IAAI,CAACC,SAAS,CAACC,IAAAA,+BAAqB,EAACD,QAAQ;gBAC3C,MAAM,IAAIE,MAAM;YAClB;YAEA,OAAO;gBACLjB,MAAMe,MAAMf,IAAI;gBAChBkB,WAAW;gBACXjB,OAAOc,MAAMd,KAAK;YACpB;QACF;QAEA,OAAO,wCACFW;YACHZ,MAAMY,UAAUZ,IAAI;YACpBC,OAAOY;YACPK,WAAW;;IAEf;IAEA,OAAOR;AACT;AAEA,MAAMd,mBAAmB,CACvBuB,YACAC;IAOA,MAAM,EAAEhB,SAAS,EAAE,GAAGiB,IAAAA,kBAAY,EAACF;QACfC;IAApB,MAAME,cAAcF,CAAAA,iBAAAA,oBAAAA,8BAAAA,QAASG,KAAK,cAAdH,4BAAAA,iBAAkBvB;IACtC,MAAME,SAASqB,oBAAAA,8BAAAA,QAASrB,MAAM;QACXqB;IAAnB,MAAMI,aAAaJ,CAAAA,sBAAAA,oBAAAA,8BAAAA,QAASI,UAAU,cAAnBJ,iCAAAA,sBAAuB;IAC1C,MAAMK,MAAMnB,OAAOC,MAAM,CAACH,WACvBI,MAAM,CAACA,CAAAA,SAAUc,YAAYI,QAAQ,CAAClB,OAAOR,IAAI,GACjDQ,MAAM,CAACA,CAAAA,SAAWgB,aAAa,CAACG,IAAAA,4CAAkC,EAACnB,UAAU,KAC9E,8DAA8D;KAC7DoB,OAAO,CAAC,CAACpB;QACR,IAAI,OAAOA,OAAOP,KAAK,KAAK,UAAU;YACpC,OAAO;gBAACH,aAAaC,QAAQS,OAAOR,IAAI,EAAEQ,OAAOP,KAAK;aAAE;QAC1D;QAEA,IAAI4B,MAAMC,OAAO,CAACtB,OAAOP,KAAK,GAAG;YAC/B,OAAOO,OAAOP,KAAK,CAACU,GAAG,CAAC,CAACoB;gBACvB,MAAM/B,OAAOQ,OAAOR,IAAI,KAAK,WAAW,WAAWQ,OAAOR,IAAI;gBAC9D,OAAOF,aAAaC,QAAQC,MAAM+B,KAAKC,QAAQ;YACjD;QACF;QACA,OAAOxB,OAAOP,KAAK;IACrB;IAEF,IAAImB,oBAAAA,8BAAAA,QAASa,aAAa,EAAE;QAC1B,MAAMC,SAAS/B,oBAAoBC;QACnC,KAAK,MAAM+B,SAASD,OAAQ;YAC1BT,IAAIW,IAAI,IAAIC,IAAAA,4BAAgB,EAACF;QAC/B;IACF;IAEA,OAAOV;AACT"}