{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-gfm-table/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n"],"names":["gfmTableFromMarkdown","gfmTableToMarkdown","enter","table","enterTable","tableData","enterCell","tableHeader","tableRow","enterRow","exit","codeText","exitCodeText","exitTable","token","align","_align","assert","type","map","d","children","data","inTable","undefined","value","resume","replace","node","stack","length","$0","$1","options","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","unsafe","character","inConstruct","atBreak","after","handlers","inlineCode","inlineCodeWithTable","handleTable","tableCell","handleTableCell","handleTableRow","_","state","info","serializeData","handleTableAsData","row","handleTableRowAsData","slice","indexOf","subexit","containerPhrasing","before","matrix","markdownTable","index","result","parent","defaultHandlers","includes"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}