4c631d54b32641aa4b854ac3913e6c0d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NewWatchlistButtonContainer", {
    enumerable: true,
    get: function() {
        return NewWatchlistButtonContainer;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks1 = require("@rp/react/web/common/hooks");
const _providers1 = require("@rp/react/web/common/providers");
const _icons = require("@rp/react/web/mui/icons");
const _router = require("@rp/react/web/router");
const NewWatchlistButtonContainer = ({ children })=>{
    const { isMobile } = (0, _hooks1.useDeviceInfo)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { quota } = (0, _providers.useAccount)();
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const hasMetWatchlistLimit = (0, _hooks.useIsWatchlistLimitMet)(quota);
    const { watchlistModal: { handleOpen: handleOpenNew } } = (0, _providers1.useModal)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            children,
            isMobile ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.FabExpanding, {
                animateTo: 180,
                Icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Add, {}),
                onClick: ()=>hasMetWatchlistLimit ? planComparisonHandleOpen(_settings.WATCHLIST_FEATURE_NAME) : handleOpenNew(undefined, (watchlist)=>{
                        navigate((0, _reactrouterdom.generatePath)(_router.WATCHLIST_EDIT, {
                            id: watchlist.id
                        }));
                    }),
                yOffset: _compositecomponents.BOTTOM_NAV_HEIGHT,
                children: "New Watchlist"
            }) : null
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL2NvbXBvbmVudHMvSHViL1dhdGNobGlzdHMvTmV3V2F0Y2hsaXN0QnV0dG9uQ29udGFpbmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBnZW5lcmF0ZVBhdGgsIHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIlxuaW1wb3J0IHsgV0FUQ0hMSVNUX0ZFQVRVUkVfTkFNRSB9IGZyb20gXCJAcnAvY29tbW9uL3NldHRpbmdzXCJcbmltcG9ydCB7IHVzZUlzV2F0Y2hsaXN0TGltaXRNZXQgfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9ob29rc1wiXG5pbXBvcnQgeyB1c2VBY2NvdW50IH0gZnJvbSBcIkBycC9yZWFjdC9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IEJPVFRPTV9OQVZfSEVJR0hUIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IEZhYkV4cGFuZGluZyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50c1wiXG5pbXBvcnQgeyB1c2VEZXZpY2VJbmZvIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2hvb2tzXCJcbmltcG9ydCB7IHVzZU1vZGFsIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG5pbXBvcnQgeyBBZGQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvaWNvbnNcIlxuaW1wb3J0IHsgV0FUQ0hMSVNUX0VESVQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9yb3V0ZXJcIlxuXG5jb25zdCBOZXdXYXRjaGxpc3RCdXR0b25Db250YWluZXIgPSAoeyBjaGlsZHJlbiB9OiBQcm9wc1dpdGhDaGlsZHJlbikgPT4ge1xuICBjb25zdCB7IGlzTW9iaWxlIH0gPSB1c2VEZXZpY2VJbmZvKClcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG5cbiAgY29uc3QgeyBxdW90YSB9ID0gdXNlQWNjb3VudCgpXG4gIGNvbnN0IHtcbiAgICBwbGFuQ29tcGFyaXNvbk1vZGFsOiB7IGhhbmRsZU9wZW46IHBsYW5Db21wYXJpc29uSGFuZGxlT3BlbiB9LFxuICB9ID0gdXNlTW9kYWwoKVxuICBjb25zdCBoYXNNZXRXYXRjaGxpc3RMaW1pdCA9IHVzZUlzV2F0Y2hsaXN0TGltaXRNZXQocXVvdGEpXG5cbiAgY29uc3Qge1xuICAgIHdhdGNobGlzdE1vZGFsOiB7IGhhbmRsZU9wZW46IGhhbmRsZU9wZW5OZXcgfSxcbiAgfSA9IHVzZU1vZGFsKClcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2lzTW9iaWxlID8gKFxuICAgICAgICA8RmFiRXhwYW5kaW5nXG4gICAgICAgICAgYW5pbWF0ZVRvPXsxODB9XG4gICAgICAgICAgSWNvbj17PEFkZCAvPn1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgaGFzTWV0V2F0Y2hsaXN0TGltaXRcbiAgICAgICAgICAgICAgPyBwbGFuQ29tcGFyaXNvbkhhbmRsZU9wZW4oV0FUQ0hMSVNUX0ZFQVRVUkVfTkFNRSlcbiAgICAgICAgICAgICAgOiBoYW5kbGVPcGVuTmV3KHVuZGVmaW5lZCwgd2F0Y2hsaXN0ID0+IHtcbiAgICAgICAgICAgICAgICAgIG5hdmlnYXRlKGdlbmVyYXRlUGF0aChXQVRDSExJU1RfRURJVCwgeyBpZDogd2F0Y2hsaXN0LmlkIH0pKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHlPZmZzZXQ9e0JPVFRPTV9OQVZfSEVJR0hUfVxuICAgICAgICA+XG4gICAgICAgICAgTmV3IFdhdGNobGlzdFxuICAgICAgICA8L0ZhYkV4cGFuZGluZz5cbiAgICAgICkgOiBudWxsfVxuICAgIDwvPlxuICApXG59XG5cbmV4cG9ydCB7IE5ld1dhdGNobGlzdEJ1dHRvbkNvbnRhaW5lciB9XG4iXSwibmFtZXMiOlsiTmV3V2F0Y2hsaXN0QnV0dG9uQ29udGFpbmVyIiwiY2hpbGRyZW4iLCJpc01vYmlsZSIsInVzZURldmljZUluZm8iLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwicXVvdGEiLCJ1c2VBY2NvdW50IiwicGxhbkNvbXBhcmlzb25Nb2RhbCIsImhhbmRsZU9wZW4iLCJwbGFuQ29tcGFyaXNvbkhhbmRsZU9wZW4iLCJ1c2VNb2RhbCIsImhhc01ldFdhdGNobGlzdExpbWl0IiwidXNlSXNXYXRjaGxpc3RMaW1pdE1ldCIsIndhdGNobGlzdE1vZGFsIiwiaGFuZGxlT3Blbk5ldyIsIkZhYkV4cGFuZGluZyIsImFuaW1hdGVUbyIsIkljb24iLCJBZGQiLCJvbkNsaWNrIiwiV0FUQ0hMSVNUX0ZFQVRVUkVfTkFNRSIsInVuZGVmaW5lZCIsIndhdGNobGlzdCIsImdlbmVyYXRlUGF0aCIsIldBVENITElTVF9FRElUIiwiaWQiLCJ5T2Zmc2V0IiwiQk9UVE9NX05BVl9IRUlHSFQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFnRFNBOzs7ZUFBQUE7Ozs7Z0NBL0NpQzswQkFDSDt1QkFDQTsyQkFDWjtxQ0FDTzt3QkFFSjs0QkFDTDt1QkFDTDt3QkFDVztBQUUvQixNQUFNQSw4QkFBOEIsQ0FBQyxFQUFFQyxRQUFRLEVBQXFCO0lBQ2xFLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdDLElBQUFBLHFCQUFhO0lBQ2xDLE1BQU1DLFdBQVdDLElBQUFBLDJCQUFXO0lBRTVCLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUdDLElBQUFBLHFCQUFVO0lBQzVCLE1BQU0sRUFDSkMscUJBQXFCLEVBQUVDLFlBQVlDLHdCQUF3QixFQUFFLEVBQzlELEdBQUdDLElBQUFBLG9CQUFRO0lBQ1osTUFBTUMsdUJBQXVCQyxJQUFBQSw2QkFBc0IsRUFBQ1A7SUFFcEQsTUFBTSxFQUNKUSxnQkFBZ0IsRUFBRUwsWUFBWU0sYUFBYSxFQUFFLEVBQzlDLEdBQUdKLElBQUFBLG9CQUFRO0lBQ1oscUJBQ0U7O1lBQ0dWO1lBQ0FDLHlCQUNDLHFCQUFDYyxpQ0FBWTtnQkFDWEMsV0FBVztnQkFDWEMsb0JBQU0scUJBQUNDLFVBQUc7Z0JBQ1ZDLFNBQVMsSUFDUFIsdUJBQ0lGLHlCQUF5QlcsZ0NBQXNCLElBQy9DTixjQUFjTyxXQUFXQyxDQUFBQTt3QkFDdkJuQixTQUFTb0IsSUFBQUEsNEJBQVksRUFBQ0Msc0JBQWMsRUFBRTs0QkFBRUMsSUFBSUgsVUFBVUcsRUFBRTt3QkFBQztvQkFDM0Q7Z0JBRU5DLFNBQVNDLHNDQUFpQjswQkFDM0I7aUJBR0M7OztBQUdWIn0=