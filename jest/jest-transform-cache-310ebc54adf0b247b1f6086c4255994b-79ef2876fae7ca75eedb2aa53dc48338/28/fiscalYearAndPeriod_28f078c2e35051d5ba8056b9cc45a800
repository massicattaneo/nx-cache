8f20999bd24e291c933499e439928f32
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "fiscalYearAndPeriod", {
    enumerable: true,
    get: function() {
        return fiscalYearAndPeriod;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _WatchlistDataTableTextCell = require("../../WatchlistDataTableCells/WatchlistDataTableTextCell");
const _WatchlsitDataTableFiscalPeriodHeaderCell = require("../../WatchlistDataTableCells/WatchlsitDataTableFiscalPeriodHeaderCell");
const _genericColumn = require("../../genericColumn");
function fiscalYearAndPeriod(_tableName) {
    const title = "Fiscal Period";
    return (0, _genericColumn.genericColumn)({
        endpoint: "companyIncomeStatement",
        columnKeys: [
            "fiscalYear",
            "period"
        ],
        size: 130,
        title,
        enableSorting: true,
        enableHiding: true,
        cell: (info)=>{
            var _info_row_original_financialData_companyIncomeStatement;
            const { date, filingDate, fiscalYear, period } = ((_info_row_original_financialData_companyIncomeStatement = info.row.original.financialData.companyIncomeStatement) === null || _info_row_original_financialData_companyIncomeStatement === void 0 ? void 0 : _info_row_original_financialData_companyIncomeStatement.data) || {};
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_WatchlistDataTableTextCell.WatchlistDataTableTextCell, {
                tooltip: /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlsitDataTableFiscalPeriodHeaderCell.WatchlistDataTableFiscalPeriodTooltip, {
                    date: date,
                    filingDate: filingDate
                }),
                value: info.getValue(),
                queryResult: info.row.original.financialData.companyIncomeStatement,
                children: [
                    fiscalYear,
                    period
                ]
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9lbmRwb2ludHMvY29tcGFueUluY29tZVN0YXRlbWVudC9maXNjYWxZZWFyQW5kUGVyaW9kLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXYXRjaGxpc3REYXRhVGFibGVUZXh0Q2VsbCB9IGZyb20gXCIuLi8uLi9XYXRjaGxpc3REYXRhVGFibGVDZWxscy9XYXRjaGxpc3REYXRhVGFibGVUZXh0Q2VsbFwiXG5pbXBvcnQgeyBXYXRjaGxpc3REYXRhVGFibGVGaXNjYWxQZXJpb2RUb29sdGlwIH0gZnJvbSBcIi4uLy4uL1dhdGNobGlzdERhdGFUYWJsZUNlbGxzL1dhdGNobHNpdERhdGFUYWJsZUZpc2NhbFBlcmlvZEhlYWRlckNlbGxcIlxuaW1wb3J0IHsgZ2VuZXJpY0NvbHVtbiB9IGZyb20gXCIuLi8uLi9nZW5lcmljQ29sdW1uXCJcblxuZnVuY3Rpb24gZmlzY2FsWWVhckFuZFBlcmlvZChfdGFibGVOYW1lOiBzdHJpbmcpIHtcbiAgY29uc3QgdGl0bGUgPSBcIkZpc2NhbCBQZXJpb2RcIlxuICByZXR1cm4gZ2VuZXJpY0NvbHVtbih7XG4gICAgZW5kcG9pbnQ6IFwiY29tcGFueUluY29tZVN0YXRlbWVudFwiLFxuICAgIGNvbHVtbktleXM6IFtcImZpc2NhbFllYXJcIiwgXCJwZXJpb2RcIl0sXG4gICAgc2l6ZTogMTMwLFxuICAgIHRpdGxlLFxuICAgIGVuYWJsZVNvcnRpbmc6IHRydWUsXG4gICAgZW5hYmxlSGlkaW5nOiB0cnVlLFxuICAgIGNlbGw6IGluZm8gPT4ge1xuICAgICAgY29uc3QgeyBkYXRlLCBmaWxpbmdEYXRlLCBmaXNjYWxZZWFyLCBwZXJpb2QgfSA9XG4gICAgICAgIGluZm8ucm93Lm9yaWdpbmFsLmZpbmFuY2lhbERhdGEuY29tcGFueUluY29tZVN0YXRlbWVudD8uZGF0YSB8fCB7fVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFdhdGNobGlzdERhdGFUYWJsZVRleHRDZWxsXG4gICAgICAgICAgdG9vbHRpcD17PFdhdGNobGlzdERhdGFUYWJsZUZpc2NhbFBlcmlvZFRvb2x0aXAgZGF0ZT17ZGF0ZX0gZmlsaW5nRGF0ZT17ZmlsaW5nRGF0ZX0gLz59XG4gICAgICAgICAgdmFsdWU9e2luZm8uZ2V0VmFsdWUoKX1cbiAgICAgICAgICBxdWVyeVJlc3VsdD17aW5mby5yb3cub3JpZ2luYWwuZmluYW5jaWFsRGF0YS5jb21wYW55SW5jb21lU3RhdGVtZW50fVxuICAgICAgICA+XG4gICAgICAgICAge2Zpc2NhbFllYXJ9XG4gICAgICAgICAge3BlcmlvZH1cbiAgICAgICAgPC9XYXRjaGxpc3REYXRhVGFibGVUZXh0Q2VsbD5cbiAgICAgIClcbiAgICB9LFxuICB9KVxufVxuXG5leHBvcnQgeyBmaXNjYWxZZWFyQW5kUGVyaW9kIH1cbiJdLCJuYW1lcyI6WyJmaXNjYWxZZWFyQW5kUGVyaW9kIiwiX3RhYmxlTmFtZSIsInRpdGxlIiwiZ2VuZXJpY0NvbHVtbiIsImVuZHBvaW50IiwiY29sdW1uS2V5cyIsInNpemUiLCJlbmFibGVTb3J0aW5nIiwiZW5hYmxlSGlkaW5nIiwiY2VsbCIsImluZm8iLCJkYXRlIiwiZmlsaW5nRGF0ZSIsImZpc2NhbFllYXIiLCJwZXJpb2QiLCJyb3ciLCJvcmlnaW5hbCIsImZpbmFuY2lhbERhdGEiLCJjb21wYW55SW5jb21lU3RhdGVtZW50IiwiZGF0YSIsIldhdGNobGlzdERhdGFUYWJsZVRleHRDZWxsIiwidG9vbHRpcCIsIldhdGNobGlzdERhdGFUYWJsZUZpc2NhbFBlcmlvZFRvb2x0aXAiLCJ2YWx1ZSIsImdldFZhbHVlIiwicXVlcnlSZXN1bHQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE4QlNBOzs7ZUFBQUE7Ozs7NENBOUJrQzswREFDVzsrQkFDeEI7QUFFOUIsU0FBU0Esb0JBQW9CQyxVQUFrQjtJQUM3QyxNQUFNQyxRQUFRO0lBQ2QsT0FBT0MsSUFBQUEsNEJBQWEsRUFBQztRQUNuQkMsVUFBVTtRQUNWQyxZQUFZO1lBQUM7WUFBYztTQUFTO1FBQ3BDQyxNQUFNO1FBQ05KO1FBQ0FLLGVBQWU7UUFDZkMsY0FBYztRQUNkQyxNQUFNQyxDQUFBQTtnQkFFRkE7WUFERixNQUFNLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRSxHQUM1Q0osRUFBQUEsMERBQUFBLEtBQUtLLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLENBQUNDLHNCQUFzQixjQUF0RFIsOEVBQUFBLHdEQUF3RFMsSUFBSSxLQUFJLENBQUM7WUFDbkUscUJBQ0Usc0JBQUNDLHNEQUEwQjtnQkFDekJDLHVCQUFTLHFCQUFDQywrRUFBcUM7b0JBQUNYLE1BQU1BO29CQUFNQyxZQUFZQTs7Z0JBQ3hFVyxPQUFPYixLQUFLYyxRQUFRO2dCQUNwQkMsYUFBYWYsS0FBS0ssR0FBRyxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQ0Msc0JBQXNCOztvQkFFbEVMO29CQUNBQzs7O1FBR1A7SUFDRjtBQUNGIn0=