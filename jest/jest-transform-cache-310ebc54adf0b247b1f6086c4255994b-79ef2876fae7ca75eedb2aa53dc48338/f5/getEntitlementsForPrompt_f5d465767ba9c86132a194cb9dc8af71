47fecacb40c22c7288561cbe5c7df29f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getEntitlementsForPrompt", {
    enumerable: true,
    get: function() {
        return getEntitlementsForPrompt;
    }
});
const _entitlementsMap = require("./entitlementsMap");
// It is an object so it forces you to have all the values in the record
// We don't want to filter them by mistake
const DATASETS = {
    transcripts: true,
    filings: true,
    "job-analytics": true,
    news: true,
    price: true,
    "sentiment-attention": true,
    estimates: true,
    "knowledge-graph": true,
    crunchbase: true,
    "etf-holdings": true,
    market_intelligence: true,
    earnings_calls: true
};
const isValidDataset = (dataset)=>{
    return Object.keys(DATASETS).includes(dataset);
};
const getEntitlementsForPrompt = (suggestion)=>{
    const entitlements = [];
    var _suggestion_datasets;
    const datasets = Object.entries((_suggestion_datasets = suggestion === null || suggestion === void 0 ? void 0 : suggestion.datasets) !== null && _suggestion_datasets !== void 0 ? _suggestion_datasets : {}).filter(([_, value])=>value).map(([dataset])=>dataset).filter(isValidDataset);
    for (const dataset of datasets){
        const entitlement = _entitlementsMap.datasetEntitlements[dataset];
        if (entitlement !== undefined) {
            entitlements.push(entitlement);
        }
    }
    if (suggestion.scope) {
        const scopeEntitlement = _entitlementsMap.relatedScopeEntitlements[suggestion.scope];
        if (scopeEntitlement !== undefined && !entitlements.find((e)=>e === scopeEntitlement)) {
            entitlements.push(scopeEntitlement);
        }
    }
    return entitlements;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlU3VnZ2VzdGVkUHJvbXB0cy9nZXRFbnRpdGxlbWVudHNGb3JQcm9tcHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIlxuaW1wb3J0IHsgU3VnZ2VzdGVkUHJvbXB0U2NoZW1hIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IGRhdGFzZXRFbnRpdGxlbWVudHMsIHJlbGF0ZWRTY29wZUVudGl0bGVtZW50cyB9IGZyb20gXCIuL2VudGl0bGVtZW50c01hcFwiXG5pbXBvcnQgeyBFbnRpdGxlbWVudCB9IGZyb20gXCIuL3N1Z2dlc3RlZFByb21wdHMudHlwZXNcIlxuXG50eXBlIEluZmVycmVkU3VnZ2VzdGVkUHJvbXB0ID0gei5pbmZlcjx0eXBlb2YgU3VnZ2VzdGVkUHJvbXB0U2NoZW1hPlxudHlwZSBEYXRhc2V0ID0ga2V5b2YgSW5mZXJyZWRTdWdnZXN0ZWRQcm9tcHRbXCJkYXRhc2V0c1wiXVxuXG4vLyBJdCBpcyBhbiBvYmplY3Qgc28gaXQgZm9yY2VzIHlvdSB0byBoYXZlIGFsbCB0aGUgdmFsdWVzIGluIHRoZSByZWNvcmRcbi8vIFdlIGRvbid0IHdhbnQgdG8gZmlsdGVyIHRoZW0gYnkgbWlzdGFrZVxuY29uc3QgREFUQVNFVFM6IFJlY29yZDxEYXRhc2V0LCB0cnVlPiA9IHtcbiAgdHJhbnNjcmlwdHM6IHRydWUsXG4gIGZpbGluZ3M6IHRydWUsXG4gIFwiam9iLWFuYWx5dGljc1wiOiB0cnVlLFxuICBuZXdzOiB0cnVlLFxuICBwcmljZTogdHJ1ZSxcbiAgXCJzZW50aW1lbnQtYXR0ZW50aW9uXCI6IHRydWUsXG4gIGVzdGltYXRlczogdHJ1ZSxcbiAgXCJrbm93bGVkZ2UtZ3JhcGhcIjogdHJ1ZSxcbiAgY3J1bmNoYmFzZTogdHJ1ZSxcbiAgXCJldGYtaG9sZGluZ3NcIjogdHJ1ZSxcbiAgbWFya2V0X2ludGVsbGlnZW5jZTogdHJ1ZSxcbiAgZWFybmluZ3NfY2FsbHM6IHRydWUsXG59IGFzIGNvbnN0XG5cbmNvbnN0IGlzVmFsaWREYXRhc2V0ID0gKGRhdGFzZXQ6IHN0cmluZyk6IGRhdGFzZXQgaXMgRGF0YXNldCA9PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhEQVRBU0VUUykuaW5jbHVkZXMoZGF0YXNldClcbn1cblxuY29uc3QgZ2V0RW50aXRsZW1lbnRzRm9yUHJvbXB0ID0gKHN1Z2dlc3Rpb246IEluZmVycmVkU3VnZ2VzdGVkUHJvbXB0KSA9PiB7XG4gIGNvbnN0IGVudGl0bGVtZW50czogQXJyYXk8RW50aXRsZW1lbnQ+ID0gW11cbiAgY29uc3QgZGF0YXNldHMgPSBPYmplY3QuZW50cmllcyhzdWdnZXN0aW9uPy5kYXRhc2V0cyA/PyB7fSlcbiAgICAuZmlsdGVyKChbXywgdmFsdWVdKSA9PiB2YWx1ZSlcbiAgICAubWFwKChbZGF0YXNldF0pID0+IGRhdGFzZXQpXG4gICAgLmZpbHRlcihpc1ZhbGlkRGF0YXNldClcblxuICBmb3IgKGNvbnN0IGRhdGFzZXQgb2YgZGF0YXNldHMpIHtcbiAgICBjb25zdCBlbnRpdGxlbWVudCA9IGRhdGFzZXRFbnRpdGxlbWVudHNbZGF0YXNldF1cbiAgICBpZiAoZW50aXRsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZW50aXRsZW1lbnRzLnB1c2goZW50aXRsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1Z2dlc3Rpb24uc2NvcGUpIHtcbiAgICBjb25zdCBzY29wZUVudGl0bGVtZW50ID0gcmVsYXRlZFNjb3BlRW50aXRsZW1lbnRzW3N1Z2dlc3Rpb24uc2NvcGVdXG4gICAgaWYgKHNjb3BlRW50aXRsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiAhZW50aXRsZW1lbnRzLmZpbmQoZSA9PiBlID09PSBzY29wZUVudGl0bGVtZW50KSkge1xuICAgICAgZW50aXRsZW1lbnRzLnB1c2goc2NvcGVFbnRpdGxlbWVudClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW50aXRsZW1lbnRzXG59XG5cbmV4cG9ydCB7IGdldEVudGl0bGVtZW50c0ZvclByb21wdCB9XG4iXSwibmFtZXMiOlsiZ2V0RW50aXRsZW1lbnRzRm9yUHJvbXB0IiwiREFUQVNFVFMiLCJ0cmFuc2NyaXB0cyIsImZpbGluZ3MiLCJuZXdzIiwicHJpY2UiLCJlc3RpbWF0ZXMiLCJjcnVuY2hiYXNlIiwibWFya2V0X2ludGVsbGlnZW5jZSIsImVhcm5pbmdzX2NhbGxzIiwiaXNWYWxpZERhdGFzZXQiLCJkYXRhc2V0IiwiT2JqZWN0Iiwia2V5cyIsImluY2x1ZGVzIiwic3VnZ2VzdGlvbiIsImVudGl0bGVtZW50cyIsImRhdGFzZXRzIiwiZW50cmllcyIsImZpbHRlciIsIl8iLCJ2YWx1ZSIsIm1hcCIsImVudGl0bGVtZW50IiwiZGF0YXNldEVudGl0bGVtZW50cyIsInVuZGVmaW5lZCIsInB1c2giLCJzY29wZSIsInNjb3BlRW50aXRsZW1lbnQiLCJyZWxhdGVkU2NvcGVFbnRpdGxlbWVudHMiLCJmaW5kIiwiZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFxRFNBOzs7ZUFBQUE7OztpQ0FuRHFEO0FBTTlELHdFQUF3RTtBQUN4RSwwQ0FBMEM7QUFDMUMsTUFBTUMsV0FBa0M7SUFDdENDLGFBQWE7SUFDYkMsU0FBUztJQUNULGlCQUFpQjtJQUNqQkMsTUFBTTtJQUNOQyxPQUFPO0lBQ1AsdUJBQXVCO0lBQ3ZCQyxXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CQyxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCQyxxQkFBcUI7SUFDckJDLGdCQUFnQjtBQUNsQjtBQUVBLE1BQU1DLGlCQUFpQixDQUFDQztJQUN0QixPQUFPQyxPQUFPQyxJQUFJLENBQUNaLFVBQVVhLFFBQVEsQ0FBQ0g7QUFDeEM7QUFFQSxNQUFNWCwyQkFBMkIsQ0FBQ2U7SUFDaEMsTUFBTUMsZUFBbUMsRUFBRTtRQUNYRDtJQUFoQyxNQUFNRSxXQUFXTCxPQUFPTSxPQUFPLENBQUNILENBQUFBLHVCQUFBQSx1QkFBQUEsaUNBQUFBLFdBQVlFLFFBQVEsY0FBcEJGLGtDQUFBQSx1QkFBd0IsQ0FBQyxHQUN0REksTUFBTSxDQUFDLENBQUMsQ0FBQ0MsR0FBR0MsTUFBTSxHQUFLQSxPQUN2QkMsR0FBRyxDQUFDLENBQUMsQ0FBQ1gsUUFBUSxHQUFLQSxTQUNuQlEsTUFBTSxDQUFDVDtJQUVWLEtBQUssTUFBTUMsV0FBV00sU0FBVTtRQUM5QixNQUFNTSxjQUFjQyxvQ0FBbUIsQ0FBQ2IsUUFBUTtRQUNoRCxJQUFJWSxnQkFBZ0JFLFdBQVc7WUFDN0JULGFBQWFVLElBQUksQ0FBQ0g7UUFDcEI7SUFDRjtJQUVBLElBQUlSLFdBQVdZLEtBQUssRUFBRTtRQUNwQixNQUFNQyxtQkFBbUJDLHlDQUF3QixDQUFDZCxXQUFXWSxLQUFLLENBQUM7UUFDbkUsSUFBSUMscUJBQXFCSCxhQUFhLENBQUNULGFBQWFjLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsTUFBTUgsbUJBQW1CO1lBQ3JGWixhQUFhVSxJQUFJLENBQUNFO1FBQ3BCO0lBQ0Y7SUFFQSxPQUFPWjtBQUNUIn0=