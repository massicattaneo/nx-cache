d675561c59405855a889acf2da0b63f5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AdvancedTable", {
    enumerable: true,
    get: function() {
        return AdvancedTable;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _AdvancedTablestyles = require("./AdvancedTable.styles");
const _AdvancedTableHead = require("./AdvancedTableHead");
const _advancedTableUtils = require("./advancedTableUtils");
const AdvancedTable = ({ rows, columns, renderRow, className, initialOrderBy = "lastUpdated", initialOrderDirection = "desc", onOrderChange })=>{
    const [order, setOrder] = (0, _react.useState)(initialOrderDirection);
    const [orderBy, setOrderBy] = (0, _react.useState)(initialOrderBy);
    const handleRequestSort = (_, columnId)=>{
        const isAsc = orderBy === columnId && order === "asc";
        setOrder(isAsc ? "desc" : "asc");
        setOrderBy(columnId);
        onOrderChange === null || onOrderChange === void 0 ? void 0 : onOrderChange(columnId, isAsc ? "desc" : "asc");
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_AdvancedTablestyles.AdvancedTableStyled, {
        className: className,
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Table, {
            stickyHeader: true,
            "aria-labelledby": "tableTitle",
            "aria-label": "enhanced table",
            size: "small",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_AdvancedTableHead.AdvancedTableHead, {
                    order: order,
                    orderBy: orderBy,
                    onRequestSort: handleRequestSort,
                    columns: columns
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.TableBody, {
                    children: (0, _advancedTableUtils.stableSort)(rows, (0, _advancedTableUtils.getComparator)(order, orderBy)).map((row, index)=>{
                        return renderRow ? renderRow(row, index) : null;
                    })
                })
            ]
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvQWR2YW5jZWRUYWJsZS9BZHZhbmNlZFRhYmxlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBBZHZhbmNlZFRhYmxlQ29sdW1uLCBBZHZhbmNlZFRhYmxlRGVmYXVsdFJvdyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi90eXBlc1wiXG5pbXBvcnQgeyBUYWJsZSwgVGFibGVCb2R5IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgQWR2YW5jZWRUYWJsZVN0eWxlZCB9IGZyb20gXCIuL0FkdmFuY2VkVGFibGUuc3R5bGVzXCJcbmltcG9ydCB7IEFkdmFuY2VkVGFibGVIZWFkIH0gZnJvbSBcIi4vQWR2YW5jZWRUYWJsZUhlYWRcIlxuaW1wb3J0IHsgZ2V0Q29tcGFyYXRvciwgc3RhYmxlU29ydCB9IGZyb20gXCIuL2FkdmFuY2VkVGFibGVVdGlsc1wiXG5cbnR5cGUgUHJvcHM8Um93PiA9IHtcbiAgcmVuZGVyUm93PzogKHJvdzogUm93LCBpbmRleDogbnVtYmVyKSA9PiBSZWFjdC5SZWFjdE5vZGVcbiAgY29sdW1uczogQXJyYXk8QWR2YW5jZWRUYWJsZUNvbHVtbj5cbiAgcm93czogQXJyYXk8Um93PlxuICBpbml0aWFsT3JkZXJCeT86IHN0cmluZ1xuICBpbml0aWFsT3JkZXJEaXJlY3Rpb24/OiBcImRlc2NcIiB8IFwiYXNjXCJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIG9uT3JkZXJDaGFuZ2U/OiAoZmllbGQ6IGtleW9mIFJvdywgZGlyZWN0aW9uOiBcImRlc2NcIiB8IFwiYXNjXCIpID0+IHZvaWRcbn1cblxuY29uc3QgQWR2YW5jZWRUYWJsZSA9IDxSb3cgZXh0ZW5kcyBBZHZhbmNlZFRhYmxlRGVmYXVsdFJvdz4oe1xuICByb3dzLFxuICBjb2x1bW5zLFxuICByZW5kZXJSb3csXG4gIGNsYXNzTmFtZSxcbiAgaW5pdGlhbE9yZGVyQnkgPSBcImxhc3RVcGRhdGVkXCIsXG4gIGluaXRpYWxPcmRlckRpcmVjdGlvbiA9IFwiZGVzY1wiLFxuICBvbk9yZGVyQ2hhbmdlLFxufTogUHJvcHM8Um93PikgPT4ge1xuICBjb25zdCBbb3JkZXIsIHNldE9yZGVyXSA9IHVzZVN0YXRlPFwiZGVzY1wiIHwgXCJhc2NcIj4oaW5pdGlhbE9yZGVyRGlyZWN0aW9uKVxuICBjb25zdCBbb3JkZXJCeSwgc2V0T3JkZXJCeV0gPSB1c2VTdGF0ZShpbml0aWFsT3JkZXJCeSlcblxuICBjb25zdCBoYW5kbGVSZXF1ZXN0U29ydCA9IChfOiBSZWFjdC5Nb3VzZUV2ZW50LCBjb2x1bW5JZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgaXNBc2MgPSBvcmRlckJ5ID09PSBjb2x1bW5JZCAmJiBvcmRlciA9PT0gXCJhc2NcIlxuICAgIHNldE9yZGVyKGlzQXNjID8gXCJkZXNjXCIgOiBcImFzY1wiKVxuICAgIHNldE9yZGVyQnkoY29sdW1uSWQpXG4gICAgb25PcmRlckNoYW5nZT8uKGNvbHVtbklkLCBpc0FzYyA/IFwiZGVzY1wiIDogXCJhc2NcIilcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEFkdmFuY2VkVGFibGVTdHlsZWQgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgPFRhYmxlIHN0aWNreUhlYWRlciBhcmlhLWxhYmVsbGVkYnk9XCJ0YWJsZVRpdGxlXCIgYXJpYS1sYWJlbD1cImVuaGFuY2VkIHRhYmxlXCIgc2l6ZT1cInNtYWxsXCI+XG4gICAgICAgIDxBZHZhbmNlZFRhYmxlSGVhZFxuICAgICAgICAgIG9yZGVyPXtvcmRlcn1cbiAgICAgICAgICBvcmRlckJ5PXtvcmRlckJ5fVxuICAgICAgICAgIG9uUmVxdWVzdFNvcnQ9e2hhbmRsZVJlcXVlc3RTb3J0fVxuICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgIC8+XG4gICAgICAgIDxUYWJsZUJvZHk+XG4gICAgICAgICAge3N0YWJsZVNvcnQ8Um93Pihyb3dzLCBnZXRDb21wYXJhdG9yPFJvdz4ob3JkZXIsIG9yZGVyQnkpKS5tYXAoKHJvdywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJSb3cgPyByZW5kZXJSb3cocm93LCBpbmRleCkgOiBudWxsXG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvVGFibGVCb2R5PlxuICAgICAgPC9UYWJsZT5cbiAgICA8L0FkdmFuY2VkVGFibGVTdHlsZWQ+XG4gIClcbn1cblxuZXhwb3J0IHsgQWR2YW5jZWRUYWJsZSB9XG4iXSwibmFtZXMiOlsiQWR2YW5jZWRUYWJsZSIsInJvd3MiLCJjb2x1bW5zIiwicmVuZGVyUm93IiwiY2xhc3NOYW1lIiwiaW5pdGlhbE9yZGVyQnkiLCJpbml0aWFsT3JkZXJEaXJlY3Rpb24iLCJvbk9yZGVyQ2hhbmdlIiwib3JkZXIiLCJzZXRPcmRlciIsInVzZVN0YXRlIiwib3JkZXJCeSIsInNldE9yZGVyQnkiLCJoYW5kbGVSZXF1ZXN0U29ydCIsIl8iLCJjb2x1bW5JZCIsImlzQXNjIiwiQWR2YW5jZWRUYWJsZVN0eWxlZCIsIlRhYmxlIiwic3RpY2t5SGVhZGVyIiwiYXJpYS1sYWJlbGxlZGJ5IiwiYXJpYS1sYWJlbCIsInNpemUiLCJBZHZhbmNlZFRhYmxlSGVhZCIsIm9uUmVxdWVzdFNvcnQiLCJUYWJsZUJvZHkiLCJzdGFibGVTb3J0IiwiZ2V0Q29tcGFyYXRvciIsIm1hcCIsInJvdyIsImluZGV4Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXVEU0E7OztlQUFBQTs7Ozt1QkF2RGdCO3NCQUVRO3FDQUNHO21DQUNGO29DQUNRO0FBWTFDLE1BQU1BLGdCQUFnQixDQUFzQyxFQUMxREMsSUFBSSxFQUNKQyxPQUFPLEVBQ1BDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxpQkFBaUIsYUFBYSxFQUM5QkMsd0JBQXdCLE1BQU0sRUFDOUJDLGFBQWEsRUFDRjtJQUNYLE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHQyxJQUFBQSxlQUFRLEVBQWlCSjtJQUNuRCxNQUFNLENBQUNLLFNBQVNDLFdBQVcsR0FBR0YsSUFBQUEsZUFBUSxFQUFDTDtJQUV2QyxNQUFNUSxvQkFBb0IsQ0FBQ0MsR0FBcUJDO1FBQzlDLE1BQU1DLFFBQVFMLFlBQVlJLFlBQVlQLFVBQVU7UUFDaERDLFNBQVNPLFFBQVEsU0FBUztRQUMxQkosV0FBV0c7UUFDWFIsMEJBQUFBLG9DQUFBQSxjQUFnQlEsVUFBVUMsUUFBUSxTQUFTO0lBQzdDO0lBRUEscUJBQ0UscUJBQUNDLHdDQUFtQjtRQUFDYixXQUFXQTtrQkFDOUIsY0FBQSxzQkFBQ2MsV0FBSztZQUFDQyxZQUFZO1lBQUNDLG1CQUFnQjtZQUFhQyxjQUFXO1lBQWlCQyxNQUFLOzs4QkFDaEYscUJBQUNDLG9DQUFpQjtvQkFDaEJmLE9BQU9BO29CQUNQRyxTQUFTQTtvQkFDVGEsZUFBZVg7b0JBQ2ZYLFNBQVNBOzs4QkFFWCxxQkFBQ3VCLGVBQVM7OEJBQ1BDLElBQUFBLDhCQUFVLEVBQU16QixNQUFNMEIsSUFBQUEsaUNBQWEsRUFBTW5CLE9BQU9HLFVBQVVpQixHQUFHLENBQUMsQ0FBQ0MsS0FBS0M7d0JBQ25FLE9BQU8zQixZQUFZQSxVQUFVMEIsS0FBS0MsU0FBUztvQkFDN0M7Ozs7O0FBS1YifQ==