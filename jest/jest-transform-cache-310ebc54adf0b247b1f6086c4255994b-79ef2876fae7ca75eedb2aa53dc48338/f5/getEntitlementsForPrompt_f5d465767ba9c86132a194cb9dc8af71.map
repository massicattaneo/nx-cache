{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/hooks/src/lib/useSuggestedPrompts/getEntitlementsForPrompt.ts"],"sourcesContent":["import { z } from \"zod\"\nimport { SuggestedPromptSchema } from \"@rp/common/api-types\"\nimport { datasetEntitlements, relatedScopeEntitlements } from \"./entitlementsMap\"\nimport { Entitlement } from \"./suggestedPrompts.types\"\n\ntype InferredSuggestedPrompt = z.infer<typeof SuggestedPromptSchema>\ntype Dataset = keyof InferredSuggestedPrompt[\"datasets\"]\n\n// It is an object so it forces you to have all the values in the record\n// We don't want to filter them by mistake\nconst DATASETS: Record<Dataset, true> = {\n  transcripts: true,\n  filings: true,\n  \"job-analytics\": true,\n  news: true,\n  price: true,\n  \"sentiment-attention\": true,\n  estimates: true,\n  \"knowledge-graph\": true,\n  crunchbase: true,\n  \"etf-holdings\": true,\n  market_intelligence: true,\n  earnings_calls: true,\n} as const\n\nconst isValidDataset = (dataset: string): dataset is Dataset => {\n  return Object.keys(DATASETS).includes(dataset)\n}\n\nconst getEntitlementsForPrompt = (suggestion: InferredSuggestedPrompt) => {\n  const entitlements: Array<Entitlement> = []\n  const datasets = Object.entries(suggestion?.datasets ?? {})\n    .filter(([_, value]) => value)\n    .map(([dataset]) => dataset)\n    .filter(isValidDataset)\n\n  for (const dataset of datasets) {\n    const entitlement = datasetEntitlements[dataset]\n    if (entitlement !== undefined) {\n      entitlements.push(entitlement)\n    }\n  }\n\n  if (suggestion.scope) {\n    const scopeEntitlement = relatedScopeEntitlements[suggestion.scope]\n    if (scopeEntitlement !== undefined && !entitlements.find(e => e === scopeEntitlement)) {\n      entitlements.push(scopeEntitlement)\n    }\n  }\n\n  return entitlements\n}\n\nexport { getEntitlementsForPrompt }\n"],"names":["getEntitlementsForPrompt","DATASETS","transcripts","filings","news","price","estimates","crunchbase","market_intelligence","earnings_calls","isValidDataset","dataset","Object","keys","includes","suggestion","entitlements","datasets","entries","filter","_","value","map","entitlement","datasetEntitlements","undefined","push","scope","scopeEntitlement","relatedScopeEntitlements","find","e"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqDSA;;;eAAAA;;;iCAnDqD;AAM9D,wEAAwE;AACxE,0CAA0C;AAC1C,MAAMC,WAAkC;IACtCC,aAAa;IACbC,SAAS;IACT,iBAAiB;IACjBC,MAAM;IACNC,OAAO;IACP,uBAAuB;IACvBC,WAAW;IACX,mBAAmB;IACnBC,YAAY;IACZ,gBAAgB;IAChBC,qBAAqB;IACrBC,gBAAgB;AAClB;AAEA,MAAMC,iBAAiB,CAACC;IACtB,OAAOC,OAAOC,IAAI,CAACZ,UAAUa,QAAQ,CAACH;AACxC;AAEA,MAAMX,2BAA2B,CAACe;IAChC,MAAMC,eAAmC,EAAE;QACXD;IAAhC,MAAME,WAAWL,OAAOM,OAAO,CAACH,CAAAA,uBAAAA,uBAAAA,iCAAAA,WAAYE,QAAQ,cAApBF,kCAAAA,uBAAwB,CAAC,GACtDI,MAAM,CAAC,CAAC,CAACC,GAAGC,MAAM,GAAKA,OACvBC,GAAG,CAAC,CAAC,CAACX,QAAQ,GAAKA,SACnBQ,MAAM,CAACT;IAEV,KAAK,MAAMC,WAAWM,SAAU;QAC9B,MAAMM,cAAcC,oCAAmB,CAACb,QAAQ;QAChD,IAAIY,gBAAgBE,WAAW;YAC7BT,aAAaU,IAAI,CAACH;QACpB;IACF;IAEA,IAAIR,WAAWY,KAAK,EAAE;QACpB,MAAMC,mBAAmBC,yCAAwB,CAACd,WAAWY,KAAK,CAAC;QACnE,IAAIC,qBAAqBH,aAAa,CAACT,aAAac,IAAI,CAACC,CAAAA,IAAKA,MAAMH,mBAAmB;YACrFZ,aAAaU,IAAI,CAACE;QACpB;IACF;IAEA,OAAOZ;AACT"}