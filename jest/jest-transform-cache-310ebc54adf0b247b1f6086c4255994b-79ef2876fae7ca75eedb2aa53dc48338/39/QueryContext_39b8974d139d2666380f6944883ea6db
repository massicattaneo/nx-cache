b35a3c1adf07c6ef271537e75330057f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    QueryProvider: function() {
        return QueryProvider;
    },
    useQueryContext: function() {
        return useQueryContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _apitypes = require("@rp/common/api-types");
const _rpql = require("@rp/react/rpql");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _hooks = require("@rp/react/web/common/hooks");
const _cqsquerycontext = require("@rp/react/web/cqs-query-context");
const _cqsutils = require("@rp/react/web/cqs-utils");
const _utils = require("@rp/web/utils");
const _reactquery = require("@tanstack/react-query");
const _Snackbar = require("../Snackbar");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
// ============================
// Defaults
// ============================
const DEFAULT_SCOPE = _apitypes.CqsQueryScopeEnum.All;
const DEFAULT_SORT_TYPE = _apitypes.CqsQuerySortEnum.Relevance;
// ============================
// Context
// ============================
const QueryContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const QueryProvider = ({ id, children, patchCheck = ()=>false, setResultsState })=>{
    var _getRoot;
    // Show me some hooks!
    const { enqueueError } = (0, _Snackbar.useSnackbar)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const { mutateAsync, isPending, isError } = (0, _userdataqueries.useUpdateSavedQueryField)({
        enqueueError
    });
    const { makeDynamicName } = (0, _userdataqueries.useDynamicCQSName)();
    const [isSummaryLoading, setIsSummaryLoading] = (0, _react.useState)(false);
    // UI State - NOT SAVED IN THE QUERY
    const [filterKeyword, setFilterKeyword] = (0, _react.useState)("");
    const [scope, setScope] = (0, _react.useState)(DEFAULT_SCOPE);
    const [searchQueryExpression, setSearchQueryExpression] = (0, _react.useState)();
    const [sort, setSort] = (0, _react.useState)(DEFAULT_SORT_TYPE);
    // Get the data we need from the saved search
    const { data } = (0, _userdataqueries.useSavedQuery)(id);
    // Recent search behavior
    const shouldCreateNewQuery = (0, _react.useRef)(false);
    const { handleNewQueryFromExpression } = (0, _hooks.useHandleNewQuery)();
    var _data_query_expression;
    // If the expression coming from BE is not valid, we wrap it on a logicalFilter
    let initialExpression = (_data_query_expression = data === null || data === void 0 ? void 0 : data.query.expression) !== null && _data_query_expression !== void 0 ? _data_query_expression : _cqsutils.DEFAULT_EXPRESSION;
    if (!(0, _apitypes.isRpqlLogicalGroup)(initialExpression)) {
        initialExpression = {
            type: "and",
            value: [
                initialExpression
            ]
        };
    }
    const rpql = (0, _rpql.useRavenPackQuery)(initialExpression);
    const getDiscoveryPanelKey = (0, _cqsquerycontext.useDiscoveryPanelKey)();
    // Before a search is patched, we can check some defaults
    const checkDefaults = ({ id, fields }, previousQuery)=>{
        const { query: { expression = _cqsutils.DEFAULT_EXPRESSION } = {} } = fields;
        // If there are no sentences or the expression is empty...
        // ...we update the cache but return false, so we don't patch the query
        if (!(0, _cqsutils.isCqsQueryNotEmpty)({
            expression
        })) {
            queryClient.setQueryData([
                "query",
                id
            ], _object_spread_props(_object_spread({}, previousQuery), {
                query: _object_spread_props(_object_spread({}, previousQuery === null || previousQuery === void 0 ? void 0 : previousQuery.query), {
                    sentences: [],
                    expression: _cqsutils.DEFAULT_EXPRESSION
                })
            }));
            (0, _cqsquerycontext.removeLastTick)(getDiscoveryPanelKey(searchQuery), queryClient);
            return false;
        }
        let modifiedFields = fields;
        if ((previousQuery === null || previousQuery === void 0 ? void 0 : previousQuery.saveStatus) === "unsaved" && !fields.name) {
            const name = (0, _utils.decodeString)(makeDynamicName(fields));
            modifiedFields = _object_spread_props(_object_spread({}, modifiedFields), {
                name
            });
        }
        return {
            id,
            fields: modifiedFields
        };
    };
    const patchQuery = (newData, enableNewQuery = false)=>{
        var _newData_fields_query;
        if (enableNewQuery && shouldCreateNewQuery.current && ((_newData_fields_query = newData.fields.query) === null || _newData_fields_query === void 0 ? void 0 : _newData_fields_query.expression)) {
            var _newData_fields_query1;
            handleNewQueryFromExpression((_newData_fields_query1 = newData.fields.query) === null || _newData_fields_query1 === void 0 ? void 0 : _newData_fields_query1.expression);
            shouldCreateNewQuery.current = false;
            return;
        }
        if (!patchCheck(data, newData)) {
            var _data_query_expression;
            rpql.resetExpression((_data_query_expression = data === null || data === void 0 ? void 0 : data.query.expression) !== null && _data_query_expression !== void 0 ? _data_query_expression : _cqsutils.DEFAULT_EXPRESSION);
            // So we undo the setResultsState("loading") change.
            setResultsState === null || setResultsState === void 0 ? void 0 : setResultsState("results");
            return;
        }
        const queryContent = checkDefaults(newData, data);
        if (queryContent) {
            return mutateAsync(queryContent);
        }
        // If the query is empty, and the search is not saved,
        // next change should trigger a new search
        if ((data === null || data === void 0 ? void 0 : data.saveStatus) === "unsaved") {
            shouldCreateNewQuery.current = true;
        }
        return;
    };
    const patchExpression = (newExpression)=>{
        if ((0, _cqsutils.isCqsQueryNotEmpty)(_object_spread_props(_object_spread({}, data === null || data === void 0 ? void 0 : data.query), {
            expression: newExpression
        }))) {
            setResultsState === null || setResultsState === void 0 ? void 0 : setResultsState("loading");
        }
        patchQuery({
            id,
            fields: {
                query: _object_spread_props(_object_spread({}, data === null || data === void 0 ? void 0 : data.query), {
                    expression: newExpression
                })
            }
        }, true);
    };
    const patchSort = (0, _react.useCallback)((value)=>{
        setResultsState === null || setResultsState === void 0 ? void 0 : setResultsState("loading");
        setSort(value);
    }, [
        setResultsState
    ]);
    const patchScope = (0, _react.useCallback)((value)=>{
        setScope(value);
    }, []);
    const setDate = (date)=>{
        setResultsState === null || setResultsState === void 0 ? void 0 : setResultsState("loading");
        if ((date === null || date === void 0 ? void 0 : date.value) === "any_time") {
            return patchQuery({
                id,
                fields: {
                    query: _object_spread_props(_object_spread({}, data === null || data === void 0 ? void 0 : data.query), {
                        date: null
                    })
                }
            });
        }
        return patchQuery({
            id,
            fields: {
                query: _object_spread_props(_object_spread({}, data === null || data === void 0 ? void 0 : data.query), {
                    date: [
                        date
                    ]
                })
            }
        });
    };
    const addItem = async (item, operation = _cqsquerycontext.DEFAULT_OPERATION)=>{
        const builder = rpql.builder();
        (0, _cqsquerycontext.addCqsQueryItem)(rpql.root, builder, item, operation, rpql.filterMap);
        const expression = builder.generate();
        await patchExpression(expression);
    };
    const updateFilter = async (id, updateFunc)=>{
        const expression = rpql.updateFilter(id, updateFunc);
        await patchExpression(expression);
        return;
    };
    const updateItems = async (filterId, filters)=>{
        const rpqlBuilder = rpql.builder();
        rpqlBuilder.remove(filterId);
        filters.forEach((item)=>{
            const operation = item.operation || _cqsquerycontext.DEFAULT_OPERATION;
            const isCorrectFilter = (0, _cqsquerycontext.matchFilter)(item, operation);
            const parent = rpqlBuilder.findChild(isCorrectFilter);
            if (parent === null) {
                rpqlBuilder.add(rpql.root, (0, _cqsquerycontext.convertItemToFilter)(item, operation));
            } else if ((0, _apitypes.isRpqlFlatArrayFilter)(parent) && !(0, _cqsquerycontext.isMacroSearchItem)(item) && !parent.value.includes(item.value)) {
                rpqlBuilder.update(parent.id, (filter)=>_object_spread_props(_object_spread({}, filter), {
                        value: [
                            ...filter.value,
                            item.value
                        ]
                    }));
            }
        });
        const expression = rpqlBuilder.generate();
        await patchExpression(expression);
        return;
    };
    const excludeItemFromDP = async (item, newItem = false, onSuccess)=>{
        if (newItem) {
            addItem(item, "not-in");
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
            return;
        }
        const rpqlBuilder = rpql.builder();
        const parent = rpql.findChild(rpql.root, (flatFilter)=>(0, _apitypes.isRpqlFlatArrayFilter)(flatFilter) && flatFilter.value.includes(item.value));
        // Invalid parent, this should never happen
        if (parent === null || !(0, _apitypes.isRpqlFlatArrayFilter)(parent)) {
            return;
        }
        if (parent.operation === "not-in") {
            return;
        }
        if (parent.value.length === 1) {
            rpqlBuilder.remove(parent.id);
            rpqlBuilder.add(rpql.root, (0, _cqsquerycontext.convertItemToFilter)(item, "not-in"));
        } else {
            rpqlBuilder.update(parent.id, (filter)=>_object_spread_props(_object_spread({}, filter), {
                    value: filter.value.filter((key)=>key !== item.value)
                }));
            rpqlBuilder.add(rpql.root, (0, _cqsquerycontext.convertItemToFilter)(item, "not-in"));
        }
        const expression = rpqlBuilder.generate();
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
        return patchExpression(expression);
    };
    const removeItem = async (item)=>{
        if ((0, _cqsquerycontext.isMacroSearchItem)(item)) {
            return;
        }
        const container = rpql.findChild(rpql.root, (filter)=>(0, _apitypes.isRpqlFlatArrayFilter)(filter) && filter.value.includes(item.value));
        if (container === null || !(0, _apitypes.isRpqlFlatArrayFilter)(container)) {
            return;
        }
        if (container.value.length === 1) {
            const expression = rpql.removeFilter(container.id);
            await patchExpression(expression);
            return;
        }
        const expression = rpql.updateFilter(container.id, (filter)=>{
            return _object_spread_props(_object_spread({}, filter), {
                value: filter.value.filter((id)=>id !== item.value)
            });
        });
        await patchExpression(expression);
        return;
    };
    const removeFilters = async (filters)=>{
        const rpqlBuilder = rpql.builder();
        filters.forEach((filterId)=>{
            rpqlBuilder.remove(filterId);
        });
        const expression = rpqlBuilder.generate();
        await patchExpression(expression);
        return;
    };
    const removeMacroSearchContent = async (macroId, groupToRemove)=>{
        var _parent_metadata;
        const existingGroup = rpql.filterMap[groupToRemove.id];
        if (!existingGroup || !(0, _apitypes.isRpqlFlatArrayFilter)(existingGroup)) {
            throw new Error("Trying to remove an invalid filter as a macro-search group");
        }
        const parent = rpql.filterMap[macroId];
        if (!parent || !(0, _apitypes.isRpqlFlatMatchFilter)(parent)) {
            throw new Error("Selected Macro-search is invalid or does not exist");
        }
        const builder = rpql.builder();
        // We always have to remove the labels related to the items to be removed.
        const invalidLabels = groupToRemove.value.map((key)=>`${groupToRemove.type}-${key}`);
        const updatedLabels = _object_spread({}, (_parent_metadata = parent.metadata) === null || _parent_metadata === void 0 ? void 0 : _parent_metadata.labels);
        for (const labelToRemove of invalidLabels){
            delete updatedLabels[labelToRemove];
        }
        builder.update(macroId, (macroFilter)=>_object_spread_props(_object_spread({}, macroFilter), {
                metadata: _object_spread_props(_object_spread({}, macroFilter.metadata), {
                    labels: updatedLabels
                })
            }));
        // Then, if the group is completely empty, we remove the children
        if (groupToRemove.value.length === existingGroup.value.length) {
            builder.update(macroId, (macroFilter)=>_object_spread_props(_object_spread({}, macroFilter), {
                    value: macroFilter.value.filter((childId)=>childId !== groupToRemove.id)
                }));
        } else {
            builder.update(existingGroup.id, (filter)=>_object_spread_props(_object_spread({}, filter), {
                    value: filter.value.filter((key)=>!groupToRemove.value.includes(key))
                }));
        }
        const expression = builder.generate();
        await patchExpression(expression);
    };
    const getRoot = ()=>{
        const rootFilter = rpql.getFilter(rpql.root);
        if (rootFilter === null || !(0, _apitypes.isRpqlFlatLogicalGroup)(rootFilter)) {
            return null;
        }
        return rootFilter;
    };
    const clearInternalState = ()=>{
        rpql.clear();
    };
    // Easily modify elements in the main query
    const actions = {
        expression: {
            addItem,
            removeItem,
            updateItems,
            removeFilters,
            removeMacroSearchContent,
            getFilter: rpql.getFilter,
            getRoot: getRoot,
            updateFilter,
            excludeItemFromDP
        },
        clearInternalState,
        setFilterKeyword,
        setSort: patchSort,
        setScope: patchScope,
        setDate
    };
    var _data_query_date;
    const date = (_data_query_date = data === null || data === void 0 ? void 0 : data.query.date) !== null && _data_query_date !== void 0 ? _data_query_date : null;
    const baseQuery = {
        queryId: id,
        expression: rpql.expression,
        sort,
        ranking: data === null || data === void 0 ? void 0 : data.query.ranking,
        scope
    };
    const searchQuery = (0, _react.useMemo)(()=>({
            sort,
            scope,
            ranking: data === null || data === void 0 ? void 0 : data.query.ranking,
            expression: searchQueryExpression,
            queryId: id
        }), [
        data === null || data === void 0 ? void 0 : data.query.ranking,
        id,
        scope,
        searchQueryExpression,
        sort
    ]);
    (0, _react.useEffect)(()=>{
        var _data_query;
        setSearchQueryExpression({
            type: "and",
            value: (data === null || data === void 0 ? void 0 : (_data_query = data.query) === null || _data_query === void 0 ? void 0 : _data_query.date) ? [
                rpql.expression,
                ...data.query.date || null
            ] : [
                rpql.expression
            ]
        });
    }, [
        rpql.expression,
        data
    ]);
    var _getRoot_value;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(QueryContext.Provider, {
        value: {
            savedQuery: _object_spread_props(_object_spread({}, data), {
                id,
                query: _object_spread_props(_object_spread({}, baseQuery), {
                    date
                })
            }),
            // The Search Query contains additional filters that are not saved to the search
            searchQuery,
            uiState: {
                filterKeyword,
                isLoading: isPending,
                isError,
                isSummaryLoading,
                setIsSummaryLoading
            },
            actions,
            queryId: id,
            queryBar: {
                actions,
                filters: (_getRoot_value = (_getRoot = getRoot()) === null || _getRoot === void 0 ? void 0 : _getRoot.value) !== null && _getRoot_value !== void 0 ? _getRoot_value : [],
                id,
                saveStatus: data === null || data === void 0 ? void 0 : data.saveStatus
            }
        },
        children: children
    });
};
// ============================
// Hooks
// ============================
const useQueryContext = ()=>{
    const context = (0, _react.useContext)(QueryContext);
    if (!context) {
        throw new Error("useQueryContext must be used within a QueryProvider");
    }
    return context;
};

//# sourceMappingURL=data:application/json;base64,