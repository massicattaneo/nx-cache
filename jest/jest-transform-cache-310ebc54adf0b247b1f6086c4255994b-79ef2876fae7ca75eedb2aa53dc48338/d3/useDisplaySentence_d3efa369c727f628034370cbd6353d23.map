{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/results-story-card/src/StoryCard/useDisplaySentence.tsx"],"sourcesContent":["import { CqsStorySentence, CqsStorySentences } from \"@rp/common/api-types\"\nimport { useDocumentMatches } from \"@rp/react/web/document-viewer\"\n\nexport const useDisplaySentence = (sentences: CqsStorySentences, documentId: string) => {\n  let displaySentence: CqsStorySentence = {\n    pnum: 1,\n    snum: 1,\n    text: \"Headline only\",\n    entities: [],\n  }\n\n  // If this id is undefined, useDocumentMatches will be disabled\n  let id: string | undefined = documentId\n\n  // First sentence is not the title\n  if (sentences[0].pnum > 0) {\n    displaySentence = sentences[0]\n    id = undefined\n  }\n\n  // First sentence is the title, but we have another sentence to use\n  if (sentences[0].pnum === 0 && sentences.length > 1) {\n    displaySentence = sentences[1]\n    id = undefined\n  }\n\n  // Get a match from CQS if we still have a document id\n  const { sentences: matches = [], isLoading } = useDocumentMatches({}, id)\n  const firstNonHeadlineMatch = matches.find(({ pnum }) => pnum > 0)\n  const meaningfulMatch = matches.find(({ pnum, entities = [] }) => pnum > 0 && entities.length > 0)\n\n  // We have matches, but none meaningful, so use the first match\n  if (firstNonHeadlineMatch && !meaningfulMatch) {\n    displaySentence = firstNonHeadlineMatch\n    displaySentence.text = \"Headline only\"\n  }\n\n  // If we have a meaningful match, use it\n  if (meaningfulMatch) {\n    displaySentence = meaningfulMatch\n  }\n\n  // The Headline is the only content match\n  if (matches.length === 1 && matches[0].pnum === 0) {\n    displaySentence.text = \"Headline only\"\n  }\n\n  return { displaySentence, isLoading }\n}\n"],"names":["useDisplaySentence","sentences","documentId","displaySentence","pnum","snum","text","entities","id","undefined","length","matches","isLoading","useDocumentMatches","firstNonHeadlineMatch","find","meaningfulMatch"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAGaA;;;eAAAA;;;gCAFsB;AAE5B,MAAMA,qBAAqB,CAACC,WAA8BC;IAC/D,IAAIC,kBAAoC;QACtCC,MAAM;QACNC,MAAM;QACNC,MAAM;QACNC,UAAU,EAAE;IACd;IAEA,+DAA+D;IAC/D,IAAIC,KAAyBN;IAE7B,kCAAkC;IAClC,IAAID,SAAS,CAAC,EAAE,CAACG,IAAI,GAAG,GAAG;QACzBD,kBAAkBF,SAAS,CAAC,EAAE;QAC9BO,KAAKC;IACP;IAEA,mEAAmE;IACnE,IAAIR,SAAS,CAAC,EAAE,CAACG,IAAI,KAAK,KAAKH,UAAUS,MAAM,GAAG,GAAG;QACnDP,kBAAkBF,SAAS,CAAC,EAAE;QAC9BO,KAAKC;IACP;IAEA,sDAAsD;IACtD,MAAM,EAAER,WAAWU,UAAU,EAAE,EAAEC,SAAS,EAAE,GAAGC,IAAAA,kCAAkB,EAAC,CAAC,GAAGL;IACtE,MAAMM,wBAAwBH,QAAQI,IAAI,CAAC,CAAC,EAAEX,IAAI,EAAE,GAAKA,OAAO;IAChE,MAAMY,kBAAkBL,QAAQI,IAAI,CAAC,CAAC,EAAEX,IAAI,EAAEG,WAAW,EAAE,EAAE,GAAKH,OAAO,KAAKG,SAASG,MAAM,GAAG;IAEhG,+DAA+D;IAC/D,IAAII,yBAAyB,CAACE,iBAAiB;QAC7Cb,kBAAkBW;QAClBX,gBAAgBG,IAAI,GAAG;IACzB;IAEA,wCAAwC;IACxC,IAAIU,iBAAiB;QACnBb,kBAAkBa;IACpB;IAEA,yCAAyC;IACzC,IAAIL,QAAQD,MAAM,KAAK,KAAKC,OAAO,CAAC,EAAE,CAACP,IAAI,KAAK,GAAG;QACjDD,gBAAgBG,IAAI,GAAG;IACzB;IAEA,OAAO;QAAEH;QAAiBS;IAAU;AACtC"}