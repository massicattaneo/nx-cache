46ed6410bb14e5d5311b9055c0477f04
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDisplaySentence", {
    enumerable: true,
    get: function() {
        return useDisplaySentence;
    }
});
const _documentviewer = require("@rp/react/web/document-viewer");
const useDisplaySentence = (sentences, documentId)=>{
    let displaySentence = {
        pnum: 1,
        snum: 1,
        text: "Headline only",
        entities: []
    };
    // If this id is undefined, useDocumentMatches will be disabled
    let id = documentId;
    // First sentence is not the title
    if (sentences[0].pnum > 0) {
        displaySentence = sentences[0];
        id = undefined;
    }
    // First sentence is the title, but we have another sentence to use
    if (sentences[0].pnum === 0 && sentences.length > 1) {
        displaySentence = sentences[1];
        id = undefined;
    }
    // Get a match from CQS if we still have a document id
    const { sentences: matches = [], isLoading } = (0, _documentviewer.useDocumentMatches)({}, id);
    const firstNonHeadlineMatch = matches.find(({ pnum })=>pnum > 0);
    const meaningfulMatch = matches.find(({ pnum, entities = [] })=>pnum > 0 && entities.length > 0);
    // We have matches, but none meaningful, so use the first match
    if (firstNonHeadlineMatch && !meaningfulMatch) {
        displaySentence = firstNonHeadlineMatch;
        displaySentence.text = "Headline only";
    }
    // If we have a meaningful match, use it
    if (meaningfulMatch) {
        displaySentence = meaningfulMatch;
    }
    // The Headline is the only content match
    if (matches.length === 1 && matches[0].pnum === 0) {
        displaySentence.text = "Headline only";
    }
    return {
        displaySentence,
        isLoading
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9yZXN1bHRzLXN0b3J5LWNhcmQvc3JjL1N0b3J5Q2FyZC91c2VEaXNwbGF5U2VudGVuY2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENxc1N0b3J5U2VudGVuY2UsIENxc1N0b3J5U2VudGVuY2VzIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IHVzZURvY3VtZW50TWF0Y2hlcyB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2RvY3VtZW50LXZpZXdlclwiXG5cbmV4cG9ydCBjb25zdCB1c2VEaXNwbGF5U2VudGVuY2UgPSAoc2VudGVuY2VzOiBDcXNTdG9yeVNlbnRlbmNlcywgZG9jdW1lbnRJZDogc3RyaW5nKSA9PiB7XG4gIGxldCBkaXNwbGF5U2VudGVuY2U6IENxc1N0b3J5U2VudGVuY2UgPSB7XG4gICAgcG51bTogMSxcbiAgICBzbnVtOiAxLFxuICAgIHRleHQ6IFwiSGVhZGxpbmUgb25seVwiLFxuICAgIGVudGl0aWVzOiBbXSxcbiAgfVxuXG4gIC8vIElmIHRoaXMgaWQgaXMgdW5kZWZpbmVkLCB1c2VEb2N1bWVudE1hdGNoZXMgd2lsbCBiZSBkaXNhYmxlZFxuICBsZXQgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGRvY3VtZW50SWRcblxuICAvLyBGaXJzdCBzZW50ZW5jZSBpcyBub3QgdGhlIHRpdGxlXG4gIGlmIChzZW50ZW5jZXNbMF0ucG51bSA+IDApIHtcbiAgICBkaXNwbGF5U2VudGVuY2UgPSBzZW50ZW5jZXNbMF1cbiAgICBpZCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gRmlyc3Qgc2VudGVuY2UgaXMgdGhlIHRpdGxlLCBidXQgd2UgaGF2ZSBhbm90aGVyIHNlbnRlbmNlIHRvIHVzZVxuICBpZiAoc2VudGVuY2VzWzBdLnBudW0gPT09IDAgJiYgc2VudGVuY2VzLmxlbmd0aCA+IDEpIHtcbiAgICBkaXNwbGF5U2VudGVuY2UgPSBzZW50ZW5jZXNbMV1cbiAgICBpZCA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gR2V0IGEgbWF0Y2ggZnJvbSBDUVMgaWYgd2Ugc3RpbGwgaGF2ZSBhIGRvY3VtZW50IGlkXG4gIGNvbnN0IHsgc2VudGVuY2VzOiBtYXRjaGVzID0gW10sIGlzTG9hZGluZyB9ID0gdXNlRG9jdW1lbnRNYXRjaGVzKHt9LCBpZClcbiAgY29uc3QgZmlyc3ROb25IZWFkbGluZU1hdGNoID0gbWF0Y2hlcy5maW5kKCh7IHBudW0gfSkgPT4gcG51bSA+IDApXG4gIGNvbnN0IG1lYW5pbmdmdWxNYXRjaCA9IG1hdGNoZXMuZmluZCgoeyBwbnVtLCBlbnRpdGllcyA9IFtdIH0pID0+IHBudW0gPiAwICYmIGVudGl0aWVzLmxlbmd0aCA+IDApXG5cbiAgLy8gV2UgaGF2ZSBtYXRjaGVzLCBidXQgbm9uZSBtZWFuaW5nZnVsLCBzbyB1c2UgdGhlIGZpcnN0IG1hdGNoXG4gIGlmIChmaXJzdE5vbkhlYWRsaW5lTWF0Y2ggJiYgIW1lYW5pbmdmdWxNYXRjaCkge1xuICAgIGRpc3BsYXlTZW50ZW5jZSA9IGZpcnN0Tm9uSGVhZGxpbmVNYXRjaFxuICAgIGRpc3BsYXlTZW50ZW5jZS50ZXh0ID0gXCJIZWFkbGluZSBvbmx5XCJcbiAgfVxuXG4gIC8vIElmIHdlIGhhdmUgYSBtZWFuaW5nZnVsIG1hdGNoLCB1c2UgaXRcbiAgaWYgKG1lYW5pbmdmdWxNYXRjaCkge1xuICAgIGRpc3BsYXlTZW50ZW5jZSA9IG1lYW5pbmdmdWxNYXRjaFxuICB9XG5cbiAgLy8gVGhlIEhlYWRsaW5lIGlzIHRoZSBvbmx5IGNvbnRlbnQgbWF0Y2hcbiAgaWYgKG1hdGNoZXMubGVuZ3RoID09PSAxICYmIG1hdGNoZXNbMF0ucG51bSA9PT0gMCkge1xuICAgIGRpc3BsYXlTZW50ZW5jZS50ZXh0ID0gXCJIZWFkbGluZSBvbmx5XCJcbiAgfVxuXG4gIHJldHVybiB7IGRpc3BsYXlTZW50ZW5jZSwgaXNMb2FkaW5nIH1cbn1cbiJdLCJuYW1lcyI6WyJ1c2VEaXNwbGF5U2VudGVuY2UiLCJzZW50ZW5jZXMiLCJkb2N1bWVudElkIiwiZGlzcGxheVNlbnRlbmNlIiwicG51bSIsInNudW0iLCJ0ZXh0IiwiZW50aXRpZXMiLCJpZCIsInVuZGVmaW5lZCIsImxlbmd0aCIsIm1hdGNoZXMiLCJpc0xvYWRpbmciLCJ1c2VEb2N1bWVudE1hdGNoZXMiLCJmaXJzdE5vbkhlYWRsaW5lTWF0Y2giLCJmaW5kIiwibWVhbmluZ2Z1bE1hdGNoIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFHYUE7OztlQUFBQTs7O2dDQUZzQjtBQUU1QixNQUFNQSxxQkFBcUIsQ0FBQ0MsV0FBOEJDO0lBQy9ELElBQUlDLGtCQUFvQztRQUN0Q0MsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsVUFBVSxFQUFFO0lBQ2Q7SUFFQSwrREFBK0Q7SUFDL0QsSUFBSUMsS0FBeUJOO0lBRTdCLGtDQUFrQztJQUNsQyxJQUFJRCxTQUFTLENBQUMsRUFBRSxDQUFDRyxJQUFJLEdBQUcsR0FBRztRQUN6QkQsa0JBQWtCRixTQUFTLENBQUMsRUFBRTtRQUM5Qk8sS0FBS0M7SUFDUDtJQUVBLG1FQUFtRTtJQUNuRSxJQUFJUixTQUFTLENBQUMsRUFBRSxDQUFDRyxJQUFJLEtBQUssS0FBS0gsVUFBVVMsTUFBTSxHQUFHLEdBQUc7UUFDbkRQLGtCQUFrQkYsU0FBUyxDQUFDLEVBQUU7UUFDOUJPLEtBQUtDO0lBQ1A7SUFFQSxzREFBc0Q7SUFDdEQsTUFBTSxFQUFFUixXQUFXVSxVQUFVLEVBQUUsRUFBRUMsU0FBUyxFQUFFLEdBQUdDLElBQUFBLGtDQUFrQixFQUFDLENBQUMsR0FBR0w7SUFDdEUsTUFBTU0sd0JBQXdCSCxRQUFRSSxJQUFJLENBQUMsQ0FBQyxFQUFFWCxJQUFJLEVBQUUsR0FBS0EsT0FBTztJQUNoRSxNQUFNWSxrQkFBa0JMLFFBQVFJLElBQUksQ0FBQyxDQUFDLEVBQUVYLElBQUksRUFBRUcsV0FBVyxFQUFFLEVBQUUsR0FBS0gsT0FBTyxLQUFLRyxTQUFTRyxNQUFNLEdBQUc7SUFFaEcsK0RBQStEO0lBQy9ELElBQUlJLHlCQUF5QixDQUFDRSxpQkFBaUI7UUFDN0NiLGtCQUFrQlc7UUFDbEJYLGdCQUFnQkcsSUFBSSxHQUFHO0lBQ3pCO0lBRUEsd0NBQXdDO0lBQ3hDLElBQUlVLGlCQUFpQjtRQUNuQmIsa0JBQWtCYTtJQUNwQjtJQUVBLHlDQUF5QztJQUN6QyxJQUFJTCxRQUFRRCxNQUFNLEtBQUssS0FBS0MsT0FBTyxDQUFDLEVBQUUsQ0FBQ1AsSUFBSSxLQUFLLEdBQUc7UUFDakRELGdCQUFnQkcsSUFBSSxHQUFHO0lBQ3pCO0lBRUEsT0FBTztRQUFFSDtRQUFpQlM7SUFBVTtBQUN0QyJ9