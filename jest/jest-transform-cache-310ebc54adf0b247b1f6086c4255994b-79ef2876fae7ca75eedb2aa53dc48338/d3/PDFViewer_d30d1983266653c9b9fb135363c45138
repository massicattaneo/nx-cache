21de6a66270add3584206eb667202567
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactpdf = require("react-pdf");
require("react-pdf/dist/Page/AnnotationLayer.css");
require("react-pdf/dist/esm/Page/AnnotationLayer.css");
require("react-pdf/dist/esm/Page/TextLayer.css");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _headercomponents = require("@rp/react/web/common/header-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _PageWithObserver = require("../PageWithObserver");
const _usePageBoundingBox = require("../hooks/usePageBoundingBox");
const _PDFViewerHeader = require("./PDFViewerHeader");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
_reactpdf.pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${_reactpdf.pdfjs.version}/build/pdf.worker.min.js`;
// Config
const options = {
    cMapUrl: "/cmaps/",
    standardFontDataUrl: "/standard_fonts/"
};
const resizeObserverOptions = {};
const maxWidth = 800;
function PDFViewer({ documentId, backTitle, handleClick, name, disableBackButton, isPrivate, pdfUrl, pdfHeaderOffset = 0, pdfBodyOffset = 0, customDocumentHeaderProps }) {
    const [numPages, setNumPages] = (0, _react.useState)(0);
    const [visiblePages, setVisiblePages] = (0, _react.useState)({});
    const [scale, setScale] = (0, _react.useState)(1);
    const [renderedScale, setRenderedScale] = (0, _react.useState)(1);
    const [containerRef, setContainerRef] = (0, _react.useState)(null);
    const [containerWidth, setContainerWidth] = (0, _react.useState)();
    const { data: { url: fileUrl } = {
        url: ""
    } } = (0, _file.useFileUrl)(isPrivate ? documentId : "");
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const { boundingBox } = (0, _usePageBoundingBox.usePageBoundingBox)();
    const url = fileUrl || pdfUrl;
    // Handlers
    const onDocumentLoadSuccess = ({ numPages: nextNumPages })=>setNumPages(nextNumPages);
    // Resize observer
    const onResize = (0, _react.useCallback)((entries)=>{
        const [entry] = entries;
        if (entry) {
            setContainerWidth(entry.contentRect.width);
        }
    }, []);
    (0, _hooks.useResizeObserver)(containerRef, resizeObserverOptions, onResize);
    // Page number handling
    const setPageVisibility = (0, _react.useCallback)((pageNumber, isIntersecting)=>{
        setVisiblePages((prevVisiblePages)=>_object_spread_props(_object_spread({}, prevVisiblePages), {
                [pageNumber]: isIntersecting
            }));
    }, []);
    // Current page
    const [currentPage, setCurrentPage] = (0, _react.useState)(boundingBox.page || 1);
    (0, _react.useEffect)(()=>{
        var _Object_entries_filter_map_;
        const firstVisiblePage = (_Object_entries_filter_map_ = Object.entries(visiblePages).filter(([_key, value])=>value).map(([key])=>key)[0]) !== null && _Object_entries_filter_map_ !== void 0 ? _Object_entries_filter_map_ : "";
        if (firstVisiblePage && parseInt(firstVisiblePage) !== currentPage) {
            setCurrentPage(parseInt(firstVisiblePage));
        }
    }, [
        currentPage,
        visiblePages
    ]);
    const isScaleUpdating = renderedScale !== scale;
    const pages = new Array(numPages).fill(0).map((_, index)=>({
            id: index.toString(),
            index
        }));
    const isDocumentLoaded = !!numPages;
    const isPaneView = (customDocumentHeaderProps === null || customDocumentHeaderProps === void 0 ? void 0 : customDocumentHeaderProps.variant) === "pane";
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            width: "100%",
            paddingTop: `${pdfBodyOffset}px`,
            position: "relative"
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_headercomponents.HtmlPageHead, {
                title: name
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {
                loading: !isDocumentLoaded
            }),
            isDocumentLoaded && /*#__PURE__*/ (0, _jsxruntime.jsx)(_PDFViewerHeader.PDFViewerHeader, {
                isMobile: isMobile,
                backTitle: backTitle,
                handleClick: handleClick,
                name: name,
                numPages: numPages,
                currentPage: currentPage,
                scale: scale,
                setScale: setScale,
                documentId: documentId,
                disableBackButton: disableBackButton,
                isPrivate: isPrivate,
                pdfHeaderOffset: pdfHeaderOffset,
                customDocumentHeaderProps: customDocumentHeaderProps
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.MaxWidthContainer, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                    ref: setContainerRef,
                    sx: {
                        display: "flex",
                        overflowX: "auto",
                        "& .react-pdf__Document": {
                            marginInline: "auto"
                        },
                        "& .react-pdf__Page": {
                            backgroundColor: "transparent !important",
                            marginTop: "30px",
                            marginBottom: "30px"
                        },
                        "& .react-pdf__Page.scaleUpdating": {
                            display: "none"
                        }
                    },
                    children: url && /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactpdf.Document, {
                        file: url,
                        onLoadSuccess: onDocumentLoadSuccess,
                        options: options,
                        loading: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {}),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                            initialElements: boundingBox.page || 1,
                            virtualized: true,
                            items: pages,
                            renderItem: ({ index })=>{
                                return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                    children: [
                                        isScaleUpdating && renderedScale && /*#__PURE__*/ (0, _jsxruntime.jsx)(_PageWithObserver.PageWithObserver, {
                                            initPage: boundingBox.page,
                                            "data-testid": `page_${index + 1}`,
                                            pageNumber: index + 1,
                                            scale: renderedScale,
                                            setPageVisibility: setPageVisibility,
                                            width: containerWidth ? Math.min(containerWidth, maxWidth) : maxWidth,
                                            boundingBox: boundingBox,
                                            isPaneView: isPaneView
                                        }, `page_${index + 1}@${renderedScale}`),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_PageWithObserver.PageWithObserver, {
                                            initPage: boundingBox.page,
                                            className: `${isScaleUpdating ? "scaleUpdating" : ""}`,
                                            "data-testid": `page_${index + 1}`,
                                            onRenderSuccess: ()=>setRenderedScale(scale),
                                            pageNumber: index + 1,
                                            scale: scale,
                                            setPageVisibility: setPageVisibility,
                                            width: containerWidth ? Math.min(containerWidth, maxWidth) : maxWidth,
                                            boundingBox: boundingBox,
                                            isPaneView: isPaneView
                                        }, `page_${index + 1}@${scale}`)
                                    ]
                                });
                            }
                        })
                    })
                })
            })
        ]
    });
}
const _default = PDFViewer;

//# sourceMappingURL=data:application/json;base64,