4079b28eb400a7ec19766add6a175fe3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useClerkOrganizationMember: function() {
        return useClerkOrganizationMember;
    },
    useClerkOrganizationMemberships: function() {
        return useClerkOrganizationMemberships;
    }
});
const _react = require("react");
require("@rp/adapters");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const MAX_ITERATIONS = 1000;
const getAllOrganizationMemberships = async ()=>{
    const pageSize = 200;
    let hasFinished = false;
    let initialPage = 1;
    const collected = [];
    while(!hasFinished){
        var _window_Clerk_organization, _window_Clerk;
        if (initialPage > MAX_ITERATIONS) {
            break;
        }
        const response = await ((_window_Clerk = window.Clerk) === null || _window_Clerk === void 0 ? void 0 : (_window_Clerk_organization = _window_Clerk.organization) === null || _window_Clerk_organization === void 0 ? void 0 : _window_Clerk_organization.getMemberships({
            pageSize,
            initialPage
        }));
        initialPage++;
        if (!response) {
            break;
        }
        const { data, total_count } = response;
        if (data) {
            collected.push(...data);
        }
        hasFinished = total_count === collected.length;
    }
    return collected;
};
const useClerkOrganizationMemberships = ()=>{
    return (0, _reactquery.useQuery)({
        queryKey: [
            "clerk-organization-memberships"
        ],
        queryFn: getAllOrganizationMemberships,
        staleTime: 60 * 60 * 1000
    });
};
const useClerkOrganizationMember = (id)=>{
    const _useClerkOrganizationMemberships = useClerkOrganizationMemberships(), { data, isLoading, isFetching, isFetched } = _useClerkOrganizationMemberships, rest = _object_without_properties(_useClerkOrganizationMemberships, [
        "data",
        "isLoading",
        "isFetching",
        "isFetched"
    ]);
    const retries = (0, _react.useRef)(0);
    const queryClient = (0, _reactquery.useQueryClient)();
    const user = (0, _react.useMemo)(()=>{
        if (!data || !id) return;
        return data.find((u)=>u.publicUserData.userId === id);
    }, [
        data,
        id
    ]);
    (0, _react.useEffect)(()=>{
        if (user) return;
        if (!data || !id) return;
        if (isLoading || isFetching || isFetched) return;
        if (retries.current > 3) return;
        retries.current++;
        queryClient.refetchQueries({
            queryKey: [
                "clerk-organization-memberships"
            ]
        });
    }, [
        data,
        id,
        isFetched,
        isFetching,
        isLoading,
        queryClient,
        retries,
        user
    ]);
    return _object_spread_props(_object_spread({}, rest), {
        isLoading,
        isFetching,
        data: user
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlQ2xlcmtPcmdhbml6YXRpb25NZW1iZXJzaGlwcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBPcmdhbml6YXRpb25NZW1iZXJzaGlwUmVzb3VyY2UgfSBmcm9tIFwiQGNsZXJrL3R5cGVzXCJcbmltcG9ydCBcIkBycC9hZGFwdGVyc1wiXG5pbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCJcblxuY29uc3QgTUFYX0lURVJBVElPTlMgPSAxXzAwMFxuXG5jb25zdCBnZXRBbGxPcmdhbml6YXRpb25NZW1iZXJzaGlwcyA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgcGFnZVNpemUgPSAyMDBcbiAgbGV0IGhhc0ZpbmlzaGVkID0gZmFsc2VcbiAgbGV0IGluaXRpYWxQYWdlID0gMVxuICBjb25zdCBjb2xsZWN0ZWQ6IEFycmF5PE9yZ2FuaXphdGlvbk1lbWJlcnNoaXBSZXNvdXJjZT4gPSBbXVxuXG4gIHdoaWxlICghaGFzRmluaXNoZWQpIHtcbiAgICBpZiAoaW5pdGlhbFBhZ2UgPiBNQVhfSVRFUkFUSU9OUykge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdpbmRvdy5DbGVyaz8ub3JnYW5pemF0aW9uPy5nZXRNZW1iZXJzaGlwcyh7XG4gICAgICBwYWdlU2l6ZSxcbiAgICAgIGluaXRpYWxQYWdlLFxuICAgIH0pXG5cbiAgICBpbml0aWFsUGFnZSsrXG5cbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YSwgdG90YWxfY291bnQgfSA9IHJlc3BvbnNlXG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgY29sbGVjdGVkLnB1c2goLi4uZGF0YSlcbiAgICB9XG5cbiAgICBoYXNGaW5pc2hlZCA9IHRvdGFsX2NvdW50ID09PSBjb2xsZWN0ZWQubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gY29sbGVjdGVkXG59XG5cbmNvbnN0IHVzZUNsZXJrT3JnYW5pemF0aW9uTWVtYmVyc2hpcHMgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VRdWVyeSh7XG4gICAgcXVlcnlLZXk6IFtcImNsZXJrLW9yZ2FuaXphdGlvbi1tZW1iZXJzaGlwc1wiXSxcbiAgICBxdWVyeUZuOiBnZXRBbGxPcmdhbml6YXRpb25NZW1iZXJzaGlwcyxcbiAgICBzdGFsZVRpbWU6IDYwICogNjAgKiAxMDAwLFxuICB9KVxufVxuXG5jb25zdCB1c2VDbGVya09yZ2FuaXphdGlvbk1lbWJlciA9IChpZDogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgaXNMb2FkaW5nLCBpc0ZldGNoaW5nLCBpc0ZldGNoZWQsIC4uLnJlc3QgfSA9IHVzZUNsZXJrT3JnYW5pemF0aW9uTWVtYmVyc2hpcHMoKVxuICBjb25zdCByZXRyaWVzID0gdXNlUmVmKDApXG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKVxuXG4gIGNvbnN0IHVzZXIgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIWRhdGEgfHwgIWlkKSByZXR1cm5cbiAgICByZXR1cm4gZGF0YS5maW5kKHUgPT4gdS5wdWJsaWNVc2VyRGF0YS51c2VySWQgPT09IGlkKVxuICB9LCBbZGF0YSwgaWRdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHVzZXIpIHJldHVyblxuICAgIGlmICghZGF0YSB8fCAhaWQpIHJldHVyblxuICAgIGlmIChpc0xvYWRpbmcgfHwgaXNGZXRjaGluZyB8fCBpc0ZldGNoZWQpIHJldHVyblxuICAgIGlmIChyZXRyaWVzLmN1cnJlbnQgPiAzKSByZXR1cm5cbiAgICByZXRyaWVzLmN1cnJlbnQrK1xuICAgIHF1ZXJ5Q2xpZW50LnJlZmV0Y2hRdWVyaWVzKHsgcXVlcnlLZXk6IFtcImNsZXJrLW9yZ2FuaXphdGlvbi1tZW1iZXJzaGlwc1wiXSB9KVxuICB9LCBbZGF0YSwgaWQsIGlzRmV0Y2hlZCwgaXNGZXRjaGluZywgaXNMb2FkaW5nLCBxdWVyeUNsaWVudCwgcmV0cmllcywgdXNlcl0pXG5cbiAgcmV0dXJuIHsgLi4ucmVzdCwgaXNMb2FkaW5nLCBpc0ZldGNoaW5nLCBkYXRhOiB1c2VyIH1cbn1cblxuZXhwb3J0IHsgdXNlQ2xlcmtPcmdhbml6YXRpb25NZW1iZXJzaGlwcywgdXNlQ2xlcmtPcmdhbml6YXRpb25NZW1iZXIgfVxuIl0sIm5hbWVzIjpbInVzZUNsZXJrT3JnYW5pemF0aW9uTWVtYmVyIiwidXNlQ2xlcmtPcmdhbml6YXRpb25NZW1iZXJzaGlwcyIsIk1BWF9JVEVSQVRJT05TIiwiZ2V0QWxsT3JnYW5pemF0aW9uTWVtYmVyc2hpcHMiLCJwYWdlU2l6ZSIsImhhc0ZpbmlzaGVkIiwiaW5pdGlhbFBhZ2UiLCJjb2xsZWN0ZWQiLCJ3aW5kb3ciLCJyZXNwb25zZSIsIkNsZXJrIiwib3JnYW5pemF0aW9uIiwiZ2V0TWVtYmVyc2hpcHMiLCJkYXRhIiwidG90YWxfY291bnQiLCJwdXNoIiwibGVuZ3RoIiwidXNlUXVlcnkiLCJxdWVyeUtleSIsInF1ZXJ5Rm4iLCJzdGFsZVRpbWUiLCJpZCIsImlzTG9hZGluZyIsImlzRmV0Y2hpbmciLCJpc0ZldGNoZWQiLCJyZXN0IiwicmV0cmllcyIsInVzZVJlZiIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJ1c2VyIiwidXNlTWVtbyIsImZpbmQiLCJ1IiwicHVibGljVXNlckRhdGEiLCJ1c2VySWQiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwicmVmZXRjaFF1ZXJpZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7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