9d708bf1aa30daf25fe098a00c56fdb8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useWatchlistEntities", {
    enumerable: true,
    get: function() {
        return useWatchlistEntities;
    }
});
const _react = require("react");
const _utils = require("@rp/common/utils");
const _cqsbyids = require("@rp/react/tanstack-api/cqs-by-ids");
const _useWatchlist = require("./useWatchlist");
const useWatchlistEntities = (id)=>{
    const { data: watchlist, isLoading, isError } = (0, _useWatchlist.useWatchlist)(id);
    const { ids, addByIds } = (0, _cqsbyids.useCqsByIdsContext)();
    (0, _react.useEffect)(()=>{
        if (isLoading || !watchlist) return;
        addByIds(watchlist.items.map((key)=>({
                key,
                queryType: key.length === 6 ? "entity" : "rp_topic"
            })));
    }, [
        addByIds,
        isLoading,
        watchlist
    ]);
    const entities = (0, _react.useMemo)(()=>{
        if (!(watchlist === null || watchlist === void 0 ? void 0 : watchlist.items.length)) return [];
        return watchlist.items.map((key)=>{
            var _ids_key;
            return (_ids_key = ids[key]) === null || _ids_key === void 0 ? void 0 : _ids_key.data;
        }).filter(_utils.isDefined);
    }, [
        ids,
        watchlist
    ]);
    return {
        isError,
        isLoadingWatchlist: isLoading,
        isLoadingEntities: !!id && (isLoading || Object.values(ids).filter((item)=>watchlist === null || watchlist === void 0 ? void 0 : watchlist.items.includes(item.data.key)).some((id)=>id.isLoading) || entities.length !== (watchlist === null || watchlist === void 0 ? void 0 : watchlist.items.length)),
        watchlist,
        entities
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL3dhdGNobGlzdC9zcmMvdXNlV2F0Y2hsaXN0RW50aXRpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gXCJAcnAvY29tbW9uL3V0aWxzXCJcbmltcG9ydCB7IHVzZUNxc0J5SWRzQ29udGV4dCB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2Nxcy1ieS1pZHNcIlxuaW1wb3J0IHsgdXNlV2F0Y2hsaXN0IH0gZnJvbSBcIi4vdXNlV2F0Y2hsaXN0XCJcblxuY29uc3QgdXNlV2F0Y2hsaXN0RW50aXRpZXMgPSAoaWQ/OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgeyBkYXRhOiB3YXRjaGxpc3QsIGlzTG9hZGluZywgaXNFcnJvciB9ID0gdXNlV2F0Y2hsaXN0KGlkKVxuICBjb25zdCB7IGlkcywgYWRkQnlJZHMgfSA9IHVzZUNxc0J5SWRzQ29udGV4dCgpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNMb2FkaW5nIHx8ICF3YXRjaGxpc3QpIHJldHVyblxuICAgIGFkZEJ5SWRzKFxuICAgICAgd2F0Y2hsaXN0Lml0ZW1zLm1hcChrZXkgPT4gKHsga2V5LCBxdWVyeVR5cGU6IGtleS5sZW5ndGggPT09IDYgPyBcImVudGl0eVwiIDogXCJycF90b3BpY1wiIH0pKSxcbiAgICApXG4gIH0sIFthZGRCeUlkcywgaXNMb2FkaW5nLCB3YXRjaGxpc3RdKVxuXG4gIGNvbnN0IGVudGl0aWVzID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCF3YXRjaGxpc3Q/Lml0ZW1zLmxlbmd0aCkgcmV0dXJuIFtdXG4gICAgcmV0dXJuIHdhdGNobGlzdC5pdGVtcy5tYXAoa2V5ID0+IGlkc1trZXldPy5kYXRhKS5maWx0ZXIoaXNEZWZpbmVkKVxuICB9LCBbaWRzLCB3YXRjaGxpc3RdKVxuXG4gIHJldHVybiB7XG4gICAgaXNFcnJvcixcbiAgICBpc0xvYWRpbmdXYXRjaGxpc3Q6IGlzTG9hZGluZyxcbiAgICBpc0xvYWRpbmdFbnRpdGllczpcbiAgICAgICEhaWQgJiZcbiAgICAgIChpc0xvYWRpbmcgfHxcbiAgICAgICAgT2JqZWN0LnZhbHVlcyhpZHMpXG4gICAgICAgICAgLmZpbHRlcihpdGVtID0+IHdhdGNobGlzdD8uaXRlbXMuaW5jbHVkZXMoaXRlbS5kYXRhLmtleSkpXG4gICAgICAgICAgLnNvbWUoaWQgPT4gaWQuaXNMb2FkaW5nKSB8fFxuICAgICAgICBlbnRpdGllcy5sZW5ndGggIT09IHdhdGNobGlzdD8uaXRlbXMubGVuZ3RoKSxcbiAgICB3YXRjaGxpc3QsXG4gICAgZW50aXRpZXMsXG4gIH1cbn1cblxuZXhwb3J0IHsgdXNlV2F0Y2hsaXN0RW50aXRpZXMgfVxuIl0sIm5hbWVzIjpbInVzZVdhdGNobGlzdEVudGl0aWVzIiwiaWQiLCJkYXRhIiwid2F0Y2hsaXN0IiwiaXNMb2FkaW5nIiwiaXNFcnJvciIsInVzZVdhdGNobGlzdCIsImlkcyIsImFkZEJ5SWRzIiwidXNlQ3FzQnlJZHNDb250ZXh0IiwidXNlRWZmZWN0IiwiaXRlbXMiLCJtYXAiLCJrZXkiLCJxdWVyeVR5cGUiLCJsZW5ndGgiLCJlbnRpdGllcyIsInVzZU1lbW8iLCJmaWx0ZXIiLCJpc0RlZmluZWQiLCJpc0xvYWRpbmdXYXRjaGxpc3QiLCJpc0xvYWRpbmdFbnRpdGllcyIsIk9iamVjdCIsInZhbHVlcyIsIml0ZW0iLCJpbmNsdWRlcyIsInNvbWUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQW9DU0E7OztlQUFBQTs7O3VCQXBDMEI7dUJBQ1Q7MEJBQ1M7OEJBQ047QUFFN0IsTUFBTUEsdUJBQXVCLENBQUNDO0lBQzVCLE1BQU0sRUFBRUMsTUFBTUMsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxJQUFBQSwwQkFBWSxFQUFDTDtJQUM3RCxNQUFNLEVBQUVNLEdBQUcsRUFBRUMsUUFBUSxFQUFFLEdBQUdDLElBQUFBLDRCQUFrQjtJQUU1Q0MsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUlOLGFBQWEsQ0FBQ0QsV0FBVztRQUM3QkssU0FDRUwsVUFBVVEsS0FBSyxDQUFDQyxHQUFHLENBQUNDLENBQUFBLE1BQVEsQ0FBQTtnQkFBRUE7Z0JBQUtDLFdBQVdELElBQUlFLE1BQU0sS0FBSyxJQUFJLFdBQVc7WUFBVyxDQUFBO0lBRTNGLEdBQUc7UUFBQ1A7UUFBVUo7UUFBV0Q7S0FBVTtJQUVuQyxNQUFNYSxXQUFXQyxJQUFBQSxjQUFPLEVBQUM7UUFDdkIsSUFBSSxFQUFDZCxzQkFBQUEsZ0NBQUFBLFVBQVdRLEtBQUssQ0FBQ0ksTUFBTSxHQUFFLE9BQU8sRUFBRTtRQUN2QyxPQUFPWixVQUFVUSxLQUFLLENBQUNDLEdBQUcsQ0FBQ0MsQ0FBQUE7Z0JBQU9OO29CQUFBQSxXQUFBQSxHQUFHLENBQUNNLElBQUksY0FBUk4sK0JBQUFBLFNBQVVMLElBQUk7V0FBRWdCLE1BQU0sQ0FBQ0MsZ0JBQVM7SUFDcEUsR0FBRztRQUFDWjtRQUFLSjtLQUFVO0lBRW5CLE9BQU87UUFDTEU7UUFDQWUsb0JBQW9CaEI7UUFDcEJpQixtQkFDRSxDQUFDLENBQUNwQixNQUNERyxDQUFBQSxhQUNDa0IsT0FBT0MsTUFBTSxDQUFDaEIsS0FDWFcsTUFBTSxDQUFDTSxDQUFBQSxPQUFRckIsc0JBQUFBLGdDQUFBQSxVQUFXUSxLQUFLLENBQUNjLFFBQVEsQ0FBQ0QsS0FBS3RCLElBQUksQ0FBQ1csR0FBRyxHQUN0RGEsSUFBSSxDQUFDekIsQ0FBQUEsS0FBTUEsR0FBR0csU0FBUyxLQUMxQlksU0FBU0QsTUFBTSxNQUFLWixzQkFBQUEsZ0NBQUFBLFVBQVdRLEtBQUssQ0FBQ0ksTUFBTSxDQUFEO1FBQzlDWjtRQUNBYTtJQUNGO0FBQ0YifQ==