eab8137c6634fe77f9d5c01ca981f5f4
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    api: function() {
        return api;
    },
    createApiClient: function() {
        return createApiClient;
    },
    schemas: function() {
        return schemas;
    }
});
const _zod = require("zod");
const _core = require("@zodios/core");
const st_agents_BaseFilter_str_ = _zod.z.object({
    all_of: _zod.z.array(_zod.z.string()),
    any_of: _zod.z.array(_zod.z.string())
}).partial().passthrough();
const st_agents_DateRange = _zod.z.object({
    start: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    end: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_agents_SentimentPolarity = _zod.z.enum([
    "positive",
    "negative",
    "neutral"
]);
const st_agents_DocumentIdFilter = _zod.z.object({
    type: _zod.z.string(),
    document_ids: _zod.z.array(_zod.z.string()).min(1)
}).passthrough();
const st_agents_TranscriptSubtype = _zod.z.enum([
    "Analyst, Investor and Shareholder meeting",
    "Earnings Call",
    "General Conference Call",
    "General Presentation",
    "Guidance Call",
    "Investor Conference Call",
    "Sales and Revenue Call",
    "Shareholders Meeting",
    "Special Situation, M&A and Other"
]);
const st_agents_DocumentTranscriptFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_agents_TranscriptSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_FilingSubtype = _zod.z.enum([
    "RNS-OTHER",
    "RNS-SEC-10-K",
    "RNS-SEC-10-Q",
    "RNS-SEC-20-F",
    "RNS-SEC-6-K",
    "RNS-SEC-8-K",
    "RNS-SEC-S-1",
    "RNS-SEC-S-3"
]);
const st_agents_DocumentFilingFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_agents_FilingSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_DocumentNewsFilter = _zod.z.object({
    type: _zod.z.string()
}).passthrough();
const st_agents_DocumentTranscriptPresentationFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_agents_TranscriptSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_ProviderFilter = _zod.z.object({
    type: _zod.z.string(),
    provider_ids: _zod.z.array(_zod.z.string()).min(1),
    document_types: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_agents_DocumentTranscriptFilter,
            st_agents_DocumentFilingFilter,
            st_agents_DocumentNewsFilter,
            st_agents_DocumentTranscriptPresentationFilter
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_SourceFilter = _zod.z.object({
    type: _zod.z.string(),
    sources_ids: _zod.z.array(_zod.z.string()).min(1),
    document_types: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_agents_DocumentTranscriptFilter,
            st_agents_DocumentFilingFilter,
            st_agents_DocumentNewsFilter,
            st_agents_DocumentTranscriptPresentationFilter
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_DocumentUserFileFilter = _zod.z.object({
    type: _zod.z.string(),
    tags: _zod.z.array(_zod.z.string()).optional()
}).passthrough();
const st_agents_DocTypeFilter = _zod.z.object({
    type: _zod.z.string(),
    document_types: _zod.z.array(_zod.z.union([
        st_agents_DocumentTranscriptFilter,
        st_agents_DocumentFilingFilter,
        st_agents_DocumentNewsFilter,
        st_agents_DocumentTranscriptPresentationFilter,
        st_agents_DocumentUserFileFilter
    ])).min(1)
}).passthrough();
const st_agents_ContentFilter = _zod.z.object({
    any_of: _zod.z.array(_zod.z.union([
        st_agents_DocumentIdFilter,
        st_agents_ProviderFilter,
        st_agents_SourceFilter,
        st_agents_DocTypeFilter
    ])).min(1)
}).partial().passthrough();
const st_agents_QueryFilters = _zod.z.object({
    entities: _zod.z.union([
        st_agents_BaseFilter_str_,
        _zod.z.null()
    ]),
    events: _zod.z.union([
        st_agents_BaseFilter_str_,
        _zod.z.null()
    ]),
    period: _zod.z.union([
        st_agents_DateRange,
        _zod.z.null()
    ]),
    sentiments: _zod.z.array(st_agents_SentimentPolarity),
    content: _zod.z.union([
        st_agents_ContentFilter,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_agents_SearchToolConfig = _zod.z.object({
    query_filters: _zod.z.union([
        st_agents_QueryFilters,
        _zod.z.null()
    ])
}).partial();
const st_agents_FetchUrlToolConfig = _zod.z.object({
    max_chunks_per_document: _zod.z.number().int().default(100),
    max_queries: _zod.z.number().int().default(5)
}).partial();
const st_agents_CompanyTearsheetToolConfig = _zod.z.object({}).partial();
const st_agents_ReflectToolConfig = _zod.z.object({}).partial();
const st_agents_AgentExecuteRequest = _zod.z.object({
    action: _zod.z.string().optional().default("AgentExecuteRequest"),
    chatId: _zod.z.string(),
    inputMessage: _zod.z.string(),
    requestId: _zod.z.string(),
    requestType: _zod.z.enum([
        "research",
        "chat"
    ]).optional().default("chat"),
    toolsConfigs: _zod.z.record(_zod.z.union([
        st_agents_SearchToolConfig,
        st_agents_FetchUrlToolConfig,
        st_agents_CompanyTearsheetToolConfig,
        st_agents_ReflectToolConfig
    ])).optional(),
    onlySearchAudit: _zod.z.boolean().optional().default(true)
}).passthrough();
const st_agents_ActionWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("ACTION"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    toolName: _zod.z.string().optional(),
    toolArguments: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.string()
    ]).optional(),
    actionAuditsId: _zod.z.string().optional()
}).passthrough();
const st_agents_ThinkingWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("THINKING"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    text: _zod.z.string(),
    thinkingId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_AnswerWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("ANSWER"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    text: _zod.z.string(),
    answerId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_ErrorWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("ERROR"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    error: _zod.z.string()
}).passthrough();
const st_agents_TraceQuery = _zod.z.object({
    text: _zod.z.string(),
    filters: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_ChunkSentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_agents_BoundingBox = _zod.z.object({
    bottom: _zod.z.number(),
    left: _zod.z.number(),
    page: _zod.z.number().int(),
    right: _zod.z.number(),
    top: _zod.z.number()
}).passthrough();
const st_agents_TraceResultChunk = _zod.z.object({
    id: _zod.z.string(),
    cnum: _zod.z.number().int(),
    text: _zod.z.string(),
    sentences: _zod.z.array(st_agents_ChunkSentence),
    relevance: _zod.z.number(),
    boundingBoxes: _zod.z.union([
        _zod.z.array(st_agents_BoundingBox),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_TraceResultCQSStory = _zod.z.object({
    documentScope: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    language: _zod.z.string(),
    chunks: _zod.z.union([
        _zod.z.array(st_agents_TraceResultChunk),
        _zod.z.null()
    ]).optional(),
    srcKey: _zod.z.string(),
    srcName: _zod.z.string(),
    sourceRank: _zod.z.number().int().optional().default(10),
    ts: _zod.z.string(),
    contentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    documentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_AuditTraceCQSResult = _zod.z.object({
    type: _zod.z.string().optional().default("CQS"),
    values: _zod.z.array(st_agents_TraceResultCQSStory)
}).passthrough();
const st_agents_ExternalSourceAction = _zod.z.object({
    type: _zod.z.string().optional().default("EXTERNAL"),
    name: _zod.z.string(),
    hd: _zod.z.string(),
    url: _zod.z.string().min(1).max(2083).url(),
    faviconUrl: _zod.z.string().min(1).max(2083).url()
}).passthrough();
const st_agents_ExternalTraceResult = _zod.z.object({
    hd: _zod.z.string(),
    text: _zod.z.string(),
    action: st_agents_ExternalSourceAction,
    ts: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata: _zod.z.union([
        _zod.z.record(_zod.z.union([
            _zod.z.string(),
            _zod.z.array(_zod.z.string())
        ])),
        _zod.z.null()
    ]).optional(),
    id: _zod.z.string()
}).passthrough();
const st_agents_AuditTraceExternalResult = _zod.z.object({
    type: _zod.z.string().optional().default("EXTERNAL"),
    values: _zod.z.array(st_agents_ExternalTraceResult)
}).passthrough();
const st_agents_AuditTraceEngineAIResult = _zod.z.object({
    type: _zod.z.string().default("ENGINE"),
    sqlQuery: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_agents_SearchAuditV1 = _zod.z.object({
    auditType: _zod.z.string().optional().default("SearchAuditV1"),
    toolId: _zod.z.string().optional().default("search_tool"),
    query: st_agents_TraceQuery,
    queryId: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    results: _zod.z.array(_zod.z.union([
        st_agents_AuditTraceCQSResult,
        st_agents_AuditTraceExternalResult,
        st_agents_AuditTraceEngineAIResult
    ]))
}).passthrough();
const st_agents_MarkdownAuditV1 = _zod.z.object({
    auditType: _zod.z.string().optional().default("MarkdownAuditV1"),
    toolId: _zod.z.string(),
    title: _zod.z.string(),
    content: _zod.z.string()
}).passthrough();
const st_agents_BaseToolAuditTrace = _zod.z.object({
    auditType: _zod.z.string(),
    toolId: _zod.z.string()
}).passthrough();
const st_agents_ToolAuditWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("AUDIT"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    trace: _zod.z.union([
        st_agents_SearchAuditV1,
        st_agents_MarkdownAuditV1,
        st_agents_BaseToolAuditTrace
    ]),
    actionAuditsId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_CompleteWSResponse = _zod.z.object({
    type: _zod.z.string().optional().default("COMPLETE"),
    requestId: _zod.z.string(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_agents_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_api_keys_GetApiKey = _zod.z.object({
    id: _zod.z.string(),
    stub: _zod.z.string(),
    user_id: _zod.z.string(),
    organization_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    description: _zod.z.string(),
    enabled: _zod.z.boolean().optional().default(true),
    date_created: _zod.z.string(),
    last_updated: _zod.z.string(),
    created_by: _zod.z.string(),
    modified_by: _zod.z.string(),
    last_used: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_api_keys_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_api_keys_CreateApiKey = _zod.z.object({
    description: _zod.z.string().min(5).max(1000)
}).passthrough();
const st_api_keys_CreatedApiKey = _zod.z.object({
    id: _zod.z.string(),
    stub: _zod.z.string(),
    user_id: _zod.z.string(),
    organization_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    description: _zod.z.string(),
    enabled: _zod.z.boolean().optional().default(true),
    date_created: _zod.z.string(),
    last_updated: _zod.z.string(),
    created_by: _zod.z.string(),
    modified_by: _zod.z.string(),
    last_used: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    key_value: _zod.z.string()
}).passthrough();
const st_api_keys_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_api_keys_KeyEnabled = _zod.z.object({
    enabled: _zod.z.boolean().default(true)
}).partial().passthrough();
const st_api_keys_KeyDisabled = _zod.z.object({
    enabled: _zod.z.boolean().default(false)
}).partial().passthrough();
const st_api_keys_KeyDeleted = _zod.z.object({
    id: _zod.z.string()
}).passthrough();
const query = _zod.z.union([
    _zod.z.string(),
    _zod.z.null()
]).optional();
const limit = _zod.z.union([
    _zod.z.number(),
    _zod.z.null()
]).optional().default(10);
const st_autosuggest_vespa_AutosuggestResult = _zod.z.object({
    key: _zod.z.string(),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entityType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    queryType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    typeDesc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata6: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata7: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata8: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata9: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata10: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    ticker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    altName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    parent1: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    entitled: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_autosuggest_vespa_AutosuggestFacet = _zod.z.object({
    value: _zod.z.string(),
    count: _zod.z.number().int()
}).passthrough();
const st_autosuggest_vespa_AutosuggestFacets = _zod.z.object({
    category: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    group1: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    group2: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    group3: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    group4: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    group5: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_AutosuggestResponse = _zod.z.object({
    count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    results: _zod.z.union([
        _zod.z.array(st_autosuggest_vespa_AutosuggestResult),
        _zod.z.array(st_autosuggest_vespa_AutosuggestFacet),
        _zod.z.null()
    ]),
    facets: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacets,
        _zod.z.null()
    ]),
    explorationValues: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacets,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_autosuggest_vespa_UnauthorizedResponse = _zod.z.object({
    message: _zod.z.string().default("User authentication failed")
}).partial().passthrough();
const st_autosuggest_vespa_InternalServerResponse = _zod.z.object({
    statusCode: _zod.z.number().int().default(500),
    message: _zod.z.string().default("Internal Server Error.")
}).partial().passthrough();
const st_autosuggest_vespa_AutosuggestFacetQuery = _zod.z.object({
    field: _zod.z.string(),
    value: _zod.z.string()
}).passthrough();
const st_autosuggest_vespa_GroupingDetails = _zod.z.object({
    facetSearchQuery: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    category: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    group1: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    group2: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    group3: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    group4: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    group5: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_WatchlistAutosuggestRequest = _zod.z.object({
    query: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    perPage: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group1: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group2: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group3: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group4: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group5: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    facetQuery: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacetQuery,
        _zod.z.null()
    ]),
    groupingDetails: _zod.z.union([
        st_autosuggest_vespa_GroupingDetails,
        _zod.z.null()
    ]),
    groupingExploration: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacets: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacetsSearch: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchList: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    searchById: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchByTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    watchlistRequest: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    queryRewriting: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(true),
    totalPublicWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(4),
    prefixLength: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(3),
    maxEditDistance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_AutosuggestRequest = _zod.z.object({
    query: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    perPage: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group1: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group2: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group3: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group4: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group5: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    facetQuery: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacetQuery,
        _zod.z.null()
    ]),
    groupingDetails: _zod.z.union([
        st_autosuggest_vespa_GroupingDetails,
        _zod.z.null()
    ]),
    groupingExploration: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacets: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacetsSearch: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchList: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    searchById: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchByTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    watchlistRequest: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    queryRewriting: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(true),
    totalPublicWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(4),
    prefixLength: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(3),
    maxEditDistance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_AutosuggestBatchUploadRequest = _zod.z.object({
    file: _zod.z.string()
}).passthrough();
const st_autosuggest_vespa_CompanyInfo = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    ticker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    isin: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    cusip: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    sedol: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    listing: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_AutosuggestEntitiesMapped = _zod.z.object({
    companyInfo: st_autosuggest_vespa_CompanyInfo,
    data: _zod.z.union([
        st_autosuggest_vespa_AutosuggestResult,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input = _zod.z.object({
    entities: _zod.z.array(st_autosuggest_vespa_AutosuggestEntitiesMapped),
    timeTaken: _zod.z.number().int()
}).passthrough();
const st_autosuggest_vespa_ErrorClientResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    errorCode: _zod.z.string(),
    message: _zod.z.string(),
    requestId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).passthrough();
const st_autosuggest_vespa_RetrievalDetails = _zod.z.object({
    query: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    ticker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    perPage: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group1: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group2: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group3: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group4: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    group5: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    facetQuery: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacetQuery,
        _zod.z.null()
    ]),
    groupingDetails: _zod.z.union([
        st_autosuggest_vespa_GroupingDetails,
        _zod.z.null()
    ]),
    groupingExploration: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacets: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    groupingFacetsSearch: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchList: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    searchById: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchByTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    searchByNameTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    watchlistRequest: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    queryRewriting: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).default(false),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    retrievalStrategy: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    userContentOwner: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    prefixLength: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(3),
    maxEditDistance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    timeout: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).default("4s"),
    restrict: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).default("analytic"),
    searchChain: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).default("default"),
    groupingDefaultmaxgroups: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(50),
    groupingDefaultmaxhits: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10),
    groupingGlobalmaxgroups: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10000)
}).partial().passthrough();
const st_autosuggest_vespa_RankingDetails = _zod.z.object({
    "ranking.profile": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).default("autosuggest_ranker"),
    "input.query(total_name_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.5),
    "input.query(total_aliases_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.5),
    "input.query(total_popularity_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    "input.query(total_ticker_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(10),
    "input.query(total_source_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    "input.query(match_based_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    "input.query(nativerank_based_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    "input.query(occ_based_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    "input.query(pop_multiplication_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(500),
    "input.query(pop_power_transform_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.5),
    "input.query(pop_base)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1),
    rankingMatchphaseMaxhits: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(500),
    "input.query(total_public_weight)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(4),
    "input.query(popularity_threshold_level)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(1.1),
    "input.query(ticker_reduction_level)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(3.7),
    "input.query(source_score0)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.0075),
    "input.query(source_score1)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.005),
    "input.query(source_score2)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.0025),
    "input.query(source_score3)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0.001),
    "input.query(source_score4)": _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).default(0)
}).partial().passthrough();
const st_autosuggest_vespa_VespaRequestDetails = _zod.z.object({
    retrievalDetails: _zod.z.union([
        st_autosuggest_vespa_RetrievalDetails,
        _zod.z.null()
    ]),
    rankingDetails: _zod.z.union([
        st_autosuggest_vespa_RankingDetails,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_autosuggest_vespa_ContentOwner = _zod.z.object({
    userId: _zod.z.string(),
    contentAccessPolicies: _zod.z.array(_zod.z.string()).optional().default([])
}).passthrough();
const st_autosuggest_vespa_PrivateWatchlistAutosuggestRequest = _zod.z.object({
    query: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    perPage: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(10),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(1),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group1: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group2: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group3: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group4: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group5: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    facetQuery: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacetQuery,
        _zod.z.null()
    ]).optional(),
    groupingDetails: _zod.z.union([
        st_autosuggest_vespa_GroupingDetails,
        _zod.z.null()
    ]).optional(),
    groupingExploration: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    groupingFacets: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    groupingFacetsSearch: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    searchList: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    searchById: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    searchByTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    watchlistRequest: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    queryRewriting: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(true),
    totalPublicWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(4),
    prefixLength: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(3),
    maxEditDistance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(1),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    contentOwner: st_autosuggest_vespa_ContentOwner
}).passthrough();
const st_autosuggest_vespa_PrivateAutosuggestRequest = _zod.z.object({
    query: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    perPage: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(10),
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(1),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group1: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group2: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group3: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group4: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    group5: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    facetQuery: _zod.z.union([
        st_autosuggest_vespa_AutosuggestFacetQuery,
        _zod.z.null()
    ]).optional(),
    groupingDetails: _zod.z.union([
        st_autosuggest_vespa_GroupingDetails,
        _zod.z.null()
    ]).optional(),
    groupingExploration: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    groupingFacets: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    groupingFacetsSearch: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    searchList: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    searchById: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    searchByTicker: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    watchlistRequest: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(false),
    queryRewriting: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional().default(true),
    totalPublicWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(4),
    prefixLength: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(3),
    maxEditDistance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional().default(1),
    rpPackageId: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    contentOwner: st_autosuggest_vespa_ContentOwner
}).passthrough();
const st_autosuggest_vespa_PrivateAutosuggestBatchUploadRequest = _zod.z.object({
    file: _zod.z.string(),
    contentOwner: st_autosuggest_vespa_ContentOwner
}).passthrough();
const packageIds = _zod.z.union([
    _zod.z.array(_zod.z.string()),
    _zod.z.null()
]).optional();
const sourceIds = _zod.z.union([
    _zod.z.array(_zod.z.string().regex(/^[A-Z0-9]{6}$/)),
    _zod.z.null()
]).optional();
const entitled = _zod.z.union([
    _zod.z.boolean(),
    _zod.z.null()
]).optional();
const st_bff_content_catalog_PaginationMetadata = _zod.z.object({
    page: _zod.z.number().int(),
    limit: _zod.z.number().int(),
    total: _zod.z.number().int(),
    queryTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_bff_content_catalog_SourceModel = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    packageIds: _zod.z.array(_zod.z.string()),
    entitled: _zod.z.boolean(),
    categoryIds: _zod.z.array(_zod.z.string())
}).passthrough();
const st_bff_content_catalog_GenericPaginatedResponse_SourceModel_ = _zod.z.object({
    meta: st_bff_content_catalog_PaginationMetadata,
    results: _zod.z.array(st_bff_content_catalog_SourceModel)
}).passthrough();
const st_bff_content_catalog_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_bff_content_catalog_ContentPackageModel = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    shortDescription: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    detailedDescription: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    appEnabled: _zod.z.boolean().optional().default(false),
    apiEnabled: _zod.z.boolean().optional().default(false),
    catalogEnabled: _zod.z.boolean().optional().default(false),
    logo: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entitled: _zod.z.boolean(),
    sourceCount: _zod.z.number().int()
}).passthrough();
const st_bff_content_catalog_GenericPaginatedResponse_ContentPackageModel_ = _zod.z.object({
    meta: st_bff_content_catalog_PaginationMetadata,
    results: _zod.z.array(st_bff_content_catalog_ContentPackageModel)
}).passthrough();
const st_bff_data_tools_BFFRequest = _zod.z.object({
    entityIds: _zod.z.array(_zod.z.string())
}).passthrough();
const st_bff_data_tools_QuoteToolData = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    price: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    changePercentage: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    change: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    volume: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dayLow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dayHigh: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    yearHigh: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    yearLow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    marketCap: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceAvg50: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceAvg200: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    exchange: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    open: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    previousClose: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    timestamp: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    currency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_QuoteDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_QuoteToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_UpstreamTooManyRequests = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(429),
    errorCode: _zod.z.string().optional().default("UPSTREAM-RATE_LIMIT"),
    message: _zod.z.string().optional().default("Too many requests sent to an upstream dependency. Please try again later."),
    requestId: _zod.z.string()
}).passthrough();
const st_bff_data_tools_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_bff_data_tools_UpstreamFailedError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(502),
    errorCode: _zod.z.string().optional().default("UPSTREAM-FAILED"),
    message: _zod.z.string().optional().default("Service unavailable due to an upstream dependency."),
    requestId: _zod.z.string()
}).passthrough();
const st_bff_data_tools_DBConnectionError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(503),
    errorCode: _zod.z.string().optional().default("DB-ERROR"),
    message: _zod.z.string().optional().default("Service temporarily unavailable. Please try again later."),
    requestId: _zod.z.string()
}).passthrough();
const st_bff_data_tools_UpstreamTimeoutError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(504),
    errorCode: _zod.z.string().optional().default("UPSTREAM-TIMEOUT"),
    message: _zod.z.string().optional().default("Request to upstream service timed out. Please try again later."),
    requestId: _zod.z.string()
}).passthrough();
const st_bff_data_tools_ChangeToolData = _zod.z.object({
    "1D": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "5D": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "1M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "3M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "6M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    ytd: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "1Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "3Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "5Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "10Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    max: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).passthrough();
const st_bff_data_tools_ChangeDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_ChangeToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_EarningsSurpriseData = _zod.z.object({
    reportingDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    epsActual: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    epsEstimated: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    revenueActual: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    revenueEstimated: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    lastUpdated: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    epsSurprisePct: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    revenueSurprisePct: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_EarningsSurpriseDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_EarningsSurpriseData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_RecommendationConsensus = _zod.z.enum([
    "Strong Buy",
    "Buy",
    "Hold",
    "Sell",
    "Strong Sell"
]);
const st_bff_data_tools_AnalystToolData = _zod.z.object({
    strongBuy: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    buy: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    hold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    sell: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    strongSell: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    consensus: _zod.z.union([
        st_bff_data_tools_RecommendationConsensus,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_AnalystDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_AnalystToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_PriceTargetToolData = _zod.z.object({
    targetHigh: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    targetLow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    targetConsensus: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    targetMedian: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_PriceTargetDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_PriceTargetToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_SentimentBFFToolData = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    dailySentiment: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sentimentPressure: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    abnormalMediaAttention: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    date: _zod.z.string()
}).passthrough();
const st_bff_data_tools_SentimentBFFResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_SentimentBFFToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_IncomeStatementBFFToolData = _zod.z.object({
    reportedCurrency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    cik: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    filingDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    acceptedDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    fiscalYear: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    period: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    revenue: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    costOfRevenue: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    grossProfit: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    researchAndDevelopmentExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    generalAndAdministrativeExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sellingAndMarketingExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sellingGeneralAndAdministrativeExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    operatingExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    costAndExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netInterestIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    interestIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    interestExpense: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    depreciationAndAmortization: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    ebitda: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    ebit: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    nonOperatingIncomeExcludingInterest: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    operatingIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalOtherIncomeExpensesNet: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    incomeBeforeTax: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    incomeTaxExpense: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netIncomeFromContinuingOperations: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netIncomeFromDiscontinuedOperations: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherAdjustmentsToNetIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netIncomeDeductions: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    bottomLineNetIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    eps: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    epsDiluted: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    weightedAverageShsOut: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    weightedAverageShsOutDil: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    date: _zod.z.string()
}).passthrough();
const st_bff_data_tools_IncomeStatementBFFResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_IncomeStatementBFFToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_CashFlowStatementBFFToolData = _zod.z.object({
    reportedCurrency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    cik: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    filingDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    acceptedDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    fiscalYear: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    period: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    netIncome: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    depreciationAndAmortization: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    deferredIncomeTax: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    stockBasedCompensation: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    changeInWorkingCapital: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accountsReceivables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    inventory: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accountsPayables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherWorkingCapital: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherNonCashItems: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netCashProvidedByOperatingActivities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    investmentsInPropertyPlantAndEquipment: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    acquisitionsNet: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    purchasesOfInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    salesMaturitiesOfInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherInvestingActivities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netCashProvidedByInvestingActivities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netDebtIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    longTermNetDebtIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    shortTermNetDebtIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netStockIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netCommonStockIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    commonStockIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    commonStockRepurchased: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netPreferredStockIssuance: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netDividendsPaid: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    commonDividendsPaid: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    preferredDividendsPaid: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherFinancingActivities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netCashProvidedByFinancingActivities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    effectOfForexChangesOnCash: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netChangeInCash: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    cashAtEndOfPeriod: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    cashAtBeginningOfPeriod: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    operatingCashFlow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    capitalExpenditure: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    freeCashFlow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    incomeTaxesPaid: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    interestPaid: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    date: _zod.z.string()
}).passthrough();
const st_bff_data_tools_CashFlowStatementBFFResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_CashFlowStatementBFFToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_BalanceStatementBFFToolData = _zod.z.object({
    reportedCurrency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    cik: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    filingDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    acceptedDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    fiscalYear: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    period: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    cashAndCashEquivalents: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    shortTermInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    cashAndShortTermInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netReceivables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accountsReceivables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherReceivables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    inventory: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    prepaids: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherCurrentAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalCurrentAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    propertyPlantEquipmentNet: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    goodwill: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    intangibleAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    goodwillAndIntangibleAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    longTermInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    taxAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherNonCurrentAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalNonCurrentAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalAssets: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalPayables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accountPayables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherPayables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accruedExpenses: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    shortTermDebt: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    capitalLeaseObligationsCurrent: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    taxPayables: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    deferredRevenue: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherCurrentLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalCurrentLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    longTermDebt: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    capitalLeaseObligationsNonCurrent: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    deferredRevenueNonCurrent: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    deferredTaxLiabilitiesNonCurrent: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherNonCurrentLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalNonCurrentLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    capitalLeaseObligations: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalLiabilities: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    treasuryStock: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    preferredStock: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    commonStock: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    retainedEarnings: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    additionalPaidInCapital: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    accumulatedOtherComprehensiveIncomeLoss: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    otherTotalStockholdersEquity: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalStockholdersEquity: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalEquity: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    minorityInterest: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalLiabilitiesAndTotalEquity: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalInvestments: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    totalDebt: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    netDebt: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    date: _zod.z.string()
}).passthrough();
const st_bff_data_tools_BalanceStatementBFFResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_BalanceStatementBFFToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_KeyMetricsToolData = _zod.z.object({
    marketCap: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    enterpriseValueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    evToSalesTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    evToOperatingCashFlowTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    evToFreeCashFlowTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    evToEbitdaTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    netDebtToEbitdaTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    currentRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    incomeQualityTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    grahamNumberTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    grahamNetNetTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    taxBurdenTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    interestBurdenTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    workingCapitalTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    investedCapitalTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    returnOnAssetsTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingReturnOnAssetsTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    returnOnTangibleAssetsTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    returnOnEquityTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    returnOnInvestedCapitalTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    returnOnCapitalEmployedTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    earningsYieldTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    freeCashFlowYieldTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    capexToOperatingCashFlowTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    capexToDepreciationTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    capexToRevenueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    salesGeneralAndAdminToRevenueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    researchAndDevelopmentToRevenueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    stockBasedCompensationToRevenueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    intangiblesToTotalAssetsTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    averageReceivablesTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    averagePayablesTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    averageInventoryTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    daysOfSalesOutstandingTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    daysOfPayablesOutstandingTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    daysOfInventoryOutstandingTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingCycleTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    cashConversionCycleTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    freeCashFlowToEquityTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    freeCashFlowToFirmTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    tangibleAssetValueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    netCurrentAssetValueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_KeyMetricsDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_KeyMetricsToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_RatiosToolData = _zod.z.object({
    grossProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    ebitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    ebitdaMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    pretaxProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    continuousOperationsProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    netProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    bottomLineProfitMarginTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    receivablesTurnoverTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    payablesTurnoverTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    inventoryTurnoverTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    fixedAssetTurnoverTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    assetTurnoverTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    currentRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    quickRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    solvencyRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    cashRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToEarningsRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToEarningsGrowthRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    forwardPriceToEarningsGrowthRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToBookRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToSalesRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToFreeCashFlowRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToOperatingCashFlowRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    debtToAssetsRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    debtToEquityRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    debtToCapitalRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    longTermDebtToCapitalRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    financialLeverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    workingCapitalTurnoverRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingCashFlowRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingCashFlowSalesRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    freeCashFlowOperatingCashFlowRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    debtServiceCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    interestCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    shortTermOperatingCashFlowCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingCashFlowCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    capitalExpenditureCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dividendPaidAndCapexCoverageRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dividendPayoutRatioTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dividendYieldTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    enterpriseValueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    revenuePerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    netIncomePerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    interestDebtPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    cashPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    bookValuePerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    tangibleBookValuePerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    shareholdersEquityPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    operatingCashFlowPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    capexPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    freeCashFlowPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    netIncomePerEbtTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    ebtPerEbitTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceToFairValueTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    debtToMarketCapTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    effectiveTaxRateTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    enterpriseValueMultipleTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dividendPerShareTtm: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_RatiosDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_RatiosToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_CurrencyToolData = _zod.z.object({
    companyName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    tradingCurrency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    reportingCurrency: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_CurrencyDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_CurrencyToolData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_PlusScores = _zod.z.object({
    plusBmiBmrScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusBmiMseScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusBmiPdlmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusBmiPiccScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusBmiScmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEAqScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEEiScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEEmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEGhgeScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEWhmmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusEWwmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusHcEediScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusHcEhsScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusHcLpScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusLgBeScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusLgCbScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusLgCirmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusLgMlreScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusLgSrmScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScAaScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScCpScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScCwScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScDsScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScHrcrScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScPqsScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScSpplScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_PerformanceScores = _zod.z.object({
    esgAverageScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    environmentalScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    governanceScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    plusScores: _zod.z.union([
        st_bff_data_tools_PlusScores,
        _zod.z.null()
    ]),
    socialScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_ESGScoreData = _zod.z.object({
    assetId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    economicSector: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    industry: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    performanceScores: _zod.z.record(st_bff_data_tools_PerformanceScores),
    ticker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_bff_data_tools_ESGScoreDataToolResponse = _zod.z.object({
    result: _zod.z.union([
        _zod.z.record(st_bff_data_tools_ESGScoreData),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_bff_data_tools_CustomDataViewColumn = _zod.z.object({
    endpoint: _zod.z.string(),
    columnKey: _zod.z.string()
}).passthrough();
const st_bff_data_tools_CustomDataViewResponse = _zod.z.object({
    id: _zod.z.string(),
    columns: _zod.z.array(st_bff_data_tools_CustomDataViewColumn),
    createdAt: _zod.z.string().datetime({
        offset: true
    }),
    updatedAt: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_bff_data_tools_CustomDataViewListResponse = _zod.z.object({
    results: _zod.z.array(st_bff_data_tools_CustomDataViewResponse)
}).passthrough();
const st_bff_data_tools_CreateCustomDataViewRequest = _zod.z.object({
    columns: _zod.z.array(st_bff_data_tools_CustomDataViewColumn).min(1).max(50)
}).passthrough();
const st_bff_data_tools_UpdateCustomDataViewRequest = _zod.z.object({
    columns: _zod.z.union([
        _zod.z.array(st_bff_data_tools_CustomDataViewColumn),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_briefs_DeliveryDestination = _zod.z.literal("email");
const st_briefs_WeekDay = _zod.z.enum([
    "mon",
    "tue",
    "wed",
    "thu",
    "fri",
    "sat",
    "sun"
]);
const st_briefs_Schedule = _zod.z.object({
    days: _zod.z.array(st_briefs_WeekDay),
    timezone: _zod.z.string(),
    hour: _zod.z.number().int(),
    minute: _zod.z.number().int()
}).passthrough();
const st_briefs_BriefConfigResponse_Input = _zod.z.object({
    briefName: _zod.z.string(),
    watchlistIds: _zod.z.array(_zod.z.string()),
    deliveryModes: _zod.z.array(st_briefs_DeliveryDestination),
    schedule: st_briefs_Schedule,
    id: _zod.z.string(),
    userId: _zod.z.string(),
    email: _zod.z.string(),
    dateCreated: _zod.z.string(),
    lastUpdated: _zod.z.string(),
    overview: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_briefs_ListBriefConfigsResponse_Input = _zod.z.object({
    results: _zod.z.array(st_briefs_BriefConfigResponse_Input)
}).passthrough();
const st_briefs_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_briefs_BriefConfigPayload = _zod.z.object({
    briefName: _zod.z.string(),
    watchlistIds: _zod.z.array(_zod.z.string()),
    deliveryModes: _zod.z.array(st_briefs_DeliveryDestination),
    schedule: st_briefs_Schedule
}).passthrough();
const st_briefs_BriefReportEntityInfo = _zod.z.object({
    id: _zod.z.string().default(""),
    name: _zod.z.string().default(""),
    description: _zod.z.string().default(""),
    entityType: _zod.z.string().default(""),
    companyType: _zod.z.string().default(""),
    country: _zod.z.string().default(""),
    sector: _zod.z.string().default(""),
    industryGroup: _zod.z.string().default(""),
    industry: _zod.z.string().default(""),
    ticker: _zod.z.string().default("")
}).partial().passthrough();
const st_briefs_SingleEntityReport = _zod.z.object({
    entityId: _zod.z.string(),
    entityInfo: st_briefs_BriefReportEntityInfo,
    cleanFinalReport: _zod.z.string()
}).passthrough();
const st_briefs_ChunkHighlight = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_briefs_SourceReference = _zod.z.object({
    refId: _zod.z.number().int(),
    documentId: _zod.z.string(),
    headline: _zod.z.string(),
    sourceKey: _zod.z.string(),
    sourceName: _zod.z.string(),
    sourceRank: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.string(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    chunkId: _zod.z.number().int(),
    text: _zod.z.string(),
    highlights: _zod.z.array(st_briefs_ChunkHighlight),
    imageUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    ts: _zod.z.string(),
    documentScope: _zod.z.string(),
    language: _zod.z.string(),
    contentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_briefs_ReportSources_Input = _zod.z.record(st_briefs_SourceReference);
const st_briefs_BriefReportResponse_Input = _zod.z.object({
    watchlistId: _zod.z.string(),
    watchlistName: _zod.z.string(),
    reportTitle: _zod.z.string(),
    reportDate: _zod.z.string().datetime({
        offset: true
    }),
    introduction: _zod.z.string(),
    entityReports: _zod.z.array(st_briefs_SingleEntityReport),
    reportId: _zod.z.string(),
    briefId: _zod.z.string(),
    isEmpty: _zod.z.boolean(),
    sources: _zod.z.union([
        st_briefs_ReportSources_Input,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_briefs_LatestBriefReportResponse_Input = _zod.z.object({
    report: _zod.z.union([
        st_briefs_BriefReportResponse_Input,
        _zod.z.null()
    ]),
    nextReportDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_briefs_ListBriefReportsResponse_Input = _zod.z.object({
    results: _zod.z.array(st_briefs_BriefReportResponse_Input)
}).passthrough();
const st_cqs_SimilarityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("all"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("similarity")
}).passthrough();
const st_cqs_ListOperationEnum = _zod.z.enum([
    "in",
    "all"
]);
const st_cqs_KeywordExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("keyword")
}).passthrough();
const st_cqs_EntityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("entity"),
    document: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_LanguageExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("language")
}).passthrough();
const st_cqs_SourceExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("source")
}).passthrough();
const st_cqs_RPTopicExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string().optional().default("rp_topic"),
    value: _zod.z.array(_zod.z.string()),
    operation: st_cqs_ListOperationEnum.optional(),
    document: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_DateOperationEnum = _zod.z.literal("between");
const st_cqs_DateInterval = _zod.z.enum([
    "today",
    "yesterday",
    "this_week",
    "last_week",
    "last_seven_days",
    "last_thirty_days",
    "last_ninety_days",
    "year_to_date",
    "last_twelve_months",
    "last_1_hours",
    "last_3_hours",
    "last_6_hours",
    "last_9_hours",
    "last_12_hours",
    "last_24_hours",
    "last_48_hours"
]);
const st_cqs_DateIntervalExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string().optional().default("date"),
    operation: st_cqs_DateOperationEnum.optional(),
    value: _zod.z.union([
        st_cqs_DateInterval,
        _zod.z.array(_zod.z.string())
    ])
}).passthrough();
const st_cqs_TagsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("tags")
}).passthrough();
const st_cqs_MacroCompaniesExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroOrganizationsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroConceptsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroPeopleExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroPlacesExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroProductsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_MacroTopicsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_cqs_DocumentExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("document")
}).passthrough();
const st_cqs_SectionMetadataExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("section_metadata")
}).passthrough();
const st_cqs_DocumentTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("document_type")
}).passthrough();
const st_cqs_ReportingPeriodExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("reporting_period")
}).passthrough();
const st_cqs_ReportingEntityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_cqs_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("reporting_entities")
}).passthrough();
const st_cqs_SentimentRangeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    value: _zod.z.array(_zod.z.number().gte(-1).lte(1)).min(2).max(2),
    type: _zod.z.string().optional().default("sentiment_range")
}).passthrough();
const st_cqs_RPDocumentSubtypeTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_subtype")
}).passthrough();
const st_cqs_RPDocumentVersionExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_version")
}).passthrough();
const st_cqs_RPDocumentTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_type")
}).passthrough();
const st_cqs_RPProviderExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_provider")
}).passthrough();
const st_cqs_OrExpression = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.array(_zod.z.union([
            st_cqs_SimilarityExpression,
            st_cqs_KeywordExpression,
            st_cqs_NotExpression,
            st_cqs_EntityExpression,
            st_cqs_LanguageExpression,
            st_cqs_AndExpression,
            st_cqs_OrExpression,
            st_cqs_SourceExpression,
            st_cqs_DateIntervalExpression,
            st_cqs_MacroCompaniesExpression,
            st_cqs_MacroOrganizationsExpression,
            st_cqs_MacroConceptsExpression,
            st_cqs_MacroPeopleExpression,
            st_cqs_MacroPlacesExpression,
            st_cqs_MacroProductsExpression,
            st_cqs_MacroTopicsExpression,
            st_cqs_RPTopicExpression,
            st_cqs_DocumentExpression,
            st_cqs_SectionMetadataExpression,
            st_cqs_DocumentTypeExpression,
            st_cqs_ReportingPeriodExpression,
            st_cqs_ReportingEntityExpression,
            st_cqs_SentimentRangeExpression,
            st_cqs_TagsExpression,
            st_cqs_RPDocumentSubtypeTypeExpression,
            st_cqs_RPDocumentVersionExpression,
            st_cqs_RPDocumentTypeExpression,
            st_cqs_RPProviderExpression
        ])),
        type: _zod.z.string().optional().default("or")
    }).passthrough());
const st_cqs_AndExpression = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        type: _zod.z.string().optional().default("and"),
        value: _zod.z.array(_zod.z.union([
            st_cqs_SimilarityExpression,
            st_cqs_KeywordExpression,
            st_cqs_NotExpression,
            st_cqs_EntityExpression,
            st_cqs_LanguageExpression,
            st_cqs_AndExpression,
            st_cqs_OrExpression,
            st_cqs_SourceExpression,
            st_cqs_DateIntervalExpression,
            st_cqs_MacroCompaniesExpression,
            st_cqs_MacroOrganizationsExpression,
            st_cqs_MacroConceptsExpression,
            st_cqs_MacroPeopleExpression,
            st_cqs_MacroPlacesExpression,
            st_cqs_MacroProductsExpression,
            st_cqs_MacroTopicsExpression,
            st_cqs_RPTopicExpression,
            st_cqs_DocumentExpression,
            st_cqs_SectionMetadataExpression,
            st_cqs_DocumentTypeExpression,
            st_cqs_ReportingPeriodExpression,
            st_cqs_ReportingEntityExpression,
            st_cqs_SentimentRangeExpression,
            st_cqs_TagsExpression,
            st_cqs_RPDocumentSubtypeTypeExpression,
            st_cqs_RPDocumentVersionExpression,
            st_cqs_RPDocumentTypeExpression,
            st_cqs_RPProviderExpression
        ]))
    }).passthrough());
const st_cqs_NotExpression = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.union([
            st_cqs_KeywordExpression,
            st_cqs_EntityExpression,
            st_cqs_LanguageExpression,
            st_cqs_SourceExpression,
            st_cqs_RPTopicExpression,
            st_cqs_DateIntervalExpression,
            st_cqs_TagsExpression,
            st_cqs_AndExpression,
            st_cqs_OrExpression
        ]),
        type: _zod.z.string().optional().default("not")
    }).passthrough());
const st_cqs_SentenceLabel = _zod.z.enum([
    "accepted",
    "rejected"
]);
const st_cqs_InputSentence = _zod.z.object({
    text: _zod.z.string(),
    label: st_cqs_SentenceLabel.optional(),
    metadata: _zod.z.object({}).partial().passthrough().optional()
}).passthrough();
const st_cqs_Scope = _zod.z.enum([
    "all",
    "filings",
    "transcripts",
    "news",
    "files",
    "market_intelligence",
    "earnings_calls"
]);
const st_cqs_SortEnum = _zod.z.enum([
    "relevance",
    "date",
    "date_asc"
]);
const st_cqs_Ranking = _zod.z.enum([
    "stable",
    "experimental",
    "similarity"
]);
const st_cqs_CQSSearchCursorPagination = _zod.z.object({
    limit: _zod.z.number().int().gt(0).lt(1001).default(100),
    cursor: _zod.z.number().int().gt(0).default(1)
}).partial().passthrough();
const st_cqs_CQSSearchOffsetPagination = _zod.z.object({
    limit: _zod.z.number().int().gt(0).lt(1001).optional().default(100),
    offset: _zod.z.number().int().gte(0)
}).passthrough();
const st_cqs_CQSClusteringParams = _zod.z.object({
    threshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    clusterWeight: _zod.z.number().default(3),
    debug: _zod.z.boolean().default(false)
}).partial().passthrough();
const st_cqs_SearchChain = _zod.z.enum([
    "deduplication",
    "clustering",
    "grouping",
    "clustering-rerank"
]);
const st_cqs_RPXQuery = _zod.z.object({
    // expression: z.discriminatedUnion("type", [
    //   st_cqs_SimilarityExpression,
    //   st_cqs_KeywordExpression,
    //   st_cqs_NotExpression,
    //   st_cqs_EntityExpression,
    //   st_cqs_LanguageExpression,
    //   st_cqs_AndExpression,
    //   st_cqs_OrExpression,
    //   st_cqs_SourceExpression,
    //   st_cqs_DateIntervalExpression,
    //   st_cqs_MacroCompaniesExpression,
    //   st_cqs_MacroOrganizationsExpression,
    //   st_cqs_MacroConceptsExpression,
    //   st_cqs_MacroPeopleExpression,
    //   st_cqs_MacroPlacesExpression,
    //   st_cqs_MacroProductsExpression,
    //   st_cqs_MacroTopicsExpression,
    //   st_cqs_RPTopicExpression,
    //   st_cqs_DocumentExpression,
    //   st_cqs_SectionMetadataExpression,
    //   st_cqs_DocumentTypeExpression,
    //   st_cqs_ReportingPeriodExpression,
    //   st_cqs_ReportingEntityExpression,
    //   st_cqs_SentimentRangeExpression,
    //   st_cqs_TagsExpression,
    //   st_cqs_RPDocumentSubtypeTypeExpression,
    //   st_cqs_RPDocumentVersionExpression,
    //   st_cqs_RPDocumentTypeExpression,
    //   st_cqs_RPProviderExpression,
    // ]),
    expression: _zod.z.any(),
    sentences: _zod.z.array(st_cqs_InputSentence).optional().default([]),
    scope: st_cqs_Scope.optional(),
    sort: st_cqs_SortEnum.optional(),
    ranking: st_cqs_Ranking.optional(),
    debug: _zod.z.boolean().optional().default(false),
    pagination: _zod.z.union([
        st_cqs_CQSSearchCursorPagination,
        st_cqs_CQSSearchOffsetPagination
    ]).optional().default({
        limit: 10,
        cursor: 1
    }),
    date: _zod.z.union([
        _zod.z.array(_zod.z.unknown()),
        _zod.z.null()
    ]).optional(),
    clusteringParams: _zod.z.union([
        st_cqs_CQSClusteringParams,
        _zod.z.null()
    ]).optional(),
    rerankThreshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    searchChain: _zod.z.union([
        st_cqs_SearchChain,
        _zod.z.null()
    ]).optional().default("deduplication"),
    hybrid: _zod.z.boolean().optional().default(false),
    rerankFreshnessWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_VespaCoverageMetrics = _zod.z.object({
    coverage: _zod.z.number().int(),
    documents: _zod.z.number().int(),
    full: _zod.z.boolean(),
    nodes: _zod.z.number().int(),
    results: _zod.z.number().int(),
    resultsFull: _zod.z.number().int()
}).passthrough();
const st_cqs_VespaTimeMetrics = _zod.z.object({
    querytime: _zod.z.number(),
    summaryfetchtime: _zod.z.number(),
    searchtime: _zod.z.number()
}).passthrough();
const st_cqs_QueryRelationship = _zod.z.enum([
    "direct",
    "indirect",
    "result"
]);
const st_cqs_DiscoveryPanelItem = _zod.z.object({
    key: _zod.z.string(),
    volume: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    group1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata6: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata7: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata8: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata9: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata10: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    parent1: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    parent2: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    parent3: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    flag: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    category: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    publicationType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    country: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    queryRelationship: _zod.z.union([
        st_cqs_QueryRelationship,
        _zod.z.null()
    ]).optional(),
    queryType: _zod.z.string(),
    entityType: _zod.z.string()
}).passthrough();
const st_cqs_DiscoveryPanelGroupResponse = _zod.z.object({
    coverage: _zod.z.union([
        st_cqs_VespaCoverageMetrics,
        _zod.z.null()
    ]),
    timing: st_cqs_VespaTimeMetrics,
    places: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    companies: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    organizations: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    languages: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    people: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    sources: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    products: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    concepts: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    topics: _zod.z.array(st_cqs_DiscoveryPanelItem).optional(),
    yql: _zod.z.object({}).partial().passthrough().optional()
}).passthrough();
const st_cqs_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_cqs_EntityCoordinate = _zod.z.object({
    key: _zod.z.string(),
    start: _zod.z.number().int(),
    end: _zod.z.number().int(),
    queryType: _zod.z.string()
}).passthrough();
const st_cqs_Sentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int(),
    text: _zod.z.string(),
    entities: _zod.z.array(st_cqs_EntityCoordinate),
    deduplicationCount: _zod.z.number().int(),
    label: _zod.z.string(),
    relevance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sentiment: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_ChunkSentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_cqs_BoundingBox = _zod.z.object({
    bottom: _zod.z.number(),
    left: _zod.z.number(),
    page: _zod.z.number().int(),
    right: _zod.z.number(),
    top: _zod.z.number()
}).passthrough();
const st_cqs_Chunk = _zod.z.object({
    cnum: _zod.z.number().int(),
    text: _zod.z.string(),
    entities: _zod.z.array(st_cqs_EntityCoordinate),
    sentences: _zod.z.array(st_cqs_ChunkSentence),
    deduplicationCount: _zod.z.number().int(),
    label: _zod.z.string(),
    relevance: _zod.z.number(),
    sentiment: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sectionMetadata: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    speaker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    boundingBoxes: _zod.z.union([
        _zod.z.array(st_cqs_BoundingBox),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_ClusterSummary = _zod.z.object({
    nUniqueSentences: _zod.z.number().int(),
    nTotalSentences: _zod.z.number().int()
}).passthrough();
const st_cqs_Story = _zod.z.lazy(()=>_zod.z.object({
        doctype: _zod.z.string(),
        documentScope: _zod.z.string(),
        hd: _zod.z.string(),
        id: _zod.z.string(),
        language: _zod.z.string(),
        sent: _zod.z.number(),
        sentences: _zod.z.union([
            _zod.z.array(st_cqs_Sentence),
            _zod.z.null()
        ]).optional(),
        chunks: _zod.z.union([
            _zod.z.array(st_cqs_Chunk),
            _zod.z.null()
        ]).optional(),
        srcKey: _zod.z.string(),
        srcName: _zod.z.string(),
        sourceRank: _zod.z.union([
            _zod.z.number(),
            _zod.z.null()
        ]).optional(),
        ts: _zod.z.string(),
        summaryFeatures: _zod.z.union([
            _zod.z.record(_zod.z.number()),
            _zod.z.null()
        ]).optional(),
        rankFeatures: _zod.z.union([
            _zod.z.record(_zod.z.number()),
            _zod.z.null()
        ]).optional().default({}),
        computedRelevance: _zod.z.union([
            _zod.z.number(),
            _zod.z.null()
        ]).optional(),
        cluster: _zod.z.union([
            _zod.z.array(st_cqs_Story),
            _zod.z.null()
        ]).optional(),
        clusterSummary: _zod.z.union([
            st_cqs_ClusterSummary,
            _zod.z.null()
        ]).optional(),
        clusterDetails: _zod.z.union([
            _zod.z.array(_zod.z.number()),
            _zod.z.null()
        ]).optional(),
        contentType: _zod.z.union([
            _zod.z.string(),
            _zod.z.null()
        ]).optional(),
        reportingEntities: _zod.z.union([
            _zod.z.array(_zod.z.string()),
            _zod.z.null()
        ]).optional(),
        reportingPeriod: _zod.z.union([
            _zod.z.array(_zod.z.string()),
            _zod.z.null()
        ]).optional(),
        documentType: _zod.z.union([
            _zod.z.string(),
            _zod.z.null()
        ]).optional(),
        rpProviderId: _zod.z.union([
            _zod.z.string(),
            _zod.z.null()
        ]).optional(),
        url: _zod.z.union([
            _zod.z.string(),
            _zod.z.null()
        ]).optional()
    }).passthrough());
const st_cqs_ClusterGeneralMetrics = _zod.z.object({
    intraClusterVariance: _zod.z.number(),
    interClusterOverlap: _zod.z.number(),
    silhouetteScore: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_TrainingStatistics = _zod.z.object({
    accuracyGamifiedPerformance: _zod.z.number().default(-1),
    accuracy: _zod.z.number().default(-1),
    auc: _zod.z.number().default(-1),
    precision: _zod.z.number().default(-1),
    accuracyStd: _zod.z.number().default(-1),
    accuracyHistogram: _zod.z.array(_zod.z.unknown()).default([
        0
    ])
}).partial().passthrough();
const st_cqs_SearchResponseDetection = _zod.z.object({
    key: _zod.z.string(),
    relevance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    entityType: _zod.z.string(),
    queryType: _zod.z.string(),
    queryRelationship: _zod.z.union([
        st_cqs_QueryRelationship,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_SearchResponse = _zod.z.object({
    count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    documentCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    nextCursor: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    stories: _zod.z.array(st_cqs_Story),
    yql: _zod.z.object({}).partial().passthrough().optional(),
    clusterMetrics: _zod.z.union([
        st_cqs_ClusterGeneralMetrics,
        _zod.z.null()
    ]).optional(),
    coverage: _zod.z.union([
        st_cqs_VespaCoverageMetrics,
        _zod.z.null()
    ]),
    timing: st_cqs_VespaTimeMetrics,
    training_statistics: _zod.z.union([
        st_cqs_TrainingStatistics,
        _zod.z.null()
    ]).optional(),
    detections: _zod.z.union([
        _zod.z.array(st_cqs_SearchResponseDetection),
        _zod.z.null()
    ]).optional(),
    threshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    imageUrls: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    chunksCount: _zod.z.number().int()
}).passthrough();
const st_cqs_Entity = _zod.z.object({
    name: _zod.z.string(),
    type: _zod.z.string(),
    key: _zod.z.string()
}).passthrough();
const st_cqs_Reporting = _zod.z.object({
    year: _zod.z.number().int(),
    quarter: _zod.z.string(),
    fiscal: _zod.z.boolean()
}).passthrough();
const st_cqs_Period = _zod.z.object({
    start: _zod.z.string().datetime({
        offset: true
    }),
    end: _zod.z.string().datetime({
        offset: true
    }),
    reporting: _zod.z.union([
        st_cqs_Reporting,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_cqs_QueryMetadata = _zod.z.object({
    topics: _zod.z.array(_zod.z.string()).default([]),
    entities: _zod.z.array(st_cqs_Entity).default([]),
    period: _zod.z.union([
        st_cqs_Period,
        _zod.z.null()
    ]),
    persona: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_cqs_Body_annotate_query_cqs_annotate_query_post = _zod.z.object({
    body: st_cqs_RPXQuery,
    metadata: st_cqs_QueryMetadata
}).passthrough();
const timestamp_utc = _zod.z.union([
    _zod.z.number(),
    _zod.z.null()
]).optional();
const st_cqs_Response = _zod.z.object({
    message: _zod.z.string()
}).passthrough();
const st_cqs_RankingResponse = _zod.z.object({
    results: _zod.z.array(st_cqs_Ranking).default([
        "stable",
        "experimental",
        "similarity"
    ])
}).partial().passthrough();
const st_cqs_LanguageResponse = _zod.z.object({
    id: _zod.z.string(),
    flag: _zod.z.string(),
    name: _zod.z.string()
}).passthrough();
const st_cqs_LanguagesListResponse = _zod.z.object({
    results: _zod.z.array(st_cqs_LanguageResponse)
}).passthrough();
const st_cqs_SuggestionTypes = _zod.z.enum([
    "entity",
    "rp_topic",
    "language",
    "source",
    "macro"
]);
const st_cqs_SuggestionItem = _zod.z.object({
    key: _zod.z.string(),
    queryType: st_cqs_SuggestionTypes
}).passthrough();
const st_cqs_DiscoveryPanelItemsByIdsResponse = _zod.z.record(st_cqs_DiscoveryPanelItem);
const st_cqs_IsinValues = _zod.z.union([
    _zod.z.array(_zod.z.string()),
    _zod.z.null()
]);
const st_cqs_CusipValues = _zod.z.union([
    _zod.z.array(_zod.z.string()),
    _zod.z.null()
]);
const st_cqs_SedolValues = _zod.z.union([
    _zod.z.array(_zod.z.string()),
    _zod.z.null()
]);
const st_cqs_ListingValues = _zod.z.union([
    _zod.z.array(_zod.z.string()),
    _zod.z.null()
]);
const st_documents_SimplifiedSource = _zod.z.object({
    rp_source_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.string(),
        _zod.z.null()
    ]),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    rank: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_SimplifiedTimestampsUTC = _zod.z.object({
    published: _zod.z.string(),
    reception: _zod.z.string(),
    analytics: _zod.z.string(),
    revision: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_SimplifiedMetadata = _zod.z.object({
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    original_language: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_SimplifiedDocument = _zod.z.object({
    rp_document_id: _zod.z.string(),
    source: st_documents_SimplifiedSource,
    timestamps_utc: st_documents_SimplifiedTimestampsUTC,
    metadata: st_documents_SimplifiedMetadata
}).passthrough();
const st_documents_ContentStats = _zod.z.object({
    byte_count: _zod.z.number().int().gte(0),
    word_count: _zod.z.number().int().gte(0),
    extraction_byte_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_TextTypeEnum = _zod.z.enum([
    "HEADING",
    "FOOTER",
    "HEADER"
]);
const st_documents_NormalizedCoordinates = _zod.z.object({
    page: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    left: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    top: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    right: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    bottom: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_MarkersScript = _zod.z.object({
    start: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    end: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_Markers = _zod.z.object({
    super_script: st_documents_MarkersScript,
    sub_script: st_documents_MarkersScript
}).passthrough();
const st_documents_FactsetTranscriptText = _zod.z.object({
    type: _zod.z.string(),
    section_name: _zod.z.string(),
    speaker_id: _zod.z.string(),
    speech_type: _zod.z.string()
}).passthrough();
const st_documents_SecAttributesText = _zod.z.object({
    type: _zod.z.string(),
    document_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    file_name: _zod.z.string(),
    sequence: _zod.z.string(),
    number: _zod.z.string()
}).passthrough();
const st_documents_Section = _zod.z.object({
    name: _zod.z.string(),
    start: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    end: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_Sentence = _zod.z.object({
    start: _zod.z.number().int().gte(0),
    end: _zod.z.number().int().gte(0),
    sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    sentiment_confidence: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_TextEvent = _zod.z.object({
    event_similarity_key: _zod.z.string(),
    start: _zod.z.number().int().gte(0),
    end: _zod.z.number().int().gte(0)
}).passthrough();
const st_documents_TextEntity = _zod.z.object({
    rp_entity_id: _zod.z.string().min(6).max(6),
    start: _zod.z.number().int().gte(0),
    end: _zod.z.number().int().gte(0)
}).passthrough();
const st_documents_TextBlock = _zod.z.object({
    type: _zod.z.union([
        st_documents_TextTypeEnum,
        _zod.z.null()
    ]).optional(),
    normalized_coordinates: _zod.z.union([
        _zod.z.array(st_documents_NormalizedCoordinates),
        _zod.z.null()
    ]).optional(),
    text: _zod.z.string(),
    markers: _zod.z.union([
        _zod.z.array(st_documents_Markers),
        _zod.z.null()
    ]).optional(),
    attributes: _zod.z.union([
        st_documents_FactsetTranscriptText,
        st_documents_SecAttributesText,
        _zod.z.null()
    ]).optional(),
    sections: _zod.z.union([
        _zod.z.array(st_documents_Section),
        _zod.z.null()
    ]).optional(),
    sentences: _zod.z.union([
        _zod.z.array(st_documents_Sentence),
        _zod.z.null()
    ]).optional(),
    events: _zod.z.union([
        _zod.z.array(st_documents_TextEvent),
        _zod.z.null()
    ]).optional(),
    entities: _zod.z.union([
        _zod.z.array(st_documents_TextEntity),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_TableCellType = _zod.z.enum([
    "CELL_HEADER",
    "CELL_FOOTER"
]);
const st_documents_ListType = _zod.z.enum([
    "FORM",
    "LIST_ORDERED",
    "LIST_UNORDERED"
]);
const st_documents_ListEntry = _zod.z.lazy(()=>_zod.z.object({
        key: _zod.z.string(),
        content: _zod.z.array(_zod.z.union([
            st_documents_TableBlock,
            st_documents_TextBlock,
            st_documents_ListBlock
        ]))
    }).passthrough());
const st_documents_ListBlock = _zod.z.lazy(()=>_zod.z.object({
        type: st_documents_ListType,
        entries: _zod.z.array(st_documents_ListEntry),
        sections: _zod.z.union([
            _zod.z.array(st_documents_Section),
            _zod.z.null()
        ]).optional()
    }).passthrough());
const st_documents_TableCell = _zod.z.lazy(()=>_zod.z.object({
        type: _zod.z.union([
            st_documents_TableCellType,
            _zod.z.null()
        ]),
        rowspan: _zod.z.union([
            _zod.z.number(),
            _zod.z.null()
        ]),
        colspan: _zod.z.union([
            _zod.z.number(),
            _zod.z.null()
        ]),
        content: _zod.z.union([
            _zod.z.array(_zod.z.union([
                st_documents_TableBlock,
                st_documents_TextBlock,
                st_documents_ListBlock
            ])),
            _zod.z.null()
        ])
    }).partial().passthrough());
const st_documents_TableRow = _zod.z.lazy(()=>_zod.z.object({
        cells: _zod.z.array(st_documents_TableCell)
    }).passthrough());
const st_documents_TableBlock = _zod.z.lazy(()=>_zod.z.object({
        type: _zod.z.string(),
        rows: _zod.z.array(st_documents_TableRow),
        sections: _zod.z.union([
            _zod.z.array(st_documents_Section),
            _zod.z.null()
        ]).optional()
    }).passthrough());
const st_documents_Content = _zod.z.object({
    stats: st_documents_ContentStats,
    title: st_documents_TextBlock,
    body: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_documents_TextBlock,
            st_documents_TableBlock,
            st_documents_ListBlock
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_RecommendationEnum = _zod.z.union([
    _zod.z.literal(-1),
    _zod.z.literal(0),
    _zod.z.literal(1)
]);
const st_documents_AnalyticDocument = _zod.z.object({
    analytics_version: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    analytics_revision_number: _zod.z.number().int(),
    document_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    title_similarity_key: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    title_similarity_days: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_similarity_key: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_similarity_days: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_sentiment_confidence: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    composite_sentiment_score: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    sentiment_impact_projection: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    stock_tone_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    earnings_tone_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    commentary_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    mergers_acquisitions_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    corporate_actions_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    earnings_release_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    product_key: _zod.z.string(),
    realtime: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_record_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_RoleEvent = _zod.z.object({
    rp_entity_id: _zod.z.string().min(6).max(6),
    role: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.string(),
    unit: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    fact_level: _zod.z.string(),
    rp_position_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    position_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_segment_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    segment_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_territory_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    territory_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_related_entity_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    related_entity_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_parent_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    parent_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_prior_parent_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    prior_parent_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    relationship: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_sentiment: _zod.z.string(),
    event_risk: _zod.z.string(),
    sustainability_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    credit_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    interest_rate_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_detection_distance: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    rp_event_detected_entity_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_detected_entity_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_text: _zod.z.string(),
    document_record_index: _zod.z.number().int(),
    match_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_AnalyticEvent = _zod.z.object({
    event_similarity_key: _zod.z.string(),
    topic: _zod.z.string(),
    group: _zod.z.string(),
    type: _zod.z.string(),
    sub_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    evaluation_method: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    maturity: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    reporting_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_start_date_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_end_date_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    reporting_period: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    reporting_start_date_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    reporting_end_date_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    event_relevance: _zod.z.number().int().gte(0).lte(100),
    event_similarity_days: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    roles: _zod.z.array(st_documents_RoleEvent)
}).passthrough();
const st_documents_AnalyticEntity = _zod.z.object({
    rp_entity_id: _zod.z.string().min(6).max(6),
    entity_type: _zod.z.string(),
    entity_name: _zod.z.string(),
    country_code: _zod.z.string(),
    entity_hierarchy_level: _zod.z.number().int(),
    entity_detection_type: _zod.z.string(),
    entity_detection_distance: _zod.z.number().int(),
    entity_relevance: _zod.z.number().int().gte(0).lte(100),
    entity_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entity_sentiment_confidence: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entity_text_sentiment: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entity_text_sent_confidence: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    analyst_ratings_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    multi_stock_sentiment: _zod.z.union([
        st_documents_RecommendationEnum,
        _zod.z.null()
    ]).optional(),
    document_record_index: _zod.z.number().int(),
    rp_parent_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    parent_name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_Analytic = _zod.z.object({
    document: st_documents_AnalyticDocument,
    events: _zod.z.union([
        _zod.z.array(st_documents_AnalyticEvent),
        _zod.z.null()
    ]).optional(),
    entities: _zod.z.union([
        _zod.z.array(st_documents_AnalyticEntity),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_SdkRpjson = _zod.z.object({
    document: st_documents_SimplifiedDocument,
    content: st_documents_Content,
    analytics: st_documents_Analytic
}).passthrough();
const st_documents_Source = _zod.z.object({
    rp_channel_id: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    rp_organization_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_external_source_id: _zod.z.string(),
    rp_provider_id: _zod.z.string(),
    rp_source_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rank: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_TimestampsUTC = _zod.z.object({
    published: _zod.z.string(),
    reception: _zod.z.string(),
    creation: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    last_modified: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    analytics: _zod.z.string(),
    revision: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_RevisionMetadata = _zod.z.object({
    chain_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    sequence_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_CollectionMetadata = _zod.z.object({
    rp_collection_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    provider_collection_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_Metadata = _zod.z.object({
    primary_entity: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    provider_document_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    provider_filename: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    provider_timestamp: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    media_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    original_language: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    copyright: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    revision: _zod.z.union([
        st_documents_RevisionMetadata,
        _zod.z.null()
    ]),
    codes: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    custom: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]),
    collection: _zod.z.union([
        st_documents_CollectionMetadata,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_Document = _zod.z.object({
    rp_document_id: _zod.z.string(),
    source: st_documents_Source,
    timestamps_utc: st_documents_TimestampsUTC,
    metadata: st_documents_Metadata,
    api_units: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_SoftwareVersions = _zod.z.object({
    collection_build: _zod.z.string(),
    classification_build: _zod.z.string(),
    metadata_build: _zod.z.string()
}).passthrough();
const st_documents_ExtractionStageProfiling = _zod.z.object({
    processor_in_timestamp_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    processor_out_timestamp_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    translation_in_timestamp_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    translation_out_timestamp_utc: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_Profiling = _zod.z.object({
    collection: st_documents_ExtractionStageProfiling
}).passthrough();
const st_documents_Rpjson = _zod.z.object({
    document: st_documents_Document,
    software_versions: st_documents_SoftwareVersions,
    content: st_documents_Content,
    analytics: st_documents_Analytic,
    profiling: _zod.z.union([
        st_documents_Profiling,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_PresignedUrlRpjson = _zod.z.object({
    url: _zod.z.string()
}).passthrough();
const st_documents_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_documents_VespaCollectionDocument = _zod.z.object({
    rpDocumentId: _zod.z.string(),
    title: _zod.z.string(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpDocumentType: _zod.z.string(),
    rpDocumentSubtype: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpCollectionId: _zod.z.string(),
    contentType: _zod.z.string(),
    reportingPeriod: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    reportingEntities: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_VespaEntity = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    type: _zod.z.string(),
    category: _zod.z.string(),
    description: _zod.z.string(),
    ticker: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    logoUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_VespaCollectionResponse = _zod.z.object({
    documents: _zod.z.array(st_documents_VespaCollectionDocument),
    entities: _zod.z.array(st_documents_VespaEntity)
}).passthrough();
const st_documents_DataToolsApiRequest = _zod.z.object({
    rpEntityId: _zod.z.union([
        _zod.z.string(),
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    startDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    endDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    category: _zod.z.union([
        _zod.z.array(_zod.z.enum([
            "earnings-call",
            "conference-call"
        ])),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_documents_QuarterEntityRecord = _zod.z.object({
    category: _zod.z.enum([
        "earnings-call",
        "conference-call"
    ]),
    transcriptEventDatetime: _zod.z.string(),
    title: _zod.z.string(),
    fiscalYear: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    fiscalPeriod: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    providerCollectionId: _zod.z.union([
        _zod.z.number(),
        _zod.z.string()
    ]),
    providerPrimaryEntityId: _zod.z.number().int(),
    rpProviderId: _zod.z.string().optional().default("QRTR"),
    updatedAt: _zod.z.string(),
    createdAt: _zod.z.string(),
    backlinkUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_documents_DataToolsApiResponse = _zod.z.object({
    result: _zod.z.record(_zod.z.array(st_documents_QuarterEntityRecord))
}).passthrough();
const st_event_tracker_UserEvent = _zod.z.object({
    event_name: _zod.z.string(),
    properties: _zod.z.object({}).partial().passthrough()
}).passthrough();
const st_event_tracker_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_finances_FinanceRequest = _zod.z.object({
    entityIds: _zod.z.array(_zod.z.string()),
    financialInfo: _zod.z.array(_zod.z.enum([
        "quote",
        "change"
    ]))
}).passthrough();
const st_finances_FullQuote = _zod.z.object({
    symbol: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    price: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    changePercentage: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    change: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    volume: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dayLow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    dayHigh: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    yearHigh: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    yearLow: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    marketCap: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceAvg50: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    priceAvg200: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    exchange: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    open: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    previousClose: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    timestamp: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_finances_FullStockPriceChange = _zod.z.object({
    symbol: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    "1D": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "1W": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "1M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "3M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "6M": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    ytd: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "1Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "3Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "5Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    "10Y": _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ]),
    max: _zod.z.union([
        _zod.z.number(),
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_finances_PossibleFinancialInfo = _zod.z.object({
    quote: _zod.z.union([
        st_finances_FullQuote,
        _zod.z.null()
    ]),
    change: _zod.z.union([
        st_finances_FullStockPriceChange,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_finances_FinanceResponse = _zod.z.record(st_finances_PossibleFinancialInfo);
const st_finances_UpstreamTooManyRequests = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(429),
    errorCode: _zod.z.string().optional().default("UPSTREAM-RATE_LIMIT"),
    message: _zod.z.string().optional().default("Too many requests sent to an upstream dependency. Please try again later."),
    requestId: _zod.z.string()
}).passthrough();
const st_finances_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_finances_UpstreamFailedError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(502),
    errorCode: _zod.z.string().optional().default("UPSTREAM-FAILED"),
    message: _zod.z.string().optional().default("Service unavailable due to an upstream dependency."),
    requestId: _zod.z.string()
}).passthrough();
const st_finances_DBConnectionError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(503),
    errorCode: _zod.z.string().optional().default("DB-ERROR"),
    message: _zod.z.string().optional().default("Service temporarily unavailable. Please try again later."),
    requestId: _zod.z.string()
}).passthrough();
const st_internal_search_api_FilterScope = _zod.z.enum([
    "title",
    "body",
    "all"
]);
const st_internal_search_api_SearchEntity = _zod.z.object({
    id: _zod.z.string(),
    scope: st_internal_search_api_FilterScope.optional(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_EntityFilter = _zod.z.object({
    all_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_SearchEntity
    ])),
    any_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_SearchEntity
    ])),
    none_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_SearchEntity
    ]))
}).partial().passthrough();
const st_internal_search_api_BaseFilterItem = _zod.z.object({
    id: _zod.z.string(),
    scope: st_internal_search_api_FilterScope.optional()
}).passthrough();
const st_internal_search_api_EventFilter = _zod.z.object({
    all_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    any_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    none_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ]))
}).partial().passthrough();
const st_internal_search_api_DateRange = _zod.z.object({
    start: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    end: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_SentimentPolarity = _zod.z.enum([
    "positive",
    "negative",
    "neutral"
]);
const st_internal_search_api_DocumentIdFilter = _zod.z.object({
    type: _zod.z.string(),
    document_ids: _zod.z.array(_zod.z.string()).min(1).max(1000)
}).passthrough();
const st_internal_search_api_TranscriptSubtype = _zod.z.enum([
    "Analyst, Investor and Shareholder meeting",
    "Earnings Call",
    "General Conference Call",
    "General Presentation",
    "Guidance Call",
    "Investor Conference Call",
    "Sales and Revenue Call",
    "Shareholders Meeting",
    "Special Situation, M&A and Other"
]);
const st_internal_search_api_DocumentTranscriptFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_internal_search_api_TranscriptSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_FilingSubtype = _zod.z.enum([
    "RNS-OTHER",
    "RNS-SEC-10-K",
    "RNS-SEC-10-Q",
    "RNS-SEC-20-F",
    "RNS-SEC-6-K",
    "RNS-SEC-8-K",
    "RNS-SEC-S-1",
    "RNS-SEC-S-3"
]);
const st_internal_search_api_DocumentFilingFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_internal_search_api_FilingSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_DocumentNewsFilter = _zod.z.object({
    type: _zod.z.string()
}).passthrough();
const st_internal_search_api_DocumentTranscriptPresentationFilter = _zod.z.object({
    type: _zod.z.string(),
    subtype: _zod.z.union([
        st_internal_search_api_TranscriptSubtype,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_ProviderFilter = _zod.z.object({
    type: _zod.z.string(),
    provider_ids: _zod.z.array(_zod.z.string()).min(1).max(1000),
    document_types: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_internal_search_api_DocumentTranscriptFilter,
            st_internal_search_api_DocumentFilingFilter,
            st_internal_search_api_DocumentNewsFilter,
            st_internal_search_api_DocumentTranscriptPresentationFilter
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_SourceFilter = _zod.z.object({
    type: _zod.z.string(),
    sources_ids: _zod.z.array(_zod.z.string()).min(1).max(1000),
    document_types: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_internal_search_api_DocumentTranscriptFilter,
            st_internal_search_api_DocumentFilingFilter,
            st_internal_search_api_DocumentNewsFilter,
            st_internal_search_api_DocumentTranscriptPresentationFilter
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_DocumentUserFileFilter = _zod.z.object({
    type: _zod.z.string(),
    tags: _zod.z.array(_zod.z.string()).max(1000).optional()
}).passthrough();
const st_internal_search_api_DocTypeFilter = _zod.z.object({
    type: _zod.z.string(),
    document_types: _zod.z.array(_zod.z.union([
        st_internal_search_api_DocumentTranscriptFilter,
        st_internal_search_api_DocumentFilingFilter,
        st_internal_search_api_DocumentNewsFilter,
        st_internal_search_api_DocumentTranscriptPresentationFilter,
        st_internal_search_api_DocumentUserFileFilter
    ])).min(1)
}).passthrough();
const st_internal_search_api_PackageIdFilter = _zod.z.object({
    type: _zod.z.string(),
    package_ids: _zod.z.array(_zod.z.string()).min(1).max(1000)
}).passthrough();
const st_internal_search_api_ContentFilter = _zod.z.object({
    any_of: _zod.z.array(_zod.z.union([
        st_internal_search_api_DocumentIdFilter,
        st_internal_search_api_ProviderFilter,
        st_internal_search_api_SourceFilter,
        st_internal_search_api_DocTypeFilter,
        st_internal_search_api_PackageIdFilter
    ])),
    all_of: _zod.z.array(_zod.z.union([
        st_internal_search_api_DocumentIdFilter,
        st_internal_search_api_ProviderFilter,
        st_internal_search_api_SourceFilter,
        st_internal_search_api_DocTypeFilter,
        st_internal_search_api_PackageIdFilter
    ])),
    none_of: _zod.z.array(_zod.z.union([
        st_internal_search_api_DocumentIdFilter,
        st_internal_search_api_ProviderFilter,
        st_internal_search_api_SourceFilter,
        st_internal_search_api_DocTypeFilter,
        st_internal_search_api_PackageIdFilter
    ]))
}).partial().passthrough();
const st_internal_search_api_KeywordFilter = _zod.z.object({
    all_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    any_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    none_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ]))
}).partial().passthrough();
const st_internal_search_api_PackageFilter = _zod.z.object({
    all_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    any_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ])),
    none_of: _zod.z.array(_zod.z.union([
        _zod.z.string(),
        st_internal_search_api_BaseFilterItem
    ]))
}).partial().passthrough();
const st_internal_search_api_ReportingPeriod = _zod.z.object({
    fiscal_year: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    fiscal_quarter: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_QueryFilters = _zod.z.object({
    entities: _zod.z.union([
        st_internal_search_api_EntityFilter,
        _zod.z.null()
    ]),
    events: _zod.z.union([
        st_internal_search_api_EventFilter,
        _zod.z.null()
    ]),
    period: _zod.z.union([
        st_internal_search_api_DateRange,
        _zod.z.null()
    ]),
    sentiments: _zod.z.array(st_internal_search_api_SentimentPolarity),
    content: _zod.z.union([
        st_internal_search_api_ContentFilter,
        _zod.z.null()
    ]),
    keywords: _zod.z.union([
        st_internal_search_api_KeywordFilter,
        _zod.z.null()
    ]),
    packages: _zod.z.union([
        st_internal_search_api_PackageFilter,
        _zod.z.null()
    ]),
    vespa_request_override: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]),
    reporting_entities: _zod.z.array(_zod.z.string()).max(1000),
    reporting_periods: _zod.z.array(st_internal_search_api_ReportingPeriod).max(1000),
    tags: _zod.z.array(_zod.z.string()).max(1000)
}).partial().passthrough();
const st_internal_search_api_SearchType = _zod.z.enum([
    "hybrid",
    "hybrid_rank",
    "semantic"
]);
const st_internal_search_api_SortBy = _zod.z.enum([
    "relevance",
    "date_asc",
    "date_desc"
]);
const st_internal_search_api_RelevanceRanking = _zod.z.object({
    rerank: _zod.z.boolean().default(true),
    freshness: _zod.z.number().gte(0).lte(10).default(1),
    enrichment: _zod.z.boolean().default(true),
    source_authority: _zod.z.number().gte(0).lte(10).default(1),
    document_prominence: _zod.z.number().gte(0).lte(10).default(1),
    sentiment_impact: _zod.z.number().gte(0).lte(10).default(1)
}).partial().passthrough();
const st_internal_search_api_SearchQuery = _zod.z.object({
    text: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    weakand_text: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    filters: _zod.z.union([
        st_internal_search_api_QueryFilters,
        _zod.z.null()
    ]),
    max_chunks: _zod.z.number().int().gte(0).default(100),
    external_content: _zod.z.boolean().default(false),
    offset: _zod.z.number().int().gte(0).default(0),
    search_type: st_internal_search_api_SearchType,
    sort_by: st_internal_search_api_SortBy,
    debug: _zod.z.boolean().default(false),
    clustering: _zod.z.boolean().default(false),
    relevance_ranking: st_internal_search_api_RelevanceRanking
}).partial().passthrough();
const st_internal_search_api_ProductType = _zod.z.enum([
    "app",
    "api"
]);
const st_internal_search_api_SwitchEntitlement = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_internal_search_api_ProductType)
}).passthrough();
const st_internal_search_api_EntitlementLimitTarget = _zod.z.enum([
    "per_user",
    "per_organization"
]);
const st_internal_search_api_MaxValueEntitlement = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_internal_search_api_ProductType),
    limitTarget: _zod.z.union([
        st_internal_search_api_EntitlementLimitTarget,
        _zod.z.null()
    ]).optional(),
    maxValue: _zod.z.union([
        _zod.z.number(),
        _zod.z.string()
    ]),
    limitTimePeriod: _zod.z.null().optional()
}).passthrough();
const st_internal_search_api_UserQuotaV2 = _zod.z.object({
    searchMaxSaved: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxScheduled: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxFollowed: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxShared: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    watchlistMaxCreated: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    watchlistMaxShared: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_OrganizationQuotaV2 = _zod.z.object({
    contextualUnitsMaxRead: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_User = _zod.z.object({
    uid: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    company: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    products: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    userId: _zod.z.string(),
    userEmail: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    organizationId: _zod.z.string(),
    organizationRpCid: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    entitlements: _zod.z.array(_zod.z.union([
        st_internal_search_api_SwitchEntitlement,
        st_internal_search_api_MaxValueEntitlement
    ])).optional().default([]),
    userQuota: _zod.z.union([
        st_internal_search_api_UserQuotaV2,
        _zod.z.null()
    ]).optional(),
    organizationQuota: _zod.z.union([
        st_internal_search_api_OrganizationQuotaV2,
        _zod.z.null()
    ]).optional(),
    contentAccessPolicies: _zod.z.array(_zod.z.string()).min(1),
    contentProviderIds: _zod.z.array(_zod.z.string()).optional().default([]),
    contentSourceIds: _zod.z.array(_zod.z.string()).optional().default([]),
    featureAccessPolicies: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    requestOrigin: _zod.z.string(),
    productType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    onFreemium: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional(),
    freeUser: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_SearchRequest = _zod.z.object({
    query: st_internal_search_api_SearchQuery,
    user: st_internal_search_api_User,
    timezone: _zod.z.string().optional().default("UTC")
}).passthrough();
const st_internal_search_api_ChunkSentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_internal_search_api_BoundingBox = _zod.z.object({
    bottom: _zod.z.number(),
    left: _zod.z.number(),
    page: _zod.z.number().int(),
    right: _zod.z.number(),
    top: _zod.z.number()
}).passthrough();
const st_internal_search_api_VespaChunk = _zod.z.object({
    cnum: _zod.z.number().int(),
    text: _zod.z.string(),
    sentences: _zod.z.array(st_internal_search_api_ChunkSentence),
    relevance: _zod.z.number(),
    bounding_boxes: _zod.z.union([
        _zod.z.array(st_internal_search_api_BoundingBox),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_VespaDocument = _zod.z.object({
    document_scope: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    language: _zod.z.string(),
    chunks: _zod.z.union([
        _zod.z.array(st_internal_search_api_VespaChunk),
        _zod.z.null()
    ]).optional(),
    src_key: _zod.z.string(),
    src_name: _zod.z.string(),
    source_rank: _zod.z.number().int().optional().default(10),
    ts: _zod.z.string(),
    content_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    document_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rp_provider_id: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_SerpResult = _zod.z.object({
    hd: _zod.z.string(),
    text: _zod.z.string(),
    source_name: _zod.z.string(),
    url: _zod.z.string().min(1).max(2083).url(),
    relevance: _zod.z.number().optional().default(0),
    ts: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata: _zod.z.union([
        _zod.z.record(_zod.z.union([
            _zod.z.string(),
            _zod.z.array(_zod.z.string())
        ])),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_internal_search_api_VespaTimeMetrics = _zod.z.object({
    querytime: _zod.z.number(),
    summaryfetchtime: _zod.z.number(),
    searchtime: _zod.z.number()
}).passthrough();
const st_internal_search_api_VespaCoverageMetrics = _zod.z.object({
    coverage: _zod.z.number().int(),
    documents: _zod.z.number().int(),
    full: _zod.z.boolean(),
    nodes: _zod.z.number().int(),
    results: _zod.z.number().int(),
    resultsFull: _zod.z.number().int()
}).passthrough();
const st_internal_search_api_VespaResponse = _zod.z.object({
    error: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    timing: _zod.z.union([
        st_internal_search_api_VespaTimeMetrics,
        _zod.z.null()
    ]),
    coverage: _zod.z.union([
        st_internal_search_api_VespaCoverageMetrics,
        _zod.z.null()
    ]),
    total_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    document_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_SearchResult = _zod.z.object({
    vespa_results: _zod.z.array(st_internal_search_api_VespaDocument),
    serp_results: _zod.z.array(st_internal_search_api_SerpResult),
    vespa_response: _zod.z.union([
        st_internal_search_api_VespaResponse,
        _zod.z.null()
    ]),
    debug: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_internal_search_api_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_internal_search_api_UnauthorizedResponse = _zod.z.object({
    message: _zod.z.string().default("User authentication failed")
}).partial().passthrough();
const st_internal_search_api_InternalServerResponse = _zod.z.object({
    statusCode: _zod.z.number().int().default(500),
    message: _zod.z.string().default("Internal Server Error.")
}).partial().passthrough();
const st_internal_search_api_ComentionsSearchQuery = _zod.z.object({
    text: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    weakand_text: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    filters: _zod.z.union([
        st_internal_search_api_QueryFilters,
        _zod.z.null()
    ]),
    max_chunks: _zod.z.number().int().gte(0).default(100),
    external_content: _zod.z.boolean().default(false),
    offset: _zod.z.number().int().gte(0).default(0),
    search_type: st_internal_search_api_SearchType,
    sort_by: st_internal_search_api_SortBy,
    debug: _zod.z.boolean().default(false),
    clustering: _zod.z.boolean().default(false),
    relevance_ranking: st_internal_search_api_RelevanceRanking,
    top_n_entities: _zod.z.number().int().gte(1).lte(1000).default(100),
    top_n_events: _zod.z.number().int().gte(1).lte(1000).default(10)
}).partial().passthrough();
const st_internal_search_api_ComentionsSearchRequest = _zod.z.object({
    query: st_internal_search_api_ComentionsSearchQuery,
    user: st_internal_search_api_User,
    timezone: _zod.z.string().optional().default("UTC")
}).passthrough();
const st_internal_search_api_ComentionsItemResponse = _zod.z.object({
    key: _zod.z.string(),
    volume: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    total_chunks_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    total_titles_count: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    group1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    group5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata1: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata2: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata3: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata4: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata5: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata6: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata7: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata8: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata9: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    metadata10: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    parent1: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    parent2: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    parent3: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    flag: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    category: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    publicationType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    country: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    queryType: _zod.z.string(),
    entityType: _zod.z.string()
}).passthrough();
const st_internal_search_api_ComentionsGroupResponse = _zod.z.object({
    coverage: _zod.z.union([
        st_internal_search_api_VespaCoverageMetrics,
        _zod.z.null()
    ]),
    timing: st_internal_search_api_VespaTimeMetrics,
    places: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    companies: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    organizations: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    people: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    products: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    concepts: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    topics: _zod.z.array(st_internal_search_api_ComentionsItemResponse).optional(),
    yql: _zod.z.object({}).partial().passthrough().optional()
}).passthrough();
const st_internal_search_api_VolumeResponse = _zod.z.object({
    coverage: _zod.z.union([
        st_internal_search_api_VespaCoverageMetrics,
        _zod.z.null()
    ]),
    timing: st_internal_search_api_VespaTimeMetrics,
    total_count: _zod.z.number().int().optional().default(0),
    daily_count: _zod.z.record(_zod.z.number().int()).optional(),
    debug: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ChatInteractionScope = _zod.z.enum([
    "all",
    "filings",
    "transcripts",
    "news",
    "files",
    "market_intelligence",
    "earnings_calls",
    "quartr_pro",
    "market_narratives",
    "sentiment-attention",
    "job-analytics",
    "price",
    "estimates",
    "crunchbase",
    "knowledge-graph",
    "etf-holdings",
    "crypto_markets",
    "middle_eastern_markets",
    "financial_times",
    "expert_networks"
]);
const st_llm_chat_Document = _zod.z.object({
    id: _zod.z.string(),
    fileName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rawSize: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    uploadTs: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ChatInteractionType = _zod.z.enum([
    "trending",
    "feed",
    "user_message",
    "empty_message",
    "trending_prompt",
    "watchlist",
    "flow"
]);
const st_llm_chat_RequestEntity = _zod.z.object({
    key: _zod.z.string(),
    name: _zod.z.string(),
    type: _zod.z.string()
}).passthrough();
const st_llm_chat_RequestTimeRange = _zod.z.object({
    startTime: _zod.z.string().datetime({
        offset: true
    }),
    endTime: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_llm_chat_FlowType = _zod.z.enum([
    "company_news_roundup",
    "earnings_digest",
    "market_recap",
    "morning_digest",
    "sector_trends",
    "earnings_preview"
]);
const st_llm_chat_RequestFiles = _zod.z.object({
    fileId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    ownerId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    userIsOwner: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_RequestWatchlists = _zod.z.object({
    watchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    ownerId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    userIsOwner: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_DeviceInfoTracking = _zod.z.object({
    model: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    manufacturer: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    timezone: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    locale: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_AppInfoTracking = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    build: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    namespace: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    version: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_DeviceNetworkInfoTracking = _zod.z.object({
    cellular: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    wifi: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]),
    bluetooth: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_DeviceOSInfoTracking = _zod.z.object({
    version: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_RequestTrackingInfo = _zod.z.object({
    status: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    promptTopics: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    promptTask: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    platformType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    version: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    files: _zod.z.union([
        _zod.z.array(st_llm_chat_RequestFiles),
        _zod.z.null()
    ]),
    watchlists: _zod.z.union([
        _zod.z.array(st_llm_chat_RequestWatchlists),
        _zod.z.null()
    ]),
    chatStartLocation: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    platform: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    followUpSuggestionIndex: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    device: _zod.z.union([
        st_llm_chat_DeviceInfoTracking,
        _zod.z.null()
    ]),
    app: _zod.z.union([
        st_llm_chat_AppInfoTracking,
        _zod.z.null()
    ]),
    network: _zod.z.union([
        st_llm_chat_DeviceNetworkInfoTracking,
        _zod.z.null()
    ]),
    os: _zod.z.union([
        st_llm_chat_DeviceOSInfoTracking,
        _zod.z.null()
    ]),
    promptContextLevel: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    promptCategory: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    promptCompanyType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    dataViewAtClick: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    clickedSuggestedPromptText: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    suggestedPromptClassification: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    suggestedPromptClick: _zod.z.boolean().default(false)
}).partial().passthrough();
const st_llm_chat_ChatWithMemoryRequest = _zod.z.object({
    action: _zod.z.string(),
    requestId: _zod.z.string(),
    chatId: _zod.z.string(),
    inputMessage: _zod.z.string(),
    displayedMessage: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    debug: _zod.z.boolean().optional().default(false),
    scope: _zod.z.union([
        st_llm_chat_ChatInteractionScope,
        _zod.z.null()
    ]).optional(),
    scopeDocuments: _zod.z.union([
        _zod.z.array(st_llm_chat_Document),
        _zod.z.null()
    ]).optional(),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    interactionType: st_llm_chat_ChatInteractionType.optional(),
    useMasterRouter: _zod.z.boolean().optional().default(false),
    entities: _zod.z.union([
        _zod.z.array(st_llm_chat_RequestEntity),
        _zod.z.null()
    ]).optional(),
    timeRange: _zod.z.union([
        st_llm_chat_RequestTimeRange,
        _zod.z.null()
    ]).optional(),
    flowType: _zod.z.union([
        st_llm_chat_FlowType,
        _zod.z.null()
    ]).optional(),
    sources: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    customInstructions: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    sectors: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    tracking: _zod.z.union([
        st_llm_chat_RequestTrackingInfo,
        _zod.z.null()
    ]).optional(),
    model: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    timezone: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ChatWithMemoryUpdateLastRequest = _zod.z.object({
    action: _zod.z.string(),
    requestId: _zod.z.string(),
    chatId: _zod.z.string(),
    inputMessage: _zod.z.string(),
    displayedMessage: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    debug: _zod.z.boolean().optional().default(false),
    scope: _zod.z.union([
        st_llm_chat_ChatInteractionScope,
        _zod.z.null()
    ]).optional(),
    scopeDocuments: _zod.z.union([
        _zod.z.array(st_llm_chat_Document),
        _zod.z.null()
    ]).optional(),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    interactionType: st_llm_chat_ChatInteractionType.optional(),
    useMasterRouter: _zod.z.boolean().optional().default(false),
    entities: _zod.z.union([
        _zod.z.array(st_llm_chat_RequestEntity),
        _zod.z.null()
    ]).optional(),
    timeRange: _zod.z.union([
        st_llm_chat_RequestTimeRange,
        _zod.z.null()
    ]).optional(),
    flowType: _zod.z.union([
        st_llm_chat_FlowType,
        _zod.z.null()
    ]).optional(),
    sources: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    customInstructions: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    sectors: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    tracking: _zod.z.union([
        st_llm_chat_RequestTrackingInfo,
        _zod.z.null()
    ]).optional(),
    model: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    timezone: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const websocket_websocket__post_Body = _zod.z.union([
    st_llm_chat_ChatWithMemoryRequest,
    st_llm_chat_ChatWithMemoryUpdateLastRequest
]);
const st_llm_chat_EngineAiBlock = _zod.z.object({
    type: _zod.z.string().optional().default("ENGINE"),
    answer: _zod.z.string(),
    explainer: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    widgetSpec: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    widgetSpecUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    isSuccessfulAnswer: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_SummaryNextBlockResponse = _zod.z.object({
    type: _zod.z.string().optional().default("NEXT"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    sequenceNumber: _zod.z.number().int(),
    content: _zod.z.string(),
    block: _zod.z.union([
        st_llm_chat_EngineAiBlock,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_QuotaUsage = _zod.z.object({
    inputTokens: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    outputTokens: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchesCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_SummaryCompletionResponse = _zod.z.object({
    type: _zod.z.string().optional().default("COMPLETE"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    interactionTimestamp: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    contentBlocks: _zod.z.union([
        st_llm_chat_EngineAiBlock,
        _zod.z.null()
    ]).optional(),
    usage: _zod.z.union([
        st_llm_chat_QuotaUsage,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_DocumentSourceAction = _zod.z.object({
    type: _zod.z.string().optional().default("DOCUMENT"),
    name: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    srcKey: _zod.z.string(),
    imageUrls: _zod.z.array(_zod.z.string().min(1).max(2083).url()).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ExternalSourceAction = _zod.z.object({
    type: _zod.z.string().optional().default("EXTERNAL"),
    name: _zod.z.string(),
    hd: _zod.z.string(),
    url: _zod.z.string().min(1).max(2083).url(),
    faviconUrl: _zod.z.string().min(1).max(2083).url()
}).passthrough();
const st_llm_chat_EngineAiSourceAction = _zod.z.object({
    type: _zod.z.string().optional().default("ENGINE"),
    name: _zod.z.string(),
    srcKey: _zod.z.string(),
    faviconUrl: _zod.z.string().min(1).max(2083).url()
}).passthrough();
const st_llm_chat_OriginSourceMetadata = _zod.z.object({
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    imageUrls: _zod.z.union([
        _zod.z.array(_zod.z.string().min(1).max(2083).url()),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_OriginSourcesMetadata = _zod.z.record(st_llm_chat_OriginSourceMetadata);
const st_llm_chat_SummarySourcesResponse = _zod.z.object({
    type: _zod.z.string().optional().default("SOURCES"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    originSources: _zod.z.array(_zod.z.union([
        st_llm_chat_DocumentSourceAction,
        st_llm_chat_ExternalSourceAction,
        st_llm_chat_EngineAiSourceAction
    ])),
    metadata: _zod.z.union([
        st_llm_chat_OriginSourcesMetadata,
        _zod.z.null()
    ])
}).passthrough();
const st_llm_chat_TraceQuery = _zod.z.object({
    text: _zod.z.string(),
    filters: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ChunkSentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_llm_chat_BoundingBox = _zod.z.object({
    bottom: _zod.z.number(),
    left: _zod.z.number(),
    page: _zod.z.number().int(),
    right: _zod.z.number(),
    top: _zod.z.number()
}).passthrough();
const st_llm_chat_TraceResultChunk = _zod.z.object({
    id: _zod.z.string(),
    cnum: _zod.z.number().int(),
    text: _zod.z.string(),
    sentences: _zod.z.array(st_llm_chat_ChunkSentence),
    relevance: _zod.z.number(),
    boundingBoxes: _zod.z.union([
        _zod.z.array(st_llm_chat_BoundingBox),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_TraceResultCQSStory = _zod.z.object({
    documentScope: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    language: _zod.z.string(),
    chunks: _zod.z.union([
        _zod.z.array(st_llm_chat_TraceResultChunk),
        _zod.z.null()
    ]).optional(),
    srcKey: _zod.z.string(),
    srcName: _zod.z.string(),
    sourceRank: _zod.z.number().int().optional().default(10),
    ts: _zod.z.string(),
    contentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    documentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_AuditTraceCQSResult = _zod.z.object({
    type: _zod.z.string().optional().default("CQS"),
    values: _zod.z.array(st_llm_chat_TraceResultCQSStory)
}).passthrough();
const st_llm_chat_ExternalTraceResult = _zod.z.object({
    hd: _zod.z.string(),
    text: _zod.z.string(),
    action: st_llm_chat_ExternalSourceAction,
    ts: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata: _zod.z.union([
        _zod.z.record(_zod.z.union([
            _zod.z.string(),
            _zod.z.array(_zod.z.string())
        ])),
        _zod.z.null()
    ]).optional(),
    id: _zod.z.string()
}).passthrough();
const st_llm_chat_AuditTraceExternalResult = _zod.z.object({
    type: _zod.z.string().optional().default("EXTERNAL"),
    values: _zod.z.array(st_llm_chat_ExternalTraceResult)
}).passthrough();
const st_llm_chat_AuditTraceEngineAIResult = _zod.z.object({
    type: _zod.z.string().default("ENGINE"),
    sqlQuery: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_llm_chat_AuditTrace = _zod.z.object({
    query: st_llm_chat_TraceQuery,
    results: _zod.z.array(_zod.z.union([
        st_llm_chat_AuditTraceCQSResult,
        st_llm_chat_AuditTraceExternalResult,
        st_llm_chat_AuditTraceEngineAIResult
    ])),
    queryId: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_AuditTraceResponse = _zod.z.object({
    type: _zod.z.string().optional().default("AUDIT_TRACE"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    trace: st_llm_chat_AuditTrace
}).passthrough();
const st_llm_chat_ProfilingResponse = _zod.z.object({
    type: _zod.z.string().optional().default("PROFILING"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    xrayTraceId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    coldStart: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    ttft: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    timeToCompletion: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    routingResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    queryEnrichmentTimes: _zod.z.union([
        _zod.z.array(_zod.z.number()),
        _zod.z.null()
    ]).optional(),
    searchResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sourceImagesResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sourceImagesCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sourceUrlsCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    sourceImagesResponseTimes: _zod.z.union([
        _zod.z.array(_zod.z.number()),
        _zod.z.null()
    ]).optional(),
    documentUrlsResponseTimes: _zod.z.union([
        _zod.z.array(_zod.z.number()),
        _zod.z.null()
    ]).optional(),
    cqsResponseTimes: _zod.z.union([
        _zod.z.array(_zod.z.number()),
        _zod.z.null()
    ]).optional(),
    cqsQueryCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    serpResponseTimes: _zod.z.union([
        _zod.z.array(_zod.z.number()),
        _zod.z.null()
    ]).optional(),
    serpQueryCount: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    summarizerTtft: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    engineAiResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    engineAiContextualizationTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    watchlistRoutingResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    historyRetrievalResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    crossEncoderResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    masterRouterContextualizationTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    masterRouterInferenceTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    followUpResponseTime: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_StatusInfoResponse = _zod.z.object({
    type: _zod.z.string().optional().default("STATUS"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    message: _zod.z.string()
}).passthrough();
const st_llm_chat_QueryIdentifier = _zod.z.object({
    query: _zod.z.string(),
    query_id: _zod.z.number().int()
}).passthrough();
const st_llm_chat_StatusQueryResponse = _zod.z.object({
    type: _zod.z.string().optional().default("STATUS_QUERY"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    queries: _zod.z.array(st_llm_chat_QueryIdentifier)
}).passthrough();
const st_llm_chat_StatusResetResponse = _zod.z.object({
    type: _zod.z.string().optional().default("STATUS_RESET"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_StatusSourcesFinishedResponse = _zod.z.object({
    type: _zod.z.string().optional().default("STATUS_CONCLUDING"),
    requestId: _zod.z.string(),
    messageDeltaMs: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    "x-amz-requestid": _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_chat_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_llm_trending_get_TrendingRequestType = _zod.z.enum([
    "searches",
    "queries"
]);
const type = st_llm_trending_get_TrendingRequestType.optional().default("searches");
const st_llm_trending_get_LambdaCookie = _zod.z.object({
    name: _zod.z.string(),
    value: _zod.z.string(),
    path: _zod.z.string().optional().default(""),
    domain: _zod.z.string().optional().default(""),
    secure: _zod.z.boolean().optional().default(true),
    http_only: _zod.z.boolean().optional().default(false),
    max_age: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    expires: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    same_site: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    custom_attributes: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_trending_get_LambdaResponse = _zod.z.object({
    status_code: _zod.z.number().int(),
    content_type: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    body: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    headers: _zod.z.union([
        _zod.z.record(_zod.z.union([
            _zod.z.string(),
            _zod.z.array(_zod.z.string())
        ])),
        _zod.z.null()
    ]).optional(),
    cookies: _zod.z.union([
        _zod.z.array(st_llm_trending_get_LambdaCookie),
        _zod.z.null()
    ]).optional(),
    compress: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_llm_trending_get_LambdaBadRequestError = _zod.z.object({
    msg: _zod.z.string(),
    status_code: _zod.z.number().int().optional().default(400)
}).passthrough();
const st_private_content_StatusOptions = _zod.z.enum([
    "PENDING",
    "PROCESSING",
    "COMPLETED",
    "FAILED",
    "DELETED"
]);
const status = _zod.z.union([
    st_private_content_StatusOptions,
    _zod.z.null()
]).optional();
const st_private_content_SortByOptions = _zod.z.enum([
    "created_at",
    "file_name",
    "size"
]);
const sort_by = _zod.z.union([
    st_private_content_SortByOptions,
    _zod.z.null()
]).optional().default("created_at");
const st_private_content_SortDirOptions = _zod.z.enum([
    "asc",
    "desc"
]);
const sort_dir = _zod.z.union([
    st_private_content_SortDirOptions,
    _zod.z.null()
]).optional().default("desc");
const st_private_content_OwnershipOptions = _zod.z.enum([
    "all",
    "shared",
    "owned"
]);
const ownership = _zod.z.union([
    st_private_content_OwnershipOptions,
    _zod.z.null()
]).optional().default("all");
const st_private_content_OwnerData = _zod.z.object({
    userId: _zod.z.string(),
    legacyId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    email: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    fullName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    orgId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    orgSlug: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    orgName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_private_content_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_private_content_EmailConfigFilterResponse = _zod.z.object({
    email: _zod.z.string(),
    allowed: _zod.z.boolean(),
    configId: _zod.z.string().uuid()
}).passthrough();
const st_private_content_EmailConfigResponse = _zod.z.object({
    configId: _zod.z.string().uuid(),
    emailHash: _zod.z.string(),
    label: _zod.z.string(),
    filters: _zod.z.array(st_private_content_EmailConfigFilterResponse),
    userId: _zod.z.string(),
    orgId: _zod.z.string()
}).passthrough();
const st_private_content_ListEmailConfigsResponse = _zod.z.object({
    results: _zod.z.array(st_private_content_EmailConfigResponse)
}).passthrough();
const st_private_content_EmailConfigFilterPayload = _zod.z.object({
    email: _zod.z.string(),
    allowed: _zod.z.boolean()
}).passthrough();
const st_private_content_EmailConfigPayload = _zod.z.object({
    label: _zod.z.string(),
    filters: _zod.z.array(st_private_content_EmailConfigFilterPayload)
}).passthrough();
const st_private_content_FileResponse = _zod.z.object({
    fileId: _zod.z.string(),
    fileName: _zod.z.string(),
    userId: _zod.z.string(),
    orgId: _zod.z.string(),
    rpCollectionId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rawSize: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    requestOrigin: _zod.z.string(),
    contentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    status: _zod.z.string(),
    sharedWith: _zod.z.array(_zod.z.string()),
    createdAt: _zod.z.string().datetime({
        offset: true
    }),
    updatedAt: _zod.z.string().datetime({
        offset: true
    }),
    emailConfigId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_private_content_ListFilesResponse = _zod.z.object({
    results: _zod.z.array(st_private_content_FileResponse)
}).passthrough();
const st_private_content_PrivateContentUrlResponse = _zod.z.object({
    contentUrl: _zod.z.string()
}).passthrough();
const st_profiles_StatusEnum = _zod.z.enum([
    "OK",
    "EXCEEDED"
]);
const st_profiles_QuotaStatus = _zod.z.object({
    status: st_profiles_StatusEnum,
    message: _zod.z.string()
}).passthrough();
const st_profiles_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    msg: _zod.z.string()
}).passthrough();
const st_profiles_OrganizationQuotaV2 = _zod.z.object({
    contextualUnitsMaxRead: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_profiles_OrganizationConsumed = _zod.z.object({
    contextualUnitsRead: _zod.z.number().int().default(0)
}).partial().passthrough();
const st_profiles_FeatureAccessPolicy = _zod.z.enum([
    "search",
    "upload",
    "index",
    "watchlist",
    "chat",
    "chat:estimates",
    "chat:jobs",
    "chat:pricing",
    "chat:sentiment",
    "chat:serp",
    "chat:crunchbase",
    "chat:knowledge_graph",
    "chat:watchlist",
    "chat:etf_holdings",
    "support:intercom",
    "support:subscription_mngt",
    "file:upload",
    "file:index",
    "content:read"
]);
const st_profiles_ProductType = _zod.z.enum([
    "app",
    "api"
]);
const st_profiles_SwitchEntitlementResponse = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_profiles_ProductType)
}).passthrough();
const st_profiles_EntitlementLimitTarget = _zod.z.enum([
    "per_user",
    "per_organization"
]);
const st_profiles_MaxValueEntitlementResponse = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_profiles_ProductType),
    limitTarget: _zod.z.union([
        st_profiles_EntitlementLimitTarget,
        _zod.z.null()
    ]).optional(),
    maxQuota: _zod.z.union([
        _zod.z.number(),
        _zod.z.string()
    ]),
    quotaConsumed: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    limitTimePeriod: _zod.z.null().optional()
}).passthrough();
const st_profiles_MyEntitlementsResponse = _zod.z.object({
    organizationQuota: st_profiles_OrganizationQuotaV2,
    organizationConsumed: st_profiles_OrganizationConsumed,
    contentAccessPolicies: _zod.z.array(_zod.z.string()),
    featureAccessPolicies: _zod.z.array(_zod.z.union([
        st_profiles_FeatureAccessPolicy,
        _zod.z.string()
    ])),
    entitlements: _zod.z.record(_zod.z.array(_zod.z.union([
        st_profiles_SwitchEntitlementResponse,
        st_profiles_MaxValueEntitlementResponse
    ])))
}).passthrough();
const st_profiles_UserQuotaV2 = _zod.z.object({
    searchMaxSaved: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxScheduled: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxFollowed: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    searchMaxShared: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    watchlistMaxCreated: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    watchlistMaxShared: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_profiles_UserConsumed = _zod.z.object({
    searchSaved: _zod.z.number().int().default(0),
    searchScheduled: _zod.z.number().int().default(0),
    searchFollowed: _zod.z.number().int().default(0),
    searchShared: _zod.z.number().int().default(0),
    watchlistsCreated: _zod.z.number().int().default(0),
    watchlistsShared: _zod.z.number().int().default(0)
}).partial().passthrough();
const st_profiles_SubscriptionStatus = _zod.z.enum([
    "BANNED",
    "CANCELED",
    "EXPIRED",
    "SUBSCRIBED",
    "TRIAL",
    "TRIAL-EXPIRED",
    "TRIAL-PENDING"
]);
const st_profiles_SusbscriptionFrequency = _zod.z.enum([
    "Daily",
    "Weekly",
    "Monthly",
    "Yearly"
]);
const st_profiles_SubscriptionSource = _zod.z.enum([
    "ENTERPRISE",
    "INDIVIDUAL"
]);
const st_profiles_SubscriptionModificationStatus = _zod.z.enum([
    "IN PROGRESS",
    "SUCCEEDED"
]);
const st_profiles_SubscriptionModification = _zod.z.object({
    status: st_profiles_SubscriptionModificationStatus,
    startedAt: _zod.z.string().datetime({
        offset: true
    }),
    finishedAt: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_profiles_MyProfileResponse = _zod.z.object({
    userQuota: st_profiles_UserQuotaV2,
    userConsumed: st_profiles_UserConsumed,
    organizationQuota: st_profiles_OrganizationQuotaV2,
    organizationConsumed: st_profiles_OrganizationConsumed,
    contentAccessPolicies: _zod.z.array(_zod.z.string()),
    featureAccessPolicies: _zod.z.array(_zod.z.union([
        st_profiles_FeatureAccessPolicy,
        _zod.z.string()
    ])),
    entitlements: _zod.z.record(_zod.z.array(_zod.z.union([
        st_profiles_SwitchEntitlementResponse,
        st_profiles_MaxValueEntitlementResponse
    ]))),
    subscriptionStatus: _zod.z.union([
        st_profiles_SubscriptionStatus,
        _zod.z.null()
    ]).optional(),
    subscriptionRenewalDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    subscriptionFrequency: _zod.z.union([
        st_profiles_SusbscriptionFrequency,
        _zod.z.null()
    ]).optional(),
    subscriptionSource: _zod.z.union([
        st_profiles_SubscriptionSource,
        _zod.z.null()
    ]).optional(),
    subscriptionModification: _zod.z.union([
        st_profiles_SubscriptionModification,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_profiles_UpdateSubscriptionModificationRequest = _zod.z.object({
    status: _zod.z.string()
}).passthrough();
const st_profiles_FullUserProfileResponse = _zod.z.object({
    id: _zod.z.string(),
    organizationId: _zod.z.string(),
    userQuota: _zod.z.union([
        st_profiles_UserQuotaV2,
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    entitlementsConsumption: _zod.z.record(_zod.z.number().int()).optional().default({})
}).passthrough();
const st_profiles_SwitchEntitlement = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_profiles_ProductType)
}).passthrough();
const st_profiles_MaxValueEntitlement = _zod.z.object({
    slug: _zod.z.string(),
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string(),
    productTypes: _zod.z.array(st_profiles_ProductType),
    limitTarget: _zod.z.union([
        st_profiles_EntitlementLimitTarget,
        _zod.z.null()
    ]).optional(),
    maxValue: _zod.z.union([
        _zod.z.number(),
        _zod.z.string()
    ]),
    limitTimePeriod: _zod.z.null().optional()
}).passthrough();
const st_profiles_FullOrganizationProfileResponse = _zod.z.object({
    id: _zod.z.string(),
    appContentAccessPolicies: _zod.z.array(_zod.z.string()).optional().default([]),
    sdkContentAccessPolicies: _zod.z.array(_zod.z.string()).optional().default([]),
    entitlements: _zod.z.array(_zod.z.union([
        st_profiles_SwitchEntitlement,
        st_profiles_MaxValueEntitlement
    ])).optional().default([]),
    subscriptionStatus: _zod.z.union([
        st_profiles_SubscriptionStatus,
        _zod.z.null()
    ]).optional(),
    subscriptionRenewalDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    subscriptionSource: _zod.z.union([
        st_profiles_SubscriptionSource,
        _zod.z.null()
    ]).optional(),
    subscriptionModification: _zod.z.union([
        st_profiles_SubscriptionModification,
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    entitlementsConsumption: _zod.z.record(_zod.z.number().int()).optional().default({})
}).passthrough();
const st_profiles_UpdateSubscriptionModification = _zod.z.object({
    status: st_profiles_SubscriptionModificationStatus
}).passthrough();
const st_profiles_UpdateOrganizationProfile = _zod.z.object({
    appContentAccessPolicies: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    sdkContentAccessPolicies: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    appFeatureAccessPolicies: _zod.z.union([
        _zod.z.array(st_profiles_FeatureAccessPolicy),
        _zod.z.null()
    ]),
    sdkFeatureAccessPolicies: _zod.z.union([
        _zod.z.array(st_profiles_FeatureAccessPolicy),
        _zod.z.null()
    ]),
    entitlements: _zod.z.union([
        _zod.z.array(_zod.z.union([
            st_profiles_SwitchEntitlement,
            st_profiles_MaxValueEntitlement
        ])),
        _zod.z.null()
    ]),
    subscriptionStatus: _zod.z.union([
        st_profiles_SubscriptionStatus,
        _zod.z.null()
    ]),
    subscriptionRenewalDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    subscriptionSource: _zod.z.union([
        st_profiles_SubscriptionSource,
        _zod.z.null()
    ]),
    subscriptionModification: _zod.z.union([
        st_profiles_UpdateSubscriptionModification,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_profiles_OrganizationProfile = _zod.z.object({
    id: _zod.z.string(),
    appContentAccessPolicies: _zod.z.array(_zod.z.string()).optional().default([]),
    sdkContentAccessPolicies: _zod.z.array(_zod.z.string()).optional().default([]),
    entitlements: _zod.z.array(_zod.z.union([
        st_profiles_SwitchEntitlement,
        st_profiles_MaxValueEntitlement
    ])).optional().default([]),
    subscriptionStatus: _zod.z.union([
        st_profiles_SubscriptionStatus,
        _zod.z.null()
    ]).optional(),
    subscriptionRenewalDate: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    subscriptionSource: _zod.z.union([
        st_profiles_SubscriptionSource,
        _zod.z.null()
    ]).optional(),
    subscriptionModification: _zod.z.union([
        st_profiles_SubscriptionModification,
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_profiles_ContentAccessPolicy = _zod.z.enum([
    "public",
    "premium",
    "fs_transcripts",
    "sec_filings",
    "streetaccount",
    "all",
    "moreover",
    "midnight_trader",
    "fxstreet",
    "alliance_news",
    "benzinga",
    "fly_on_the_wall",
    "dna_english_translated",
    "dow_jones",
    "asia_transcripts",
    "capital_markets",
    "crypto_markets",
    "quartr_audios",
    "quartr_transcripts",
    "quartr_reports",
    "quartr_presentation_materials",
    "rp_multi_source_earnings_comparision",
    "rp_factset_earnings_comparision",
    "pricing_culture",
    "middle_eastern_markets",
    "financial_times",
    "expert_networks"
]);
const st_profiles_ContentAccessPoliciesResponse = _zod.z.object({
    contentAccessPolicies: _zod.z.array(_zod.z.union([
        st_profiles_ContentAccessPolicy,
        _zod.z.string()
    ]))
}).passthrough();
const st_profiles_UserOnboardingFeedback = _zod.z.object({
    industry: _zod.z.string(),
    role: _zod.z.string(),
    goals: _zod.z.array(_zod.z.string()),
    topics: _zod.z.array(_zod.z.string())
}).passthrough();
const st_profiles_UserSalesRequest = _zod.z.object({
    name: _zod.z.string(),
    email: _zod.z.string(),
    phone: _zod.z.string(),
    company: _zod.z.string(),
    message: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_subscriptions_dispatcher_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_subscriptions_CheckoutResponse = _zod.z.object({
    url: _zod.z.string()
}).passthrough();
const st_subscriptions_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_subscriptions_PlanFrequency = _zod.z.enum([
    "Daily",
    "Weekly",
    "Monthly",
    "Yearly"
]);
const st_subscriptions_PlanCurrency = _zod.z.enum([
    "USD",
    "EUR"
]);
const st_subscriptions_GenerateCheckoutUrlParamsRequest = _zod.z.object({
    products: _zod.z.array(_zod.z.string()).min(1),
    frequency: st_subscriptions_PlanFrequency.optional(),
    currency: st_subscriptions_PlanCurrency.optional()
}).passthrough();
const st_subscriptions_CustomerPortal = _zod.z.object({
    id: _zod.z.string(),
    token: _zod.z.string(),
    access_url: _zod.z.string(),
    redirect_url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    status: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    created_at: _zod.z.number().int(),
    customer_id: _zod.z.string(),
    expires_at: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    linked_customers: _zod.z.union([
        _zod.z.array(_zod.z.object({}).partial().passthrough()),
        _zod.z.null()
    ]).optional(),
    login_at: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    logout_at: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    object: _zod.z.string()
}).passthrough();
const st_subscriptions_NotFoundError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(404),
    message: _zod.z.string()
}).passthrough();
const st_user_chats_ListUserChatsRequest = _zod.z.object({
    limit: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    cursor: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    order: _zod.z.enum([
        "asc",
        "desc"
    ]).default("desc")
}).partial().passthrough();
const st_user_chats_LightUserChatResponse = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    userId: _zod.z.string(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    isPublic: _zod.z.boolean().optional().default(false)
}).passthrough();
const st_user_chats_ListUserChatResponse = _zod.z.array(st_user_chats_LightUserChatResponse);
const st_user_chats_PaginatedListUserChatResponse = _zod.z.object({
    items: _zod.z.array(st_user_chats_LightUserChatResponse),
    cursor: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    limit: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_BadRequestError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(400),
    message: _zod.z.string()
}).passthrough();
const st_user_chats_Source = _zod.z.object({
    id: _zod.z.string(),
    srcKey: _zod.z.string(),
    srcName: _zod.z.string(),
    hd: _zod.z.string(),
    imageUrls: _zod.z.array(_zod.z.string()).optional().default([])
}).passthrough();
const st_user_chats_FeedOrigin = _zod.z.object({
    type: _zod.z.string(),
    queryId: _zod.z.string().min(1)
}).passthrough();
const st_user_chats_CreateUserChatInteractionFromFeed = _zod.z.object({
    inputMessage: _zod.z.string().min(1),
    responseMessage: _zod.z.string().min(1),
    sources: _zod.z.array(st_user_chats_Source),
    origin: st_user_chats_FeedOrigin
}).passthrough();
const st_user_chats_TrendingOrigin = _zod.z.object({
    type: _zod.z.string()
}).passthrough();
const st_user_chats_CreateUserChatInteractionFromTrending = _zod.z.object({
    inputMessage: _zod.z.string().min(1),
    responseMessage: _zod.z.string().min(1),
    sources: _zod.z.array(st_user_chats_Source),
    origin: st_user_chats_TrendingOrigin
}).passthrough();
const st_user_chats_CreateUserChatWithoutUserId = _zod.z.object({
    name: _zod.z.string().min(1),
    interaction: _zod.z.union([
        st_user_chats_CreateUserChatInteractionFromFeed,
        st_user_chats_CreateUserChatInteractionFromTrending,
        _zod.z.null()
    ]).optional(),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_ChatInteractionType = _zod.z.enum([
    "trending",
    "feed",
    "user_message",
    "empty_message",
    "trending_prompt",
    "watchlist",
    "flow"
]);
const st_user_chats_ChatInteractionOrigin = _zod.z.object({
    type: st_user_chats_ChatInteractionType,
    queryId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_ChatInteractionScope = _zod.z.enum([
    "all",
    "filings",
    "transcripts",
    "news",
    "files",
    "market_intelligence",
    "earnings_calls",
    "quartr_pro",
    "market_narratives",
    "sentiment-attention",
    "job-analytics",
    "price",
    "estimates",
    "crunchbase",
    "knowledge-graph",
    "etf-holdings",
    "crypto_markets",
    "middle_eastern_markets",
    "financial_times",
    "expert_networks"
]);
const st_user_chats_Document = _zod.z.object({
    id: _zod.z.string(),
    fileName: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rawSize: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    uploadTs: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_TextBlock = _zod.z.object({
    type: _zod.z.literal("TEXT").default("TEXT"),
    value: _zod.z.string()
}).passthrough();
const st_user_chats_EngineAiBlock = _zod.z.object({
    type: _zod.z.literal("ENGINE").default("ENGINE"),
    answer: _zod.z.string(),
    explainer: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    widgetSpec: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    widgetSpecUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    isSuccessfulAnswer: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_RequestEntity = _zod.z.object({
    key: _zod.z.string(),
    name: _zod.z.string(),
    type: _zod.z.string()
}).passthrough();
const st_user_chats_TraceQuery = _zod.z.object({
    text: _zod.z.string(),
    filters: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_ChunkSentence = _zod.z.object({
    pnum: _zod.z.number().int(),
    snum: _zod.z.number().int()
}).passthrough();
const st_user_chats_BoundingBox = _zod.z.object({
    bottom: _zod.z.number(),
    left: _zod.z.number(),
    page: _zod.z.number().int(),
    right: _zod.z.number(),
    top: _zod.z.number()
}).passthrough();
const st_user_chats_TraceResultChunk = _zod.z.object({
    id: _zod.z.string(),
    cnum: _zod.z.number().int(),
    text: _zod.z.string(),
    sentences: _zod.z.array(st_user_chats_ChunkSentence),
    relevance: _zod.z.number(),
    boundingBoxes: _zod.z.union([
        _zod.z.array(st_user_chats_BoundingBox),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_TraceResultCQSStory = _zod.z.object({
    documentScope: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    language: _zod.z.string(),
    chunks: _zod.z.union([
        _zod.z.array(st_user_chats_TraceResultChunk),
        _zod.z.null()
    ]).optional(),
    srcKey: _zod.z.string(),
    srcName: _zod.z.string(),
    sourceRank: _zod.z.number().int().optional().default(10),
    ts: _zod.z.string(),
    contentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    documentType: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_AuditTraceCQSResult = _zod.z.object({
    type: _zod.z.string().optional().default("CQS"),
    values: _zod.z.array(st_user_chats_TraceResultCQSStory)
}).passthrough();
const st_user_chats_ExternalSourceAction = _zod.z.object({
    type: _zod.z.literal("EXTERNAL"),
    name: _zod.z.string(),
    hd: _zod.z.string(),
    url: _zod.z.string().min(1).max(2083).url(),
    faviconUrl: _zod.z.string().min(1).max(2083).url()
}).passthrough();
const st_user_chats_ExternalTraceResult = _zod.z.object({
    hd: _zod.z.string(),
    text: _zod.z.string(),
    action: st_user_chats_ExternalSourceAction,
    ts: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    metadata: _zod.z.union([
        _zod.z.record(_zod.z.union([
            _zod.z.string(),
            _zod.z.array(_zod.z.string())
        ])),
        _zod.z.null()
    ]).optional(),
    id: _zod.z.string()
}).passthrough();
const st_user_chats_AuditTraceExternalResult = _zod.z.object({
    type: _zod.z.string().optional().default("EXTERNAL"),
    values: _zod.z.array(st_user_chats_ExternalTraceResult)
}).passthrough();
const st_user_chats_AuditTraceEngineAIResult = _zod.z.object({
    type: _zod.z.string().default("ENGINE"),
    sqlQuery: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_chats_AuditTrace = _zod.z.object({
    query: st_user_chats_TraceQuery,
    results: _zod.z.array(_zod.z.union([
        st_user_chats_AuditTraceCQSResult,
        st_user_chats_AuditTraceExternalResult,
        st_user_chats_AuditTraceEngineAIResult
    ])),
    queryId: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_OriginSourceMetadata = _zod.z.object({
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    imageUrls: _zod.z.union([
        _zod.z.array(_zod.z.string().min(1).max(2083).url()),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_chats_OriginSourcesMetadata = _zod.z.record(st_user_chats_OriginSourceMetadata);
const st_user_chats_DocumentSourceAction = _zod.z.object({
    type: _zod.z.literal("DOCUMENT"),
    name: _zod.z.string(),
    hd: _zod.z.string(),
    id: _zod.z.string(),
    srcKey: _zod.z.string(),
    imageUrls: _zod.z.array(_zod.z.string().min(1).max(2083).url()).optional(),
    url: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    rpProviderId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_chats_EngineAiSourceAction = _zod.z.object({
    type: _zod.z.literal("ENGINE"),
    name: _zod.z.string(),
    srcKey: _zod.z.string(),
    faviconUrl: _zod.z.string().min(1).max(2083).url()
}).passthrough();
const st_user_chats_CollapsableBlock = _zod.z.object({
    type: _zod.z.literal("COLLAPSE"),
    title: _zod.z.string(),
    content: st_user_chats_TextBlock
}).passthrough();
const st_user_chats_ChatInteraction = _zod.z.object({
    origin: st_user_chats_ChatInteractionOrigin,
    inputMessage: _zod.z.string(),
    scope: _zod.z.union([
        st_user_chats_ChatInteractionScope,
        _zod.z.null()
    ]).optional(),
    effectiveScope: _zod.z.union([
        st_user_chats_ChatInteractionScope,
        _zod.z.null()
    ]).optional(),
    scopeDocuments: _zod.z.union([
        _zod.z.array(st_user_chats_Document),
        _zod.z.null()
    ]).optional(),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    responseBlock: _zod.z.union([
        _zod.z.discriminatedUnion("type", [
            st_user_chats_TextBlock,
            st_user_chats_EngineAiBlock
        ]),
        _zod.z.null()
    ]).optional(),
    responseBlocks: _zod.z.union([
        _zod.z.array(_zod.z.discriminatedUnion("type", [
            st_user_chats_TextBlock,
            st_user_chats_EngineAiBlock
        ])),
        _zod.z.null()
    ]).optional(),
    predictedScope: _zod.z.union([
        st_user_chats_ChatInteractionScope,
        _zod.z.null()
    ]).optional(),
    entities: _zod.z.union([
        _zod.z.array(st_user_chats_RequestEntity),
        _zod.z.null()
    ]).optional(),
    displayedMessage: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    interactionTimestamp: _zod.z.string(),
    auditTraces: _zod.z.union([
        _zod.z.array(st_user_chats_AuditTrace),
        _zod.z.null()
    ]).optional(),
    originSourcesMetadata: _zod.z.union([
        st_user_chats_OriginSourcesMetadata,
        _zod.z.null()
    ]).optional(),
    originSources: _zod.z.union([
        _zod.z.array(_zod.z.discriminatedUnion("type", [
            st_user_chats_DocumentSourceAction,
            st_user_chats_ExternalSourceAction,
            st_user_chats_EngineAiSourceAction
        ])),
        _zod.z.null()
    ]).optional(),
    auditBlocks: _zod.z.union([
        _zod.z.array(st_user_chats_CollapsableBlock),
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_user_chats_UserChatResponse = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    userId: _zod.z.string(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    isPublic: _zod.z.boolean().optional().default(false),
    interactions: _zod.z.array(st_user_chats_ChatInteraction)
}).passthrough();
const st_user_chats_NotFoundError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(404),
    message: _zod.z.string()
}).passthrough();
const st_user_chats_DeleteUserChatResponse = _zod.z.object({
    id: _zod.z.string()
}).passthrough();
const st_user_chats_UpdateUserChat = _zod.z.object({
    userId: _zod.z.string().min(1),
    name: _zod.z.string().min(1)
}).passthrough();
const st_user_chats_UserChatUpdatedResponse = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    userId: _zod.z.string(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_user_chats_UserChatShareRequest = _zod.z.object({
    public: _zod.z.boolean()
}).passthrough();
const st_user_chats_UserChatSharedResponse = _zod.z.object({
    id: _zod.z.string(),
    isPublic: _zod.z.boolean(),
    userId: _zod.z.string(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    scopeWatchlistId: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_UserQueryStatus = _zod.z.enum([
    "saved",
    "unsaved"
]);
const saveStatus = _zod.z.union([
    st_user_queries_UserQueryStatus,
    _zod.z.null()
]).optional();
const st_user_queries_UserQuerySharePermission = _zod.z.enum([
    "read",
    "undefined"
]);
const st_user_queries_UserQueryShareCompanyContext = _zod.z.object({
    organizationId: _zod.z.string(),
    permission: st_user_queries_UserQuerySharePermission
}).passthrough();
const st_user_queries_UserQueryShareUserContext = _zod.z.object({
    id: _zod.z.string(),
    permission: _zod.z.string()
}).passthrough();
const st_user_queries_UserQueryShare = _zod.z.object({
    company: st_user_queries_UserQueryShareCompanyContext,
    users: _zod.z.array(st_user_queries_UserQueryShareUserContext)
}).passthrough();
const st_user_queries_ScheduleDestinationType = _zod.z.enum([
    "slack",
    "email"
]);
const st_user_queries_SlackScheduleDestination = _zod.z.object({
    slackWorkspaceId: _zod.z.string().min(1),
    slackChannelId: _zod.z.string().min(1),
    slackChannelName: _zod.z.string().min(1)
}).passthrough();
const st_user_queries_EmailDestinationParams = _zod.z.object({
    emails: _zod.z.array(_zod.z.string())
}).passthrough();
const st_user_queries_Schedule = _zod.z.object({
    schedulerExpression: _zod.z.string(),
    timezone: _zod.z.string(),
    destination: st_user_queries_ScheduleDestinationType,
    destinationParams: _zod.z.union([
        st_user_queries_SlackScheduleDestination,
        st_user_queries_EmailDestinationParams
    ])
}).passthrough();
const st_user_queries_LightUserQueryResponse = _zod.z.object({
    id: _zod.z.string().min(1),
    name: _zod.z.string().min(1),
    owner: _zod.z.string().min(1),
    ownerUserId: _zod.z.string().min(1),
    saveStatus: st_user_queries_UserQueryStatus.optional(),
    lastExecuted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }).optional(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    pinned: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional(),
    pinIndex: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    ownerName: _zod.z.string(),
    shared: st_user_queries_UserQueryShare,
    schedules: _zod.z.union([
        _zod.z.array(st_user_queries_Schedule),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_ListObjectsResponse = _zod.z.object({
    results: _zod.z.array(st_user_queries_LightUserQueryResponse)
}).passthrough();
const st_user_queries_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_user_queries_SimilarityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("all"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("similarity")
}).passthrough();
const st_user_queries_ListOperationEnum = _zod.z.enum([
    "in",
    "all"
]);
const st_user_queries_KeywordExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("keyword")
}).passthrough();
const st_user_queries_EntityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("entity"),
    document: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_LanguageExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("language")
}).passthrough();
const st_user_queries_SourceExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("source")
}).passthrough();
const st_user_queries_RPTopicExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string().optional().default("rp_topic"),
    value: _zod.z.array(_zod.z.string()),
    operation: st_user_queries_ListOperationEnum.optional(),
    document: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_DateOperationEnum = _zod.z.literal("between");
const st_user_queries_DateInterval = _zod.z.enum([
    "today",
    "yesterday",
    "this_week",
    "last_week",
    "last_seven_days",
    "last_thirty_days",
    "last_ninety_days",
    "year_to_date",
    "last_twelve_months",
    "last_1_hours",
    "last_3_hours",
    "last_6_hours",
    "last_9_hours",
    "last_12_hours",
    "last_24_hours",
    "last_48_hours"
]);
const st_user_queries_DateIntervalExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    type: _zod.z.string().optional().default("date"),
    operation: st_user_queries_DateOperationEnum.optional(),
    value: _zod.z.union([
        st_user_queries_DateInterval,
        _zod.z.array(_zod.z.string())
    ])
}).passthrough();
const st_user_queries_TagsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("tags")
}).passthrough();
const st_user_queries_MacroCompaniesExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroOrganizationsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroConceptsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroPeopleExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroPlacesExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroProductsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_MacroTopicsExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string()).min(1),
    type: _zod.z.string()
}).passthrough();
const st_user_queries_DocumentExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("document")
}).passthrough();
const st_user_queries_SectionMetadataExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("section_metadata")
}).passthrough();
const st_user_queries_DocumentTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("document_type")
}).passthrough();
const st_user_queries_ReportingPeriodExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("reporting_period")
}).passthrough();
const st_user_queries_ReportingEntityExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: st_user_queries_ListOperationEnum.optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("reporting_entities")
}).passthrough();
const st_user_queries_SentimentRangeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    value: _zod.z.array(_zod.z.number().gte(-1).lte(1)).min(2).max(2),
    type: _zod.z.string().optional().default("sentiment_range")
}).passthrough();
const st_user_queries_RPDocumentSubtypeTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_subtype")
}).passthrough();
const st_user_queries_RPDocumentVersionExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_version")
}).passthrough();
const st_user_queries_RPDocumentTypeExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    operation: _zod.z.string().optional().default("in"),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_document_type")
}).passthrough();
const st_user_queries_RPProviderExpression = _zod.z.object({
    metadata: _zod.z.union([
        _zod.z.object({}).partial().passthrough(),
        _zod.z.null()
    ]).optional(),
    value: _zod.z.array(_zod.z.string().min(1)).min(1),
    type: _zod.z.string().optional().default("rp_provider")
}).passthrough();
const st_user_queries_OrExpression_Input = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.array(_zod.z.union([
            st_user_queries_SimilarityExpression,
            st_user_queries_KeywordExpression,
            st_user_queries_NotExpression_Input,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_AndExpression_Input,
            st_user_queries_OrExpression_Input,
            st_user_queries_SourceExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_MacroCompaniesExpression,
            st_user_queries_MacroOrganizationsExpression,
            st_user_queries_MacroConceptsExpression,
            st_user_queries_MacroPeopleExpression,
            st_user_queries_MacroPlacesExpression,
            st_user_queries_MacroProductsExpression,
            st_user_queries_MacroTopicsExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DocumentExpression,
            st_user_queries_SectionMetadataExpression,
            st_user_queries_DocumentTypeExpression,
            st_user_queries_ReportingPeriodExpression,
            st_user_queries_ReportingEntityExpression,
            st_user_queries_SentimentRangeExpression,
            st_user_queries_TagsExpression,
            st_user_queries_RPDocumentSubtypeTypeExpression,
            st_user_queries_RPDocumentVersionExpression,
            st_user_queries_RPDocumentTypeExpression,
            st_user_queries_RPProviderExpression
        ])),
        type: _zod.z.string().optional().default("or")
    }).passthrough());
const st_user_queries_AndExpression_Input = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        type: _zod.z.string().optional().default("and"),
        value: _zod.z.array(_zod.z.union([
            st_user_queries_SimilarityExpression,
            st_user_queries_KeywordExpression,
            st_user_queries_NotExpression_Input,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_AndExpression_Input,
            st_user_queries_OrExpression_Input,
            st_user_queries_SourceExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_MacroCompaniesExpression,
            st_user_queries_MacroOrganizationsExpression,
            st_user_queries_MacroConceptsExpression,
            st_user_queries_MacroPeopleExpression,
            st_user_queries_MacroPlacesExpression,
            st_user_queries_MacroProductsExpression,
            st_user_queries_MacroTopicsExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DocumentExpression,
            st_user_queries_SectionMetadataExpression,
            st_user_queries_DocumentTypeExpression,
            st_user_queries_ReportingPeriodExpression,
            st_user_queries_ReportingEntityExpression,
            st_user_queries_SentimentRangeExpression,
            st_user_queries_TagsExpression,
            st_user_queries_RPDocumentSubtypeTypeExpression,
            st_user_queries_RPDocumentVersionExpression,
            st_user_queries_RPDocumentTypeExpression,
            st_user_queries_RPProviderExpression
        ]))
    }).passthrough());
const st_user_queries_NotExpression_Input = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.union([
            st_user_queries_KeywordExpression,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_SourceExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_TagsExpression,
            st_user_queries_AndExpression_Input,
            st_user_queries_OrExpression_Input
        ]),
        type: _zod.z.string().optional().default("not")
    }).passthrough());
const st_user_queries_SentenceLabel = _zod.z.enum([
    "accepted",
    "rejected"
]);
const st_user_queries_InputSentence = _zod.z.object({
    text: _zod.z.string(),
    label: st_user_queries_SentenceLabel.optional(),
    metadata: _zod.z.object({}).partial().passthrough().optional()
}).passthrough();
const st_user_queries_Scope = _zod.z.enum([
    "all",
    "filings",
    "transcripts",
    "news",
    "files",
    "market_intelligence",
    "earnings_calls"
]);
const st_user_queries_SortEnum = _zod.z.enum([
    "relevance",
    "date",
    "date_asc"
]);
const st_user_queries_Ranking = _zod.z.enum([
    "stable",
    "experimental",
    "similarity"
]);
const st_user_queries_CQSSearchCursorPagination = _zod.z.object({
    limit: _zod.z.number().int().gt(0).lt(1001).default(100),
    cursor: _zod.z.number().int().gt(0).default(1)
}).partial().passthrough();
const st_user_queries_CQSSearchOffsetPagination = _zod.z.object({
    limit: _zod.z.number().int().gt(0).lt(1001).optional().default(100),
    offset: _zod.z.number().int().gte(0)
}).passthrough();
const st_user_queries_CQSClusteringParams = _zod.z.object({
    threshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]),
    clusterWeight: _zod.z.number().default(3),
    debug: _zod.z.boolean().default(false)
}).partial().passthrough();
const st_user_queries_SearchChain = _zod.z.enum([
    "deduplication",
    "clustering",
    "grouping",
    "clustering-rerank"
]);
const st_user_queries_RPXQuery_Input = _zod.z.object({
    // expression: z.discriminatedUnion("type", [
    //   st_user_queries_SimilarityExpression,
    //   st_user_queries_KeywordExpression,
    //   st_user_queries_NotExpression_Input,
    //   st_user_queries_EntityExpression,
    //   st_user_queries_LanguageExpression,
    //   st_user_queries_AndExpression_Input,
    //   st_user_queries_OrExpression_Input,
    //   st_user_queries_WatchlistExpression,
    //   st_user_queries_SourceExpression,
    //   st_user_queries_DateIntervalExpression,
    //   st_user_queries_MacroCompaniesExpression,
    //   st_user_queries_MacroOrganizationsExpression,
    //   st_user_queries_MacroConceptsExpression,
    //   st_user_queries_MacroPeopleExpression,
    //   st_user_queries_MacroPlacesExpression,
    //   st_user_queries_MacroProductsExpression,
    //   st_user_queries_MacroTopicsExpression,
    //   st_user_queries_RPTopicExpression,
    //   st_user_queries_DocumentExpression,
    //   st_user_queries_SectionMetadataExpression,
    //   st_user_queries_DocumentTypeExpression,
    //   st_user_queries_ReportingPeriodExpression,
    //   st_user_queries_ReportingEntityExpression,
    //   st_user_queries_SentimentRangeExpression,
    //   st_user_queries_TagsExpression,
    //   st_user_queries_RPDocumentSubtypeTypeExpression,
    //   st_user_queries_RPDocumentVersionExpression,
    //   st_user_queries_RPDocumentTypeExpression,
    //   st_user_queries_RPProviderExpression,
    // ]),
    expression: _zod.z.any(),
    sentences: _zod.z.array(st_user_queries_InputSentence).optional().default([]),
    scope: st_user_queries_Scope.optional(),
    sort: st_user_queries_SortEnum.optional(),
    ranking: st_user_queries_Ranking.optional(),
    debug: _zod.z.boolean().optional().default(false),
    pagination: _zod.z.union([
        st_user_queries_CQSSearchCursorPagination,
        st_user_queries_CQSSearchOffsetPagination
    ]).optional().default({
        limit: 10,
        cursor: 1
    }),
    date: _zod.z.union([
        _zod.z.array(_zod.z.unknown()),
        _zod.z.null()
    ]).optional(),
    clusteringParams: _zod.z.union([
        st_user_queries_CQSClusteringParams,
        _zod.z.null()
    ]).optional(),
    rerankThreshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    searchChain: _zod.z.union([
        st_user_queries_SearchChain,
        _zod.z.null()
    ]).optional().default("deduplication"),
    hybrid: _zod.z.boolean().optional().default(false),
    rerankFreshnessWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_Prompt = _zod.z.object({
    language: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    tone: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    userInstructions: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_queries_CreateUserQuery = _zod.z.object({
    name: _zod.z.string().min(1),
    organizationId: _zod.z.string().min(1),
    saveStatus: st_user_queries_UserQueryStatus.optional(),
    lastExecuted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    query: st_user_queries_RPXQuery_Input,
    promptProperties: _zod.z.union([
        st_user_queries_Prompt,
        _zod.z.null()
    ]).optional(),
    schedules: _zod.z.union([
        _zod.z.array(st_user_queries_Schedule),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_OrExpression_Output = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.array(_zod.z.union([
            st_user_queries_SimilarityExpression,
            st_user_queries_KeywordExpression,
            st_user_queries_NotExpression_Output,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_AndExpression_Output,
            st_user_queries_OrExpression_Output,
            st_user_queries_SourceExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_MacroCompaniesExpression,
            st_user_queries_MacroOrganizationsExpression,
            st_user_queries_MacroConceptsExpression,
            st_user_queries_MacroPeopleExpression,
            st_user_queries_MacroPlacesExpression,
            st_user_queries_MacroProductsExpression,
            st_user_queries_MacroTopicsExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DocumentExpression,
            st_user_queries_SectionMetadataExpression,
            st_user_queries_DocumentTypeExpression,
            st_user_queries_ReportingPeriodExpression,
            st_user_queries_ReportingEntityExpression,
            st_user_queries_SentimentRangeExpression,
            st_user_queries_TagsExpression,
            st_user_queries_RPDocumentSubtypeTypeExpression,
            st_user_queries_RPDocumentVersionExpression,
            st_user_queries_RPDocumentTypeExpression,
            st_user_queries_RPProviderExpression
        ])),
        type: _zod.z.string().optional().default("or")
    }).passthrough());
const st_user_queries_AndExpression_Output = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        type: _zod.z.string().optional().default("and"),
        value: _zod.z.array(_zod.z.union([
            st_user_queries_SimilarityExpression,
            st_user_queries_KeywordExpression,
            st_user_queries_NotExpression_Output,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_AndExpression_Output,
            st_user_queries_OrExpression_Output,
            st_user_queries_SourceExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_MacroCompaniesExpression,
            st_user_queries_MacroOrganizationsExpression,
            st_user_queries_MacroConceptsExpression,
            st_user_queries_MacroPeopleExpression,
            st_user_queries_MacroPlacesExpression,
            st_user_queries_MacroProductsExpression,
            st_user_queries_MacroTopicsExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DocumentExpression,
            st_user_queries_SectionMetadataExpression,
            st_user_queries_DocumentTypeExpression,
            st_user_queries_ReportingPeriodExpression,
            st_user_queries_ReportingEntityExpression,
            st_user_queries_SentimentRangeExpression,
            st_user_queries_TagsExpression,
            st_user_queries_RPDocumentSubtypeTypeExpression,
            st_user_queries_RPDocumentVersionExpression,
            st_user_queries_RPDocumentTypeExpression,
            st_user_queries_RPProviderExpression
        ]))
    }).passthrough());
const st_user_queries_NotExpression_Output = _zod.z.lazy(()=>_zod.z.object({
        metadata: _zod.z.union([
            _zod.z.object({}).partial().passthrough(),
            _zod.z.null()
        ]).optional(),
        value: _zod.z.union([
            st_user_queries_KeywordExpression,
            st_user_queries_EntityExpression,
            st_user_queries_LanguageExpression,
            st_user_queries_SourceExpression,
            st_user_queries_RPTopicExpression,
            st_user_queries_DateIntervalExpression,
            st_user_queries_TagsExpression,
            st_user_queries_AndExpression_Output,
            st_user_queries_OrExpression_Output
        ]),
        type: _zod.z.string().optional().default("not")
    }).passthrough());
const st_user_queries_RPXQuery_Output = _zod.z.object({
    // expression: z.discriminatedUnion("type", [
    //   st_user_queries_SimilarityExpression,
    //   st_user_queries_KeywordExpression,
    //   st_user_queries_NotExpression_Output,
    //   st_user_queries_EntityExpression,
    //   st_user_queries_LanguageExpression,
    //   st_user_queries_AndExpression_Output,
    //   st_user_queries_OrExpression_Output,
    //   st_user_queries_WatchlistExpression,
    //   st_user_queries_SourceExpression,
    //   st_user_queries_DateIntervalExpression,
    //   st_user_queries_MacroCompaniesExpression,
    //   st_user_queries_MacroOrganizationsExpression,
    //   st_user_queries_MacroConceptsExpression,
    //   st_user_queries_MacroPeopleExpression,
    //   st_user_queries_MacroPlacesExpression,
    //   st_user_queries_MacroProductsExpression,
    //   st_user_queries_MacroTopicsExpression,
    //   st_user_queries_RPTopicExpression,
    //   st_user_queries_DocumentExpression,
    //   st_user_queries_SectionMetadataExpression,
    //   st_user_queries_DocumentTypeExpression,
    //   st_user_queries_ReportingPeriodExpression,
    //   st_user_queries_ReportingEntityExpression,
    //   st_user_queries_SentimentRangeExpression,
    //   st_user_queries_TagsExpression,
    //   st_user_queries_RPDocumentSubtypeTypeExpression,
    //   st_user_queries_RPDocumentVersionExpression,
    //   st_user_queries_RPDocumentTypeExpression,
    //   st_user_queries_RPProviderExpression,
    // ]),
    expression: _zod.z.any(),
    sentences: _zod.z.array(st_user_queries_InputSentence).optional().default([]),
    scope: st_user_queries_Scope.optional(),
    sort: st_user_queries_SortEnum.optional(),
    ranking: st_user_queries_Ranking.optional(),
    debug: _zod.z.boolean().optional().default(false),
    pagination: _zod.z.union([
        st_user_queries_CQSSearchCursorPagination,
        st_user_queries_CQSSearchOffsetPagination
    ]).optional().default({
        limit: 10,
        cursor: 1
    }),
    date: _zod.z.union([
        _zod.z.array(_zod.z.unknown()),
        _zod.z.null()
    ]).optional(),
    clusteringParams: _zod.z.union([
        st_user_queries_CQSClusteringParams,
        _zod.z.null()
    ]).optional(),
    rerankThreshold: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    searchChain: _zod.z.union([
        st_user_queries_SearchChain,
        _zod.z.null()
    ]).optional().default("deduplication"),
    hybrid: _zod.z.boolean().optional().default(false),
    rerankFreshnessWeight: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_UserQueryResponse = _zod.z.object({
    id: _zod.z.string().min(1),
    name: _zod.z.string().min(1),
    owner: _zod.z.string().min(1),
    ownerUserId: _zod.z.string().min(1),
    saveStatus: st_user_queries_UserQueryStatus.optional(),
    lastExecuted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }).optional(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    pinned: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ]).optional(),
    pinIndex: _zod.z.union([
        _zod.z.number(),
        _zod.z.null()
    ]).optional(),
    ownerName: _zod.z.string(),
    shared: st_user_queries_UserQueryShare,
    schedules: _zod.z.union([
        _zod.z.array(st_user_queries_Schedule),
        _zod.z.null()
    ]).optional(),
    query: st_user_queries_RPXQuery_Output,
    promptProperties: _zod.z.union([
        st_user_queries_Prompt,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_DeleteObjectResponse = _zod.z.object({
    id: _zod.z.string()
}).passthrough();
const st_user_queries_UpdateUserQuery = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    organizationId: _zod.z.string().min(1),
    saveStatus: _zod.z.union([
        st_user_queries_UserQueryStatus,
        _zod.z.null()
    ]).optional(),
    lastExecuted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    query: _zod.z.union([
        st_user_queries_RPXQuery_Input,
        _zod.z.null()
    ]).optional(),
    promptProperties: _zod.z.union([
        st_user_queries_Prompt,
        _zod.z.null()
    ]).optional(),
    schedules: _zod.z.union([
        _zod.z.array(st_user_queries_Schedule),
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_queries_BulkDeleteObjectsParams = _zod.z.array(_zod.z.string());
const st_user_queries_SetPinnedItemsParams = _zod.z.array(_zod.z.string());
const st_user_queries_UserPinnedQueriesResponse = _zod.z.object({
    userId: _zod.z.string(),
    items: _zod.z.array(_zod.z.string())
}).passthrough();
const shared = _zod.z.union([
    _zod.z.enum([
        "company",
        "public",
        "all"
    ]),
    _zod.z.null()
]).optional();
const st_user_watchlists_GlobalWatchlistFilter = _zod.z.enum([
    "thematic",
    "community"
]);
const globalType = _zod.z.union([
    st_user_watchlists_GlobalWatchlistFilter,
    _zod.z.null()
]).optional();
const st_user_watchlists_GlobalWatchlistStatus = _zod.z.enum([
    "private",
    "draft",
    "published",
    "archived"
]);
const globalStatus = _zod.z.union([
    st_user_watchlists_GlobalWatchlistStatus,
    _zod.z.null()
]).optional();
const st_user_watchlists_WatchlistSharePermission = _zod.z.enum([
    "read",
    "undefined"
]);
const st_user_watchlists_WatchlistShareCompanyContextResponse = _zod.z.object({
    organizationId: _zod.z.string(),
    permission: st_user_watchlists_WatchlistSharePermission
}).passthrough();
const st_user_watchlists_WatchlistShareUserContext = _zod.z.object({
    id: _zod.z.string(),
    permission: _zod.z.string()
}).passthrough();
const st_user_watchlists_WatchlistShareResponse_Input = _zod.z.object({
    company: st_user_watchlists_WatchlistShareCompanyContextResponse,
    users: _zod.z.array(st_user_watchlists_WatchlistShareUserContext),
    isPublic: _zod.z.boolean().optional().default(false)
}).passthrough();
const st_user_watchlists_WatchlistAuthorData = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    avatarUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_GlobalWatchlistType = _zod.z.enum([
    "thematic",
    "community"
]);
const st_user_watchlists_GlobalWatchlistData = _zod.z.object({
    author: _zod.z.union([
        st_user_watchlists_WatchlistAuthorData,
        _zod.z.null()
    ]),
    isFeatured: _zod.z.boolean().default(false),
    status: st_user_watchlists_GlobalWatchlistStatus,
    statusLastUpdated: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    type: st_user_watchlists_GlobalWatchlistType,
    motivation: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_LightWatchlistResponse_Input = _zod.z.object({
    id: _zod.z.string(),
    user_id: _zod.z.string(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }).optional(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    lastInteracted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    ownerName: _zod.z.string(),
    ownerImageUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    shared: st_user_watchlists_WatchlistShareResponse_Input,
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    imageUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    global: _zod.z.union([
        st_user_watchlists_GlobalWatchlistData,
        _zod.z.null()
    ]).optional(),
    isFavorite: _zod.z.boolean().optional().default(false),
    favoritesCount: _zod.z.number().int().optional().default(0)
}).passthrough();
const st_user_watchlists_ListObjectsResponse_Input = _zod.z.object({
    results: _zod.z.array(st_user_watchlists_LightWatchlistResponse_Input)
}).passthrough();
const st_user_watchlists_ErrorResponse = _zod.z.object({
    statusCode: _zod.z.number().int(),
    message: _zod.z.string()
}).passthrough();
const st_user_watchlists_WatchlistUpdateAuthorData = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_GlobalWatchlistCreateData = _zod.z.object({
    author: _zod.z.union([
        st_user_watchlists_WatchlistUpdateAuthorData,
        _zod.z.null()
    ]),
    type: st_user_watchlists_GlobalWatchlistType,
    motivation: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_CreateWatchlistParams = _zod.z.object({
    name: _zod.z.string(),
    items: _zod.z.array(_zod.z.string()),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    global: _zod.z.union([
        st_user_watchlists_GlobalWatchlistCreateData,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_watchlists_ObjPermissions = _zod.z.object({
    editable: _zod.z.boolean()
}).passthrough();
const st_user_watchlists_WatchlistResponse_Input = _zod.z.object({
    id: _zod.z.string(),
    user_id: _zod.z.string(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }).optional(),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    }),
    lastInteracted: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    name: _zod.z.string(),
    ownerName: _zod.z.string(),
    ownerImageUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    shared: st_user_watchlists_WatchlistShareResponse_Input,
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    imageUrl: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    global: _zod.z.union([
        st_user_watchlists_GlobalWatchlistData,
        _zod.z.null()
    ]).optional(),
    isFavorite: _zod.z.boolean().optional().default(false),
    favoritesCount: _zod.z.number().int().optional().default(0),
    items: _zod.z.array(_zod.z.string()).optional().default([]),
    permissions: st_user_watchlists_ObjPermissions
}).passthrough();
const st_user_watchlists_DeleteWatchlistResponse = _zod.z.object({
    id: _zod.z.string()
}).passthrough();
const st_user_watchlists_GlobalWatchlistUpdateData = _zod.z.object({
    author: _zod.z.union([
        st_user_watchlists_WatchlistUpdateAuthorData,
        _zod.z.null()
    ]),
    isFeatured: _zod.z.boolean().default(false),
    status: _zod.z.union([
        st_user_watchlists_GlobalWatchlistStatus,
        _zod.z.null()
    ]),
    type: _zod.z.union([
        st_user_watchlists_GlobalWatchlistType,
        _zod.z.null()
    ]),
    motivation: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_PutWatchlistParams = _zod.z.object({
    name: _zod.z.string(),
    items: _zod.z.array(_zod.z.string()),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]).optional(),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]).optional(),
    global: _zod.z.union([
        st_user_watchlists_GlobalWatchlistUpdateData,
        _zod.z.null()
    ]).optional()
}).passthrough();
const st_user_watchlists_PatchWatchlistParams = _zod.z.object({
    name: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    items: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    description: _zod.z.union([
        _zod.z.string(),
        _zod.z.null()
    ]),
    category: _zod.z.union([
        _zod.z.array(_zod.z.string()),
        _zod.z.null()
    ]),
    global: _zod.z.union([
        st_user_watchlists_GlobalWatchlistUpdateData,
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_BulkDeleteWatchlistParams = _zod.z.array(_zod.z.string());
const st_user_watchlists_BulkDeleteWatchlistResponse = _zod.z.object({
    ids: _zod.z.array(_zod.z.string())
}).passthrough();
const st_user_watchlists_ListWatchlistsParentsParams = _zod.z.array(_zod.z.string());
const st_user_watchlists_WatchlistParent = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    type: _zod.z.string()
}).passthrough();
const st_user_watchlists_ListWatchlistParentsResponse = _zod.z.record(_zod.z.array(st_user_watchlists_WatchlistParent));
const st_user_watchlists_WatchlistItemsUpdateRequest = _zod.z.object({
    items: _zod.z.array(_zod.z.string())
}).passthrough();
const st_user_watchlists_WatchlistShareCompanyContextRequest = _zod.z.object({
    permission: st_user_watchlists_WatchlistSharePermission
}).passthrough();
const st_user_watchlists_WatchlistShareRequest = _zod.z.object({
    company: _zod.z.union([
        st_user_watchlists_WatchlistShareCompanyContextRequest,
        _zod.z.null()
    ]),
    users: _zod.z.union([
        _zod.z.array(st_user_watchlists_WatchlistShareUserContext),
        _zod.z.null()
    ]),
    isPublic: _zod.z.union([
        _zod.z.boolean(),
        _zod.z.null()
    ])
}).partial().passthrough();
const st_user_watchlists_GeneratePresignedUrlResponse = _zod.z.object({
    url: _zod.z.string(),
    key: _zod.z.string()
}).passthrough();
const st_user_watchlists_UnAuthorisedWatchlistAccessError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(403),
    errorCode: _zod.z.string().optional().default("WATCHLIST-FORBIDDEN"),
    message: _zod.z.string().optional().default("You do not have permission to perform this action on watchlist {watchlist_id}"),
    requestId: _zod.z.string()
}).passthrough();
const st_user_watchlists_WatchlistNotFoundError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(404),
    errorCode: _zod.z.string().optional().default("WATCHLIST-NOT_FOUND"),
    message: _zod.z.string().optional().default("Watchlist {watchlist_id} not found"),
    requestId: _zod.z.string()
}).passthrough();
const st_user_watchlists_DeleteAssetResponse = _zod.z.object({
    message: _zod.z.string(),
    deletedAt: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_user_watchlists_ResourceNotFoundError = _zod.z.object({
    statusCode: _zod.z.number().int().optional().default(404),
    errorCode: _zod.z.string().optional().default("[RESOURCE]-NOT_FOUND"),
    message: _zod.z.string().optional().default("Resource not found"),
    requestId: _zod.z.string()
}).passthrough();
const st_user_workflows_WorkflowResponse = _zod.z.object({
    id: _zod.z.string(),
    name: _zod.z.string(),
    userId: _zod.z.string(),
    dateCreated: _zod.z.string().datetime({
        offset: true
    }),
    lastUpdated: _zod.z.string().datetime({
        offset: true
    })
}).passthrough();
const st_user_workflows_WorkflowListResponse = _zod.z.object({
    userId: _zod.z.string(),
    workflows: _zod.z.array(st_user_workflows_WorkflowResponse)
}).passthrough();
const schemas = {
    st_agents_BaseFilter_str_,
    st_agents_DateRange,
    st_agents_SentimentPolarity,
    st_agents_DocumentIdFilter,
    st_agents_TranscriptSubtype,
    st_agents_DocumentTranscriptFilter,
    st_agents_FilingSubtype,
    st_agents_DocumentFilingFilter,
    st_agents_DocumentNewsFilter,
    st_agents_DocumentTranscriptPresentationFilter,
    st_agents_ProviderFilter,
    st_agents_SourceFilter,
    st_agents_DocumentUserFileFilter,
    st_agents_DocTypeFilter,
    st_agents_ContentFilter,
    st_agents_QueryFilters,
    st_agents_SearchToolConfig,
    st_agents_FetchUrlToolConfig,
    st_agents_CompanyTearsheetToolConfig,
    st_agents_ReflectToolConfig,
    st_agents_AgentExecuteRequest,
    st_agents_ActionWSResponse,
    st_agents_ThinkingWSResponse,
    st_agents_AnswerWSResponse,
    st_agents_ErrorWSResponse,
    st_agents_TraceQuery,
    st_agents_ChunkSentence,
    st_agents_BoundingBox,
    st_agents_TraceResultChunk,
    st_agents_TraceResultCQSStory,
    st_agents_AuditTraceCQSResult,
    st_agents_ExternalSourceAction,
    st_agents_ExternalTraceResult,
    st_agents_AuditTraceExternalResult,
    st_agents_AuditTraceEngineAIResult,
    st_agents_SearchAuditV1,
    st_agents_MarkdownAuditV1,
    st_agents_BaseToolAuditTrace,
    st_agents_ToolAuditWSResponse,
    st_agents_CompleteWSResponse,
    st_agents_ErrorResponse,
    st_api_keys_GetApiKey,
    st_api_keys_BadRequestError,
    st_api_keys_CreateApiKey,
    st_api_keys_CreatedApiKey,
    st_api_keys_ErrorResponse,
    st_api_keys_KeyEnabled,
    st_api_keys_KeyDisabled,
    st_api_keys_KeyDeleted,
    query,
    limit,
    st_autosuggest_vespa_AutosuggestResult,
    st_autosuggest_vespa_AutosuggestFacet,
    st_autosuggest_vespa_AutosuggestFacets,
    st_autosuggest_vespa_AutosuggestResponse,
    st_autosuggest_vespa_BadRequestError,
    st_autosuggest_vespa_UnauthorizedResponse,
    st_autosuggest_vespa_InternalServerResponse,
    st_autosuggest_vespa_AutosuggestFacetQuery,
    st_autosuggest_vespa_GroupingDetails,
    st_autosuggest_vespa_WatchlistAutosuggestRequest,
    st_autosuggest_vespa_AutosuggestRequest,
    st_autosuggest_vespa_AutosuggestBatchUploadRequest,
    st_autosuggest_vespa_CompanyInfo,
    st_autosuggest_vespa_AutosuggestEntitiesMapped,
    st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input,
    st_autosuggest_vespa_ErrorClientResponse,
    st_autosuggest_vespa_RetrievalDetails,
    st_autosuggest_vespa_RankingDetails,
    st_autosuggest_vespa_VespaRequestDetails,
    st_autosuggest_vespa_ContentOwner,
    st_autosuggest_vespa_PrivateWatchlistAutosuggestRequest,
    st_autosuggest_vespa_PrivateAutosuggestRequest,
    st_autosuggest_vespa_PrivateAutosuggestBatchUploadRequest,
    packageIds,
    sourceIds,
    entitled,
    st_bff_content_catalog_PaginationMetadata,
    st_bff_content_catalog_SourceModel,
    st_bff_content_catalog_GenericPaginatedResponse_SourceModel_,
    st_bff_content_catalog_ErrorResponse,
    st_bff_content_catalog_ContentPackageModel,
    st_bff_content_catalog_GenericPaginatedResponse_ContentPackageModel_,
    st_bff_data_tools_BFFRequest,
    st_bff_data_tools_QuoteToolData,
    st_bff_data_tools_QuoteDataToolResponse,
    st_bff_data_tools_UpstreamTooManyRequests,
    st_bff_data_tools_ErrorResponse,
    st_bff_data_tools_UpstreamFailedError,
    st_bff_data_tools_DBConnectionError,
    st_bff_data_tools_UpstreamTimeoutError,
    st_bff_data_tools_ChangeToolData,
    st_bff_data_tools_ChangeDataToolResponse,
    st_bff_data_tools_EarningsSurpriseData,
    st_bff_data_tools_EarningsSurpriseDataToolResponse,
    st_bff_data_tools_RecommendationConsensus,
    st_bff_data_tools_AnalystToolData,
    st_bff_data_tools_AnalystDataToolResponse,
    st_bff_data_tools_PriceTargetToolData,
    st_bff_data_tools_PriceTargetDataToolResponse,
    st_bff_data_tools_SentimentBFFToolData,
    st_bff_data_tools_SentimentBFFResponse,
    st_bff_data_tools_IncomeStatementBFFToolData,
    st_bff_data_tools_IncomeStatementBFFResponse,
    st_bff_data_tools_CashFlowStatementBFFToolData,
    st_bff_data_tools_CashFlowStatementBFFResponse,
    st_bff_data_tools_BalanceStatementBFFToolData,
    st_bff_data_tools_BalanceStatementBFFResponse,
    st_bff_data_tools_KeyMetricsToolData,
    st_bff_data_tools_KeyMetricsDataToolResponse,
    st_bff_data_tools_RatiosToolData,
    st_bff_data_tools_RatiosDataToolResponse,
    st_bff_data_tools_CurrencyToolData,
    st_bff_data_tools_CurrencyDataToolResponse,
    st_bff_data_tools_PlusScores,
    st_bff_data_tools_PerformanceScores,
    st_bff_data_tools_ESGScoreData,
    st_bff_data_tools_ESGScoreDataToolResponse,
    st_bff_data_tools_CustomDataViewColumn,
    st_bff_data_tools_CustomDataViewResponse,
    st_bff_data_tools_CustomDataViewListResponse,
    st_bff_data_tools_CreateCustomDataViewRequest,
    st_bff_data_tools_UpdateCustomDataViewRequest,
    st_briefs_DeliveryDestination,
    st_briefs_WeekDay,
    st_briefs_Schedule,
    st_briefs_BriefConfigResponse_Input,
    st_briefs_ListBriefConfigsResponse_Input,
    st_briefs_ErrorResponse,
    st_briefs_BriefConfigPayload,
    st_briefs_BriefReportEntityInfo,
    st_briefs_SingleEntityReport,
    st_briefs_ChunkHighlight,
    st_briefs_SourceReference,
    st_briefs_ReportSources_Input,
    st_briefs_BriefReportResponse_Input,
    st_briefs_LatestBriefReportResponse_Input,
    st_briefs_ListBriefReportsResponse_Input,
    st_cqs_SimilarityExpression,
    st_cqs_ListOperationEnum,
    st_cqs_KeywordExpression,
    st_cqs_EntityExpression,
    st_cqs_LanguageExpression,
    st_cqs_SourceExpression,
    st_cqs_RPTopicExpression,
    st_cqs_DateOperationEnum,
    st_cqs_DateInterval,
    st_cqs_DateIntervalExpression,
    st_cqs_TagsExpression,
    st_cqs_MacroCompaniesExpression,
    st_cqs_MacroOrganizationsExpression,
    st_cqs_MacroConceptsExpression,
    st_cqs_MacroPeopleExpression,
    st_cqs_MacroPlacesExpression,
    st_cqs_MacroProductsExpression,
    st_cqs_MacroTopicsExpression,
    st_cqs_DocumentExpression,
    st_cqs_SectionMetadataExpression,
    st_cqs_DocumentTypeExpression,
    st_cqs_ReportingPeriodExpression,
    st_cqs_ReportingEntityExpression,
    st_cqs_SentimentRangeExpression,
    st_cqs_RPDocumentSubtypeTypeExpression,
    st_cqs_RPDocumentVersionExpression,
    st_cqs_RPDocumentTypeExpression,
    st_cqs_RPProviderExpression,
    st_cqs_OrExpression,
    st_cqs_AndExpression,
    st_cqs_NotExpression,
    st_cqs_SentenceLabel,
    st_cqs_InputSentence,
    st_cqs_Scope,
    st_cqs_SortEnum,
    st_cqs_Ranking,
    st_cqs_CQSSearchCursorPagination,
    st_cqs_CQSSearchOffsetPagination,
    st_cqs_CQSClusteringParams,
    st_cqs_SearchChain,
    st_cqs_RPXQuery,
    st_cqs_VespaCoverageMetrics,
    st_cqs_VespaTimeMetrics,
    st_cqs_QueryRelationship,
    st_cqs_DiscoveryPanelItem,
    st_cqs_DiscoveryPanelGroupResponse,
    st_cqs_BadRequestError,
    st_cqs_EntityCoordinate,
    st_cqs_Sentence,
    st_cqs_ChunkSentence,
    st_cqs_BoundingBox,
    st_cqs_Chunk,
    st_cqs_ClusterSummary,
    st_cqs_Story,
    st_cqs_ClusterGeneralMetrics,
    st_cqs_TrainingStatistics,
    st_cqs_SearchResponseDetection,
    st_cqs_SearchResponse,
    st_cqs_Entity,
    st_cqs_Reporting,
    st_cqs_Period,
    st_cqs_QueryMetadata,
    st_cqs_Body_annotate_query_cqs_annotate_query_post,
    timestamp_utc,
    st_cqs_Response,
    st_cqs_RankingResponse,
    st_cqs_LanguageResponse,
    st_cqs_LanguagesListResponse,
    st_cqs_SuggestionTypes,
    st_cqs_SuggestionItem,
    st_cqs_DiscoveryPanelItemsByIdsResponse,
    st_cqs_IsinValues,
    st_cqs_CusipValues,
    st_cqs_SedolValues,
    st_cqs_ListingValues,
    st_documents_SimplifiedSource,
    st_documents_SimplifiedTimestampsUTC,
    st_documents_SimplifiedMetadata,
    st_documents_SimplifiedDocument,
    st_documents_ContentStats,
    st_documents_TextTypeEnum,
    st_documents_NormalizedCoordinates,
    st_documents_MarkersScript,
    st_documents_Markers,
    st_documents_FactsetTranscriptText,
    st_documents_SecAttributesText,
    st_documents_Section,
    st_documents_Sentence,
    st_documents_TextEvent,
    st_documents_TextEntity,
    st_documents_TextBlock,
    st_documents_TableCellType,
    st_documents_ListType,
    st_documents_ListEntry,
    st_documents_ListBlock,
    st_documents_TableCell,
    st_documents_TableRow,
    st_documents_TableBlock,
    st_documents_Content,
    st_documents_RecommendationEnum,
    st_documents_AnalyticDocument,
    st_documents_RoleEvent,
    st_documents_AnalyticEvent,
    st_documents_AnalyticEntity,
    st_documents_Analytic,
    st_documents_SdkRpjson,
    st_documents_Source,
    st_documents_TimestampsUTC,
    st_documents_RevisionMetadata,
    st_documents_CollectionMetadata,
    st_documents_Metadata,
    st_documents_Document,
    st_documents_SoftwareVersions,
    st_documents_ExtractionStageProfiling,
    st_documents_Profiling,
    st_documents_Rpjson,
    st_documents_PresignedUrlRpjson,
    st_documents_ErrorResponse,
    st_documents_VespaCollectionDocument,
    st_documents_VespaEntity,
    st_documents_VespaCollectionResponse,
    st_documents_DataToolsApiRequest,
    st_documents_QuarterEntityRecord,
    st_documents_DataToolsApiResponse,
    st_event_tracker_UserEvent,
    st_event_tracker_BadRequestError,
    st_finances_FinanceRequest,
    st_finances_FullQuote,
    st_finances_FullStockPriceChange,
    st_finances_PossibleFinancialInfo,
    st_finances_FinanceResponse,
    st_finances_UpstreamTooManyRequests,
    st_finances_ErrorResponse,
    st_finances_UpstreamFailedError,
    st_finances_DBConnectionError,
    st_internal_search_api_FilterScope,
    st_internal_search_api_SearchEntity,
    st_internal_search_api_EntityFilter,
    st_internal_search_api_BaseFilterItem,
    st_internal_search_api_EventFilter,
    st_internal_search_api_DateRange,
    st_internal_search_api_SentimentPolarity,
    st_internal_search_api_DocumentIdFilter,
    st_internal_search_api_TranscriptSubtype,
    st_internal_search_api_DocumentTranscriptFilter,
    st_internal_search_api_FilingSubtype,
    st_internal_search_api_DocumentFilingFilter,
    st_internal_search_api_DocumentNewsFilter,
    st_internal_search_api_DocumentTranscriptPresentationFilter,
    st_internal_search_api_ProviderFilter,
    st_internal_search_api_SourceFilter,
    st_internal_search_api_DocumentUserFileFilter,
    st_internal_search_api_DocTypeFilter,
    st_internal_search_api_PackageIdFilter,
    st_internal_search_api_ContentFilter,
    st_internal_search_api_KeywordFilter,
    st_internal_search_api_PackageFilter,
    st_internal_search_api_ReportingPeriod,
    st_internal_search_api_QueryFilters,
    st_internal_search_api_SearchType,
    st_internal_search_api_SortBy,
    st_internal_search_api_RelevanceRanking,
    st_internal_search_api_SearchQuery,
    st_internal_search_api_ProductType,
    st_internal_search_api_SwitchEntitlement,
    st_internal_search_api_EntitlementLimitTarget,
    st_internal_search_api_MaxValueEntitlement,
    st_internal_search_api_UserQuotaV2,
    st_internal_search_api_OrganizationQuotaV2,
    st_internal_search_api_User,
    st_internal_search_api_SearchRequest,
    st_internal_search_api_ChunkSentence,
    st_internal_search_api_BoundingBox,
    st_internal_search_api_VespaChunk,
    st_internal_search_api_VespaDocument,
    st_internal_search_api_SerpResult,
    st_internal_search_api_VespaTimeMetrics,
    st_internal_search_api_VespaCoverageMetrics,
    st_internal_search_api_VespaResponse,
    st_internal_search_api_SearchResult,
    st_internal_search_api_BadRequestError,
    st_internal_search_api_UnauthorizedResponse,
    st_internal_search_api_InternalServerResponse,
    st_internal_search_api_ComentionsSearchQuery,
    st_internal_search_api_ComentionsSearchRequest,
    st_internal_search_api_ComentionsItemResponse,
    st_internal_search_api_ComentionsGroupResponse,
    st_internal_search_api_VolumeResponse,
    st_llm_chat_ChatInteractionScope,
    st_llm_chat_Document,
    st_llm_chat_ChatInteractionType,
    st_llm_chat_RequestEntity,
    st_llm_chat_RequestTimeRange,
    st_llm_chat_FlowType,
    st_llm_chat_RequestFiles,
    st_llm_chat_RequestWatchlists,
    st_llm_chat_DeviceInfoTracking,
    st_llm_chat_AppInfoTracking,
    st_llm_chat_DeviceNetworkInfoTracking,
    st_llm_chat_DeviceOSInfoTracking,
    st_llm_chat_RequestTrackingInfo,
    st_llm_chat_ChatWithMemoryRequest,
    st_llm_chat_ChatWithMemoryUpdateLastRequest,
    websocket_websocket__post_Body,
    st_llm_chat_EngineAiBlock,
    st_llm_chat_SummaryNextBlockResponse,
    st_llm_chat_QuotaUsage,
    st_llm_chat_SummaryCompletionResponse,
    st_llm_chat_DocumentSourceAction,
    st_llm_chat_ExternalSourceAction,
    st_llm_chat_EngineAiSourceAction,
    st_llm_chat_OriginSourceMetadata,
    st_llm_chat_OriginSourcesMetadata,
    st_llm_chat_SummarySourcesResponse,
    st_llm_chat_TraceQuery,
    st_llm_chat_ChunkSentence,
    st_llm_chat_BoundingBox,
    st_llm_chat_TraceResultChunk,
    st_llm_chat_TraceResultCQSStory,
    st_llm_chat_AuditTraceCQSResult,
    st_llm_chat_ExternalTraceResult,
    st_llm_chat_AuditTraceExternalResult,
    st_llm_chat_AuditTraceEngineAIResult,
    st_llm_chat_AuditTrace,
    st_llm_chat_AuditTraceResponse,
    st_llm_chat_ProfilingResponse,
    st_llm_chat_StatusInfoResponse,
    st_llm_chat_QueryIdentifier,
    st_llm_chat_StatusQueryResponse,
    st_llm_chat_StatusResetResponse,
    st_llm_chat_StatusSourcesFinishedResponse,
    st_llm_chat_ErrorResponse,
    st_llm_trending_get_TrendingRequestType,
    type,
    st_llm_trending_get_LambdaCookie,
    st_llm_trending_get_LambdaResponse,
    st_llm_trending_get_LambdaBadRequestError,
    st_private_content_StatusOptions,
    status,
    st_private_content_SortByOptions,
    sort_by,
    st_private_content_SortDirOptions,
    sort_dir,
    st_private_content_OwnershipOptions,
    ownership,
    st_private_content_OwnerData,
    st_private_content_ErrorResponse,
    st_private_content_EmailConfigFilterResponse,
    st_private_content_EmailConfigResponse,
    st_private_content_ListEmailConfigsResponse,
    st_private_content_EmailConfigFilterPayload,
    st_private_content_EmailConfigPayload,
    st_private_content_FileResponse,
    st_private_content_ListFilesResponse,
    st_private_content_PrivateContentUrlResponse,
    st_profiles_StatusEnum,
    st_profiles_QuotaStatus,
    st_profiles_ErrorResponse,
    st_profiles_OrganizationQuotaV2,
    st_profiles_OrganizationConsumed,
    st_profiles_FeatureAccessPolicy,
    st_profiles_ProductType,
    st_profiles_SwitchEntitlementResponse,
    st_profiles_EntitlementLimitTarget,
    st_profiles_MaxValueEntitlementResponse,
    st_profiles_MyEntitlementsResponse,
    st_profiles_UserQuotaV2,
    st_profiles_UserConsumed,
    st_profiles_SubscriptionStatus,
    st_profiles_SusbscriptionFrequency,
    st_profiles_SubscriptionSource,
    st_profiles_SubscriptionModificationStatus,
    st_profiles_SubscriptionModification,
    st_profiles_MyProfileResponse,
    st_profiles_UpdateSubscriptionModificationRequest,
    st_profiles_FullUserProfileResponse,
    st_profiles_SwitchEntitlement,
    st_profiles_MaxValueEntitlement,
    st_profiles_FullOrganizationProfileResponse,
    st_profiles_UpdateSubscriptionModification,
    st_profiles_UpdateOrganizationProfile,
    st_profiles_OrganizationProfile,
    st_profiles_ContentAccessPolicy,
    st_profiles_ContentAccessPoliciesResponse,
    st_profiles_UserOnboardingFeedback,
    st_profiles_UserSalesRequest,
    st_subscriptions_dispatcher_BadRequestError,
    st_subscriptions_CheckoutResponse,
    st_subscriptions_BadRequestError,
    st_subscriptions_PlanFrequency,
    st_subscriptions_PlanCurrency,
    st_subscriptions_GenerateCheckoutUrlParamsRequest,
    st_subscriptions_CustomerPortal,
    st_subscriptions_NotFoundError,
    st_user_chats_ListUserChatsRequest,
    st_user_chats_LightUserChatResponse,
    st_user_chats_ListUserChatResponse,
    st_user_chats_PaginatedListUserChatResponse,
    st_user_chats_BadRequestError,
    st_user_chats_Source,
    st_user_chats_FeedOrigin,
    st_user_chats_CreateUserChatInteractionFromFeed,
    st_user_chats_TrendingOrigin,
    st_user_chats_CreateUserChatInteractionFromTrending,
    st_user_chats_CreateUserChatWithoutUserId,
    st_user_chats_ChatInteractionType,
    st_user_chats_ChatInteractionOrigin,
    st_user_chats_ChatInteractionScope,
    st_user_chats_Document,
    st_user_chats_TextBlock,
    st_user_chats_EngineAiBlock,
    st_user_chats_RequestEntity,
    st_user_chats_TraceQuery,
    st_user_chats_ChunkSentence,
    st_user_chats_BoundingBox,
    st_user_chats_TraceResultChunk,
    st_user_chats_TraceResultCQSStory,
    st_user_chats_AuditTraceCQSResult,
    st_user_chats_ExternalSourceAction,
    st_user_chats_ExternalTraceResult,
    st_user_chats_AuditTraceExternalResult,
    st_user_chats_AuditTraceEngineAIResult,
    st_user_chats_AuditTrace,
    st_user_chats_OriginSourceMetadata,
    st_user_chats_OriginSourcesMetadata,
    st_user_chats_DocumentSourceAction,
    st_user_chats_EngineAiSourceAction,
    st_user_chats_CollapsableBlock,
    st_user_chats_ChatInteraction,
    st_user_chats_UserChatResponse,
    st_user_chats_NotFoundError,
    st_user_chats_DeleteUserChatResponse,
    st_user_chats_UpdateUserChat,
    st_user_chats_UserChatUpdatedResponse,
    st_user_chats_UserChatShareRequest,
    st_user_chats_UserChatSharedResponse,
    st_user_queries_UserQueryStatus,
    saveStatus,
    st_user_queries_UserQuerySharePermission,
    st_user_queries_UserQueryShareCompanyContext,
    st_user_queries_UserQueryShareUserContext,
    st_user_queries_UserQueryShare,
    st_user_queries_ScheduleDestinationType,
    st_user_queries_SlackScheduleDestination,
    st_user_queries_EmailDestinationParams,
    st_user_queries_Schedule,
    st_user_queries_LightUserQueryResponse,
    st_user_queries_ListObjectsResponse,
    st_user_queries_ErrorResponse,
    st_user_queries_SimilarityExpression,
    st_user_queries_ListOperationEnum,
    st_user_queries_KeywordExpression,
    st_user_queries_EntityExpression,
    st_user_queries_LanguageExpression,
    st_user_queries_SourceExpression,
    st_user_queries_RPTopicExpression,
    st_user_queries_DateOperationEnum,
    st_user_queries_DateInterval,
    st_user_queries_DateIntervalExpression,
    st_user_queries_TagsExpression,
    st_user_queries_MacroCompaniesExpression,
    st_user_queries_MacroOrganizationsExpression,
    st_user_queries_MacroConceptsExpression,
    st_user_queries_MacroPeopleExpression,
    st_user_queries_MacroPlacesExpression,
    st_user_queries_MacroProductsExpression,
    st_user_queries_MacroTopicsExpression,
    st_user_queries_DocumentExpression,
    st_user_queries_SectionMetadataExpression,
    st_user_queries_DocumentTypeExpression,
    st_user_queries_ReportingPeriodExpression,
    st_user_queries_ReportingEntityExpression,
    st_user_queries_SentimentRangeExpression,
    st_user_queries_RPDocumentSubtypeTypeExpression,
    st_user_queries_RPDocumentVersionExpression,
    st_user_queries_RPDocumentTypeExpression,
    st_user_queries_RPProviderExpression,
    st_user_queries_OrExpression_Input,
    st_user_queries_AndExpression_Input,
    st_user_queries_NotExpression_Input,
    st_user_queries_SentenceLabel,
    st_user_queries_InputSentence,
    st_user_queries_Scope,
    st_user_queries_SortEnum,
    st_user_queries_Ranking,
    st_user_queries_CQSSearchCursorPagination,
    st_user_queries_CQSSearchOffsetPagination,
    st_user_queries_CQSClusteringParams,
    st_user_queries_SearchChain,
    st_user_queries_RPXQuery_Input,
    st_user_queries_Prompt,
    st_user_queries_CreateUserQuery,
    st_user_queries_OrExpression_Output,
    st_user_queries_AndExpression_Output,
    st_user_queries_NotExpression_Output,
    st_user_queries_RPXQuery_Output,
    st_user_queries_UserQueryResponse,
    st_user_queries_DeleteObjectResponse,
    st_user_queries_UpdateUserQuery,
    st_user_queries_BulkDeleteObjectsParams,
    st_user_queries_SetPinnedItemsParams,
    st_user_queries_UserPinnedQueriesResponse,
    shared,
    st_user_watchlists_GlobalWatchlistFilter,
    globalType,
    st_user_watchlists_GlobalWatchlistStatus,
    globalStatus,
    st_user_watchlists_WatchlistSharePermission,
    st_user_watchlists_WatchlistShareCompanyContextResponse,
    st_user_watchlists_WatchlistShareUserContext,
    st_user_watchlists_WatchlistShareResponse_Input,
    st_user_watchlists_WatchlistAuthorData,
    st_user_watchlists_GlobalWatchlistType,
    st_user_watchlists_GlobalWatchlistData,
    st_user_watchlists_LightWatchlistResponse_Input,
    st_user_watchlists_ListObjectsResponse_Input,
    st_user_watchlists_ErrorResponse,
    st_user_watchlists_WatchlistUpdateAuthorData,
    st_user_watchlists_GlobalWatchlistCreateData,
    st_user_watchlists_CreateWatchlistParams,
    st_user_watchlists_ObjPermissions,
    st_user_watchlists_WatchlistResponse_Input,
    st_user_watchlists_DeleteWatchlistResponse,
    st_user_watchlists_GlobalWatchlistUpdateData,
    st_user_watchlists_PutWatchlistParams,
    st_user_watchlists_PatchWatchlistParams,
    st_user_watchlists_BulkDeleteWatchlistParams,
    st_user_watchlists_BulkDeleteWatchlistResponse,
    st_user_watchlists_ListWatchlistsParentsParams,
    st_user_watchlists_WatchlistParent,
    st_user_watchlists_ListWatchlistParentsResponse,
    st_user_watchlists_WatchlistItemsUpdateRequest,
    st_user_watchlists_WatchlistShareCompanyContextRequest,
    st_user_watchlists_WatchlistShareRequest,
    st_user_watchlists_GeneratePresignedUrlResponse,
    st_user_watchlists_UnAuthorisedWatchlistAccessError,
    st_user_watchlists_WatchlistNotFoundError,
    st_user_watchlists_DeleteAssetResponse,
    st_user_watchlists_ResourceNotFoundError,
    st_user_workflows_WorkflowResponse,
    st_user_workflows_WorkflowListResponse
};
const endpoints = (0, _core.makeApi)([
    {
        method: "post",
        path: "/agent-websocket/",
        alias: "websocket_agent_websocket__post",
        description: `This represents the websocket endpoint for the chat service`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_agents_AgentExecuteRequest
            }
        ],
        response: _zod.z.union([
            st_agents_ActionWSResponse,
            st_agents_ThinkingWSResponse,
            st_agents_AnswerWSResponse,
            st_agents_ErrorWSResponse,
            st_agents_ToolAuditWSResponse,
            st_agents_CompleteWSResponse
        ])
    },
    {
        method: "get",
        path: "/autosuggest",
        alias: "autosuggest_autosuggest_get",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a basic request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "query",
                type: "Query",
                schema: query
            },
            {
                name: "limit",
                type: "Query",
                schema: limit
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/autosuggest/search",
        alias: "autosuggest_search_autosuggest_search_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a standard request from SDK.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_AutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/autosuggest/search_advanced",
        alias: "autosuggest_search_advanced_autosuggest_search_advanced_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with an advanced request for testing.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_VespaRequestDetails
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "get",
        path: "/autosuggest/search_basic",
        alias: "autosuggest_search_basic_autosuggest_search_basic_get",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a basic request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "query",
                type: "Query",
                schema: query
            },
            {
                name: "limit",
                type: "Query",
                schema: limit
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "get",
        path: "/briefs",
        alias: "list_briefconfigs_briefs_get",
        description: `List all brief configurations for a user.

This endpoint retrieves all brief configurations associated with a user,
filtering by the &#x27;BRIEF#&#x27; prefix.

Returns:
    ListBriefConfigsResponse: A list of brief configurations.`,
        requestFormat: "json",
        response: st_briefs_ListBriefConfigsResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/briefs",
        alias: "create_briefconfig_briefs_post",
        description: `Create a brief configuration for a user.

This endpoint allows the creation of a new brief configuration for a user.

Args:
    briefconfig_payload (BriefConfigPayload): The payload containing the brief configuration details.

Returns:
    BriefConfigResponse: The created brief configuration.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_briefs_BriefConfigPayload
            }
        ],
        response: st_briefs_BriefConfigResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/briefs/:brief_id",
        alias: "update_briefconfig_briefs__brief_id__put",
        description: `Update a brief configuration for a user.

This endpoint allows the update of a brief configuration for a user.

Args:
    brief_id (str): The ID of the brief configuration.
    briefconfig_payload (BriefConfigPayload): The payload containing the brief configuration details.

Returns:
    BriefConfigResponse: The created brief configuration.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_briefs_BriefConfigPayload
            },
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_briefs_BriefConfigResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/briefs/:brief_id",
        alias: "delete_briefconfig_briefs__brief_id__delete",
        description: `Delete a brief configuration for a user.

This endpoint allows the deletion of a brief configuration for a user.

Args:
    brief_id (str): The ID of the brief configuration.

Returns:
    Status 200 if the brief configuration is deleted successfully.`,
        requestFormat: "json",
        parameters: [
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.unknown(),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/briefs/:brief_id",
        alias: "get_briefconfig_briefs__brief_id__get",
        description: `Get a brief configuration by ID.

This endpoint retrieves a specific brief configuration by its ID.

Args:
    brief_id (str): The ID of the brief configuration.

Returns:
    BriefConfigResponse: The brief configuration associated with the given ID.`,
        requestFormat: "json",
        parameters: [
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_briefs_BriefConfigResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/briefs/:brief_id/reports",
        alias: "list_reports_briefs__brief_id__reports_get",
        description: `Get all reports for a brief.

This endpoint retrieves all reports for a specific brief. The reports are sorted by date in descending order.

Args:
    brief_id (str): The ID of the brief configuration.

Returns:
    ListBriefReportsResponse: A list of reports for the given brief.`,
        requestFormat: "json",
        parameters: [
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_briefs_ListBriefReportsResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/briefs/:brief_id/reports/:report_id",
        alias: "get_report_briefs__brief_id__reports__report_id__get",
        description: `Get a report for a brief.

This endpoint retrieves a specific report for a specific brief.

Args:
    brief_id (str): The ID of the brief configuration.
    report_id (str): The ID of the report.

Returns:
    BriefReportResponse: The report for the given brief and report ID.`,
        requestFormat: "json",
        parameters: [
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            },
            {
                name: "report_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_briefs_BriefReportResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/briefs/:brief_id/reports/latest",
        alias: "get_latest_report_briefs__brief_id__reports_latest_get",
        description: `Get the latest report for a brief.

This endpoint retrieves the latest report for a specific brief. The response contains the report and the date in which the next report will be generated.
If there is no report for this brief, the response will return report as null and the next report date.
Args:
    brief_id (str): The ID of the brief configuration.
Returns:
    LatestBriefReportResponse: The latest report for the given brief and the next report date.`,
        requestFormat: "json",
        parameters: [
            {
                name: "brief_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_briefs_LatestBriefReportResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_briefs_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_briefs_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/content/packages/",
        alias: "get_packages_content_packages__get",
        description: `Fetch content packages:

* All of them.
* Filtered by entitlement status. entitled&#x3D;true will return only packages that the current used is entitled to.

The results will be paginated (page, limit).`,
        requestFormat: "json",
        parameters: [
            {
                name: "entitled",
                type: "Query",
                schema: entitled
            },
            {
                name: "page",
                type: "Query",
                schema: _zod.z.number().int().optional().default(1)
            },
            {
                name: "limit",
                type: "Query",
                schema: _zod.z.number().int().optional().default(10)
            }
        ],
        response: st_bff_content_catalog_GenericPaginatedResponse_ContentPackageModel_,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_content_catalog_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/content/packages/:id",
        alias: "get_package_content_packages__id__get",
        description: `Fetch a specific content package by its ID. The information returned includes:
- The package ID
- The package name
- Descriptions (short and detailed)
- Whether the package is enabled for app, API, or catalog
- Whether the user is entitled to the package`,
        requestFormat: "json",
        parameters: [
            {
                name: "id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_bff_content_catalog_ContentPackageModel,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_content_catalog_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/content/sources/",
        alias: "get_sources_content_sources__get",
        description: `Fetch sources:

* By a list of source IDs
* Included in a list of package IDs
* Filtered by entitlement status. entitled&#x3D;true will return only sources that are entitled to the current user.

The results will be paginated (page, limit).

The information returned for every source includes:
- The source ID
- The source name
- The list of package IDs that the source is included in
- A boolean indicating whether the user is entitled to the source`,
        requestFormat: "json",
        parameters: [
            {
                name: "packageIds",
                type: "Query",
                schema: packageIds
            },
            {
                name: "sourceIds",
                type: "Query",
                schema: sourceIds
            },
            {
                name: "entitled",
                type: "Query",
                schema: entitled
            },
            {
                name: "page",
                type: "Query",
                schema: _zod.z.number().int().optional().default(1)
            },
            {
                name: "limit",
                type: "Query",
                schema: _zod.z.number().int().optional().default(10)
            }
        ],
        response: st_bff_content_catalog_GenericPaginatedResponse_SourceModel_,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_content_catalog_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/content/sources/:sourceId",
        alias: "get_source_content_sources__sourceId__get",
        description: `Fetch a specific source by its ID. The information returned for every source includes:
- The source ID
- The source name
- The list of package IDs that the source is included in
- A boolean indicating whether the user is entitled to the source`,
        requestFormat: "json",
        parameters: [
            {
                name: "sourceId",
                type: "Path",
                schema: _zod.z.string().regex(/^[A-Z0-9]{6}$/)
            }
        ],
        response: st_bff_content_catalog_SourceModel,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_bff_content_catalog_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_content_catalog_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/contents",
        alias: "list_files_contents_get",
        description: `List ingested private content for the user.
Allows users to query for ingested private content (only emails at the moment) and filter the results with different query parameters.

Query parameters:
&#x60;&#x60;&#x60;md
    - origin: &quot;email&quot; - only emails are supported at the moment
    - ownership: &quot;owned&quot; - only content owned by the user
    - ownership: &quot;shared&quot; - only content shared with the user
    - ownership: &quot;all&quot; - all content owned or shared with the user
    - file_name: &quot;my_file&quot; - query for files with this name
    - from_date: &quot;2024-01-01&quot; - query for files created after this date
    - inbox: &quot;email_config_id (UUID)&quot; - query for emails ingested from this inbox
    - has_attachments: True - query for files with attachments
    - page: 1 - page number
    - page_size: 50 - number of files per page
    - sort_by: &quot;created_at&quot; - field to sort by
    - sort_order: &quot;desc&quot; - sort order
&#x60;&#x60;&#x60;
Returns:
    List of matching private content files / emails.`,
        requestFormat: "json",
        parameters: [
            {
                name: "origin",
                type: "Query",
                schema: _zod.z.enum([
                    "email",
                    "file_upload"
                ])
            },
            {
                name: "fromDate",
                type: "Query",
                schema: query
            },
            {
                name: "ownership",
                type: "Query",
                schema: _zod.z.enum([
                    "all",
                    "shared",
                    "owned"
                ]).optional().default("all")
            },
            {
                name: "owner",
                type: "Query",
                schema: query
            },
            {
                name: "page",
                type: "Query",
                schema: _zod.z.number().int().optional().default(1)
            },
            {
                name: "pageSize",
                type: "Query",
                schema: _zod.z.number().int().optional().default(50)
            },
            {
                name: "sortBy",
                type: "Query",
                schema: _zod.z.enum([
                    "created_at",
                    "updated_at",
                    "file_name",
                    "raw_size",
                    "content_type",
                    "status"
                ]).optional().default("created_at")
            },
            {
                name: "sortOrder",
                type: "Query",
                schema: _zod.z.enum([
                    "asc",
                    "desc"
                ]).optional().default("desc")
            },
            {
                name: "fileName",
                type: "Query",
                schema: query
            },
            {
                name: "rpCollectionId",
                type: "Query",
                schema: query
            },
            {
                name: "inbox",
                type: "Query",
                schema: query
            },
            {
                name: "hasAttachments",
                type: "Query",
                schema: entitled
            }
        ],
        response: st_private_content_ListFilesResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/contents/:content_id",
        alias: "get_private_content_by_id_contents__content_id__get",
        description: `Get the private content by id.
Returns the signed URL for the content.

Returns:
    Signed URL for the content.`,
        requestFormat: "json",
        parameters: [
            {
                name: "content_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            contentUrl: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/contents/owners",
        alias: "list_owners_contents_owners_get",
        description: `List all owners of the private content shared with the user.

Returns:
    List of owners of the private content shared with the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "filename",
                type: "Query",
                schema: query
            },
            {
                name: "tags",
                type: "Query",
                schema: packageIds
            },
            {
                name: "start_date",
                type: "Query",
                schema: query
            },
            {
                name: "end_date",
                type: "Query",
                schema: query
            },
            {
                name: "status",
                type: "Query",
                schema: status
            },
            {
                name: "starred",
                type: "Query",
                schema: entitled
            },
            {
                name: "trashed",
                type: "Query",
                schema: entitled
            },
            {
                name: "shared",
                type: "Query",
                schema: entitled
            },
            {
                name: "folder_id",
                type: "Query",
                schema: query
            },
            {
                name: "offset",
                type: "Query",
                schema: _zod.z.number().int().gte(0).optional().default(0)
            },
            {
                name: "page_size",
                type: "Query",
                schema: _zod.z.number().int().gt(0).lte(1000).optional().default(100)
            },
            {
                name: "shared_with",
                type: "Query",
                schema: packageIds
            },
            {
                name: "sort_by",
                type: "Query",
                schema: sort_by
            },
            {
                name: "sort_dir",
                type: "Query",
                schema: sort_dir
            },
            {
                name: "ownership",
                type: "Query",
                schema: ownership
            }
        ],
        response: _zod.z.array(st_private_content_OwnerData),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/annotate-query",
        alias: "annotate_query_cqs_annotate_query_post",
        description: `Returns a list of matches based on the query`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_cqs_Body_annotate_query_cqs_annotate_query_post
            },
            {
                name: "query_id",
                type: "Query",
                schema: _zod.z.string()
            },
            {
                name: "query_name",
                type: "Query",
                schema: _zod.z.string()
            },
            {
                name: "timestamp_utc",
                type: "Query",
                schema: timestamp_utc
            },
            {
                name: "annotation_type",
                type: "Query",
                schema: _zod.z.enum([
                    "user-queries",
                    "trending-queries",
                    "time-explicit-queries",
                    "earnings-calls-queries",
                    "benchmark-queries",
                    "source-queries",
                    "qa-queries",
                    "topic-queries",
                    "other-queries"
                ]).optional()
            }
        ],
        response: _zod.z.object({
            message: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/by-ids",
        alias: "by_ids_cqs_by_ids_post",
        description: `Returns a list of matches based on the query`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(st_cqs_SuggestionItem)
            }
        ],
        response: _zod.z.record(st_cqs_DiscoveryPanelItem),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/companies/cusip",
        alias: "by_cusip_cqs_companies_cusip_post",
        description: `Returns a list of matches based on a list of CUSIPs`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(st_cqs_CusipValues)
            }
        ],
        response: _zod.z.record(st_cqs_DiscoveryPanelItem),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/companies/isin",
        alias: "by_isin_cqs_companies_isin_post",
        description: `Returns a list of matches based on a list of ISINs`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(st_cqs_IsinValues)
            }
        ],
        response: _zod.z.record(st_cqs_DiscoveryPanelItem),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/companies/listing",
        alias: "by_listing_cqs_companies_listing_post",
        description: `Returns a list of matches based on a list of listing codes`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(st_cqs_ListingValues)
            }
        ],
        response: _zod.z.record(st_cqs_DiscoveryPanelItem),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/companies/sedol",
        alias: "by_sedol_cqs_companies_sedol_post",
        description: `Returns a list of matches based on a list of SEDOLs`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(st_cqs_SedolValues)
            }
        ],
        response: _zod.z.record(st_cqs_DiscoveryPanelItem),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/discovery-panel",
        alias: "discovery_panel_cqs_discovery_panel_post",
        description: `Returns a set of related entities to the query`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_cqs_RPXQuery
            }
        ],
        response: st_cqs_DiscoveryPanelGroupResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/cqs/languages",
        alias: "languages_cqs_languages_get",
        description: `Returns a list of all available languages`,
        requestFormat: "json",
        response: st_cqs_LanguagesListResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/cqs/languages/:language_code",
        alias: "language_cqs_languages__language_code__get",
        description: `Returns a list of similar sentences based on the query`,
        requestFormat: "json",
        parameters: [
            {
                name: "language_code",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_cqs_LanguageResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/cqs/query-chunks",
        alias: "query_chunks_cqs_query_chunks_post",
        description: `Returns a list of matches based on the query.
&gt; Note this info is returned on Story.chunks`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_cqs_RPXQuery
            }
        ],
        response: st_cqs_SearchResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/cqs/ranking_profiles",
        alias: "ranking_profiles_cqs_ranking_profiles_get",
        description: `Returns a list of all available ranking profiles`,
        requestFormat: "json",
        response: st_cqs_RankingResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_cqs_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/custom-data-views",
        alias: "get_custom_data_views_custom_data_views_get",
        description: `Retrieve all custom data views for authenticated user.`,
        requestFormat: "json",
        response: st_bff_data_tools_CustomDataViewListResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/custom-data-views",
        alias: "create_custom_data_view_custom_data_views_post",
        description: `Create a new custom data view.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_CreateCustomDataViewRequest
            }
        ],
        response: st_bff_data_tools_CustomDataViewResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "patch",
        path: "/custom-data-views/&lt;object_id&gt;",
        alias: "update_custom_data_view_custom_data_views__object_id__patch",
        description: `Update an existing custom data view by ID.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_UpdateCustomDataViewRequest
            },
            {
                name: "object_id",
                type: "Query",
                schema: _zod.z.string()
            }
        ],
        response: st_bff_data_tools_CustomDataViewResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "delete",
        path: "/custom-data-views/&lt;object_id&gt;",
        alias: "delete_custom_data_view_custom_data_views__object_id__delete",
        description: `Delete a custom data view by ID.`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Query",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.unknown(),
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "get",
        path: "/documents/:document_id",
        alias: "get_document_documents__document_id__get",
        description: `Will return the RPJSON by its document UUID. Depending on the origin of the request WEB or SDK,     it will return one of the following schemas:

* &#x60;SdkRpjson&#x60;: **SDK** origin. It returns a simplified RPJSON.
* &#x60;Rpjson&#x60;: **Web** Origin. It returns full RPJSON by the document&#x27;s UUID.
* &#x60;PresignedUrlRpjson&#x60;: Returned when the size of the RPJSON is too large.`,
        requestFormat: "json",
        parameters: [
            {
                name: "document_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.union([
            st_documents_SdkRpjson,
            st_documents_Rpjson,
            st_documents_PresignedUrlRpjson
        ]),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_documents_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/documents/collections/:collection_id",
        alias: "documents_by_collection_id_documents_collections__collection_id__get",
        description: `Will return a list of documents by their rp_collection_id.`,
        requestFormat: "json",
        parameters: [
            {
                name: "collection_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_documents_VespaCollectionResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_documents_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/documents/earnings_calendar/",
        alias: "get_quarterly_reports_for_entity_id_documents_earnings_calendar__post",
        description: `Will return the quarterly reports for entity ravenpack ids. These are QUARTR documents.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_documents_DataToolsApiRequest
            }
        ],
        response: st_documents_DataToolsApiResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_documents_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/emails",
        alias: "list_email_configs_emails_get",
        description: `List all of all configured inboxes for the logged in user.`,
        requestFormat: "json",
        response: st_private_content_ListEmailConfigsResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/emails",
        alias: "create_email_config_emails_post",
        description: `Create a new email config, new ingestion inbox for the user.
Payload accepts the list of allowed/blocked emails.
Each inbox will receive a unique email hash.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_private_content_EmailConfigPayload
            }
        ],
        response: st_private_content_EmailConfigResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/emails/:email_config_id",
        alias: "get_email_config_emails__email_config_id__get",
        description: `Get the email config, together with related email filters (allowed/blocked emails) for the user by email config uuid`,
        requestFormat: "json",
        parameters: [
            {
                name: "email_config_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_private_content_EmailConfigResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/emails/:email_config_id",
        alias: "update_email_config_emails__email_config_id__put",
        description: `Update the email config for the user by email config uuid.
Payload accepts the list of allowed/blocked emails.
Will throw if the email config does not exist or is not owned by the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_private_content_EmailConfigPayload
            },
            {
                name: "email_config_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_private_content_EmailConfigResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/emails/:email_config_id",
        alias: "delete_email_config_emails__email_config_id__delete",
        description: `Delete the email config for the user by email config uuid.
Will throw if the email config does not exist or is not owned by the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "email_config_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_private_content_EmailConfigResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/emails/verify/:email_hash",
        alias: "verify_email_config_emails_verify__email_hash__get",
        description: `This is a private API method to load email config for ANY user by email hash.
It&#x27;s used by the email ingestion services to verify upcoming emails.`,
        requestFormat: "json",
        parameters: [
            {
                name: "email_hash",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_private_content_EmailConfigResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_private_content_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_private_content_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-analyst-ratings",
        alias: "company_analyst_ratings_financial_data_company_analyst_ratings_post",
        description: `Fetch analyst ratings data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_AnalystDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-balance-statement",
        alias: "company_balance_statement_financial_data_company_balance_statement_post",
        description: `Fetch company balance statement data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_BalanceStatementBFFResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-cash-flow-statement",
        alias: "company_cash_flow_statement_financial_data_company_cash_flow_statement_post",
        description: `Fetch company cash flow statement data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_CashFlowStatementBFFResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-currency",
        alias: "company_currency_financial_data_company_currency_post",
        description: `Fetch company currency data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_CurrencyDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-esg-score",
        alias: "company_esg_score_financial_data_company_esg_score_post",
        description: `Fetch company ESG score data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_ESGScoreDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-income-statement",
        alias: "company_income_statement_financial_data_company_income_statement_post",
        description: `Fetch company income statement data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_IncomeStatementBFFResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-key-metrics",
        alias: "company_key_metrics_financial_data_company_key_metrics_post",
        description: `Fetch company key metrics data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_KeyMetricsDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-latest-surprise",
        alias: "company_latest_surprise_financial_data_company_latest_surprise_post",
        description: `Fetch latest earnings surprise data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_EarningsSurpriseDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-price-changes",
        alias: "company_price_changes_financial_data_company_price_changes_post",
        description: `Fetch company price changes data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_ChangeDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-price-target",
        alias: "company_price_target_financial_data_company_price_target_post",
        description: `Fetch company price target data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_PriceTargetDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-quote",
        alias: "company_quote_financial_data_company_quote_post",
        description: `Fetch company quote data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_QuoteDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-ratios",
        alias: "company_ratios_financial_data_company_ratios_post",
        description: `Fetch company ratios data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_RatiosDataToolResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "post",
        path: "/financial-data/company-sentiment",
        alias: "company_sentiment_financial_data_company_sentiment_post",
        description: `Fetch financial data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_bff_data_tools_BFFRequest
            }
        ],
        response: st_bff_data_tools_SentimentBFFResponse,
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_bff_data_tools_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_bff_data_tools_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_bff_data_tools_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_bff_data_tools_DBConnectionError
            },
            {
                status: 504,
                description: `Gateway Timeout.`,
                schema: st_bff_data_tools_UpstreamTimeoutError
            }
        ]
    },
    {
        method: "get",
        path: "/keys",
        alias: "get_user_keys_keys_get",
        description: `Gets all API keys for the user.`,
        requestFormat: "json",
        response: _zod.z.array(st_api_keys_GetApiKey),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_api_keys_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/keys",
        alias: "create_new_key_keys_post",
        description: `Creates a new API key for the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.object({
                    description: _zod.z.string().min(5).max(1000)
                }).passthrough()
            }
        ],
        response: st_api_keys_CreatedApiKey,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_api_keys_BadRequestError
            },
            {
                status: 409,
                description: `Conflict. Maximum of 20 API keys allowed per user`,
                schema: st_api_keys_ErrorResponse
            }
        ]
    },
    {
        method: "patch",
        path: "/keys",
        alias: "update_key_keys_patch",
        description: `Update API key for the user. For now it only updates the description.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.object({
                    description: _zod.z.string().min(5).max(1000)
                }).passthrough()
            }
        ],
        response: st_api_keys_GetApiKey,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_api_keys_BadRequestError
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_api_keys_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/keys/:key_id",
        alias: "delete_user_key_keys__key_id__delete",
        description: `Deletes an API key for the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "key_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            id: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 404,
                description: `Not Found.`,
                schema: st_api_keys_ErrorResponse
            },
            {
                status: 409,
                description: `Conflict. Disable key first.`,
                schema: st_api_keys_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/keys/:key_id/disable",
        alias: "disable_user_key_keys__key_id__disable_post",
        description: `Disables an API key for the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "key_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            enabled: _zod.z.boolean().default(false)
        }).partial().passthrough(),
        errors: [
            {
                status: 404,
                description: `Not Found.`,
                schema: st_api_keys_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/keys/:key_id/enable",
        alias: "enable_user_key_keys__key_id__enable_post",
        description: `Enables an API key for the user.`,
        requestFormat: "json",
        parameters: [
            {
                name: "key_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            enabled: _zod.z.boolean().default(true)
        }).partial().passthrough(),
        errors: [
            {
                status: 404,
                description: `Not Found.`,
                schema: st_api_keys_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/llm/trending",
        alias: "trending_endpoint_llm_trending_get",
        description: `This is a minimal example of a project endpoint.`,
        requestFormat: "json",
        parameters: [
            {
                name: "date",
                type: "Query",
                schema: _zod.z.string().optional().default("latest")
            },
            {
                name: "type",
                type: "Query",
                schema: type
            },
            {
                name: "disposition",
                type: "Query",
                schema: query
            },
            {
                name: "status_code_override",
                type: "Query",
                schema: _zod.z.boolean().optional().default(false)
            }
        ],
        response: st_llm_trending_get_LambdaResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_llm_trending_get_LambdaBadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/market-data",
        alias: "finance_market_data_post",
        description: `Fetch financial data for a list of items or RavenPack entities.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_finances_FinanceRequest
            }
        ],
        response: _zod.z.record(st_finances_PossibleFinancialInfo),
        errors: [
            {
                status: 429,
                description: `Too Many Requests.`,
                schema: st_finances_UpstreamTooManyRequests
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_finances_ErrorResponse
            },
            {
                status: 502,
                description: `Bad Gateway.`,
                schema: st_finances_UpstreamFailedError
            },
            {
                status: 503,
                description: `Service Unavailable.`,
                schema: st_finances_DBConnectionError
            }
        ]
    },
    {
        method: "post",
        path: "/marketing/onboarding-survey",
        alias: "onboarding_marketing_onboarding_survey_post",
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_profiles_UserOnboardingFeedback
            }
        ],
        response: _zod.z.unknown(),
        errors: [
            {
                status: 400,
                description: `Bad Request Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/marketing/sales-request",
        alias: "sales_request_marketing_sales_request_post",
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_profiles_UserSalesRequest
            }
        ],
        response: _zod.z.unknown(),
        errors: [
            {
                status: 400,
                description: `Bad Request Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/profiles/content-access-policies",
        alias: "get_content_access_policies_profiles_content_access_policies_get",
        requestFormat: "json",
        response: st_profiles_ContentAccessPoliciesResponse,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/profiles/me",
        alias: "get_my_profile_profiles_me_get",
        requestFormat: "json",
        response: st_profiles_MyProfileResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "patch",
        path: "/profiles/me/subscription_modification",
        alias: "patch_my_subscription_modification_profiles_me_subscription_modification_patch",
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.object({
                    status: _zod.z.string()
                }).passthrough()
            }
        ],
        response: st_profiles_SubscriptionModification,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/profiles/organizations/:organization_id",
        alias: "get_organization_profile_profiles_organizations__organization_id__get",
        requestFormat: "json",
        parameters: [
            {
                name: "organization_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_profiles_FullOrganizationProfileResponse,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "patch",
        path: "/profiles/organizations/:organization_id",
        alias: "update_organization_profile_profiles_organizations__organization_id__patch",
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_profiles_UpdateOrganizationProfile
            },
            {
                name: "organization_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_profiles_OrganizationProfile,
        errors: [
            {
                status: 400,
                description: `Bad Request Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/profiles/users/:user_id",
        alias: "get_user_profile_profiles_users__user_id__get",
        requestFormat: "json",
        parameters: [
            {
                name: "user_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_profiles_FullUserProfileResponse,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found Error.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/rpjson/:document_id",
        alias: "rpjson_retrieval_rpjson__document_id__get",
        description: `Will return the RPJSON by its document UUID. Depending on the origin of the request WEB or SDK,     it will return one of the following schemas:

* &#x60;SdkRpjson&#x60;: **SDK** origin. It returns a simplified RPJSON.
* &#x60;Rpjson&#x60;: **Web** Origin. It returns full RPJSON by the document&#x27;s UUID.
* &#x60;PresignedUrlRpjson&#x60;: Returned when the size of the RPJSON is too large.`,
        requestFormat: "json",
        parameters: [
            {
                name: "document_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.union([
            st_documents_SdkRpjson,
            st_documents_Rpjson,
            st_documents_PresignedUrlRpjson
        ]),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_documents_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_documents_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/subscriptions/checkout",
        alias: "generate_checkout_url_with_plans_subscriptions_checkout_post",
        description: `Returns a list of all available ranking profiles`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_subscriptions_GenerateCheckoutUrlParamsRequest
            }
        ],
        response: _zod.z.object({
            url: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_subscriptions_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/subscriptions/checkout-url",
        alias: "generate_checkout_url_subscriptions_checkout_url_get",
        description: `Returns a list of all available ranking profiles`,
        requestFormat: "json",
        parameters: [
            {
                name: "priceId",
                type: "Query",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            url: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_subscriptions_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/subscriptions/customer-portal-session",
        alias: "generate_customer_portal_session_subscriptions_customer_portal_session_get",
        description: `Returns a customer portal session`,
        requestFormat: "json",
        response: st_subscriptions_CustomerPortal,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_subscriptions_BadRequestError
            },
            {
                status: 404,
                description: `Not Found`,
                schema: st_subscriptions_NotFoundError
            }
        ]
    },
    {
        method: "post",
        path: "/subscriptions/webhook/",
        alias: "receive_webhook_event_subscriptions_webhook__post",
        description: `Listener for webhook events from chargebee`,
        requestFormat: "json",
        response: _zod.z.unknown(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_subscriptions_dispatcher_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/track-events",
        alias: "track_event_track_events_post",
        description: `Tracks the event in Customer IO.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_event_tracker_UserEvent
            }
        ],
        response: _zod.z.unknown(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_event_tracker_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/bulk-delete/queries",
        alias: "bulk_delete_objects_user_data_bulk_delete_queries_post",
        description: `Deletes multiple User Queries in bulk by the list of ids passed as a body payload.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(_zod.z.string())
            }
        ],
        response: _zod.z.object({
            id: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/bulk-delete/watchlists",
        alias: "bulk_delete_obj_user_data_bulk_delete_watchlists_post",
        description: `Bulk deletes watchlists`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(_zod.z.string())
            }
        ],
        response: st_user_watchlists_BulkDeleteWatchlistResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/chats/",
        alias: "list_user_chats_user_data_chats__get",
        description: `Returns a list of chats for the authenticated user.
If the limit or offset are provided, the response will be paginated.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_chats_ListUserChatsRequest
            }
        ],
        response: _zod.z.union([
            st_user_chats_ListUserChatResponse,
            st_user_chats_PaginatedListUserChatResponse
        ]),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/chats/",
        alias: "create_user_chat_user_data_chats__post",
        description: `Returns a set of related entities to the query`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_chats_CreateUserChatWithoutUserId
            }
        ],
        response: st_user_chats_UserChatResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/chats/:chat_id",
        alias: "get_user_chat_user_data_chats__chat_id__get",
        description: `Returns chat details`,
        requestFormat: "json",
        parameters: [
            {
                name: "chat_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_chats_UserChatResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            },
            {
                status: 404,
                description: `Not Found`,
                schema: st_user_chats_NotFoundError
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/chats/:chat_id",
        alias: "delete_user_chat_user_data_chats__chat_id__delete",
        description: `Deletes a chat`,
        requestFormat: "json",
        parameters: [
            {
                name: "chat_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            id: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            },
            {
                status: 404,
                description: `Not Found`,
                schema: st_user_chats_NotFoundError
            }
        ]
    },
    {
        method: "patch",
        path: "/user-data/chats/:chat_id",
        alias: "patch_user_chat_user_data_chats__chat_id__patch",
        description: `Update a chat&#x27;s details`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_chats_UpdateUserChat
            },
            {
                name: "chat_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_chats_UserChatUpdatedResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            },
            {
                status: 404,
                description: `Not Found`,
                schema: st_user_chats_NotFoundError
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/chats/:object_id/share",
        alias: "share_user_chat_user_data_chats__object_id__share_post",
        description: `Share a chat with other users`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.object({
                    public: _zod.z.boolean()
                }).passthrough()
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_chats_UserChatSharedResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_user_chats_BadRequestError
            },
            {
                status: 404,
                description: `Not Found`,
                schema: st_user_chats_NotFoundError
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/queries",
        alias: "list_objects_user_data_queries_get",
        description: `Gets list of User Queries, filtered by passed query parameters.`,
        requestFormat: "json",
        parameters: [
            {
                name: "saveStatus",
                type: "Query",
                schema: saveStatus
            },
            {
                name: "shared",
                type: "Query",
                schema: query
            },
            {
                name: "owned",
                type: "Query",
                schema: entitled
            }
        ],
        response: st_user_queries_ListObjectsResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/queries",
        alias: "create_obj_user_data_queries_post",
        description: `Creates a new User Query object.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_queries_CreateUserQuery
            }
        ],
        response: st_user_queries_UserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/queries/:object_id",
        alias: "get_object_user_data_queries__object_id__get",
        description: `Gets a single User Query object, by it&#x27;s id.`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/queries/:object_id",
        alias: "delete_obj_user_data_queries__object_id__delete",
        description: `Deletes a single User Query by its id.`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            id: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/user-data/queries/:object_id",
        alias: "put_obj_user_data_queries__object_id__put",
        description: `Updates a specific User Query with provided data.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_queries_UpdateUserQuery
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "patch",
        path: "/user-data/queries/:object_id",
        alias: "patch_obj_user_data_queries__object_id__patch",
        description: `Partially updates a specific User Query with provided data`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_queries_UpdateUserQuery
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/user-data/queries/:object_id/executed",
        alias: "update_query_last_executed_user_data_queries__object_id__executed_put",
        description: `Marks a specific User Query as executed`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_LightUserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/user-data/queries/:object_id/pin",
        alias: "set_pinned_items_user_data_queries__object_id__pin_put",
        description: `Pins a single User Query based on the passed query id.`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserPinnedQueriesResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/queries/:object_id/pin",
        alias: "delete_pin_user_data_queries__object_id__pin_delete",
        description: `Unpins a single query based on the passed query id.`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserPinnedQueriesResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/queries/:object_id/share",
        alias: "user_query_share_user_data_queries__object_id__share_post",
        description: `Shares a specific User Query with other users`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_queries_UserQueryResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/queries/pinned",
        alias: "set_pinned_items_user_data_queries_pinned_post",
        description: `Pins multiple User Queries in bulk by the list of ids passed as a body payload.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(_zod.z.string())
            }
        ],
        response: st_user_queries_UserPinnedQueriesResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_queries_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_queries_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/quota",
        alias: "get_user_quota_user_data_quota_get",
        requestFormat: "json",
        response: st_profiles_MyEntitlementsResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/quota/:quota_key",
        alias: "get_user_quota_status_user_data_quota__quota_key__get",
        requestFormat: "json",
        parameters: [
            {
                name: "quota_key",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_profiles_QuotaStatus,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_profiles_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_profiles_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/watchlists",
        alias: "list_objects_user_data_watchlists_get",
        description: `Return a list of user objects, filtered by object type and optional save_status`,
        requestFormat: "json",
        parameters: [
            {
                name: "shared",
                type: "Query",
                schema: shared
            },
            {
                name: "owned",
                type: "Query",
                schema: entitled
            },
            {
                name: "globalType",
                type: "Query",
                schema: globalType
            },
            {
                name: "globalStatus",
                type: "Query",
                schema: globalStatus
            },
            {
                name: "globalIsFeatured",
                type: "Query",
                schema: entitled
            },
            {
                name: "globalAuthorName",
                type: "Query",
                schema: query
            },
            {
                name: "isFavorite",
                type: "Query",
                schema: entitled
            }
        ],
        response: st_user_watchlists_ListObjectsResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/watchlists",
        alias: "create_obj_user_data_watchlists_post",
        description: `Creates a Watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_watchlists_CreateWatchlistParams
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/watchlists/:object_id",
        alias: "get_object_user_data_watchlists__object_id__get",
        description: `Fetch a specific object from dynamo given an object id`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/watchlists/:object_id",
        alias: "delete_obj_user_data_watchlists__object_id__delete",
        description: `Deletes a Watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: _zod.z.object({
            id: _zod.z.string()
        }).passthrough(),
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/user-data/watchlists/:object_id",
        alias: "put_obj_user_data_watchlists__object_id__put",
        description: `Updates a watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_watchlists_PutWatchlistParams
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "patch",
        path: "/user-data/watchlists/:object_id",
        alias: "patch_obj_user_data_watchlists__object_id__patch",
        description: `Updates partially a watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_watchlists_PatchWatchlistParams
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/watchlists/:object_id/assets",
        alias: "delete_assets_user_data_watchlists__object_id__assets_delete",
        description: `Watchlist Delete Asset`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            },
            {
                name: "image",
                type: "Query",
                schema: entitled
            },
            {
                name: "avatar",
                type: "Query",
                schema: entitled
            }
        ],
        response: st_user_watchlists_DeleteAssetResponse,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_UnAuthorisedWatchlistAccessError
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ResourceNotFoundError
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "put",
        path: "/user-data/watchlists/:object_id/favorite",
        alias: "favorite_watchlist_user_data_watchlists__object_id__favorite_put",
        description: `Favorite a Watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_UnAuthorisedWatchlistAccessError
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_WatchlistNotFoundError
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "delete",
        path: "/user-data/watchlists/:object_id/favorite",
        alias: "unfavorite_watchlist_user_data_watchlists__object_id__favorite_delete",
        description: `Unfavorite a Watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_UnAuthorisedWatchlistAccessError
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_WatchlistNotFoundError
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/watchlists/:object_id/generate-presigned-url",
        alias: "generate_presigned_url_user_data_watchlists__object_id__generate_presigned_url_post",
        description: `Watchlist Generate Pre-signed URL for uploading assets`,
        requestFormat: "json",
        parameters: [
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            },
            {
                name: "image",
                type: "Query",
                schema: entitled
            },
            {
                name: "avatar",
                type: "Query",
                schema: entitled
            }
        ],
        response: st_user_watchlists_GeneratePresignedUrlResponse,
        errors: [
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_UnAuthorisedWatchlistAccessError
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_WatchlistNotFoundError
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/watchlists/:object_id/items",
        alias: "update_watchlist_items_user_data_watchlists__object_id__items_post",
        description: `Adds items to a watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_watchlists_WatchlistItemsUpdateRequest
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/watchlists/:object_id/share",
        alias: "watchlist_share_user_data_watchlists__object_id__share_post",
        description: `Share the watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_user_watchlists_WatchlistShareRequest
            },
            {
                name: "object_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_watchlists_WatchlistResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "post",
        path: "/user-data/watchlists/dependencies",
        alias: "check_object_parents_user_data_watchlists_dependencies_post",
        description: `Retrieves the dependencies/parents of a watchlist`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.array(_zod.z.string())
            }
        ],
        response: st_user_watchlists_ListWatchlistParentsResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 403,
                description: `Forbidden.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 404,
                description: `Not Found.`,
                schema: st_user_watchlists_ErrorResponse
            },
            {
                status: 500,
                description: `Internal Server Error.`,
                schema: st_user_watchlists_ErrorResponse
            }
        ]
    },
    {
        method: "get",
        path: "/user-data/workflows/",
        alias: "list_user_workflows_user_data_workflows__get",
        description: `List all workflows for a specific user.`,
        requestFormat: "json",
        response: st_user_workflows_WorkflowListResponse
    },
    {
        method: "get",
        path: "/user-data/workflows/:workflow_id",
        alias: "get_workflow_user_data_workflows__workflow_id__get",
        description: `Get a specific workflow by ID.`,
        requestFormat: "json",
        parameters: [
            {
                name: "workflow_id",
                type: "Path",
                schema: _zod.z.string()
            }
        ],
        response: st_user_workflows_WorkflowResponse
    },
    {
        method: "post",
        path: "/v1/knowledge-graph/batch-upload",
        alias: "private_autosuggest_batch_upload_v1_knowledge_graph_batch_upload_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa from multiple entities in a Base64 encoded file`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_PrivateAutosuggestBatchUploadRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request Error.`,
                schema: st_autosuggest_vespa_ErrorClientResponse
            },
            {
                status: 401,
                description: `User authentication failed`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/knowledge-graph/facet-query",
        alias: "private_autosuggest_watchlist_facet_search_v1_knowledge_graph_facet_query_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a facet search request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_PrivateAutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/knowledge-graph/search",
        alias: "private_autosuggest_search_v1_knowledge_graph_search_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a standard request from SDK.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_PrivateAutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/knowledge-graph/search_advanced",
        alias: "private_autosuggest_search_advanced_v1_knowledge_graph_search_advanced_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with an advanced request for testing.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_VespaRequestDetails
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/knowledge-graph/watchlist-autosuggest",
        alias: "private_autosuggest_watchlist_search_v1_knowledge_graph_watchlist_autosuggest_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a standard request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_PrivateWatchlistAutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/search",
        alias: "search_v1_search_post",
        description: `Search endpoint to retrieve search results from Vespa.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_internal_search_api_SearchRequest
            }
        ],
        response: st_internal_search_api_SearchResult,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_internal_search_api_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_internal_search_api_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/search/comentions",
        alias: "comentions_v1_search_comentions_post",
        description: `Search endpoint to retrieve comentions results from Vespa.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_internal_search_api_ComentionsSearchRequest
            }
        ],
        response: st_internal_search_api_ComentionsGroupResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_internal_search_api_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_internal_search_api_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/v1/search/volume",
        alias: "volume_v1_search_volume_post",
        description: `Search endpoint to retrieve volume results from Vespa.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_internal_search_api_SearchRequest
            }
        ],
        response: st_internal_search_api_VolumeResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_internal_search_api_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_internal_search_api_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/watchlist-autosuggest",
        alias: "autosuggest_watchlist_search_watchlist_autosuggest_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a standard request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_WatchlistAutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/watchlist-autosuggest/batch-upload",
        alias: "autosuggest_batch_upload_watchlist_autosuggest_batch_upload_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa from multiple entities in a Base64 encoded file`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: _zod.z.object({
                    file: _zod.z.string()
                }).passthrough()
            }
        ],
        response: st_autosuggest_vespa_AutosuggestBatchUploadResponse_Input,
        errors: [
            {
                status: 400,
                description: `Bad Request Error.`,
                schema: st_autosuggest_vespa_ErrorClientResponse
            },
            {
                status: 401,
                description: `User authentication failed`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/watchlist-autosuggest/facet-query",
        alias: "autosuggest_watchlist_facet_search_watchlist_autosuggest_facet_query_post",
        description: `Autosuggest endpoint to retrieve suggestions from Vespa with a facet search request from UI.`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: st_autosuggest_vespa_AutosuggestRequest
            }
        ],
        response: st_autosuggest_vespa_AutosuggestResponse,
        errors: [
            {
                status: 400,
                description: `Bad Request`,
                schema: st_autosuggest_vespa_BadRequestError
            },
            {
                status: 401,
                description: `Unauthorized`,
                schema: _zod.z.object({
                    message: _zod.z.string().default("User authentication failed")
                }).partial().passthrough()
            },
            {
                status: 500,
                description: `Internal Server Error`,
                schema: st_autosuggest_vespa_InternalServerResponse
            }
        ]
    },
    {
        method: "post",
        path: "/websocket/",
        alias: "websocket_websocket__post",
        description: `This represents the websocket endpoint for the chat service`,
        requestFormat: "json",
        parameters: [
            {
                name: "body",
                type: "Body",
                schema: websocket_websocket__post_Body
            }
        ],
        response: _zod.z.union([
            st_llm_chat_SummaryNextBlockResponse,
            st_llm_chat_SummaryCompletionResponse,
            st_llm_chat_SummarySourcesResponse,
            st_llm_chat_AuditTraceResponse,
            st_llm_chat_ProfilingResponse,
            st_llm_chat_StatusInfoResponse,
            st_llm_chat_StatusQueryResponse,
            st_llm_chat_StatusResetResponse,
            st_llm_chat_StatusSourcesFinishedResponse
        ])
    }
]);
const api = new _core.Zodios(endpoints);
function createApiClient(baseUrl, options) {
    return new _core.Zodios(baseUrl, endpoints, options);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL2NvbnRyYWN0cy9zcmMvbGliL2JpZ2RhdGEtc2NoZW1hcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiXG5pbXBvcnQgeyBab2Rpb3MsIHR5cGUgWm9kaW9zT3B0aW9ucywgbWFrZUFwaSB9IGZyb20gXCJAem9kaW9zL2NvcmVcIlxuXG50eXBlIHN0X2Nxc19BbmRFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8XG4gICAgfCAoXG4gICAgICAgIHwgc3RfY3FzX1NpbWlsYXJpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX05vdEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfQW5kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19PckV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvUGVvcGxlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb1BsYWNlc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQVG9waWNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0RvY3VtZW50RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0RvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBQcm92aWRlckV4cHJlc3Npb25cbiAgICAgIClcbiAgICB8IEFycmF5PFxuICAgICAgICB8IHN0X2Nxc19TaW1pbGFyaXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Ob3RFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0FuZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfT3JFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb1Blb3BsZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvVG9waWNzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfVGFnc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQUHJvdmlkZXJFeHByZXNzaW9uXG4gICAgICA+XG4gID5cbn1cbnR5cGUgc3RfY3FzX1NpbWlsYXJpdHlFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtID0gXCJpblwiIHwgXCJhbGxcIlxudHlwZSBzdF9jcXNfRW50aXR5RXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIGRvY3VtZW50PzogKChzdHJpbmcgfCBudWxsKSB8IEFycmF5PHN0cmluZyB8IG51bGw+KSB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdF9jcXNfTGlzdE9wZXJhdGlvbkVudW0gfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIG9wZXJhdGlvbj86IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICBkb2N1bWVudD86ICgoc3RyaW5nIHwgbnVsbCkgfCBBcnJheTxzdHJpbmcgfCBudWxsPikgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X2Nxc19EYXRlT3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogKHN0X2Nxc19EYXRlSW50ZXJ2YWwgfCBBcnJheTxzdHJpbmc+KSB8IEFycmF5PHN0X2Nxc19EYXRlSW50ZXJ2YWwgfCBBcnJheTxzdHJpbmc+PlxufVxudHlwZSBzdF9jcXNfRGF0ZU9wZXJhdGlvbkVudW0gPSBcImJldHdlZW5cIlxudHlwZSBzdF9jcXNfRGF0ZUludGVydmFsID1cbiAgfCBcInRvZGF5XCJcbiAgfCBcInllc3RlcmRheVwiXG4gIHwgXCJ0aGlzX3dlZWtcIlxuICB8IFwibGFzdF93ZWVrXCJcbiAgfCBcImxhc3Rfc2V2ZW5fZGF5c1wiXG4gIHwgXCJsYXN0X3RoaXJ0eV9kYXlzXCJcbiAgfCBcImxhc3RfbmluZXR5X2RheXNcIlxuICB8IFwieWVhcl90b19kYXRlXCJcbiAgfCBcImxhc3RfdHdlbHZlX21vbnRoc1wiXG4gIHwgXCJsYXN0XzFfaG91cnNcIlxuICB8IFwibGFzdF8zX2hvdXJzXCJcbiAgfCBcImxhc3RfNl9ob3Vyc1wiXG4gIHwgXCJsYXN0XzlfaG91cnNcIlxuICB8IFwibGFzdF8xMl9ob3Vyc1wiXG4gIHwgXCJsYXN0XzI0X2hvdXJzXCJcbiAgfCBcImxhc3RfNDhfaG91cnNcIlxudHlwZSBzdF9jcXNfVGFnc0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdF9jcXNfTGlzdE9wZXJhdGlvbkVudW0gfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9jcXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlOiBzdHJpbmdcbn1cbnR5cGUgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9jcXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9jcXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X2Nxc19NYWNyb1RvcGljc0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdF9jcXNfTGlzdE9wZXJhdGlvbkVudW0gfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8bnVtYmVyPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfUlBQcm92aWRlckV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19Ob3RFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgdmFsdWU6XG4gICAgfCAoXG4gICAgICAgIHwgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19BbmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX09yRXhwcmVzc2lvblxuICAgICAgKVxuICAgIHwgQXJyYXk8XG4gICAgICAgIHwgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19BbmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX09yRXhwcmVzc2lvblxuICAgICAgPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19PckV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8XG4gICAgfCAoXG4gICAgICAgIHwgc3RfY3FzX1NpbWlsYXJpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX05vdEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfQW5kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19PckV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvUGVvcGxlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb1BsYWNlc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQVG9waWNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0RvY3VtZW50RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0RvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBQcm92aWRlckV4cHJlc3Npb25cbiAgICAgIClcbiAgICB8IEFycmF5PFxuICAgICAgICB8IHN0X2Nxc19TaW1pbGFyaXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Ob3RFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX0FuZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfT3JFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19NYWNyb1Blb3BsZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX01hY3JvVG9waWNzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfVGFnc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X2Nxc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb25cbiAgICAgICAgfCBzdF9jcXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfY3FzX1JQUHJvdmlkZXJFeHByZXNzaW9uXG4gICAgICA+XG4gID5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfU3RvcnkgPSB7XG4gIGRvY3R5cGU6IHN0cmluZ1xuICBkb2N1bWVudFNjb3BlOiBzdHJpbmdcbiAgaGQ6IHN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGxhbmd1YWdlOiBzdHJpbmdcbiAgc2VudDogbnVtYmVyXG4gIHNlbnRlbmNlcz86ICgoQXJyYXk8c3RfY3FzX1NlbnRlbmNlPiB8IG51bGwpIHwgQXJyYXk8QXJyYXk8c3RfY3FzX1NlbnRlbmNlPiB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBjaHVua3M/OiAoKEFycmF5PHN0X2Nxc19DaHVuaz4gfCBudWxsKSB8IEFycmF5PEFycmF5PHN0X2Nxc19DaHVuaz4gfCBudWxsPikgfCB1bmRlZmluZWRcbiAgc3JjS2V5OiBzdHJpbmdcbiAgc3JjTmFtZTogc3RyaW5nXG4gIHNvdXJjZVJhbms/OiAoKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHRzOiBzdHJpbmdcbiAgc3VtbWFyeUZlYXR1cmVzPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICByYW5rRmVhdHVyZXM/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIGNvbXB1dGVkUmVsZXZhbmNlPzogKChudW1iZXIgfCBudWxsKSB8IEFycmF5PG51bWJlciB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBjbHVzdGVyPzogKChBcnJheTxzdF9jcXNfU3Rvcnk+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdF9jcXNfU3Rvcnk+IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIGNsdXN0ZXJTdW1tYXJ5PzpcbiAgICB8ICgoc3RfY3FzX0NsdXN0ZXJTdW1tYXJ5IHwgbnVsbCkgfCBBcnJheTxzdF9jcXNfQ2x1c3RlclN1bW1hcnkgfCBudWxsPilcbiAgICB8IHVuZGVmaW5lZFxuICBjbHVzdGVyRGV0YWlscz86ICgoQXJyYXk8bnVtYmVyPiB8IG51bGwpIHwgQXJyYXk8QXJyYXk8bnVtYmVyPiB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBjb250ZW50VHlwZT86ICgoc3RyaW5nIHwgbnVsbCkgfCBBcnJheTxzdHJpbmcgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgcmVwb3J0aW5nRW50aXRpZXM/OiAoKEFycmF5PHN0cmluZz4gfCBudWxsKSB8IEFycmF5PEFycmF5PHN0cmluZz4gfCBudWxsPikgfCB1bmRlZmluZWRcbiAgcmVwb3J0aW5nUGVyaW9kPzogKChBcnJheTxzdHJpbmc+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdHJpbmc+IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIGRvY3VtZW50VHlwZT86ICgoc3RyaW5nIHwgbnVsbCkgfCBBcnJheTxzdHJpbmcgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgcnBQcm92aWRlcklkPzogKChzdHJpbmcgfCBudWxsKSB8IEFycmF5PHN0cmluZyB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB1cmw/OiAoKHN0cmluZyB8IG51bGwpIHwgQXJyYXk8c3RyaW5nIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2Nxc19TZW50ZW5jZSA9IHtcbiAgcG51bTogbnVtYmVyXG4gIHNudW06IG51bWJlclxuICB0ZXh0OiBzdHJpbmdcbiAgZW50aXRpZXM6IEFycmF5PHN0X2Nxc19FbnRpdHlDb29yZGluYXRlPlxuICBkZWR1cGxpY2F0aW9uQ291bnQ6IG51bWJlclxuICBsYWJlbDogc3RyaW5nXG4gIHJlbGV2YW5jZT86ICgobnVtYmVyIHwgbnVsbCkgfCBBcnJheTxudW1iZXIgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgc2VudGltZW50PzogKChudW1iZXIgfCBudWxsKSB8IEFycmF5PG51bWJlciB8IG51bGw+KSB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9jcXNfRW50aXR5Q29vcmRpbmF0ZSA9IHtcbiAga2V5OiBzdHJpbmdcbiAgc3RhcnQ6IG51bWJlclxuICBlbmQ6IG51bWJlclxuICBxdWVyeVR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9jcXNfQ2h1bmsgPSB7XG4gIGNudW06IG51bWJlclxuICB0ZXh0OiBzdHJpbmdcbiAgZW50aXRpZXM6IEFycmF5PHN0X2Nxc19FbnRpdHlDb29yZGluYXRlPlxuICBzZW50ZW5jZXM6IEFycmF5PHN0X2Nxc19DaHVua1NlbnRlbmNlPlxuICBkZWR1cGxpY2F0aW9uQ291bnQ6IG51bWJlclxuICBsYWJlbDogc3RyaW5nXG4gIHJlbGV2YW5jZTogbnVtYmVyXG4gIHNlbnRpbWVudD86ICgobnVtYmVyIHwgbnVsbCkgfCBBcnJheTxudW1iZXIgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgc2VjdGlvbk1ldGFkYXRhPzogKChBcnJheTxzdHJpbmc+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdHJpbmc+IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHNwZWFrZXI/OiAoKHN0cmluZyB8IG51bGwpIHwgQXJyYXk8c3RyaW5nIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIGJvdW5kaW5nQm94ZXM/OlxuICAgIHwgKChBcnJheTxzdF9jcXNfQm91bmRpbmdCb3g+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdF9jcXNfQm91bmRpbmdCb3g+IHwgbnVsbD4pXG4gICAgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfY3FzX0NodW5rU2VudGVuY2UgPSB7XG4gIHBudW06IG51bWJlclxuICBzbnVtOiBudW1iZXJcbn1cbnR5cGUgc3RfY3FzX0JvdW5kaW5nQm94ID0ge1xuICBib3R0b206IG51bWJlclxuICBsZWZ0OiBudW1iZXJcbiAgcGFnZTogbnVtYmVyXG4gIHJpZ2h0OiBudW1iZXJcbiAgdG9wOiBudW1iZXJcbn1cbnR5cGUgc3RfY3FzX0NsdXN0ZXJTdW1tYXJ5ID0ge1xuICBuVW5pcXVlU2VudGVuY2VzOiBudW1iZXJcbiAgblRvdGFsU2VudGVuY2VzOiBudW1iZXJcbn1cbnR5cGUgc3RfZG9jdW1lbnRzX0xpc3RCbG9jayA9IHtcbiAgdHlwZTogc3RfZG9jdW1lbnRzX0xpc3RUeXBlXG4gIGVudHJpZXM6IEFycmF5PHN0X2RvY3VtZW50c19MaXN0RW50cnk+XG4gIHNlY3Rpb25zPzpcbiAgICB8ICgoQXJyYXk8c3RfZG9jdW1lbnRzX1NlY3Rpb24+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdF9kb2N1bWVudHNfU2VjdGlvbj4gfCBudWxsPilcbiAgICB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF9kb2N1bWVudHNfTGlzdFR5cGUgPSBcIkZPUk1cIiB8IFwiTElTVF9PUkRFUkVEXCIgfCBcIkxJU1RfVU5PUkRFUkVEXCJcbnR5cGUgc3RfZG9jdW1lbnRzX1RhYmxlQ2VsbFR5cGUgPSBcIkNFTExfSEVBREVSXCIgfCBcIkNFTExfRk9PVEVSXCJcbnR5cGUgc3RfZG9jdW1lbnRzX1RleHRCbG9jayA9IHtcbiAgdHlwZT86ICgoc3RfZG9jdW1lbnRzX1RleHRUeXBlRW51bSB8IG51bGwpIHwgQXJyYXk8c3RfZG9jdW1lbnRzX1RleHRUeXBlRW51bSB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBub3JtYWxpemVkX2Nvb3JkaW5hdGVzPzpcbiAgICB8IChcbiAgICAgICAgfCAoQXJyYXk8c3RfZG9jdW1lbnRzX05vcm1hbGl6ZWRDb29yZGluYXRlcz4gfCBudWxsKVxuICAgICAgICB8IEFycmF5PEFycmF5PHN0X2RvY3VtZW50c19Ob3JtYWxpemVkQ29vcmRpbmF0ZXM+IHwgbnVsbD5cbiAgICAgIClcbiAgICB8IHVuZGVmaW5lZFxuICB0ZXh0OiBzdHJpbmdcbiAgbWFya2Vycz86XG4gICAgfCAoKEFycmF5PHN0X2RvY3VtZW50c19NYXJrZXJzPiB8IG51bGwpIHwgQXJyYXk8QXJyYXk8c3RfZG9jdW1lbnRzX01hcmtlcnM+IHwgbnVsbD4pXG4gICAgfCB1bmRlZmluZWRcbiAgYXR0cmlidXRlcz86XG4gICAgfCAoXG4gICAgICAgIHwgKHN0X2RvY3VtZW50c19GYWN0c2V0VHJhbnNjcmlwdFRleHQgfCBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQgfCBudWxsKVxuICAgICAgICB8IEFycmF5PHN0X2RvY3VtZW50c19GYWN0c2V0VHJhbnNjcmlwdFRleHQgfCBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQgfCBudWxsPlxuICAgICAgKVxuICAgIHwgdW5kZWZpbmVkXG4gIHNlY3Rpb25zPzpcbiAgICB8ICgoQXJyYXk8c3RfZG9jdW1lbnRzX1NlY3Rpb24+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdF9kb2N1bWVudHNfU2VjdGlvbj4gfCBudWxsPilcbiAgICB8IHVuZGVmaW5lZFxuICBzZW50ZW5jZXM/OlxuICAgIHwgKChBcnJheTxzdF9kb2N1bWVudHNfU2VudGVuY2U+IHwgbnVsbCkgfCBBcnJheTxBcnJheTxzdF9kb2N1bWVudHNfU2VudGVuY2U+IHwgbnVsbD4pXG4gICAgfCB1bmRlZmluZWRcbiAgZXZlbnRzPzpcbiAgICB8ICgoQXJyYXk8c3RfZG9jdW1lbnRzX1RleHRFdmVudD4gfCBudWxsKSB8IEFycmF5PEFycmF5PHN0X2RvY3VtZW50c19UZXh0RXZlbnQ+IHwgbnVsbD4pXG4gICAgfCB1bmRlZmluZWRcbiAgZW50aXRpZXM/OlxuICAgIHwgKChBcnJheTxzdF9kb2N1bWVudHNfVGV4dEVudGl0eT4gfCBudWxsKSB8IEFycmF5PEFycmF5PHN0X2RvY3VtZW50c19UZXh0RW50aXR5PiB8IG51bGw+KVxuICAgIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2RvY3VtZW50c19UZXh0VHlwZUVudW0gPSBcIkhFQURJTkdcIiB8IFwiRk9PVEVSXCIgfCBcIkhFQURFUlwiXG50eXBlIHN0X2RvY3VtZW50c19Ob3JtYWxpemVkQ29vcmRpbmF0ZXMgPSBQYXJ0aWFsPHtcbiAgcGFnZTogKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD5cbiAgbGVmdDogKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD5cbiAgdG9wOiAobnVtYmVyIHwgbnVsbCkgfCBBcnJheTxudW1iZXIgfCBudWxsPlxuICByaWdodDogKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD5cbiAgYm90dG9tOiAobnVtYmVyIHwgbnVsbCkgfCBBcnJheTxudW1iZXIgfCBudWxsPlxufT5cbnR5cGUgc3RfZG9jdW1lbnRzX01hcmtlcnMgPSB7XG4gIHN1cGVyX3NjcmlwdDogc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHRcbiAgc3ViX3NjcmlwdDogc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHRcbn1cbnR5cGUgc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHQgPSBQYXJ0aWFsPHtcbiAgc3RhcnQ6IChudW1iZXIgfCBudWxsKSB8IEFycmF5PG51bWJlciB8IG51bGw+XG4gIGVuZDogKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD5cbn0+XG50eXBlIHN0X2RvY3VtZW50c19GYWN0c2V0VHJhbnNjcmlwdFRleHQgPSB7XG4gIHR5cGU6IHN0cmluZ1xuICBzZWN0aW9uX25hbWU6IHN0cmluZ1xuICBzcGVha2VyX2lkOiBzdHJpbmdcbiAgc3BlZWNoX3R5cGU6IHN0cmluZ1xufVxudHlwZSBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQgPSB7XG4gIHR5cGU6IHN0cmluZ1xuICBkb2N1bWVudF90eXBlPzogKChzdHJpbmcgfCBudWxsKSB8IEFycmF5PHN0cmluZyB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBmaWxlX25hbWU6IHN0cmluZ1xuICBzZXF1ZW5jZTogc3RyaW5nXG4gIG51bWJlcjogc3RyaW5nXG59XG50eXBlIHN0X2RvY3VtZW50c19TZWN0aW9uID0ge1xuICBuYW1lOiBzdHJpbmdcbiAgc3RhcnQ/OiAoKG51bWJlciB8IG51bGwpIHwgQXJyYXk8bnVtYmVyIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIGVuZD86ICgobnVtYmVyIHwgbnVsbCkgfCBBcnJheTxudW1iZXIgfCBudWxsPikgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfZG9jdW1lbnRzX1NlbnRlbmNlID0ge1xuICBzdGFydDogbnVtYmVyXG4gIGVuZDogbnVtYmVyXG4gIHNlbnRpbWVudD86ICgoc3RyaW5nIHwgbnVsbCkgfCBBcnJheTxzdHJpbmcgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgc2VudGltZW50X2NvbmZpZGVuY2U/OiAoKHN0cmluZyB8IG51bGwpIHwgQXJyYXk8c3RyaW5nIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2RvY3VtZW50c19UZXh0RXZlbnQgPSB7XG4gIGV2ZW50X3NpbWlsYXJpdHlfa2V5OiBzdHJpbmdcbiAgc3RhcnQ6IG51bWJlclxuICBlbmQ6IG51bWJlclxufVxudHlwZSBzdF9kb2N1bWVudHNfVGV4dEVudGl0eSA9IHtcbiAgcnBfZW50aXR5X2lkOiBzdHJpbmdcbiAgc3RhcnQ6IG51bWJlclxuICBlbmQ6IG51bWJlclxufVxudHlwZSBzdF9kb2N1bWVudHNfTGlzdEVudHJ5ID0ge1xuICBrZXk6IHN0cmluZ1xuICBjb250ZW50OiBBcnJheTxcbiAgICB8IChzdF9kb2N1bWVudHNfVGFibGVCbG9jayB8IHN0X2RvY3VtZW50c19UZXh0QmxvY2sgfCBzdF9kb2N1bWVudHNfTGlzdEJsb2NrKVxuICAgIHwgQXJyYXk8c3RfZG9jdW1lbnRzX1RhYmxlQmxvY2sgfCBzdF9kb2N1bWVudHNfVGV4dEJsb2NrIHwgc3RfZG9jdW1lbnRzX0xpc3RCbG9jaz5cbiAgPlxufVxudHlwZSBzdF9kb2N1bWVudHNfVGFibGVCbG9jayA9IHtcbiAgdHlwZTogc3RyaW5nXG4gIHJvd3M6IEFycmF5PHN0X2RvY3VtZW50c19UYWJsZVJvdz5cbiAgc2VjdGlvbnM/OlxuICAgIHwgKChBcnJheTxzdF9kb2N1bWVudHNfU2VjdGlvbj4gfCBudWxsKSB8IEFycmF5PEFycmF5PHN0X2RvY3VtZW50c19TZWN0aW9uPiB8IG51bGw+KVxuICAgIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X2RvY3VtZW50c19UYWJsZUNlbGwgPSBQYXJ0aWFsPHtcbiAgdHlwZTogKHN0X2RvY3VtZW50c19UYWJsZUNlbGxUeXBlIHwgbnVsbCkgfCBBcnJheTxzdF9kb2N1bWVudHNfVGFibGVDZWxsVHlwZSB8IG51bGw+XG4gIHJvd3NwYW46IChudW1iZXIgfCBudWxsKSB8IEFycmF5PG51bWJlciB8IG51bGw+XG4gIGNvbHNwYW46IChudW1iZXIgfCBudWxsKSB8IEFycmF5PG51bWJlciB8IG51bGw+XG4gIGNvbnRlbnQ6XG4gICAgfCAoQXJyYXk8XG4gICAgICAgIHwgKHN0X2RvY3VtZW50c19UYWJsZUJsb2NrIHwgc3RfZG9jdW1lbnRzX1RleHRCbG9jayB8IHN0X2RvY3VtZW50c19MaXN0QmxvY2spXG4gICAgICAgIHwgQXJyYXk8c3RfZG9jdW1lbnRzX1RhYmxlQmxvY2sgfCBzdF9kb2N1bWVudHNfVGV4dEJsb2NrIHwgc3RfZG9jdW1lbnRzX0xpc3RCbG9jaz5cbiAgICAgID4gfCBudWxsKVxuICAgIHwgQXJyYXk8QXJyYXk8XG4gICAgICAgIHwgKHN0X2RvY3VtZW50c19UYWJsZUJsb2NrIHwgc3RfZG9jdW1lbnRzX1RleHRCbG9jayB8IHN0X2RvY3VtZW50c19MaXN0QmxvY2spXG4gICAgICAgIHwgQXJyYXk8c3RfZG9jdW1lbnRzX1RhYmxlQmxvY2sgfCBzdF9kb2N1bWVudHNfVGV4dEJsb2NrIHwgc3RfZG9jdW1lbnRzX0xpc3RCbG9jaz5cbiAgICAgID4gfCBudWxsPlxufT5cbnR5cGUgc3RfZG9jdW1lbnRzX1RhYmxlUm93ID0ge1xuICBjZWxsczogQXJyYXk8c3RfZG9jdW1lbnRzX1RhYmxlQ2VsbD5cbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXQgPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxcbiAgICB8IChcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9JbnB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX0lucHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db25jZXB0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGxhY2VzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1Byb2R1Y3RzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1RvcGljc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NlY3Rpb25NZXRhZGF0YUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdQZXJpb2RFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFByb3ZpZGVyRXhwcmVzc2lvblxuICAgICAgKVxuICAgIHwgQXJyYXk8XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NpbWlsYXJpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fSW5wdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfQW5kRXhwcmVzc2lvbl9JbnB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fSW5wdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQVG9waWNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBQcm92aWRlckV4cHJlc3Npb25cbiAgICAgID5cbiAgPlxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdF91c2VyX3F1ZXJpZXNfTGlzdE9wZXJhdGlvbkVudW0gfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfTGlzdE9wZXJhdGlvbkVudW0gPSBcImluXCIgfCBcImFsbFwiXG50eXBlIHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgZG9jdW1lbnQ/OiAoKHN0cmluZyB8IG51bGwpIHwgQXJyYXk8c3RyaW5nIHwgbnVsbD4pIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdF91c2VyX3F1ZXJpZXNfTGlzdE9wZXJhdGlvbkVudW0gfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgb3BlcmF0aW9uPzogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIGRvY3VtZW50PzogKChzdHJpbmcgfCBudWxsKSB8IEFycmF5PHN0cmluZyB8IG51bGw+KSB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RfdXNlcl9xdWVyaWVzX0RhdGVPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIHZhbHVlOlxuICAgIHwgKHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWwgfCBBcnJheTxzdHJpbmc+KVxuICAgIHwgQXJyYXk8c3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbCB8IEFycmF5PHN0cmluZz4+XG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19EYXRlT3BlcmF0aW9uRW51bSA9IFwiYmV0d2VlblwiXG50eXBlIHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWwgPVxuICB8IFwidG9kYXlcIlxuICB8IFwieWVzdGVyZGF5XCJcbiAgfCBcInRoaXNfd2Vla1wiXG4gIHwgXCJsYXN0X3dlZWtcIlxuICB8IFwibGFzdF9zZXZlbl9kYXlzXCJcbiAgfCBcImxhc3RfdGhpcnR5X2RheXNcIlxuICB8IFwibGFzdF9uaW5ldHlfZGF5c1wiXG4gIHwgXCJ5ZWFyX3RvX2RhdGVcIlxuICB8IFwibGFzdF90d2VsdmVfbW9udGhzXCJcbiAgfCBcImxhc3RfMV9ob3Vyc1wiXG4gIHwgXCJsYXN0XzNfaG91cnNcIlxuICB8IFwibGFzdF82X2hvdXJzXCJcbiAgfCBcImxhc3RfOV9ob3Vyc1wiXG4gIHwgXCJsYXN0XzEyX2hvdXJzXCJcbiAgfCBcImxhc3RfMjRfaG91cnNcIlxuICB8IFwibGFzdF80OF9ob3Vyc1wiXG50eXBlIHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU6IHN0cmluZ1xufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db25jZXB0c0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZTogc3RyaW5nXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19NYWNyb1Byb2R1Y3RzRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlOiBzdHJpbmdcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlOiBzdHJpbmdcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxudW1iZXI+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb24gPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICBvcGVyYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PHN0cmluZz5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgb3BlcmF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIG9wZXJhdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8c3RyaW5nPlxuICB0eXBlPzogc3RyaW5nIHwgdW5kZWZpbmVkXG59XG50eXBlIHN0X3VzZXJfcXVlcmllc19SUFByb3ZpZGVyRXhwcmVzc2lvbiA9IHtcbiAgbWV0YWRhdGE/OiAoKG9iamVjdCB8IG51bGwpIHwgQXJyYXk8b2JqZWN0IHwgbnVsbD4pIHwgdW5kZWZpbmVkXG4gIHZhbHVlOiBBcnJheTxzdHJpbmc+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0ID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8XG4gICAgfCAoXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NpbWlsYXJpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9PdXRwdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQVG9waWNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBQcm92aWRlckV4cHJlc3Npb25cbiAgICAgIClcbiAgICB8IEFycmF5PFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX091dHB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX091dHB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uXG4gICAgICA+XG4gID5cbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fSW5wdXQgPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB2YWx1ZTpcbiAgICB8IChcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0XG4gICAgICApXG4gICAgfCBBcnJheTxcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0XG4gICAgICA+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fT3V0cHV0ID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgdmFsdWU6XG4gICAgfCAoXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX091dHB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0XG4gICAgICApXG4gICAgfCBBcnJheTxcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9PdXRwdXRcbiAgICAgID5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxudHlwZSBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0ID0ge1xuICBtZXRhZGF0YT86ICgob2JqZWN0IHwgbnVsbCkgfCBBcnJheTxvYmplY3QgfCBudWxsPikgfCB1bmRlZmluZWRcbiAgdmFsdWU6IEFycmF5PFxuICAgIHwgKFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX0lucHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uXG4gICAgICApXG4gICAgfCBBcnJheTxcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9JbnB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX0lucHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db25jZXB0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGxhY2VzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1Byb2R1Y3RzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1RvcGljc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NlY3Rpb25NZXRhZGF0YUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdQZXJpb2RFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFByb3ZpZGVyRXhwcmVzc2lvblxuICAgICAgPlxuICA+XG4gIHR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbn1cbnR5cGUgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9PdXRwdXQgPSB7XG4gIG1ldGFkYXRhPzogKChvYmplY3QgfCBudWxsKSB8IEFycmF5PG9iamVjdCB8IG51bGw+KSB8IHVuZGVmaW5lZFxuICB2YWx1ZTogQXJyYXk8XG4gICAgfCAoXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NpbWlsYXJpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0tleXdvcmRFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9PdXRwdXRcbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU291cmNlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQVG9waWNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBQcm92aWRlckV4cHJlc3Npb25cbiAgICAgIClcbiAgICB8IEFycmF5PFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX091dHB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX091dHB1dFxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0XG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvblxuICAgICAgICB8IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb25cbiAgICAgICAgfCBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uXG4gICAgICAgIHwgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uXG4gICAgICA+XG4gID5cbiAgdHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZFxufVxuXG5jb25zdCBzdF9hZ2VudHNfQmFzZUZpbHRlcl9zdHJfID0gelxuICAub2JqZWN0KHsgYWxsX29mOiB6LmFycmF5KHouc3RyaW5nKCkpLCBhbnlfb2Y6IHouYXJyYXkoei5zdHJpbmcoKSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0RhdGVSYW5nZSA9IHpcbiAgLm9iamVjdCh7IHN0YXJ0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLCBlbmQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX1NlbnRpbWVudFBvbGFyaXR5ID0gei5lbnVtKFtcInBvc2l0aXZlXCIsIFwibmVnYXRpdmVcIiwgXCJuZXV0cmFsXCJdKVxuY29uc3Qgc3RfYWdlbnRzX0RvY3VtZW50SWRGaWx0ZXIgPSB6XG4gIC5vYmplY3QoeyB0eXBlOiB6LnN0cmluZygpLCBkb2N1bWVudF9pZHM6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfVHJhbnNjcmlwdFN1YnR5cGUgPSB6LmVudW0oW1xuICBcIkFuYWx5c3QsIEludmVzdG9yIGFuZCBTaGFyZWhvbGRlciBtZWV0aW5nXCIsXG4gIFwiRWFybmluZ3MgQ2FsbFwiLFxuICBcIkdlbmVyYWwgQ29uZmVyZW5jZSBDYWxsXCIsXG4gIFwiR2VuZXJhbCBQcmVzZW50YXRpb25cIixcbiAgXCJHdWlkYW5jZSBDYWxsXCIsXG4gIFwiSW52ZXN0b3IgQ29uZmVyZW5jZSBDYWxsXCIsXG4gIFwiU2FsZXMgYW5kIFJldmVudWUgQ2FsbFwiLFxuICBcIlNoYXJlaG9sZGVycyBNZWV0aW5nXCIsXG4gIFwiU3BlY2lhbCBTaXR1YXRpb24sIE0mQSBhbmQgT3RoZXJcIixcbl0pXG5jb25zdCBzdF9hZ2VudHNfRG9jdW1lbnRUcmFuc2NyaXB0RmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIHN1YnR5cGU6IHoudW5pb24oW3N0X2FnZW50c19UcmFuc2NyaXB0U3VidHlwZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0ZpbGluZ1N1YnR5cGUgPSB6LmVudW0oW1xuICBcIlJOUy1PVEhFUlwiLFxuICBcIlJOUy1TRUMtMTAtS1wiLFxuICBcIlJOUy1TRUMtMTAtUVwiLFxuICBcIlJOUy1TRUMtMjAtRlwiLFxuICBcIlJOUy1TRUMtNi1LXCIsXG4gIFwiUk5TLVNFQy04LUtcIixcbiAgXCJSTlMtU0VDLVMtMVwiLFxuICBcIlJOUy1TRUMtUy0zXCIsXG5dKVxuY29uc3Qgc3RfYWdlbnRzX0RvY3VtZW50RmlsaW5nRmlsdGVyID0gelxuICAub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKSwgc3VidHlwZTogei51bmlvbihbc3RfYWdlbnRzX0ZpbGluZ1N1YnR5cGUsIHoubnVsbCgpXSkub3B0aW9uYWwoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0RvY3VtZW50TmV3c0ZpbHRlciA9IHoub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfRG9jdW1lbnRUcmFuc2NyaXB0UHJlc2VudGF0aW9uRmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIHN1YnR5cGU6IHoudW5pb24oW3N0X2FnZW50c19UcmFuc2NyaXB0U3VidHlwZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX1Byb3ZpZGVyRmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIHByb3ZpZGVyX2lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgZG9jdW1lbnRfdHlwZXM6IHpcbiAgICAgIC51bmlvbihbXG4gICAgICAgIHouYXJyYXkoXG4gICAgICAgICAgei51bmlvbihbXG4gICAgICAgICAgICBzdF9hZ2VudHNfRG9jdW1lbnRUcmFuc2NyaXB0RmlsdGVyLFxuICAgICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICAgICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50TmV3c0ZpbHRlcixcbiAgICAgICAgICAgIHN0X2FnZW50c19Eb2N1bWVudFRyYW5zY3JpcHRQcmVzZW50YXRpb25GaWx0ZXIsXG4gICAgICAgICAgXSksXG4gICAgICAgICksXG4gICAgICAgIHoubnVsbCgpLFxuICAgICAgXSlcbiAgICAgIC5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX1NvdXJjZUZpbHRlciA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VzX2lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgZG9jdW1lbnRfdHlwZXM6IHpcbiAgICAgIC51bmlvbihbXG4gICAgICAgIHouYXJyYXkoXG4gICAgICAgICAgei51bmlvbihbXG4gICAgICAgICAgICBzdF9hZ2VudHNfRG9jdW1lbnRUcmFuc2NyaXB0RmlsdGVyLFxuICAgICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICAgICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50TmV3c0ZpbHRlcixcbiAgICAgICAgICAgIHN0X2FnZW50c19Eb2N1bWVudFRyYW5zY3JpcHRQcmVzZW50YXRpb25GaWx0ZXIsXG4gICAgICAgICAgXSksXG4gICAgICAgICksXG4gICAgICAgIHoubnVsbCgpLFxuICAgICAgXSlcbiAgICAgIC5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIgPSB6XG4gIC5vYmplY3QoeyB0eXBlOiB6LnN0cmluZygpLCB0YWdzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19Eb2NUeXBlRmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIGRvY3VtZW50X3R5cGVzOiB6XG4gICAgICAuYXJyYXkoXG4gICAgICAgIHoudW5pb24oW1xuICAgICAgICAgIHN0X2FnZW50c19Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIsXG4gICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICAgICAgICAgIHN0X2FnZW50c19Eb2N1bWVudE5ld3NGaWx0ZXIsXG4gICAgICAgICAgc3RfYWdlbnRzX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlcixcbiAgICAgICAgICBzdF9hZ2VudHNfRG9jdW1lbnRVc2VyRmlsZUZpbHRlcixcbiAgICAgICAgXSksXG4gICAgICApXG4gICAgICAubWluKDEpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0NvbnRlbnRGaWx0ZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGFueV9vZjogelxuICAgICAgLmFycmF5KFxuICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICBzdF9hZ2VudHNfRG9jdW1lbnRJZEZpbHRlcixcbiAgICAgICAgICBzdF9hZ2VudHNfUHJvdmlkZXJGaWx0ZXIsXG4gICAgICAgICAgc3RfYWdlbnRzX1NvdXJjZUZpbHRlcixcbiAgICAgICAgICBzdF9hZ2VudHNfRG9jVHlwZUZpbHRlcixcbiAgICAgICAgXSksXG4gICAgICApXG4gICAgICAubWluKDEpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfUXVlcnlGaWx0ZXJzID0gelxuICAub2JqZWN0KHtcbiAgICBlbnRpdGllczogei51bmlvbihbc3RfYWdlbnRzX0Jhc2VGaWx0ZXJfc3RyXywgei5udWxsKCldKSxcbiAgICBldmVudHM6IHoudW5pb24oW3N0X2FnZW50c19CYXNlRmlsdGVyX3N0cl8sIHoubnVsbCgpXSksXG4gICAgcGVyaW9kOiB6LnVuaW9uKFtzdF9hZ2VudHNfRGF0ZVJhbmdlLCB6Lm51bGwoKV0pLFxuICAgIHNlbnRpbWVudHM6IHouYXJyYXkoc3RfYWdlbnRzX1NlbnRpbWVudFBvbGFyaXR5KSxcbiAgICBjb250ZW50OiB6LnVuaW9uKFtzdF9hZ2VudHNfQ29udGVudEZpbHRlciwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX1NlYXJjaFRvb2xDb25maWcgPSB6XG4gIC5vYmplY3QoeyBxdWVyeV9maWx0ZXJzOiB6LnVuaW9uKFtzdF9hZ2VudHNfUXVlcnlGaWx0ZXJzLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbmNvbnN0IHN0X2FnZW50c19GZXRjaFVybFRvb2xDb25maWcgPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1heF9jaHVua3NfcGVyX2RvY3VtZW50OiB6Lm51bWJlcigpLmludCgpLmRlZmF1bHQoMTAwKSxcbiAgICBtYXhfcXVlcmllczogei5udW1iZXIoKS5pbnQoKS5kZWZhdWx0KDUpLFxuICB9KVxuICAucGFydGlhbCgpXG5jb25zdCBzdF9hZ2VudHNfQ29tcGFueVRlYXJzaGVldFRvb2xDb25maWcgPSB6Lm9iamVjdCh7fSkucGFydGlhbCgpXG5jb25zdCBzdF9hZ2VudHNfUmVmbGVjdFRvb2xDb25maWcgPSB6Lm9iamVjdCh7fSkucGFydGlhbCgpXG5jb25zdCBzdF9hZ2VudHNfQWdlbnRFeGVjdXRlUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgYWN0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkFnZW50RXhlY3V0ZVJlcXVlc3RcIiksXG4gICAgY2hhdElkOiB6LnN0cmluZygpLFxuICAgIGlucHV0TWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgcmVxdWVzdFR5cGU6IHouZW51bShbXCJyZXNlYXJjaFwiLCBcImNoYXRcIl0pLm9wdGlvbmFsKCkuZGVmYXVsdChcImNoYXRcIiksXG4gICAgdG9vbHNDb25maWdzOiB6XG4gICAgICAucmVjb3JkKFxuICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICBzdF9hZ2VudHNfU2VhcmNoVG9vbENvbmZpZyxcbiAgICAgICAgICBzdF9hZ2VudHNfRmV0Y2hVcmxUb29sQ29uZmlnLFxuICAgICAgICAgIHN0X2FnZW50c19Db21wYW55VGVhcnNoZWV0VG9vbENvbmZpZyxcbiAgICAgICAgICBzdF9hZ2VudHNfUmVmbGVjdFRvb2xDb25maWcsXG4gICAgICAgIF0pLFxuICAgICAgKVxuICAgICAgLm9wdGlvbmFsKCksXG4gICAgb25seVNlYXJjaEF1ZGl0OiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQodHJ1ZSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfQWN0aW9uV1NSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJBQ1RJT05cIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b29sTmFtZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHRvb2xBcmd1bWVudHM6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5zdHJpbmcoKV0pLm9wdGlvbmFsKCksXG4gICAgYWN0aW9uQXVkaXRzSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19UaGlua2luZ1dTUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiVEhJTktJTkdcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIHRoaW5raW5nSWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19BbnN3ZXJXU1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkFOU1dFUlwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgXCJ4LWFtei1yZXF1ZXN0aWRcIjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgYW5zd2VySWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19FcnJvcldTUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiRVJST1JcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlcnJvcjogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19UcmFjZVF1ZXJ5ID0gelxuICAub2JqZWN0KHtcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIGZpbHRlcnM6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0NodW5rU2VudGVuY2UgPSB6XG4gIC5vYmplY3QoeyBwbnVtOiB6Lm51bWJlcigpLmludCgpLCBzbnVtOiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfQm91bmRpbmdCb3ggPSB6XG4gIC5vYmplY3Qoe1xuICAgIGJvdHRvbTogei5udW1iZXIoKSxcbiAgICBsZWZ0OiB6Lm51bWJlcigpLFxuICAgIHBhZ2U6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmlnaHQ6IHoubnVtYmVyKCksXG4gICAgdG9wOiB6Lm51bWJlcigpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX1RyYWNlUmVzdWx0Q2h1bmsgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIGNudW06IHoubnVtYmVyKCkuaW50KCksXG4gICAgdGV4dDogei5zdHJpbmcoKSxcbiAgICBzZW50ZW5jZXM6IHouYXJyYXkoc3RfYWdlbnRzX0NodW5rU2VudGVuY2UpLFxuICAgIHJlbGV2YW5jZTogei5udW1iZXIoKSxcbiAgICBib3VuZGluZ0JveGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2FnZW50c19Cb3VuZGluZ0JveCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19UcmFjZVJlc3VsdENRU1N0b3J5ID0gelxuICAub2JqZWN0KHtcbiAgICBkb2N1bWVudFNjb3BlOiB6LnN0cmluZygpLFxuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIGxhbmd1YWdlOiB6LnN0cmluZygpLFxuICAgIGNodW5rczogei51bmlvbihbei5hcnJheShzdF9hZ2VudHNfVHJhY2VSZXN1bHRDaHVuayksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzcmNLZXk6IHouc3RyaW5nKCksXG4gICAgc3JjTmFtZTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VSYW5rOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgxMCksXG4gICAgdHM6IHouc3RyaW5nKCksXG4gICAgY29udGVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkb2N1bWVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB1cmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycFByb3ZpZGVySWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19BdWRpdFRyYWNlQ1FTUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkNRU1wiKSxcbiAgICB2YWx1ZXM6IHouYXJyYXkoc3RfYWdlbnRzX1RyYWNlUmVzdWx0Q1FTU3RvcnkpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0V4dGVybmFsU291cmNlQWN0aW9uID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkVYVEVSTkFMXCIpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgaGQ6IHouc3RyaW5nKCksXG4gICAgdXJsOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCksXG4gICAgZmF2aWNvblVybDogei5zdHJpbmcoKS5taW4oMSkubWF4KDIwODMpLnVybCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0V4dGVybmFsVHJhY2VSZXN1bHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgYWN0aW9uOiBzdF9hZ2VudHNfRXh0ZXJuYWxTb3VyY2VBY3Rpb24sXG4gICAgdHM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6LnJlY29yZCh6LnVuaW9uKFt6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpXSkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfQXVkaXRUcmFjZUV4dGVybmFsUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkVYVEVSTkFMXCIpLFxuICAgIHZhbHVlczogei5hcnJheShzdF9hZ2VudHNfRXh0ZXJuYWxUcmFjZVJlc3VsdCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0ID0gelxuICAub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiRU5HSU5FXCIpLCBzcWxRdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfU2VhcmNoQXVkaXRWMSA9IHpcbiAgLm9iamVjdCh7XG4gICAgYXVkaXRUeXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlNlYXJjaEF1ZGl0VjFcIiksXG4gICAgdG9vbElkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInNlYXJjaF90b29sXCIpLFxuICAgIHF1ZXJ5OiBzdF9hZ2VudHNfVHJhY2VRdWVyeSxcbiAgICBxdWVyeUlkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmVzdWx0czogei5hcnJheShcbiAgICAgIHoudW5pb24oW1xuICAgICAgICBzdF9hZ2VudHNfQXVkaXRUcmFjZUNRU1Jlc3VsdCxcbiAgICAgICAgc3RfYWdlbnRzX0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCxcbiAgICAgICAgc3RfYWdlbnRzX0F1ZGl0VHJhY2VFbmdpbmVBSVJlc3VsdCxcbiAgICAgIF0pLFxuICAgICksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfTWFya2Rvd25BdWRpdFYxID0gelxuICAub2JqZWN0KHtcbiAgICBhdWRpdFR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiTWFya2Rvd25BdWRpdFYxXCIpLFxuICAgIHRvb2xJZDogei5zdHJpbmcoKSxcbiAgICB0aXRsZTogei5zdHJpbmcoKSxcbiAgICBjb250ZW50OiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYWdlbnRzX0Jhc2VUb29sQXVkaXRUcmFjZSA9IHpcbiAgLm9iamVjdCh7IGF1ZGl0VHlwZTogei5zdHJpbmcoKSwgdG9vbElkOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hZ2VudHNfVG9vbEF1ZGl0V1NSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJBVURJVFwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgXCJ4LWFtei1yZXF1ZXN0aWRcIjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRyYWNlOiB6LnVuaW9uKFtcbiAgICAgIHN0X2FnZW50c19TZWFyY2hBdWRpdFYxLFxuICAgICAgc3RfYWdlbnRzX01hcmtkb3duQXVkaXRWMSxcbiAgICAgIHN0X2FnZW50c19CYXNlVG9vbEF1ZGl0VHJhY2UsXG4gICAgXSksXG4gICAgYWN0aW9uQXVkaXRzSWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19Db21wbGV0ZVdTUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiQ09NUExFVEVcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FnZW50c19FcnJvclJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKSwgbWVzc2FnZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXBpX2tleXNfR2V0QXBpS2V5ID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBzdHViOiB6LnN0cmluZygpLFxuICAgIHVzZXJfaWQ6IHouc3RyaW5nKCksXG4gICAgb3JnYW5pemF0aW9uX2lkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCksXG4gICAgZW5hYmxlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KHRydWUpLFxuICAgIGRhdGVfY3JlYXRlZDogei5zdHJpbmcoKSxcbiAgICBsYXN0X3VwZGF0ZWQ6IHouc3RyaW5nKCksXG4gICAgY3JlYXRlZF9ieTogei5zdHJpbmcoKSxcbiAgICBtb2RpZmllZF9ieTogei5zdHJpbmcoKSxcbiAgICBsYXN0X3VzZWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FwaV9rZXlzX0JhZFJlcXVlc3RFcnJvciA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQwMCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FwaV9rZXlzX0NyZWF0ZUFwaUtleSA9IHpcbiAgLm9iamVjdCh7IGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm1pbig1KS5tYXgoMTAwMCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FwaV9rZXlzX0NyZWF0ZWRBcGlLZXkgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHN0dWI6IHouc3RyaW5nKCksXG4gICAgdXNlcl9pZDogei5zdHJpbmcoKSxcbiAgICBvcmdhbml6YXRpb25faWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKSxcbiAgICBlbmFibGVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQodHJ1ZSksXG4gICAgZGF0ZV9jcmVhdGVkOiB6LnN0cmluZygpLFxuICAgIGxhc3RfdXBkYXRlZDogei5zdHJpbmcoKSxcbiAgICBjcmVhdGVkX2J5OiB6LnN0cmluZygpLFxuICAgIG1vZGlmaWVkX2J5OiB6LnN0cmluZygpLFxuICAgIGxhc3RfdXNlZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGtleV92YWx1ZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FwaV9rZXlzX0Vycm9yUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hcGlfa2V5c19LZXlFbmFibGVkID0gelxuICAub2JqZWN0KHsgZW5hYmxlZDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hcGlfa2V5c19LZXlEaXNhYmxlZCA9IHpcbiAgLm9iamVjdCh7IGVuYWJsZWQ6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2FwaV9rZXlzX0tleURlbGV0ZWQgPSB6Lm9iamVjdCh7IGlkOiB6LnN0cmluZygpIH0pLnBhc3N0aHJvdWdoKClcbmNvbnN0IHF1ZXJ5ID0gei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBsaW1pdCA9IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KDEwKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXN1bHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGtleTogei5zdHJpbmcoKSxcbiAgICBkZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGVudGl0eVR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIHF1ZXJ5VHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGVEZXNjOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2F0ZWdvcnk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDE6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTE6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTY6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTc6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTg6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTk6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTEwOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdGlja2VyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWx0TmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwUGFja2FnZUlkOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW50aXRsZWQ6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0ID0gelxuICAub2JqZWN0KHsgdmFsdWU6IHouc3RyaW5nKCksIGNvdW50OiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0cyA9IHpcbiAgLm9iamVjdCh7XG4gICAgY2F0ZWdvcnk6IHoudW5pb24oW3ouYXJyYXkoc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldCksIHoubnVsbCgpXSksXG4gICAgZ3JvdXAxOiB6LnVuaW9uKFt6LmFycmF5KHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXQpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwMjogei51bmlvbihbei5hcnJheShzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0KSwgei5udWxsKCldKSxcbiAgICBncm91cDM6IHoudW5pb24oW3ouYXJyYXkoc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldCksIHoubnVsbCgpXSksXG4gICAgZ3JvdXA0OiB6LnVuaW9uKFt6LmFycmF5KHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXQpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwNTogei51bmlvbihbei5hcnJheShzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0KSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgY291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgwKSxcbiAgICBwYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMSksXG4gICAgcmVzdWx0czogei51bmlvbihbXG4gICAgICB6LmFycmF5KHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVzdWx0KSxcbiAgICAgIHouYXJyYXkoc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldCksXG4gICAgICB6Lm51bGwoKSxcbiAgICBdKSxcbiAgICBmYWNldHM6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXRzLCB6Lm51bGwoKV0pLFxuICAgIGV4cGxvcmF0aW9uVmFsdWVzOiB6LnVuaW9uKFtzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0cywgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQmFkUmVxdWVzdEVycm9yID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDAwKSwgbWVzc2FnZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfVW5hdXRob3JpemVkUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLmRlZmF1bHQoNTAwKSxcbiAgICBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuXCIpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0UXVlcnkgPSB6XG4gIC5vYmplY3QoeyBmaWVsZDogei5zdHJpbmcoKSwgdmFsdWU6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0dyb3VwaW5nRGV0YWlscyA9IHpcbiAgLm9iamVjdCh7XG4gICAgZmFjZXRTZWFyY2hRdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBjYXRlZ29yeTogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gICAgZ3JvdXAxOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKSxcbiAgICBncm91cDI6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwMzogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gICAgZ3JvdXA0OiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKSxcbiAgICBncm91cDU6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9XYXRjaGxpc3RBdXRvc3VnZ2VzdFJlcXVlc3QgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHF1ZXJ5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHBlclBhZ2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxMCksXG4gICAgcGFnZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDEpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwMTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDI6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZ3JvdXAzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwNDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDU6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZmFjZXRRdWVyeTogei51bmlvbihbc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldFF1ZXJ5LCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwaW5nRGV0YWlsczogei51bmlvbihbc3RfYXV0b3N1Z2dlc3RfdmVzcGFfR3JvdXBpbmdEZXRhaWxzLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwaW5nRXhwbG9yYXRpb246IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoZmFsc2UpLFxuICAgIGdyb3VwaW5nRmFjZXRzOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBncm91cGluZ0ZhY2V0c1NlYXJjaDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoTGlzdDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBzZWFyY2hCeUlkOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzZWFyY2hCeVRpY2tlcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgd2F0Y2hsaXN0UmVxdWVzdDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgcXVlcnlSZXdyaXRpbmc6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQodHJ1ZSksXG4gICAgdG90YWxQdWJsaWNXZWlnaHQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCg0KSxcbiAgICBwcmVmaXhMZW5ndGg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgzKSxcbiAgICBtYXhFZGl0RGlzdGFuY2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICBycFBhY2thZ2VJZDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBxdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwZXJQYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMTApLFxuICAgIHBhZ2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICBjYXRlZ29yeTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDE6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZ3JvdXAyOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwMzogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDQ6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZ3JvdXA1OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGZhY2V0UXVlcnk6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXRRdWVyeSwgei5udWxsKCldKSxcbiAgICBncm91cGluZ0RldGFpbHM6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0dyb3VwaW5nRGV0YWlscywgei5udWxsKCldKSxcbiAgICBncm91cGluZ0V4cGxvcmF0aW9uOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBncm91cGluZ0ZhY2V0czogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgZ3JvdXBpbmdGYWNldHNTZWFyY2g6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoZmFsc2UpLFxuICAgIHNlYXJjaExpc3Q6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgc2VhcmNoQnlJZDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoQnlUaWNrZXI6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoZmFsc2UpLFxuICAgIHdhdGNobGlzdFJlcXVlc3Q6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoZmFsc2UpLFxuICAgIHF1ZXJ5UmV3cml0aW5nOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KHRydWUpLFxuICAgIHRvdGFsUHVibGljV2VpZ2h0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoNCksXG4gICAgcHJlZml4TGVuZ3RoOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMyksXG4gICAgbWF4RWRpdERpc3RhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMSksXG4gICAgcnBQYWNrYWdlSWQ6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0QmF0Y2hVcGxvYWRSZXF1ZXN0ID0gelxuICAub2JqZWN0KHsgZmlsZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQ29tcGFueUluZm8gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdGlja2VyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGlzaW46IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgY3VzaXA6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgc2Vkb2w6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgbGlzdGluZzogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RFbnRpdGllc01hcHBlZCA9IHpcbiAgLm9iamVjdCh7XG4gICAgY29tcGFueUluZm86IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0NvbXBhbnlJbmZvLFxuICAgIGRhdGE6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVzdWx0LCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEJhdGNoVXBsb2FkUmVzcG9uc2VfSW5wdXQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGVudGl0aWVzOiB6LmFycmF5KHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RW50aXRpZXNNYXBwZWQpLFxuICAgIHRpbWVUYWtlbjogei5udW1iZXIoKS5pbnQoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0Vycm9yQ2xpZW50UmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCksXG4gICAgZXJyb3JDb2RlOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgcmVxdWVzdElkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfUmV0cmlldmFsRGV0YWlscyA9IHpcbiAgLm9iamVjdCh7XG4gICAgcXVlcnk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdGlja2VyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHBlclBhZ2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxMCksXG4gICAgcGFnZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDApLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwMTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDI6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZ3JvdXAzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwNDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBncm91cDU6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgZmFjZXRRdWVyeTogei51bmlvbihbc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldFF1ZXJ5LCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwaW5nRGV0YWlsczogei51bmlvbihbc3RfYXV0b3N1Z2dlc3RfdmVzcGFfR3JvdXBpbmdEZXRhaWxzLCB6Lm51bGwoKV0pLFxuICAgIGdyb3VwaW5nRXhwbG9yYXRpb246IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoZmFsc2UpLFxuICAgIGdyb3VwaW5nRmFjZXRzOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBncm91cGluZ0ZhY2V0c1NlYXJjaDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoTGlzdDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBzZWFyY2hCeUlkOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzZWFyY2hCeVRpY2tlcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoQnlOYW1lVGlja2VyOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICB3YXRjaGxpc3RSZXF1ZXN0OiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBxdWVyeVJld3JpdGluZzogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkuZGVmYXVsdChmYWxzZSksXG4gICAgcnBQYWNrYWdlSWQ6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgcmV0cmlldmFsU3RyYXRlZ3k6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdXNlckNvbnRlbnRPd25lcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcmVmaXhMZW5ndGg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgzKSxcbiAgICBtYXhFZGl0RGlzdGFuY2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICB0aW1lb3V0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLmRlZmF1bHQoXCI0c1wiKSxcbiAgICByZXN0cmljdDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5kZWZhdWx0KFwiYW5hbHl0aWNcIiksXG4gICAgc2VhcmNoQ2hhaW46IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkuZGVmYXVsdChcImRlZmF1bHRcIiksXG4gICAgZ3JvdXBpbmdEZWZhdWx0bWF4Z3JvdXBzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoNTApLFxuICAgIGdyb3VwaW5nRGVmYXVsdG1heGhpdHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxMCksXG4gICAgZ3JvdXBpbmdHbG9iYWxtYXhncm91cHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxMDAwMCksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1JhbmtpbmdEZXRhaWxzID0gelxuICAub2JqZWN0KHtcbiAgICBcInJhbmtpbmcucHJvZmlsZVwiOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLmRlZmF1bHQoXCJhdXRvc3VnZ2VzdF9yYW5rZXJcIiksXG4gICAgXCJpbnB1dC5xdWVyeSh0b3RhbF9uYW1lX3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDAuNSksXG4gICAgXCJpbnB1dC5xdWVyeSh0b3RhbF9hbGlhc2VzX3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDAuNSksXG4gICAgXCJpbnB1dC5xdWVyeSh0b3RhbF9wb3B1bGFyaXR5X3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDEpLFxuICAgIFwiaW5wdXQucXVlcnkodG90YWxfdGlja2VyX3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDEwKSxcbiAgICBcImlucHV0LnF1ZXJ5KHRvdGFsX3NvdXJjZV93ZWlnaHQpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICBcImlucHV0LnF1ZXJ5KG1hdGNoX2Jhc2VkX3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDEpLFxuICAgIFwiaW5wdXQucXVlcnkobmF0aXZlcmFua19iYXNlZF93ZWlnaHQpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICBcImlucHV0LnF1ZXJ5KG9jY19iYXNlZF93ZWlnaHQpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICBcImlucHV0LnF1ZXJ5KHBvcF9tdWx0aXBsaWNhdGlvbl93ZWlnaHQpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCg1MDApLFxuICAgIFwiaW5wdXQucXVlcnkocG9wX3Bvd2VyX3RyYW5zZm9ybV93ZWlnaHQpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgwLjUpLFxuICAgIFwiaW5wdXQucXVlcnkocG9wX2Jhc2UpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxKSxcbiAgICByYW5raW5nTWF0Y2hwaGFzZU1heGhpdHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCg1MDApLFxuICAgIFwiaW5wdXQucXVlcnkodG90YWxfcHVibGljX3dlaWdodClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDQpLFxuICAgIFwiaW5wdXQucXVlcnkocG9wdWxhcml0eV90aHJlc2hvbGRfbGV2ZWwpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgxLjEpLFxuICAgIFwiaW5wdXQucXVlcnkodGlja2VyX3JlZHVjdGlvbl9sZXZlbClcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5kZWZhdWx0KDMuNyksXG4gICAgXCJpbnB1dC5xdWVyeShzb3VyY2Vfc2NvcmUwKVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMC4wMDc1KSxcbiAgICBcImlucHV0LnF1ZXJ5KHNvdXJjZV9zY29yZTEpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgwLjAwNSksXG4gICAgXCJpbnB1dC5xdWVyeShzb3VyY2Vfc2NvcmUyKVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMC4wMDI1KSxcbiAgICBcImlucHV0LnF1ZXJ5KHNvdXJjZV9zY29yZTMpXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkuZGVmYXVsdCgwLjAwMSksXG4gICAgXCJpbnB1dC5xdWVyeShzb3VyY2Vfc2NvcmU0KVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLmRlZmF1bHQoMCksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1Zlc3BhUmVxdWVzdERldGFpbHMgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJldHJpZXZhbERldGFpbHM6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX1JldHJpZXZhbERldGFpbHMsIHoubnVsbCgpXSksXG4gICAgcmFua2luZ0RldGFpbHM6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX1JhbmtpbmdEZXRhaWxzLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Db250ZW50T3duZXIgPSB6XG4gIC5vYmplY3QoeyB1c2VySWQ6IHouc3RyaW5nKCksIGNvbnRlbnRBY2Nlc3NQb2xpY2llczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlV2F0Y2hsaXN0QXV0b3N1Z2dlc3RSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBxdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBlclBhZ2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KDEwKSxcbiAgICBwYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdCgxKSxcbiAgICBjYXRlZ29yeTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwMTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwMjogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwMzogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwNDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwNTogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZhY2V0UXVlcnk6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXRRdWVyeSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwaW5nRGV0YWlsczogei51bmlvbihbc3RfYXV0b3N1Z2dlc3RfdmVzcGFfR3JvdXBpbmdEZXRhaWxzLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXBpbmdFeHBsb3JhdGlvbjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBncm91cGluZ0ZhY2V0czogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBncm91cGluZ0ZhY2V0c1NlYXJjaDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzZWFyY2hMaXN0OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2VhcmNoQnlJZDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzZWFyY2hCeVRpY2tlcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICB3YXRjaGxpc3RSZXF1ZXN0OiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHF1ZXJ5UmV3cml0aW5nOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5vcHRpb25hbCgpLmRlZmF1bHQodHJ1ZSksXG4gICAgdG90YWxQdWJsaWNXZWlnaHQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KDQpLFxuICAgIHByZWZpeExlbmd0aDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLmRlZmF1bHQoMyksXG4gICAgbWF4RWRpdERpc3RhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdCgxKSxcbiAgICBycFBhY2thZ2VJZDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNvbnRlbnRPd25lcjogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQ29udGVudE93bmVyLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfUHJpdmF0ZUF1dG9zdWdnZXN0UmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgcXVlcnk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwZXJQYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdCgxMCksXG4gICAgcGFnZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLmRlZmF1bHQoMSksXG4gICAgY2F0ZWdvcnk6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDE6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDI6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDM6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDQ6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cDU6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmYWNldFF1ZXJ5OiB6LnVuaW9uKFtzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0UXVlcnksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBncm91cGluZ0RldGFpbHM6IHoudW5pb24oW3N0X2F1dG9zdWdnZXN0X3Zlc3BhX0dyb3VwaW5nRGV0YWlscywgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3VwaW5nRXhwbG9yYXRpb246IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgZ3JvdXBpbmdGYWNldHM6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgZ3JvdXBpbmdGYWNldHNTZWFyY2g6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoTGlzdDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNlYXJjaEJ5SWQ6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgc2VhcmNoQnlUaWNrZXI6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgd2F0Y2hsaXN0UmVxdWVzdDogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBxdWVyeVJld3JpdGluZzogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KHRydWUpLFxuICAgIHRvdGFsUHVibGljV2VpZ2h0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdCg0KSxcbiAgICBwcmVmaXhMZW5ndGg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KDMpLFxuICAgIG1heEVkaXREaXN0YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLmRlZmF1bHQoMSksXG4gICAgcnBQYWNrYWdlSWQ6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb250ZW50T3duZXI6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0NvbnRlbnRPd25lcixcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1ByaXZhdGVBdXRvc3VnZ2VzdEJhdGNoVXBsb2FkUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7IGZpbGU6IHouc3RyaW5nKCksIGNvbnRlbnRPd25lcjogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQ29udGVudE93bmVyIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBwYWNrYWdlSWRzID0gei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBzb3VyY2VJZHMgPSB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkucmVnZXgoL15bQS1aMC05XXs2fSQvKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKVxuY29uc3QgZW50aXRsZWQgPSB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBzdF9iZmZfY29udGVudF9jYXRhbG9nX1BhZ2luYXRpb25NZXRhZGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgcGFnZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICBsaW1pdDogei5udW1iZXIoKS5pbnQoKSxcbiAgICB0b3RhbDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBxdWVyeVRpbWU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfU291cmNlTW9kZWwgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgcGFja2FnZUlkczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBlbnRpdGxlZDogei5ib29sZWFuKCksXG4gICAgY2F0ZWdvcnlJZHM6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfY29udGVudF9jYXRhbG9nX0dlbmVyaWNQYWdpbmF0ZWRSZXNwb25zZV9Tb3VyY2VNb2RlbF8gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfUGFnaW5hdGlvbk1ldGFkYXRhLFxuICAgIHJlc3VsdHM6IHouYXJyYXkoc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19Tb3VyY2VNb2RlbCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfY29udGVudF9jYXRhbG9nX0Vycm9yUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfY29udGVudF9jYXRhbG9nX0NvbnRlbnRQYWNrYWdlTW9kZWwgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgc2hvcnREZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBkZXRhaWxlZERlc2NyaXB0aW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYXBwRW5hYmxlZDogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBhcGlFbmFibGVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIGNhdGFsb2dFbmFibGVkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIGxvZ286IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlbnRpdGxlZDogei5ib29sZWFuKCksXG4gICAgc291cmNlQ291bnQ6IHoubnVtYmVyKCkuaW50KCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfY29udGVudF9jYXRhbG9nX0dlbmVyaWNQYWdpbmF0ZWRSZXNwb25zZV9Db250ZW50UGFja2FnZU1vZGVsXyA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YTogc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19QYWdpbmF0aW9uTWV0YWRhdGEsXG4gICAgcmVzdWx0czogei5hcnJheShzdF9iZmZfY29udGVudF9jYXRhbG9nX0NvbnRlbnRQYWNrYWdlTW9kZWwpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCA9IHoub2JqZWN0KHsgZW50aXR5SWRzOiB6LmFycmF5KHouc3RyaW5nKCkpIH0pLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1F1b3RlVG9vbERhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgcHJpY2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgY2hhbmdlUGVyY2VudGFnZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjaGFuZ2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgdm9sdW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRheUxvdzogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBkYXlIaWdoOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHllYXJIaWdoOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHllYXJMb3c6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgbWFya2V0Q2FwOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHByaWNlQXZnNTA6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcHJpY2VBdmcyMDA6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZXhjaGFuZ2U6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgb3Blbjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmV2aW91c0Nsb3NlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHRpbWVzdGFtcDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBjdXJyZW5jeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfUXVvdGVEYXRhVG9vbFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19RdW90ZVRvb2xEYXRhKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDI5KSxcbiAgICBlcnJvckNvZGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiVVBTVFJFQU0tUkFURV9MSU1JVFwiKSxcbiAgICBtZXNzYWdlOiB6XG4gICAgICAuc3RyaW5nKClcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChcIlRvbyBtYW55IHJlcXVlc3RzIHNlbnQgdG8gYW4gdXBzdHJlYW0gZGVwZW5kZW5jeS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDUwMiksXG4gICAgZXJyb3JDb2RlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlVQU1RSRUFNLUZBSUxFRFwiKSxcbiAgICBtZXNzYWdlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlNlcnZpY2UgdW5hdmFpbGFibGUgZHVlIHRvIGFuIHVwc3RyZWFtIGRlcGVuZGVuY3kuXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg1MDMpLFxuICAgIGVycm9yQ29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJEQi1FUlJPUlwiKSxcbiAgICBtZXNzYWdlOiB6XG4gICAgICAuc3RyaW5nKClcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChcIlNlcnZpY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg1MDQpLFxuICAgIGVycm9yQ29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJVUFNUUkVBTS1USU1FT1VUXCIpLFxuICAgIG1lc3NhZ2U6IHpcbiAgICAgIC5zdHJpbmcoKVxuICAgICAgLm9wdGlvbmFsKClcbiAgICAgIC5kZWZhdWx0KFwiUmVxdWVzdCB0byB1cHN0cmVhbSBzZXJ2aWNlIHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQ2hhbmdlVG9vbERhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIFwiMURcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjVEXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgXCIxTVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiM01cIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjZNXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgeXRkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiMVlcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjNZXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgXCI1WVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiMTBZXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgbWF4OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQ2hhbmdlRGF0YVRvb2xSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHJlc3VsdDogei51bmlvbihbei5yZWNvcmQoc3RfYmZmX2RhdGFfdG9vbHNfQ2hhbmdlVG9vbERhdGEpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0Vhcm5pbmdzU3VycHJpc2VEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICByZXBvcnRpbmdEYXRlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGVwc0FjdHVhbDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBlcHNFc3RpbWF0ZWQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcmV2ZW51ZUFjdHVhbDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICByZXZlbnVlRXN0aW1hdGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGxhc3RVcGRhdGVkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGVwc1N1cnByaXNlUGN0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHJldmVudWVTdXJwcmlzZVBjdDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfRWFybmluZ3NTdXJwcmlzZURhdGFUb29sUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyByZXN1bHQ6IHoudW5pb24oW3oucmVjb3JkKHN0X2JmZl9kYXRhX3Rvb2xzX0Vhcm5pbmdzU3VycHJpc2VEYXRhKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19SZWNvbW1lbmRhdGlvbkNvbnNlbnN1cyA9IHouZW51bShbXG4gIFwiU3Ryb25nIEJ1eVwiLFxuICBcIkJ1eVwiLFxuICBcIkhvbGRcIixcbiAgXCJTZWxsXCIsXG4gIFwiU3Ryb25nIFNlbGxcIixcbl0pXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19BbmFseXN0VG9vbERhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0cm9uZ0J1eTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBidXk6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgaG9sZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBzZWxsOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHN0cm9uZ1NlbGw6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgY29uc2Vuc3VzOiB6LnVuaW9uKFtzdF9iZmZfZGF0YV90b29sc19SZWNvbW1lbmRhdGlvbkNvbnNlbnN1cywgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQW5hbHlzdERhdGFUb29sUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyByZXN1bHQ6IHoudW5pb24oW3oucmVjb3JkKHN0X2JmZl9kYXRhX3Rvb2xzX0FuYWx5c3RUb29sRGF0YSksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfUHJpY2VUYXJnZXRUb29sRGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdGFyZ2V0SGlnaDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB0YXJnZXRMb3c6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgdGFyZ2V0Q29uc2Vuc3VzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHRhcmdldE1lZGlhbjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfUHJpY2VUYXJnZXREYXRhVG9vbFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19QcmljZVRhcmdldFRvb2xEYXRhKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19TZW50aW1lbnRCRkZUb29sRGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBkYWlseVNlbnRpbWVudDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNlbnRpbWVudFByZXNzdXJlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWJub3JtYWxNZWRpYUF0dGVudGlvbjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRhdGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19TZW50aW1lbnRCRkZSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHJlc3VsdDogei51bmlvbihbei5yZWNvcmQoc3RfYmZmX2RhdGFfdG9vbHNfU2VudGltZW50QkZGVG9vbERhdGEpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlRvb2xEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICByZXBvcnRlZEN1cnJlbmN5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2lrOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZmlsaW5nRGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGFjY2VwdGVkRGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZpc2NhbFllYXI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwZXJpb2Q6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXZlbnVlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29zdE9mUmV2ZW51ZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGdyb3NzUHJvZml0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmVzZWFyY2hBbmREZXZlbG9wbWVudEV4cGVuc2VzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ2VuZXJhbEFuZEFkbWluaXN0cmF0aXZlRXhwZW5zZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWxsaW5nQW5kTWFya2V0aW5nRXhwZW5zZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWxsaW5nR2VuZXJhbEFuZEFkbWluaXN0cmF0aXZlRXhwZW5zZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvdGhlckV4cGVuc2VzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW5nRXhwZW5zZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb3N0QW5kRXhwZW5zZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuZXRJbnRlcmVzdEluY29tZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGVyZXN0SW5jb21lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaW50ZXJlc3RFeHBlbnNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVwcmVjaWF0aW9uQW5kQW1vcnRpemF0aW9uOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZWJpdGRhOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZWJpdDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5vbk9wZXJhdGluZ0luY29tZUV4Y2x1ZGluZ0ludGVyZXN0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW5nSW5jb21lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxPdGhlckluY29tZUV4cGVuc2VzTmV0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaW5jb21lQmVmb3JlVGF4OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaW5jb21lVGF4RXhwZW5zZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldEluY29tZUZyb21Db250aW51aW5nT3BlcmF0aW9uczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldEluY29tZUZyb21EaXNjb250aW51ZWRPcGVyYXRpb25zOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3RoZXJBZGp1c3RtZW50c1RvTmV0SW5jb21lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0SW5jb21lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0SW5jb21lRGVkdWN0aW9uczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGJvdHRvbUxpbmVOZXRJbmNvbWU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlcHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlcHNEaWx1dGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgd2VpZ2h0ZWRBdmVyYWdlU2hzT3V0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgd2VpZ2h0ZWRBdmVyYWdlU2hzT3V0RGlsOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGF0ZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19JbmNvbWVTdGF0ZW1lbnRCRkZUb29sRGF0YSksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQ2FzaEZsb3dTdGF0ZW1lbnRCRkZUb29sRGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgcmVwb3J0ZWRDdXJyZW5jeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNpazogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZpbGluZ0RhdGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBhY2NlcHRlZERhdGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmaXNjYWxZZWFyOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcGVyaW9kOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0SW5jb21lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVwcmVjaWF0aW9uQW5kQW1vcnRpemF0aW9uOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVmZXJyZWRJbmNvbWVUYXg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzdG9ja0Jhc2VkQ29tcGVuc2F0aW9uOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2hhbmdlSW5Xb3JraW5nQ2FwaXRhbDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGFjY291bnRzUmVjZWl2YWJsZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpbnZlbnRvcnk6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBhY2NvdW50c1BheWFibGVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3RoZXJXb3JraW5nQ2FwaXRhbDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG90aGVyTm9uQ2FzaEl0ZW1zOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0Q2FzaFByb3ZpZGVkQnlPcGVyYXRpbmdBY3Rpdml0aWVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaW52ZXN0bWVudHNJblByb3BlcnR5UGxhbnRBbmRFcXVpcG1lbnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBhY3F1aXNpdGlvbnNOZXQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwdXJjaGFzZXNPZkludmVzdG1lbnRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2FsZXNNYXR1cml0aWVzT2ZJbnZlc3RtZW50czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG90aGVySW52ZXN0aW5nQWN0aXZpdGllczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldENhc2hQcm92aWRlZEJ5SW52ZXN0aW5nQWN0aXZpdGllczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldERlYnRJc3N1YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGxvbmdUZXJtTmV0RGVidElzc3VhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2hvcnRUZXJtTmV0RGVidElzc3VhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0U3RvY2tJc3N1YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldENvbW1vblN0b2NrSXNzdWFuY2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb21tb25TdG9ja0lzc3VhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29tbW9uU3RvY2tSZXB1cmNoYXNlZDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldFByZWZlcnJlZFN0b2NrSXNzdWFuY2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuZXREaXZpZGVuZHNQYWlkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29tbW9uRGl2aWRlbmRzUGFpZDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHByZWZlcnJlZERpdmlkZW5kc1BhaWQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvdGhlckZpbmFuY2luZ0FjdGl2aXRpZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuZXRDYXNoUHJvdmlkZWRCeUZpbmFuY2luZ0FjdGl2aXRpZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlZmZlY3RPZkZvcmV4Q2hhbmdlc09uQ2FzaDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldENoYW5nZUluQ2FzaDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhc2hBdEVuZE9mUGVyaW9kOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2FzaEF0QmVnaW5uaW5nT2ZQZXJpb2Q6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpbmdDYXNoRmxvdzogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhcGl0YWxFeHBlbmRpdHVyZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZyZWVDYXNoRmxvdzogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGluY29tZVRheGVzUGFpZDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGVyZXN0UGFpZDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRhdGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19DYXNoRmxvd1N0YXRlbWVudEJGRlJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19DYXNoRmxvd1N0YXRlbWVudEJGRlRvb2xEYXRhKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19CYWxhbmNlU3RhdGVtZW50QkZGVG9vbERhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJlcG9ydGVkQ3VycmVuY3k6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjaWs6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmaWxpbmdEYXRlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWNjZXB0ZWREYXRlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZmlzY2FsWWVhcjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBlcmlvZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhc2hBbmRDYXNoRXF1aXZhbGVudHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzaG9ydFRlcm1JbnZlc3RtZW50czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhc2hBbmRTaG9ydFRlcm1JbnZlc3RtZW50czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5ldFJlY2VpdmFibGVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWNjb3VudHNSZWNlaXZhYmxlczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG90aGVyUmVjZWl2YWJsZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpbnZlbnRvcnk6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwcmVwYWlkczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG90aGVyQ3VycmVudEFzc2V0czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRvdGFsQ3VycmVudEFzc2V0czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHByb3BlcnR5UGxhbnRFcXVpcG1lbnROZXQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBnb29kd2lsbDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGFuZ2libGVBc3NldHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBnb29kd2lsbEFuZEludGFuZ2libGVBc3NldHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBsb25nVGVybUludmVzdG1lbnRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdGF4QXNzZXRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3RoZXJOb25DdXJyZW50QXNzZXRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxOb25DdXJyZW50QXNzZXRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3RoZXJBc3NldHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbEFzc2V0czogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRvdGFsUGF5YWJsZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBhY2NvdW50UGF5YWJsZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvdGhlclBheWFibGVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWNjcnVlZEV4cGVuc2VzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2hvcnRUZXJtRGVidDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhcGl0YWxMZWFzZU9ibGlnYXRpb25zQ3VycmVudDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRheFBheWFibGVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVmZXJyZWRSZXZlbnVlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3RoZXJDdXJyZW50TGlhYmlsaXRpZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbEN1cnJlbnRMaWFiaWxpdGllczogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGxvbmdUZXJtRGVidDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhcGl0YWxMZWFzZU9ibGlnYXRpb25zTm9uQ3VycmVudDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRlZmVycmVkUmV2ZW51ZU5vbkN1cnJlbnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkZWZlcnJlZFRheExpYWJpbGl0aWVzTm9uQ3VycmVudDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG90aGVyTm9uQ3VycmVudExpYWJpbGl0aWVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxOb25DdXJyZW50TGlhYmlsaXRpZXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvdGhlckxpYWJpbGl0aWVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2FwaXRhbExlYXNlT2JsaWdhdGlvbnM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbExpYWJpbGl0aWVzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdHJlYXN1cnlTdG9jazogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHByZWZlcnJlZFN0b2NrOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29tbW9uU3RvY2s6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXRhaW5lZEVhcm5pbmdzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYWRkaXRpb25hbFBhaWRJbkNhcGl0YWw6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBhY2N1bXVsYXRlZE90aGVyQ29tcHJlaGVuc2l2ZUluY29tZUxvc3M6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvdGhlclRvdGFsU3RvY2tob2xkZXJzRXF1aXR5OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxTdG9ja2hvbGRlcnNFcXVpdHk6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbEVxdWl0eTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1pbm9yaXR5SW50ZXJlc3Q6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbExpYWJpbGl0aWVzQW5kVG90YWxFcXVpdHk6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0b3RhbEludmVzdG1lbnRzOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxEZWJ0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmV0RGVidDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRhdGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19CYWxhbmNlU3RhdGVtZW50QkZGUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyByZXN1bHQ6IHoudW5pb24oW3oucmVjb3JkKHN0X2JmZl9kYXRhX3Rvb2xzX0JhbGFuY2VTdGF0ZW1lbnRCRkZUb29sRGF0YSksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfS2V5TWV0cmljc1Rvb2xEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBtYXJrZXRDYXA6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZW50ZXJwcmlzZVZhbHVlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGV2VG9TYWxlc1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBldlRvT3BlcmF0aW5nQ2FzaEZsb3dUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZXZUb0ZyZWVDYXNoRmxvd1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBldlRvRWJpdGRhVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIG5ldERlYnRUb0ViaXRkYVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjdXJyZW50UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgaW5jb21lUXVhbGl0eVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBncmFoYW1OdW1iZXJUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZ3JhaGFtTmV0TmV0VHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHRheEJ1cmRlblR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBpbnRlcmVzdEJ1cmRlblR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB3b3JraW5nQ2FwaXRhbFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBpbnZlc3RlZENhcGl0YWxUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcmV0dXJuT25Bc3NldHNUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgb3BlcmF0aW5nUmV0dXJuT25Bc3NldHNUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcmV0dXJuT25UYW5naWJsZUFzc2V0c1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICByZXR1cm5PbkVxdWl0eVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICByZXR1cm5PbkludmVzdGVkQ2FwaXRhbFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICByZXR1cm5PbkNhcGl0YWxFbXBsb3llZFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBlYXJuaW5nc1lpZWxkVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZyZWVDYXNoRmxvd1lpZWxkVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNhcGV4VG9PcGVyYXRpbmdDYXNoRmxvd1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjYXBleFRvRGVwcmVjaWF0aW9uVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNhcGV4VG9SZXZlbnVlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNhbGVzR2VuZXJhbEFuZEFkbWluVG9SZXZlbnVlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHJlc2VhcmNoQW5kRGV2ZWxvcG1lbnRUb1JldmVudWVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgc3RvY2tCYXNlZENvbXBlbnNhdGlvblRvUmV2ZW51ZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBpbnRhbmdpYmxlc1RvVG90YWxBc3NldHNUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgYXZlcmFnZVJlY2VpdmFibGVzVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGF2ZXJhZ2VQYXlhYmxlc1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBhdmVyYWdlSW52ZW50b3J5VHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRheXNPZlNhbGVzT3V0c3RhbmRpbmdUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGF5c09mUGF5YWJsZXNPdXRzdGFuZGluZ1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBkYXlzT2ZJbnZlbnRvcnlPdXRzdGFuZGluZ1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBvcGVyYXRpbmdDeWNsZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjYXNoQ29udmVyc2lvbkN5Y2xlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZyZWVDYXNoRmxvd1RvRXF1aXR5VHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZyZWVDYXNoRmxvd1RvRmlybVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB0YW5naWJsZUFzc2V0VmFsdWVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgbmV0Q3VycmVudEFzc2V0VmFsdWVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0tleU1ldHJpY3NEYXRhVG9vbFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19LZXlNZXRyaWNzVG9vbERhdGEpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1JhdGlvc1Rvb2xEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBncm9zc1Byb2ZpdE1hcmdpblR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBlYml0TWFyZ2luVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGViaXRkYU1hcmdpblR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBvcGVyYXRpbmdQcm9maXRNYXJnaW5UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcHJldGF4UHJvZml0TWFyZ2luVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNvbnRpbnVvdXNPcGVyYXRpb25zUHJvZml0TWFyZ2luVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIG5ldFByb2ZpdE1hcmdpblR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBib3R0b21MaW5lUHJvZml0TWFyZ2luVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHJlY2VpdmFibGVzVHVybm92ZXJUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGF5YWJsZXNUdXJub3ZlclR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBpbnZlbnRvcnlUdXJub3ZlclR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBmaXhlZEFzc2V0VHVybm92ZXJUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgYXNzZXRUdXJub3ZlclR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjdXJyZW50UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcXVpY2tSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBzb2x2ZW5jeVJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNhc2hSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZVRvRWFybmluZ3NSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZVRvRWFybmluZ3NHcm93dGhSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBmb3J3YXJkUHJpY2VUb0Vhcm5pbmdzR3Jvd3RoUmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcHJpY2VUb0Jvb2tSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZVRvU2FsZXNSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZVRvRnJlZUNhc2hGbG93UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcHJpY2VUb09wZXJhdGluZ0Nhc2hGbG93UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGVidFRvQXNzZXRzUmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGVidFRvRXF1aXR5UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGVidFRvQ2FwaXRhbFJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGxvbmdUZXJtRGVidFRvQ2FwaXRhbFJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZpbmFuY2lhbExldmVyYWdlUmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgd29ya2luZ0NhcGl0YWxUdXJub3ZlclJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIG9wZXJhdGluZ0Nhc2hGbG93UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgb3BlcmF0aW5nQ2FzaEZsb3dTYWxlc1JhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZyZWVDYXNoRmxvd09wZXJhdGluZ0Nhc2hGbG93UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGVidFNlcnZpY2VDb3ZlcmFnZVJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGludGVyZXN0Q292ZXJhZ2VSYXRpb1R0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBzaG9ydFRlcm1PcGVyYXRpbmdDYXNoRmxvd0NvdmVyYWdlUmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgb3BlcmF0aW5nQ2FzaEZsb3dDb3ZlcmFnZVJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNhcGl0YWxFeHBlbmRpdHVyZUNvdmVyYWdlUmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGl2aWRlbmRQYWlkQW5kQ2FwZXhDb3ZlcmFnZVJhdGlvVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRpdmlkZW5kUGF5b3V0UmF0aW9UdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGl2aWRlbmRZaWVsZFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBlbnRlcnByaXNlVmFsdWVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcmV2ZW51ZVBlclNoYXJlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIG5ldEluY29tZVBlclNoYXJlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGludGVyZXN0RGVidFBlclNoYXJlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNhc2hQZXJTaGFyZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBib29rVmFsdWVQZXJTaGFyZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB0YW5naWJsZUJvb2tWYWx1ZVBlclNoYXJlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNoYXJlaG9sZGVyc0VxdWl0eVBlclNoYXJlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIG9wZXJhdGluZ0Nhc2hGbG93UGVyU2hhcmVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgY2FwZXhQZXJTaGFyZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBmcmVlQ2FzaEZsb3dQZXJTaGFyZVR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBuZXRJbmNvbWVQZXJFYnRUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZWJ0UGVyRWJpdFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZVRvRmFpclZhbHVlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRlYnRUb01hcmtldENhcFR0bTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBlZmZlY3RpdmVUYXhSYXRlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGVudGVycHJpc2VWYWx1ZU11bHRpcGxlVHRtOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRpdmlkZW5kUGVyU2hhcmVUdG06IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1JhdGlvc0RhdGFUb29sUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyByZXN1bHQ6IHoudW5pb24oW3oucmVjb3JkKHN0X2JmZl9kYXRhX3Rvb2xzX1JhdGlvc1Rvb2xEYXRhKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19DdXJyZW5jeVRvb2xEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBjb21wYW55TmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB0cmFkaW5nQ3VycmVuY3k6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgcmVwb3J0aW5nQ3VycmVuY3k6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0N1cnJlbmN5RGF0YVRvb2xSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHJlc3VsdDogei51bmlvbihbei5yZWNvcmQoc3RfYmZmX2RhdGFfdG9vbHNfQ3VycmVuY3lUb29sRGF0YSksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfUGx1c1Njb3JlcyA9IHpcbiAgLm9iamVjdCh7XG4gICAgcGx1c0JtaUJtclNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNCbWlNc2VTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzQm1pUGRsbVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNCbWlQaWNjU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c0JtaVNjbVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNFQXFTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzRUVpU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c0VFbVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNFR2hnZVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNFV2htbVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNFV3dtU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c0hjRWVkaVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNIY0Voc1Njb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNIY0xwU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c0xnQmVTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzTGdDYlNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNMZ0Npcm1TY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzTGdNbHJlU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c0xnU3JtU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c1NjQWFTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzU2NDcFNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHBsdXNTY0N3U2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c1NjRHNTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwbHVzU2NIcmNyU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c1NjUHFzU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c1NjU3BwbFNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9iZmZfZGF0YV90b29sc19QZXJmb3JtYW5jZVNjb3JlcyA9IHpcbiAgLm9iamVjdCh7XG4gICAgZXNnQXZlcmFnZVNjb3JlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGVudmlyb25tZW50YWxTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBnb3Zlcm5hbmNlU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcGx1c1Njb3Jlczogei51bmlvbihbc3RfYmZmX2RhdGFfdG9vbHNfUGx1c1Njb3Jlcywgei5udWxsKCldKSxcbiAgICBzb2NpYWxTY29yZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfRVNHU2NvcmVEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBhc3NldElkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZWNvbm9taWNTZWN0b3I6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpbmR1c3RyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwZXJmb3JtYW5jZVNjb3Jlczogei5yZWNvcmQoc3RfYmZmX2RhdGFfdG9vbHNfUGVyZm9ybWFuY2VTY29yZXMpLFxuICAgIHRpY2tlcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfRVNHU2NvcmVEYXRhVG9vbFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0OiB6LnVuaW9uKFt6LnJlY29yZChzdF9iZmZfZGF0YV90b29sc19FU0dTY29yZURhdGEpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3Q29sdW1uID0gelxuICAub2JqZWN0KHsgZW5kcG9pbnQ6IHouc3RyaW5nKCksIGNvbHVtbktleTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQ3VzdG9tRGF0YVZpZXdSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgY29sdW1uczogei5hcnJheShzdF9iZmZfZGF0YV90b29sc19DdXN0b21EYXRhVmlld0NvbHVtbiksXG4gICAgY3JlYXRlZEF0OiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIHVwZGF0ZWRBdDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3TGlzdFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0czogei5hcnJheShzdF9iZmZfZGF0YV90b29sc19DdXN0b21EYXRhVmlld1Jlc3BvbnNlKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYmZmX2RhdGFfdG9vbHNfQ3JlYXRlQ3VzdG9tRGF0YVZpZXdSZXF1ZXN0ID0gelxuICAub2JqZWN0KHsgY29sdW1uczogei5hcnJheShzdF9iZmZfZGF0YV90b29sc19DdXN0b21EYXRhVmlld0NvbHVtbikubWluKDEpLm1heCg1MCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JmZl9kYXRhX3Rvb2xzX1VwZGF0ZUN1c3RvbURhdGFWaWV3UmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7IGNvbHVtbnM6IHoudW5pb24oW3ouYXJyYXkoc3RfYmZmX2RhdGFfdG9vbHNfQ3VzdG9tRGF0YVZpZXdDb2x1bW4pLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JyaWVmc19EZWxpdmVyeURlc3RpbmF0aW9uID0gei5saXRlcmFsKFwiZW1haWxcIilcbmNvbnN0IHN0X2JyaWVmc19XZWVrRGF5ID0gei5lbnVtKFtcIm1vblwiLCBcInR1ZVwiLCBcIndlZFwiLCBcInRodVwiLCBcImZyaVwiLCBcInNhdFwiLCBcInN1blwiXSlcbmNvbnN0IHN0X2JyaWVmc19TY2hlZHVsZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZGF5czogei5hcnJheShzdF9icmllZnNfV2Vla0RheSksXG4gICAgdGltZXpvbmU6IHouc3RyaW5nKCksXG4gICAgaG91cjogei5udW1iZXIoKS5pbnQoKSxcbiAgICBtaW51dGU6IHoubnVtYmVyKCkuaW50KCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9icmllZnNfQnJpZWZDb25maWdSZXNwb25zZV9JbnB1dCA9IHpcbiAgLm9iamVjdCh7XG4gICAgYnJpZWZOYW1lOiB6LnN0cmluZygpLFxuICAgIHdhdGNobGlzdElkczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBkZWxpdmVyeU1vZGVzOiB6LmFycmF5KHN0X2JyaWVmc19EZWxpdmVyeURlc3RpbmF0aW9uKSxcbiAgICBzY2hlZHVsZTogc3RfYnJpZWZzX1NjaGVkdWxlLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICBlbWFpbDogei5zdHJpbmcoKSxcbiAgICBkYXRlQ3JlYXRlZDogei5zdHJpbmcoKSxcbiAgICBsYXN0VXBkYXRlZDogei5zdHJpbmcoKSxcbiAgICBvdmVydmlldzogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYnJpZWZzX0xpc3RCcmllZkNvbmZpZ3NSZXNwb25zZV9JbnB1dCA9IHpcbiAgLm9iamVjdCh7IHJlc3VsdHM6IHouYXJyYXkoc3RfYnJpZWZzX0JyaWVmQ29uZmlnUmVzcG9uc2VfSW5wdXQpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9icmllZnNfRXJyb3JSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JyaWVmc19CcmllZkNvbmZpZ1BheWxvYWQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGJyaWVmTmFtZTogei5zdHJpbmcoKSxcbiAgICB3YXRjaGxpc3RJZHM6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgZGVsaXZlcnlNb2Rlczogei5hcnJheShzdF9icmllZnNfRGVsaXZlcnlEZXN0aW5hdGlvbiksXG4gICAgc2NoZWR1bGU6IHN0X2JyaWVmc19TY2hlZHVsZSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JyaWVmc19CcmllZlJlcG9ydEVudGl0eUluZm8gPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLmRlZmF1bHQoXCJcIiksXG4gICAgbmFtZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICAgIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLmRlZmF1bHQoXCJcIiksXG4gICAgZW50aXR5VHlwZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICAgIGNvbXBhbnlUeXBlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJcIiksXG4gICAgY291bnRyeTogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICAgIHNlY3Rvcjogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICAgIGluZHVzdHJ5R3JvdXA6IHouc3RyaW5nKCkuZGVmYXVsdChcIlwiKSxcbiAgICBpbmR1c3RyeTogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICAgIHRpY2tlcjogei5zdHJpbmcoKS5kZWZhdWx0KFwiXCIpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9icmllZnNfU2luZ2xlRW50aXR5UmVwb3J0ID0gelxuICAub2JqZWN0KHtcbiAgICBlbnRpdHlJZDogei5zdHJpbmcoKSxcbiAgICBlbnRpdHlJbmZvOiBzdF9icmllZnNfQnJpZWZSZXBvcnRFbnRpdHlJbmZvLFxuICAgIGNsZWFuRmluYWxSZXBvcnQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9icmllZnNfQ2h1bmtIaWdobGlnaHQgPSB6XG4gIC5vYmplY3QoeyBwbnVtOiB6Lm51bWJlcigpLmludCgpLCBzbnVtOiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9icmllZnNfU291cmNlUmVmZXJlbmNlID0gelxuICAub2JqZWN0KHtcbiAgICByZWZJZDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBkb2N1bWVudElkOiB6LnN0cmluZygpLFxuICAgIGhlYWRsaW5lOiB6LnN0cmluZygpLFxuICAgIHNvdXJjZUtleTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VOYW1lOiB6LnN0cmluZygpLFxuICAgIHNvdXJjZVJhbms6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycFByb3ZpZGVySWQ6IHouc3RyaW5nKCksXG4gICAgdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2h1bmtJZDogei5udW1iZXIoKS5pbnQoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIGhpZ2hsaWdodHM6IHouYXJyYXkoc3RfYnJpZWZzX0NodW5rSGlnaGxpZ2h0KSxcbiAgICBpbWFnZVVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRzOiB6LnN0cmluZygpLFxuICAgIGRvY3VtZW50U2NvcGU6IHouc3RyaW5nKCksXG4gICAgbGFuZ3VhZ2U6IHouc3RyaW5nKCksXG4gICAgY29udGVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JyaWVmc19SZXBvcnRTb3VyY2VzX0lucHV0ID0gei5yZWNvcmQoc3RfYnJpZWZzX1NvdXJjZVJlZmVyZW5jZSlcbmNvbnN0IHN0X2JyaWVmc19CcmllZlJlcG9ydFJlc3BvbnNlX0lucHV0ID0gelxuICAub2JqZWN0KHtcbiAgICB3YXRjaGxpc3RJZDogei5zdHJpbmcoKSxcbiAgICB3YXRjaGxpc3ROYW1lOiB6LnN0cmluZygpLFxuICAgIHJlcG9ydFRpdGxlOiB6LnN0cmluZygpLFxuICAgIHJlcG9ydERhdGU6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gICAgaW50cm9kdWN0aW9uOiB6LnN0cmluZygpLFxuICAgIGVudGl0eVJlcG9ydHM6IHouYXJyYXkoc3RfYnJpZWZzX1NpbmdsZUVudGl0eVJlcG9ydCksXG4gICAgcmVwb3J0SWQ6IHouc3RyaW5nKCksXG4gICAgYnJpZWZJZDogei5zdHJpbmcoKSxcbiAgICBpc0VtcHR5OiB6LmJvb2xlYW4oKSxcbiAgICBzb3VyY2VzOiB6LnVuaW9uKFtzdF9icmllZnNfUmVwb3J0U291cmNlc19JbnB1dCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfYnJpZWZzX0xhdGVzdEJyaWVmUmVwb3J0UmVzcG9uc2VfSW5wdXQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJlcG9ydDogei51bmlvbihbc3RfYnJpZWZzX0JyaWVmUmVwb3J0UmVzcG9uc2VfSW5wdXQsIHoubnVsbCgpXSksXG4gICAgbmV4dFJlcG9ydERhdGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2JyaWVmc19MaXN0QnJpZWZSZXBvcnRzUmVzcG9uc2VfSW5wdXQgPSB6XG4gIC5vYmplY3QoeyByZXN1bHRzOiB6LmFycmF5KHN0X2JyaWVmc19CcmllZlJlcG9ydFJlc3BvbnNlX0lucHV0KSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1NpbWlsYXJpdHlFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImFsbFwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwic2ltaWxhcml0eVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSA9IHouZW51bShbXCJpblwiLCBcImFsbFwiXSlcbmNvbnN0IHN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImtleXdvcmRcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfRW50aXR5RXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImVudGl0eVwiKSxcbiAgICBkb2N1bWVudDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0xhbmd1YWdlRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImxhbmd1YWdlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJzb3VyY2VcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInJwX3RvcGljXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgIG9wZXJhdGlvbjogc3RfY3FzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgZG9jdW1lbnQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19EYXRlT3BlcmF0aW9uRW51bSA9IHoubGl0ZXJhbChcImJldHdlZW5cIilcbmNvbnN0IHN0X2Nxc19EYXRlSW50ZXJ2YWwgPSB6LmVudW0oW1xuICBcInRvZGF5XCIsXG4gIFwieWVzdGVyZGF5XCIsXG4gIFwidGhpc193ZWVrXCIsXG4gIFwibGFzdF93ZWVrXCIsXG4gIFwibGFzdF9zZXZlbl9kYXlzXCIsXG4gIFwibGFzdF90aGlydHlfZGF5c1wiLFxuICBcImxhc3RfbmluZXR5X2RheXNcIixcbiAgXCJ5ZWFyX3RvX2RhdGVcIixcbiAgXCJsYXN0X3R3ZWx2ZV9tb250aHNcIixcbiAgXCJsYXN0XzFfaG91cnNcIixcbiAgXCJsYXN0XzNfaG91cnNcIixcbiAgXCJsYXN0XzZfaG91cnNcIixcbiAgXCJsYXN0XzlfaG91cnNcIixcbiAgXCJsYXN0XzEyX2hvdXJzXCIsXG4gIFwibGFzdF8yNF9ob3Vyc1wiLFxuICBcImxhc3RfNDhfaG91cnNcIixcbl0pXG5jb25zdCBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiZGF0ZVwiKSxcbiAgICBvcGVyYXRpb246IHN0X2Nxc19EYXRlT3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LnVuaW9uKFtzdF9jcXNfRGF0ZUludGVydmFsLCB6LmFycmF5KHouc3RyaW5nKCkpXSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfVGFnc0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJ0YWdzXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX01hY3JvUGVvcGxlRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19NYWNyb1BsYWNlc0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0RvY3VtZW50RXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiZG9jdW1lbnRcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwic2VjdGlvbl9tZXRhZGF0YVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJkb2N1bWVudF90eXBlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJyZXBvcnRpbmdfcGVyaW9kXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJyZXBvcnRpbmdfZW50aXRpZXNcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5udW1iZXIoKS5ndGUoLTEpLmx0ZSgxKSkubWluKDIpLm1heCgyKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInNlbnRpbWVudF9yYW5nZVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJycF9kb2N1bWVudF9zdWJ0eXBlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwicnBfZG9jdW1lbnRfdmVyc2lvblwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInJwX2RvY3VtZW50X3R5cGVcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfUlBQcm92aWRlckV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwicnBfcHJvdmlkZXJcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfT3JFeHByZXNzaW9uOiB6LlpvZFR5cGU8c3RfY3FzX09yRXhwcmVzc2lvbj4gPSB6LmxhenkoKCkgPT5cbiAgelxuICAgIC5vYmplY3Qoe1xuICAgICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgdmFsdWU6IHouYXJyYXkoXG4gICAgICAgIHoudW5pb24oW1xuICAgICAgICAgIHN0X2Nxc19TaW1pbGFyaXR5RXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfS2V5d29yZEV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX05vdEV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0VudGl0eUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfQW5kRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfT3JFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19Tb3VyY2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX01hY3JvUGxhY2VzRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0RvY3VtZW50RXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19UYWdzRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgICAgICBdKSxcbiAgICAgICksXG4gICAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIm9yXCIpLFxuICAgIH0pXG4gICAgLnBhc3N0aHJvdWdoKCksXG4pXG5jb25zdCBzdF9jcXNfQW5kRXhwcmVzc2lvbjogei5ab2RUeXBlPHN0X2Nxc19BbmRFeHByZXNzaW9uPiA9IHoubGF6eSgoKSA9PlxuICB6XG4gICAgLm9iamVjdCh7XG4gICAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImFuZFwiKSxcbiAgICAgIHZhbHVlOiB6LmFycmF5KFxuICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICBzdF9jcXNfU2ltaWxhcml0eUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19Ob3RFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19FbnRpdHlFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19MYW5ndWFnZUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0FuZEV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX09yRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfU291cmNlRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb1BsYWNlc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19NYWNyb1RvcGljc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JQVG9waWNFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1NlY3Rpb25NZXRhZGF0YUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX0RvY3VtZW50VHlwZUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb24sXG4gICAgICAgICAgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF9jcXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X2Nxc19SUFByb3ZpZGVyRXhwcmVzc2lvbixcbiAgICAgICAgXSksXG4gICAgICApLFxuICAgIH0pXG4gICAgLnBhc3N0aHJvdWdoKCksXG4pXG5jb25zdCBzdF9jcXNfTm90RXhwcmVzc2lvbjogei5ab2RUeXBlPHN0X2Nxc19Ob3RFeHByZXNzaW9uPiA9IHoubGF6eSgoKSA9PlxuICB6XG4gICAgLm9iamVjdCh7XG4gICAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICB2YWx1ZTogei51bmlvbihbXG4gICAgICAgIHN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgc3RfY3FzX0VudGl0eUV4cHJlc3Npb24sXG4gICAgICAgIHN0X2Nxc19MYW5ndWFnZUV4cHJlc3Npb24sXG4gICAgICAgIHN0X2Nxc19Tb3VyY2VFeHByZXNzaW9uLFxuICAgICAgICBzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb24sXG4gICAgICAgIHN0X2Nxc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uLFxuICAgICAgICBzdF9jcXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgIHN0X2Nxc19BbmRFeHByZXNzaW9uLFxuICAgICAgICBzdF9jcXNfT3JFeHByZXNzaW9uLFxuICAgICAgXSksXG4gICAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIm5vdFwiKSxcbiAgICB9KVxuICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfY3FzX1NlbnRlbmNlTGFiZWwgPSB6LmVudW0oW1wiYWNjZXB0ZWRcIiwgXCJyZWplY3RlZFwiXSlcbmNvbnN0IHN0X2Nxc19JbnB1dFNlbnRlbmNlID0gelxuICAub2JqZWN0KHtcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIGxhYmVsOiBzdF9jcXNfU2VudGVuY2VMYWJlbC5vcHRpb25hbCgpLFxuICAgIG1ldGFkYXRhOiB6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19TY29wZSA9IHouZW51bShbXG4gIFwiYWxsXCIsXG4gIFwiZmlsaW5nc1wiLFxuICBcInRyYW5zY3JpcHRzXCIsXG4gIFwibmV3c1wiLFxuICBcImZpbGVzXCIsXG4gIFwibWFya2V0X2ludGVsbGlnZW5jZVwiLFxuICBcImVhcm5pbmdzX2NhbGxzXCIsXG5dKVxuY29uc3Qgc3RfY3FzX1NvcnRFbnVtID0gei5lbnVtKFtcInJlbGV2YW5jZVwiLCBcImRhdGVcIiwgXCJkYXRlX2FzY1wiXSlcbmNvbnN0IHN0X2Nxc19SYW5raW5nID0gei5lbnVtKFtcInN0YWJsZVwiLCBcImV4cGVyaW1lbnRhbFwiLCBcInNpbWlsYXJpdHlcIl0pXG5jb25zdCBzdF9jcXNfQ1FTU2VhcmNoQ3Vyc29yUGFnaW5hdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbGltaXQ6IHoubnVtYmVyKCkuaW50KCkuZ3QoMCkubHQoMTAwMSkuZGVmYXVsdCgxMDApLFxuICAgIGN1cnNvcjogei5udW1iZXIoKS5pbnQoKS5ndCgwKS5kZWZhdWx0KDEpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfQ1FTU2VhcmNoT2Zmc2V0UGFnaW5hdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbGltaXQ6IHoubnVtYmVyKCkuaW50KCkuZ3QoMCkubHQoMTAwMSkub3B0aW9uYWwoKS5kZWZhdWx0KDEwMCksXG4gICAgb2Zmc2V0OiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19DUVNDbHVzdGVyaW5nUGFyYW1zID0gelxuICAub2JqZWN0KHtcbiAgICB0aHJlc2hvbGQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgY2x1c3RlcldlaWdodDogei5udW1iZXIoKS5kZWZhdWx0KDMpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1NlYXJjaENoYWluID0gei5lbnVtKFtcImRlZHVwbGljYXRpb25cIiwgXCJjbHVzdGVyaW5nXCIsIFwiZ3JvdXBpbmdcIiwgXCJjbHVzdGVyaW5nLXJlcmFua1wiXSlcbmNvbnN0IHN0X2Nxc19SUFhRdWVyeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgLy8gZXhwcmVzc2lvbjogei5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgICAvLyAgIHN0X2Nxc19TaW1pbGFyaXR5RXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19Ob3RFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX0VudGl0eUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX0FuZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfT3JFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfVGFnc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X2Nxc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgLy8gICBzdF9jcXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfY3FzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgIC8vIF0pLFxuICAgIGV4cHJlc3Npb246IHouYW55KCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X2Nxc19JbnB1dFNlbnRlbmNlKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pLFxuICAgIHNjb3BlOiBzdF9jcXNfU2NvcGUub3B0aW9uYWwoKSxcbiAgICBzb3J0OiBzdF9jcXNfU29ydEVudW0ub3B0aW9uYWwoKSxcbiAgICByYW5raW5nOiBzdF9jcXNfUmFua2luZy5vcHRpb25hbCgpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHBhZ2luYXRpb246IHpcbiAgICAgIC51bmlvbihbc3RfY3FzX0NRU1NlYXJjaEN1cnNvclBhZ2luYXRpb24sIHN0X2Nxc19DUVNTZWFyY2hPZmZzZXRQYWdpbmF0aW9uXSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdCh7IGxpbWl0OiAxMCwgY3Vyc29yOiAxIH0pLFxuICAgIGRhdGU6IHoudW5pb24oW3ouYXJyYXkoei51bmtub3duKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2x1c3RlcmluZ1BhcmFtczogei51bmlvbihbc3RfY3FzX0NRU0NsdXN0ZXJpbmdQYXJhbXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXJhbmtUaHJlc2hvbGQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWFyY2hDaGFpbjogei51bmlvbihbc3RfY3FzX1NlYXJjaENoYWluLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChcImRlZHVwbGljYXRpb25cIiksXG4gICAgaHlicmlkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHJlcmFua0ZyZXNobmVzc1dlaWdodDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzID0gelxuICAub2JqZWN0KHtcbiAgICBjb3ZlcmFnZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICBkb2N1bWVudHM6IHoubnVtYmVyKCkuaW50KCksXG4gICAgZnVsbDogei5ib29sZWFuKCksXG4gICAgbm9kZXM6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmVzdWx0czogei5udW1iZXIoKS5pbnQoKSxcbiAgICByZXN1bHRzRnVsbDogei5udW1iZXIoKS5pbnQoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19WZXNwYVRpbWVNZXRyaWNzID0gelxuICAub2JqZWN0KHsgcXVlcnl0aW1lOiB6Lm51bWJlcigpLCBzdW1tYXJ5ZmV0Y2h0aW1lOiB6Lm51bWJlcigpLCBzZWFyY2h0aW1lOiB6Lm51bWJlcigpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfUXVlcnlSZWxhdGlvbnNoaXAgPSB6LmVudW0oW1wiZGlyZWN0XCIsIFwiaW5kaXJlY3RcIiwgXCJyZXN1bHRcIl0pXG5jb25zdCBzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtID0gelxuICAub2JqZWN0KHtcbiAgICBrZXk6IHouc3RyaW5nKCksXG4gICAgdm9sdW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAxOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAzOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXA0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXA1OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGExOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGEyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGEzOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE1OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE2OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE3OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE4OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGExMDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDI6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDM6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZsYWc6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVzY3JpcHRpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwdWJsaWNhdGlvblR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycFByb3ZpZGVySWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb3VudHJ5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcXVlcnlSZWxhdGlvbnNoaXA6IHoudW5pb24oW3N0X2Nxc19RdWVyeVJlbGF0aW9uc2hpcCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHF1ZXJ5VHlwZTogei5zdHJpbmcoKSxcbiAgICBlbnRpdHlUeXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0Rpc2NvdmVyeVBhbmVsR3JvdXBSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgY292ZXJhZ2U6IHoudW5pb24oW3N0X2Nxc19WZXNwYUNvdmVyYWdlTWV0cmljcywgei5udWxsKCldKSxcbiAgICB0aW1pbmc6IHN0X2Nxc19WZXNwYVRpbWVNZXRyaWNzLFxuICAgIHBsYWNlczogei5hcnJheShzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKS5vcHRpb25hbCgpLFxuICAgIGNvbXBhbmllczogei5hcnJheShzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKS5vcHRpb25hbCgpLFxuICAgIG9yZ2FuaXphdGlvbnM6IHouYXJyYXkoc3RfY3FzX0Rpc2NvdmVyeVBhbmVsSXRlbSkub3B0aW9uYWwoKSxcbiAgICBsYW5ndWFnZXM6IHouYXJyYXkoc3RfY3FzX0Rpc2NvdmVyeVBhbmVsSXRlbSkub3B0aW9uYWwoKSxcbiAgICBwZW9wbGU6IHouYXJyYXkoc3RfY3FzX0Rpc2NvdmVyeVBhbmVsSXRlbSkub3B0aW9uYWwoKSxcbiAgICBzb3VyY2VzOiB6LmFycmF5KHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW0pLm9wdGlvbmFsKCksXG4gICAgcHJvZHVjdHM6IHouYXJyYXkoc3RfY3FzX0Rpc2NvdmVyeVBhbmVsSXRlbSkub3B0aW9uYWwoKSxcbiAgICBjb25jZXB0czogei5hcnJheShzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKS5vcHRpb25hbCgpLFxuICAgIHRvcGljczogei5hcnJheShzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKS5vcHRpb25hbCgpLFxuICAgIHlxbDogei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfQmFkUmVxdWVzdEVycm9yID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDAwKSwgbWVzc2FnZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0VudGl0eUNvb3JkaW5hdGUgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGtleTogei5zdHJpbmcoKSxcbiAgICBzdGFydDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBlbmQ6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcXVlcnlUeXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1NlbnRlbmNlID0gelxuICAub2JqZWN0KHtcbiAgICBwbnVtOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHNudW06IHoubnVtYmVyKCkuaW50KCksXG4gICAgdGV4dDogei5zdHJpbmcoKSxcbiAgICBlbnRpdGllczogei5hcnJheShzdF9jcXNfRW50aXR5Q29vcmRpbmF0ZSksXG4gICAgZGVkdXBsaWNhdGlvbkNvdW50OiB6Lm51bWJlcigpLmludCgpLFxuICAgIGxhYmVsOiB6LnN0cmluZygpLFxuICAgIHJlbGV2YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNlbnRpbWVudDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0NodW5rU2VudGVuY2UgPSB6XG4gIC5vYmplY3QoeyBwbnVtOiB6Lm51bWJlcigpLmludCgpLCBzbnVtOiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfQm91bmRpbmdCb3ggPSB6XG4gIC5vYmplY3Qoe1xuICAgIGJvdHRvbTogei5udW1iZXIoKSxcbiAgICBsZWZ0OiB6Lm51bWJlcigpLFxuICAgIHBhZ2U6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmlnaHQ6IHoubnVtYmVyKCksXG4gICAgdG9wOiB6Lm51bWJlcigpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0NodW5rID0gelxuICAub2JqZWN0KHtcbiAgICBjbnVtOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgZW50aXRpZXM6IHouYXJyYXkoc3RfY3FzX0VudGl0eUNvb3JkaW5hdGUpLFxuICAgIHNlbnRlbmNlczogei5hcnJheShzdF9jcXNfQ2h1bmtTZW50ZW5jZSksXG4gICAgZGVkdXBsaWNhdGlvbkNvdW50OiB6Lm51bWJlcigpLmludCgpLFxuICAgIGxhYmVsOiB6LnN0cmluZygpLFxuICAgIHJlbGV2YW5jZTogei5udW1iZXIoKSxcbiAgICBzZW50aW1lbnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWN0aW9uTWV0YWRhdGE6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzcGVha2VyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYm91bmRpbmdCb3hlczogei51bmlvbihbei5hcnJheShzdF9jcXNfQm91bmRpbmdCb3gpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfQ2x1c3RlclN1bW1hcnkgPSB6XG4gIC5vYmplY3QoeyBuVW5pcXVlU2VudGVuY2VzOiB6Lm51bWJlcigpLmludCgpLCBuVG90YWxTZW50ZW5jZXM6IHoubnVtYmVyKCkuaW50KCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19TdG9yeTogei5ab2RUeXBlPHN0X2Nxc19TdG9yeT4gPSB6LmxhenkoKCkgPT5cbiAgelxuICAgIC5vYmplY3Qoe1xuICAgICAgZG9jdHlwZTogei5zdHJpbmcoKSxcbiAgICAgIGRvY3VtZW50U2NvcGU6IHouc3RyaW5nKCksXG4gICAgICBoZDogei5zdHJpbmcoKSxcbiAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgICAgbGFuZ3VhZ2U6IHouc3RyaW5nKCksXG4gICAgICBzZW50OiB6Lm51bWJlcigpLFxuICAgICAgc2VudGVuY2VzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2Nxc19TZW50ZW5jZSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgIGNodW5rczogei51bmlvbihbei5hcnJheShzdF9jcXNfQ2h1bmspLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICBzcmNLZXk6IHouc3RyaW5nKCksXG4gICAgICBzcmNOYW1lOiB6LnN0cmluZygpLFxuICAgICAgc291cmNlUmFuazogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgdHM6IHouc3RyaW5nKCksXG4gICAgICBzdW1tYXJ5RmVhdHVyZXM6IHoudW5pb24oW3oucmVjb3JkKHoubnVtYmVyKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICByYW5rRmVhdHVyZXM6IHpcbiAgICAgICAgLnVuaW9uKFt6LnJlY29yZCh6Lm51bWJlcigpKSwgei5udWxsKCldKVxuICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAuZGVmYXVsdCh7fSksXG4gICAgICBjb21wdXRlZFJlbGV2YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgY2x1c3Rlcjogei51bmlvbihbei5hcnJheShzdF9jcXNfU3RvcnkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICBjbHVzdGVyU3VtbWFyeTogei51bmlvbihbc3RfY3FzX0NsdXN0ZXJTdW1tYXJ5LCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICBjbHVzdGVyRGV0YWlsczogei51bmlvbihbei5hcnJheSh6Lm51bWJlcigpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgY29udGVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgIHJlcG9ydGluZ0VudGl0aWVzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICByZXBvcnRpbmdQZXJpb2Q6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgIGRvY3VtZW50VHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgcnBQcm92aWRlcklkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICB1cmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfY3FzX0NsdXN0ZXJHZW5lcmFsTWV0cmljcyA9IHpcbiAgLm9iamVjdCh7XG4gICAgaW50cmFDbHVzdGVyVmFyaWFuY2U6IHoubnVtYmVyKCksXG4gICAgaW50ZXJDbHVzdGVyT3ZlcmxhcDogei5udW1iZXIoKSxcbiAgICBzaWxob3VldHRlU2NvcmU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19UcmFpbmluZ1N0YXRpc3RpY3MgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGFjY3VyYWN5R2FtaWZpZWRQZXJmb3JtYW5jZTogei5udW1iZXIoKS5kZWZhdWx0KC0xKSxcbiAgICBhY2N1cmFjeTogei5udW1iZXIoKS5kZWZhdWx0KC0xKSxcbiAgICBhdWM6IHoubnVtYmVyKCkuZGVmYXVsdCgtMSksXG4gICAgcHJlY2lzaW9uOiB6Lm51bWJlcigpLmRlZmF1bHQoLTEpLFxuICAgIGFjY3VyYWN5U3RkOiB6Lm51bWJlcigpLmRlZmF1bHQoLTEpLFxuICAgIGFjY3VyYWN5SGlzdG9ncmFtOiB6LmFycmF5KHoudW5rbm93bigpKS5kZWZhdWx0KFswXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19TZWFyY2hSZXNwb25zZURldGVjdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAga2V5OiB6LnN0cmluZygpLFxuICAgIHJlbGV2YW5jZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgZW50aXR5VHlwZTogei5zdHJpbmcoKSxcbiAgICBxdWVyeVR5cGU6IHouc3RyaW5nKCksXG4gICAgcXVlcnlSZWxhdGlvbnNoaXA6IHoudW5pb24oW3N0X2Nxc19RdWVyeVJlbGF0aW9uc2hpcCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1NlYXJjaFJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBjb3VudDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50Q291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuZXh0Q3Vyc29yOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3Rvcmllczogei5hcnJheShzdF9jcXNfU3RvcnkpLFxuICAgIHlxbDogei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLm9wdGlvbmFsKCksXG4gICAgY2x1c3Rlck1ldHJpY3M6IHoudW5pb24oW3N0X2Nxc19DbHVzdGVyR2VuZXJhbE1ldHJpY3MsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb3ZlcmFnZTogei51bmlvbihbc3RfY3FzX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzLCB6Lm51bGwoKV0pLFxuICAgIHRpbWluZzogc3RfY3FzX1Zlc3BhVGltZU1ldHJpY3MsXG4gICAgdHJhaW5pbmdfc3RhdGlzdGljczogei51bmlvbihbc3RfY3FzX1RyYWluaW5nU3RhdGlzdGljcywgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRldGVjdGlvbnM6IHoudW5pb24oW3ouYXJyYXkoc3RfY3FzX1NlYXJjaFJlc3BvbnNlRGV0ZWN0aW9uKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRocmVzaG9sZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGltYWdlVXJsczogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNodW5rc0NvdW50OiB6Lm51bWJlcigpLmludCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX0VudGl0eSA9IHpcbiAgLm9iamVjdCh7IG5hbWU6IHouc3RyaW5nKCksIHR5cGU6IHouc3RyaW5nKCksIGtleTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfY3FzX1JlcG9ydGluZyA9IHpcbiAgLm9iamVjdCh7IHllYXI6IHoubnVtYmVyKCkuaW50KCksIHF1YXJ0ZXI6IHouc3RyaW5nKCksIGZpc2NhbDogei5ib29sZWFuKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19QZXJpb2QgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXJ0OiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGVuZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICByZXBvcnRpbmc6IHoudW5pb24oW3N0X2Nxc19SZXBvcnRpbmcsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19RdWVyeU1ldGFkYXRhID0gelxuICAub2JqZWN0KHtcbiAgICB0b3BpY3M6IHouYXJyYXkoei5zdHJpbmcoKSkuZGVmYXVsdChbXSksXG4gICAgZW50aXRpZXM6IHouYXJyYXkoc3RfY3FzX0VudGl0eSkuZGVmYXVsdChbXSksXG4gICAgcGVyaW9kOiB6LnVuaW9uKFtzdF9jcXNfUGVyaW9kLCB6Lm51bGwoKV0pLFxuICAgIHBlcnNvbmE6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19Cb2R5X2Fubm90YXRlX3F1ZXJ5X2Nxc19hbm5vdGF0ZV9xdWVyeV9wb3N0ID0gelxuICAub2JqZWN0KHsgYm9keTogc3RfY3FzX1JQWFF1ZXJ5LCBtZXRhZGF0YTogc3RfY3FzX1F1ZXJ5TWV0YWRhdGEgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHRpbWVzdGFtcF91dGMgPSB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKClcbmNvbnN0IHN0X2Nxc19SZXNwb25zZSA9IHoub2JqZWN0KHsgbWVzc2FnZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfUmFua2luZ1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0czogei5hcnJheShzdF9jcXNfUmFua2luZykuZGVmYXVsdChbXCJzdGFibGVcIiwgXCJleHBlcmltZW50YWxcIiwgXCJzaW1pbGFyaXR5XCJdKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfTGFuZ3VhZ2VSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IGlkOiB6LnN0cmluZygpLCBmbGFnOiB6LnN0cmluZygpLCBuYW1lOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9jcXNfTGFuZ3VhZ2VzTGlzdFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0czogei5hcnJheShzdF9jcXNfTGFuZ3VhZ2VSZXNwb25zZSkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19TdWdnZXN0aW9uVHlwZXMgPSB6LmVudW0oW1wiZW50aXR5XCIsIFwicnBfdG9waWNcIiwgXCJsYW5ndWFnZVwiLCBcInNvdXJjZVwiLCBcIm1hY3JvXCJdKVxuY29uc3Qgc3RfY3FzX1N1Z2dlc3Rpb25JdGVtID0gelxuICAub2JqZWN0KHsga2V5OiB6LnN0cmluZygpLCBxdWVyeVR5cGU6IHN0X2Nxc19TdWdnZXN0aW9uVHlwZXMgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW1zQnlJZHNSZXNwb25zZSA9IHoucmVjb3JkKHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW0pXG5jb25zdCBzdF9jcXNfSXNpblZhbHVlcyA9IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSlcbmNvbnN0IHN0X2Nxc19DdXNpcFZhbHVlcyA9IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSlcbmNvbnN0IHN0X2Nxc19TZWRvbFZhbHVlcyA9IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSlcbmNvbnN0IHN0X2Nxc19MaXN0aW5nVmFsdWVzID0gei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWRTb3VyY2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJwX3NvdXJjZV9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHJhbms6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19TaW1wbGlmaWVkVGltZXN0YW1wc1VUQyA9IHpcbiAgLm9iamVjdCh7XG4gICAgcHVibGlzaGVkOiB6LnN0cmluZygpLFxuICAgIHJlY2VwdGlvbjogei5zdHJpbmcoKSxcbiAgICBhbmFseXRpY3M6IHouc3RyaW5nKCksXG4gICAgcmV2aXNpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19TaW1wbGlmaWVkTWV0YWRhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBvcmlnaW5hbF9sYW5ndWFnZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWREb2N1bWVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgcnBfZG9jdW1lbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgc291cmNlOiBzdF9kb2N1bWVudHNfU2ltcGxpZmllZFNvdXJjZSxcbiAgICB0aW1lc3RhbXBzX3V0Yzogc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWRUaW1lc3RhbXBzVVRDLFxuICAgIG1ldGFkYXRhOiBzdF9kb2N1bWVudHNfU2ltcGxpZmllZE1ldGFkYXRhLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0NvbnRlbnRTdGF0cyA9IHpcbiAgLm9iamVjdCh7XG4gICAgYnl0ZV9jb3VudDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCksXG4gICAgd29yZF9jb3VudDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCksXG4gICAgZXh0cmFjdGlvbl9ieXRlX2NvdW50OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfVGV4dFR5cGVFbnVtID0gei5lbnVtKFtcIkhFQURJTkdcIiwgXCJGT09URVJcIiwgXCJIRUFERVJcIl0pXG5jb25zdCBzdF9kb2N1bWVudHNfTm9ybWFsaXplZENvb3JkaW5hdGVzID0gelxuICAub2JqZWN0KHtcbiAgICBwYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGxlZnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgdG9wOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHJpZ2h0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGJvdHRvbTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHQgPSB6XG4gIC5vYmplY3QoeyBzdGFydDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSwgZW5kOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19NYXJrZXJzID0gelxuICAub2JqZWN0KHsgc3VwZXJfc2NyaXB0OiBzdF9kb2N1bWVudHNfTWFya2Vyc1NjcmlwdCwgc3ViX3NjcmlwdDogc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHQgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19GYWN0c2V0VHJhbnNjcmlwdFRleHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgc2VjdGlvbl9uYW1lOiB6LnN0cmluZygpLFxuICAgIHNwZWFrZXJfaWQ6IHouc3RyaW5nKCksXG4gICAgc3BlZWNoX3R5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgZG9jdW1lbnRfdHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZpbGVfbmFtZTogei5zdHJpbmcoKSxcbiAgICBzZXF1ZW5jZTogei5zdHJpbmcoKSxcbiAgICBudW1iZXI6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfU2VjdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBzdGFydDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGVuZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1NlbnRlbmNlID0gelxuICAub2JqZWN0KHtcbiAgICBzdGFydDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCksXG4gICAgZW5kOiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKSxcbiAgICBzZW50aW1lbnQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZW50aW1lbnRfY29uZmlkZW5jZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1RleHRFdmVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgZXZlbnRfc2ltaWxhcml0eV9rZXk6IHouc3RyaW5nKCksXG4gICAgc3RhcnQ6IHoubnVtYmVyKCkuaW50KCkuZ3RlKDApLFxuICAgIGVuZDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfVGV4dEVudGl0eSA9IHpcbiAgLm9iamVjdCh7XG4gICAgcnBfZW50aXR5X2lkOiB6LnN0cmluZygpLm1pbig2KS5tYXgoNiksXG4gICAgc3RhcnQ6IHoubnVtYmVyKCkuaW50KCkuZ3RlKDApLFxuICAgIGVuZDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfVGV4dEJsb2NrID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnVuaW9uKFtzdF9kb2N1bWVudHNfVGV4dFR5cGVFbnVtLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbm9ybWFsaXplZF9jb29yZGluYXRlczogelxuICAgICAgLnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19Ob3JtYWxpemVkQ29vcmRpbmF0ZXMpLCB6Lm51bGwoKV0pXG4gICAgICAub3B0aW9uYWwoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIG1hcmtlcnM6IHoudW5pb24oW3ouYXJyYXkoc3RfZG9jdW1lbnRzX01hcmtlcnMpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYXR0cmlidXRlczogelxuICAgICAgLnVuaW9uKFtzdF9kb2N1bWVudHNfRmFjdHNldFRyYW5zY3JpcHRUZXh0LCBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQsIHoubnVsbCgpXSlcbiAgICAgIC5vcHRpb25hbCgpLFxuICAgIHNlY3Rpb25zOiB6LnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19TZWN0aW9uKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNlbnRlbmNlczogei51bmlvbihbei5hcnJheShzdF9kb2N1bWVudHNfU2VudGVuY2UpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXZlbnRzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19UZXh0RXZlbnQpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW50aXRpZXM6IHoudW5pb24oW3ouYXJyYXkoc3RfZG9jdW1lbnRzX1RleHRFbnRpdHkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfVGFibGVDZWxsVHlwZSA9IHouZW51bShbXCJDRUxMX0hFQURFUlwiLCBcIkNFTExfRk9PVEVSXCJdKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0xpc3RUeXBlID0gei5lbnVtKFtcIkZPUk1cIiwgXCJMSVNUX09SREVSRURcIiwgXCJMSVNUX1VOT1JERVJFRFwiXSlcbmNvbnN0IHN0X2RvY3VtZW50c19MaXN0RW50cnk6IHouWm9kVHlwZTxzdF9kb2N1bWVudHNfTGlzdEVudHJ5PiA9IHoubGF6eSgoKSA9PlxuICB6XG4gICAgLm9iamVjdCh7XG4gICAgICBrZXk6IHouc3RyaW5nKCksXG4gICAgICBjb250ZW50OiB6LmFycmF5KFxuICAgICAgICB6LnVuaW9uKFtzdF9kb2N1bWVudHNfVGFibGVCbG9jaywgc3RfZG9jdW1lbnRzX1RleHRCbG9jaywgc3RfZG9jdW1lbnRzX0xpc3RCbG9ja10pLFxuICAgICAgKSxcbiAgICB9KVxuICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0xpc3RCbG9jazogei5ab2RUeXBlPHN0X2RvY3VtZW50c19MaXN0QmxvY2s+ID0gei5sYXp5KCgpID0+XG4gIHpcbiAgICAub2JqZWN0KHtcbiAgICAgIHR5cGU6IHN0X2RvY3VtZW50c19MaXN0VHlwZSxcbiAgICAgIGVudHJpZXM6IHouYXJyYXkoc3RfZG9jdW1lbnRzX0xpc3RFbnRyeSksXG4gICAgICBzZWN0aW9uczogei51bmlvbihbei5hcnJheShzdF9kb2N1bWVudHNfU2VjdGlvbiksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1RhYmxlQ2VsbDogei5ab2RUeXBlPHN0X2RvY3VtZW50c19UYWJsZUNlbGw+ID0gei5sYXp5KCgpID0+XG4gIHpcbiAgICAub2JqZWN0KHtcbiAgICAgIHR5cGU6IHoudW5pb24oW3N0X2RvY3VtZW50c19UYWJsZUNlbGxUeXBlLCB6Lm51bGwoKV0pLFxuICAgICAgcm93c3Bhbjogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICAgIGNvbHNwYW46IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgICBjb250ZW50OiB6LnVuaW9uKFtcbiAgICAgICAgei5hcnJheSh6LnVuaW9uKFtzdF9kb2N1bWVudHNfVGFibGVCbG9jaywgc3RfZG9jdW1lbnRzX1RleHRCbG9jaywgc3RfZG9jdW1lbnRzX0xpc3RCbG9ja10pKSxcbiAgICAgICAgei5udWxsKCksXG4gICAgICBdKSxcbiAgICB9KVxuICAgIC5wYXJ0aWFsKClcbiAgICAucGFzc3Rocm91Z2goKSxcbilcbmNvbnN0IHN0X2RvY3VtZW50c19UYWJsZVJvdzogei5ab2RUeXBlPHN0X2RvY3VtZW50c19UYWJsZVJvdz4gPSB6LmxhenkoKCkgPT5cbiAgei5vYmplY3QoeyBjZWxsczogei5hcnJheShzdF9kb2N1bWVudHNfVGFibGVDZWxsKSB9KS5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1RhYmxlQmxvY2s6IHouWm9kVHlwZTxzdF9kb2N1bWVudHNfVGFibGVCbG9jaz4gPSB6LmxhenkoKCkgPT5cbiAgelxuICAgIC5vYmplY3Qoe1xuICAgICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICAgIHJvd3M6IHouYXJyYXkoc3RfZG9jdW1lbnRzX1RhYmxlUm93KSxcbiAgICAgIHNlY3Rpb25zOiB6LnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19TZWN0aW9uKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIH0pXG4gICAgLnBhc3N0aHJvdWdoKCksXG4pXG5jb25zdCBzdF9kb2N1bWVudHNfQ29udGVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHM6IHN0X2RvY3VtZW50c19Db250ZW50U3RhdHMsXG4gICAgdGl0bGU6IHN0X2RvY3VtZW50c19UZXh0QmxvY2ssXG4gICAgYm9keTogelxuICAgICAgLnVuaW9uKFtcbiAgICAgICAgei5hcnJheSh6LnVuaW9uKFtzdF9kb2N1bWVudHNfVGV4dEJsb2NrLCBzdF9kb2N1bWVudHNfVGFibGVCbG9jaywgc3RfZG9jdW1lbnRzX0xpc3RCbG9ja10pKSxcbiAgICAgICAgei5udWxsKCksXG4gICAgICBdKVxuICAgICAgLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfUmVjb21tZW5kYXRpb25FbnVtID0gei51bmlvbihbei5saXRlcmFsKC0xKSwgei5saXRlcmFsKDApLCB6LmxpdGVyYWwoMSldKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0FuYWx5dGljRG9jdW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGFuYWx5dGljc192ZXJzaW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYW5hbHl0aWNzX3JldmlzaW9uX251bWJlcjogei5udW1iZXIoKS5pbnQoKSxcbiAgICBkb2N1bWVudF90eXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdGl0bGVfc2ltaWxhcml0eV9rZXk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0aXRsZV9zaW1pbGFyaXR5X2RheXM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkb2N1bWVudF9zaW1pbGFyaXR5X2tleTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50X3NpbWlsYXJpdHlfZGF5czogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50X3NlbnRpbWVudDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50X3NlbnRpbWVudF9jb25maWRlbmNlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29tcG9zaXRlX3NlbnRpbWVudF9zY29yZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNlbnRpbWVudF9pbXBhY3RfcHJvamVjdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHN0b2NrX3RvbmVfc2VudGltZW50OiB6LnVuaW9uKFtzdF9kb2N1bWVudHNfUmVjb21tZW5kYXRpb25FbnVtLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZWFybmluZ3NfdG9uZV9zZW50aW1lbnQ6IHoudW5pb24oW3N0X2RvY3VtZW50c19SZWNvbW1lbmRhdGlvbkVudW0sIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb21tZW50YXJ5X3NlbnRpbWVudDogei51bmlvbihbc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1lcmdlcnNfYWNxdWlzaXRpb25zX3NlbnRpbWVudDogei51bmlvbihbc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNvcnBvcmF0ZV9hY3Rpb25zX3NlbnRpbWVudDogei51bmlvbihbc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGVhcm5pbmdzX3JlbGVhc2Vfc2VudGltZW50OiB6LnVuaW9uKFtzdF9kb2N1bWVudHNfUmVjb21tZW5kYXRpb25FbnVtLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcHJvZHVjdF9rZXk6IHouc3RyaW5nKCksXG4gICAgcmVhbHRpbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkb2N1bWVudF9yZWNvcmRfY291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19Sb2xlRXZlbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJwX2VudGl0eV9pZDogei5zdHJpbmcoKS5taW4oNikubWF4KDYpLFxuICAgIHJvbGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjYXRlZ29yeTogei5zdHJpbmcoKSxcbiAgICB1bml0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZmFjdF9sZXZlbDogei5zdHJpbmcoKSxcbiAgICBycF9wb3NpdGlvbl9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBvc2l0aW9uX25hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycF9zZWdtZW50X2lkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2VnbWVudF9uYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcnBfdGVycml0b3J5X2lkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdGVycml0b3J5X25hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycF9yZWxhdGVkX2VudGl0eV9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJlbGF0ZWRfZW50aXR5X25hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycF9wYXJlbnRfaWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwYXJlbnRfbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwX3ByaW9yX3BhcmVudF9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHByaW9yX3BhcmVudF9uYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmVsYXRpb25zaGlwOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXZlbnRfc2VudGltZW50OiB6LnN0cmluZygpLFxuICAgIGV2ZW50X3Jpc2s6IHouc3RyaW5nKCksXG4gICAgc3VzdGFpbmFiaWxpdHlfc2VudGltZW50OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY3JlZGl0X3NlbnRpbWVudDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGVyZXN0X3JhdGVfc2VudGltZW50OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXZlbnRfZGV0ZWN0aW9uX2Rpc3RhbmNlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcnBfZXZlbnRfZGV0ZWN0ZWRfZW50aXR5X2lkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXZlbnRfZGV0ZWN0ZWRfZW50aXR5X25hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBldmVudF90ZXh0OiB6LnN0cmluZygpLFxuICAgIGRvY3VtZW50X3JlY29yZF9pbmRleDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBtYXRjaF90eXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfQW5hbHl0aWNFdmVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgZXZlbnRfc2ltaWxhcml0eV9rZXk6IHouc3RyaW5nKCksXG4gICAgdG9waWM6IHouc3RyaW5nKCksXG4gICAgZ3JvdXA6IHouc3RyaW5nKCksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBzdWJfdHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGV2YWx1YXRpb25fbWV0aG9kOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWF0dXJpdHk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXBvcnRpbmdfdHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGV2ZW50X3N0YXJ0X2RhdGVfdXRjOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXZlbnRfZW5kX2RhdGVfdXRjOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmVwb3J0aW5nX3BlcmlvZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJlcG9ydGluZ19zdGFydF9kYXRlX3V0Yzogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJlcG9ydGluZ19lbmRfZGF0ZV91dGM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBldmVudF9yZWxldmFuY2U6IHoubnVtYmVyKCkuaW50KCkuZ3RlKDApLmx0ZSgxMDApLFxuICAgIGV2ZW50X3NpbWlsYXJpdHlfZGF5czogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJvbGVzOiB6LmFycmF5KHN0X2RvY3VtZW50c19Sb2xlRXZlbnQpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0FuYWx5dGljRW50aXR5ID0gelxuICAub2JqZWN0KHtcbiAgICBycF9lbnRpdHlfaWQ6IHouc3RyaW5nKCkubWluKDYpLm1heCg2KSxcbiAgICBlbnRpdHlfdHlwZTogei5zdHJpbmcoKSxcbiAgICBlbnRpdHlfbmFtZTogei5zdHJpbmcoKSxcbiAgICBjb3VudHJ5X2NvZGU6IHouc3RyaW5nKCksXG4gICAgZW50aXR5X2hpZXJhcmNoeV9sZXZlbDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBlbnRpdHlfZGV0ZWN0aW9uX3R5cGU6IHouc3RyaW5nKCksXG4gICAgZW50aXR5X2RldGVjdGlvbl9kaXN0YW5jZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICBlbnRpdHlfcmVsZXZhbmNlOiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKS5sdGUoMTAwKSxcbiAgICBlbnRpdHlfc2VudGltZW50OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW50aXR5X3NlbnRpbWVudF9jb25maWRlbmNlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW50aXR5X3RleHRfc2VudGltZW50OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW50aXR5X3RleHRfc2VudF9jb25maWRlbmNlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYW5hbHlzdF9yYXRpbmdzX3NlbnRpbWVudDogei51bmlvbihbc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG11bHRpX3N0b2NrX3NlbnRpbWVudDogei51bmlvbihbc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50X3JlY29yZF9pbmRleDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBycF9wYXJlbnRfaWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwYXJlbnRfbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0FuYWx5dGljID0gelxuICAub2JqZWN0KHtcbiAgICBkb2N1bWVudDogc3RfZG9jdW1lbnRzX0FuYWx5dGljRG9jdW1lbnQsXG4gICAgZXZlbnRzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19BbmFseXRpY0V2ZW50KSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGVudGl0aWVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2RvY3VtZW50c19BbmFseXRpY0VudGl0eSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19TZGtScGpzb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIGRvY3VtZW50OiBzdF9kb2N1bWVudHNfU2ltcGxpZmllZERvY3VtZW50LFxuICAgIGNvbnRlbnQ6IHN0X2RvY3VtZW50c19Db250ZW50LFxuICAgIGFuYWx5dGljczogc3RfZG9jdW1lbnRzX0FuYWx5dGljLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1NvdXJjZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgcnBfY2hhbm5lbF9pZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwX29yZ2FuaXphdGlvbl9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwX2V4dGVybmFsX3NvdXJjZV9pZDogei5zdHJpbmcoKSxcbiAgICBycF9wcm92aWRlcl9pZDogei5zdHJpbmcoKSxcbiAgICBycF9zb3VyY2VfaWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmFuazogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX1RpbWVzdGFtcHNVVEMgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHB1Ymxpc2hlZDogei5zdHJpbmcoKSxcbiAgICByZWNlcHRpb246IHouc3RyaW5nKCksXG4gICAgY3JlYXRpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBsYXN0X21vZGlmaWVkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgYW5hbHl0aWNzOiB6LnN0cmluZygpLFxuICAgIHJldmlzaW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfUmV2aXNpb25NZXRhZGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgY2hhaW5faWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgc2VxdWVuY2VfaWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19Db2xsZWN0aW9uTWV0YWRhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJwX2NvbGxlY3Rpb25faWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgcHJvdmlkZXJfY29sbGVjdGlvbl9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX01ldGFkYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBwcmltYXJ5X2VudGl0eTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm92aWRlcl9kb2N1bWVudF9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm92aWRlcl9maWxlbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm92aWRlcl90aW1lc3RhbXA6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIG1lZGlhX3R5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgb3JpZ2luYWxfbGFuZ3VhZ2U6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgY29weXJpZ2h0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHJldmlzaW9uOiB6LnVuaW9uKFtzdF9kb2N1bWVudHNfUmV2aXNpb25NZXRhZGF0YSwgei5udWxsKCldKSxcbiAgICBjb2Rlczogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKSxcbiAgICBjdXN0b206IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKSxcbiAgICBjb2xsZWN0aW9uOiB6LnVuaW9uKFtzdF9kb2N1bWVudHNfQ29sbGVjdGlvbk1ldGFkYXRhLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfRG9jdW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJwX2RvY3VtZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHNvdXJjZTogc3RfZG9jdW1lbnRzX1NvdXJjZSxcbiAgICB0aW1lc3RhbXBzX3V0Yzogc3RfZG9jdW1lbnRzX1RpbWVzdGFtcHNVVEMsXG4gICAgbWV0YWRhdGE6IHN0X2RvY3VtZW50c19NZXRhZGF0YSxcbiAgICBhcGlfdW5pdHM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19Tb2Z0d2FyZVZlcnNpb25zID0gelxuICAub2JqZWN0KHtcbiAgICBjb2xsZWN0aW9uX2J1aWxkOiB6LnN0cmluZygpLFxuICAgIGNsYXNzaWZpY2F0aW9uX2J1aWxkOiB6LnN0cmluZygpLFxuICAgIG1ldGFkYXRhX2J1aWxkOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZG9jdW1lbnRzX0V4dHJhY3Rpb25TdGFnZVByb2ZpbGluZyA9IHpcbiAgLm9iamVjdCh7XG4gICAgcHJvY2Vzc29yX2luX3RpbWVzdGFtcF91dGM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgcHJvY2Vzc29yX291dF90aW1lc3RhbXBfdXRjOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHRyYW5zbGF0aW9uX2luX3RpbWVzdGFtcF91dGM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdHJhbnNsYXRpb25fb3V0X3RpbWVzdGFtcF91dGM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19Qcm9maWxpbmcgPSB6XG4gIC5vYmplY3QoeyBjb2xsZWN0aW9uOiBzdF9kb2N1bWVudHNfRXh0cmFjdGlvblN0YWdlUHJvZmlsaW5nIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfUnBqc29uID0gelxuICAub2JqZWN0KHtcbiAgICBkb2N1bWVudDogc3RfZG9jdW1lbnRzX0RvY3VtZW50LFxuICAgIHNvZnR3YXJlX3ZlcnNpb25zOiBzdF9kb2N1bWVudHNfU29mdHdhcmVWZXJzaW9ucyxcbiAgICBjb250ZW50OiBzdF9kb2N1bWVudHNfQ29udGVudCxcbiAgICBhbmFseXRpY3M6IHN0X2RvY3VtZW50c19BbmFseXRpYyxcbiAgICBwcm9maWxpbmc6IHoudW5pb24oW3N0X2RvY3VtZW50c19Qcm9maWxpbmcsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19QcmVzaWduZWRVcmxScGpzb24gPSB6Lm9iamVjdCh7IHVybDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19WZXNwYUNvbGxlY3Rpb25Eb2N1bWVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgcnBEb2N1bWVudElkOiB6LnN0cmluZygpLFxuICAgIHRpdGxlOiB6LnN0cmluZygpLFxuICAgIHVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwRG9jdW1lbnRUeXBlOiB6LnN0cmluZygpLFxuICAgIHJwRG9jdW1lbnRTdWJ0eXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcnBDb2xsZWN0aW9uSWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudFR5cGU6IHouc3RyaW5nKCksXG4gICAgcmVwb3J0aW5nUGVyaW9kOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcmVwb3J0aW5nRW50aXRpZXM6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19WZXNwYUVudGl0eSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIGNhdGVnb3J5OiB6LnN0cmluZygpLFxuICAgIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLFxuICAgIHRpY2tlcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGxvZ29Vcmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19WZXNwYUNvbGxlY3Rpb25SZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZG9jdW1lbnRzOiB6LmFycmF5KHN0X2RvY3VtZW50c19WZXNwYUNvbGxlY3Rpb25Eb2N1bWVudCksXG4gICAgZW50aXRpZXM6IHouYXJyYXkoc3RfZG9jdW1lbnRzX1Zlc3BhRW50aXR5KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19EYXRhVG9vbHNBcGlSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBycEVudGl0eUlkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIHN0YXJ0RGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBlbmREYXRlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouZW51bShbXCJlYXJuaW5ncy1jYWxsXCIsIFwiY29uZmVyZW5jZS1jYWxsXCJdKSksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19RdWFydGVyRW50aXR5UmVjb3JkID0gelxuICAub2JqZWN0KHtcbiAgICBjYXRlZ29yeTogei5lbnVtKFtcImVhcm5pbmdzLWNhbGxcIiwgXCJjb25mZXJlbmNlLWNhbGxcIl0pLFxuICAgIHRyYW5zY3JpcHRFdmVudERhdGV0aW1lOiB6LnN0cmluZygpLFxuICAgIHRpdGxlOiB6LnN0cmluZygpLFxuICAgIGZpc2NhbFllYXI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmaXNjYWxQZXJpb2Q6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwcm92aWRlckNvbGxlY3Rpb25JZDogei51bmlvbihbei5udW1iZXIoKSwgei5zdHJpbmcoKV0pLFxuICAgIHByb3ZpZGVyUHJpbWFyeUVudGl0eUlkOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHJwUHJvdmlkZXJJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJRUlRSXCIpLFxuICAgIHVwZGF0ZWRBdDogei5zdHJpbmcoKSxcbiAgICBjcmVhdGVkQXQ6IHouc3RyaW5nKCksXG4gICAgYmFja2xpbmtVcmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2RvY3VtZW50c19EYXRhVG9vbHNBcGlSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHJlc3VsdDogei5yZWNvcmQoei5hcnJheShzdF9kb2N1bWVudHNfUXVhcnRlckVudGl0eVJlY29yZCkpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9ldmVudF90cmFja2VyX1VzZXJFdmVudCA9IHpcbiAgLm9iamVjdCh7IGV2ZW50X25hbWU6IHouc3RyaW5nKCksIHByb3BlcnRpZXM6IHoub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZXZlbnRfdHJhY2tlcl9CYWRSZXF1ZXN0RXJyb3IgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg0MDApLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9maW5hbmNlc19GaW5hbmNlUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7IGVudGl0eUlkczogei5hcnJheSh6LnN0cmluZygpKSwgZmluYW5jaWFsSW5mbzogei5hcnJheSh6LmVudW0oW1wicXVvdGVcIiwgXCJjaGFuZ2VcIl0pKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZmluYW5jZXNfRnVsbFF1b3RlID0gelxuICAub2JqZWN0KHtcbiAgICBzeW1ib2w6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcmljZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjaGFuZ2VQZXJjZW50YWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGNoYW5nZTogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB2b2x1bWU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZGF5TG93OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRheUhpZ2g6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgeWVhckhpZ2g6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgeWVhckxvdzogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBtYXJrZXRDYXA6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgcHJpY2VBdmc1MDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBwcmljZUF2ZzIwMDogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBleGNoYW5nZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBvcGVuOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHByZXZpb3VzQ2xvc2U6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgdGltZXN0YW1wOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9maW5hbmNlc19GdWxsU3RvY2tQcmljZUNoYW5nZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3ltYm9sOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIFwiMURcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjFXXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgXCIxTVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiM01cIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjZNXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgeXRkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiMVlcIjogei51bmlvbihbei5udW1iZXIoKSwgei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBcIjNZXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgXCI1WVwiOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIFwiMTBZXCI6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgbWF4OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9maW5hbmNlc19Qb3NzaWJsZUZpbmFuY2lhbEluZm8gPSB6XG4gIC5vYmplY3Qoe1xuICAgIHF1b3RlOiB6LnVuaW9uKFtzdF9maW5hbmNlc19GdWxsUXVvdGUsIHoubnVsbCgpXSksXG4gICAgY2hhbmdlOiB6LnVuaW9uKFtzdF9maW5hbmNlc19GdWxsU3RvY2tQcmljZUNoYW5nZSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfZmluYW5jZXNfRmluYW5jZVJlc3BvbnNlID0gei5yZWNvcmQoc3RfZmluYW5jZXNfUG9zc2libGVGaW5hbmNpYWxJbmZvKVxuY29uc3Qgc3RfZmluYW5jZXNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQyOSksXG4gICAgZXJyb3JDb2RlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlVQU1RSRUFNLVJBVEVfTElNSVRcIiksXG4gICAgbWVzc2FnZTogelxuICAgICAgLnN0cmluZygpXG4gICAgICAub3B0aW9uYWwoKVxuICAgICAgLmRlZmF1bHQoXCJUb28gbWFueSByZXF1ZXN0cyBzZW50IHRvIGFuIHVwc3RyZWFtIGRlcGVuZGVuY3kuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ZpbmFuY2VzX0Vycm9yUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9maW5hbmNlc19VcHN0cmVhbUZhaWxlZEVycm9yID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg1MDIpLFxuICAgIGVycm9yQ29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJVUFNUUkVBTS1GQUlMRURcIiksXG4gICAgbWVzc2FnZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJTZXJ2aWNlIHVuYXZhaWxhYmxlIGR1ZSB0byBhbiB1cHN0cmVhbSBkZXBlbmRlbmN5LlwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9maW5hbmNlc19EQkNvbm5lY3Rpb25FcnJvciA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNTAzKSxcbiAgICBlcnJvckNvZGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiREItRVJST1JcIiksXG4gICAgbWVzc2FnZTogelxuICAgICAgLnN0cmluZygpXG4gICAgICAub3B0aW9uYWwoKVxuICAgICAgLmRlZmF1bHQoXCJTZXJ2aWNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ZpbHRlclNjb3BlID0gei5lbnVtKFtcInRpdGxlXCIsIFwiYm9keVwiLCBcImFsbFwiXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoRW50aXR5ID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBzY29wZTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWx0ZXJTY29wZS5vcHRpb25hbCgpLFxuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRW50aXR5RmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICBhbGxfb2Y6IHouYXJyYXkoei51bmlvbihbei5zdHJpbmcoKSwgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hFbnRpdHldKSksXG4gICAgYW55X29mOiB6LmFycmF5KHoudW5pb24oW3ouc3RyaW5nKCksIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoRW50aXR5XSkpLFxuICAgIG5vbmVfb2Y6IHouYXJyYXkoei51bmlvbihbei5zdHJpbmcoKSwgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hFbnRpdHldKSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFzZUZpbHRlckl0ZW0gPSB6XG4gIC5vYmplY3QoeyBpZDogei5zdHJpbmcoKSwgc2NvcGU6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRmlsdGVyU2NvcGUub3B0aW9uYWwoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9FdmVudEZpbHRlciA9IHpcbiAgLm9iamVjdCh7XG4gICAgYWxsX29mOiB6LmFycmF5KHoudW5pb24oW3ouc3RyaW5nKCksIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFzZUZpbHRlckl0ZW1dKSksXG4gICAgYW55X29mOiB6LmFycmF5KHoudW5pb24oW3ouc3RyaW5nKCksIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFzZUZpbHRlckl0ZW1dKSksXG4gICAgbm9uZV9vZjogei5hcnJheSh6LnVuaW9uKFt6LnN0cmluZygpLCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0Jhc2VGaWx0ZXJJdGVtXSkpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RhdGVSYW5nZSA9IHpcbiAgLm9iamVjdCh7IHN0YXJ0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLCBlbmQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZW50aW1lbnRQb2xhcml0eSA9IHouZW51bShbXCJwb3NpdGl2ZVwiLCBcIm5lZ2F0aXZlXCIsIFwibmV1dHJhbFwiXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jdW1lbnRJZEZpbHRlciA9IHpcbiAgLm9iamVjdCh7IHR5cGU6IHouc3RyaW5nKCksIGRvY3VtZW50X2lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSkubWF4KDEwMDApIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1RyYW5zY3JpcHRTdWJ0eXBlID0gei5lbnVtKFtcbiAgXCJBbmFseXN0LCBJbnZlc3RvciBhbmQgU2hhcmVob2xkZXIgbWVldGluZ1wiLFxuICBcIkVhcm5pbmdzIENhbGxcIixcbiAgXCJHZW5lcmFsIENvbmZlcmVuY2UgQ2FsbFwiLFxuICBcIkdlbmVyYWwgUHJlc2VudGF0aW9uXCIsXG4gIFwiR3VpZGFuY2UgQ2FsbFwiLFxuICBcIkludmVzdG9yIENvbmZlcmVuY2UgQ2FsbFwiLFxuICBcIlNhbGVzIGFuZCBSZXZlbnVlIENhbGxcIixcbiAgXCJTaGFyZWhvbGRlcnMgTWVldGluZ1wiLFxuICBcIlNwZWNpYWwgU2l0dWF0aW9uLCBNJkEgYW5kIE90aGVyXCIsXG5dKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgc3VidHlwZTogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9UcmFuc2NyaXB0U3VidHlwZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWxpbmdTdWJ0eXBlID0gei5lbnVtKFtcbiAgXCJSTlMtT1RIRVJcIixcbiAgXCJSTlMtU0VDLTEwLUtcIixcbiAgXCJSTlMtU0VDLTEwLVFcIixcbiAgXCJSTlMtU0VDLTIwLUZcIixcbiAgXCJSTlMtU0VDLTYtS1wiLFxuICBcIlJOUy1TRUMtOC1LXCIsXG4gIFwiUk5TLVNFQy1TLTFcIixcbiAgXCJSTlMtU0VDLVMtM1wiLFxuXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jdW1lbnRGaWxpbmdGaWx0ZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgc3VidHlwZTogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWxpbmdTdWJ0eXBlLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50TmV3c0ZpbHRlciA9IHoub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlciA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBzdWJ0eXBlOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1RyYW5zY3JpcHRTdWJ0eXBlLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb3ZpZGVyRmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIHByb3ZpZGVyX2lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSkubWF4KDEwMDApLFxuICAgIGRvY3VtZW50X3R5cGVzOiB6XG4gICAgICAudW5pb24oW1xuICAgICAgICB6LmFycmF5KFxuICAgICAgICAgIHoudW5pb24oW1xuICAgICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIsXG4gICAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICAgICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudE5ld3NGaWx0ZXIsXG4gICAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlcixcbiAgICAgICAgICBdKSxcbiAgICAgICAgKSxcbiAgICAgICAgei5udWxsKCksXG4gICAgICBdKVxuICAgICAgLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvdXJjZUZpbHRlciA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VzX2lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSkubWF4KDEwMDApLFxuICAgIGRvY3VtZW50X3R5cGVzOiB6XG4gICAgICAudW5pb24oW1xuICAgICAgICB6LmFycmF5KFxuICAgICAgICAgIHoudW5pb24oW1xuICAgICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIsXG4gICAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICAgICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudE5ld3NGaWx0ZXIsXG4gICAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlcixcbiAgICAgICAgICBdKSxcbiAgICAgICAgKSxcbiAgICAgICAgei5udWxsKCksXG4gICAgICBdKVxuICAgICAgLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIgPSB6XG4gIC5vYmplY3QoeyB0eXBlOiB6LnN0cmluZygpLCB0YWdzOiB6LmFycmF5KHouc3RyaW5nKCkpLm1heCgxMDAwKS5vcHRpb25hbCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY1R5cGVGaWx0ZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgZG9jdW1lbnRfdHlwZXM6IHpcbiAgICAgIC5hcnJheShcbiAgICAgICAgei51bmlvbihbXG4gICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIsXG4gICAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudEZpbGluZ0ZpbHRlcixcbiAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50TmV3c0ZpbHRlcixcbiAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlcixcbiAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIsXG4gICAgICAgIF0pLFxuICAgICAgKVxuICAgICAgLm1pbigxKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfUGFja2FnZUlkRmlsdGVyID0gelxuICAub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKSwgcGFja2FnZV9pZHM6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLm1heCgxMDAwKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db250ZW50RmlsdGVyID0gelxuICAub2JqZWN0KHtcbiAgICBhbnlfb2Y6IHouYXJyYXkoXG4gICAgICB6LnVuaW9uKFtcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudElkRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb3ZpZGVyRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvdXJjZUZpbHRlcixcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2NUeXBlRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1BhY2thZ2VJZEZpbHRlcixcbiAgICAgIF0pLFxuICAgICksXG4gICAgYWxsX29mOiB6LmFycmF5KFxuICAgICAgei51bmlvbihbXG4gICAgICAgIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jdW1lbnRJZEZpbHRlcixcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Qcm92aWRlckZpbHRlcixcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Tb3VyY2VGaWx0ZXIsXG4gICAgICAgIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jVHlwZUZpbHRlcixcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9QYWNrYWdlSWRGaWx0ZXIsXG4gICAgICBdKSxcbiAgICApLFxuICAgIG5vbmVfb2Y6IHouYXJyYXkoXG4gICAgICB6LnVuaW9uKFtcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudElkRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb3ZpZGVyRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvdXJjZUZpbHRlcixcbiAgICAgICAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2NUeXBlRmlsdGVyLFxuICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1BhY2thZ2VJZEZpbHRlcixcbiAgICAgIF0pLFxuICAgICksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfS2V5d29yZEZpbHRlciA9IHpcbiAgLm9iamVjdCh7XG4gICAgYWxsX29mOiB6LmFycmF5KHoudW5pb24oW3ouc3RyaW5nKCksIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFzZUZpbHRlckl0ZW1dKSksXG4gICAgYW55X29mOiB6LmFycmF5KHoudW5pb24oW3ouc3RyaW5nKCksIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFzZUZpbHRlckl0ZW1dKSksXG4gICAgbm9uZV9vZjogei5hcnJheSh6LnVuaW9uKFt6LnN0cmluZygpLCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0Jhc2VGaWx0ZXJJdGVtXSkpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1BhY2thZ2VGaWx0ZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGFsbF9vZjogei5hcnJheSh6LnVuaW9uKFt6LnN0cmluZygpLCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0Jhc2VGaWx0ZXJJdGVtXSkpLFxuICAgIGFueV9vZjogei5hcnJheSh6LnVuaW9uKFt6LnN0cmluZygpLCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0Jhc2VGaWx0ZXJJdGVtXSkpLFxuICAgIG5vbmVfb2Y6IHouYXJyYXkoei51bmlvbihbei5zdHJpbmcoKSwgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9CYXNlRmlsdGVySXRlbV0pKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9SZXBvcnRpbmdQZXJpb2QgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGZpc2NhbF95ZWFyOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGZpc2NhbF9xdWFydGVyOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1F1ZXJ5RmlsdGVycyA9IHpcbiAgLm9iamVjdCh7XG4gICAgZW50aXRpZXM6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfRW50aXR5RmlsdGVyLCB6Lm51bGwoKV0pLFxuICAgIGV2ZW50czogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9FdmVudEZpbHRlciwgei5udWxsKCldKSxcbiAgICBwZXJpb2Q6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfRGF0ZVJhbmdlLCB6Lm51bGwoKV0pLFxuICAgIHNlbnRpbWVudHM6IHouYXJyYXkoc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZW50aW1lbnRQb2xhcml0eSksXG4gICAgY29udGVudDogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db250ZW50RmlsdGVyLCB6Lm51bGwoKV0pLFxuICAgIGtleXdvcmRzOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0tleXdvcmRGaWx0ZXIsIHoubnVsbCgpXSksXG4gICAgcGFja2FnZXM6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfUGFja2FnZUZpbHRlciwgei5udWxsKCldKSxcbiAgICB2ZXNwYV9yZXF1ZXN0X292ZXJyaWRlOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSksXG4gICAgcmVwb3J0aW5nX2VudGl0aWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm1heCgxMDAwKSxcbiAgICByZXBvcnRpbmdfcGVyaW9kczogei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1JlcG9ydGluZ1BlcmlvZCkubWF4KDEwMDApLFxuICAgIHRhZ3M6IHouYXJyYXkoei5zdHJpbmcoKSkubWF4KDEwMDApLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlYXJjaFR5cGUgPSB6LmVudW0oW1wiaHlicmlkXCIsIFwiaHlicmlkX3JhbmtcIiwgXCJzZW1hbnRpY1wiXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU29ydEJ5ID0gei5lbnVtKFtcInJlbGV2YW5jZVwiLCBcImRhdGVfYXNjXCIsIFwiZGF0ZV9kZXNjXCJdKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9SZWxldmFuY2VSYW5raW5nID0gelxuICAub2JqZWN0KHtcbiAgICByZXJhbms6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgZnJlc2huZXNzOiB6Lm51bWJlcigpLmd0ZSgwKS5sdGUoMTApLmRlZmF1bHQoMSksXG4gICAgZW5yaWNobWVudDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgICBzb3VyY2VfYXV0aG9yaXR5OiB6Lm51bWJlcigpLmd0ZSgwKS5sdGUoMTApLmRlZmF1bHQoMSksXG4gICAgZG9jdW1lbnRfcHJvbWluZW5jZTogei5udW1iZXIoKS5ndGUoMCkubHRlKDEwKS5kZWZhdWx0KDEpLFxuICAgIHNlbnRpbWVudF9pbXBhY3Q6IHoubnVtYmVyKCkuZ3RlKDApLmx0ZSgxMCkuZGVmYXVsdCgxKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hRdWVyeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdGV4dDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB3ZWFrYW5kX3RleHQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgZmlsdGVyczogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9RdWVyeUZpbHRlcnMsIHoubnVsbCgpXSksXG4gICAgbWF4X2NodW5rczogei5udW1iZXIoKS5pbnQoKS5ndGUoMCkuZGVmYXVsdCgxMDApLFxuICAgIGV4dGVybmFsX2NvbnRlbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIG9mZnNldDogei5udW1iZXIoKS5pbnQoKS5ndGUoMCkuZGVmYXVsdCgwKSxcbiAgICBzZWFyY2hfdHlwZTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hUeXBlLFxuICAgIHNvcnRfYnk6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU29ydEJ5LFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBjbHVzdGVyaW5nOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICByZWxldmFuY2VfcmFua2luZzogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9SZWxldmFuY2VSYW5raW5nLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb2R1Y3RUeXBlID0gei5lbnVtKFtcImFwcFwiLCBcImFwaVwiXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU3dpdGNoRW50aXRsZW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHNsdWc6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgcHJvZHVjdFR5cGVzOiB6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfUHJvZHVjdFR5cGUpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9FbnRpdGxlbWVudExpbWl0VGFyZ2V0ID0gei5lbnVtKFtcInBlcl91c2VyXCIsIFwicGVyX29yZ2FuaXphdGlvblwiXSlcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfTWF4VmFsdWVFbnRpdGxlbWVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2x1Zzogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBwcm9kdWN0VHlwZXM6IHouYXJyYXkoc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Qcm9kdWN0VHlwZSksXG4gICAgbGltaXRUYXJnZXQ6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfRW50aXRsZW1lbnRMaW1pdFRhcmdldCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1heFZhbHVlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6LnN0cmluZygpXSksXG4gICAgbGltaXRUaW1lUGVyaW9kOiB6Lm51bGwoKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Vc2VyUXVvdGFWMiA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2VhcmNoTWF4U2F2ZWQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgc2VhcmNoTWF4U2NoZWR1bGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNlYXJjaE1heEZvbGxvd2VkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNlYXJjaE1heFNoYXJlZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB3YXRjaGxpc3RNYXhDcmVhdGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHdhdGNobGlzdE1heFNoYXJlZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Pcmdhbml6YXRpb25RdW90YVYyID0gelxuICAub2JqZWN0KHsgY29udGV4dHVhbFVuaXRzTWF4UmVhZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1VzZXIgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHVpZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNvbXBhbnk6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwcm9kdWN0czogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICB1c2VyRW1haWw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcmdhbml6YXRpb25JZDogei5zdHJpbmcoKSxcbiAgICBvcmdhbml6YXRpb25ScENpZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGVudGl0bGVtZW50czogelxuICAgICAgLmFycmF5KFxuICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1N3aXRjaEVudGl0bGVtZW50LFxuICAgICAgICAgIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfTWF4VmFsdWVFbnRpdGxlbWVudCxcbiAgICAgICAgXSksXG4gICAgICApXG4gICAgICAub3B0aW9uYWwoKVxuICAgICAgLmRlZmF1bHQoW10pLFxuICAgIHVzZXJRdW90YTogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Vc2VyUXVvdGFWMiwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9yZ2FuaXphdGlvblF1b3RhOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX09yZ2FuaXphdGlvblF1b3RhVjIsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb250ZW50QWNjZXNzUG9saWNpZXM6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLFxuICAgIGNvbnRlbnRQcm92aWRlcklkczogei5hcnJheSh6LnN0cmluZygpKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pLFxuICAgIGNvbnRlbnRTb3VyY2VJZHM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKS5kZWZhdWx0KFtdKSxcbiAgICBmZWF0dXJlQWNjZXNzUG9saWNpZXM6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXF1ZXN0T3JpZ2luOiB6LnN0cmluZygpLFxuICAgIHByb2R1Y3RUeXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb25GcmVlbWl1bTogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmcmVlVXNlcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgcXVlcnk6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUXVlcnksXG4gICAgdXNlcjogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Vc2VyLFxuICAgIHRpbWV6b25lOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlVUQ1wiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ2h1bmtTZW50ZW5jZSA9IHpcbiAgLm9iamVjdCh7IHBudW06IHoubnVtYmVyKCkuaW50KCksIHNudW06IHoubnVtYmVyKCkuaW50KCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQm91bmRpbmdCb3ggPSB6XG4gIC5vYmplY3Qoe1xuICAgIGJvdHRvbTogei5udW1iZXIoKSxcbiAgICBsZWZ0OiB6Lm51bWJlcigpLFxuICAgIHBhZ2U6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmlnaHQ6IHoubnVtYmVyKCksXG4gICAgdG9wOiB6Lm51bWJlcigpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9WZXNwYUNodW5rID0gelxuICAub2JqZWN0KHtcbiAgICBjbnVtOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ2h1bmtTZW50ZW5jZSksXG4gICAgcmVsZXZhbmNlOiB6Lm51bWJlcigpLFxuICAgIGJvdW5kaW5nX2JveGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQm91bmRpbmdCb3gpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhRG9jdW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGRvY3VtZW50X3Njb3BlOiB6LnN0cmluZygpLFxuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIGxhbmd1YWdlOiB6LnN0cmluZygpLFxuICAgIGNodW5rczogei51bmlvbihbei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhQ2h1bmspLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3JjX2tleTogei5zdHJpbmcoKSxcbiAgICBzcmNfbmFtZTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VfcmFuazogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoMTApLFxuICAgIHRzOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfdHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50X3R5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB1cmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycF9wcm92aWRlcl9pZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZXJwUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICBoZDogei5zdHJpbmcoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIHNvdXJjZV9uYW1lOiB6LnN0cmluZygpLFxuICAgIHVybDogei5zdHJpbmcoKS5taW4oMSkubWF4KDIwODMpLnVybCgpLFxuICAgIHJlbGV2YW5jZTogei5udW1iZXIoKS5vcHRpb25hbCgpLmRlZmF1bHQoMCksXG4gICAgdHM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5yZWNvcmQoei51bmlvbihbei5zdHJpbmcoKSwgei5hcnJheSh6LnN0cmluZygpKV0pKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9WZXNwYVRpbWVNZXRyaWNzID0gelxuICAub2JqZWN0KHsgcXVlcnl0aW1lOiB6Lm51bWJlcigpLCBzdW1tYXJ5ZmV0Y2h0aW1lOiB6Lm51bWJlcigpLCBzZWFyY2h0aW1lOiB6Lm51bWJlcigpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzID0gelxuICAub2JqZWN0KHtcbiAgICBjb3ZlcmFnZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICBkb2N1bWVudHM6IHoubnVtYmVyKCkuaW50KCksXG4gICAgZnVsbDogei5ib29sZWFuKCksXG4gICAgbm9kZXM6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmVzdWx0czogei5udW1iZXIoKS5pbnQoKSxcbiAgICByZXN1bHRzRnVsbDogei5udW1iZXIoKS5pbnQoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZXJyb3I6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdGltaW5nOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhVGltZU1ldHJpY3MsIHoubnVsbCgpXSksXG4gICAgY292ZXJhZ2U6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFDb3ZlcmFnZU1ldHJpY3MsIHoubnVsbCgpXSksXG4gICAgdG90YWxfY291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgZG9jdW1lbnRfY291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICB2ZXNwYV9yZXN1bHRzOiB6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFEb2N1bWVudCksXG4gICAgc2VycF9yZXN1bHRzOiB6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VycFJlc3VsdCksXG4gICAgdmVzcGFfcmVzcG9uc2U6IHoudW5pb24oW3N0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFSZXNwb25zZSwgei5udWxsKCldKSxcbiAgICBkZWJ1Zzogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0JhZFJlcXVlc3RFcnJvciA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQwMCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVW5hdXRob3JpemVkUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ludGVybmFsU2VydmVyUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkuZGVmYXVsdCg1MDApLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIkludGVybmFsIFNlcnZlciBFcnJvci5cIiksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc1NlYXJjaFF1ZXJ5ID0gelxuICAub2JqZWN0KHtcbiAgICB0ZXh0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHdlYWthbmRfdGV4dDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBmaWx0ZXJzOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1F1ZXJ5RmlsdGVycywgei5udWxsKCldKSxcbiAgICBtYXhfY2h1bmtzOiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKS5kZWZhdWx0KDEwMCksXG4gICAgZXh0ZXJuYWxfY29udGVudDogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgb2Zmc2V0OiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKS5kZWZhdWx0KDApLFxuICAgIHNlYXJjaF90eXBlOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlYXJjaFR5cGUsXG4gICAgc29ydF9ieTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Tb3J0QnksXG4gICAgZGVidWc6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIGNsdXN0ZXJpbmc6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHJlbGV2YW5jZV9yYW5raW5nOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1JlbGV2YW5jZVJhbmtpbmcsXG4gICAgdG9wX25fZW50aXRpZXM6IHoubnVtYmVyKCkuaW50KCkuZ3RlKDEpLmx0ZSgxMDAwKS5kZWZhdWx0KDEwMCksXG4gICAgdG9wX25fZXZlbnRzOiB6Lm51bWJlcigpLmludCgpLmd0ZSgxKS5sdGUoMTAwMCkuZGVmYXVsdCgxMCksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc1NlYXJjaFJlcXVlc3QgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHF1ZXJ5OiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNTZWFyY2hRdWVyeSxcbiAgICB1c2VyOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1VzZXIsXG4gICAgdGltZXpvbmU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiVVRDXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zSXRlbVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBrZXk6IHouc3RyaW5nKCksXG4gICAgdm9sdW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxfY2h1bmtzX2NvdW50OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdG90YWxfdGl0bGVzX2NvdW50OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAxOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXAzOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXA0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ3JvdXA1OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGExOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGEyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGEzOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE0OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE1OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE2OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE3OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE4OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGE5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWV0YWRhdGExMDogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDI6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHBhcmVudDM6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZsYWc6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVzY3JpcHRpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwdWJsaWNhdGlvblR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycFByb3ZpZGVySWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb3VudHJ5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcXVlcnlUeXBlOiB6LnN0cmluZygpLFxuICAgIGVudGl0eVR5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNHcm91cFJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBjb3ZlcmFnZTogei51bmlvbihbc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9WZXNwYUNvdmVyYWdlTWV0cmljcywgei5udWxsKCldKSxcbiAgICB0aW1pbmc6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFUaW1lTWV0cmljcyxcbiAgICBwbGFjZXM6IHouYXJyYXkoc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zSXRlbVJlc3BvbnNlKS5vcHRpb25hbCgpLFxuICAgIGNvbXBhbmllczogei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNJdGVtUmVzcG9uc2UpLm9wdGlvbmFsKCksXG4gICAgb3JnYW5pemF0aW9uczogei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNJdGVtUmVzcG9uc2UpLm9wdGlvbmFsKCksXG4gICAgcGVvcGxlOiB6LmFycmF5KHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc0l0ZW1SZXNwb25zZSkub3B0aW9uYWwoKSxcbiAgICBwcm9kdWN0czogei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNJdGVtUmVzcG9uc2UpLm9wdGlvbmFsKCksXG4gICAgY29uY2VwdHM6IHouYXJyYXkoc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zSXRlbVJlc3BvbnNlKS5vcHRpb25hbCgpLFxuICAgIHRvcGljczogei5hcnJheShzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNJdGVtUmVzcG9uc2UpLm9wdGlvbmFsKCksXG4gICAgeXFsOiB6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVm9sdW1lUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGNvdmVyYWdlOiB6LnVuaW9uKFtzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzLCB6Lm51bGwoKV0pLFxuICAgIHRpbWluZzogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9WZXNwYVRpbWVNZXRyaWNzLFxuICAgIHRvdGFsX2NvdW50OiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgwKSxcbiAgICBkYWlseV9jb3VudDogei5yZWNvcmQoei5udW1iZXIoKS5pbnQoKSkub3B0aW9uYWwoKSxcbiAgICBkZWJ1Zzogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9DaGF0SW50ZXJhY3Rpb25TY29wZSA9IHouZW51bShbXG4gIFwiYWxsXCIsXG4gIFwiZmlsaW5nc1wiLFxuICBcInRyYW5zY3JpcHRzXCIsXG4gIFwibmV3c1wiLFxuICBcImZpbGVzXCIsXG4gIFwibWFya2V0X2ludGVsbGlnZW5jZVwiLFxuICBcImVhcm5pbmdzX2NhbGxzXCIsXG4gIFwicXVhcnRyX3Byb1wiLFxuICBcIm1hcmtldF9uYXJyYXRpdmVzXCIsXG4gIFwic2VudGltZW50LWF0dGVudGlvblwiLFxuICBcImpvYi1hbmFseXRpY3NcIixcbiAgXCJwcmljZVwiLFxuICBcImVzdGltYXRlc1wiLFxuICBcImNydW5jaGJhc2VcIixcbiAgXCJrbm93bGVkZ2UtZ3JhcGhcIixcbiAgXCJldGYtaG9sZGluZ3NcIixcbiAgXCJjcnlwdG9fbWFya2V0c1wiLFxuICBcIm1pZGRsZV9lYXN0ZXJuX21hcmtldHNcIixcbiAgXCJmaW5hbmNpYWxfdGltZXNcIixcbiAgXCJleHBlcnRfbmV0d29ya3NcIixcbl0pXG5jb25zdCBzdF9sbG1fY2hhdF9Eb2N1bWVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgZmlsZU5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByYXdTaXplOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdXBsb2FkVHM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0NoYXRJbnRlcmFjdGlvblR5cGUgPSB6LmVudW0oW1xuICBcInRyZW5kaW5nXCIsXG4gIFwiZmVlZFwiLFxuICBcInVzZXJfbWVzc2FnZVwiLFxuICBcImVtcHR5X21lc3NhZ2VcIixcbiAgXCJ0cmVuZGluZ19wcm9tcHRcIixcbiAgXCJ3YXRjaGxpc3RcIixcbiAgXCJmbG93XCIsXG5dKVxuY29uc3Qgc3RfbGxtX2NoYXRfUmVxdWVzdEVudGl0eSA9IHpcbiAgLm9iamVjdCh7IGtleTogei5zdHJpbmcoKSwgbmFtZTogei5zdHJpbmcoKSwgdHlwZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfUmVxdWVzdFRpbWVSYW5nZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhcnRUaW1lOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGVuZFRpbWU6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9GbG93VHlwZSA9IHouZW51bShbXG4gIFwiY29tcGFueV9uZXdzX3JvdW5kdXBcIixcbiAgXCJlYXJuaW5nc19kaWdlc3RcIixcbiAgXCJtYXJrZXRfcmVjYXBcIixcbiAgXCJtb3JuaW5nX2RpZ2VzdFwiLFxuICBcInNlY3Rvcl90cmVuZHNcIixcbiAgXCJlYXJuaW5nc19wcmV2aWV3XCIsXG5dKVxuY29uc3Qgc3RfbGxtX2NoYXRfUmVxdWVzdEZpbGVzID0gelxuICAub2JqZWN0KHtcbiAgICBmaWxlSWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgb3duZXJJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB1c2VySXNPd25lcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X1JlcXVlc3RXYXRjaGxpc3RzID0gelxuICAub2JqZWN0KHtcbiAgICB3YXRjaGxpc3RJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBvd25lcklkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHVzZXJJc093bmVyOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfRGV2aWNlSW5mb1RyYWNraW5nID0gelxuICAub2JqZWN0KHtcbiAgICBtb2RlbDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB0eXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIG1hbnVmYWN0dXJlcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHRpbWV6b25lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGxvY2FsZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfQXBwSW5mb1RyYWNraW5nID0gelxuICAub2JqZWN0KHtcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGJ1aWxkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIG5hbWVzcGFjZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB2ZXJzaW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9EZXZpY2VOZXR3b3JrSW5mb1RyYWNraW5nID0gelxuICAub2JqZWN0KHtcbiAgICBjZWxsdWxhcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gICAgd2lmaTogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gICAgYmx1ZXRvb3RoOiB6LnVuaW9uKFt6LmJvb2xlYW4oKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfRGV2aWNlT1NJbmZvVHJhY2tpbmcgPSB6XG4gIC5vYmplY3QoeyB2ZXJzaW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLCBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X1JlcXVlc3RUcmFja2luZ0luZm8gPSB6XG4gIC5vYmplY3Qoe1xuICAgIHN0YXR1czogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm9tcHRUb3BpY3M6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgcHJvbXB0VGFzazogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwbGF0Zm9ybVR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdmVyc2lvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBmaWxlczogei51bmlvbihbei5hcnJheShzdF9sbG1fY2hhdF9SZXF1ZXN0RmlsZXMpLCB6Lm51bGwoKV0pLFxuICAgIHdhdGNobGlzdHM6IHoudW5pb24oW3ouYXJyYXkoc3RfbGxtX2NoYXRfUmVxdWVzdFdhdGNobGlzdHMpLCB6Lm51bGwoKV0pLFxuICAgIGNoYXRTdGFydExvY2F0aW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIHBsYXRmb3JtOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGZvbGxvd1VwU3VnZ2VzdGlvbkluZGV4OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIGRldmljZTogei51bmlvbihbc3RfbGxtX2NoYXRfRGV2aWNlSW5mb1RyYWNraW5nLCB6Lm51bGwoKV0pLFxuICAgIGFwcDogei51bmlvbihbc3RfbGxtX2NoYXRfQXBwSW5mb1RyYWNraW5nLCB6Lm51bGwoKV0pLFxuICAgIG5ldHdvcms6IHoudW5pb24oW3N0X2xsbV9jaGF0X0RldmljZU5ldHdvcmtJbmZvVHJhY2tpbmcsIHoubnVsbCgpXSksXG4gICAgb3M6IHoudW5pb24oW3N0X2xsbV9jaGF0X0RldmljZU9TSW5mb1RyYWNraW5nLCB6Lm51bGwoKV0pLFxuICAgIHByb21wdENvbnRleHRMZXZlbDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm9tcHRDYXRlZ29yeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBwcm9tcHRDb21wYW55VHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBkYXRhVmlld0F0Q2xpY2s6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgY2xpY2tlZFN1Z2dlc3RlZFByb21wdFRleHQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgc3VnZ2VzdGVkUHJvbXB0Q2xhc3NpZmljYXRpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgc3VnZ2VzdGVkUHJvbXB0Q2xpY2s6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9DaGF0V2l0aE1lbW9yeVJlcXVlc3QgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGFjdGlvbjogei5zdHJpbmcoKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgY2hhdElkOiB6LnN0cmluZygpLFxuICAgIGlucHV0TWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICBkaXNwbGF5ZWRNZXNzYWdlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGVidWc6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgc2NvcGU6IHoudW5pb24oW3N0X2xsbV9jaGF0X0NoYXRJbnRlcmFjdGlvblNjb3BlLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2NvcGVEb2N1bWVudHM6IHoudW5pb24oW3ouYXJyYXkoc3RfbGxtX2NoYXRfRG9jdW1lbnQpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2NvcGVXYXRjaGxpc3RJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGVyYWN0aW9uVHlwZTogc3RfbGxtX2NoYXRfQ2hhdEludGVyYWN0aW9uVHlwZS5vcHRpb25hbCgpLFxuICAgIHVzZU1hc3RlclJvdXRlcjogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBlbnRpdGllczogei51bmlvbihbei5hcnJheShzdF9sbG1fY2hhdF9SZXF1ZXN0RW50aXR5KSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRpbWVSYW5nZTogei51bmlvbihbc3RfbGxtX2NoYXRfUmVxdWVzdFRpbWVSYW5nZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZsb3dUeXBlOiB6LnVuaW9uKFtzdF9sbG1fY2hhdF9GbG93VHlwZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNvdXJjZXM6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjdXN0b21JbnN0cnVjdGlvbnM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWN0b3JzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdHJhY2tpbmc6IHoudW5pb24oW3N0X2xsbV9jaGF0X1JlcXVlc3RUcmFja2luZ0luZm8sIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtb2RlbDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRpbWV6b25lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9DaGF0V2l0aE1lbW9yeVVwZGF0ZUxhc3RSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBhY3Rpb246IHouc3RyaW5nKCksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIGNoYXRJZDogei5zdHJpbmcoKSxcbiAgICBpbnB1dE1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgZGlzcGxheWVkTWVzc2FnZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHNjb3BlOiB6LnVuaW9uKFtzdF9sbG1fY2hhdF9DaGF0SW50ZXJhY3Rpb25TY29wZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNjb3BlRG9jdW1lbnRzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2xsbV9jaGF0X0RvY3VtZW50KSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNjb3BlV2F0Y2hsaXN0SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpbnRlcmFjdGlvblR5cGU6IHN0X2xsbV9jaGF0X0NoYXRJbnRlcmFjdGlvblR5cGUub3B0aW9uYWwoKSxcbiAgICB1c2VNYXN0ZXJSb3V0ZXI6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgZW50aXRpZXM6IHoudW5pb24oW3ouYXJyYXkoc3RfbGxtX2NoYXRfUmVxdWVzdEVudGl0eSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0aW1lUmFuZ2U6IHoudW5pb24oW3N0X2xsbV9jaGF0X1JlcXVlc3RUaW1lUmFuZ2UsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBmbG93VHlwZTogei51bmlvbihbc3RfbGxtX2NoYXRfRmxvd1R5cGUsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzb3VyY2VzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY3VzdG9tSW5zdHJ1Y3Rpb25zOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2VjdG9yczogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRyYWNraW5nOiB6LnVuaW9uKFtzdF9sbG1fY2hhdF9SZXF1ZXN0VHJhY2tpbmdJbmZvLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbW9kZWw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0aW1lem9uZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgd2Vic29ja2V0X3dlYnNvY2tldF9fcG9zdF9Cb2R5ID0gei51bmlvbihbXG4gIHN0X2xsbV9jaGF0X0NoYXRXaXRoTWVtb3J5UmVxdWVzdCxcbiAgc3RfbGxtX2NoYXRfQ2hhdFdpdGhNZW1vcnlVcGRhdGVMYXN0UmVxdWVzdCxcbl0pXG5jb25zdCBzdF9sbG1fY2hhdF9FbmdpbmVBaUJsb2NrID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkVOR0lORVwiKSxcbiAgICBhbnN3ZXI6IHouc3RyaW5nKCksXG4gICAgZXhwbGFpbmVyOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgd2lkZ2V0U3BlYzogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgd2lkZ2V0U3BlY1VybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGlzU3VjY2Vzc2Z1bEFuc3dlcjogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X1N1bW1hcnlOZXh0QmxvY2tSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJORVhUXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgICBtZXNzYWdlRGVsdGFNczogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZXF1ZW5jZU51bWJlcjogei5udW1iZXIoKS5pbnQoKSxcbiAgICBjb250ZW50OiB6LnN0cmluZygpLFxuICAgIGJsb2NrOiB6LnVuaW9uKFtzdF9sbG1fY2hhdF9FbmdpbmVBaUJsb2NrLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9RdW90YVVzYWdlID0gelxuICAub2JqZWN0KHtcbiAgICBpbnB1dFRva2Vuczogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBvdXRwdXRUb2tlbnM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgc2VhcmNoZXNDb3VudDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfU3VtbWFyeUNvbXBsZXRpb25SZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJDT01QTEVURVwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgbWVzc2FnZURlbHRhTXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBcIngtYW16LXJlcXVlc3RpZFwiOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaW50ZXJhY3Rpb25UaW1lc3RhbXA6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjb250ZW50QmxvY2tzOiB6LnVuaW9uKFtzdF9sbG1fY2hhdF9FbmdpbmVBaUJsb2NrLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdXNhZ2U6IHoudW5pb24oW3N0X2xsbV9jaGF0X1F1b3RhVXNhZ2UsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0RvY3VtZW50U291cmNlQWN0aW9uID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkRPQ1VNRU5UXCIpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgaGQ6IHouc3RyaW5nKCksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgc3JjS2V5OiB6LnN0cmluZygpLFxuICAgIGltYWdlVXJsczogei5hcnJheSh6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCkpLm9wdGlvbmFsKCksXG4gICAgdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcnBQcm92aWRlcklkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9FeHRlcm5hbFNvdXJjZUFjdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJFWFRFUk5BTFwiKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIHVybDogei5zdHJpbmcoKS5taW4oMSkubWF4KDIwODMpLnVybCgpLFxuICAgIGZhdmljb25Vcmw6IHouc3RyaW5nKCkubWluKDEpLm1heCgyMDgzKS51cmwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0VuZ2luZUFpU291cmNlQWN0aW9uID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkVOR0lORVwiKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIHNyY0tleTogei5zdHJpbmcoKSxcbiAgICBmYXZpY29uVXJsOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9PcmlnaW5Tb3VyY2VNZXRhZGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGltYWdlVXJsczogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCkpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9PcmlnaW5Tb3VyY2VzTWV0YWRhdGEgPSB6LnJlY29yZChzdF9sbG1fY2hhdF9PcmlnaW5Tb3VyY2VNZXRhZGF0YSlcbmNvbnN0IHN0X2xsbV9jaGF0X1N1bW1hcnlTb3VyY2VzUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiU09VUkNFU1wiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgbWVzc2FnZURlbHRhTXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBcIngtYW16LXJlcXVlc3RpZFwiOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3JpZ2luU291cmNlczogei5hcnJheShcbiAgICAgIHoudW5pb24oW1xuICAgICAgICBzdF9sbG1fY2hhdF9Eb2N1bWVudFNvdXJjZUFjdGlvbixcbiAgICAgICAgc3RfbGxtX2NoYXRfRXh0ZXJuYWxTb3VyY2VBY3Rpb24sXG4gICAgICAgIHN0X2xsbV9jaGF0X0VuZ2luZUFpU291cmNlQWN0aW9uLFxuICAgICAgXSksXG4gICAgKSxcbiAgICBtZXRhZGF0YTogei51bmlvbihbc3RfbGxtX2NoYXRfT3JpZ2luU291cmNlc01ldGFkYXRhLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfVHJhY2VRdWVyeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdGV4dDogei5zdHJpbmcoKSxcbiAgICBmaWx0ZXJzOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0NodW5rU2VudGVuY2UgPSB6XG4gIC5vYmplY3QoeyBwbnVtOiB6Lm51bWJlcigpLmludCgpLCBzbnVtOiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9Cb3VuZGluZ0JveCA9IHpcbiAgLm9iamVjdCh7XG4gICAgYm90dG9tOiB6Lm51bWJlcigpLFxuICAgIGxlZnQ6IHoubnVtYmVyKCksXG4gICAgcGFnZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICByaWdodDogei5udW1iZXIoKSxcbiAgICB0b3A6IHoubnVtYmVyKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9UcmFjZVJlc3VsdENodW5rID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBjbnVtOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X2xsbV9jaGF0X0NodW5rU2VudGVuY2UpLFxuICAgIHJlbGV2YW5jZTogei5udW1iZXIoKSxcbiAgICBib3VuZGluZ0JveGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X2xsbV9jaGF0X0JvdW5kaW5nQm94KSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfVHJhY2VSZXN1bHRDUVNTdG9yeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZG9jdW1lbnRTY29wZTogei5zdHJpbmcoKSxcbiAgICBoZDogei5zdHJpbmcoKSxcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBsYW5ndWFnZTogei5zdHJpbmcoKSxcbiAgICBjaHVua3M6IHoudW5pb24oW3ouYXJyYXkoc3RfbGxtX2NoYXRfVHJhY2VSZXN1bHRDaHVuayksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzcmNLZXk6IHouc3RyaW5nKCksXG4gICAgc3JjTmFtZTogei5zdHJpbmcoKSxcbiAgICBzb3VyY2VSYW5rOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgxMCksXG4gICAgdHM6IHouc3RyaW5nKCksXG4gICAgY29udGVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkb2N1bWVudFR5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB1cmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBycFByb3ZpZGVySWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VDUVNSZXN1bHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiQ1FTXCIpLFxuICAgIHZhbHVlczogei5hcnJheShzdF9sbG1fY2hhdF9UcmFjZVJlc3VsdENRU1N0b3J5KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV9jaGF0X0V4dGVybmFsVHJhY2VSZXN1bHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgYWN0aW9uOiBzdF9sbG1fY2hhdF9FeHRlcm5hbFNvdXJjZUFjdGlvbixcbiAgICB0czogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6LnJlY29yZCh6LnVuaW9uKFt6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpXSkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlRXh0ZXJuYWxSZXN1bHQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiRVhURVJOQUxcIiksXG4gICAgdmFsdWVzOiB6LmFycmF5KHN0X2xsbV9jaGF0X0V4dGVybmFsVHJhY2VSZXN1bHQpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0ID0gelxuICAub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiRU5HSU5FXCIpLCBzcWxRdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlID0gelxuICAub2JqZWN0KHtcbiAgICBxdWVyeTogc3RfbGxtX2NoYXRfVHJhY2VRdWVyeSxcbiAgICByZXN1bHRzOiB6LmFycmF5KFxuICAgICAgei51bmlvbihbXG4gICAgICAgIHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VDUVNSZXN1bHQsXG4gICAgICAgIHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCxcbiAgICAgICAgc3RfbGxtX2NoYXRfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0LFxuICAgICAgXSksXG4gICAgKSxcbiAgICBxdWVyeUlkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiQVVESVRfVFJBQ0VcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2VEZWx0YU1zOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgXCJ4LWFtei1yZXF1ZXN0aWRcIjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHRyYWNlOiBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfUHJvZmlsaW5nUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiUFJPRklMSU5HXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgICBtZXNzYWdlRGVsdGFNczogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB4cmF5VHJhY2VJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNvbGRTdGFydDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR0ZnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0aW1lVG9Db21wbGV0aW9uOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcm91dGluZ1Jlc3BvbnNlVGltZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHF1ZXJ5RW5yaWNobWVudFRpbWVzOiB6LnVuaW9uKFt6LmFycmF5KHoubnVtYmVyKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2VhcmNoUmVzcG9uc2VUaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc291cmNlSW1hZ2VzUmVzcG9uc2VUaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc291cmNlSW1hZ2VzQ291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzb3VyY2VVcmxzQ291bnQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzb3VyY2VJbWFnZXNSZXNwb25zZVRpbWVzOiB6LnVuaW9uKFt6LmFycmF5KHoubnVtYmVyKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZG9jdW1lbnRVcmxzUmVzcG9uc2VUaW1lczogei51bmlvbihbei5hcnJheSh6Lm51bWJlcigpKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNxc1Jlc3BvbnNlVGltZXM6IHoudW5pb24oW3ouYXJyYXkoei5udW1iZXIoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBjcXNRdWVyeUNvdW50OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2VycFJlc3BvbnNlVGltZXM6IHoudW5pb24oW3ouYXJyYXkoei5udW1iZXIoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZXJwUXVlcnlDb3VudDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHN1bW1hcml6ZXJUdGZ0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZW5naW5lQWlSZXNwb25zZVRpbWU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlbmdpbmVBaUNvbnRleHR1YWxpemF0aW9uVGltZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHdhdGNobGlzdFJvdXRpbmdSZXNwb25zZVRpbWU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBoaXN0b3J5UmV0cmlldmFsUmVzcG9uc2VUaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY3Jvc3NFbmNvZGVyUmVzcG9uc2VUaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWFzdGVyUm91dGVyQ29udGV4dHVhbGl6YXRpb25UaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWFzdGVyUm91dGVySW5mZXJlbmNlVGltZTogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZvbGxvd1VwUmVzcG9uc2VUaW1lOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9TdGF0dXNJbmZvUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiU1RBVFVTXCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgICBtZXNzYWdlRGVsdGFNczogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIFwieC1hbXotcmVxdWVzdGlkXCI6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBtZXNzYWdlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfUXVlcnlJZGVudGlmaWVyID0gelxuICAub2JqZWN0KHsgcXVlcnk6IHouc3RyaW5nKCksIHF1ZXJ5X2lkOiB6Lm51bWJlcigpLmludCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fY2hhdF9TdGF0dXNRdWVyeVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlNUQVRVU19RVUVSWVwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gICAgbWVzc2FnZURlbHRhTXM6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBcIngtYW16LXJlcXVlc3RpZFwiOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcXVlcmllczogei5hcnJheShzdF9sbG1fY2hhdF9RdWVyeUlkZW50aWZpZXIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfU3RhdHVzUmVzZXRSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJTVEFUVVNfUkVTRVRcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2VEZWx0YU1zOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgXCJ4LWFtei1yZXF1ZXN0aWRcIjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfU3RhdHVzU291cmNlc0ZpbmlzaGVkUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiU1RBVFVTX0NPTkNMVURJTkdcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2VEZWx0YU1zOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgXCJ4LWFtei1yZXF1ZXN0aWRcIjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfbGxtX2NoYXRfRXJyb3JSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X2xsbV90cmVuZGluZ19nZXRfVHJlbmRpbmdSZXF1ZXN0VHlwZSA9IHouZW51bShbXCJzZWFyY2hlc1wiLCBcInF1ZXJpZXNcIl0pXG5jb25zdCB0eXBlID0gc3RfbGxtX3RyZW5kaW5nX2dldF9UcmVuZGluZ1JlcXVlc3RUeXBlLm9wdGlvbmFsKCkuZGVmYXVsdChcInNlYXJjaGVzXCIpXG5jb25zdCBzdF9sbG1fdHJlbmRpbmdfZ2V0X0xhbWJkYUNvb2tpZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICB2YWx1ZTogei5zdHJpbmcoKSxcbiAgICBwYXRoOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIlwiKSxcbiAgICBkb21haW46IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiXCIpLFxuICAgIHNlY3VyZTogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KHRydWUpLFxuICAgIGh0dHBfb25seTogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBtYXhfYWdlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZXhwaXJlczogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNhbWVfc2l0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGN1c3RvbV9hdHRyaWJ1dGVzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fdHJlbmRpbmdfZ2V0X0xhbWJkYVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNfY29kZTogei5udW1iZXIoKS5pbnQoKSxcbiAgICBjb250ZW50X3R5cGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBib2R5OiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaGVhZGVyczogei51bmlvbihbei5yZWNvcmQoei51bmlvbihbei5zdHJpbmcoKSwgei5hcnJheSh6LnN0cmluZygpKV0pKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNvb2tpZXM6IHoudW5pb24oW3ouYXJyYXkoc3RfbGxtX3RyZW5kaW5nX2dldF9MYW1iZGFDb29raWUpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY29tcHJlc3M6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9sbG1fdHJlbmRpbmdfZ2V0X0xhbWJkYUJhZFJlcXVlc3RFcnJvciA9IHpcbiAgLm9iamVjdCh7IG1zZzogei5zdHJpbmcoKSwgc3RhdHVzX2NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQwMCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3ByaXZhdGVfY29udGVudF9TdGF0dXNPcHRpb25zID0gei5lbnVtKFtcbiAgXCJQRU5ESU5HXCIsXG4gIFwiUFJPQ0VTU0lOR1wiLFxuICBcIkNPTVBMRVRFRFwiLFxuICBcIkZBSUxFRFwiLFxuICBcIkRFTEVURURcIixcbl0pXG5jb25zdCBzdGF0dXMgPSB6LnVuaW9uKFtzdF9wcml2YXRlX2NvbnRlbnRfU3RhdHVzT3B0aW9ucywgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfU29ydEJ5T3B0aW9ucyA9IHouZW51bShbXCJjcmVhdGVkX2F0XCIsIFwiZmlsZV9uYW1lXCIsIFwic2l6ZVwiXSlcbmNvbnN0IHNvcnRfYnkgPSB6XG4gIC51bmlvbihbc3RfcHJpdmF0ZV9jb250ZW50X1NvcnRCeU9wdGlvbnMsIHoubnVsbCgpXSlcbiAgLm9wdGlvbmFsKClcbiAgLmRlZmF1bHQoXCJjcmVhdGVkX2F0XCIpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfU29ydERpck9wdGlvbnMgPSB6LmVudW0oW1wiYXNjXCIsIFwiZGVzY1wiXSlcbmNvbnN0IHNvcnRfZGlyID0gei51bmlvbihbc3RfcHJpdmF0ZV9jb250ZW50X1NvcnREaXJPcHRpb25zLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCkuZGVmYXVsdChcImRlc2NcIilcbmNvbnN0IHN0X3ByaXZhdGVfY29udGVudF9Pd25lcnNoaXBPcHRpb25zID0gei5lbnVtKFtcImFsbFwiLCBcInNoYXJlZFwiLCBcIm93bmVkXCJdKVxuY29uc3Qgb3duZXJzaGlwID0gei51bmlvbihbc3RfcHJpdmF0ZV9jb250ZW50X093bmVyc2hpcE9wdGlvbnMsIHoubnVsbCgpXSkub3B0aW9uYWwoKS5kZWZhdWx0KFwiYWxsXCIpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfT3duZXJEYXRhID0gelxuICAub2JqZWN0KHtcbiAgICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgbGVnYWN5SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlbWFpbDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGZ1bGxOYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3JnSWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcmdTbHVnOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3JnTmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdGaWx0ZXJSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IGVtYWlsOiB6LnN0cmluZygpLCBhbGxvd2VkOiB6LmJvb2xlYW4oKSwgY29uZmlnSWQ6IHouc3RyaW5nKCkudXVpZCgpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgY29uZmlnSWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICAgIGVtYWlsSGFzaDogei5zdHJpbmcoKSxcbiAgICBsYWJlbDogei5zdHJpbmcoKSxcbiAgICBmaWx0ZXJzOiB6LmFycmF5KHN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ0ZpbHRlclJlc3BvbnNlKSxcbiAgICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgb3JnSWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfTGlzdEVtYWlsQ29uZmlnc1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0czogei5hcnJheShzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ0ZpbHRlclBheWxvYWQgPSB6XG4gIC5vYmplY3QoeyBlbWFpbDogei5zdHJpbmcoKSwgYWxsb3dlZDogei5ib29sZWFuKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ1BheWxvYWQgPSB6XG4gIC5vYmplY3QoeyBsYWJlbDogei5zdHJpbmcoKSwgZmlsdGVyczogei5hcnJheShzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdGaWx0ZXJQYXlsb2FkKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJpdmF0ZV9jb250ZW50X0ZpbGVSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZmlsZUlkOiB6LnN0cmluZygpLFxuICAgIGZpbGVOYW1lOiB6LnN0cmluZygpLFxuICAgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICBvcmdJZDogei5zdHJpbmcoKSxcbiAgICBycENvbGxlY3Rpb25JZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJhd1NpemU6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXF1ZXN0T3JpZ2luOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRUeXBlOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3RhdHVzOiB6LnN0cmluZygpLFxuICAgIHNoYXJlZFdpdGg6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgY3JlYXRlZEF0OiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIHVwZGF0ZWRBdDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBlbWFpbENvbmZpZ0lkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfTGlzdEZpbGVzUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyByZXN1bHRzOiB6LmFycmF5KHN0X3ByaXZhdGVfY29udGVudF9GaWxlUmVzcG9uc2UpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcml2YXRlX2NvbnRlbnRfUHJpdmF0ZUNvbnRlbnRVcmxSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IGNvbnRlbnRVcmw6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX1N0YXR1c0VudW0gPSB6LmVudW0oW1wiT0tcIiwgXCJFWENFRURFRFwiXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX1F1b3RhU3RhdHVzID0gelxuICAub2JqZWN0KHsgc3RhdHVzOiBzdF9wcm9maWxlc19TdGF0dXNFbnVtLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKSwgbXNnOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19Pcmdhbml6YXRpb25RdW90YVYyID0gelxuICAub2JqZWN0KHsgY29udGV4dHVhbFVuaXRzTWF4UmVhZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19Pcmdhbml6YXRpb25Db25zdW1lZCA9IHpcbiAgLm9iamVjdCh7IGNvbnRleHR1YWxVbml0c1JlYWQ6IHoubnVtYmVyKCkuaW50KCkuZGVmYXVsdCgwKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19GZWF0dXJlQWNjZXNzUG9saWN5ID0gei5lbnVtKFtcbiAgXCJzZWFyY2hcIixcbiAgXCJ1cGxvYWRcIixcbiAgXCJpbmRleFwiLFxuICBcIndhdGNobGlzdFwiLFxuICBcImNoYXRcIixcbiAgXCJjaGF0OmVzdGltYXRlc1wiLFxuICBcImNoYXQ6am9ic1wiLFxuICBcImNoYXQ6cHJpY2luZ1wiLFxuICBcImNoYXQ6c2VudGltZW50XCIsXG4gIFwiY2hhdDpzZXJwXCIsXG4gIFwiY2hhdDpjcnVuY2hiYXNlXCIsXG4gIFwiY2hhdDprbm93bGVkZ2VfZ3JhcGhcIixcbiAgXCJjaGF0OndhdGNobGlzdFwiLFxuICBcImNoYXQ6ZXRmX2hvbGRpbmdzXCIsXG4gIFwic3VwcG9ydDppbnRlcmNvbVwiLFxuICBcInN1cHBvcnQ6c3Vic2NyaXB0aW9uX21uZ3RcIixcbiAgXCJmaWxlOnVwbG9hZFwiLFxuICBcImZpbGU6aW5kZXhcIixcbiAgXCJjb250ZW50OnJlYWRcIixcbl0pXG5jb25zdCBzdF9wcm9maWxlc19Qcm9kdWN0VHlwZSA9IHouZW51bShbXCJhcHBcIiwgXCJhcGlcIl0pXG5jb25zdCBzdF9wcm9maWxlc19Td2l0Y2hFbnRpdGxlbWVudFJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBzbHVnOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICAgIHByb2R1Y3RUeXBlczogei5hcnJheShzdF9wcm9maWxlc19Qcm9kdWN0VHlwZSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19FbnRpdGxlbWVudExpbWl0VGFyZ2V0ID0gei5lbnVtKFtcInBlcl91c2VyXCIsIFwicGVyX29yZ2FuaXphdGlvblwiXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2x1Zzogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgICBwcm9kdWN0VHlwZXM6IHouYXJyYXkoc3RfcHJvZmlsZXNfUHJvZHVjdFR5cGUpLFxuICAgIGxpbWl0VGFyZ2V0OiB6LnVuaW9uKFtzdF9wcm9maWxlc19FbnRpdGxlbWVudExpbWl0VGFyZ2V0LCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbWF4UXVvdGE6IHoudW5pb24oW3oubnVtYmVyKCksIHouc3RyaW5nKCldKSxcbiAgICBxdW90YUNvbnN1bWVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbGltaXRUaW1lUGVyaW9kOiB6Lm51bGwoKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfTXlFbnRpdGxlbWVudHNSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgb3JnYW5pemF0aW9uUXVvdGE6IHN0X3Byb2ZpbGVzX09yZ2FuaXphdGlvblF1b3RhVjIsXG4gICAgb3JnYW5pemF0aW9uQ29uc3VtZWQ6IHN0X3Byb2ZpbGVzX09yZ2FuaXphdGlvbkNvbnN1bWVkLFxuICAgIGNvbnRlbnRBY2Nlc3NQb2xpY2llczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBmZWF0dXJlQWNjZXNzUG9saWNpZXM6IHouYXJyYXkoei51bmlvbihbc3RfcHJvZmlsZXNfRmVhdHVyZUFjY2Vzc1BvbGljeSwgei5zdHJpbmcoKV0pKSxcbiAgICBlbnRpdGxlbWVudHM6IHoucmVjb3JkKFxuICAgICAgei5hcnJheShcbiAgICAgICAgei51bmlvbihbc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnRSZXNwb25zZSwgc3RfcHJvZmlsZXNfTWF4VmFsdWVFbnRpdGxlbWVudFJlc3BvbnNlXSksXG4gICAgICApLFxuICAgICksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19Vc2VyUXVvdGFWMiA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2VhcmNoTWF4U2F2ZWQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgc2VhcmNoTWF4U2NoZWR1bGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNlYXJjaE1heEZvbGxvd2VkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHNlYXJjaE1heFNoYXJlZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICB3YXRjaGxpc3RNYXhDcmVhdGVkOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLFxuICAgIHdhdGNobGlzdE1heFNoYXJlZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfVXNlckNvbnN1bWVkID0gelxuICAub2JqZWN0KHtcbiAgICBzZWFyY2hTYXZlZDogei5udW1iZXIoKS5pbnQoKS5kZWZhdWx0KDApLFxuICAgIHNlYXJjaFNjaGVkdWxlZDogei5udW1iZXIoKS5pbnQoKS5kZWZhdWx0KDApLFxuICAgIHNlYXJjaEZvbGxvd2VkOiB6Lm51bWJlcigpLmludCgpLmRlZmF1bHQoMCksXG4gICAgc2VhcmNoU2hhcmVkOiB6Lm51bWJlcigpLmludCgpLmRlZmF1bHQoMCksXG4gICAgd2F0Y2hsaXN0c0NyZWF0ZWQ6IHoubnVtYmVyKCkuaW50KCkuZGVmYXVsdCgwKSxcbiAgICB3YXRjaGxpc3RzU2hhcmVkOiB6Lm51bWJlcigpLmludCgpLmRlZmF1bHQoMCksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblN0YXR1cyA9IHouZW51bShbXG4gIFwiQkFOTkVEXCIsXG4gIFwiQ0FOQ0VMRURcIixcbiAgXCJFWFBJUkVEXCIsXG4gIFwiU1VCU0NSSUJFRFwiLFxuICBcIlRSSUFMXCIsXG4gIFwiVFJJQUwtRVhQSVJFRFwiLFxuICBcIlRSSUFMLVBFTkRJTkdcIixcbl0pXG5jb25zdCBzdF9wcm9maWxlc19TdXNic2NyaXB0aW9uRnJlcXVlbmN5ID0gei5lbnVtKFtcIkRhaWx5XCIsIFwiV2Vla2x5XCIsIFwiTW9udGhseVwiLCBcIlllYXJseVwiXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblNvdXJjZSA9IHouZW51bShbXCJFTlRFUlBSSVNFXCIsIFwiSU5ESVZJRFVBTFwiXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvbk1vZGlmaWNhdGlvblN0YXR1cyA9IHouZW51bShbXCJJTiBQUk9HUkVTU1wiLCBcIlNVQ0NFRURFRFwiXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHVzOiBzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb25TdGF0dXMsXG4gICAgc3RhcnRlZEF0OiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGZpbmlzaGVkQXQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX015UHJvZmlsZVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICB1c2VyUXVvdGE6IHN0X3Byb2ZpbGVzX1VzZXJRdW90YVYyLFxuICAgIHVzZXJDb25zdW1lZDogc3RfcHJvZmlsZXNfVXNlckNvbnN1bWVkLFxuICAgIG9yZ2FuaXphdGlvblF1b3RhOiBzdF9wcm9maWxlc19Pcmdhbml6YXRpb25RdW90YVYyLFxuICAgIG9yZ2FuaXphdGlvbkNvbnN1bWVkOiBzdF9wcm9maWxlc19Pcmdhbml6YXRpb25Db25zdW1lZCxcbiAgICBjb250ZW50QWNjZXNzUG9saWNpZXM6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgZmVhdHVyZUFjY2Vzc1BvbGljaWVzOiB6LmFycmF5KHoudW5pb24oW3N0X3Byb2ZpbGVzX0ZlYXR1cmVBY2Nlc3NQb2xpY3ksIHouc3RyaW5nKCldKSksXG4gICAgZW50aXRsZW1lbnRzOiB6LnJlY29yZChcbiAgICAgIHouYXJyYXkoXG4gICAgICAgIHoudW5pb24oW3N0X3Byb2ZpbGVzX1N3aXRjaEVudGl0bGVtZW50UmVzcG9uc2UsIHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRSZXNwb25zZV0pLFxuICAgICAgKSxcbiAgICApLFxuICAgIHN1YnNjcmlwdGlvblN0YXR1czogei51bmlvbihbc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uU3RhdHVzLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3Vic2NyaXB0aW9uUmVuZXdhbERhdGU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzdWJzY3JpcHRpb25GcmVxdWVuY3k6IHoudW5pb24oW3N0X3Byb2ZpbGVzX1N1c2JzY3JpcHRpb25GcmVxdWVuY3ksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzdWJzY3JpcHRpb25Tb3VyY2U6IHoudW5pb24oW3N0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblNvdXJjZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbjogei51bmlvbihbc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uTW9kaWZpY2F0aW9uLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19VcGRhdGVTdWJzY3JpcHRpb25Nb2RpZmljYXRpb25SZXF1ZXN0ID0gelxuICAub2JqZWN0KHsgc3RhdHVzOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19GdWxsVXNlclByb2ZpbGVSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgb3JnYW5pemF0aW9uSWQ6IHouc3RyaW5nKCksXG4gICAgdXNlclF1b3RhOiB6LnVuaW9uKFtzdF9wcm9maWxlc19Vc2VyUXVvdGFWMiwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRhdGVDcmVhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGxhc3RVcGRhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGVudGl0bGVtZW50c0NvbnN1bXB0aW9uOiB6LnJlY29yZCh6Lm51bWJlcigpLmludCgpKS5vcHRpb25hbCgpLmRlZmF1bHQoe30pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHNsdWc6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgcHJvZHVjdFR5cGVzOiB6LmFycmF5KHN0X3Byb2ZpbGVzX1Byb2R1Y3RUeXBlKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHNsdWc6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgcHJvZHVjdFR5cGVzOiB6LmFycmF5KHN0X3Byb2ZpbGVzX1Byb2R1Y3RUeXBlKSxcbiAgICBsaW1pdFRhcmdldDogei51bmlvbihbc3RfcHJvZmlsZXNfRW50aXRsZW1lbnRMaW1pdFRhcmdldCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1heFZhbHVlOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6LnN0cmluZygpXSksXG4gICAgbGltaXRUaW1lUGVyaW9kOiB6Lm51bGwoKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfRnVsbE9yZ2FuaXphdGlvblByb2ZpbGVSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgYXBwQ29udGVudEFjY2Vzc1BvbGljaWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSksXG4gICAgc2RrQ29udGVudEFjY2Vzc1BvbGljaWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSksXG4gICAgZW50aXRsZW1lbnRzOiB6XG4gICAgICAuYXJyYXkoei51bmlvbihbc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQsIHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRdKSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChbXSksXG4gICAgc3Vic2NyaXB0aW9uU3RhdHVzOiB6LnVuaW9uKFtzdF9wcm9maWxlc19TdWJzY3JpcHRpb25TdGF0dXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzdWJzY3JpcHRpb25SZW5ld2FsRGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHN1YnNjcmlwdGlvblNvdXJjZTogei51bmlvbihbc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uU291cmNlLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3Vic2NyaXB0aW9uTW9kaWZpY2F0aW9uOiB6LnVuaW9uKFtzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb24sIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkYXRlQ3JlYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBsYXN0VXBkYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBlbnRpdGxlbWVudHNDb25zdW1wdGlvbjogei5yZWNvcmQoei5udW1iZXIoKS5pbnQoKSkub3B0aW9uYWwoKS5kZWZhdWx0KHt9KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX1VwZGF0ZVN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbiA9IHpcbiAgLm9iamVjdCh7IHN0YXR1czogc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uTW9kaWZpY2F0aW9uU3RhdHVzIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9wcm9maWxlc19VcGRhdGVPcmdhbml6YXRpb25Qcm9maWxlID0gelxuICAub2JqZWN0KHtcbiAgICBhcHBDb250ZW50QWNjZXNzUG9saWNpZXM6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSksXG4gICAgc2RrQ29udGVudEFjY2Vzc1BvbGljaWVzOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGFwcEZlYXR1cmVBY2Nlc3NQb2xpY2llczogei51bmlvbihbei5hcnJheShzdF9wcm9maWxlc19GZWF0dXJlQWNjZXNzUG9saWN5KSwgei5udWxsKCldKSxcbiAgICBzZGtGZWF0dXJlQWNjZXNzUG9saWNpZXM6IHoudW5pb24oW3ouYXJyYXkoc3RfcHJvZmlsZXNfRmVhdHVyZUFjY2Vzc1BvbGljeSksIHoubnVsbCgpXSksXG4gICAgZW50aXRsZW1lbnRzOiB6LnVuaW9uKFtcbiAgICAgIHouYXJyYXkoei51bmlvbihbc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQsIHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRdKSksXG4gICAgICB6Lm51bGwoKSxcbiAgICBdKSxcbiAgICBzdWJzY3JpcHRpb25TdGF0dXM6IHoudW5pb24oW3N0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblN0YXR1cywgei5udWxsKCldKSxcbiAgICBzdWJzY3JpcHRpb25SZW5ld2FsRGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICBzdWJzY3JpcHRpb25Tb3VyY2U6IHoudW5pb24oW3N0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblNvdXJjZSwgei5udWxsKCldKSxcbiAgICBzdWJzY3JpcHRpb25Nb2RpZmljYXRpb246IHoudW5pb24oW3N0X3Byb2ZpbGVzX1VwZGF0ZVN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbiwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfT3JnYW5pemF0aW9uUHJvZmlsZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgYXBwQ29udGVudEFjY2Vzc1BvbGljaWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSksXG4gICAgc2RrQ29udGVudEFjY2Vzc1BvbGljaWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSksXG4gICAgZW50aXRsZW1lbnRzOiB6XG4gICAgICAuYXJyYXkoei51bmlvbihbc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQsIHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRdKSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChbXSksXG4gICAgc3Vic2NyaXB0aW9uU3RhdHVzOiB6LnVuaW9uKFtzdF9wcm9maWxlc19TdWJzY3JpcHRpb25TdGF0dXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzdWJzY3JpcHRpb25SZW5ld2FsRGF0ZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHN1YnNjcmlwdGlvblNvdXJjZTogei51bmlvbihbc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uU291cmNlLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3Vic2NyaXB0aW9uTW9kaWZpY2F0aW9uOiB6LnVuaW9uKFtzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb24sIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBkYXRlQ3JlYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBsYXN0VXBkYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX0NvbnRlbnRBY2Nlc3NQb2xpY3kgPSB6LmVudW0oW1xuICBcInB1YmxpY1wiLFxuICBcInByZW1pdW1cIixcbiAgXCJmc190cmFuc2NyaXB0c1wiLFxuICBcInNlY19maWxpbmdzXCIsXG4gIFwic3RyZWV0YWNjb3VudFwiLFxuICBcImFsbFwiLFxuICBcIm1vcmVvdmVyXCIsXG4gIFwibWlkbmlnaHRfdHJhZGVyXCIsXG4gIFwiZnhzdHJlZXRcIixcbiAgXCJhbGxpYW5jZV9uZXdzXCIsXG4gIFwiYmVuemluZ2FcIixcbiAgXCJmbHlfb25fdGhlX3dhbGxcIixcbiAgXCJkbmFfZW5nbGlzaF90cmFuc2xhdGVkXCIsXG4gIFwiZG93X2pvbmVzXCIsXG4gIFwiYXNpYV90cmFuc2NyaXB0c1wiLFxuICBcImNhcGl0YWxfbWFya2V0c1wiLFxuICBcImNyeXB0b19tYXJrZXRzXCIsXG4gIFwicXVhcnRyX2F1ZGlvc1wiLFxuICBcInF1YXJ0cl90cmFuc2NyaXB0c1wiLFxuICBcInF1YXJ0cl9yZXBvcnRzXCIsXG4gIFwicXVhcnRyX3ByZXNlbnRhdGlvbl9tYXRlcmlhbHNcIixcbiAgXCJycF9tdWx0aV9zb3VyY2VfZWFybmluZ3NfY29tcGFyaXNpb25cIixcbiAgXCJycF9mYWN0c2V0X2Vhcm5pbmdzX2NvbXBhcmlzaW9uXCIsXG4gIFwicHJpY2luZ19jdWx0dXJlXCIsXG4gIFwibWlkZGxlX2Vhc3Rlcm5fbWFya2V0c1wiLFxuICBcImZpbmFuY2lhbF90aW1lc1wiLFxuICBcImV4cGVydF9uZXR3b3Jrc1wiLFxuXSlcbmNvbnN0IHN0X3Byb2ZpbGVzX0NvbnRlbnRBY2Nlc3NQb2xpY2llc1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBjb250ZW50QWNjZXNzUG9saWNpZXM6IHouYXJyYXkoei51bmlvbihbc3RfcHJvZmlsZXNfQ29udGVudEFjY2Vzc1BvbGljeSwgei5zdHJpbmcoKV0pKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3Byb2ZpbGVzX1VzZXJPbmJvYXJkaW5nRmVlZGJhY2sgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGluZHVzdHJ5OiB6LnN0cmluZygpLFxuICAgIHJvbGU6IHouc3RyaW5nKCksXG4gICAgZ29hbHM6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgdG9waWNzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfcHJvZmlsZXNfVXNlclNhbGVzUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBlbWFpbDogei5zdHJpbmcoKSxcbiAgICBwaG9uZTogei5zdHJpbmcoKSxcbiAgICBjb21wYW55OiB6LnN0cmluZygpLFxuICAgIG1lc3NhZ2U6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3N1YnNjcmlwdGlvbnNfZGlzcGF0Y2hlcl9CYWRSZXF1ZXN0RXJyb3IgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg0MDApLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9zdWJzY3JpcHRpb25zX0NoZWNrb3V0UmVzcG9uc2UgPSB6Lm9iamVjdCh7IHVybDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9zdWJzY3JpcHRpb25zX0JhZFJlcXVlc3RFcnJvciA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQwMCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3N1YnNjcmlwdGlvbnNfUGxhbkZyZXF1ZW5jeSA9IHouZW51bShbXCJEYWlseVwiLCBcIldlZWtseVwiLCBcIk1vbnRobHlcIiwgXCJZZWFybHlcIl0pXG5jb25zdCBzdF9zdWJzY3JpcHRpb25zX1BsYW5DdXJyZW5jeSA9IHouZW51bShbXCJVU0RcIiwgXCJFVVJcIl0pXG5jb25zdCBzdF9zdWJzY3JpcHRpb25zX0dlbmVyYXRlQ2hlY2tvdXRVcmxQYXJhbXNSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBwcm9kdWN0czogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgZnJlcXVlbmN5OiBzdF9zdWJzY3JpcHRpb25zX1BsYW5GcmVxdWVuY3kub3B0aW9uYWwoKSxcbiAgICBjdXJyZW5jeTogc3Rfc3Vic2NyaXB0aW9uc19QbGFuQ3VycmVuY3kub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3N1YnNjcmlwdGlvbnNfQ3VzdG9tZXJQb3J0YWwgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHRva2VuOiB6LnN0cmluZygpLFxuICAgIGFjY2Vzc191cmw6IHouc3RyaW5nKCksXG4gICAgcmVkaXJlY3RfdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc3RhdHVzOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY3JlYXRlZF9hdDogei5udW1iZXIoKS5pbnQoKSxcbiAgICBjdXN0b21lcl9pZDogei5zdHJpbmcoKSxcbiAgICBleHBpcmVzX2F0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbGlua2VkX2N1c3RvbWVyczogei51bmlvbihbei5hcnJheSh6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbG9naW5fYXQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBsb2dvdXRfYXQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvYmplY3Q6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF9zdWJzY3JpcHRpb25zX05vdEZvdW5kRXJyb3IgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg0MDQpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0xpc3RVc2VyQ2hhdHNSZXF1ZXN0ID0gelxuICAub2JqZWN0KHtcbiAgICBsaW1pdDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKSxcbiAgICBjdXJzb3I6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgb3JkZXI6IHouZW51bShbXCJhc2NcIiwgXCJkZXNjXCJdKS5kZWZhdWx0KFwiZGVzY1wiKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19MaWdodFVzZXJDaGF0UmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgdXNlcklkOiB6LnN0cmluZygpLFxuICAgIGRhdGVDcmVhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGxhc3RVcGRhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIHNjb3BlV2F0Y2hsaXN0SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpc1B1YmxpYzogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfTGlzdFVzZXJDaGF0UmVzcG9uc2UgPSB6LmFycmF5KHN0X3VzZXJfY2hhdHNfTGlnaHRVc2VyQ2hhdFJlc3BvbnNlKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19QYWdpbmF0ZWRMaXN0VXNlckNoYXRSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaXRlbXM6IHouYXJyYXkoc3RfdXNlcl9jaGF0c19MaWdodFVzZXJDaGF0UmVzcG9uc2UpLFxuICAgIGN1cnNvcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGxpbWl0OiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0JhZFJlcXVlc3RFcnJvciA9IHpcbiAgLm9iamVjdCh7IHN0YXR1c0NvZGU6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDQwMCksIG1lc3NhZ2U6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfU291cmNlID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBzcmNLZXk6IHouc3RyaW5nKCksXG4gICAgc3JjTmFtZTogei5zdHJpbmcoKSxcbiAgICBoZDogei5zdHJpbmcoKSxcbiAgICBpbWFnZVVybHM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKS5kZWZhdWx0KFtdKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfRmVlZE9yaWdpbiA9IHpcbiAgLm9iamVjdCh7IHR5cGU6IHouc3RyaW5nKCksIHF1ZXJ5SWQ6IHouc3RyaW5nKCkubWluKDEpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tRmVlZCA9IHpcbiAgLm9iamVjdCh7XG4gICAgaW5wdXRNZXNzYWdlOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICByZXNwb25zZU1lc3NhZ2U6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIHNvdXJjZXM6IHouYXJyYXkoc3RfdXNlcl9jaGF0c19Tb3VyY2UpLFxuICAgIG9yaWdpbjogc3RfdXNlcl9jaGF0c19GZWVkT3JpZ2luLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19UcmVuZGluZ09yaWdpbiA9IHoub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tVHJlbmRpbmcgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlucHV0TWVzc2FnZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgcmVzcG9uc2VNZXNzYWdlOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICBzb3VyY2VzOiB6LmFycmF5KHN0X3VzZXJfY2hhdHNfU291cmNlKSxcbiAgICBvcmlnaW46IHN0X3VzZXJfY2hhdHNfVHJlbmRpbmdPcmlnaW4sXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0V2l0aG91dFVzZXJJZCA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgaW50ZXJhY3Rpb246IHpcbiAgICAgIC51bmlvbihbXG4gICAgICAgIHN0X3VzZXJfY2hhdHNfQ3JlYXRlVXNlckNoYXRJbnRlcmFjdGlvbkZyb21GZWVkLFxuICAgICAgICBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tVHJlbmRpbmcsXG4gICAgICAgIHoubnVsbCgpLFxuICAgICAgXSlcbiAgICAgIC5vcHRpb25hbCgpLFxuICAgIHNjb3BlV2F0Y2hsaXN0SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQ2hhdEludGVyYWN0aW9uVHlwZSA9IHouZW51bShbXG4gIFwidHJlbmRpbmdcIixcbiAgXCJmZWVkXCIsXG4gIFwidXNlcl9tZXNzYWdlXCIsXG4gIFwiZW1wdHlfbWVzc2FnZVwiLFxuICBcInRyZW5kaW5nX3Byb21wdFwiLFxuICBcIndhdGNobGlzdFwiLFxuICBcImZsb3dcIixcbl0pXG5jb25zdCBzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvbk9yaWdpbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25UeXBlLFxuICAgIHF1ZXJ5SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQ2hhdEludGVyYWN0aW9uU2NvcGUgPSB6LmVudW0oW1xuICBcImFsbFwiLFxuICBcImZpbGluZ3NcIixcbiAgXCJ0cmFuc2NyaXB0c1wiLFxuICBcIm5ld3NcIixcbiAgXCJmaWxlc1wiLFxuICBcIm1hcmtldF9pbnRlbGxpZ2VuY2VcIixcbiAgXCJlYXJuaW5nc19jYWxsc1wiLFxuICBcInF1YXJ0cl9wcm9cIixcbiAgXCJtYXJrZXRfbmFycmF0aXZlc1wiLFxuICBcInNlbnRpbWVudC1hdHRlbnRpb25cIixcbiAgXCJqb2ItYW5hbHl0aWNzXCIsXG4gIFwicHJpY2VcIixcbiAgXCJlc3RpbWF0ZXNcIixcbiAgXCJjcnVuY2hiYXNlXCIsXG4gIFwia25vd2xlZGdlLWdyYXBoXCIsXG4gIFwiZXRmLWhvbGRpbmdzXCIsXG4gIFwiY3J5cHRvX21hcmtldHNcIixcbiAgXCJtaWRkbGVfZWFzdGVybl9tYXJrZXRzXCIsXG4gIFwiZmluYW5jaWFsX3RpbWVzXCIsXG4gIFwiZXhwZXJ0X25ldHdvcmtzXCIsXG5dKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19Eb2N1bWVudCA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgZmlsZU5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByYXdTaXplOiB6LnVuaW9uKFt6Lm51bWJlcigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdXBsb2FkVHM6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfVGV4dEJsb2NrID0gelxuICAub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKFwiVEVYVFwiKS5kZWZhdWx0KFwiVEVYVFwiKSwgdmFsdWU6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfRW5naW5lQWlCbG9jayA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwiRU5HSU5FXCIpLmRlZmF1bHQoXCJFTkdJTkVcIiksXG4gICAgYW5zd2VyOiB6LnN0cmluZygpLFxuICAgIGV4cGxhaW5lcjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHdpZGdldFNwZWM6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHdpZGdldFNwZWNVcmw6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpc1N1Y2Nlc3NmdWxBbnN3ZXI6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX1JlcXVlc3RFbnRpdHkgPSB6XG4gIC5vYmplY3QoeyBrZXk6IHouc3RyaW5nKCksIG5hbWU6IHouc3RyaW5nKCksIHR5cGU6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfVHJhY2VRdWVyeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdGV4dDogei5zdHJpbmcoKSxcbiAgICBmaWx0ZXJzOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQ2h1bmtTZW50ZW5jZSA9IHpcbiAgLm9iamVjdCh7IHBudW06IHoubnVtYmVyKCkuaW50KCksIHNudW06IHoubnVtYmVyKCkuaW50KCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQm91bmRpbmdCb3ggPSB6XG4gIC5vYmplY3Qoe1xuICAgIGJvdHRvbTogei5udW1iZXIoKSxcbiAgICBsZWZ0OiB6Lm51bWJlcigpLFxuICAgIHBhZ2U6IHoubnVtYmVyKCkuaW50KCksXG4gICAgcmlnaHQ6IHoubnVtYmVyKCksXG4gICAgdG9wOiB6Lm51bWJlcigpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19UcmFjZVJlc3VsdENodW5rID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBjbnVtOiB6Lm51bWJlcigpLmludCgpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X3VzZXJfY2hhdHNfQ2h1bmtTZW50ZW5jZSksXG4gICAgcmVsZXZhbmNlOiB6Lm51bWJlcigpLFxuICAgIGJvdW5kaW5nQm94ZXM6IHoudW5pb24oW3ouYXJyYXkoc3RfdXNlcl9jaGF0c19Cb3VuZGluZ0JveCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfVHJhY2VSZXN1bHRDUVNTdG9yeSA9IHpcbiAgLm9iamVjdCh7XG4gICAgZG9jdW1lbnRTY29wZTogei5zdHJpbmcoKSxcbiAgICBoZDogei5zdHJpbmcoKSxcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICBsYW5ndWFnZTogei5zdHJpbmcoKSxcbiAgICBjaHVua3M6IHoudW5pb24oW3ouYXJyYXkoc3RfdXNlcl9jaGF0c19UcmFjZVJlc3VsdENodW5rKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNyY0tleTogei5zdHJpbmcoKSxcbiAgICBzcmNOYW1lOiB6LnN0cmluZygpLFxuICAgIHNvdXJjZVJhbms6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDEwKSxcbiAgICB0czogei5zdHJpbmcoKSxcbiAgICBjb250ZW50VHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGRvY3VtZW50VHlwZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwUHJvdmlkZXJJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19BdWRpdFRyYWNlQ1FTUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIkNRU1wiKSxcbiAgICB2YWx1ZXM6IHouYXJyYXkoc3RfdXNlcl9jaGF0c19UcmFjZVJlc3VsdENRU1N0b3J5KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfRXh0ZXJuYWxTb3VyY2VBY3Rpb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbChcIkVYVEVSTkFMXCIpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgaGQ6IHouc3RyaW5nKCksXG4gICAgdXJsOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCksXG4gICAgZmF2aWNvblVybDogei5zdHJpbmcoKS5taW4oMSkubWF4KDIwODMpLnVybCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19FeHRlcm5hbFRyYWNlUmVzdWx0ID0gelxuICAub2JqZWN0KHtcbiAgICBoZDogei5zdHJpbmcoKSxcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIGFjdGlvbjogc3RfdXNlcl9jaGF0c19FeHRlcm5hbFNvdXJjZUFjdGlvbixcbiAgICB0czogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6LnJlY29yZCh6LnVuaW9uKFt6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpXSkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJFWFRFUk5BTFwiKSxcbiAgICB2YWx1ZXM6IHouYXJyYXkoc3RfdXNlcl9jaGF0c19FeHRlcm5hbFRyYWNlUmVzdWx0KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0ID0gelxuICAub2JqZWN0KHsgdHlwZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiRU5HSU5FXCIpLCBzcWxRdWVyeTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHF1ZXJ5OiBzdF91c2VyX2NoYXRzX1RyYWNlUXVlcnksXG4gICAgcmVzdWx0czogei5hcnJheShcbiAgICAgIHoudW5pb24oW1xuICAgICAgICBzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2VDUVNSZXN1bHQsXG4gICAgICAgIHN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZUV4dGVybmFsUmVzdWx0LFxuICAgICAgICBzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2VFbmdpbmVBSVJlc3VsdCxcbiAgICAgIF0pLFxuICAgICksXG4gICAgcXVlcnlJZDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19PcmlnaW5Tb3VyY2VNZXRhZGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgdXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGltYWdlVXJsczogei51bmlvbihbei5hcnJheSh6LnN0cmluZygpLm1pbigxKS5tYXgoMjA4MykudXJsKCkpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX09yaWdpblNvdXJjZXNNZXRhZGF0YSA9IHoucmVjb3JkKHN0X3VzZXJfY2hhdHNfT3JpZ2luU291cmNlTWV0YWRhdGEpXG5jb25zdCBzdF91c2VyX2NoYXRzX0RvY3VtZW50U291cmNlQWN0aW9uID0gelxuICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoXCJET0NVTUVOVFwiKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGhkOiB6LnN0cmluZygpLFxuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIHNyY0tleTogei5zdHJpbmcoKSxcbiAgICBpbWFnZVVybHM6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkubWF4KDIwODMpLnVybCgpKS5vcHRpb25hbCgpLFxuICAgIHVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJwUHJvdmlkZXJJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19FbmdpbmVBaVNvdXJjZUFjdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwiRU5HSU5FXCIpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgc3JjS2V5OiB6LnN0cmluZygpLFxuICAgIGZhdmljb25Vcmw6IHouc3RyaW5nKCkubWluKDEpLm1heCgyMDgzKS51cmwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfQ29sbGFwc2FibGVCbG9jayA9IHpcbiAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwiQ09MTEFQU0VcIiksXG4gICAgdGl0bGU6IHouc3RyaW5nKCksXG4gICAgY29udGVudDogc3RfdXNlcl9jaGF0c19UZXh0QmxvY2ssXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgb3JpZ2luOiBzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvbk9yaWdpbixcbiAgICBpbnB1dE1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgc2NvcGU6IHoudW5pb24oW3N0X3VzZXJfY2hhdHNfQ2hhdEludGVyYWN0aW9uU2NvcGUsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlZmZlY3RpdmVTY29wZTogei51bmlvbihbc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25TY29wZSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNjb3BlRG9jdW1lbnRzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfY2hhdHNfRG9jdW1lbnQpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2NvcGVXYXRjaGxpc3RJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHJlc3BvbnNlQmxvY2s6IHpcbiAgICAgIC51bmlvbihbXG4gICAgICAgIHouZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbc3RfdXNlcl9jaGF0c19UZXh0QmxvY2ssIHN0X3VzZXJfY2hhdHNfRW5naW5lQWlCbG9ja10pLFxuICAgICAgICB6Lm51bGwoKSxcbiAgICAgIF0pXG4gICAgICAub3B0aW9uYWwoKSxcbiAgICByZXNwb25zZUJsb2NrczogelxuICAgICAgLnVuaW9uKFtcbiAgICAgICAgei5hcnJheShcbiAgICAgICAgICB6LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW3N0X3VzZXJfY2hhdHNfVGV4dEJsb2NrLCBzdF91c2VyX2NoYXRzX0VuZ2luZUFpQmxvY2tdKSxcbiAgICAgICAgKSxcbiAgICAgICAgei5udWxsKCksXG4gICAgICBdKVxuICAgICAgLm9wdGlvbmFsKCksXG4gICAgcHJlZGljdGVkU2NvcGU6IHoudW5pb24oW3N0X3VzZXJfY2hhdHNfQ2hhdEludGVyYWN0aW9uU2NvcGUsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBlbnRpdGllczogei51bmlvbihbei5hcnJheShzdF91c2VyX2NoYXRzX1JlcXVlc3RFbnRpdHkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGlzcGxheWVkTWVzc2FnZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGludGVyYWN0aW9uVGltZXN0YW1wOiB6LnN0cmluZygpLFxuICAgIGF1ZGl0VHJhY2VzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcmlnaW5Tb3VyY2VzTWV0YWRhdGE6IHoudW5pb24oW3N0X3VzZXJfY2hhdHNfT3JpZ2luU291cmNlc01ldGFkYXRhLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3JpZ2luU291cmNlczogelxuICAgICAgLnVuaW9uKFtcbiAgICAgICAgei5hcnJheShcbiAgICAgICAgICB6LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgICAgc3RfdXNlcl9jaGF0c19Eb2N1bWVudFNvdXJjZUFjdGlvbixcbiAgICAgICAgICAgIHN0X3VzZXJfY2hhdHNfRXh0ZXJuYWxTb3VyY2VBY3Rpb24sXG4gICAgICAgICAgICBzdF91c2VyX2NoYXRzX0VuZ2luZUFpU291cmNlQWN0aW9uLFxuICAgICAgICAgIF0pLFxuICAgICAgICApLFxuICAgICAgICB6Lm51bGwoKSxcbiAgICAgIF0pXG4gICAgICAub3B0aW9uYWwoKSxcbiAgICBhdWRpdEJsb2Nrczogei51bmlvbihbei5hcnJheShzdF91c2VyX2NoYXRzX0NvbGxhcHNhYmxlQmxvY2spLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGF0ZUNyZWF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gICAgbGFzdFVwZGF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX1VzZXJDaGF0UmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgdXNlcklkOiB6LnN0cmluZygpLFxuICAgIGRhdGVDcmVhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGxhc3RVcGRhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIHNjb3BlV2F0Y2hsaXN0SWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpc1B1YmxpYzogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBpbnRlcmFjdGlvbnM6IHouYXJyYXkoc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb24pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19Ob3RGb3VuZEVycm9yID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDA0KSwgbWVzc2FnZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19EZWxldGVVc2VyQ2hhdFJlc3BvbnNlID0gei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX1VwZGF0ZVVzZXJDaGF0ID0gelxuICAub2JqZWN0KHsgdXNlcklkOiB6LnN0cmluZygpLm1pbigxKSwgbmFtZTogei5zdHJpbmcoKS5taW4oMSkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfY2hhdHNfVXNlckNoYXRVcGRhdGVkUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgdXNlcklkOiB6LnN0cmluZygpLFxuICAgIGxhc3RVcGRhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9jaGF0c19Vc2VyQ2hhdFNoYXJlUmVxdWVzdCA9IHoub2JqZWN0KHsgcHVibGljOiB6LmJvb2xlYW4oKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX2NoYXRzX1VzZXJDaGF0U2hhcmVkUmVzcG9uc2UgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLFxuICAgIGlzUHVibGljOiB6LmJvb2xlYW4oKSxcbiAgICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgbGFzdFVwZGF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gICAgc2NvcGVXYXRjaGxpc3RJZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cyA9IHouZW51bShbXCJzYXZlZFwiLCBcInVuc2F2ZWRcIl0pXG5jb25zdCBzYXZlU3RhdHVzID0gei51bmlvbihbc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cywgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmVQZXJtaXNzaW9uID0gei5lbnVtKFtcInJlYWRcIiwgXCJ1bmRlZmluZWRcIl0pXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmVDb21wYW55Q29udGV4dCA9IHpcbiAgLm9iamVjdCh7IG9yZ2FuaXphdGlvbklkOiB6LnN0cmluZygpLCBwZXJtaXNzaW9uOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmVQZXJtaXNzaW9uIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmVVc2VyQ29udGV4dCA9IHpcbiAgLm9iamVjdCh7IGlkOiB6LnN0cmluZygpLCBwZXJtaXNzaW9uOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmUgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGNvbXBhbnk6IHN0X3VzZXJfcXVlcmllc19Vc2VyUXVlcnlTaGFyZUNvbXBhbnlDb250ZXh0LFxuICAgIHVzZXJzOiB6LmFycmF5KHN0X3VzZXJfcXVlcmllc19Vc2VyUXVlcnlTaGFyZVVzZXJDb250ZXh0KSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZURlc3RpbmF0aW9uVHlwZSA9IHouZW51bShbXCJzbGFja1wiLCBcImVtYWlsXCJdKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NsYWNrU2NoZWR1bGVEZXN0aW5hdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2xhY2tXb3Jrc3BhY2VJZDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgc2xhY2tDaGFubmVsSWQ6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIHNsYWNrQ2hhbm5lbE5hbWU6IHouc3RyaW5nKCkubWluKDEpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX0VtYWlsRGVzdGluYXRpb25QYXJhbXMgPSB6XG4gIC5vYmplY3QoeyBlbWFpbHM6IHouYXJyYXkoei5zdHJpbmcoKSkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgc2NoZWR1bGVyRXhwcmVzc2lvbjogei5zdHJpbmcoKSxcbiAgICB0aW1lem9uZTogei5zdHJpbmcoKSxcbiAgICBkZXN0aW5hdGlvbjogc3RfdXNlcl9xdWVyaWVzX1NjaGVkdWxlRGVzdGluYXRpb25UeXBlLFxuICAgIGRlc3RpbmF0aW9uUGFyYW1zOiB6LnVuaW9uKFtcbiAgICAgIHN0X3VzZXJfcXVlcmllc19TbGFja1NjaGVkdWxlRGVzdGluYXRpb24sXG4gICAgICBzdF91c2VyX3F1ZXJpZXNfRW1haWxEZXN0aW5hdGlvblBhcmFtcyxcbiAgICBdKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19MaWdodFVzZXJRdWVyeVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgb3duZXI6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIG93bmVyVXNlcklkOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICBzYXZlU3RhdHVzOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U3RhdHVzLm9wdGlvbmFsKCksXG4gICAgbGFzdEV4ZWN1dGVkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGF0ZUNyZWF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSkub3B0aW9uYWwoKSxcbiAgICBsYXN0VXBkYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBwaW5uZWQ6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcGluSW5kZXg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvd25lck5hbWU6IHouc3RyaW5nKCksXG4gICAgc2hhcmVkOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmUsXG4gICAgc2NoZWR1bGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19MaXN0T2JqZWN0c1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHsgcmVzdWx0czogei5hcnJheShzdF91c2VyX3F1ZXJpZXNfTGlnaHRVc2VyUXVlcnlSZXNwb25zZSkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKSwgbWVzc2FnZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NpbWlsYXJpdHlFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImFsbFwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwic2ltaWxhcml0eVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bSA9IHouZW51bShbXCJpblwiLCBcImFsbFwiXSlcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImtleXdvcmRcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImVudGl0eVwiKSxcbiAgICBkb2N1bWVudDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImxhbmd1YWdlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJzb3VyY2VcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInJwX3RvcGljXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgIG9wZXJhdGlvbjogc3RfdXNlcl9xdWVyaWVzX0xpc3RPcGVyYXRpb25FbnVtLm9wdGlvbmFsKCksXG4gICAgZG9jdW1lbnQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19EYXRlT3BlcmF0aW9uRW51bSA9IHoubGl0ZXJhbChcImJldHdlZW5cIilcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWwgPSB6LmVudW0oW1xuICBcInRvZGF5XCIsXG4gIFwieWVzdGVyZGF5XCIsXG4gIFwidGhpc193ZWVrXCIsXG4gIFwibGFzdF93ZWVrXCIsXG4gIFwibGFzdF9zZXZlbl9kYXlzXCIsXG4gIFwibGFzdF90aGlydHlfZGF5c1wiLFxuICBcImxhc3RfbmluZXR5X2RheXNcIixcbiAgXCJ5ZWFyX3RvX2RhdGVcIixcbiAgXCJsYXN0X3R3ZWx2ZV9tb250aHNcIixcbiAgXCJsYXN0XzFfaG91cnNcIixcbiAgXCJsYXN0XzNfaG91cnNcIixcbiAgXCJsYXN0XzZfaG91cnNcIixcbiAgXCJsYXN0XzlfaG91cnNcIixcbiAgXCJsYXN0XzEyX2hvdXJzXCIsXG4gIFwibGFzdF8yNF9ob3Vyc1wiLFxuICBcImxhc3RfNDhfaG91cnNcIixcbl0pXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiZGF0ZVwiKSxcbiAgICBvcGVyYXRpb246IHN0X3VzZXJfcXVlcmllc19EYXRlT3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsLCB6LmFycmF5KHouc3RyaW5nKCkpXSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJ0YWdzXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiZG9jdW1lbnRcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwic2VjdGlvbl9tZXRhZGF0YVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJkb2N1bWVudF90eXBlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJyZXBvcnRpbmdfcGVyaW9kXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bS5vcHRpb25hbCgpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJyZXBvcnRpbmdfZW50aXRpZXNcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgdmFsdWU6IHouYXJyYXkoei5udW1iZXIoKS5ndGUoLTEpLmx0ZSgxKSkubWluKDIpLm1heCgyKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInNlbnRpbWVudF9yYW5nZVwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uID0gelxuICAub2JqZWN0KHtcbiAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgb3BlcmF0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcImluXCIpLFxuICAgIHZhbHVlOiB6LmFycmF5KHouc3RyaW5nKCkubWluKDEpKS5taW4oMSksXG4gICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJycF9kb2N1bWVudF9zdWJ0eXBlXCIpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIG9wZXJhdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJpblwiKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwicnBfZG9jdW1lbnRfdmVyc2lvblwiKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcGVyYXRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5cIiksXG4gICAgdmFsdWU6IHouYXJyYXkoei5zdHJpbmcoKS5taW4oMSkpLm1pbigxKSxcbiAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcInJwX2RvY3VtZW50X3R5cGVcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfUlBQcm92aWRlckV4cHJlc3Npb24gPSB6XG4gIC5vYmplY3Qoe1xuICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICB2YWx1ZTogei5hcnJheSh6LnN0cmluZygpLm1pbigxKSkubWluKDEpLFxuICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwicnBfcHJvdmlkZXJcIiksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0OiB6LlpvZFR5cGU8c3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dD4gPSB6LmxhenkoXG4gICgpID0+XG4gICAgelxuICAgICAgLm9iamVjdCh7XG4gICAgICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgICAgdmFsdWU6IHouYXJyYXkoXG4gICAgICAgICAgei51bmlvbihbXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9JbnB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX0lucHV0LFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Db25jZXB0c0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGxhY2VzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Byb2R1Y3RzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1RvcGljc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1NlY3Rpb25NZXRhZGF0YUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdQZXJpb2RFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFByb3ZpZGVyRXhwcmVzc2lvbixcbiAgICAgICAgICBdKSxcbiAgICAgICAgKSxcbiAgICAgICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJvclwiKSxcbiAgICAgIH0pXG4gICAgICAucGFzc3Rocm91Z2goKSxcbilcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX0lucHV0OiB6LlpvZFR5cGU8c3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXQ+ID0gei5sYXp5KFxuICAoKSA9PlxuICAgIHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiYW5kXCIpLFxuICAgICAgICB2YWx1ZTogei5hcnJheShcbiAgICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX0lucHV0LFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXQsXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0LFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgICAgICAgIF0pLFxuICAgICAgICApLFxuICAgICAgfSlcbiAgICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fSW5wdXQ6IHouWm9kVHlwZTxzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9JbnB1dD4gPSB6LmxhenkoXG4gICgpID0+XG4gICAgelxuICAgICAgLm9iamVjdCh7XG4gICAgICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgICAgdmFsdWU6IHoudW5pb24oW1xuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXQsXG4gICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dCxcbiAgICAgICAgXSksXG4gICAgICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwibm90XCIpLFxuICAgICAgfSlcbiAgICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NlbnRlbmNlTGFiZWwgPSB6LmVudW0oW1wiYWNjZXB0ZWRcIiwgXCJyZWplY3RlZFwiXSlcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19JbnB1dFNlbnRlbmNlID0gelxuICAub2JqZWN0KHtcbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIGxhYmVsOiBzdF91c2VyX3F1ZXJpZXNfU2VudGVuY2VMYWJlbC5vcHRpb25hbCgpLFxuICAgIG1ldGFkYXRhOiB6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19TY29wZSA9IHouZW51bShbXG4gIFwiYWxsXCIsXG4gIFwiZmlsaW5nc1wiLFxuICBcInRyYW5zY3JpcHRzXCIsXG4gIFwibmV3c1wiLFxuICBcImZpbGVzXCIsXG4gIFwibWFya2V0X2ludGVsbGlnZW5jZVwiLFxuICBcImVhcm5pbmdzX2NhbGxzXCIsXG5dKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NvcnRFbnVtID0gei5lbnVtKFtcInJlbGV2YW5jZVwiLCBcImRhdGVcIiwgXCJkYXRlX2FzY1wiXSlcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19SYW5raW5nID0gei5lbnVtKFtcInN0YWJsZVwiLCBcImV4cGVyaW1lbnRhbFwiLCBcInNpbWlsYXJpdHlcIl0pXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfQ1FTU2VhcmNoQ3Vyc29yUGFnaW5hdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbGltaXQ6IHoubnVtYmVyKCkuaW50KCkuZ3QoMCkubHQoMTAwMSkuZGVmYXVsdCgxMDApLFxuICAgIGN1cnNvcjogei5udW1iZXIoKS5pbnQoKS5ndCgwKS5kZWZhdWx0KDEpLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfQ1FTU2VhcmNoT2Zmc2V0UGFnaW5hdGlvbiA9IHpcbiAgLm9iamVjdCh7XG4gICAgbGltaXQ6IHoubnVtYmVyKCkuaW50KCkuZ3QoMCkubHQoMTAwMSkub3B0aW9uYWwoKS5kZWZhdWx0KDEwMCksXG4gICAgb2Zmc2V0OiB6Lm51bWJlcigpLmludCgpLmd0ZSgwKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19DUVNDbHVzdGVyaW5nUGFyYW1zID0gelxuICAub2JqZWN0KHtcbiAgICB0aHJlc2hvbGQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSksXG4gICAgY2x1c3RlcldlaWdodDogei5udW1iZXIoKS5kZWZhdWx0KDMpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1NlYXJjaENoYWluID0gei5lbnVtKFtcbiAgXCJkZWR1cGxpY2F0aW9uXCIsXG4gIFwiY2x1c3RlcmluZ1wiLFxuICBcImdyb3VwaW5nXCIsXG4gIFwiY2x1c3RlcmluZy1yZXJhbmtcIixcbl0pXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfUlBYUXVlcnlfSW5wdXQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIC8vIGV4cHJlc3Npb246IHouZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9JbnB1dCxcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX0lucHV0LFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dCxcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19XYXRjaGxpc3RFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgIC8vIF0pLFxuICAgIGV4cHJlc3Npb246IHouYW55KCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X3VzZXJfcXVlcmllc19JbnB1dFNlbnRlbmNlKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pLFxuICAgIHNjb3BlOiBzdF91c2VyX3F1ZXJpZXNfU2NvcGUub3B0aW9uYWwoKSxcbiAgICBzb3J0OiBzdF91c2VyX3F1ZXJpZXNfU29ydEVudW0ub3B0aW9uYWwoKSxcbiAgICByYW5raW5nOiBzdF91c2VyX3F1ZXJpZXNfUmFua2luZy5vcHRpb25hbCgpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHBhZ2luYXRpb246IHpcbiAgICAgIC51bmlvbihbc3RfdXNlcl9xdWVyaWVzX0NRU1NlYXJjaEN1cnNvclBhZ2luYXRpb24sIHN0X3VzZXJfcXVlcmllc19DUVNTZWFyY2hPZmZzZXRQYWdpbmF0aW9uXSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdCh7IGxpbWl0OiAxMCwgY3Vyc29yOiAxIH0pLFxuICAgIGRhdGU6IHoudW5pb24oW3ouYXJyYXkoei51bmtub3duKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2x1c3RlcmluZ1BhcmFtczogei51bmlvbihbc3RfdXNlcl9xdWVyaWVzX0NRU0NsdXN0ZXJpbmdQYXJhbXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXJhbmtUaHJlc2hvbGQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWFyY2hDaGFpbjogelxuICAgICAgLnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfU2VhcmNoQ2hhaW4sIHoubnVsbCgpXSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChcImRlZHVwbGljYXRpb25cIiksXG4gICAgaHlicmlkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHJlcmFua0ZyZXNobmVzc1dlaWdodDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1Byb21wdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgbGFuZ3VhZ2U6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksXG4gICAgdG9uZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB1c2VySW5zdHJ1Y3Rpb25zOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfQ3JlYXRlVXNlclF1ZXJ5ID0gelxuICAub2JqZWN0KHtcbiAgICBuYW1lOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICBvcmdhbml6YXRpb25JZDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgc2F2ZVN0YXR1czogc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cy5vcHRpb25hbCgpLFxuICAgIGxhc3RFeGVjdXRlZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHF1ZXJ5OiBzdF91c2VyX3F1ZXJpZXNfUlBYUXVlcnlfSW5wdXQsXG4gICAgcHJvbXB0UHJvcGVydGllczogei51bmlvbihbc3RfdXNlcl9xdWVyaWVzX1Byb21wdCwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNjaGVkdWxlczogei51bmlvbihbei5hcnJheShzdF91c2VyX3F1ZXJpZXNfU2NoZWR1bGUpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX091dHB1dDogei5ab2RUeXBlPHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0PiA9IHoubGF6eShcbiAgKCkgPT5cbiAgICB6XG4gICAgICAub2JqZWN0KHtcbiAgICAgICAgbWV0YWRhdGE6IHoudW5pb24oW3oub2JqZWN0KHt9KS5wYXJ0aWFsKCkucGFzc3Rocm91Z2goKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgICAgICB2YWx1ZTogei5hcnJheShcbiAgICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX091dHB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX091dHB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0LFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgICAgICAgIF0pLFxuICAgICAgICApLFxuICAgICAgICB0eXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkuZGVmYXVsdChcIm9yXCIpLFxuICAgICAgfSlcbiAgICAgIC5wYXNzdGhyb3VnaCgpLFxuKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0OiB6LlpvZFR5cGU8c3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0PiA9XG4gIHoubGF6eSgoKSA9PlxuICAgIHpcbiAgICAgIC5vYmplY3Qoe1xuICAgICAgICBtZXRhZGF0YTogei51bmlvbihbei5vYmplY3Qoe30pLnBhcnRpYWwoKS5wYXNzdGhyb3VnaCgpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiYW5kXCIpLFxuICAgICAgICB2YWx1ZTogei5hcnJheShcbiAgICAgICAgICB6LnVuaW9uKFtcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX091dHB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19BbmRFeHByZXNzaW9uX091dHB1dCxcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0LFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgICAgICAgIF0pLFxuICAgICAgICApLFxuICAgICAgfSlcbiAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICApXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9PdXRwdXQ6IHouWm9kVHlwZTxzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9PdXRwdXQ+ID1cbiAgei5sYXp5KCgpID0+XG4gICAgelxuICAgICAgLm9iamVjdCh7XG4gICAgICAgIG1ldGFkYXRhOiB6LnVuaW9uKFt6Lm9iamVjdCh7fSkucGFydGlhbCgpLnBhc3N0aHJvdWdoKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICAgICAgdmFsdWU6IHoudW5pb24oW1xuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfTGFuZ3VhZ2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uLFxuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAgICAgICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgICAgICAgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fT3V0cHV0LFxuICAgICAgICAgIHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0LFxuICAgICAgICBdKSxcbiAgICAgICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJub3RcIiksXG4gICAgICB9KVxuICAgICAgLnBhc3N0aHJvdWdoKCksXG4gIClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19SUFhRdWVyeV9PdXRwdXQgPSB6XG4gIC5vYmplY3Qoe1xuICAgIC8vIGV4cHJlc3Npb246IHouZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfU2ltaWxhcml0eUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfS2V5d29yZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9PdXRwdXQsXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfRW50aXR5RXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfQW5kRXhwcmVzc2lvbl9PdXRwdXQsXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX091dHB1dCxcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19XYXRjaGxpc3RFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1NvdXJjZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbXBhbmllc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19NYWNyb1Blb3BsZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX01hY3JvVG9waWNzRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19SUFRvcGljRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19Eb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19TZW50aW1lbnRSYW5nZUV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfVGFnc0V4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgICAvLyAgIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gICAgLy8gICBzdF91c2VyX3F1ZXJpZXNfUlBEb2N1bWVudFR5cGVFeHByZXNzaW9uLFxuICAgIC8vICAgc3RfdXNlcl9xdWVyaWVzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICAgIC8vIF0pLFxuICAgIGV4cHJlc3Npb246IHouYW55KCksXG4gICAgc2VudGVuY2VzOiB6LmFycmF5KHN0X3VzZXJfcXVlcmllc19JbnB1dFNlbnRlbmNlKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pLFxuICAgIHNjb3BlOiBzdF91c2VyX3F1ZXJpZXNfU2NvcGUub3B0aW9uYWwoKSxcbiAgICBzb3J0OiBzdF91c2VyX3F1ZXJpZXNfU29ydEVudW0ub3B0aW9uYWwoKSxcbiAgICByYW5raW5nOiBzdF91c2VyX3F1ZXJpZXNfUmFua2luZy5vcHRpb25hbCgpLFxuICAgIGRlYnVnOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHBhZ2luYXRpb246IHpcbiAgICAgIC51bmlvbihbc3RfdXNlcl9xdWVyaWVzX0NRU1NlYXJjaEN1cnNvclBhZ2luYXRpb24sIHN0X3VzZXJfcXVlcmllc19DUVNTZWFyY2hPZmZzZXRQYWdpbmF0aW9uXSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdCh7IGxpbWl0OiAxMCwgY3Vyc29yOiAxIH0pLFxuICAgIGRhdGU6IHoudW5pb24oW3ouYXJyYXkoei51bmtub3duKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2x1c3RlcmluZ1BhcmFtczogei51bmlvbihbc3RfdXNlcl9xdWVyaWVzX0NRU0NsdXN0ZXJpbmdQYXJhbXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICByZXJhbmtUaHJlc2hvbGQ6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBzZWFyY2hDaGFpbjogelxuICAgICAgLnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfU2VhcmNoQ2hhaW4sIHoubnVsbCgpXSlcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChcImRlZHVwbGljYXRpb25cIiksXG4gICAgaHlicmlkOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHJlcmFua0ZyZXNobmVzc1dlaWdodDogei51bmlvbihbei5udW1iZXIoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgbmFtZTogei5zdHJpbmcoKS5taW4oMSksXG4gICAgb3duZXI6IHouc3RyaW5nKCkubWluKDEpLFxuICAgIG93bmVyVXNlcklkOiB6LnN0cmluZygpLm1pbigxKSxcbiAgICBzYXZlU3RhdHVzOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U3RhdHVzLm9wdGlvbmFsKCksXG4gICAgbGFzdEV4ZWN1dGVkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZGF0ZUNyZWF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSkub3B0aW9uYWwoKSxcbiAgICBsYXN0VXBkYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSxcbiAgICBwaW5uZWQ6IHoudW5pb24oW3ouYm9vbGVhbigpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgcGluSW5kZXg6IHoudW5pb24oW3oubnVtYmVyKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvd25lck5hbWU6IHouc3RyaW5nKCksXG4gICAgc2hhcmVkOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmUsXG4gICAgc2NoZWR1bGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBxdWVyeTogc3RfdXNlcl9xdWVyaWVzX1JQWFF1ZXJ5X091dHB1dCxcbiAgICBwcm9tcHRQcm9wZXJ0aWVzOiB6LnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfUHJvbXB0LCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3F1ZXJpZXNfRGVsZXRlT2JqZWN0UmVzcG9uc2UgPSB6Lm9iamVjdCh7IGlkOiB6LnN0cmluZygpIH0pLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19VcGRhdGVVc2VyUXVlcnkgPSB6XG4gIC5vYmplY3Qoe1xuICAgIG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBvcmdhbml6YXRpb25JZDogei5zdHJpbmcoKS5taW4oMSksXG4gICAgc2F2ZVN0YXR1czogei51bmlvbihbc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cywgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGxhc3RFeGVjdXRlZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHF1ZXJ5OiB6LnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfUlBYUXVlcnlfSW5wdXQsIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBwcm9tcHRQcm9wZXJ0aWVzOiB6LnVuaW9uKFtzdF91c2VyX3F1ZXJpZXNfUHJvbXB0LCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2NoZWR1bGVzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19CdWxrRGVsZXRlT2JqZWN0c1BhcmFtcyA9IHouYXJyYXkoei5zdHJpbmcoKSlcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19TZXRQaW5uZWRJdGVtc1BhcmFtcyA9IHouYXJyYXkoei5zdHJpbmcoKSlcbmNvbnN0IHN0X3VzZXJfcXVlcmllc19Vc2VyUGlubmVkUXVlcmllc1Jlc3BvbnNlID0gelxuICAub2JqZWN0KHsgdXNlcklkOiB6LnN0cmluZygpLCBpdGVtczogei5hcnJheSh6LnN0cmluZygpKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc2hhcmVkID0gei51bmlvbihbei5lbnVtKFtcImNvbXBhbnlcIiwgXCJwdWJsaWNcIiwgXCJhbGxcIl0pLCB6Lm51bGwoKV0pLm9wdGlvbmFsKClcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RGaWx0ZXIgPSB6LmVudW0oW1widGhlbWF0aWNcIiwgXCJjb21tdW5pdHlcIl0pXG5jb25zdCBnbG9iYWxUeXBlID0gei51bmlvbihbc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdEZpbHRlciwgei5udWxsKCldKS5vcHRpb25hbCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0U3RhdHVzID0gei5lbnVtKFtcbiAgXCJwcml2YXRlXCIsXG4gIFwiZHJhZnRcIixcbiAgXCJwdWJsaXNoZWRcIixcbiAgXCJhcmNoaXZlZFwiLFxuXSlcbmNvbnN0IGdsb2JhbFN0YXR1cyA9IHoudW5pb24oW3N0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RTdGF0dXMsIHoubnVsbCgpXSkub3B0aW9uYWwoKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUGVybWlzc2lvbiA9IHouZW51bShbXCJyZWFkXCIsIFwidW5kZWZpbmVkXCJdKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlQ29tcGFueUNvbnRleHRSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IG9yZ2FuaXphdGlvbklkOiB6LnN0cmluZygpLCBwZXJtaXNzaW9uOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVQZXJtaXNzaW9uIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVVc2VyQ29udGV4dCA9IHpcbiAgLm9iamVjdCh7IGlkOiB6LnN0cmluZygpLCBwZXJtaXNzaW9uOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVSZXNwb25zZV9JbnB1dCA9IHpcbiAgLm9iamVjdCh7XG4gICAgY29tcGFueTogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlQ29tcGFueUNvbnRleHRSZXNwb25zZSxcbiAgICB1c2Vyczogei5hcnJheShzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVVc2VyQ29udGV4dCksXG4gICAgaXNQdWJsaWM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0QXV0aG9yRGF0YSA9IHpcbiAgLm9iamVjdCh7IG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSksIGF2YXRhclVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VHlwZSA9IHouZW51bShbXCJ0aGVtYXRpY1wiLCBcImNvbW11bml0eVwiXSlcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3REYXRhID0gelxuICAub2JqZWN0KHtcbiAgICBhdXRob3I6IHoudW5pb24oW3N0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RBdXRob3JEYXRhLCB6Lm51bGwoKV0pLFxuICAgIGlzRmVhdHVyZWQ6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIHN0YXR1czogc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdFN0YXR1cyxcbiAgICBzdGF0dXNMYXN0VXBkYXRlZDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgICB0eXBlOiBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VHlwZSxcbiAgICBtb3RpdmF0aW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICB9KVxuICAucGFydGlhbCgpXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfTGlnaHRXYXRjaGxpc3RSZXNwb25zZV9JbnB1dCA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgdXNlcl9pZDogei5zdHJpbmcoKSxcbiAgICBkYXRlQ3JlYXRlZDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KS5vcHRpb25hbCgpLFxuICAgIGxhc3RVcGRhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLFxuICAgIGxhc3RJbnRlcmFjdGVkOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBvd25lck5hbWU6IHouc3RyaW5nKCksXG4gICAgb3duZXJJbWFnZVVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIHNoYXJlZDogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUmVzcG9uc2VfSW5wdXQsXG4gICAgZGVzY3JpcHRpb246IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBpbWFnZVVybDogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ2xvYmFsOiB6LnVuaW9uKFtzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0RGF0YSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGlzRmF2b3JpdGU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgZmF2b3JpdGVzQ291bnQ6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDApLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RPYmplY3RzUmVzcG9uc2VfSW5wdXQgPSB6XG4gIC5vYmplY3QoeyByZXN1bHRzOiB6LmFycmF5KHN0X3VzZXJfd2F0Y2hsaXN0c19MaWdodFdhdGNobGlzdFJlc3BvbnNlX0lucHV0KSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UgPSB6XG4gIC5vYmplY3QoeyBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLCBtZXNzYWdlOiB6LnN0cmluZygpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0VXBkYXRlQXV0aG9yRGF0YSA9IHpcbiAgLm9iamVjdCh7IG5hbWU6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdENyZWF0ZURhdGEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIGF1dGhvcjogei51bmlvbihbc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFVwZGF0ZUF1dGhvckRhdGEsIHoubnVsbCgpXSksXG4gICAgdHlwZTogc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdFR5cGUsXG4gICAgbW90aXZhdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0NyZWF0ZVdhdGNobGlzdFBhcmFtcyA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBpdGVtczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBkZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ2xvYmFsOiB6LnVuaW9uKFtzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0Q3JlYXRlRGF0YSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX09ialBlcm1pc3Npb25zID0gei5vYmplY3QoeyBlZGl0YWJsZTogei5ib29sZWFuKCkgfSkucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFJlc3BvbnNlX0lucHV0ID0gelxuICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICB1c2VyX2lkOiB6LnN0cmluZygpLFxuICAgIGRhdGVDcmVhdGVkOiB6LnN0cmluZygpLmRhdGV0aW1lKHsgb2Zmc2V0OiB0cnVlIH0pLm9wdGlvbmFsKCksXG4gICAgbGFzdFVwZGF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gICAgbGFzdEludGVyYWN0ZWQ6IHoudW5pb24oW3ouc3RyaW5nKCksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIG93bmVyTmFtZTogei5zdHJpbmcoKSxcbiAgICBvd25lckltYWdlVXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgc2hhcmVkOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVSZXNwb25zZV9JbnB1dCxcbiAgICBkZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGltYWdlVXJsOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgY2F0ZWdvcnk6IHoudW5pb24oW3ouYXJyYXkoei5zdHJpbmcoKSksIHoubnVsbCgpXSkub3B0aW9uYWwoKSxcbiAgICBnbG9iYWw6IHoudW5pb24oW3N0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3REYXRhLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgaXNGYXZvcml0ZTogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBmYXZvcml0ZXNDb3VudDogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoMCksXG4gICAgaXRlbXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKS5kZWZhdWx0KFtdKSxcbiAgICBwZXJtaXNzaW9uczogc3RfdXNlcl93YXRjaGxpc3RzX09ialBlcm1pc3Npb25zLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0RlbGV0ZVdhdGNobGlzdFJlc3BvbnNlID0gei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VXBkYXRlRGF0YSA9IHpcbiAgLm9iamVjdCh7XG4gICAgYXV0aG9yOiB6LnVuaW9uKFtzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0VXBkYXRlQXV0aG9yRGF0YSwgei5udWxsKCldKSxcbiAgICBpc0ZlYXR1cmVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgICBzdGF0dXM6IHoudW5pb24oW3N0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RTdGF0dXMsIHoubnVsbCgpXSksXG4gICAgdHlwZTogei51bmlvbihbc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdFR5cGUsIHoubnVsbCgpXSksXG4gICAgbW90aXZhdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKSxcbiAgfSlcbiAgLnBhcnRpYWwoKVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1B1dFdhdGNobGlzdFBhcmFtcyA9IHpcbiAgLm9iamVjdCh7XG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBpdGVtczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICBkZXNjcmlwdGlvbjogei51bmlvbihbei5zdHJpbmcoKSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLm9wdGlvbmFsKCksXG4gICAgZ2xvYmFsOiB6LnVuaW9uKFtzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VXBkYXRlRGF0YSwgei5udWxsKCldKS5vcHRpb25hbCgpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1BhdGNoV2F0Y2hsaXN0UGFyYW1zID0gelxuICAub2JqZWN0KHtcbiAgICBuYW1lOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGl0ZW1zOiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGRlc2NyaXB0aW9uOiB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bGwoKV0pLFxuICAgIGNhdGVnb3J5OiB6LnVuaW9uKFt6LmFycmF5KHouc3RyaW5nKCkpLCB6Lm51bGwoKV0pLFxuICAgIGdsb2JhbDogei51bmlvbihbc3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdFVwZGF0ZURhdGEsIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19CdWxrRGVsZXRlV2F0Y2hsaXN0UGFyYW1zID0gei5hcnJheSh6LnN0cmluZygpKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0J1bGtEZWxldGVXYXRjaGxpc3RSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IGlkczogei5hcnJheSh6LnN0cmluZygpKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RzUGFyZW50c1BhcmFtcyA9IHouYXJyYXkoei5zdHJpbmcoKSlcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RQYXJlbnQgPSB6XG4gIC5vYmplY3QoeyBpZDogei5zdHJpbmcoKSwgbmFtZTogei5zdHJpbmcoKSwgdHlwZTogei5zdHJpbmcoKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RQYXJlbnRzUmVzcG9uc2UgPSB6LnJlY29yZChcbiAgei5hcnJheShzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UGFyZW50KSxcbilcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RJdGVtc1VwZGF0ZVJlcXVlc3QgPSB6XG4gIC5vYmplY3QoeyBpdGVtczogei5hcnJheSh6LnN0cmluZygpKSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlQ29tcGFueUNvbnRleHRSZXF1ZXN0ID0gelxuICAub2JqZWN0KHsgcGVybWlzc2lvbjogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUGVybWlzc2lvbiB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUmVxdWVzdCA9IHpcbiAgLm9iamVjdCh7XG4gICAgY29tcGFueTogei51bmlvbihbc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlQ29tcGFueUNvbnRleHRSZXF1ZXN0LCB6Lm51bGwoKV0pLFxuICAgIHVzZXJzOiB6LnVuaW9uKFt6LmFycmF5KHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZVVzZXJDb250ZXh0KSwgei5udWxsKCldKSxcbiAgICBpc1B1YmxpYzogei51bmlvbihbei5ib29sZWFuKCksIHoubnVsbCgpXSksXG4gIH0pXG4gIC5wYXJ0aWFsKClcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19HZW5lcmF0ZVByZXNpZ25lZFVybFJlc3BvbnNlID0gelxuICAub2JqZWN0KHsgdXJsOiB6LnN0cmluZygpLCBrZXk6IHouc3RyaW5nKCkgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19VbkF1dGhvcmlzZWRXYXRjaGxpc3RBY2Nlc3NFcnJvciA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDAzKSxcbiAgICBlcnJvckNvZGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiV0FUQ0hMSVNULUZPUkJJRERFTlwiKSxcbiAgICBtZXNzYWdlOiB6XG4gICAgICAuc3RyaW5nKClcbiAgICAgIC5vcHRpb25hbCgpXG4gICAgICAuZGVmYXVsdChcIllvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHBlcmZvcm0gdGhpcyBhY3Rpb24gb24gd2F0Y2hsaXN0IHt3YXRjaGxpc3RfaWR9XCIpLFxuICAgIHJlcXVlc3RJZDogei5zdHJpbmcoKSxcbiAgfSlcbiAgLnBhc3N0aHJvdWdoKClcbmNvbnN0IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3ROb3RGb3VuZEVycm9yID0gelxuICAub2JqZWN0KHtcbiAgICBzdGF0dXNDb2RlOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCg0MDQpLFxuICAgIGVycm9yQ29kZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJXQVRDSExJU1QtTk9UX0ZPVU5EXCIpLFxuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiV2F0Y2hsaXN0IHt3YXRjaGxpc3RfaWR9IG5vdCBmb3VuZFwiKSxcbiAgICByZXF1ZXN0SWQ6IHouc3RyaW5nKCksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dhdGNobGlzdHNfRGVsZXRlQXNzZXRSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCksIGRlbGV0ZWRBdDogei5zdHJpbmcoKS5kYXRldGltZSh7IG9mZnNldDogdHJ1ZSB9KSB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93YXRjaGxpc3RzX1Jlc291cmNlTm90Rm91bmRFcnJvciA9IHpcbiAgLm9iamVjdCh7XG4gICAgc3RhdHVzQ29kZTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoNDA0KSxcbiAgICBlcnJvckNvZGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5kZWZhdWx0KFwiW1JFU09VUkNFXS1OT1RfRk9VTkRcIiksXG4gICAgbWVzc2FnZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJSZXNvdXJjZSBub3QgZm91bmRcIiksXG4gICAgcmVxdWVzdElkOiB6LnN0cmluZygpLFxuICB9KVxuICAucGFzc3Rocm91Z2goKVxuY29uc3Qgc3RfdXNlcl93b3JrZmxvd3NfV29ya2Zsb3dSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgZGF0ZUNyZWF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gICAgbGFzdFVwZGF0ZWQ6IHouc3RyaW5nKCkuZGF0ZXRpbWUoeyBvZmZzZXQ6IHRydWUgfSksXG4gIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5jb25zdCBzdF91c2VyX3dvcmtmbG93c19Xb3JrZmxvd0xpc3RSZXNwb25zZSA9IHpcbiAgLm9iamVjdCh7IHVzZXJJZDogei5zdHJpbmcoKSwgd29ya2Zsb3dzOiB6LmFycmF5KHN0X3VzZXJfd29ya2Zsb3dzX1dvcmtmbG93UmVzcG9uc2UpIH0pXG4gIC5wYXNzdGhyb3VnaCgpXG5cbmV4cG9ydCBjb25zdCBzY2hlbWFzID0ge1xuICBzdF9hZ2VudHNfQmFzZUZpbHRlcl9zdHJfLFxuICBzdF9hZ2VudHNfRGF0ZVJhbmdlLFxuICBzdF9hZ2VudHNfU2VudGltZW50UG9sYXJpdHksXG4gIHN0X2FnZW50c19Eb2N1bWVudElkRmlsdGVyLFxuICBzdF9hZ2VudHNfVHJhbnNjcmlwdFN1YnR5cGUsXG4gIHN0X2FnZW50c19Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIsXG4gIHN0X2FnZW50c19GaWxpbmdTdWJ0eXBlLFxuICBzdF9hZ2VudHNfRG9jdW1lbnRGaWxpbmdGaWx0ZXIsXG4gIHN0X2FnZW50c19Eb2N1bWVudE5ld3NGaWx0ZXIsXG4gIHN0X2FnZW50c19Eb2N1bWVudFRyYW5zY3JpcHRQcmVzZW50YXRpb25GaWx0ZXIsXG4gIHN0X2FnZW50c19Qcm92aWRlckZpbHRlcixcbiAgc3RfYWdlbnRzX1NvdXJjZUZpbHRlcixcbiAgc3RfYWdlbnRzX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIsXG4gIHN0X2FnZW50c19Eb2NUeXBlRmlsdGVyLFxuICBzdF9hZ2VudHNfQ29udGVudEZpbHRlcixcbiAgc3RfYWdlbnRzX1F1ZXJ5RmlsdGVycyxcbiAgc3RfYWdlbnRzX1NlYXJjaFRvb2xDb25maWcsXG4gIHN0X2FnZW50c19GZXRjaFVybFRvb2xDb25maWcsXG4gIHN0X2FnZW50c19Db21wYW55VGVhcnNoZWV0VG9vbENvbmZpZyxcbiAgc3RfYWdlbnRzX1JlZmxlY3RUb29sQ29uZmlnLFxuICBzdF9hZ2VudHNfQWdlbnRFeGVjdXRlUmVxdWVzdCxcbiAgc3RfYWdlbnRzX0FjdGlvbldTUmVzcG9uc2UsXG4gIHN0X2FnZW50c19UaGlua2luZ1dTUmVzcG9uc2UsXG4gIHN0X2FnZW50c19BbnN3ZXJXU1Jlc3BvbnNlLFxuICBzdF9hZ2VudHNfRXJyb3JXU1Jlc3BvbnNlLFxuICBzdF9hZ2VudHNfVHJhY2VRdWVyeSxcbiAgc3RfYWdlbnRzX0NodW5rU2VudGVuY2UsXG4gIHN0X2FnZW50c19Cb3VuZGluZ0JveCxcbiAgc3RfYWdlbnRzX1RyYWNlUmVzdWx0Q2h1bmssXG4gIHN0X2FnZW50c19UcmFjZVJlc3VsdENRU1N0b3J5LFxuICBzdF9hZ2VudHNfQXVkaXRUcmFjZUNRU1Jlc3VsdCxcbiAgc3RfYWdlbnRzX0V4dGVybmFsU291cmNlQWN0aW9uLFxuICBzdF9hZ2VudHNfRXh0ZXJuYWxUcmFjZVJlc3VsdCxcbiAgc3RfYWdlbnRzX0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCxcbiAgc3RfYWdlbnRzX0F1ZGl0VHJhY2VFbmdpbmVBSVJlc3VsdCxcbiAgc3RfYWdlbnRzX1NlYXJjaEF1ZGl0VjEsXG4gIHN0X2FnZW50c19NYXJrZG93bkF1ZGl0VjEsXG4gIHN0X2FnZW50c19CYXNlVG9vbEF1ZGl0VHJhY2UsXG4gIHN0X2FnZW50c19Ub29sQXVkaXRXU1Jlc3BvbnNlLFxuICBzdF9hZ2VudHNfQ29tcGxldGVXU1Jlc3BvbnNlLFxuICBzdF9hZ2VudHNfRXJyb3JSZXNwb25zZSxcbiAgc3RfYXBpX2tleXNfR2V0QXBpS2V5LFxuICBzdF9hcGlfa2V5c19CYWRSZXF1ZXN0RXJyb3IsXG4gIHN0X2FwaV9rZXlzX0NyZWF0ZUFwaUtleSxcbiAgc3RfYXBpX2tleXNfQ3JlYXRlZEFwaUtleSxcbiAgc3RfYXBpX2tleXNfRXJyb3JSZXNwb25zZSxcbiAgc3RfYXBpX2tleXNfS2V5RW5hYmxlZCxcbiAgc3RfYXBpX2tleXNfS2V5RGlzYWJsZWQsXG4gIHN0X2FwaV9rZXlzX0tleURlbGV0ZWQsXG4gIHF1ZXJ5LFxuICBsaW1pdCxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXN1bHQsXG4gIHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXQsXG4gIHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXRzLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdFJlc3BvbnNlLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9CYWRSZXF1ZXN0RXJyb3IsXG4gIHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1VuYXV0aG9yaXplZFJlc3BvbnNlLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0UXVlcnksXG4gIHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0dyb3VwaW5nRGV0YWlscyxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfV2F0Y2hsaXN0QXV0b3N1Z2dlc3RSZXF1ZXN0LFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdFJlcXVlc3QsXG4gIHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0QmF0Y2hVcGxvYWRSZXF1ZXN0LFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Db21wYW55SW5mbyxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RFbnRpdGllc01hcHBlZCxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RCYXRjaFVwbG9hZFJlc3BvbnNlX0lucHV0LFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9FcnJvckNsaWVudFJlc3BvbnNlLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9SZXRyaWV2YWxEZXRhaWxzLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9SYW5raW5nRGV0YWlscyxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfVmVzcGFSZXF1ZXN0RGV0YWlscyxcbiAgc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQ29udGVudE93bmVyLFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlV2F0Y2hsaXN0QXV0b3N1Z2dlc3RSZXF1ZXN0LFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlQXV0b3N1Z2dlc3RSZXF1ZXN0LFxuICBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlQXV0b3N1Z2dlc3RCYXRjaFVwbG9hZFJlcXVlc3QsXG4gIHBhY2thZ2VJZHMsXG4gIHNvdXJjZUlkcyxcbiAgZW50aXRsZWQsXG4gIHN0X2JmZl9jb250ZW50X2NhdGFsb2dfUGFnaW5hdGlvbk1ldGFkYXRhLFxuICBzdF9iZmZfY29udGVudF9jYXRhbG9nX1NvdXJjZU1vZGVsLFxuICBzdF9iZmZfY29udGVudF9jYXRhbG9nX0dlbmVyaWNQYWdpbmF0ZWRSZXNwb25zZV9Tb3VyY2VNb2RlbF8sXG4gIHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19Db250ZW50UGFja2FnZU1vZGVsLFxuICBzdF9iZmZfY29udGVudF9jYXRhbG9nX0dlbmVyaWNQYWdpbmF0ZWRSZXNwb25zZV9Db250ZW50UGFja2FnZU1vZGVsXyxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfUXVvdGVUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfUXVvdGVEYXRhVG9vbFJlc3BvbnNlLFxuICBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICBzdF9iZmZfZGF0YV90b29sc19DaGFuZ2VUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQ2hhbmdlRGF0YVRvb2xSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfRWFybmluZ3NTdXJwcmlzZURhdGEsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0Vhcm5pbmdzU3VycHJpc2VEYXRhVG9vbFJlc3BvbnNlLFxuICBzdF9iZmZfZGF0YV90b29sc19SZWNvbW1lbmRhdGlvbkNvbnNlbnN1cyxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQW5hbHlzdFRvb2xEYXRhLFxuICBzdF9iZmZfZGF0YV90b29sc19BbmFseXN0RGF0YVRvb2xSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfUHJpY2VUYXJnZXRUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfUHJpY2VUYXJnZXREYXRhVG9vbFJlc3BvbnNlLFxuICBzdF9iZmZfZGF0YV90b29sc19TZW50aW1lbnRCRkZUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfU2VudGltZW50QkZGUmVzcG9uc2UsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlRvb2xEYXRhLFxuICBzdF9iZmZfZGF0YV90b29sc19JbmNvbWVTdGF0ZW1lbnRCRkZSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQ2FzaEZsb3dTdGF0ZW1lbnRCRkZUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQ2FzaEZsb3dTdGF0ZW1lbnRCRkZSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQmFsYW5jZVN0YXRlbWVudEJGRlRvb2xEYXRhLFxuICBzdF9iZmZfZGF0YV90b29sc19CYWxhbmNlU3RhdGVtZW50QkZGUmVzcG9uc2UsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0tleU1ldHJpY3NUb29sRGF0YSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfS2V5TWV0cmljc0RhdGFUb29sUmVzcG9uc2UsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX1JhdGlvc1Rvb2xEYXRhLFxuICBzdF9iZmZfZGF0YV90b29sc19SYXRpb3NEYXRhVG9vbFJlc3BvbnNlLFxuICBzdF9iZmZfZGF0YV90b29sc19DdXJyZW5jeVRvb2xEYXRhLFxuICBzdF9iZmZfZGF0YV90b29sc19DdXJyZW5jeURhdGFUb29sUmVzcG9uc2UsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX1BsdXNTY29yZXMsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX1BlcmZvcm1hbmNlU2NvcmVzLFxuICBzdF9iZmZfZGF0YV90b29sc19FU0dTY29yZURhdGEsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0VTR1Njb3JlRGF0YVRvb2xSZXNwb25zZSxcbiAgc3RfYmZmX2RhdGFfdG9vbHNfQ3VzdG9tRGF0YVZpZXdDb2x1bW4sXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3UmVzcG9uc2UsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3TGlzdFJlc3BvbnNlLFxuICBzdF9iZmZfZGF0YV90b29sc19DcmVhdGVDdXN0b21EYXRhVmlld1JlcXVlc3QsXG4gIHN0X2JmZl9kYXRhX3Rvb2xzX1VwZGF0ZUN1c3RvbURhdGFWaWV3UmVxdWVzdCxcbiAgc3RfYnJpZWZzX0RlbGl2ZXJ5RGVzdGluYXRpb24sXG4gIHN0X2JyaWVmc19XZWVrRGF5LFxuICBzdF9icmllZnNfU2NoZWR1bGUsXG4gIHN0X2JyaWVmc19CcmllZkNvbmZpZ1Jlc3BvbnNlX0lucHV0LFxuICBzdF9icmllZnNfTGlzdEJyaWVmQ29uZmlnc1Jlc3BvbnNlX0lucHV0LFxuICBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgc3RfYnJpZWZzX0JyaWVmQ29uZmlnUGF5bG9hZCxcbiAgc3RfYnJpZWZzX0JyaWVmUmVwb3J0RW50aXR5SW5mbyxcbiAgc3RfYnJpZWZzX1NpbmdsZUVudGl0eVJlcG9ydCxcbiAgc3RfYnJpZWZzX0NodW5rSGlnaGxpZ2h0LFxuICBzdF9icmllZnNfU291cmNlUmVmZXJlbmNlLFxuICBzdF9icmllZnNfUmVwb3J0U291cmNlc19JbnB1dCxcbiAgc3RfYnJpZWZzX0JyaWVmUmVwb3J0UmVzcG9uc2VfSW5wdXQsXG4gIHN0X2JyaWVmc19MYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlX0lucHV0LFxuICBzdF9icmllZnNfTGlzdEJyaWVmUmVwb3J0c1Jlc3BvbnNlX0lucHV0LFxuICBzdF9jcXNfU2ltaWxhcml0eUV4cHJlc3Npb24sXG4gIHN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSxcbiAgc3RfY3FzX0tleXdvcmRFeHByZXNzaW9uLFxuICBzdF9jcXNfRW50aXR5RXhwcmVzc2lvbixcbiAgc3RfY3FzX0xhbmd1YWdlRXhwcmVzc2lvbixcbiAgc3RfY3FzX1NvdXJjZUV4cHJlc3Npb24sXG4gIHN0X2Nxc19SUFRvcGljRXhwcmVzc2lvbixcbiAgc3RfY3FzX0RhdGVPcGVyYXRpb25FbnVtLFxuICBzdF9jcXNfRGF0ZUludGVydmFsLFxuICBzdF9jcXNfRGF0ZUludGVydmFsRXhwcmVzc2lvbixcbiAgc3RfY3FzX1RhZ3NFeHByZXNzaW9uLFxuICBzdF9jcXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uLFxuICBzdF9jcXNfTWFjcm9Pcmdhbml6YXRpb25zRXhwcmVzc2lvbixcbiAgc3RfY3FzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uLFxuICBzdF9jcXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uLFxuICBzdF9jcXNfTWFjcm9QbGFjZXNFeHByZXNzaW9uLFxuICBzdF9jcXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24sXG4gIHN0X2Nxc19NYWNyb1RvcGljc0V4cHJlc3Npb24sXG4gIHN0X2Nxc19Eb2N1bWVudEV4cHJlc3Npb24sXG4gIHN0X2Nxc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uLFxuICBzdF9jcXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvbixcbiAgc3RfY3FzX1JlcG9ydGluZ1BlcmlvZEV4cHJlc3Npb24sXG4gIHN0X2Nxc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uLFxuICBzdF9jcXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uLFxuICBzdF9jcXNfUlBEb2N1bWVudFN1YnR5cGVUeXBlRXhwcmVzc2lvbixcbiAgc3RfY3FzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbixcbiAgc3RfY3FzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvbixcbiAgc3RfY3FzX1JQUHJvdmlkZXJFeHByZXNzaW9uLFxuICBzdF9jcXNfT3JFeHByZXNzaW9uLFxuICBzdF9jcXNfQW5kRXhwcmVzc2lvbixcbiAgc3RfY3FzX05vdEV4cHJlc3Npb24sXG4gIHN0X2Nxc19TZW50ZW5jZUxhYmVsLFxuICBzdF9jcXNfSW5wdXRTZW50ZW5jZSxcbiAgc3RfY3FzX1Njb3BlLFxuICBzdF9jcXNfU29ydEVudW0sXG4gIHN0X2Nxc19SYW5raW5nLFxuICBzdF9jcXNfQ1FTU2VhcmNoQ3Vyc29yUGFnaW5hdGlvbixcbiAgc3RfY3FzX0NRU1NlYXJjaE9mZnNldFBhZ2luYXRpb24sXG4gIHN0X2Nxc19DUVNDbHVzdGVyaW5nUGFyYW1zLFxuICBzdF9jcXNfU2VhcmNoQ2hhaW4sXG4gIHN0X2Nxc19SUFhRdWVyeSxcbiAgc3RfY3FzX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzLFxuICBzdF9jcXNfVmVzcGFUaW1lTWV0cmljcyxcbiAgc3RfY3FzX1F1ZXJ5UmVsYXRpb25zaGlwLFxuICBzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtLFxuICBzdF9jcXNfRGlzY292ZXJ5UGFuZWxHcm91cFJlc3BvbnNlLFxuICBzdF9jcXNfQmFkUmVxdWVzdEVycm9yLFxuICBzdF9jcXNfRW50aXR5Q29vcmRpbmF0ZSxcbiAgc3RfY3FzX1NlbnRlbmNlLFxuICBzdF9jcXNfQ2h1bmtTZW50ZW5jZSxcbiAgc3RfY3FzX0JvdW5kaW5nQm94LFxuICBzdF9jcXNfQ2h1bmssXG4gIHN0X2Nxc19DbHVzdGVyU3VtbWFyeSxcbiAgc3RfY3FzX1N0b3J5LFxuICBzdF9jcXNfQ2x1c3RlckdlbmVyYWxNZXRyaWNzLFxuICBzdF9jcXNfVHJhaW5pbmdTdGF0aXN0aWNzLFxuICBzdF9jcXNfU2VhcmNoUmVzcG9uc2VEZXRlY3Rpb24sXG4gIHN0X2Nxc19TZWFyY2hSZXNwb25zZSxcbiAgc3RfY3FzX0VudGl0eSxcbiAgc3RfY3FzX1JlcG9ydGluZyxcbiAgc3RfY3FzX1BlcmlvZCxcbiAgc3RfY3FzX1F1ZXJ5TWV0YWRhdGEsXG4gIHN0X2Nxc19Cb2R5X2Fubm90YXRlX3F1ZXJ5X2Nxc19hbm5vdGF0ZV9xdWVyeV9wb3N0LFxuICB0aW1lc3RhbXBfdXRjLFxuICBzdF9jcXNfUmVzcG9uc2UsXG4gIHN0X2Nxc19SYW5raW5nUmVzcG9uc2UsXG4gIHN0X2Nxc19MYW5ndWFnZVJlc3BvbnNlLFxuICBzdF9jcXNfTGFuZ3VhZ2VzTGlzdFJlc3BvbnNlLFxuICBzdF9jcXNfU3VnZ2VzdGlvblR5cGVzLFxuICBzdF9jcXNfU3VnZ2VzdGlvbkl0ZW0sXG4gIHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW1zQnlJZHNSZXNwb25zZSxcbiAgc3RfY3FzX0lzaW5WYWx1ZXMsXG4gIHN0X2Nxc19DdXNpcFZhbHVlcyxcbiAgc3RfY3FzX1NlZG9sVmFsdWVzLFxuICBzdF9jcXNfTGlzdGluZ1ZhbHVlcyxcbiAgc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWRTb3VyY2UsXG4gIHN0X2RvY3VtZW50c19TaW1wbGlmaWVkVGltZXN0YW1wc1VUQyxcbiAgc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWRNZXRhZGF0YSxcbiAgc3RfZG9jdW1lbnRzX1NpbXBsaWZpZWREb2N1bWVudCxcbiAgc3RfZG9jdW1lbnRzX0NvbnRlbnRTdGF0cyxcbiAgc3RfZG9jdW1lbnRzX1RleHRUeXBlRW51bSxcbiAgc3RfZG9jdW1lbnRzX05vcm1hbGl6ZWRDb29yZGluYXRlcyxcbiAgc3RfZG9jdW1lbnRzX01hcmtlcnNTY3JpcHQsXG4gIHN0X2RvY3VtZW50c19NYXJrZXJzLFxuICBzdF9kb2N1bWVudHNfRmFjdHNldFRyYW5zY3JpcHRUZXh0LFxuICBzdF9kb2N1bWVudHNfU2VjQXR0cmlidXRlc1RleHQsXG4gIHN0X2RvY3VtZW50c19TZWN0aW9uLFxuICBzdF9kb2N1bWVudHNfU2VudGVuY2UsXG4gIHN0X2RvY3VtZW50c19UZXh0RXZlbnQsXG4gIHN0X2RvY3VtZW50c19UZXh0RW50aXR5LFxuICBzdF9kb2N1bWVudHNfVGV4dEJsb2NrLFxuICBzdF9kb2N1bWVudHNfVGFibGVDZWxsVHlwZSxcbiAgc3RfZG9jdW1lbnRzX0xpc3RUeXBlLFxuICBzdF9kb2N1bWVudHNfTGlzdEVudHJ5LFxuICBzdF9kb2N1bWVudHNfTGlzdEJsb2NrLFxuICBzdF9kb2N1bWVudHNfVGFibGVDZWxsLFxuICBzdF9kb2N1bWVudHNfVGFibGVSb3csXG4gIHN0X2RvY3VtZW50c19UYWJsZUJsb2NrLFxuICBzdF9kb2N1bWVudHNfQ29udGVudCxcbiAgc3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSxcbiAgc3RfZG9jdW1lbnRzX0FuYWx5dGljRG9jdW1lbnQsXG4gIHN0X2RvY3VtZW50c19Sb2xlRXZlbnQsXG4gIHN0X2RvY3VtZW50c19BbmFseXRpY0V2ZW50LFxuICBzdF9kb2N1bWVudHNfQW5hbHl0aWNFbnRpdHksXG4gIHN0X2RvY3VtZW50c19BbmFseXRpYyxcbiAgc3RfZG9jdW1lbnRzX1Nka1JwanNvbixcbiAgc3RfZG9jdW1lbnRzX1NvdXJjZSxcbiAgc3RfZG9jdW1lbnRzX1RpbWVzdGFtcHNVVEMsXG4gIHN0X2RvY3VtZW50c19SZXZpc2lvbk1ldGFkYXRhLFxuICBzdF9kb2N1bWVudHNfQ29sbGVjdGlvbk1ldGFkYXRhLFxuICBzdF9kb2N1bWVudHNfTWV0YWRhdGEsXG4gIHN0X2RvY3VtZW50c19Eb2N1bWVudCxcbiAgc3RfZG9jdW1lbnRzX1NvZnR3YXJlVmVyc2lvbnMsXG4gIHN0X2RvY3VtZW50c19FeHRyYWN0aW9uU3RhZ2VQcm9maWxpbmcsXG4gIHN0X2RvY3VtZW50c19Qcm9maWxpbmcsXG4gIHN0X2RvY3VtZW50c19ScGpzb24sXG4gIHN0X2RvY3VtZW50c19QcmVzaWduZWRVcmxScGpzb24sXG4gIHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICBzdF9kb2N1bWVudHNfVmVzcGFDb2xsZWN0aW9uRG9jdW1lbnQsXG4gIHN0X2RvY3VtZW50c19WZXNwYUVudGl0eSxcbiAgc3RfZG9jdW1lbnRzX1Zlc3BhQ29sbGVjdGlvblJlc3BvbnNlLFxuICBzdF9kb2N1bWVudHNfRGF0YVRvb2xzQXBpUmVxdWVzdCxcbiAgc3RfZG9jdW1lbnRzX1F1YXJ0ZXJFbnRpdHlSZWNvcmQsXG4gIHN0X2RvY3VtZW50c19EYXRhVG9vbHNBcGlSZXNwb25zZSxcbiAgc3RfZXZlbnRfdHJhY2tlcl9Vc2VyRXZlbnQsXG4gIHN0X2V2ZW50X3RyYWNrZXJfQmFkUmVxdWVzdEVycm9yLFxuICBzdF9maW5hbmNlc19GaW5hbmNlUmVxdWVzdCxcbiAgc3RfZmluYW5jZXNfRnVsbFF1b3RlLFxuICBzdF9maW5hbmNlc19GdWxsU3RvY2tQcmljZUNoYW5nZSxcbiAgc3RfZmluYW5jZXNfUG9zc2libGVGaW5hbmNpYWxJbmZvLFxuICBzdF9maW5hbmNlc19GaW5hbmNlUmVzcG9uc2UsXG4gIHN0X2ZpbmFuY2VzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICBzdF9maW5hbmNlc19FcnJvclJlc3BvbnNlLFxuICBzdF9maW5hbmNlc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICBzdF9maW5hbmNlc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWx0ZXJTY29wZSxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hFbnRpdHksXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRW50aXR5RmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0Jhc2VGaWx0ZXJJdGVtLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0V2ZW50RmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RhdGVSYW5nZSxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZW50aW1lbnRQb2xhcml0eSxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudElkRmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1RyYW5zY3JpcHRTdWJ0eXBlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdEZpbHRlcixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWxpbmdTdWJ0eXBlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50RmlsaW5nRmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50TmV3c0ZpbHRlcixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRQcmVzZW50YXRpb25GaWx0ZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfUHJvdmlkZXJGaWx0ZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU291cmNlRmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jVHlwZUZpbHRlcixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9QYWNrYWdlSWRGaWx0ZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29udGVudEZpbHRlcixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9LZXl3b3JkRmlsdGVyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1BhY2thZ2VGaWx0ZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfUmVwb3J0aW5nUGVyaW9kLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1F1ZXJ5RmlsdGVycyxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hUeXBlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvcnRCeSxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9SZWxldmFuY2VSYW5raW5nLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlYXJjaFF1ZXJ5LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb2R1Y3RUeXBlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1N3aXRjaEVudGl0bGVtZW50LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0VudGl0bGVtZW50TGltaXRUYXJnZXQsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfTWF4VmFsdWVFbnRpdGxlbWVudCxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Vc2VyUXVvdGFWMixcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Pcmdhbml6YXRpb25RdW90YVYyLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1VzZXIsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUmVxdWVzdCxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9DaHVua1NlbnRlbmNlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0JvdW5kaW5nQm94LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhQ2h1bmssXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFEb2N1bWVudCxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZXJwUmVzdWx0LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhVGltZU1ldHJpY3MsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFDb3ZlcmFnZU1ldHJpY3MsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFSZXNwb25zZSxcbiAgc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hSZXN1bHQsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFkUmVxdWVzdEVycm9yLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1VuYXV0aG9yaXplZFJlc3BvbnNlLFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ludGVybmFsU2VydmVyUmVzcG9uc2UsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc1NlYXJjaFF1ZXJ5LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNTZWFyY2hSZXF1ZXN0LFxuICBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNJdGVtUmVzcG9uc2UsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc0dyb3VwUmVzcG9uc2UsXG4gIHN0X2ludGVybmFsX3NlYXJjaF9hcGlfVm9sdW1lUmVzcG9uc2UsXG4gIHN0X2xsbV9jaGF0X0NoYXRJbnRlcmFjdGlvblNjb3BlLFxuICBzdF9sbG1fY2hhdF9Eb2N1bWVudCxcbiAgc3RfbGxtX2NoYXRfQ2hhdEludGVyYWN0aW9uVHlwZSxcbiAgc3RfbGxtX2NoYXRfUmVxdWVzdEVudGl0eSxcbiAgc3RfbGxtX2NoYXRfUmVxdWVzdFRpbWVSYW5nZSxcbiAgc3RfbGxtX2NoYXRfRmxvd1R5cGUsXG4gIHN0X2xsbV9jaGF0X1JlcXVlc3RGaWxlcyxcbiAgc3RfbGxtX2NoYXRfUmVxdWVzdFdhdGNobGlzdHMsXG4gIHN0X2xsbV9jaGF0X0RldmljZUluZm9UcmFja2luZyxcbiAgc3RfbGxtX2NoYXRfQXBwSW5mb1RyYWNraW5nLFxuICBzdF9sbG1fY2hhdF9EZXZpY2VOZXR3b3JrSW5mb1RyYWNraW5nLFxuICBzdF9sbG1fY2hhdF9EZXZpY2VPU0luZm9UcmFja2luZyxcbiAgc3RfbGxtX2NoYXRfUmVxdWVzdFRyYWNraW5nSW5mbyxcbiAgc3RfbGxtX2NoYXRfQ2hhdFdpdGhNZW1vcnlSZXF1ZXN0LFxuICBzdF9sbG1fY2hhdF9DaGF0V2l0aE1lbW9yeVVwZGF0ZUxhc3RSZXF1ZXN0LFxuICB3ZWJzb2NrZXRfd2Vic29ja2V0X19wb3N0X0JvZHksXG4gIHN0X2xsbV9jaGF0X0VuZ2luZUFpQmxvY2ssXG4gIHN0X2xsbV9jaGF0X1N1bW1hcnlOZXh0QmxvY2tSZXNwb25zZSxcbiAgc3RfbGxtX2NoYXRfUXVvdGFVc2FnZSxcbiAgc3RfbGxtX2NoYXRfU3VtbWFyeUNvbXBsZXRpb25SZXNwb25zZSxcbiAgc3RfbGxtX2NoYXRfRG9jdW1lbnRTb3VyY2VBY3Rpb24sXG4gIHN0X2xsbV9jaGF0X0V4dGVybmFsU291cmNlQWN0aW9uLFxuICBzdF9sbG1fY2hhdF9FbmdpbmVBaVNvdXJjZUFjdGlvbixcbiAgc3RfbGxtX2NoYXRfT3JpZ2luU291cmNlTWV0YWRhdGEsXG4gIHN0X2xsbV9jaGF0X09yaWdpblNvdXJjZXNNZXRhZGF0YSxcbiAgc3RfbGxtX2NoYXRfU3VtbWFyeVNvdXJjZXNSZXNwb25zZSxcbiAgc3RfbGxtX2NoYXRfVHJhY2VRdWVyeSxcbiAgc3RfbGxtX2NoYXRfQ2h1bmtTZW50ZW5jZSxcbiAgc3RfbGxtX2NoYXRfQm91bmRpbmdCb3gsXG4gIHN0X2xsbV9jaGF0X1RyYWNlUmVzdWx0Q2h1bmssXG4gIHN0X2xsbV9jaGF0X1RyYWNlUmVzdWx0Q1FTU3RvcnksXG4gIHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VDUVNSZXN1bHQsXG4gIHN0X2xsbV9jaGF0X0V4dGVybmFsVHJhY2VSZXN1bHQsXG4gIHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCxcbiAgc3RfbGxtX2NoYXRfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0LFxuICBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlLFxuICBzdF9sbG1fY2hhdF9BdWRpdFRyYWNlUmVzcG9uc2UsXG4gIHN0X2xsbV9jaGF0X1Byb2ZpbGluZ1Jlc3BvbnNlLFxuICBzdF9sbG1fY2hhdF9TdGF0dXNJbmZvUmVzcG9uc2UsXG4gIHN0X2xsbV9jaGF0X1F1ZXJ5SWRlbnRpZmllcixcbiAgc3RfbGxtX2NoYXRfU3RhdHVzUXVlcnlSZXNwb25zZSxcbiAgc3RfbGxtX2NoYXRfU3RhdHVzUmVzZXRSZXNwb25zZSxcbiAgc3RfbGxtX2NoYXRfU3RhdHVzU291cmNlc0ZpbmlzaGVkUmVzcG9uc2UsXG4gIHN0X2xsbV9jaGF0X0Vycm9yUmVzcG9uc2UsXG4gIHN0X2xsbV90cmVuZGluZ19nZXRfVHJlbmRpbmdSZXF1ZXN0VHlwZSxcbiAgdHlwZSxcbiAgc3RfbGxtX3RyZW5kaW5nX2dldF9MYW1iZGFDb29raWUsXG4gIHN0X2xsbV90cmVuZGluZ19nZXRfTGFtYmRhUmVzcG9uc2UsXG4gIHN0X2xsbV90cmVuZGluZ19nZXRfTGFtYmRhQmFkUmVxdWVzdEVycm9yLFxuICBzdF9wcml2YXRlX2NvbnRlbnRfU3RhdHVzT3B0aW9ucyxcbiAgc3RhdHVzLFxuICBzdF9wcml2YXRlX2NvbnRlbnRfU29ydEJ5T3B0aW9ucyxcbiAgc29ydF9ieSxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X1NvcnREaXJPcHRpb25zLFxuICBzb3J0X2RpcixcbiAgc3RfcHJpdmF0ZV9jb250ZW50X093bmVyc2hpcE9wdGlvbnMsXG4gIG93bmVyc2hpcCxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X093bmVyRGF0YSxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gIHN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ0ZpbHRlclJlc3BvbnNlLFxuICBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0xpc3RFbWFpbENvbmZpZ3NSZXNwb25zZSxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0VtYWlsQ29uZmlnRmlsdGVyUGF5bG9hZCxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0VtYWlsQ29uZmlnUGF5bG9hZCxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0ZpbGVSZXNwb25zZSxcbiAgc3RfcHJpdmF0ZV9jb250ZW50X0xpc3RGaWxlc1Jlc3BvbnNlLFxuICBzdF9wcml2YXRlX2NvbnRlbnRfUHJpdmF0ZUNvbnRlbnRVcmxSZXNwb25zZSxcbiAgc3RfcHJvZmlsZXNfU3RhdHVzRW51bSxcbiAgc3RfcHJvZmlsZXNfUXVvdGFTdGF0dXMsXG4gIHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gIHN0X3Byb2ZpbGVzX09yZ2FuaXphdGlvblF1b3RhVjIsXG4gIHN0X3Byb2ZpbGVzX09yZ2FuaXphdGlvbkNvbnN1bWVkLFxuICBzdF9wcm9maWxlc19GZWF0dXJlQWNjZXNzUG9saWN5LFxuICBzdF9wcm9maWxlc19Qcm9kdWN0VHlwZSxcbiAgc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnRSZXNwb25zZSxcbiAgc3RfcHJvZmlsZXNfRW50aXRsZW1lbnRMaW1pdFRhcmdldCxcbiAgc3RfcHJvZmlsZXNfTWF4VmFsdWVFbnRpdGxlbWVudFJlc3BvbnNlLFxuICBzdF9wcm9maWxlc19NeUVudGl0bGVtZW50c1Jlc3BvbnNlLFxuICBzdF9wcm9maWxlc19Vc2VyUXVvdGFWMixcbiAgc3RfcHJvZmlsZXNfVXNlckNvbnN1bWVkLFxuICBzdF9wcm9maWxlc19TdWJzY3JpcHRpb25TdGF0dXMsXG4gIHN0X3Byb2ZpbGVzX1N1c2JzY3JpcHRpb25GcmVxdWVuY3ksXG4gIHN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblNvdXJjZSxcbiAgc3RfcHJvZmlsZXNfU3Vic2NyaXB0aW9uTW9kaWZpY2F0aW9uU3RhdHVzLFxuICBzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb24sXG4gIHN0X3Byb2ZpbGVzX015UHJvZmlsZVJlc3BvbnNlLFxuICBzdF9wcm9maWxlc19VcGRhdGVTdWJzY3JpcHRpb25Nb2RpZmljYXRpb25SZXF1ZXN0LFxuICBzdF9wcm9maWxlc19GdWxsVXNlclByb2ZpbGVSZXNwb25zZSxcbiAgc3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQsXG4gIHN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnQsXG4gIHN0X3Byb2ZpbGVzX0Z1bGxPcmdhbml6YXRpb25Qcm9maWxlUmVzcG9uc2UsXG4gIHN0X3Byb2ZpbGVzX1VwZGF0ZVN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbixcbiAgc3RfcHJvZmlsZXNfVXBkYXRlT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgc3RfcHJvZmlsZXNfT3JnYW5pemF0aW9uUHJvZmlsZSxcbiAgc3RfcHJvZmlsZXNfQ29udGVudEFjY2Vzc1BvbGljeSxcbiAgc3RfcHJvZmlsZXNfQ29udGVudEFjY2Vzc1BvbGljaWVzUmVzcG9uc2UsXG4gIHN0X3Byb2ZpbGVzX1VzZXJPbmJvYXJkaW5nRmVlZGJhY2ssXG4gIHN0X3Byb2ZpbGVzX1VzZXJTYWxlc1JlcXVlc3QsXG4gIHN0X3N1YnNjcmlwdGlvbnNfZGlzcGF0Y2hlcl9CYWRSZXF1ZXN0RXJyb3IsXG4gIHN0X3N1YnNjcmlwdGlvbnNfQ2hlY2tvdXRSZXNwb25zZSxcbiAgc3Rfc3Vic2NyaXB0aW9uc19CYWRSZXF1ZXN0RXJyb3IsXG4gIHN0X3N1YnNjcmlwdGlvbnNfUGxhbkZyZXF1ZW5jeSxcbiAgc3Rfc3Vic2NyaXB0aW9uc19QbGFuQ3VycmVuY3ksXG4gIHN0X3N1YnNjcmlwdGlvbnNfR2VuZXJhdGVDaGVja291dFVybFBhcmFtc1JlcXVlc3QsXG4gIHN0X3N1YnNjcmlwdGlvbnNfQ3VzdG9tZXJQb3J0YWwsXG4gIHN0X3N1YnNjcmlwdGlvbnNfTm90Rm91bmRFcnJvcixcbiAgc3RfdXNlcl9jaGF0c19MaXN0VXNlckNoYXRzUmVxdWVzdCxcbiAgc3RfdXNlcl9jaGF0c19MaWdodFVzZXJDaGF0UmVzcG9uc2UsXG4gIHN0X3VzZXJfY2hhdHNfTGlzdFVzZXJDaGF0UmVzcG9uc2UsXG4gIHN0X3VzZXJfY2hhdHNfUGFnaW5hdGVkTGlzdFVzZXJDaGF0UmVzcG9uc2UsXG4gIHN0X3VzZXJfY2hhdHNfQmFkUmVxdWVzdEVycm9yLFxuICBzdF91c2VyX2NoYXRzX1NvdXJjZSxcbiAgc3RfdXNlcl9jaGF0c19GZWVkT3JpZ2luLFxuICBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tRmVlZCxcbiAgc3RfdXNlcl9jaGF0c19UcmVuZGluZ09yaWdpbixcbiAgc3RfdXNlcl9jaGF0c19DcmVhdGVVc2VyQ2hhdEludGVyYWN0aW9uRnJvbVRyZW5kaW5nLFxuICBzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0V2l0aG91dFVzZXJJZCxcbiAgc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25UeXBlLFxuICBzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvbk9yaWdpbixcbiAgc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25TY29wZSxcbiAgc3RfdXNlcl9jaGF0c19Eb2N1bWVudCxcbiAgc3RfdXNlcl9jaGF0c19UZXh0QmxvY2ssXG4gIHN0X3VzZXJfY2hhdHNfRW5naW5lQWlCbG9jayxcbiAgc3RfdXNlcl9jaGF0c19SZXF1ZXN0RW50aXR5LFxuICBzdF91c2VyX2NoYXRzX1RyYWNlUXVlcnksXG4gIHN0X3VzZXJfY2hhdHNfQ2h1bmtTZW50ZW5jZSxcbiAgc3RfdXNlcl9jaGF0c19Cb3VuZGluZ0JveCxcbiAgc3RfdXNlcl9jaGF0c19UcmFjZVJlc3VsdENodW5rLFxuICBzdF91c2VyX2NoYXRzX1RyYWNlUmVzdWx0Q1FTU3RvcnksXG4gIHN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZUNRU1Jlc3VsdCxcbiAgc3RfdXNlcl9jaGF0c19FeHRlcm5hbFNvdXJjZUFjdGlvbixcbiAgc3RfdXNlcl9jaGF0c19FeHRlcm5hbFRyYWNlUmVzdWx0LFxuICBzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCxcbiAgc3RfdXNlcl9jaGF0c19BdWRpdFRyYWNlRW5naW5lQUlSZXN1bHQsXG4gIHN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZSxcbiAgc3RfdXNlcl9jaGF0c19PcmlnaW5Tb3VyY2VNZXRhZGF0YSxcbiAgc3RfdXNlcl9jaGF0c19PcmlnaW5Tb3VyY2VzTWV0YWRhdGEsXG4gIHN0X3VzZXJfY2hhdHNfRG9jdW1lbnRTb3VyY2VBY3Rpb24sXG4gIHN0X3VzZXJfY2hhdHNfRW5naW5lQWlTb3VyY2VBY3Rpb24sXG4gIHN0X3VzZXJfY2hhdHNfQ29sbGFwc2FibGVCbG9jayxcbiAgc3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb24sXG4gIHN0X3VzZXJfY2hhdHNfVXNlckNoYXRSZXNwb25zZSxcbiAgc3RfdXNlcl9jaGF0c19Ob3RGb3VuZEVycm9yLFxuICBzdF91c2VyX2NoYXRzX0RlbGV0ZVVzZXJDaGF0UmVzcG9uc2UsXG4gIHN0X3VzZXJfY2hhdHNfVXBkYXRlVXNlckNoYXQsXG4gIHN0X3VzZXJfY2hhdHNfVXNlckNoYXRVcGRhdGVkUmVzcG9uc2UsXG4gIHN0X3VzZXJfY2hhdHNfVXNlckNoYXRTaGFyZVJlcXVlc3QsXG4gIHN0X3VzZXJfY2hhdHNfVXNlckNoYXRTaGFyZWRSZXNwb25zZSxcbiAgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cyxcbiAgc2F2ZVN0YXR1cyxcbiAgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVNoYXJlUGVybWlzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVNoYXJlQ29tcGFueUNvbnRleHQsXG4gIHN0X3VzZXJfcXVlcmllc19Vc2VyUXVlcnlTaGFyZVVzZXJDb250ZXh0LFxuICBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmUsXG4gIHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZURlc3RpbmF0aW9uVHlwZSxcbiAgc3RfdXNlcl9xdWVyaWVzX1NsYWNrU2NoZWR1bGVEZXN0aW5hdGlvbixcbiAgc3RfdXNlcl9xdWVyaWVzX0VtYWlsRGVzdGluYXRpb25QYXJhbXMsXG4gIHN0X3VzZXJfcXVlcmllc19TY2hlZHVsZSxcbiAgc3RfdXNlcl9xdWVyaWVzX0xpZ2h0VXNlclF1ZXJ5UmVzcG9uc2UsXG4gIHN0X3VzZXJfcXVlcmllc19MaXN0T2JqZWN0c1Jlc3BvbnNlLFxuICBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgc3RfdXNlcl9xdWVyaWVzX1NpbWlsYXJpdHlFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfTGlzdE9wZXJhdGlvbkVudW0sXG4gIHN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX0VudGl0eUV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19MYW5ndWFnZUV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfUlBUb3BpY0V4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19EYXRlT3BlcmF0aW9uRW51bSxcbiAgc3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbCxcbiAgc3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19UYWdzRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19NYWNyb0NvbmNlcHRzRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUGxhY2VzRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX01hY3JvUHJvZHVjdHNFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfRG9jdW1lbnRFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfU2VjdGlvbk1ldGFkYXRhRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdQZXJpb2RFeHByZXNzaW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nRW50aXR5RXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VmVyc2lvbkV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24sXG4gIHN0X3VzZXJfcXVlcmllc19SUFByb3ZpZGVyRXhwcmVzc2lvbixcbiAgc3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9JbnB1dCxcbiAgc3RfdXNlcl9xdWVyaWVzX0FuZEV4cHJlc3Npb25fSW5wdXQsXG4gIHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX0lucHV0LFxuICBzdF91c2VyX3F1ZXJpZXNfU2VudGVuY2VMYWJlbCxcbiAgc3RfdXNlcl9xdWVyaWVzX0lucHV0U2VudGVuY2UsXG4gIHN0X3VzZXJfcXVlcmllc19TY29wZSxcbiAgc3RfdXNlcl9xdWVyaWVzX1NvcnRFbnVtLFxuICBzdF91c2VyX3F1ZXJpZXNfUmFua2luZyxcbiAgc3RfdXNlcl9xdWVyaWVzX0NRU1NlYXJjaEN1cnNvclBhZ2luYXRpb24sXG4gIHN0X3VzZXJfcXVlcmllc19DUVNTZWFyY2hPZmZzZXRQYWdpbmF0aW9uLFxuICBzdF91c2VyX3F1ZXJpZXNfQ1FTQ2x1c3RlcmluZ1BhcmFtcyxcbiAgc3RfdXNlcl9xdWVyaWVzX1NlYXJjaENoYWluLFxuICBzdF91c2VyX3F1ZXJpZXNfUlBYUXVlcnlfSW5wdXQsXG4gIHN0X3VzZXJfcXVlcmllc19Qcm9tcHQsXG4gIHN0X3VzZXJfcXVlcmllc19DcmVhdGVVc2VyUXVlcnksXG4gIHN0X3VzZXJfcXVlcmllc19PckV4cHJlc3Npb25fT3V0cHV0LFxuICBzdF91c2VyX3F1ZXJpZXNfQW5kRXhwcmVzc2lvbl9PdXRwdXQsXG4gIHN0X3VzZXJfcXVlcmllc19Ob3RFeHByZXNzaW9uX091dHB1dCxcbiAgc3RfdXNlcl9xdWVyaWVzX1JQWFF1ZXJ5X091dHB1dCxcbiAgc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlLFxuICBzdF91c2VyX3F1ZXJpZXNfRGVsZXRlT2JqZWN0UmVzcG9uc2UsXG4gIHN0X3VzZXJfcXVlcmllc19VcGRhdGVVc2VyUXVlcnksXG4gIHN0X3VzZXJfcXVlcmllc19CdWxrRGVsZXRlT2JqZWN0c1BhcmFtcyxcbiAgc3RfdXNlcl9xdWVyaWVzX1NldFBpbm5lZEl0ZW1zUGFyYW1zLFxuICBzdF91c2VyX3F1ZXJpZXNfVXNlclBpbm5lZFF1ZXJpZXNSZXNwb25zZSxcbiAgc2hhcmVkLFxuICBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0RmlsdGVyLFxuICBnbG9iYWxUeXBlLFxuICBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0U3RhdHVzLFxuICBnbG9iYWxTdGF0dXMsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZVBlcm1pc3Npb24sXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZUNvbXBhbnlDb250ZXh0UmVzcG9uc2UsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZVVzZXJDb250ZXh0LFxuICBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVSZXNwb25zZV9JbnB1dCxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdEF1dGhvckRhdGEsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RUeXBlLFxuICBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0RGF0YSxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0xpZ2h0V2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19MaXN0T2JqZWN0c1Jlc3BvbnNlX0lucHV0LFxuICBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFVwZGF0ZUF1dGhvckRhdGEsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RDcmVhdGVEYXRhLFxuICBzdF91c2VyX3dhdGNobGlzdHNfQ3JlYXRlV2F0Y2hsaXN0UGFyYW1zLFxuICBzdF91c2VyX3dhdGNobGlzdHNfT2JqUGVybWlzc2lvbnMsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RSZXNwb25zZV9JbnB1dCxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0RlbGV0ZVdhdGNobGlzdFJlc3BvbnNlLFxuICBzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VXBkYXRlRGF0YSxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1B1dFdhdGNobGlzdFBhcmFtcyxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1BhdGNoV2F0Y2hsaXN0UGFyYW1zLFxuICBzdF91c2VyX3dhdGNobGlzdHNfQnVsa0RlbGV0ZVdhdGNobGlzdFBhcmFtcyxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0J1bGtEZWxldGVXYXRjaGxpc3RSZXNwb25zZSxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RzUGFyZW50c1BhcmFtcyxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFBhcmVudCxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RQYXJlbnRzUmVzcG9uc2UsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RJdGVtc1VwZGF0ZVJlcXVlc3QsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZUNvbXBhbnlDb250ZXh0UmVxdWVzdCxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUmVxdWVzdCxcbiAgc3RfdXNlcl93YXRjaGxpc3RzX0dlbmVyYXRlUHJlc2lnbmVkVXJsUmVzcG9uc2UsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19VbkF1dGhvcmlzZWRXYXRjaGxpc3RBY2Nlc3NFcnJvcixcbiAgc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdE5vdEZvdW5kRXJyb3IsXG4gIHN0X3VzZXJfd2F0Y2hsaXN0c19EZWxldGVBc3NldFJlc3BvbnNlLFxuICBzdF91c2VyX3dhdGNobGlzdHNfUmVzb3VyY2VOb3RGb3VuZEVycm9yLFxuICBzdF91c2VyX3dvcmtmbG93c19Xb3JrZmxvd1Jlc3BvbnNlLFxuICBzdF91c2VyX3dvcmtmbG93c19Xb3JrZmxvd0xpc3RSZXNwb25zZSxcbn1cblxuY29uc3QgZW5kcG9pbnRzID0gbWFrZUFwaShbXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2FnZW50LXdlYnNvY2tldC9cIixcbiAgICBhbGlhczogXCJ3ZWJzb2NrZXRfYWdlbnRfd2Vic29ja2V0X19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBUaGlzIHJlcHJlc2VudHMgdGhlIHdlYnNvY2tldCBlbmRwb2ludCBmb3IgdGhlIGNoYXQgc2VydmljZWAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYWdlbnRzX0FnZW50RXhlY3V0ZVJlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoudW5pb24oW1xuICAgICAgc3RfYWdlbnRzX0FjdGlvbldTUmVzcG9uc2UsXG4gICAgICBzdF9hZ2VudHNfVGhpbmtpbmdXU1Jlc3BvbnNlLFxuICAgICAgc3RfYWdlbnRzX0Fuc3dlcldTUmVzcG9uc2UsXG4gICAgICBzdF9hZ2VudHNfRXJyb3JXU1Jlc3BvbnNlLFxuICAgICAgc3RfYWdlbnRzX1Rvb2xBdWRpdFdTUmVzcG9uc2UsXG4gICAgICBzdF9hZ2VudHNfQ29tcGxldGVXU1Jlc3BvbnNlLFxuICAgIF0pLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2F1dG9zdWdnZXN0XCIsXG4gICAgYWxpYXM6IFwiYXV0b3N1Z2dlc3RfYXV0b3N1Z2dlc3RfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBBdXRvc3VnZ2VzdCBlbmRwb2ludCB0byByZXRyaWV2ZSBzdWdnZXN0aW9ucyBmcm9tIFZlc3BhIHdpdGggYSBiYXNpYyByZXF1ZXN0IGZyb20gVUkuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicXVlcnlcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJsaW1pdFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogbGltaXQsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBVbmF1dGhvcml6ZWRgLFxuICAgICAgICBzY2hlbWE6IHpcbiAgICAgICAgICAub2JqZWN0KHsgbWVzc2FnZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiVXNlciBhdXRoZW50aWNhdGlvbiBmYWlsZWRcIikgfSlcbiAgICAgICAgICAucGFydGlhbCgpXG4gICAgICAgICAgLnBhc3N0aHJvdWdoKCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0ludGVybmFsU2VydmVyUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2F1dG9zdWdnZXN0L3NlYXJjaFwiLFxuICAgIGFsaWFzOiBcImF1dG9zdWdnZXN0X3NlYXJjaF9hdXRvc3VnZ2VzdF9zZWFyY2hfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQXV0b3N1Z2dlc3QgZW5kcG9pbnQgdG8gcmV0cmlldmUgc3VnZ2VzdGlvbnMgZnJvbSBWZXNwYSB3aXRoIGEgc3RhbmRhcmQgcmVxdWVzdCBmcm9tIFNESy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfSW50ZXJuYWxTZXJ2ZXJSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvYXV0b3N1Z2dlc3Qvc2VhcmNoX2FkdmFuY2VkXCIsXG4gICAgYWxpYXM6IFwiYXV0b3N1Z2dlc3Rfc2VhcmNoX2FkdmFuY2VkX2F1dG9zdWdnZXN0X3NlYXJjaF9hZHZhbmNlZF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBBdXRvc3VnZ2VzdCBlbmRwb2ludCB0byByZXRyaWV2ZSBzdWdnZXN0aW9ucyBmcm9tIFZlc3BhIHdpdGggYW4gYWR2YW5jZWQgcmVxdWVzdCBmb3IgdGVzdGluZy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1Zlc3BhUmVxdWVzdERldGFpbHMsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBVbmF1dGhvcml6ZWRgLFxuICAgICAgICBzY2hlbWE6IHpcbiAgICAgICAgICAub2JqZWN0KHsgbWVzc2FnZTogei5zdHJpbmcoKS5kZWZhdWx0KFwiVXNlciBhdXRoZW50aWNhdGlvbiBmYWlsZWRcIikgfSlcbiAgICAgICAgICAucGFydGlhbCgpXG4gICAgICAgICAgLnBhc3N0aHJvdWdoKCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0ludGVybmFsU2VydmVyUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvYXV0b3N1Z2dlc3Qvc2VhcmNoX2Jhc2ljXCIsXG4gICAgYWxpYXM6IFwiYXV0b3N1Z2dlc3Rfc2VhcmNoX2Jhc2ljX2F1dG9zdWdnZXN0X3NlYXJjaF9iYXNpY19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEF1dG9zdWdnZXN0IGVuZHBvaW50IHRvIHJldHJpZXZlIHN1Z2dlc3Rpb25zIGZyb20gVmVzcGEgd2l0aCBhIGJhc2ljIHJlcXVlc3QgZnJvbSBVSS5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJxdWVyeVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBsaW1pdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfSW50ZXJuYWxTZXJ2ZXJSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9icmllZnNcIixcbiAgICBhbGlhczogXCJsaXN0X2JyaWVmY29uZmlnc19icmllZnNfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBMaXN0IGFsbCBicmllZiBjb25maWd1cmF0aW9ucyBmb3IgYSB1c2VyLlxuXG5UaGlzIGVuZHBvaW50IHJldHJpZXZlcyBhbGwgYnJpZWYgY29uZmlndXJhdGlvbnMgYXNzb2NpYXRlZCB3aXRoIGEgdXNlcixcbmZpbHRlcmluZyBieSB0aGUgJiN4Mjc7QlJJRUYjJiN4Mjc7IHByZWZpeC5cblxuUmV0dXJuczpcbiAgICBMaXN0QnJpZWZDb25maWdzUmVzcG9uc2U6IEEgbGlzdCBvZiBicmllZiBjb25maWd1cmF0aW9ucy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHJlc3BvbnNlOiBzdF9icmllZnNfTGlzdEJyaWVmQ29uZmlnc1Jlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9icmllZnNcIixcbiAgICBhbGlhczogXCJjcmVhdGVfYnJpZWZjb25maWdfYnJpZWZzX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYENyZWF0ZSBhIGJyaWVmIGNvbmZpZ3VyYXRpb24gZm9yIGEgdXNlci5cblxuVGhpcyBlbmRwb2ludCBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGEgbmV3IGJyaWVmIGNvbmZpZ3VyYXRpb24gZm9yIGEgdXNlci5cblxuQXJnczpcbiAgICBicmllZmNvbmZpZ19wYXlsb2FkIChCcmllZkNvbmZpZ1BheWxvYWQpOiBUaGUgcGF5bG9hZCBjb250YWluaW5nIHRoZSBicmllZiBjb25maWd1cmF0aW9uIGRldGFpbHMuXG5cblJldHVybnM6XG4gICAgQnJpZWZDb25maWdSZXNwb25zZTogVGhlIGNyZWF0ZWQgYnJpZWYgY29uZmlndXJhdGlvbi5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19CcmllZkNvbmZpZ1BheWxvYWQsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JyaWVmc19CcmllZkNvbmZpZ1Jlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInB1dFwiLFxuICAgIHBhdGg6IFwiL2JyaWVmcy86YnJpZWZfaWRcIixcbiAgICBhbGlhczogXCJ1cGRhdGVfYnJpZWZjb25maWdfYnJpZWZzX19icmllZl9pZF9fcHV0XCIsXG4gICAgZGVzY3JpcHRpb246IGBVcGRhdGUgYSBicmllZiBjb25maWd1cmF0aW9uIGZvciBhIHVzZXIuXG5cblRoaXMgZW5kcG9pbnQgYWxsb3dzIHRoZSB1cGRhdGUgb2YgYSBicmllZiBjb25maWd1cmF0aW9uIGZvciBhIHVzZXIuXG5cbkFyZ3M6XG4gICAgYnJpZWZfaWQgKHN0cik6IFRoZSBJRCBvZiB0aGUgYnJpZWYgY29uZmlndXJhdGlvbi5cbiAgICBicmllZmNvbmZpZ19wYXlsb2FkIChCcmllZkNvbmZpZ1BheWxvYWQpOiBUaGUgcGF5bG9hZCBjb250YWluaW5nIHRoZSBicmllZiBjb25maWd1cmF0aW9uIGRldGFpbHMuXG5cblJldHVybnM6XG4gICAgQnJpZWZDb25maWdSZXNwb25zZTogVGhlIGNyZWF0ZWQgYnJpZWYgY29uZmlndXJhdGlvbi5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19CcmllZkNvbmZpZ1BheWxvYWQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImJyaWVmX2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JyaWVmc19CcmllZkNvbmZpZ1Jlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImRlbGV0ZVwiLFxuICAgIHBhdGg6IFwiL2JyaWVmcy86YnJpZWZfaWRcIixcbiAgICBhbGlhczogXCJkZWxldGVfYnJpZWZjb25maWdfYnJpZWZzX19icmllZl9pZF9fZGVsZXRlXCIsXG4gICAgZGVzY3JpcHRpb246IGBEZWxldGUgYSBicmllZiBjb25maWd1cmF0aW9uIGZvciBhIHVzZXIuXG5cblRoaXMgZW5kcG9pbnQgYWxsb3dzIHRoZSBkZWxldGlvbiBvZiBhIGJyaWVmIGNvbmZpZ3VyYXRpb24gZm9yIGEgdXNlci5cblxuQXJnczpcbiAgICBicmllZl9pZCAoc3RyKTogVGhlIElEIG9mIHRoZSBicmllZiBjb25maWd1cmF0aW9uLlxuXG5SZXR1cm5zOlxuICAgIFN0YXR1cyAyMDAgaWYgdGhlIGJyaWVmIGNvbmZpZ3VyYXRpb24gaXMgZGVsZXRlZCBzdWNjZXNzZnVsbHkuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYnJpZWZfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei51bmtub3duKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvYnJpZWZzLzpicmllZl9pZFwiLFxuICAgIGFsaWFzOiBcImdldF9icmllZmNvbmZpZ19icmllZnNfX2JyaWVmX2lkX19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEdldCBhIGJyaWVmIGNvbmZpZ3VyYXRpb24gYnkgSUQuXG5cblRoaXMgZW5kcG9pbnQgcmV0cmlldmVzIGEgc3BlY2lmaWMgYnJpZWYgY29uZmlndXJhdGlvbiBieSBpdHMgSUQuXG5cbkFyZ3M6XG4gICAgYnJpZWZfaWQgKHN0cik6IFRoZSBJRCBvZiB0aGUgYnJpZWYgY29uZmlndXJhdGlvbi5cblxuUmV0dXJuczpcbiAgICBCcmllZkNvbmZpZ1Jlc3BvbnNlOiBUaGUgYnJpZWYgY29uZmlndXJhdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIElELmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJyaWVmX2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JyaWVmc19CcmllZkNvbmZpZ1Jlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2JyaWVmcy86YnJpZWZfaWQvcmVwb3J0c1wiLFxuICAgIGFsaWFzOiBcImxpc3RfcmVwb3J0c19icmllZnNfX2JyaWVmX2lkX19yZXBvcnRzX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgR2V0IGFsbCByZXBvcnRzIGZvciBhIGJyaWVmLlxuXG5UaGlzIGVuZHBvaW50IHJldHJpZXZlcyBhbGwgcmVwb3J0cyBmb3IgYSBzcGVjaWZpYyBicmllZi4gVGhlIHJlcG9ydHMgYXJlIHNvcnRlZCBieSBkYXRlIGluIGRlc2NlbmRpbmcgb3JkZXIuXG5cbkFyZ3M6XG4gICAgYnJpZWZfaWQgKHN0cik6IFRoZSBJRCBvZiB0aGUgYnJpZWYgY29uZmlndXJhdGlvbi5cblxuUmV0dXJuczpcbiAgICBMaXN0QnJpZWZSZXBvcnRzUmVzcG9uc2U6IEEgbGlzdCBvZiByZXBvcnRzIGZvciB0aGUgZ2l2ZW4gYnJpZWYuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYnJpZWZfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYnJpZWZzX0xpc3RCcmllZlJlcG9ydHNSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9icmllZnMvOmJyaWVmX2lkL3JlcG9ydHMvOnJlcG9ydF9pZFwiLFxuICAgIGFsaWFzOiBcImdldF9yZXBvcnRfYnJpZWZzX19icmllZl9pZF9fcmVwb3J0c19fcmVwb3J0X2lkX19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEdldCBhIHJlcG9ydCBmb3IgYSBicmllZi5cblxuVGhpcyBlbmRwb2ludCByZXRyaWV2ZXMgYSBzcGVjaWZpYyByZXBvcnQgZm9yIGEgc3BlY2lmaWMgYnJpZWYuXG5cbkFyZ3M6XG4gICAgYnJpZWZfaWQgKHN0cik6IFRoZSBJRCBvZiB0aGUgYnJpZWYgY29uZmlndXJhdGlvbi5cbiAgICByZXBvcnRfaWQgKHN0cik6IFRoZSBJRCBvZiB0aGUgcmVwb3J0LlxuXG5SZXR1cm5zOlxuICAgIEJyaWVmUmVwb3J0UmVzcG9uc2U6IFRoZSByZXBvcnQgZm9yIHRoZSBnaXZlbiBicmllZiBhbmQgcmVwb3J0IElELmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJyaWVmX2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInJlcG9ydF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9icmllZnNfQnJpZWZSZXBvcnRSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9icmllZnMvOmJyaWVmX2lkL3JlcG9ydHMvbGF0ZXN0XCIsXG4gICAgYWxpYXM6IFwiZ2V0X2xhdGVzdF9yZXBvcnRfYnJpZWZzX19icmllZl9pZF9fcmVwb3J0c19sYXRlc3RfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBHZXQgdGhlIGxhdGVzdCByZXBvcnQgZm9yIGEgYnJpZWYuXG5cblRoaXMgZW5kcG9pbnQgcmV0cmlldmVzIHRoZSBsYXRlc3QgcmVwb3J0IGZvciBhIHNwZWNpZmljIGJyaWVmLiBUaGUgcmVzcG9uc2UgY29udGFpbnMgdGhlIHJlcG9ydCBhbmQgdGhlIGRhdGUgaW4gd2hpY2ggdGhlIG5leHQgcmVwb3J0IHdpbGwgYmUgZ2VuZXJhdGVkLlxuSWYgdGhlcmUgaXMgbm8gcmVwb3J0IGZvciB0aGlzIGJyaWVmLCB0aGUgcmVzcG9uc2Ugd2lsbCByZXR1cm4gcmVwb3J0IGFzIG51bGwgYW5kIHRoZSBuZXh0IHJlcG9ydCBkYXRlLlxuQXJnczpcbiAgICBicmllZl9pZCAoc3RyKTogVGhlIElEIG9mIHRoZSBicmllZiBjb25maWd1cmF0aW9uLlxuUmV0dXJuczpcbiAgICBMYXRlc3RCcmllZlJlcG9ydFJlc3BvbnNlOiBUaGUgbGF0ZXN0IHJlcG9ydCBmb3IgdGhlIGdpdmVuIGJyaWVmIGFuZCB0aGUgbmV4dCByZXBvcnQgZGF0ZS5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJicmllZl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9icmllZnNfTGF0ZXN0QnJpZWZSZXBvcnRSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JyaWVmc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYnJpZWZzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9icmllZnNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9jb250ZW50L3BhY2thZ2VzL1wiLFxuICAgIGFsaWFzOiBcImdldF9wYWNrYWdlc19jb250ZW50X3BhY2thZ2VzX19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGNvbnRlbnQgcGFja2FnZXM6XG5cbiogQWxsIG9mIHRoZW0uXG4qIEZpbHRlcmVkIGJ5IGVudGl0bGVtZW50IHN0YXR1cy4gZW50aXRsZWQmI3gzRDt0cnVlIHdpbGwgcmV0dXJuIG9ubHkgcGFja2FnZXMgdGhhdCB0aGUgY3VycmVudCB1c2VkIGlzIGVudGl0bGVkIHRvLlxuXG5UaGUgcmVzdWx0cyB3aWxsIGJlIHBhZ2luYXRlZCAocGFnZSwgbGltaXQpLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImVudGl0bGVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBlbnRpdGxlZCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicGFnZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoMSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgxMCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfR2VuZXJpY1BhZ2luYXRlZFJlc3BvbnNlX0NvbnRlbnRQYWNrYWdlTW9kZWxfLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9jb250ZW50L3BhY2thZ2VzLzppZFwiLFxuICAgIGFsaWFzOiBcImdldF9wYWNrYWdlX2NvbnRlbnRfcGFja2FnZXNfX2lkX19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGEgc3BlY2lmaWMgY29udGVudCBwYWNrYWdlIGJ5IGl0cyBJRC4gVGhlIGluZm9ybWF0aW9uIHJldHVybmVkIGluY2x1ZGVzOlxuLSBUaGUgcGFja2FnZSBJRFxuLSBUaGUgcGFja2FnZSBuYW1lXG4tIERlc2NyaXB0aW9ucyAoc2hvcnQgYW5kIGRldGFpbGVkKVxuLSBXaGV0aGVyIHRoZSBwYWNrYWdlIGlzIGVuYWJsZWQgZm9yIGFwcCwgQVBJLCBvciBjYXRhbG9nXG4tIFdoZXRoZXIgdGhlIHVzZXIgaXMgZW50aXRsZWQgdG8gdGhlIHBhY2thZ2VgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJpZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX0NvbnRlbnRQYWNrYWdlTW9kZWwsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2NvbnRlbnQvc291cmNlcy9cIixcbiAgICBhbGlhczogXCJnZXRfc291cmNlc19jb250ZW50X3NvdXJjZXNfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggc291cmNlczpcblxuKiBCeSBhIGxpc3Qgb2Ygc291cmNlIElEc1xuKiBJbmNsdWRlZCBpbiBhIGxpc3Qgb2YgcGFja2FnZSBJRHNcbiogRmlsdGVyZWQgYnkgZW50aXRsZW1lbnQgc3RhdHVzLiBlbnRpdGxlZCYjeDNEO3RydWUgd2lsbCByZXR1cm4gb25seSBzb3VyY2VzIHRoYXQgYXJlIGVudGl0bGVkIHRvIHRoZSBjdXJyZW50IHVzZXIuXG5cblRoZSByZXN1bHRzIHdpbGwgYmUgcGFnaW5hdGVkIChwYWdlLCBsaW1pdCkuXG5cblRoZSBpbmZvcm1hdGlvbiByZXR1cm5lZCBmb3IgZXZlcnkgc291cmNlIGluY2x1ZGVzOlxuLSBUaGUgc291cmNlIElEXG4tIFRoZSBzb3VyY2UgbmFtZVxuLSBUaGUgbGlzdCBvZiBwYWNrYWdlIElEcyB0aGF0IHRoZSBzb3VyY2UgaXMgaW5jbHVkZWQgaW5cbi0gQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgdXNlciBpcyBlbnRpdGxlZCB0byB0aGUgc291cmNlYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicGFja2FnZUlkc1wiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcGFja2FnZUlkcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic291cmNlSWRzXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBzb3VyY2VJZHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImVudGl0bGVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBlbnRpdGxlZCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicGFnZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5udW1iZXIoKS5pbnQoKS5vcHRpb25hbCgpLmRlZmF1bHQoMSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImxpbWl0XCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgxMCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfR2VuZXJpY1BhZ2luYXRlZFJlc3BvbnNlX1NvdXJjZU1vZGVsXyxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvY29udGVudC9zb3VyY2VzLzpzb3VyY2VJZFwiLFxuICAgIGFsaWFzOiBcImdldF9zb3VyY2VfY29udGVudF9zb3VyY2VzX19zb3VyY2VJZF9fZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBGZXRjaCBhIHNwZWNpZmljIHNvdXJjZSBieSBpdHMgSUQuIFRoZSBpbmZvcm1hdGlvbiByZXR1cm5lZCBmb3IgZXZlcnkgc291cmNlIGluY2x1ZGVzOlxuLSBUaGUgc291cmNlIElEXG4tIFRoZSBzb3VyY2UgbmFtZVxuLSBUaGUgbGlzdCBvZiBwYWNrYWdlIElEcyB0aGF0IHRoZSBzb3VyY2UgaXMgaW5jbHVkZWQgaW5cbi0gQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgdXNlciBpcyBlbnRpdGxlZCB0byB0aGUgc291cmNlYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic291cmNlSWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKS5yZWdleCgvXltBLVowLTldezZ9JC8pLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfY29udGVudF9jYXRhbG9nX1NvdXJjZU1vZGVsLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9jb250ZW50X2NhdGFsb2dfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9jb250ZW50c1wiLFxuICAgIGFsaWFzOiBcImxpc3RfZmlsZXNfY29udGVudHNfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBMaXN0IGluZ2VzdGVkIHByaXZhdGUgY29udGVudCBmb3IgdGhlIHVzZXIuXG5BbGxvd3MgdXNlcnMgdG8gcXVlcnkgZm9yIGluZ2VzdGVkIHByaXZhdGUgY29udGVudCAob25seSBlbWFpbHMgYXQgdGhlIG1vbWVudCkgYW5kIGZpbHRlciB0aGUgcmVzdWx0cyB3aXRoIGRpZmZlcmVudCBxdWVyeSBwYXJhbWV0ZXJzLlxuXG5RdWVyeSBwYXJhbWV0ZXJzOlxuJiN4NjA7JiN4NjA7JiN4NjA7bWRcbiAgICAtIG9yaWdpbjogJnF1b3Q7ZW1haWwmcXVvdDsgLSBvbmx5IGVtYWlscyBhcmUgc3VwcG9ydGVkIGF0IHRoZSBtb21lbnRcbiAgICAtIG93bmVyc2hpcDogJnF1b3Q7b3duZWQmcXVvdDsgLSBvbmx5IGNvbnRlbnQgb3duZWQgYnkgdGhlIHVzZXJcbiAgICAtIG93bmVyc2hpcDogJnF1b3Q7c2hhcmVkJnF1b3Q7IC0gb25seSBjb250ZW50IHNoYXJlZCB3aXRoIHRoZSB1c2VyXG4gICAgLSBvd25lcnNoaXA6ICZxdW90O2FsbCZxdW90OyAtIGFsbCBjb250ZW50IG93bmVkIG9yIHNoYXJlZCB3aXRoIHRoZSB1c2VyXG4gICAgLSBmaWxlX25hbWU6ICZxdW90O215X2ZpbGUmcXVvdDsgLSBxdWVyeSBmb3IgZmlsZXMgd2l0aCB0aGlzIG5hbWVcbiAgICAtIGZyb21fZGF0ZTogJnF1b3Q7MjAyNC0wMS0wMSZxdW90OyAtIHF1ZXJ5IGZvciBmaWxlcyBjcmVhdGVkIGFmdGVyIHRoaXMgZGF0ZVxuICAgIC0gaW5ib3g6ICZxdW90O2VtYWlsX2NvbmZpZ19pZCAoVVVJRCkmcXVvdDsgLSBxdWVyeSBmb3IgZW1haWxzIGluZ2VzdGVkIGZyb20gdGhpcyBpbmJveFxuICAgIC0gaGFzX2F0dGFjaG1lbnRzOiBUcnVlIC0gcXVlcnkgZm9yIGZpbGVzIHdpdGggYXR0YWNobWVudHNcbiAgICAtIHBhZ2U6IDEgLSBwYWdlIG51bWJlclxuICAgIC0gcGFnZV9zaXplOiA1MCAtIG51bWJlciBvZiBmaWxlcyBwZXIgcGFnZVxuICAgIC0gc29ydF9ieTogJnF1b3Q7Y3JlYXRlZF9hdCZxdW90OyAtIGZpZWxkIHRvIHNvcnQgYnlcbiAgICAtIHNvcnRfb3JkZXI6ICZxdW90O2Rlc2MmcXVvdDsgLSBzb3J0IG9yZGVyXG4mI3g2MDsmI3g2MDsmI3g2MDtcblJldHVybnM6XG4gICAgTGlzdCBvZiBtYXRjaGluZyBwcml2YXRlIGNvbnRlbnQgZmlsZXMgLyBlbWFpbHMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib3JpZ2luXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6LmVudW0oW1wiZW1haWxcIiwgXCJmaWxlX3VwbG9hZFwiXSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImZyb21EYXRlXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBxdWVyeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib3duZXJzaGlwXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6LmVudW0oW1wiYWxsXCIsIFwic2hhcmVkXCIsIFwib3duZWRcIl0pLm9wdGlvbmFsKCkuZGVmYXVsdChcImFsbFwiKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib3duZXJcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJwYWdlXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCkuZGVmYXVsdCgxKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicGFnZVNpemVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHoubnVtYmVyKCkuaW50KCkub3B0aW9uYWwoKS5kZWZhdWx0KDUwKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic29ydEJ5XCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLmVudW0oW1wiY3JlYXRlZF9hdFwiLCBcInVwZGF0ZWRfYXRcIiwgXCJmaWxlX25hbWVcIiwgXCJyYXdfc2l6ZVwiLCBcImNvbnRlbnRfdHlwZVwiLCBcInN0YXR1c1wiXSlcbiAgICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAgIC5kZWZhdWx0KFwiY3JlYXRlZF9hdFwiKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic29ydE9yZGVyXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6LmVudW0oW1wiYXNjXCIsIFwiZGVzY1wiXSkub3B0aW9uYWwoKS5kZWZhdWx0KFwiZGVzY1wiKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZmlsZU5hbWVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJycENvbGxlY3Rpb25JZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImluYm94XCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBxdWVyeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiaGFzQXR0YWNobWVudHNcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcml2YXRlX2NvbnRlbnRfTGlzdEZpbGVzUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9jb250ZW50cy86Y29udGVudF9pZFwiLFxuICAgIGFsaWFzOiBcImdldF9wcml2YXRlX2NvbnRlbnRfYnlfaWRfY29udGVudHNfX2NvbnRlbnRfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgR2V0IHRoZSBwcml2YXRlIGNvbnRlbnQgYnkgaWQuXG5SZXR1cm5zIHRoZSBzaWduZWQgVVJMIGZvciB0aGUgY29udGVudC5cblxuUmV0dXJuczpcbiAgICBTaWduZWQgVVJMIGZvciB0aGUgY29udGVudC5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJjb250ZW50X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoub2JqZWN0KHsgY29udGVudFVybDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3ByaXZhdGVfY29udGVudF9FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvY29udGVudHMvb3duZXJzXCIsXG4gICAgYWxpYXM6IFwibGlzdF9vd25lcnNfY29udGVudHNfb3duZXJzX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgTGlzdCBhbGwgb3duZXJzIG9mIHRoZSBwcml2YXRlIGNvbnRlbnQgc2hhcmVkIHdpdGggdGhlIHVzZXIuXG5cblJldHVybnM6XG4gICAgTGlzdCBvZiBvd25lcnMgb2YgdGhlIHByaXZhdGUgY29udGVudCBzaGFyZWQgd2l0aCB0aGUgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJmaWxlbmFtZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInRhZ3NcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHBhY2thZ2VJZHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInN0YXJ0X2RhdGVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJlbmRfZGF0ZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInN0YXR1c1wiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogc3RhdHVzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJzdGFycmVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBlbnRpdGxlZCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwidHJhc2hlZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogZW50aXRsZWQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInNoYXJlZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogZW50aXRsZWQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImZvbGRlcl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5udW1iZXIoKS5pbnQoKS5ndGUoMCkub3B0aW9uYWwoKS5kZWZhdWx0KDApLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJwYWdlX3NpemVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHoubnVtYmVyKCkuaW50KCkuZ3QoMCkubHRlKDEwMDApLm9wdGlvbmFsKCkuZGVmYXVsdCgxMDApLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJzaGFyZWRfd2l0aFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcGFja2FnZUlkcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic29ydF9ieVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogc29ydF9ieSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic29ydF9kaXJcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHNvcnRfZGlyLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvd25lcnNoaXBcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IG93bmVyc2hpcCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei5hcnJheShzdF9wcml2YXRlX2NvbnRlbnRfT3duZXJEYXRhKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3ByaXZhdGVfY29udGVudF9FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9jcXMvYW5ub3RhdGUtcXVlcnlcIixcbiAgICBhbGlhczogXCJhbm5vdGF0ZV9xdWVyeV9jcXNfYW5ub3RhdGVfcXVlcnlfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2YgbWF0Y2hlcyBiYXNlZCBvbiB0aGUgcXVlcnlgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19Cb2R5X2Fubm90YXRlX3F1ZXJ5X2Nxc19hbm5vdGF0ZV9xdWVyeV9wb3N0LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJxdWVyeV9pZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicXVlcnlfbmFtZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwidGltZXN0YW1wX3V0Y1wiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogdGltZXN0YW1wX3V0YyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYW5ub3RhdGlvbl90eXBlXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLmVudW0oW1xuICAgICAgICAgICAgXCJ1c2VyLXF1ZXJpZXNcIixcbiAgICAgICAgICAgIFwidHJlbmRpbmctcXVlcmllc1wiLFxuICAgICAgICAgICAgXCJ0aW1lLWV4cGxpY2l0LXF1ZXJpZXNcIixcbiAgICAgICAgICAgIFwiZWFybmluZ3MtY2FsbHMtcXVlcmllc1wiLFxuICAgICAgICAgICAgXCJiZW5jaG1hcmstcXVlcmllc1wiLFxuICAgICAgICAgICAgXCJzb3VyY2UtcXVlcmllc1wiLFxuICAgICAgICAgICAgXCJxYS1xdWVyaWVzXCIsXG4gICAgICAgICAgICBcInRvcGljLXF1ZXJpZXNcIixcbiAgICAgICAgICAgIFwib3RoZXItcXVlcmllc1wiLFxuICAgICAgICAgIF0pXG4gICAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoub2JqZWN0KHsgbWVzc2FnZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfY3FzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvY3FzL2J5LWlkc1wiLFxuICAgIGFsaWFzOiBcImJ5X2lkc19jcXNfYnlfaWRzX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBsaXN0IG9mIG1hdGNoZXMgYmFzZWQgb24gdGhlIHF1ZXJ5YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiB6LmFycmF5KHN0X2Nxc19TdWdnZXN0aW9uSXRlbSksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoucmVjb3JkKHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW0pLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfY3FzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvY3FzL2NvbXBhbmllcy9jdXNpcFwiLFxuICAgIGFsaWFzOiBcImJ5X2N1c2lwX2Nxc19jb21wYW5pZXNfY3VzaXBfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2YgbWF0Y2hlcyBiYXNlZCBvbiBhIGxpc3Qgb2YgQ1VTSVBzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiB6LmFycmF5KHN0X2Nxc19DdXNpcFZhbHVlcyksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoucmVjb3JkKHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEl0ZW0pLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfY3FzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvY3FzL2NvbXBhbmllcy9pc2luXCIsXG4gICAgYWxpYXM6IFwiYnlfaXNpbl9jcXNfY29tcGFuaWVzX2lzaW5fcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2YgbWF0Y2hlcyBiYXNlZCBvbiBhIGxpc3Qgb2YgSVNJTnNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHouYXJyYXkoc3RfY3FzX0lzaW5WYWx1ZXMpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnJlY29yZChzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2Nxcy9jb21wYW5pZXMvbGlzdGluZ1wiLFxuICAgIGFsaWFzOiBcImJ5X2xpc3RpbmdfY3FzX2NvbXBhbmllc19saXN0aW5nX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBsaXN0IG9mIG1hdGNoZXMgYmFzZWQgb24gYSBsaXN0IG9mIGxpc3RpbmcgY29kZXNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHouYXJyYXkoc3RfY3FzX0xpc3RpbmdWYWx1ZXMpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnJlY29yZChzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2Nxcy9jb21wYW5pZXMvc2Vkb2xcIixcbiAgICBhbGlhczogXCJieV9zZWRvbF9jcXNfY29tcGFuaWVzX3NlZG9sX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBsaXN0IG9mIG1hdGNoZXMgYmFzZWQgb24gYSBsaXN0IG9mIFNFRE9Mc2AsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogei5hcnJheShzdF9jcXNfU2Vkb2xWYWx1ZXMpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnJlY29yZChzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2Nxcy9kaXNjb3ZlcnktcGFuZWxcIixcbiAgICBhbGlhczogXCJkaXNjb3ZlcnlfcGFuZWxfY3FzX2Rpc2NvdmVyeV9wYW5lbF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXR1cm5zIGEgc2V0IG9mIHJlbGF0ZWQgZW50aXRpZXMgdG8gdGhlIHF1ZXJ5YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9jcXNfUlBYUXVlcnksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2Nxc19EaXNjb3ZlcnlQYW5lbEdyb3VwUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9jcXNfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2Nxcy9sYW5ndWFnZXNcIixcbiAgICBhbGlhczogXCJsYW5ndWFnZXNfY3FzX2xhbmd1YWdlc19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgbGFuZ3VhZ2VzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICByZXNwb25zZTogc3RfY3FzX0xhbmd1YWdlc0xpc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvY3FzL2xhbmd1YWdlcy86bGFuZ3VhZ2VfY29kZVwiLFxuICAgIGFsaWFzOiBcImxhbmd1YWdlX2Nxc19sYW5ndWFnZXNfX2xhbmd1YWdlX2NvZGVfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2Ygc2ltaWxhciBzZW50ZW5jZXMgYmFzZWQgb24gdGhlIHF1ZXJ5YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwibGFuZ3VhZ2VfY29kZVwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9jcXNfTGFuZ3VhZ2VSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2Nxcy9xdWVyeS1jaHVua3NcIixcbiAgICBhbGlhczogXCJxdWVyeV9jaHVua3NfY3FzX3F1ZXJ5X2NodW5rc19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXR1cm5zIGEgbGlzdCBvZiBtYXRjaGVzIGJhc2VkIG9uIHRoZSBxdWVyeS5cbiZndDsgTm90ZSB0aGlzIGluZm8gaXMgcmV0dXJuZWQgb24gU3RvcnkuY2h1bmtzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9jcXNfUlBYUXVlcnksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2Nxc19TZWFyY2hSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvY3FzL3JhbmtpbmdfcHJvZmlsZXNcIixcbiAgICBhbGlhczogXCJyYW5raW5nX3Byb2ZpbGVzX2Nxc19yYW5raW5nX3Byb2ZpbGVzX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2YgYWxsIGF2YWlsYWJsZSByYW5raW5nIHByb2ZpbGVzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICByZXNwb25zZTogc3RfY3FzX1JhbmtpbmdSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2Nxc19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvY3VzdG9tLWRhdGEtdmlld3NcIixcbiAgICBhbGlhczogXCJnZXRfY3VzdG9tX2RhdGFfdmlld3NfY3VzdG9tX2RhdGFfdmlld3NfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXRyaWV2ZSBhbGwgY3VzdG9tIGRhdGEgdmlld3MgZm9yIGF1dGhlbnRpY2F0ZWQgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfZGF0YV90b29sc19DdXN0b21EYXRhVmlld0xpc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVG9vIE1hbnkgUmVxdWVzdHMuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMixcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgR2F0ZXdheS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTZXJ2aWNlIFVuYXZhaWxhYmxlLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBHYXRld2F5IFRpbWVvdXQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvY3VzdG9tLWRhdGEtdmlld3NcIixcbiAgICBhbGlhczogXCJjcmVhdGVfY3VzdG9tX2RhdGFfdmlld19jdXN0b21fZGF0YV92aWV3c19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBDcmVhdGUgYSBuZXcgY3VzdG9tIGRhdGEgdmlldy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0NyZWF0ZUN1c3RvbURhdGFWaWV3UmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfQ3VzdG9tRGF0YVZpZXdSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVG9vIE1hbnkgUmVxdWVzdHMuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMixcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgR2F0ZXdheS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTZXJ2aWNlIFVuYXZhaWxhYmxlLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBHYXRld2F5IFRpbWVvdXQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwYXRjaFwiLFxuICAgIHBhdGg6IFwiL2N1c3RvbS1kYXRhLXZpZXdzLyZsdDtvYmplY3RfaWQmZ3Q7XCIsXG4gICAgYWxpYXM6IFwidXBkYXRlX2N1c3RvbV9kYXRhX3ZpZXdfY3VzdG9tX2RhdGFfdmlld3NfX29iamVjdF9pZF9fcGF0Y2hcIixcbiAgICBkZXNjcmlwdGlvbjogYFVwZGF0ZSBhbiBleGlzdGluZyBjdXN0b20gZGF0YSB2aWV3IGJ5IElELmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBkYXRlQ3VzdG9tRGF0YVZpZXdSZXF1ZXN0LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZGVsZXRlXCIsXG4gICAgcGF0aDogXCIvY3VzdG9tLWRhdGEtdmlld3MvJmx0O29iamVjdF9pZCZndDtcIixcbiAgICBhbGlhczogXCJkZWxldGVfY3VzdG9tX2RhdGFfdmlld19jdXN0b21fZGF0YV92aWV3c19fb2JqZWN0X2lkX19kZWxldGVcIixcbiAgICBkZXNjcmlwdGlvbjogYERlbGV0ZSBhIGN1c3RvbSBkYXRhIHZpZXcgYnkgSUQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnVua25vd24oKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVG9vIE1hbnkgUmVxdWVzdHMuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMixcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgR2F0ZXdheS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTZXJ2aWNlIFVuYXZhaWxhYmxlLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBHYXRld2F5IFRpbWVvdXQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9kb2N1bWVudHMvOmRvY3VtZW50X2lkXCIsXG4gICAgYWxpYXM6IFwiZ2V0X2RvY3VtZW50X2RvY3VtZW50c19fZG9jdW1lbnRfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgV2lsbCByZXR1cm4gdGhlIFJQSlNPTiBieSBpdHMgZG9jdW1lbnQgVVVJRC4gRGVwZW5kaW5nIG9uIHRoZSBvcmlnaW4gb2YgdGhlIHJlcXVlc3QgV0VCIG9yIFNESywgICAgIGl0IHdpbGwgcmV0dXJuIG9uZSBvZiB0aGUgZm9sbG93aW5nIHNjaGVtYXM6XG5cbiogJiN4NjA7U2RrUnBqc29uJiN4NjA7OiAqKlNESyoqIG9yaWdpbi4gSXQgcmV0dXJucyBhIHNpbXBsaWZpZWQgUlBKU09OLlxuKiAmI3g2MDtScGpzb24mI3g2MDs6ICoqV2ViKiogT3JpZ2luLiBJdCByZXR1cm5zIGZ1bGwgUlBKU09OIGJ5IHRoZSBkb2N1bWVudCYjeDI3O3MgVVVJRC5cbiogJiN4NjA7UHJlc2lnbmVkVXJsUnBqc29uJiN4NjA7OiBSZXR1cm5lZCB3aGVuIHRoZSBzaXplIG9mIHRoZSBSUEpTT04gaXMgdG9vIGxhcmdlLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImRvY3VtZW50X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoudW5pb24oW1xuICAgICAgc3RfZG9jdW1lbnRzX1Nka1JwanNvbixcbiAgICAgIHN0X2RvY3VtZW50c19ScGpzb24sXG4gICAgICBzdF9kb2N1bWVudHNfUHJlc2lnbmVkVXJsUnBqc29uLFxuICAgIF0pLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2RvY3VtZW50cy9jb2xsZWN0aW9ucy86Y29sbGVjdGlvbl9pZFwiLFxuICAgIGFsaWFzOiBcImRvY3VtZW50c19ieV9jb2xsZWN0aW9uX2lkX2RvY3VtZW50c19jb2xsZWN0aW9uc19fY29sbGVjdGlvbl9pZF9fZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBXaWxsIHJldHVybiBhIGxpc3Qgb2YgZG9jdW1lbnRzIGJ5IHRoZWlyIHJwX2NvbGxlY3Rpb25faWQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiY29sbGVjdGlvbl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9kb2N1bWVudHNfVmVzcGFDb2xsZWN0aW9uUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2RvY3VtZW50cy9lYXJuaW5nc19jYWxlbmRhci9cIixcbiAgICBhbGlhczogXCJnZXRfcXVhcnRlcmx5X3JlcG9ydHNfZm9yX2VudGl0eV9pZF9kb2N1bWVudHNfZWFybmluZ3NfY2FsZW5kYXJfX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYFdpbGwgcmV0dXJuIHRoZSBxdWFydGVybHkgcmVwb3J0cyBmb3IgZW50aXR5IHJhdmVucGFjayBpZHMuIFRoZXNlIGFyZSBRVUFSVFIgZG9jdW1lbnRzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0RhdGFUb29sc0FwaVJlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2RvY3VtZW50c19EYXRhVG9vbHNBcGlSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9lbWFpbHNcIixcbiAgICBhbGlhczogXCJsaXN0X2VtYWlsX2NvbmZpZ3NfZW1haWxzX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgTGlzdCBhbGwgb2YgYWxsIGNvbmZpZ3VyZWQgaW5ib3hlcyBmb3IgdGhlIGxvZ2dlZCBpbiB1c2VyLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcmVzcG9uc2U6IHN0X3ByaXZhdGVfY29udGVudF9MaXN0RW1haWxDb25maWdzUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvZW1haWxzXCIsXG4gICAgYWxpYXM6IFwiY3JlYXRlX2VtYWlsX2NvbmZpZ19lbWFpbHNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQ3JlYXRlIGEgbmV3IGVtYWlsIGNvbmZpZywgbmV3IGluZ2VzdGlvbiBpbmJveCBmb3IgdGhlIHVzZXIuXG5QYXlsb2FkIGFjY2VwdHMgdGhlIGxpc3Qgb2YgYWxsb3dlZC9ibG9ja2VkIGVtYWlscy5cbkVhY2ggaW5ib3ggd2lsbCByZWNlaXZlIGEgdW5pcXVlIGVtYWlsIGhhc2guYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdQYXlsb2FkLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3ByaXZhdGVfY29udGVudF9FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL2VtYWlscy86ZW1haWxfY29uZmlnX2lkXCIsXG4gICAgYWxpYXM6IFwiZ2V0X2VtYWlsX2NvbmZpZ19lbWFpbHNfX2VtYWlsX2NvbmZpZ19pZF9fZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBHZXQgdGhlIGVtYWlsIGNvbmZpZywgdG9nZXRoZXIgd2l0aCByZWxhdGVkIGVtYWlsIGZpbHRlcnMgKGFsbG93ZWQvYmxvY2tlZCBlbWFpbHMpIGZvciB0aGUgdXNlciBieSBlbWFpbCBjb25maWcgdXVpZGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImVtYWlsX2NvbmZpZ19pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3ByaXZhdGVfY29udGVudF9FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInB1dFwiLFxuICAgIHBhdGg6IFwiL2VtYWlscy86ZW1haWxfY29uZmlnX2lkXCIsXG4gICAgYWxpYXM6IFwidXBkYXRlX2VtYWlsX2NvbmZpZ19lbWFpbHNfX2VtYWlsX2NvbmZpZ19pZF9fcHV0XCIsXG4gICAgZGVzY3JpcHRpb246IGBVcGRhdGUgdGhlIGVtYWlsIGNvbmZpZyBmb3IgdGhlIHVzZXIgYnkgZW1haWwgY29uZmlnIHV1aWQuXG5QYXlsb2FkIGFjY2VwdHMgdGhlIGxpc3Qgb2YgYWxsb3dlZC9ibG9ja2VkIGVtYWlscy5cbldpbGwgdGhyb3cgaWYgdGhlIGVtYWlsIGNvbmZpZyBkb2VzIG5vdCBleGlzdCBvciBpcyBub3Qgb3duZWQgYnkgdGhlIHVzZXIuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdQYXlsb2FkLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJlbWFpbF9jb25maWdfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfcHJpdmF0ZV9jb250ZW50X0VtYWlsQ29uZmlnUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJkZWxldGVcIixcbiAgICBwYXRoOiBcIi9lbWFpbHMvOmVtYWlsX2NvbmZpZ19pZFwiLFxuICAgIGFsaWFzOiBcImRlbGV0ZV9lbWFpbF9jb25maWdfZW1haWxzX19lbWFpbF9jb25maWdfaWRfX2RlbGV0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRGVsZXRlIHRoZSBlbWFpbCBjb25maWcgZm9yIHRoZSB1c2VyIGJ5IGVtYWlsIGNvbmZpZyB1dWlkLlxuV2lsbCB0aHJvdyBpZiB0aGUgZW1haWwgY29uZmlnIGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBvd25lZCBieSB0aGUgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJlbWFpbF9jb25maWdfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfcHJpdmF0ZV9jb250ZW50X0VtYWlsQ29uZmlnUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJpdmF0ZV9jb250ZW50X0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9lbWFpbHMvdmVyaWZ5LzplbWFpbF9oYXNoXCIsXG4gICAgYWxpYXM6IFwidmVyaWZ5X2VtYWlsX2NvbmZpZ19lbWFpbHNfdmVyaWZ5X19lbWFpbF9oYXNoX19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYFRoaXMgaXMgYSBwcml2YXRlIEFQSSBtZXRob2QgdG8gbG9hZCBlbWFpbCBjb25maWcgZm9yIEFOWSB1c2VyIGJ5IGVtYWlsIGhhc2guXG5JdCYjeDI3O3MgdXNlZCBieSB0aGUgZW1haWwgaW5nZXN0aW9uIHNlcnZpY2VzIHRvIHZlcmlmeSB1cGNvbWluZyBlbWFpbHMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZW1haWxfaGFzaFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3ByaXZhdGVfY29udGVudF9FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LWFuYWx5c3QtcmF0aW5nc1wiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfYW5hbHlzdF9yYXRpbmdzX2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfYW5hbHlzdF9yYXRpbmdzX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGFuYWx5c3QgcmF0aW5ncyBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfQW5hbHlzdERhdGFUb29sUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2ZpbmFuY2lhbC1kYXRhL2NvbXBhbnktYmFsYW5jZS1zdGF0ZW1lbnRcIixcbiAgICBhbGlhczogXCJjb21wYW55X2JhbGFuY2Vfc3RhdGVtZW50X2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfYmFsYW5jZV9zdGF0ZW1lbnRfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggY29tcGFueSBiYWxhbmNlIHN0YXRlbWVudCBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfQmFsYW5jZVN0YXRlbWVudEJGRlJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LWNhc2gtZmxvdy1zdGF0ZW1lbnRcIixcbiAgICBhbGlhczogXCJjb21wYW55X2Nhc2hfZmxvd19zdGF0ZW1lbnRfZmluYW5jaWFsX2RhdGFfY29tcGFueV9jYXNoX2Zsb3dfc3RhdGVtZW50X3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGNvbXBhbnkgY2FzaCBmbG93IHN0YXRlbWVudCBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfQ2FzaEZsb3dTdGF0ZW1lbnRCRkZSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVG9vIE1hbnkgUmVxdWVzdHMuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMixcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgR2F0ZXdheS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTZXJ2aWNlIFVuYXZhaWxhYmxlLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBHYXRld2F5IFRpbWVvdXQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvZmluYW5jaWFsLWRhdGEvY29tcGFueS1jdXJyZW5jeVwiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfY3VycmVuY3lfZmluYW5jaWFsX2RhdGFfY29tcGFueV9jdXJyZW5jeV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBGZXRjaCBjb21wYW55IGN1cnJlbmN5IGRhdGEgZm9yIGEgbGlzdCBvZiBpdGVtcyBvciBSYXZlblBhY2sgZW50aXRpZXMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19CRkZSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfZGF0YV90b29sc19DdXJyZW5jeURhdGFUb29sUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2ZpbmFuY2lhbC1kYXRhL2NvbXBhbnktZXNnLXNjb3JlXCIsXG4gICAgYWxpYXM6IFwiY29tcGFueV9lc2dfc2NvcmVfZmluYW5jaWFsX2RhdGFfY29tcGFueV9lc2dfc2NvcmVfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggY29tcGFueSBFU0cgc2NvcmUgZGF0YSBmb3IgYSBsaXN0IG9mIGl0ZW1zIG9yIFJhdmVuUGFjayBlbnRpdGllcy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0JGRlJlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9kYXRhX3Rvb2xzX0VTR1Njb3JlRGF0YVRvb2xSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVG9vIE1hbnkgUmVxdWVzdHMuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMixcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgR2F0ZXdheS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtRmFpbGVkRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBTZXJ2aWNlIFVuYXZhaWxhYmxlLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBHYXRld2F5IFRpbWVvdXQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvZmluYW5jaWFsLWRhdGEvY29tcGFueS1pbmNvbWUtc3RhdGVtZW50XCIsXG4gICAgYWxpYXM6IFwiY29tcGFueV9pbmNvbWVfc3RhdGVtZW50X2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfaW5jb21lX3N0YXRlbWVudF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBGZXRjaCBjb21wYW55IGluY29tZSBzdGF0ZW1lbnQgZGF0YSBmb3IgYSBsaXN0IG9mIGl0ZW1zIG9yIFJhdmVuUGFjayBlbnRpdGllcy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0JGRlJlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LWtleS1tZXRyaWNzXCIsXG4gICAgYWxpYXM6IFwiY29tcGFueV9rZXlfbWV0cmljc19maW5hbmNpYWxfZGF0YV9jb21wYW55X2tleV9tZXRyaWNzX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGNvbXBhbnkga2V5IG1ldHJpY3MgZGF0YSBmb3IgYSBsaXN0IG9mIGl0ZW1zIG9yIFJhdmVuUGFjayBlbnRpdGllcy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0JGRlJlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2JmZl9kYXRhX3Rvb2xzX0tleU1ldHJpY3NEYXRhVG9vbFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LWxhdGVzdC1zdXJwcmlzZVwiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfbGF0ZXN0X3N1cnByaXNlX2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfbGF0ZXN0X3N1cnByaXNlX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGxhdGVzdCBlYXJuaW5ncyBzdXJwcmlzZSBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfRWFybmluZ3NTdXJwcmlzZURhdGFUb29sUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2ZpbmFuY2lhbC1kYXRhL2NvbXBhbnktcHJpY2UtY2hhbmdlc1wiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfcHJpY2VfY2hhbmdlc19maW5hbmNpYWxfZGF0YV9jb21wYW55X3ByaWNlX2NoYW5nZXNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggY29tcGFueSBwcmljZSBjaGFuZ2VzIGRhdGEgZm9yIGEgbGlzdCBvZiBpdGVtcyBvciBSYXZlblBhY2sgZW50aXRpZXMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19CRkZSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfZGF0YV90b29sc19DaGFuZ2VEYXRhVG9vbFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LXByaWNlLXRhcmdldFwiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfcHJpY2VfdGFyZ2V0X2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfcHJpY2VfdGFyZ2V0X3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGNvbXBhbnkgcHJpY2UgdGFyZ2V0IGRhdGEgZm9yIGEgbGlzdCBvZiBpdGVtcyBvciBSYXZlblBhY2sgZW50aXRpZXMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19CRkZSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfZGF0YV90b29sc19QcmljZVRhcmdldERhdGFUb29sUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2ZpbmFuY2lhbC1kYXRhL2NvbXBhbnktcXVvdGVcIixcbiAgICBhbGlhczogXCJjb21wYW55X3F1b3RlX2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfcXVvdGVfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggY29tcGFueSBxdW90ZSBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfUXVvdGVEYXRhVG9vbFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LXJhdGlvc1wiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfcmF0aW9zX2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfcmF0aW9zX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGNvbXBhbnkgcmF0aW9zIGRhdGEgZm9yIGEgbGlzdCBvZiBpdGVtcyBvciBSYXZlblBhY2sgZW50aXRpZXMuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19CRkZSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9iZmZfZGF0YV90b29sc19SYXRpb3NEYXRhVG9vbFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEdhdGV3YXkgVGltZW91dC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX1Vwc3RyZWFtVGltZW91dEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9maW5hbmNpYWwtZGF0YS9jb21wYW55LXNlbnRpbWVudFwiLFxuICAgIGFsaWFzOiBcImNvbXBhbnlfc2VudGltZW50X2ZpbmFuY2lhbF9kYXRhX2NvbXBhbnlfc2VudGltZW50X3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEZldGNoIGZpbmFuY2lhbCBkYXRhIGZvciBhIGxpc3Qgb2YgaXRlbXMgb3IgUmF2ZW5QYWNrIGVudGl0aWVzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfQkZGUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYmZmX2RhdGFfdG9vbHNfU2VudGltZW50QkZGUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYFRvbyBNYW55IFJlcXVlc3RzLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIEdhdGV3YXkuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU2VydmljZSBVbmF2YWlsYWJsZS5gLFxuICAgICAgICBzY2hlbWE6IHN0X2JmZl9kYXRhX3Rvb2xzX0RCQ29ubmVjdGlvbkVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgR2F0ZXdheSBUaW1lb3V0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYmZmX2RhdGFfdG9vbHNfVXBzdHJlYW1UaW1lb3V0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIva2V5c1wiLFxuICAgIGFsaWFzOiBcImdldF91c2VyX2tleXNfa2V5c19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEdldHMgYWxsIEFQSSBrZXlzIGZvciB0aGUgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHJlc3BvbnNlOiB6LmFycmF5KHN0X2FwaV9rZXlzX0dldEFwaUtleSksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9hcGlfa2V5c19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL2tleXNcIixcbiAgICBhbGlhczogXCJjcmVhdGVfbmV3X2tleV9rZXlzX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYENyZWF0ZXMgYSBuZXcgQVBJIGtleSBmb3IgdGhlIHVzZXIuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiB6Lm9iamVjdCh7IGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm1pbig1KS5tYXgoMTAwMCkgfSkucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXBpX2tleXNfQ3JlYXRlZEFwaUtleSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2FwaV9rZXlzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA5LFxuICAgICAgICBkZXNjcmlwdGlvbjogYENvbmZsaWN0LiBNYXhpbXVtIG9mIDIwIEFQSSBrZXlzIGFsbG93ZWQgcGVyIHVzZXJgLFxuICAgICAgICBzY2hlbWE6IHN0X2FwaV9rZXlzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicGF0Y2hcIixcbiAgICBwYXRoOiBcIi9rZXlzXCIsXG4gICAgYWxpYXM6IFwidXBkYXRlX2tleV9rZXlzX3BhdGNoXCIsXG4gICAgZGVzY3JpcHRpb246IGBVcGRhdGUgQVBJIGtleSBmb3IgdGhlIHVzZXIuIEZvciBub3cgaXQgb25seSB1cGRhdGVzIHRoZSBkZXNjcmlwdGlvbi5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHoub2JqZWN0KHsgZGVzY3JpcHRpb246IHouc3RyaW5nKCkubWluKDUpLm1heCgxMDAwKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hcGlfa2V5c19HZXRBcGlLZXksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9hcGlfa2V5c19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hcGlfa2V5c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImRlbGV0ZVwiLFxuICAgIHBhdGg6IFwiL2tleXMvOmtleV9pZFwiLFxuICAgIGFsaWFzOiBcImRlbGV0ZV91c2VyX2tleV9rZXlzX19rZXlfaWRfX2RlbGV0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRGVsZXRlcyBhbiBBUEkga2V5IGZvciB0aGUgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJrZXlfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hcGlfa2V5c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQ29uZmxpY3QuIERpc2FibGUga2V5IGZpcnN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXBpX2tleXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIva2V5cy86a2V5X2lkL2Rpc2FibGVcIixcbiAgICBhbGlhczogXCJkaXNhYmxlX3VzZXJfa2V5X2tleXNfX2tleV9pZF9fZGlzYWJsZV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBEaXNhYmxlcyBhbiBBUEkga2V5IGZvciB0aGUgdXNlci5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJrZXlfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogelxuICAgICAgLm9iamVjdCh7IGVuYWJsZWQ6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpIH0pXG4gICAgICAucGFydGlhbCgpXG4gICAgICAucGFzc3Rocm91Z2goKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXBpX2tleXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIva2V5cy86a2V5X2lkL2VuYWJsZVwiLFxuICAgIGFsaWFzOiBcImVuYWJsZV91c2VyX2tleV9rZXlzX19rZXlfaWRfX2VuYWJsZV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBFbmFibGVzIGFuIEFQSSBrZXkgZm9yIHRoZSB1c2VyLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImtleV9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6XG4gICAgICAub2JqZWN0KHsgZW5hYmxlZDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSB9KVxuICAgICAgLnBhcnRpYWwoKVxuICAgICAgLnBhc3N0aHJvdWdoKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2FwaV9rZXlzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvbGxtL3RyZW5kaW5nXCIsXG4gICAgYWxpYXM6IFwidHJlbmRpbmdfZW5kcG9pbnRfbGxtX3RyZW5kaW5nX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVGhpcyBpcyBhIG1pbmltYWwgZXhhbXBsZSBvZiBhIHByb2plY3QgZW5kcG9pbnQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJsYXRlc3RcIiksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInR5cGVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHR5cGUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImRpc3Bvc2l0aW9uXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBxdWVyeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic3RhdHVzX2NvZGVfb3ZlcnJpZGVcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkuZGVmYXVsdChmYWxzZSksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X2xsbV90cmVuZGluZ19nZXRfTGFtYmRhUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfbGxtX3RyZW5kaW5nX2dldF9MYW1iZGFCYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL21hcmtldC1kYXRhXCIsXG4gICAgYWxpYXM6IFwiZmluYW5jZV9tYXJrZXRfZGF0YV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBGZXRjaCBmaW5hbmNpYWwgZGF0YSBmb3IgYSBsaXN0IG9mIGl0ZW1zIG9yIFJhdmVuUGFjayBlbnRpdGllcy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2ZpbmFuY2VzX0ZpbmFuY2VSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnJlY29yZChzdF9maW5hbmNlc19Qb3NzaWJsZUZpbmFuY2lhbEluZm8pLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgZGVzY3JpcHRpb246IGBUb28gTWFueSBSZXF1ZXN0cy5gLFxuICAgICAgICBzY2hlbWE6IHN0X2ZpbmFuY2VzX1Vwc3RyZWFtVG9vTWFueVJlcXVlc3RzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfZmluYW5jZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAyLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBHYXRld2F5LmAsXG4gICAgICAgIHNjaGVtYTogc3RfZmluYW5jZXNfVXBzdHJlYW1GYWlsZWRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNlcnZpY2UgVW5hdmFpbGFibGUuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9maW5hbmNlc19EQkNvbm5lY3Rpb25FcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvbWFya2V0aW5nL29uYm9hcmRpbmctc3VydmV5XCIsXG4gICAgYWxpYXM6IFwib25ib2FyZGluZ19tYXJrZXRpbmdfb25ib2FyZGluZ19zdXJ2ZXlfcG9zdFwiLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX1VzZXJPbmJvYXJkaW5nRmVlZGJhY2ssXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoudW5rbm93bigpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdCBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvbWFya2V0aW5nL3NhbGVzLXJlcXVlc3RcIixcbiAgICBhbGlhczogXCJzYWxlc19yZXF1ZXN0X21hcmtldGluZ19zYWxlc19yZXF1ZXN0X3Bvc3RcIixcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19Vc2VyU2FsZXNSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnVua25vd24oKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvcHJvZmlsZXMvY29udGVudC1hY2Nlc3MtcG9saWNpZXNcIixcbiAgICBhbGlhczogXCJnZXRfY29udGVudF9hY2Nlc3NfcG9saWNpZXNfcHJvZmlsZXNfY29udGVudF9hY2Nlc3NfcG9saWNpZXNfZ2V0XCIsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcmVzcG9uc2U6IHN0X3Byb2ZpbGVzX0NvbnRlbnRBY2Nlc3NQb2xpY2llc1Jlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9wcm9maWxlcy9tZVwiLFxuICAgIGFsaWFzOiBcImdldF9teV9wcm9maWxlX3Byb2ZpbGVzX21lX2dldFwiLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHJlc3BvbnNlOiBzdF9wcm9maWxlc19NeVByb2ZpbGVSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwYXRjaFwiLFxuICAgIHBhdGg6IFwiL3Byb2ZpbGVzL21lL3N1YnNjcmlwdGlvbl9tb2RpZmljYXRpb25cIixcbiAgICBhbGlhczogXCJwYXRjaF9teV9zdWJzY3JpcHRpb25fbW9kaWZpY2F0aW9uX3Byb2ZpbGVzX21lX3N1YnNjcmlwdGlvbl9tb2RpZmljYXRpb25fcGF0Y2hcIixcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiB6Lm9iamVjdCh7IHN0YXR1czogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb24sXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvcHJvZmlsZXMvb3JnYW5pemF0aW9ucy86b3JnYW5pemF0aW9uX2lkXCIsXG4gICAgYWxpYXM6IFwiZ2V0X29yZ2FuaXphdGlvbl9wcm9maWxlX3Byb2ZpbGVzX29yZ2FuaXphdGlvbnNfX29yZ2FuaXphdGlvbl9pZF9fZ2V0XCIsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9yZ2FuaXphdGlvbl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcm9maWxlc19GdWxsT3JnYW5pemF0aW9uUHJvZmlsZVJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicGF0Y2hcIixcbiAgICBwYXRoOiBcIi9wcm9maWxlcy9vcmdhbml6YXRpb25zLzpvcmdhbml6YXRpb25faWRcIixcbiAgICBhbGlhczogXCJ1cGRhdGVfb3JnYW5pemF0aW9uX3Byb2ZpbGVfcHJvZmlsZXNfb3JnYW5pemF0aW9uc19fb3JnYW5pemF0aW9uX2lkX19wYXRjaFwiLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX1VwZGF0ZU9yZ2FuaXphdGlvblByb2ZpbGUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9yZ2FuaXphdGlvbl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcm9maWxlc19Pcmdhbml6YXRpb25Qcm9maWxlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdCBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvcHJvZmlsZXMvdXNlcnMvOnVzZXJfaWRcIixcbiAgICBhbGlhczogXCJnZXRfdXNlcl9wcm9maWxlX3Byb2ZpbGVzX3VzZXJzX191c2VyX2lkX19nZXRcIixcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwidXNlcl9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9wcm9maWxlc19GdWxsVXNlclByb2ZpbGVSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZCBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9wcm9maWxlc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL3JwanNvbi86ZG9jdW1lbnRfaWRcIixcbiAgICBhbGlhczogXCJycGpzb25fcmV0cmlldmFsX3JwanNvbl9fZG9jdW1lbnRfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgV2lsbCByZXR1cm4gdGhlIFJQSlNPTiBieSBpdHMgZG9jdW1lbnQgVVVJRC4gRGVwZW5kaW5nIG9uIHRoZSBvcmlnaW4gb2YgdGhlIHJlcXVlc3QgV0VCIG9yIFNESywgICAgIGl0IHdpbGwgcmV0dXJuIG9uZSBvZiB0aGUgZm9sbG93aW5nIHNjaGVtYXM6XG5cbiogJiN4NjA7U2RrUnBqc29uJiN4NjA7OiAqKlNESyoqIG9yaWdpbi4gSXQgcmV0dXJucyBhIHNpbXBsaWZpZWQgUlBKU09OLlxuKiAmI3g2MDtScGpzb24mI3g2MDs6ICoqV2ViKiogT3JpZ2luLiBJdCByZXR1cm5zIGZ1bGwgUlBKU09OIGJ5IHRoZSBkb2N1bWVudCYjeDI3O3MgVVVJRC5cbiogJiN4NjA7UHJlc2lnbmVkVXJsUnBqc29uJiN4NjA7OiBSZXR1cm5lZCB3aGVuIHRoZSBzaXplIG9mIHRoZSBSUEpTT04gaXMgdG9vIGxhcmdlLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImRvY3VtZW50X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoudW5pb24oW1xuICAgICAgc3RfZG9jdW1lbnRzX1Nka1JwanNvbixcbiAgICAgIHN0X2RvY3VtZW50c19ScGpzb24sXG4gICAgICBzdF9kb2N1bWVudHNfUHJlc2lnbmVkVXJsUnBqc29uLFxuICAgIF0pLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF9kb2N1bWVudHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X2RvY3VtZW50c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9zdWJzY3JpcHRpb25zL2NoZWNrb3V0XCIsXG4gICAgYWxpYXM6IFwiZ2VuZXJhdGVfY2hlY2tvdXRfdXJsX3dpdGhfcGxhbnNfc3Vic2NyaXB0aW9uc19jaGVja291dF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgYXZhaWxhYmxlIHJhbmtpbmcgcHJvZmlsZXNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X3N1YnNjcmlwdGlvbnNfR2VuZXJhdGVDaGVja291dFVybFBhcmFtc1JlcXVlc3QsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoub2JqZWN0KHsgdXJsOiB6LnN0cmluZygpIH0pLnBhc3N0aHJvdWdoKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9zdWJzY3JpcHRpb25zX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9zdWJzY3JpcHRpb25zL2NoZWNrb3V0LXVybFwiLFxuICAgIGFsaWFzOiBcImdlbmVyYXRlX2NoZWNrb3V0X3VybF9zdWJzY3JpcHRpb25zX2NoZWNrb3V0X3VybF9nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgcmFua2luZyBwcm9maWxlc2AsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcInByaWNlSWRcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHoub2JqZWN0KHsgdXJsOiB6LnN0cmluZygpIH0pLnBhc3N0aHJvdWdoKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9zdWJzY3JpcHRpb25zX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi9zdWJzY3JpcHRpb25zL2N1c3RvbWVyLXBvcnRhbC1zZXNzaW9uXCIsXG4gICAgYWxpYXM6IFwiZ2VuZXJhdGVfY3VzdG9tZXJfcG9ydGFsX3Nlc3Npb25fc3Vic2NyaXB0aW9uc19jdXN0b21lcl9wb3J0YWxfc2Vzc2lvbl9nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBjdXN0b21lciBwb3J0YWwgc2Vzc2lvbmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcmVzcG9uc2U6IHN0X3N1YnNjcmlwdGlvbnNfQ3VzdG9tZXJQb3J0YWwsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9zdWJzY3JpcHRpb25zX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZGAsXG4gICAgICAgIHNjaGVtYTogc3Rfc3Vic2NyaXB0aW9uc19Ob3RGb3VuZEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi9zdWJzY3JpcHRpb25zL3dlYmhvb2svXCIsXG4gICAgYWxpYXM6IFwicmVjZWl2ZV93ZWJob29rX2V2ZW50X3N1YnNjcmlwdGlvbnNfd2ViaG9va19fcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgTGlzdGVuZXIgZm9yIHdlYmhvb2sgZXZlbnRzIGZyb20gY2hhcmdlYmVlYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICByZXNwb25zZTogei51bmtub3duKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9zdWJzY3JpcHRpb25zX2Rpc3BhdGNoZXJfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi90cmFjay1ldmVudHNcIixcbiAgICBhbGlhczogXCJ0cmFja19ldmVudF90cmFja19ldmVudHNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVHJhY2tzIHRoZSBldmVudCBpbiBDdXN0b21lciBJTy5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2V2ZW50X3RyYWNrZXJfVXNlckV2ZW50LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6LnVua25vd24oKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2V2ZW50X3RyYWNrZXJfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvYnVsay1kZWxldGUvcXVlcmllc1wiLFxuICAgIGFsaWFzOiBcImJ1bGtfZGVsZXRlX29iamVjdHNfdXNlcl9kYXRhX2J1bGtfZGVsZXRlX3F1ZXJpZXNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRGVsZXRlcyBtdWx0aXBsZSBVc2VyIFF1ZXJpZXMgaW4gYnVsayBieSB0aGUgbGlzdCBvZiBpZHMgcGFzc2VkIGFzIGEgYm9keSBwYXlsb2FkLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvYnVsay1kZWxldGUvd2F0Y2hsaXN0c1wiLFxuICAgIGFsaWFzOiBcImJ1bGtfZGVsZXRlX29ial91c2VyX2RhdGFfYnVsa19kZWxldGVfd2F0Y2hsaXN0c19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBCdWxrIGRlbGV0ZXMgd2F0Y2hsaXN0c2AsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl93YXRjaGxpc3RzX0J1bGtEZWxldGVXYXRjaGxpc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL2NoYXRzL1wiLFxuICAgIGFsaWFzOiBcImxpc3RfdXNlcl9jaGF0c191c2VyX2RhdGFfY2hhdHNfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJucyBhIGxpc3Qgb2YgY2hhdHMgZm9yIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuXG5JZiB0aGUgbGltaXQgb3Igb2Zmc2V0IGFyZSBwcm92aWRlZCwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgcGFnaW5hdGVkLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9jaGF0c19MaXN0VXNlckNoYXRzUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei51bmlvbihbXG4gICAgICBzdF91c2VyX2NoYXRzX0xpc3RVc2VyQ2hhdFJlc3BvbnNlLFxuICAgICAgc3RfdXNlcl9jaGF0c19QYWdpbmF0ZWRMaXN0VXNlckNoYXRSZXNwb25zZSxcbiAgICBdKSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfY2hhdHNfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvY2hhdHMvXCIsXG4gICAgYWxpYXM6IFwiY3JlYXRlX3VzZXJfY2hhdF91c2VyX2RhdGFfY2hhdHNfX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYFJldHVybnMgYSBzZXQgb2YgcmVsYXRlZCBlbnRpdGllcyB0byB0aGUgcXVlcnlgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfY2hhdHNfQ3JlYXRlVXNlckNoYXRXaXRob3V0VXNlcklkLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX2NoYXRzX1VzZXJDaGF0UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX2NoYXRzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvY2hhdHMvOmNoYXRfaWRcIixcbiAgICBhbGlhczogXCJnZXRfdXNlcl9jaGF0X3VzZXJfZGF0YV9jaGF0c19fY2hhdF9pZF9fZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXR1cm5zIGNoYXQgZGV0YWlsc2AsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImNoYXRfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9jaGF0c19Vc2VyQ2hhdFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9jaGF0c19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmRgLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfY2hhdHNfTm90Rm91bmRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJkZWxldGVcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvY2hhdHMvOmNoYXRfaWRcIixcbiAgICBhbGlhczogXCJkZWxldGVfdXNlcl9jaGF0X3VzZXJfZGF0YV9jaGF0c19fY2hhdF9pZF9fZGVsZXRlXCIsXG4gICAgZGVzY3JpcHRpb246IGBEZWxldGVzIGEgY2hhdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImNoYXRfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9jaGF0c19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmRgLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfY2hhdHNfTm90Rm91bmRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwYXRjaFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS9jaGF0cy86Y2hhdF9pZFwiLFxuICAgIGFsaWFzOiBcInBhdGNoX3VzZXJfY2hhdF91c2VyX2RhdGFfY2hhdHNfX2NoYXRfaWRfX3BhdGNoXCIsXG4gICAgZGVzY3JpcHRpb246IGBVcGRhdGUgYSBjaGF0JiN4Mjc7cyBkZXRhaWxzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX2NoYXRzX1VwZGF0ZVVzZXJDaGF0LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJjaGF0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfY2hhdHNfVXNlckNoYXRVcGRhdGVkUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX2NoYXRzX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZGAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9jaGF0c19Ob3RGb3VuZEVycm9yLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvY2hhdHMvOm9iamVjdF9pZC9zaGFyZVwiLFxuICAgIGFsaWFzOiBcInNoYXJlX3VzZXJfY2hhdF91c2VyX2RhdGFfY2hhdHNfX29iamVjdF9pZF9fc2hhcmVfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgU2hhcmUgYSBjaGF0IHdpdGggb3RoZXIgdXNlcnNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHoub2JqZWN0KHsgcHVibGljOiB6LmJvb2xlYW4oKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9jaGF0c19Vc2VyQ2hhdFNoYXJlZFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9jaGF0c19CYWRSZXF1ZXN0RXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmRgLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfY2hhdHNfTm90Rm91bmRFcnJvcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVlcmllc1wiLFxuICAgIGFsaWFzOiBcImxpc3Rfb2JqZWN0c191c2VyX2RhdGFfcXVlcmllc19nZXRcIixcbiAgICBkZXNjcmlwdGlvbjogYEdldHMgbGlzdCBvZiBVc2VyIFF1ZXJpZXMsIGZpbHRlcmVkIGJ5IHBhc3NlZCBxdWVyeSBwYXJhbWV0ZXJzLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcInNhdmVTdGF0dXNcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IHNhdmVTdGF0dXMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInNoYXJlZFwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogcXVlcnksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm93bmVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBlbnRpdGxlZCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9xdWVyaWVzX0xpc3RPYmplY3RzUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS9xdWVyaWVzXCIsXG4gICAgYWxpYXM6IFwiY3JlYXRlX29ial91c2VyX2RhdGFfcXVlcmllc19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBDcmVhdGVzIGEgbmV3IFVzZXIgUXVlcnkgb2JqZWN0LmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0NyZWF0ZVVzZXJRdWVyeSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS9xdWVyaWVzLzpvYmplY3RfaWRcIixcbiAgICBhbGlhczogXCJnZXRfb2JqZWN0X3VzZXJfZGF0YV9xdWVyaWVzX19vYmplY3RfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgR2V0cyBhIHNpbmdsZSBVc2VyIFF1ZXJ5IG9iamVjdCwgYnkgaXQmI3gyNztzIGlkLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZGVsZXRlXCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3F1ZXJpZXMvOm9iamVjdF9pZFwiLFxuICAgIGFsaWFzOiBcImRlbGV0ZV9vYmpfdXNlcl9kYXRhX3F1ZXJpZXNfX29iamVjdF9pZF9fZGVsZXRlXCIsXG4gICAgZGVzY3JpcHRpb246IGBEZWxldGVzIGEgc2luZ2xlIFVzZXIgUXVlcnkgYnkgaXRzIGlkLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiB6Lm9iamVjdCh7IGlkOiB6LnN0cmluZygpIH0pLnBhc3N0aHJvdWdoKCksXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicHV0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3F1ZXJpZXMvOm9iamVjdF9pZFwiLFxuICAgIGFsaWFzOiBcInB1dF9vYmpfdXNlcl9kYXRhX3F1ZXJpZXNfX29iamVjdF9pZF9fcHV0XCIsXG4gICAgZGVzY3JpcHRpb246IGBVcGRhdGVzIGEgc3BlY2lmaWMgVXNlciBRdWVyeSB3aXRoIHByb3ZpZGVkIGRhdGEuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfVXBkYXRlVXNlclF1ZXJ5LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBhdGNoXCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3F1ZXJpZXMvOm9iamVjdF9pZFwiLFxuICAgIGFsaWFzOiBcInBhdGNoX29ial91c2VyX2RhdGFfcXVlcmllc19fb2JqZWN0X2lkX19wYXRjaFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUGFydGlhbGx5IHVwZGF0ZXMgYSBzcGVjaWZpYyBVc2VyIFF1ZXJ5IHdpdGggcHJvdmlkZWQgZGF0YWAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX1VwZGF0ZVVzZXJRdWVyeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfcXVlcmllc19Vc2VyUXVlcnlSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwdXRcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVlcmllcy86b2JqZWN0X2lkL2V4ZWN1dGVkXCIsXG4gICAgYWxpYXM6IFwidXBkYXRlX3F1ZXJ5X2xhc3RfZXhlY3V0ZWRfdXNlcl9kYXRhX3F1ZXJpZXNfX29iamVjdF9pZF9fZXhlY3V0ZWRfcHV0XCIsXG4gICAgZGVzY3JpcHRpb246IGBNYXJrcyBhIHNwZWNpZmljIFVzZXIgUXVlcnkgYXMgZXhlY3V0ZWRgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9xdWVyaWVzX0xpZ2h0VXNlclF1ZXJ5UmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicHV0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3F1ZXJpZXMvOm9iamVjdF9pZC9waW5cIixcbiAgICBhbGlhczogXCJzZXRfcGlubmVkX2l0ZW1zX3VzZXJfZGF0YV9xdWVyaWVzX19vYmplY3RfaWRfX3Bpbl9wdXRcIixcbiAgICBkZXNjcmlwdGlvbjogYFBpbnMgYSBzaW5nbGUgVXNlciBRdWVyeSBiYXNlZCBvbiB0aGUgcGFzc2VkIHF1ZXJ5IGlkLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3F1ZXJpZXNfVXNlclBpbm5lZFF1ZXJpZXNSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJkZWxldGVcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVlcmllcy86b2JqZWN0X2lkL3BpblwiLFxuICAgIGFsaWFzOiBcImRlbGV0ZV9waW5fdXNlcl9kYXRhX3F1ZXJpZXNfX29iamVjdF9pZF9fcGluX2RlbGV0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVW5waW5zIGEgc2luZ2xlIHF1ZXJ5IGJhc2VkIG9uIHRoZSBwYXNzZWQgcXVlcnkgaWQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfcXVlcmllc19Vc2VyUGlubmVkUXVlcmllc1Jlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVlcmllcy86b2JqZWN0X2lkL3NoYXJlXCIsXG4gICAgYWxpYXM6IFwidXNlcl9xdWVyeV9zaGFyZV91c2VyX2RhdGFfcXVlcmllc19fb2JqZWN0X2lkX19zaGFyZV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBTaGFyZXMgYSBzcGVjaWZpYyBVc2VyIFF1ZXJ5IHdpdGggb3RoZXIgdXNlcnNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVlcmllcy9waW5uZWRcIixcbiAgICBhbGlhczogXCJzZXRfcGlubmVkX2l0ZW1zX3VzZXJfZGF0YV9xdWVyaWVzX3Bpbm5lZF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBQaW5zIG11bHRpcGxlIFVzZXIgUXVlcmllcyBpbiBidWxrIGJ5IHRoZSBsaXN0IG9mIGlkcyBwYXNzZWQgYXMgYSBib2R5IHBheWxvYWQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3F1ZXJpZXNfVXNlclBpbm5lZFF1ZXJpZXNSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfcXVlcmllc19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl9xdWVyaWVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvcXVvdGFcIixcbiAgICBhbGlhczogXCJnZXRfdXNlcl9xdW90YV91c2VyX2RhdGFfcXVvdGFfZ2V0XCIsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcmVzcG9uc2U6IHN0X3Byb2ZpbGVzX015RW50aXRsZW1lbnRzUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3F1b3RhLzpxdW90YV9rZXlcIixcbiAgICBhbGlhczogXCJnZXRfdXNlcl9xdW90YV9zdGF0dXNfdXNlcl9kYXRhX3F1b3RhX19xdW90YV9rZXlfX2dldFwiLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJxdW90YV9rZXlcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfcHJvZmlsZXNfUXVvdGFTdGF0dXMsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3Byb2ZpbGVzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dhdGNobGlzdHNcIixcbiAgICBhbGlhczogXCJsaXN0X29iamVjdHNfdXNlcl9kYXRhX3dhdGNobGlzdHNfZ2V0XCIsXG4gICAgZGVzY3JpcHRpb246IGBSZXR1cm4gYSBsaXN0IG9mIHVzZXIgb2JqZWN0cywgZmlsdGVyZWQgYnkgb2JqZWN0IHR5cGUgYW5kIG9wdGlvbmFsIHNhdmVfc3RhdHVzYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwic2hhcmVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBzaGFyZWQsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm93bmVkXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBlbnRpdGxlZCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ2xvYmFsVHlwZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogZ2xvYmFsVHlwZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ2xvYmFsU3RhdHVzXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBnbG9iYWxTdGF0dXMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImdsb2JhbElzRmVhdHVyZWRcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJnbG9iYWxBdXRob3JOYW1lXCIsXG4gICAgICAgIHR5cGU6IFwiUXVlcnlcIixcbiAgICAgICAgc2NoZW1hOiBxdWVyeSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiaXNGYXZvcml0ZVwiLFxuICAgICAgICB0eXBlOiBcIlF1ZXJ5XCIsXG4gICAgICAgIHNjaGVtYTogZW50aXRsZWQsXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfd2F0Y2hsaXN0c19MaXN0T2JqZWN0c1Jlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzXCIsXG4gICAgYWxpYXM6IFwiY3JlYXRlX29ial91c2VyX2RhdGFfd2F0Y2hsaXN0c19wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBDcmVhdGVzIGEgV2F0Y2hsaXN0YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfQ3JlYXRlV2F0Y2hsaXN0UGFyYW1zLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcImdldFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzLzpvYmplY3RfaWRcIixcbiAgICBhbGlhczogXCJnZXRfb2JqZWN0X3VzZXJfZGF0YV93YXRjaGxpc3RzX19vYmplY3RfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgRmV0Y2ggYSBzcGVjaWZpYyBvYmplY3QgZnJvbSBkeW5hbW8gZ2l2ZW4gYW4gb2JqZWN0IGlkYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJkZWxldGVcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvd2F0Y2hsaXN0cy86b2JqZWN0X2lkXCIsXG4gICAgYWxpYXM6IFwiZGVsZXRlX29ial91c2VyX2RhdGFfd2F0Y2hsaXN0c19fb2JqZWN0X2lkX19kZWxldGVcIixcbiAgICBkZXNjcmlwdGlvbjogYERlbGV0ZXMgYSBXYXRjaGxpc3RgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei5vYmplY3QoeyBpZDogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInB1dFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzLzpvYmplY3RfaWRcIixcbiAgICBhbGlhczogXCJwdXRfb2JqX3VzZXJfZGF0YV93YXRjaGxpc3RzX19vYmplY3RfaWRfX3B1dFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVXBkYXRlcyBhIHdhdGNobGlzdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1B1dFdhdGNobGlzdFBhcmFtcyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwYXRjaFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzLzpvYmplY3RfaWRcIixcbiAgICBhbGlhczogXCJwYXRjaF9vYmpfdXNlcl9kYXRhX3dhdGNobGlzdHNfX29iamVjdF9pZF9fcGF0Y2hcIixcbiAgICBkZXNjcmlwdGlvbjogYFVwZGF0ZXMgcGFydGlhbGx5IGEgd2F0Y2hsaXN0YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfUGF0Y2hXYXRjaGxpc3RQYXJhbXMsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZGVsZXRlXCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dhdGNobGlzdHMvOm9iamVjdF9pZC9hc3NldHNcIixcbiAgICBhbGlhczogXCJkZWxldGVfYXNzZXRzX3VzZXJfZGF0YV93YXRjaGxpc3RzX19vYmplY3RfaWRfX2Fzc2V0c19kZWxldGVcIixcbiAgICBkZXNjcmlwdGlvbjogYFdhdGNobGlzdCBEZWxldGUgQXNzZXRgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiaW1hZ2VcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJhdmF0YXJcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfRGVsZXRlQXNzZXRSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1VuQXV0aG9yaXNlZFdhdGNobGlzdEFjY2Vzc0Vycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1Jlc291cmNlTm90Rm91bmRFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInB1dFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzLzpvYmplY3RfaWQvZmF2b3JpdGVcIixcbiAgICBhbGlhczogXCJmYXZvcml0ZV93YXRjaGxpc3RfdXNlcl9kYXRhX3dhdGNobGlzdHNfX29iamVjdF9pZF9fZmF2b3JpdGVfcHV0XCIsXG4gICAgZGVzY3JpcHRpb246IGBGYXZvcml0ZSBhIFdhdGNobGlzdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19VbkF1dGhvcmlzZWRXYXRjaGxpc3RBY2Nlc3NFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3ROb3RGb3VuZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZGVsZXRlXCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dhdGNobGlzdHMvOm9iamVjdF9pZC9mYXZvcml0ZVwiLFxuICAgIGFsaWFzOiBcInVuZmF2b3JpdGVfd2F0Y2hsaXN0X3VzZXJfZGF0YV93YXRjaGxpc3RzX19vYmplY3RfaWRfX2Zhdm9yaXRlX2RlbGV0ZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVW5mYXZvcml0ZSBhIFdhdGNobGlzdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9iamVjdF9pZFwiLFxuICAgICAgICB0eXBlOiBcIlBhdGhcIixcbiAgICAgICAgc2NoZW1hOiB6LnN0cmluZygpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19VbkF1dGhvcmlzZWRXYXRjaGxpc3RBY2Nlc3NFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3ROb3RGb3VuZEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL3VzZXItZGF0YS93YXRjaGxpc3RzLzpvYmplY3RfaWQvZ2VuZXJhdGUtcHJlc2lnbmVkLXVybFwiLFxuICAgIGFsaWFzOiBcImdlbmVyYXRlX3ByZXNpZ25lZF91cmxfdXNlcl9kYXRhX3dhdGNobGlzdHNfX29iamVjdF9pZF9fZ2VuZXJhdGVfcHJlc2lnbmVkX3VybF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBXYXRjaGxpc3QgR2VuZXJhdGUgUHJlLXNpZ25lZCBVUkwgZm9yIHVwbG9hZGluZyBhc3NldHNgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiaW1hZ2VcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJhdmF0YXJcIixcbiAgICAgICAgdHlwZTogXCJRdWVyeVwiLFxuICAgICAgICBzY2hlbWE6IGVudGl0bGVkLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF91c2VyX3dhdGNobGlzdHNfR2VuZXJhdGVQcmVzaWduZWRVcmxSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1VuQXV0aG9yaXNlZFdhdGNobGlzdEFjY2Vzc0Vycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdE5vdEZvdW5kRXJyb3IsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dhdGNobGlzdHMvOm9iamVjdF9pZC9pdGVtc1wiLFxuICAgIGFsaWFzOiBcInVwZGF0ZV93YXRjaGxpc3RfaXRlbXNfdXNlcl9kYXRhX3dhdGNobGlzdHNfX29iamVjdF9pZF9faXRlbXNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQWRkcyBpdGVtcyB0byBhIHdhdGNobGlzdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdEl0ZW1zVXBkYXRlUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwib2JqZWN0X2lkXCIsXG4gICAgICAgIHR5cGU6IFwiUGF0aFwiLFxuICAgICAgICBzY2hlbWE6IHouc3RyaW5nKCksXG4gICAgICB9LFxuICAgIF0sXG4gICAgcmVzcG9uc2U6IHN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RSZXNwb25zZV9JbnB1dCxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3QuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEZvcmJpZGRlbi5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTm90IEZvdW5kLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dhdGNobGlzdHMvOm9iamVjdF9pZC9zaGFyZVwiLFxuICAgIGFsaWFzOiBcIndhdGNobGlzdF9zaGFyZV91c2VyX2RhdGFfd2F0Y2hsaXN0c19fb2JqZWN0X2lkX19zaGFyZV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBTaGFyZSB0aGUgd2F0Y2hsaXN0YCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVSZXF1ZXN0LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJvYmplY3RfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFJlc3BvbnNlX0lucHV0LFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgRm9yYmlkZGVuLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBOb3QgRm91bmQuYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvci5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi91c2VyLWRhdGEvd2F0Y2hsaXN0cy9kZXBlbmRlbmNpZXNcIixcbiAgICBhbGlhczogXCJjaGVja19vYmplY3RfcGFyZW50c191c2VyX2RhdGFfd2F0Y2hsaXN0c19kZXBlbmRlbmNpZXNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgUmV0cmlldmVzIHRoZSBkZXBlbmRlbmNpZXMvcGFyZW50cyBvZiBhIHdhdGNobGlzdGAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RQYXJlbnRzUmVzcG9uc2UsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0LmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBGb3JiaWRkZW4uYCxcbiAgICAgICAgc2NoZW1hOiBzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICBkZXNjcmlwdGlvbjogYE5vdCBGb3VuZC5gLFxuICAgICAgICBzY2hlbWE6IHN0X3VzZXJfd2F0Y2hsaXN0c19FcnJvclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfdXNlcl93YXRjaGxpc3RzX0Vycm9yUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dvcmtmbG93cy9cIixcbiAgICBhbGlhczogXCJsaXN0X3VzZXJfd29ya2Zsb3dzX3VzZXJfZGF0YV93b3JrZmxvd3NfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgTGlzdCBhbGwgd29ya2Zsb3dzIGZvciBhIHNwZWNpZmljIHVzZXIuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICByZXNwb25zZTogc3RfdXNlcl93b3JrZmxvd3NfV29ya2Zsb3dMaXN0UmVzcG9uc2UsXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgcGF0aDogXCIvdXNlci1kYXRhL3dvcmtmbG93cy86d29ya2Zsb3dfaWRcIixcbiAgICBhbGlhczogXCJnZXRfd29ya2Zsb3dfdXNlcl9kYXRhX3dvcmtmbG93c19fd29ya2Zsb3dfaWRfX2dldFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgR2V0IGEgc3BlY2lmaWMgd29ya2Zsb3cgYnkgSUQuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwid29ya2Zsb3dfaWRcIixcbiAgICAgICAgdHlwZTogXCJQYXRoXCIsXG4gICAgICAgIHNjaGVtYTogei5zdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfdXNlcl93b3JrZmxvd3NfV29ya2Zsb3dSZXNwb25zZSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvdjEva25vd2xlZGdlLWdyYXBoL2JhdGNoLXVwbG9hZFwiLFxuICAgIGFsaWFzOiBcInByaXZhdGVfYXV0b3N1Z2dlc3RfYmF0Y2hfdXBsb2FkX3YxX2tub3dsZWRnZV9ncmFwaF9iYXRjaF91cGxvYWRfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQXV0b3N1Z2dlc3QgZW5kcG9pbnQgdG8gcmV0cmlldmUgc3VnZ2VzdGlvbnMgZnJvbSBWZXNwYSBmcm9tIG11bHRpcGxlIGVudGl0aWVzIGluIGEgQmFzZTY0IGVuY29kZWQgZmlsZWAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfUHJpdmF0ZUF1dG9zdWdnZXN0QmF0Y2hVcGxvYWRSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEJhdGNoVXBsb2FkUmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0IEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfRXJyb3JDbGllbnRSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi92MS9rbm93bGVkZ2UtZ3JhcGgvZmFjZXQtcXVlcnlcIixcbiAgICBhbGlhczogXCJwcml2YXRlX2F1dG9zdWdnZXN0X3dhdGNobGlzdF9mYWNldF9zZWFyY2hfdjFfa25vd2xlZGdlX2dyYXBoX2ZhY2V0X3F1ZXJ5X3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEF1dG9zdWdnZXN0IGVuZHBvaW50IHRvIHJldHJpZXZlIHN1Z2dlc3Rpb25zIGZyb20gVmVzcGEgd2l0aCBhIGZhY2V0IHNlYXJjaCByZXF1ZXN0IGZyb20gVUkuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlQXV0b3N1Z2dlc3RSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVW5hdXRob3JpemVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi92MS9rbm93bGVkZ2UtZ3JhcGgvc2VhcmNoXCIsXG4gICAgYWxpYXM6IFwicHJpdmF0ZV9hdXRvc3VnZ2VzdF9zZWFyY2hfdjFfa25vd2xlZGdlX2dyYXBoX3NlYXJjaF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBBdXRvc3VnZ2VzdCBlbmRwb2ludCB0byByZXRyaWV2ZSBzdWdnZXN0aW9ucyBmcm9tIFZlc3BhIHdpdGggYSBzdGFuZGFyZCByZXF1ZXN0IGZyb20gU0RLLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfUHJpdmF0ZUF1dG9zdWdnZXN0UmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfSW50ZXJuYWxTZXJ2ZXJSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvdjEva25vd2xlZGdlLWdyYXBoL3NlYXJjaF9hZHZhbmNlZFwiLFxuICAgIGFsaWFzOiBcInByaXZhdGVfYXV0b3N1Z2dlc3Rfc2VhcmNoX2FkdmFuY2VkX3YxX2tub3dsZWRnZV9ncmFwaF9zZWFyY2hfYWR2YW5jZWRfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQXV0b3N1Z2dlc3QgZW5kcG9pbnQgdG8gcmV0cmlldmUgc3VnZ2VzdGlvbnMgZnJvbSBWZXNwYSB3aXRoIGFuIGFkdmFuY2VkIHJlcXVlc3QgZm9yIHRlc3RpbmcuYCxcbiAgICByZXF1ZXN0Rm9ybWF0OiBcImpzb25cIixcbiAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYm9keVwiLFxuICAgICAgICB0eXBlOiBcIkJvZHlcIixcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9WZXNwYVJlcXVlc3REZXRhaWxzLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVW5hdXRob3JpemVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi92MS9rbm93bGVkZ2UtZ3JhcGgvd2F0Y2hsaXN0LWF1dG9zdWdnZXN0XCIsXG4gICAgYWxpYXM6IFwicHJpdmF0ZV9hdXRvc3VnZ2VzdF93YXRjaGxpc3Rfc2VhcmNoX3YxX2tub3dsZWRnZV9ncmFwaF93YXRjaGxpc3RfYXV0b3N1Z2dlc3RfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgQXV0b3N1Z2dlc3QgZW5kcG9pbnQgdG8gcmV0cmlldmUgc3VnZ2VzdGlvbnMgZnJvbSBWZXNwYSB3aXRoIGEgc3RhbmRhcmQgcmVxdWVzdCBmcm9tIFVJLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfUHJpdmF0ZVdhdGNobGlzdEF1dG9zdWdnZXN0UmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfSW50ZXJuYWxTZXJ2ZXJSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvdjEvc2VhcmNoXCIsXG4gICAgYWxpYXM6IFwic2VhcmNoX3YxX3NlYXJjaF9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBTZWFyY2ggZW5kcG9pbnQgdG8gcmV0cmlldmUgc2VhcmNoIHJlc3VsdHMgZnJvbSBWZXNwYS5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hSZXN1bHQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0YCxcbiAgICAgICAgc2NoZW1hOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi92MS9zZWFyY2gvY29tZW50aW9uc1wiLFxuICAgIGFsaWFzOiBcImNvbWVudGlvbnNfdjFfc2VhcmNoX2NvbWVudGlvbnNfcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgU2VhcmNoIGVuZHBvaW50IHRvIHJldHJpZXZlIGNvbWVudGlvbnMgcmVzdWx0cyBmcm9tIFZlc3BhLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zU2VhcmNoUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zR3JvdXBSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVW5hdXRob3JpemVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ludGVybmFsU2VydmVyUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL3YxL3NlYXJjaC92b2x1bWVcIixcbiAgICBhbGlhczogXCJ2b2x1bWVfdjFfc2VhcmNoX3ZvbHVtZV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBTZWFyY2ggZW5kcG9pbnQgdG8gcmV0cmlldmUgdm9sdW1lIHJlc3VsdHMgZnJvbSBWZXNwYS5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoUmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Wb2x1bWVSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2ludGVybmFsX3NlYXJjaF9hcGlfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVW5hdXRob3JpemVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ludGVybmFsU2VydmVyUmVzcG9uc2UsXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHtcbiAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgIHBhdGg6IFwiL3dhdGNobGlzdC1hdXRvc3VnZ2VzdFwiLFxuICAgIGFsaWFzOiBcImF1dG9zdWdnZXN0X3dhdGNobGlzdF9zZWFyY2hfd2F0Y2hsaXN0X2F1dG9zdWdnZXN0X3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEF1dG9zdWdnZXN0IGVuZHBvaW50IHRvIHJldHJpZXZlIHN1Z2dlc3Rpb25zIGZyb20gVmVzcGEgd2l0aCBhIHN0YW5kYXJkIHJlcXVlc3QgZnJvbSBVSS5gLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX1dhdGNobGlzdEF1dG9zdWdnZXN0UmVxdWVzdCxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSxcbiAgICBlcnJvcnM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQmFkIFJlcXVlc3RgLFxuICAgICAgICBzY2hlbWE6IHN0X2F1dG9zdWdnZXN0X3Zlc3BhX0JhZFJlcXVlc3RFcnJvcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVuYXV0aG9yaXplZGAsXG4gICAgICAgIHNjaGVtYTogelxuICAgICAgICAgIC5vYmplY3QoeyBtZXNzYWdlOiB6LnN0cmluZygpLmRlZmF1bHQoXCJVc2VyIGF1dGhlbnRpY2F0aW9uIGZhaWxlZFwiKSB9KVxuICAgICAgICAgIC5wYXJ0aWFsKClcbiAgICAgICAgICAucGFzc3Rocm91Z2goKSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVybmFsIFNlcnZlciBFcnJvcmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfSW50ZXJuYWxTZXJ2ZXJSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgcGF0aDogXCIvd2F0Y2hsaXN0LWF1dG9zdWdnZXN0L2JhdGNoLXVwbG9hZFwiLFxuICAgIGFsaWFzOiBcImF1dG9zdWdnZXN0X2JhdGNoX3VwbG9hZF93YXRjaGxpc3RfYXV0b3N1Z2dlc3RfYmF0Y2hfdXBsb2FkX3Bvc3RcIixcbiAgICBkZXNjcmlwdGlvbjogYEF1dG9zdWdnZXN0IGVuZHBvaW50IHRvIHJldHJpZXZlIHN1Z2dlc3Rpb25zIGZyb20gVmVzcGEgZnJvbSBtdWx0aXBsZSBlbnRpdGllcyBpbiBhIEJhc2U2NCBlbmNvZGVkIGZpbGVgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHoub2JqZWN0KHsgZmlsZTogei5zdHJpbmcoKSB9KS5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEJhdGNoVXBsb2FkUmVzcG9uc2VfSW5wdXQsXG4gICAgZXJyb3JzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJhZCBSZXF1ZXN0IEVycm9yLmAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfRXJyb3JDbGllbnRSZXNwb25zZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXR1czogNDAxLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi93YXRjaGxpc3QtYXV0b3N1Z2dlc3QvZmFjZXQtcXVlcnlcIixcbiAgICBhbGlhczogXCJhdXRvc3VnZ2VzdF93YXRjaGxpc3RfZmFjZXRfc2VhcmNoX3dhdGNobGlzdF9hdXRvc3VnZ2VzdF9mYWNldF9xdWVyeV9wb3N0XCIsXG4gICAgZGVzY3JpcHRpb246IGBBdXRvc3VnZ2VzdCBlbmRwb2ludCB0byByZXRyaWV2ZSBzdWdnZXN0aW9ucyBmcm9tIFZlc3BhIHdpdGggYSBmYWNldCBzZWFyY2ggcmVxdWVzdCBmcm9tIFVJLmAsXG4gICAgcmVxdWVzdEZvcm1hdDogXCJqc29uXCIsXG4gICAgcGFyYW1ldGVyczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImJvZHlcIixcbiAgICAgICAgdHlwZTogXCJCb2R5XCIsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXF1ZXN0LFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJlc3BvbnNlOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdFJlc3BvbnNlLFxuICAgIGVycm9yczogW1xuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQwMCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBCYWQgUmVxdWVzdGAsXG4gICAgICAgIHNjaGVtYTogc3RfYXV0b3N1Z2dlc3RfdmVzcGFfQmFkUmVxdWVzdEVycm9yLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA0MDEsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgVW5hdXRob3JpemVkYCxcbiAgICAgICAgc2NoZW1hOiB6XG4gICAgICAgICAgLm9iamVjdCh7IG1lc3NhZ2U6IHouc3RyaW5nKCkuZGVmYXVsdChcIlVzZXIgYXV0aGVudGljYXRpb24gZmFpbGVkXCIpIH0pXG4gICAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgc3RhdHVzOiA1MDAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSW50ZXJuYWwgU2VydmVyIEVycm9yYCxcbiAgICAgICAgc2NoZW1hOiBzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuICB7XG4gICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICBwYXRoOiBcIi93ZWJzb2NrZXQvXCIsXG4gICAgYWxpYXM6IFwid2Vic29ja2V0X3dlYnNvY2tldF9fcG9zdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBgVGhpcyByZXByZXNlbnRzIHRoZSB3ZWJzb2NrZXQgZW5kcG9pbnQgZm9yIHRoZSBjaGF0IHNlcnZpY2VgLFxuICAgIHJlcXVlc3RGb3JtYXQ6IFwianNvblwiLFxuICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJib2R5XCIsXG4gICAgICAgIHR5cGU6IFwiQm9keVwiLFxuICAgICAgICBzY2hlbWE6IHdlYnNvY2tldF93ZWJzb2NrZXRfX3Bvc3RfQm9keSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICByZXNwb25zZTogei51bmlvbihbXG4gICAgICBzdF9sbG1fY2hhdF9TdW1tYXJ5TmV4dEJsb2NrUmVzcG9uc2UsXG4gICAgICBzdF9sbG1fY2hhdF9TdW1tYXJ5Q29tcGxldGlvblJlc3BvbnNlLFxuICAgICAgc3RfbGxtX2NoYXRfU3VtbWFyeVNvdXJjZXNSZXNwb25zZSxcbiAgICAgIHN0X2xsbV9jaGF0X0F1ZGl0VHJhY2VSZXNwb25zZSxcbiAgICAgIHN0X2xsbV9jaGF0X1Byb2ZpbGluZ1Jlc3BvbnNlLFxuICAgICAgc3RfbGxtX2NoYXRfU3RhdHVzSW5mb1Jlc3BvbnNlLFxuICAgICAgc3RfbGxtX2NoYXRfU3RhdHVzUXVlcnlSZXNwb25zZSxcbiAgICAgIHN0X2xsbV9jaGF0X1N0YXR1c1Jlc2V0UmVzcG9uc2UsXG4gICAgICBzdF9sbG1fY2hhdF9TdGF0dXNTb3VyY2VzRmluaXNoZWRSZXNwb25zZSxcbiAgICBdKSxcbiAgfSxcbl0pXG5cbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgWm9kaW9zKGVuZHBvaW50cylcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFwaUNsaWVudChiYXNlVXJsOiBzdHJpbmcsIG9wdGlvbnM/OiBab2Rpb3NPcHRpb25zKSB7XG4gIHJldHVybiBuZXcgWm9kaW9zKGJhc2VVcmwsIGVuZHBvaW50cywgb3B0aW9ucylcbn1cbiJdLCJuYW1lcyI6WyJhcGkiLCJjcmVhdGVBcGlDbGllbnQiLCJzY2hlbWFzIiwic3RfYWdlbnRzX0Jhc2VGaWx0ZXJfc3RyXyIsInoiLCJvYmplY3QiLCJhbGxfb2YiLCJhcnJheSIsInN0cmluZyIsImFueV9vZiIsInBhcnRpYWwiLCJwYXNzdGhyb3VnaCIsInN0X2FnZW50c19EYXRlUmFuZ2UiLCJzdGFydCIsInVuaW9uIiwibnVsbCIsImVuZCIsInN0X2FnZW50c19TZW50aW1lbnRQb2xhcml0eSIsImVudW0iLCJzdF9hZ2VudHNfRG9jdW1lbnRJZEZpbHRlciIsInR5cGUiLCJkb2N1bWVudF9pZHMiLCJtaW4iLCJzdF9hZ2VudHNfVHJhbnNjcmlwdFN1YnR5cGUiLCJzdF9hZ2VudHNfRG9jdW1lbnRUcmFuc2NyaXB0RmlsdGVyIiwic3VidHlwZSIsIm9wdGlvbmFsIiwic3RfYWdlbnRzX0ZpbGluZ1N1YnR5cGUiLCJzdF9hZ2VudHNfRG9jdW1lbnRGaWxpbmdGaWx0ZXIiLCJzdF9hZ2VudHNfRG9jdW1lbnROZXdzRmlsdGVyIiwic3RfYWdlbnRzX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlciIsInN0X2FnZW50c19Qcm92aWRlckZpbHRlciIsInByb3ZpZGVyX2lkcyIsImRvY3VtZW50X3R5cGVzIiwic3RfYWdlbnRzX1NvdXJjZUZpbHRlciIsInNvdXJjZXNfaWRzIiwic3RfYWdlbnRzX0RvY3VtZW50VXNlckZpbGVGaWx0ZXIiLCJ0YWdzIiwic3RfYWdlbnRzX0RvY1R5cGVGaWx0ZXIiLCJzdF9hZ2VudHNfQ29udGVudEZpbHRlciIsInN0X2FnZW50c19RdWVyeUZpbHRlcnMiLCJlbnRpdGllcyIsImV2ZW50cyIsInBlcmlvZCIsInNlbnRpbWVudHMiLCJjb250ZW50Iiwic3RfYWdlbnRzX1NlYXJjaFRvb2xDb25maWciLCJxdWVyeV9maWx0ZXJzIiwic3RfYWdlbnRzX0ZldGNoVXJsVG9vbENvbmZpZyIsIm1heF9jaHVua3NfcGVyX2RvY3VtZW50IiwibnVtYmVyIiwiaW50IiwiZGVmYXVsdCIsIm1heF9xdWVyaWVzIiwic3RfYWdlbnRzX0NvbXBhbnlUZWFyc2hlZXRUb29sQ29uZmlnIiwic3RfYWdlbnRzX1JlZmxlY3RUb29sQ29uZmlnIiwic3RfYWdlbnRzX0FnZW50RXhlY3V0ZVJlcXVlc3QiLCJhY3Rpb24iLCJjaGF0SWQiLCJpbnB1dE1lc3NhZ2UiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0VHlwZSIsInRvb2xzQ29uZmlncyIsInJlY29yZCIsIm9ubHlTZWFyY2hBdWRpdCIsImJvb2xlYW4iLCJzdF9hZ2VudHNfQWN0aW9uV1NSZXNwb25zZSIsInRvb2xOYW1lIiwidG9vbEFyZ3VtZW50cyIsImFjdGlvbkF1ZGl0c0lkIiwic3RfYWdlbnRzX1RoaW5raW5nV1NSZXNwb25zZSIsInRleHQiLCJ0aGlua2luZ0lkIiwic3RfYWdlbnRzX0Fuc3dlcldTUmVzcG9uc2UiLCJhbnN3ZXJJZCIsInN0X2FnZW50c19FcnJvcldTUmVzcG9uc2UiLCJlcnJvciIsInN0X2FnZW50c19UcmFjZVF1ZXJ5IiwiZmlsdGVycyIsInN0X2FnZW50c19DaHVua1NlbnRlbmNlIiwicG51bSIsInNudW0iLCJzdF9hZ2VudHNfQm91bmRpbmdCb3giLCJib3R0b20iLCJsZWZ0IiwicGFnZSIsInJpZ2h0IiwidG9wIiwic3RfYWdlbnRzX1RyYWNlUmVzdWx0Q2h1bmsiLCJpZCIsImNudW0iLCJzZW50ZW5jZXMiLCJyZWxldmFuY2UiLCJib3VuZGluZ0JveGVzIiwic3RfYWdlbnRzX1RyYWNlUmVzdWx0Q1FTU3RvcnkiLCJkb2N1bWVudFNjb3BlIiwiaGQiLCJsYW5ndWFnZSIsImNodW5rcyIsInNyY0tleSIsInNyY05hbWUiLCJzb3VyY2VSYW5rIiwidHMiLCJjb250ZW50VHlwZSIsImRvY3VtZW50VHlwZSIsInVybCIsInJwUHJvdmlkZXJJZCIsInN0X2FnZW50c19BdWRpdFRyYWNlQ1FTUmVzdWx0IiwidmFsdWVzIiwic3RfYWdlbnRzX0V4dGVybmFsU291cmNlQWN0aW9uIiwibmFtZSIsIm1heCIsImZhdmljb25VcmwiLCJzdF9hZ2VudHNfRXh0ZXJuYWxUcmFjZVJlc3VsdCIsImRlc2NyaXB0aW9uIiwibWV0YWRhdGEiLCJzdF9hZ2VudHNfQXVkaXRUcmFjZUV4dGVybmFsUmVzdWx0Iiwic3RfYWdlbnRzX0F1ZGl0VHJhY2VFbmdpbmVBSVJlc3VsdCIsInNxbFF1ZXJ5Iiwic3RfYWdlbnRzX1NlYXJjaEF1ZGl0VjEiLCJhdWRpdFR5cGUiLCJ0b29sSWQiLCJxdWVyeSIsInF1ZXJ5SWQiLCJyZXN1bHRzIiwic3RfYWdlbnRzX01hcmtkb3duQXVkaXRWMSIsInRpdGxlIiwic3RfYWdlbnRzX0Jhc2VUb29sQXVkaXRUcmFjZSIsInN0X2FnZW50c19Ub29sQXVkaXRXU1Jlc3BvbnNlIiwidHJhY2UiLCJzdF9hZ2VudHNfQ29tcGxldGVXU1Jlc3BvbnNlIiwic3RfYWdlbnRzX0Vycm9yUmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwibWVzc2FnZSIsInN0X2FwaV9rZXlzX0dldEFwaUtleSIsInN0dWIiLCJ1c2VyX2lkIiwib3JnYW5pemF0aW9uX2lkIiwiZW5hYmxlZCIsImRhdGVfY3JlYXRlZCIsImxhc3RfdXBkYXRlZCIsImNyZWF0ZWRfYnkiLCJtb2RpZmllZF9ieSIsImxhc3RfdXNlZCIsInN0X2FwaV9rZXlzX0JhZFJlcXVlc3RFcnJvciIsInN0X2FwaV9rZXlzX0NyZWF0ZUFwaUtleSIsInN0X2FwaV9rZXlzX0NyZWF0ZWRBcGlLZXkiLCJrZXlfdmFsdWUiLCJzdF9hcGlfa2V5c19FcnJvclJlc3BvbnNlIiwic3RfYXBpX2tleXNfS2V5RW5hYmxlZCIsInN0X2FwaV9rZXlzX0tleURpc2FibGVkIiwic3RfYXBpX2tleXNfS2V5RGVsZXRlZCIsImxpbWl0Iiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXN1bHQiLCJrZXkiLCJlbnRpdHlUeXBlIiwicXVlcnlUeXBlIiwidHlwZURlc2MiLCJjYXRlZ29yeSIsImdyb3VwMSIsImdyb3VwMiIsImdyb3VwMyIsImdyb3VwNCIsImdyb3VwNSIsIm1ldGFkYXRhMSIsIm1ldGFkYXRhMiIsIm1ldGFkYXRhMyIsIm1ldGFkYXRhNCIsIm1ldGFkYXRhNSIsIm1ldGFkYXRhNiIsIm1ldGFkYXRhNyIsIm1ldGFkYXRhOCIsIm1ldGFkYXRhOSIsIm1ldGFkYXRhMTAiLCJ0aWNrZXIiLCJhbHROYW1lIiwicGFyZW50MSIsInJwUGFja2FnZUlkIiwiZW50aXRsZWQiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9BdXRvc3VnZ2VzdEZhY2V0IiwidmFsdWUiLCJjb3VudCIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0RmFjZXRzIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RSZXNwb25zZSIsImZhY2V0cyIsImV4cGxvcmF0aW9uVmFsdWVzIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfQmFkUmVxdWVzdEVycm9yIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfVW5hdXRob3JpemVkUmVzcG9uc2UiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9JbnRlcm5hbFNlcnZlclJlc3BvbnNlIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RGYWNldFF1ZXJ5IiwiZmllbGQiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Hcm91cGluZ0RldGFpbHMiLCJmYWNldFNlYXJjaFF1ZXJ5Iiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfV2F0Y2hsaXN0QXV0b3N1Z2dlc3RSZXF1ZXN0IiwicGVyUGFnZSIsImZhY2V0UXVlcnkiLCJncm91cGluZ0RldGFpbHMiLCJncm91cGluZ0V4cGxvcmF0aW9uIiwiZ3JvdXBpbmdGYWNldHMiLCJncm91cGluZ0ZhY2V0c1NlYXJjaCIsInNlYXJjaExpc3QiLCJzZWFyY2hCeUlkIiwic2VhcmNoQnlUaWNrZXIiLCJ3YXRjaGxpc3RSZXF1ZXN0IiwicXVlcnlSZXdyaXRpbmciLCJ0b3RhbFB1YmxpY1dlaWdodCIsInByZWZpeExlbmd0aCIsIm1heEVkaXREaXN0YW5jZSIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0UmVxdWVzdCIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0QmF0Y2hVcGxvYWRSZXF1ZXN0IiwiZmlsZSIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0NvbXBhbnlJbmZvIiwiaXNpbiIsImN1c2lwIiwic2Vkb2wiLCJsaXN0aW5nIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfQXV0b3N1Z2dlc3RFbnRpdGllc01hcHBlZCIsImNvbXBhbnlJbmZvIiwiZGF0YSIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0F1dG9zdWdnZXN0QmF0Y2hVcGxvYWRSZXNwb25zZV9JbnB1dCIsInRpbWVUYWtlbiIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX0Vycm9yQ2xpZW50UmVzcG9uc2UiLCJlcnJvckNvZGUiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9SZXRyaWV2YWxEZXRhaWxzIiwic2VhcmNoQnlOYW1lVGlja2VyIiwicmV0cmlldmFsU3RyYXRlZ3kiLCJ1c2VyQ29udGVudE93bmVyIiwidGltZW91dCIsInJlc3RyaWN0Iiwic2VhcmNoQ2hhaW4iLCJncm91cGluZ0RlZmF1bHRtYXhncm91cHMiLCJncm91cGluZ0RlZmF1bHRtYXhoaXRzIiwiZ3JvdXBpbmdHbG9iYWxtYXhncm91cHMiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9SYW5raW5nRGV0YWlscyIsInJhbmtpbmdNYXRjaHBoYXNlTWF4aGl0cyIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX1Zlc3BhUmVxdWVzdERldGFpbHMiLCJyZXRyaWV2YWxEZXRhaWxzIiwicmFua2luZ0RldGFpbHMiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Db250ZW50T3duZXIiLCJ1c2VySWQiLCJjb250ZW50QWNjZXNzUG9saWNpZXMiLCJzdF9hdXRvc3VnZ2VzdF92ZXNwYV9Qcml2YXRlV2F0Y2hsaXN0QXV0b3N1Z2dlc3RSZXF1ZXN0IiwiY29udGVudE93bmVyIiwic3RfYXV0b3N1Z2dlc3RfdmVzcGFfUHJpdmF0ZUF1dG9zdWdnZXN0UmVxdWVzdCIsInN0X2F1dG9zdWdnZXN0X3Zlc3BhX1ByaXZhdGVBdXRvc3VnZ2VzdEJhdGNoVXBsb2FkUmVxdWVzdCIsInBhY2thZ2VJZHMiLCJzb3VyY2VJZHMiLCJyZWdleCIsInN0X2JmZl9jb250ZW50X2NhdGFsb2dfUGFnaW5hdGlvbk1ldGFkYXRhIiwidG90YWwiLCJxdWVyeVRpbWUiLCJzdF9iZmZfY29udGVudF9jYXRhbG9nX1NvdXJjZU1vZGVsIiwiY2F0ZWdvcnlJZHMiLCJzdF9iZmZfY29udGVudF9jYXRhbG9nX0dlbmVyaWNQYWdpbmF0ZWRSZXNwb25zZV9Tb3VyY2VNb2RlbF8iLCJtZXRhIiwic3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19FcnJvclJlc3BvbnNlIiwic3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19Db250ZW50UGFja2FnZU1vZGVsIiwic2hvcnREZXNjcmlwdGlvbiIsImRldGFpbGVkRGVzY3JpcHRpb24iLCJhcHBFbmFibGVkIiwiYXBpRW5hYmxlZCIsImNhdGFsb2dFbmFibGVkIiwibG9nbyIsInNvdXJjZUNvdW50Iiwic3RfYmZmX2NvbnRlbnRfY2F0YWxvZ19HZW5lcmljUGFnaW5hdGVkUmVzcG9uc2VfQ29udGVudFBhY2thZ2VNb2RlbF8iLCJzdF9iZmZfZGF0YV90b29sc19CRkZSZXF1ZXN0IiwiZW50aXR5SWRzIiwic3RfYmZmX2RhdGFfdG9vbHNfUXVvdGVUb29sRGF0YSIsInByaWNlIiwiY2hhbmdlUGVyY2VudGFnZSIsImNoYW5nZSIsInZvbHVtZSIsImRheUxvdyIsImRheUhpZ2giLCJ5ZWFySGlnaCIsInllYXJMb3ciLCJtYXJrZXRDYXAiLCJwcmljZUF2ZzUwIiwicHJpY2VBdmcyMDAiLCJleGNoYW5nZSIsIm9wZW4iLCJwcmV2aW91c0Nsb3NlIiwidGltZXN0YW1wIiwiY3VycmVuY3kiLCJzdF9iZmZfZGF0YV90b29sc19RdW90ZURhdGFUb29sUmVzcG9uc2UiLCJyZXN1bHQiLCJzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRvb01hbnlSZXF1ZXN0cyIsInN0X2JmZl9kYXRhX3Rvb2xzX0Vycm9yUmVzcG9uc2UiLCJzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbUZhaWxlZEVycm9yIiwic3RfYmZmX2RhdGFfdG9vbHNfREJDb25uZWN0aW9uRXJyb3IiLCJzdF9iZmZfZGF0YV90b29sc19VcHN0cmVhbVRpbWVvdXRFcnJvciIsInN0X2JmZl9kYXRhX3Rvb2xzX0NoYW5nZVRvb2xEYXRhIiwieXRkIiwic3RfYmZmX2RhdGFfdG9vbHNfQ2hhbmdlRGF0YVRvb2xSZXNwb25zZSIsInN0X2JmZl9kYXRhX3Rvb2xzX0Vhcm5pbmdzU3VycHJpc2VEYXRhIiwicmVwb3J0aW5nRGF0ZSIsImVwc0FjdHVhbCIsImVwc0VzdGltYXRlZCIsInJldmVudWVBY3R1YWwiLCJyZXZlbnVlRXN0aW1hdGVkIiwibGFzdFVwZGF0ZWQiLCJlcHNTdXJwcmlzZVBjdCIsInJldmVudWVTdXJwcmlzZVBjdCIsInN0X2JmZl9kYXRhX3Rvb2xzX0Vhcm5pbmdzU3VycHJpc2VEYXRhVG9vbFJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfUmVjb21tZW5kYXRpb25Db25zZW5zdXMiLCJzdF9iZmZfZGF0YV90b29sc19BbmFseXN0VG9vbERhdGEiLCJzdHJvbmdCdXkiLCJidXkiLCJob2xkIiwic2VsbCIsInN0cm9uZ1NlbGwiLCJjb25zZW5zdXMiLCJzdF9iZmZfZGF0YV90b29sc19BbmFseXN0RGF0YVRvb2xSZXNwb25zZSIsInN0X2JmZl9kYXRhX3Rvb2xzX1ByaWNlVGFyZ2V0VG9vbERhdGEiLCJ0YXJnZXRIaWdoIiwidGFyZ2V0TG93IiwidGFyZ2V0Q29uc2Vuc3VzIiwidGFyZ2V0TWVkaWFuIiwic3RfYmZmX2RhdGFfdG9vbHNfUHJpY2VUYXJnZXREYXRhVG9vbFJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfU2VudGltZW50QkZGVG9vbERhdGEiLCJkYWlseVNlbnRpbWVudCIsInNlbnRpbWVudFByZXNzdXJlIiwiYWJub3JtYWxNZWRpYUF0dGVudGlvbiIsImRhdGUiLCJzdF9iZmZfZGF0YV90b29sc19TZW50aW1lbnRCRkZSZXNwb25zZSIsInN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlRvb2xEYXRhIiwicmVwb3J0ZWRDdXJyZW5jeSIsImNpayIsImZpbGluZ0RhdGUiLCJhY2NlcHRlZERhdGUiLCJmaXNjYWxZZWFyIiwicmV2ZW51ZSIsImNvc3RPZlJldmVudWUiLCJncm9zc1Byb2ZpdCIsInJlc2VhcmNoQW5kRGV2ZWxvcG1lbnRFeHBlbnNlcyIsImdlbmVyYWxBbmRBZG1pbmlzdHJhdGl2ZUV4cGVuc2VzIiwic2VsbGluZ0FuZE1hcmtldGluZ0V4cGVuc2VzIiwic2VsbGluZ0dlbmVyYWxBbmRBZG1pbmlzdHJhdGl2ZUV4cGVuc2VzIiwib3RoZXJFeHBlbnNlcyIsIm9wZXJhdGluZ0V4cGVuc2VzIiwiY29zdEFuZEV4cGVuc2VzIiwibmV0SW50ZXJlc3RJbmNvbWUiLCJpbnRlcmVzdEluY29tZSIsImludGVyZXN0RXhwZW5zZSIsImRlcHJlY2lhdGlvbkFuZEFtb3J0aXphdGlvbiIsImViaXRkYSIsImViaXQiLCJub25PcGVyYXRpbmdJbmNvbWVFeGNsdWRpbmdJbnRlcmVzdCIsIm9wZXJhdGluZ0luY29tZSIsInRvdGFsT3RoZXJJbmNvbWVFeHBlbnNlc05ldCIsImluY29tZUJlZm9yZVRheCIsImluY29tZVRheEV4cGVuc2UiLCJuZXRJbmNvbWVGcm9tQ29udGludWluZ09wZXJhdGlvbnMiLCJuZXRJbmNvbWVGcm9tRGlzY29udGludWVkT3BlcmF0aW9ucyIsIm90aGVyQWRqdXN0bWVudHNUb05ldEluY29tZSIsIm5ldEluY29tZSIsIm5ldEluY29tZURlZHVjdGlvbnMiLCJib3R0b21MaW5lTmV0SW5jb21lIiwiZXBzIiwiZXBzRGlsdXRlZCIsIndlaWdodGVkQXZlcmFnZVNoc091dCIsIndlaWdodGVkQXZlcmFnZVNoc091dERpbCIsInN0X2JmZl9kYXRhX3Rvb2xzX0luY29tZVN0YXRlbWVudEJGRlJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfQ2FzaEZsb3dTdGF0ZW1lbnRCRkZUb29sRGF0YSIsImRlZmVycmVkSW5jb21lVGF4Iiwic3RvY2tCYXNlZENvbXBlbnNhdGlvbiIsImNoYW5nZUluV29ya2luZ0NhcGl0YWwiLCJhY2NvdW50c1JlY2VpdmFibGVzIiwiaW52ZW50b3J5IiwiYWNjb3VudHNQYXlhYmxlcyIsIm90aGVyV29ya2luZ0NhcGl0YWwiLCJvdGhlck5vbkNhc2hJdGVtcyIsIm5ldENhc2hQcm92aWRlZEJ5T3BlcmF0aW5nQWN0aXZpdGllcyIsImludmVzdG1lbnRzSW5Qcm9wZXJ0eVBsYW50QW5kRXF1aXBtZW50IiwiYWNxdWlzaXRpb25zTmV0IiwicHVyY2hhc2VzT2ZJbnZlc3RtZW50cyIsInNhbGVzTWF0dXJpdGllc09mSW52ZXN0bWVudHMiLCJvdGhlckludmVzdGluZ0FjdGl2aXRpZXMiLCJuZXRDYXNoUHJvdmlkZWRCeUludmVzdGluZ0FjdGl2aXRpZXMiLCJuZXREZWJ0SXNzdWFuY2UiLCJsb25nVGVybU5ldERlYnRJc3N1YW5jZSIsInNob3J0VGVybU5ldERlYnRJc3N1YW5jZSIsIm5ldFN0b2NrSXNzdWFuY2UiLCJuZXRDb21tb25TdG9ja0lzc3VhbmNlIiwiY29tbW9uU3RvY2tJc3N1YW5jZSIsImNvbW1vblN0b2NrUmVwdXJjaGFzZWQiLCJuZXRQcmVmZXJyZWRTdG9ja0lzc3VhbmNlIiwibmV0RGl2aWRlbmRzUGFpZCIsImNvbW1vbkRpdmlkZW5kc1BhaWQiLCJwcmVmZXJyZWREaXZpZGVuZHNQYWlkIiwib3RoZXJGaW5hbmNpbmdBY3Rpdml0aWVzIiwibmV0Q2FzaFByb3ZpZGVkQnlGaW5hbmNpbmdBY3Rpdml0aWVzIiwiZWZmZWN0T2ZGb3JleENoYW5nZXNPbkNhc2giLCJuZXRDaGFuZ2VJbkNhc2giLCJjYXNoQXRFbmRPZlBlcmlvZCIsImNhc2hBdEJlZ2lubmluZ09mUGVyaW9kIiwib3BlcmF0aW5nQ2FzaEZsb3ciLCJjYXBpdGFsRXhwZW5kaXR1cmUiLCJmcmVlQ2FzaEZsb3ciLCJpbmNvbWVUYXhlc1BhaWQiLCJpbnRlcmVzdFBhaWQiLCJzdF9iZmZfZGF0YV90b29sc19DYXNoRmxvd1N0YXRlbWVudEJGRlJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfQmFsYW5jZVN0YXRlbWVudEJGRlRvb2xEYXRhIiwiY2FzaEFuZENhc2hFcXVpdmFsZW50cyIsInNob3J0VGVybUludmVzdG1lbnRzIiwiY2FzaEFuZFNob3J0VGVybUludmVzdG1lbnRzIiwibmV0UmVjZWl2YWJsZXMiLCJvdGhlclJlY2VpdmFibGVzIiwicHJlcGFpZHMiLCJvdGhlckN1cnJlbnRBc3NldHMiLCJ0b3RhbEN1cnJlbnRBc3NldHMiLCJwcm9wZXJ0eVBsYW50RXF1aXBtZW50TmV0IiwiZ29vZHdpbGwiLCJpbnRhbmdpYmxlQXNzZXRzIiwiZ29vZHdpbGxBbmRJbnRhbmdpYmxlQXNzZXRzIiwibG9uZ1Rlcm1JbnZlc3RtZW50cyIsInRheEFzc2V0cyIsIm90aGVyTm9uQ3VycmVudEFzc2V0cyIsInRvdGFsTm9uQ3VycmVudEFzc2V0cyIsIm90aGVyQXNzZXRzIiwidG90YWxBc3NldHMiLCJ0b3RhbFBheWFibGVzIiwiYWNjb3VudFBheWFibGVzIiwib3RoZXJQYXlhYmxlcyIsImFjY3J1ZWRFeHBlbnNlcyIsInNob3J0VGVybURlYnQiLCJjYXBpdGFsTGVhc2VPYmxpZ2F0aW9uc0N1cnJlbnQiLCJ0YXhQYXlhYmxlcyIsImRlZmVycmVkUmV2ZW51ZSIsIm90aGVyQ3VycmVudExpYWJpbGl0aWVzIiwidG90YWxDdXJyZW50TGlhYmlsaXRpZXMiLCJsb25nVGVybURlYnQiLCJjYXBpdGFsTGVhc2VPYmxpZ2F0aW9uc05vbkN1cnJlbnQiLCJkZWZlcnJlZFJldmVudWVOb25DdXJyZW50IiwiZGVmZXJyZWRUYXhMaWFiaWxpdGllc05vbkN1cnJlbnQiLCJvdGhlck5vbkN1cnJlbnRMaWFiaWxpdGllcyIsInRvdGFsTm9uQ3VycmVudExpYWJpbGl0aWVzIiwib3RoZXJMaWFiaWxpdGllcyIsImNhcGl0YWxMZWFzZU9ibGlnYXRpb25zIiwidG90YWxMaWFiaWxpdGllcyIsInRyZWFzdXJ5U3RvY2siLCJwcmVmZXJyZWRTdG9jayIsImNvbW1vblN0b2NrIiwicmV0YWluZWRFYXJuaW5ncyIsImFkZGl0aW9uYWxQYWlkSW5DYXBpdGFsIiwiYWNjdW11bGF0ZWRPdGhlckNvbXByZWhlbnNpdmVJbmNvbWVMb3NzIiwib3RoZXJUb3RhbFN0b2NraG9sZGVyc0VxdWl0eSIsInRvdGFsU3RvY2tob2xkZXJzRXF1aXR5IiwidG90YWxFcXVpdHkiLCJtaW5vcml0eUludGVyZXN0IiwidG90YWxMaWFiaWxpdGllc0FuZFRvdGFsRXF1aXR5IiwidG90YWxJbnZlc3RtZW50cyIsInRvdGFsRGVidCIsIm5ldERlYnQiLCJzdF9iZmZfZGF0YV90b29sc19CYWxhbmNlU3RhdGVtZW50QkZGUmVzcG9uc2UiLCJzdF9iZmZfZGF0YV90b29sc19LZXlNZXRyaWNzVG9vbERhdGEiLCJlbnRlcnByaXNlVmFsdWVUdG0iLCJldlRvU2FsZXNUdG0iLCJldlRvT3BlcmF0aW5nQ2FzaEZsb3dUdG0iLCJldlRvRnJlZUNhc2hGbG93VHRtIiwiZXZUb0ViaXRkYVR0bSIsIm5ldERlYnRUb0ViaXRkYVR0bSIsImN1cnJlbnRSYXRpb1R0bSIsImluY29tZVF1YWxpdHlUdG0iLCJncmFoYW1OdW1iZXJUdG0iLCJncmFoYW1OZXROZXRUdG0iLCJ0YXhCdXJkZW5UdG0iLCJpbnRlcmVzdEJ1cmRlblR0bSIsIndvcmtpbmdDYXBpdGFsVHRtIiwiaW52ZXN0ZWRDYXBpdGFsVHRtIiwicmV0dXJuT25Bc3NldHNUdG0iLCJvcGVyYXRpbmdSZXR1cm5PbkFzc2V0c1R0bSIsInJldHVybk9uVGFuZ2libGVBc3NldHNUdG0iLCJyZXR1cm5PbkVxdWl0eVR0bSIsInJldHVybk9uSW52ZXN0ZWRDYXBpdGFsVHRtIiwicmV0dXJuT25DYXBpdGFsRW1wbG95ZWRUdG0iLCJlYXJuaW5nc1lpZWxkVHRtIiwiZnJlZUNhc2hGbG93WWllbGRUdG0iLCJjYXBleFRvT3BlcmF0aW5nQ2FzaEZsb3dUdG0iLCJjYXBleFRvRGVwcmVjaWF0aW9uVHRtIiwiY2FwZXhUb1JldmVudWVUdG0iLCJzYWxlc0dlbmVyYWxBbmRBZG1pblRvUmV2ZW51ZVR0bSIsInJlc2VhcmNoQW5kRGV2ZWxvcG1lbnRUb1JldmVudWVUdG0iLCJzdG9ja0Jhc2VkQ29tcGVuc2F0aW9uVG9SZXZlbnVlVHRtIiwiaW50YW5naWJsZXNUb1RvdGFsQXNzZXRzVHRtIiwiYXZlcmFnZVJlY2VpdmFibGVzVHRtIiwiYXZlcmFnZVBheWFibGVzVHRtIiwiYXZlcmFnZUludmVudG9yeVR0bSIsImRheXNPZlNhbGVzT3V0c3RhbmRpbmdUdG0iLCJkYXlzT2ZQYXlhYmxlc091dHN0YW5kaW5nVHRtIiwiZGF5c09mSW52ZW50b3J5T3V0c3RhbmRpbmdUdG0iLCJvcGVyYXRpbmdDeWNsZVR0bSIsImNhc2hDb252ZXJzaW9uQ3ljbGVUdG0iLCJmcmVlQ2FzaEZsb3dUb0VxdWl0eVR0bSIsImZyZWVDYXNoRmxvd1RvRmlybVR0bSIsInRhbmdpYmxlQXNzZXRWYWx1ZVR0bSIsIm5ldEN1cnJlbnRBc3NldFZhbHVlVHRtIiwic3RfYmZmX2RhdGFfdG9vbHNfS2V5TWV0cmljc0RhdGFUb29sUmVzcG9uc2UiLCJzdF9iZmZfZGF0YV90b29sc19SYXRpb3NUb29sRGF0YSIsImdyb3NzUHJvZml0TWFyZ2luVHRtIiwiZWJpdE1hcmdpblR0bSIsImViaXRkYU1hcmdpblR0bSIsIm9wZXJhdGluZ1Byb2ZpdE1hcmdpblR0bSIsInByZXRheFByb2ZpdE1hcmdpblR0bSIsImNvbnRpbnVvdXNPcGVyYXRpb25zUHJvZml0TWFyZ2luVHRtIiwibmV0UHJvZml0TWFyZ2luVHRtIiwiYm90dG9tTGluZVByb2ZpdE1hcmdpblR0bSIsInJlY2VpdmFibGVzVHVybm92ZXJUdG0iLCJwYXlhYmxlc1R1cm5vdmVyVHRtIiwiaW52ZW50b3J5VHVybm92ZXJUdG0iLCJmaXhlZEFzc2V0VHVybm92ZXJUdG0iLCJhc3NldFR1cm5vdmVyVHRtIiwicXVpY2tSYXRpb1R0bSIsInNvbHZlbmN5UmF0aW9UdG0iLCJjYXNoUmF0aW9UdG0iLCJwcmljZVRvRWFybmluZ3NSYXRpb1R0bSIsInByaWNlVG9FYXJuaW5nc0dyb3d0aFJhdGlvVHRtIiwiZm9yd2FyZFByaWNlVG9FYXJuaW5nc0dyb3d0aFJhdGlvVHRtIiwicHJpY2VUb0Jvb2tSYXRpb1R0bSIsInByaWNlVG9TYWxlc1JhdGlvVHRtIiwicHJpY2VUb0ZyZWVDYXNoRmxvd1JhdGlvVHRtIiwicHJpY2VUb09wZXJhdGluZ0Nhc2hGbG93UmF0aW9UdG0iLCJkZWJ0VG9Bc3NldHNSYXRpb1R0bSIsImRlYnRUb0VxdWl0eVJhdGlvVHRtIiwiZGVidFRvQ2FwaXRhbFJhdGlvVHRtIiwibG9uZ1Rlcm1EZWJ0VG9DYXBpdGFsUmF0aW9UdG0iLCJmaW5hbmNpYWxMZXZlcmFnZVJhdGlvVHRtIiwid29ya2luZ0NhcGl0YWxUdXJub3ZlclJhdGlvVHRtIiwib3BlcmF0aW5nQ2FzaEZsb3dSYXRpb1R0bSIsIm9wZXJhdGluZ0Nhc2hGbG93U2FsZXNSYXRpb1R0bSIsImZyZWVDYXNoRmxvd09wZXJhdGluZ0Nhc2hGbG93UmF0aW9UdG0iLCJkZWJ0U2VydmljZUNvdmVyYWdlUmF0aW9UdG0iLCJpbnRlcmVzdENvdmVyYWdlUmF0aW9UdG0iLCJzaG9ydFRlcm1PcGVyYXRpbmdDYXNoRmxvd0NvdmVyYWdlUmF0aW9UdG0iLCJvcGVyYXRpbmdDYXNoRmxvd0NvdmVyYWdlUmF0aW9UdG0iLCJjYXBpdGFsRXhwZW5kaXR1cmVDb3ZlcmFnZVJhdGlvVHRtIiwiZGl2aWRlbmRQYWlkQW5kQ2FwZXhDb3ZlcmFnZVJhdGlvVHRtIiwiZGl2aWRlbmRQYXlvdXRSYXRpb1R0bSIsImRpdmlkZW5kWWllbGRUdG0iLCJyZXZlbnVlUGVyU2hhcmVUdG0iLCJuZXRJbmNvbWVQZXJTaGFyZVR0bSIsImludGVyZXN0RGVidFBlclNoYXJlVHRtIiwiY2FzaFBlclNoYXJlVHRtIiwiYm9va1ZhbHVlUGVyU2hhcmVUdG0iLCJ0YW5naWJsZUJvb2tWYWx1ZVBlclNoYXJlVHRtIiwic2hhcmVob2xkZXJzRXF1aXR5UGVyU2hhcmVUdG0iLCJvcGVyYXRpbmdDYXNoRmxvd1BlclNoYXJlVHRtIiwiY2FwZXhQZXJTaGFyZVR0bSIsImZyZWVDYXNoRmxvd1BlclNoYXJlVHRtIiwibmV0SW5jb21lUGVyRWJ0VHRtIiwiZWJ0UGVyRWJpdFR0bSIsInByaWNlVG9GYWlyVmFsdWVUdG0iLCJkZWJ0VG9NYXJrZXRDYXBUdG0iLCJlZmZlY3RpdmVUYXhSYXRlVHRtIiwiZW50ZXJwcmlzZVZhbHVlTXVsdGlwbGVUdG0iLCJkaXZpZGVuZFBlclNoYXJlVHRtIiwic3RfYmZmX2RhdGFfdG9vbHNfUmF0aW9zRGF0YVRvb2xSZXNwb25zZSIsInN0X2JmZl9kYXRhX3Rvb2xzX0N1cnJlbmN5VG9vbERhdGEiLCJjb21wYW55TmFtZSIsInRyYWRpbmdDdXJyZW5jeSIsInJlcG9ydGluZ0N1cnJlbmN5Iiwic3RfYmZmX2RhdGFfdG9vbHNfQ3VycmVuY3lEYXRhVG9vbFJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfUGx1c1Njb3JlcyIsInBsdXNCbWlCbXJTY29yZSIsInBsdXNCbWlNc2VTY29yZSIsInBsdXNCbWlQZGxtU2NvcmUiLCJwbHVzQm1pUGljY1Njb3JlIiwicGx1c0JtaVNjbVNjb3JlIiwicGx1c0VBcVNjb3JlIiwicGx1c0VFaVNjb3JlIiwicGx1c0VFbVNjb3JlIiwicGx1c0VHaGdlU2NvcmUiLCJwbHVzRVdobW1TY29yZSIsInBsdXNFV3dtU2NvcmUiLCJwbHVzSGNFZWRpU2NvcmUiLCJwbHVzSGNFaHNTY29yZSIsInBsdXNIY0xwU2NvcmUiLCJwbHVzTGdCZVNjb3JlIiwicGx1c0xnQ2JTY29yZSIsInBsdXNMZ0Npcm1TY29yZSIsInBsdXNMZ01scmVTY29yZSIsInBsdXNMZ1NybVNjb3JlIiwicGx1c1NjQWFTY29yZSIsInBsdXNTY0NwU2NvcmUiLCJwbHVzU2NDd1Njb3JlIiwicGx1c1NjRHNTY29yZSIsInBsdXNTY0hyY3JTY29yZSIsInBsdXNTY1Bxc1Njb3JlIiwicGx1c1NjU3BwbFNjb3JlIiwic3RfYmZmX2RhdGFfdG9vbHNfUGVyZm9ybWFuY2VTY29yZXMiLCJlc2dBdmVyYWdlU2NvcmUiLCJlbnZpcm9ubWVudGFsU2NvcmUiLCJnb3Zlcm5hbmNlU2NvcmUiLCJwbHVzU2NvcmVzIiwic29jaWFsU2NvcmUiLCJzdF9iZmZfZGF0YV90b29sc19FU0dTY29yZURhdGEiLCJhc3NldElkIiwiZWNvbm9taWNTZWN0b3IiLCJpbmR1c3RyeSIsInBlcmZvcm1hbmNlU2NvcmVzIiwic3RfYmZmX2RhdGFfdG9vbHNfRVNHU2NvcmVEYXRhVG9vbFJlc3BvbnNlIiwic3RfYmZmX2RhdGFfdG9vbHNfQ3VzdG9tRGF0YVZpZXdDb2x1bW4iLCJlbmRwb2ludCIsImNvbHVtbktleSIsInN0X2JmZl9kYXRhX3Rvb2xzX0N1c3RvbURhdGFWaWV3UmVzcG9uc2UiLCJjb2x1bW5zIiwiY3JlYXRlZEF0IiwiZGF0ZXRpbWUiLCJvZmZzZXQiLCJ1cGRhdGVkQXQiLCJzdF9iZmZfZGF0YV90b29sc19DdXN0b21EYXRhVmlld0xpc3RSZXNwb25zZSIsInN0X2JmZl9kYXRhX3Rvb2xzX0NyZWF0ZUN1c3RvbURhdGFWaWV3UmVxdWVzdCIsInN0X2JmZl9kYXRhX3Rvb2xzX1VwZGF0ZUN1c3RvbURhdGFWaWV3UmVxdWVzdCIsInN0X2JyaWVmc19EZWxpdmVyeURlc3RpbmF0aW9uIiwibGl0ZXJhbCIsInN0X2JyaWVmc19XZWVrRGF5Iiwic3RfYnJpZWZzX1NjaGVkdWxlIiwiZGF5cyIsInRpbWV6b25lIiwiaG91ciIsIm1pbnV0ZSIsInN0X2JyaWVmc19CcmllZkNvbmZpZ1Jlc3BvbnNlX0lucHV0IiwiYnJpZWZOYW1lIiwid2F0Y2hsaXN0SWRzIiwiZGVsaXZlcnlNb2RlcyIsInNjaGVkdWxlIiwiZW1haWwiLCJkYXRlQ3JlYXRlZCIsIm92ZXJ2aWV3Iiwic3RfYnJpZWZzX0xpc3RCcmllZkNvbmZpZ3NSZXNwb25zZV9JbnB1dCIsInN0X2JyaWVmc19FcnJvclJlc3BvbnNlIiwic3RfYnJpZWZzX0JyaWVmQ29uZmlnUGF5bG9hZCIsInN0X2JyaWVmc19CcmllZlJlcG9ydEVudGl0eUluZm8iLCJjb21wYW55VHlwZSIsImNvdW50cnkiLCJzZWN0b3IiLCJpbmR1c3RyeUdyb3VwIiwic3RfYnJpZWZzX1NpbmdsZUVudGl0eVJlcG9ydCIsImVudGl0eUlkIiwiZW50aXR5SW5mbyIsImNsZWFuRmluYWxSZXBvcnQiLCJzdF9icmllZnNfQ2h1bmtIaWdobGlnaHQiLCJzdF9icmllZnNfU291cmNlUmVmZXJlbmNlIiwicmVmSWQiLCJkb2N1bWVudElkIiwiaGVhZGxpbmUiLCJzb3VyY2VLZXkiLCJzb3VyY2VOYW1lIiwiY2h1bmtJZCIsImhpZ2hsaWdodHMiLCJpbWFnZVVybCIsInN0X2JyaWVmc19SZXBvcnRTb3VyY2VzX0lucHV0Iiwic3RfYnJpZWZzX0JyaWVmUmVwb3J0UmVzcG9uc2VfSW5wdXQiLCJ3YXRjaGxpc3RJZCIsIndhdGNobGlzdE5hbWUiLCJyZXBvcnRUaXRsZSIsInJlcG9ydERhdGUiLCJpbnRyb2R1Y3Rpb24iLCJlbnRpdHlSZXBvcnRzIiwicmVwb3J0SWQiLCJicmllZklkIiwiaXNFbXB0eSIsInNvdXJjZXMiLCJzdF9icmllZnNfTGF0ZXN0QnJpZWZSZXBvcnRSZXNwb25zZV9JbnB1dCIsInJlcG9ydCIsIm5leHRSZXBvcnREYXRlIiwic3RfYnJpZWZzX0xpc3RCcmllZlJlcG9ydHNSZXNwb25zZV9JbnB1dCIsInN0X2Nxc19TaW1pbGFyaXR5RXhwcmVzc2lvbiIsIm9wZXJhdGlvbiIsInN0X2Nxc19MaXN0T3BlcmF0aW9uRW51bSIsInN0X2Nxc19LZXl3b3JkRXhwcmVzc2lvbiIsInN0X2Nxc19FbnRpdHlFeHByZXNzaW9uIiwiZG9jdW1lbnQiLCJzdF9jcXNfTGFuZ3VhZ2VFeHByZXNzaW9uIiwic3RfY3FzX1NvdXJjZUV4cHJlc3Npb24iLCJzdF9jcXNfUlBUb3BpY0V4cHJlc3Npb24iLCJzdF9jcXNfRGF0ZU9wZXJhdGlvbkVudW0iLCJzdF9jcXNfRGF0ZUludGVydmFsIiwic3RfY3FzX0RhdGVJbnRlcnZhbEV4cHJlc3Npb24iLCJzdF9jcXNfVGFnc0V4cHJlc3Npb24iLCJzdF9jcXNfTWFjcm9Db21wYW5pZXNFeHByZXNzaW9uIiwic3RfY3FzX01hY3JvT3JnYW5pemF0aW9uc0V4cHJlc3Npb24iLCJzdF9jcXNfTWFjcm9Db25jZXB0c0V4cHJlc3Npb24iLCJzdF9jcXNfTWFjcm9QZW9wbGVFeHByZXNzaW9uIiwic3RfY3FzX01hY3JvUGxhY2VzRXhwcmVzc2lvbiIsInN0X2Nxc19NYWNyb1Byb2R1Y3RzRXhwcmVzc2lvbiIsInN0X2Nxc19NYWNyb1RvcGljc0V4cHJlc3Npb24iLCJzdF9jcXNfRG9jdW1lbnRFeHByZXNzaW9uIiwic3RfY3FzX1NlY3Rpb25NZXRhZGF0YUV4cHJlc3Npb24iLCJzdF9jcXNfRG9jdW1lbnRUeXBlRXhwcmVzc2lvbiIsInN0X2Nxc19SZXBvcnRpbmdQZXJpb2RFeHByZXNzaW9uIiwic3RfY3FzX1JlcG9ydGluZ0VudGl0eUV4cHJlc3Npb24iLCJzdF9jcXNfU2VudGltZW50UmFuZ2VFeHByZXNzaW9uIiwiZ3RlIiwibHRlIiwic3RfY3FzX1JQRG9jdW1lbnRTdWJ0eXBlVHlwZUV4cHJlc3Npb24iLCJzdF9jcXNfUlBEb2N1bWVudFZlcnNpb25FeHByZXNzaW9uIiwic3RfY3FzX1JQRG9jdW1lbnRUeXBlRXhwcmVzc2lvbiIsInN0X2Nxc19SUFByb3ZpZGVyRXhwcmVzc2lvbiIsInN0X2Nxc19PckV4cHJlc3Npb24iLCJsYXp5Iiwic3RfY3FzX05vdEV4cHJlc3Npb24iLCJzdF9jcXNfQW5kRXhwcmVzc2lvbiIsInN0X2Nxc19TZW50ZW5jZUxhYmVsIiwic3RfY3FzX0lucHV0U2VudGVuY2UiLCJsYWJlbCIsInN0X2Nxc19TY29wZSIsInN0X2Nxc19Tb3J0RW51bSIsInN0X2Nxc19SYW5raW5nIiwic3RfY3FzX0NRU1NlYXJjaEN1cnNvclBhZ2luYXRpb24iLCJndCIsImx0IiwiY3Vyc29yIiwic3RfY3FzX0NRU1NlYXJjaE9mZnNldFBhZ2luYXRpb24iLCJzdF9jcXNfQ1FTQ2x1c3RlcmluZ1BhcmFtcyIsInRocmVzaG9sZCIsImNsdXN0ZXJXZWlnaHQiLCJkZWJ1ZyIsInN0X2Nxc19TZWFyY2hDaGFpbiIsInN0X2Nxc19SUFhRdWVyeSIsImV4cHJlc3Npb24iLCJhbnkiLCJzY29wZSIsInNvcnQiLCJyYW5raW5nIiwicGFnaW5hdGlvbiIsInVua25vd24iLCJjbHVzdGVyaW5nUGFyYW1zIiwicmVyYW5rVGhyZXNob2xkIiwiaHlicmlkIiwicmVyYW5rRnJlc2huZXNzV2VpZ2h0Iiwic3RfY3FzX1Zlc3BhQ292ZXJhZ2VNZXRyaWNzIiwiY292ZXJhZ2UiLCJkb2N1bWVudHMiLCJmdWxsIiwibm9kZXMiLCJyZXN1bHRzRnVsbCIsInN0X2Nxc19WZXNwYVRpbWVNZXRyaWNzIiwicXVlcnl0aW1lIiwic3VtbWFyeWZldGNodGltZSIsInNlYXJjaHRpbWUiLCJzdF9jcXNfUXVlcnlSZWxhdGlvbnNoaXAiLCJzdF9jcXNfRGlzY292ZXJ5UGFuZWxJdGVtIiwicGFyZW50MiIsInBhcmVudDMiLCJmbGFnIiwicHVibGljYXRpb25UeXBlIiwicXVlcnlSZWxhdGlvbnNoaXAiLCJzdF9jcXNfRGlzY292ZXJ5UGFuZWxHcm91cFJlc3BvbnNlIiwidGltaW5nIiwicGxhY2VzIiwiY29tcGFuaWVzIiwib3JnYW5pemF0aW9ucyIsImxhbmd1YWdlcyIsInBlb3BsZSIsInByb2R1Y3RzIiwiY29uY2VwdHMiLCJ0b3BpY3MiLCJ5cWwiLCJzdF9jcXNfQmFkUmVxdWVzdEVycm9yIiwic3RfY3FzX0VudGl0eUNvb3JkaW5hdGUiLCJzdF9jcXNfU2VudGVuY2UiLCJkZWR1cGxpY2F0aW9uQ291bnQiLCJzZW50aW1lbnQiLCJzdF9jcXNfQ2h1bmtTZW50ZW5jZSIsInN0X2Nxc19Cb3VuZGluZ0JveCIsInN0X2Nxc19DaHVuayIsInNlY3Rpb25NZXRhZGF0YSIsInNwZWFrZXIiLCJzdF9jcXNfQ2x1c3RlclN1bW1hcnkiLCJuVW5pcXVlU2VudGVuY2VzIiwiblRvdGFsU2VudGVuY2VzIiwic3RfY3FzX1N0b3J5IiwiZG9jdHlwZSIsInNlbnQiLCJzdW1tYXJ5RmVhdHVyZXMiLCJyYW5rRmVhdHVyZXMiLCJjb21wdXRlZFJlbGV2YW5jZSIsImNsdXN0ZXIiLCJjbHVzdGVyU3VtbWFyeSIsImNsdXN0ZXJEZXRhaWxzIiwicmVwb3J0aW5nRW50aXRpZXMiLCJyZXBvcnRpbmdQZXJpb2QiLCJzdF9jcXNfQ2x1c3RlckdlbmVyYWxNZXRyaWNzIiwiaW50cmFDbHVzdGVyVmFyaWFuY2UiLCJpbnRlckNsdXN0ZXJPdmVybGFwIiwic2lsaG91ZXR0ZVNjb3JlIiwic3RfY3FzX1RyYWluaW5nU3RhdGlzdGljcyIsImFjY3VyYWN5R2FtaWZpZWRQZXJmb3JtYW5jZSIsImFjY3VyYWN5IiwiYXVjIiwicHJlY2lzaW9uIiwiYWNjdXJhY3lTdGQiLCJhY2N1cmFjeUhpc3RvZ3JhbSIsInN0X2Nxc19TZWFyY2hSZXNwb25zZURldGVjdGlvbiIsInN0X2Nxc19TZWFyY2hSZXNwb25zZSIsImRvY3VtZW50Q291bnQiLCJuZXh0Q3Vyc29yIiwic3RvcmllcyIsImNsdXN0ZXJNZXRyaWNzIiwidHJhaW5pbmdfc3RhdGlzdGljcyIsImRldGVjdGlvbnMiLCJpbWFnZVVybHMiLCJjaHVua3NDb3VudCIsInN0X2Nxc19FbnRpdHkiLCJzdF9jcXNfUmVwb3J0aW5nIiwieWVhciIsInF1YXJ0ZXIiLCJmaXNjYWwiLCJzdF9jcXNfUGVyaW9kIiwicmVwb3J0aW5nIiwic3RfY3FzX1F1ZXJ5TWV0YWRhdGEiLCJwZXJzb25hIiwic3RfY3FzX0JvZHlfYW5ub3RhdGVfcXVlcnlfY3FzX2Fubm90YXRlX3F1ZXJ5X3Bvc3QiLCJib2R5IiwidGltZXN0YW1wX3V0YyIsInN0X2Nxc19SZXNwb25zZSIsInN0X2Nxc19SYW5raW5nUmVzcG9uc2UiLCJzdF9jcXNfTGFuZ3VhZ2VSZXNwb25zZSIsInN0X2Nxc19MYW5ndWFnZXNMaXN0UmVzcG9uc2UiLCJzdF9jcXNfU3VnZ2VzdGlvblR5cGVzIiwic3RfY3FzX1N1Z2dlc3Rpb25JdGVtIiwic3RfY3FzX0Rpc2NvdmVyeVBhbmVsSXRlbXNCeUlkc1Jlc3BvbnNlIiwic3RfY3FzX0lzaW5WYWx1ZXMiLCJzdF9jcXNfQ3VzaXBWYWx1ZXMiLCJzdF9jcXNfU2Vkb2xWYWx1ZXMiLCJzdF9jcXNfTGlzdGluZ1ZhbHVlcyIsInN0X2RvY3VtZW50c19TaW1wbGlmaWVkU291cmNlIiwicnBfc291cmNlX2lkIiwicmFuayIsInN0X2RvY3VtZW50c19TaW1wbGlmaWVkVGltZXN0YW1wc1VUQyIsInB1Ymxpc2hlZCIsInJlY2VwdGlvbiIsImFuYWx5dGljcyIsInJldmlzaW9uIiwic3RfZG9jdW1lbnRzX1NpbXBsaWZpZWRNZXRhZGF0YSIsIm9yaWdpbmFsX2xhbmd1YWdlIiwic3RfZG9jdW1lbnRzX1NpbXBsaWZpZWREb2N1bWVudCIsInJwX2RvY3VtZW50X2lkIiwic291cmNlIiwidGltZXN0YW1wc191dGMiLCJzdF9kb2N1bWVudHNfQ29udGVudFN0YXRzIiwiYnl0ZV9jb3VudCIsIndvcmRfY291bnQiLCJleHRyYWN0aW9uX2J5dGVfY291bnQiLCJzdF9kb2N1bWVudHNfVGV4dFR5cGVFbnVtIiwic3RfZG9jdW1lbnRzX05vcm1hbGl6ZWRDb29yZGluYXRlcyIsInN0X2RvY3VtZW50c19NYXJrZXJzU2NyaXB0Iiwic3RfZG9jdW1lbnRzX01hcmtlcnMiLCJzdXBlcl9zY3JpcHQiLCJzdWJfc2NyaXB0Iiwic3RfZG9jdW1lbnRzX0ZhY3RzZXRUcmFuc2NyaXB0VGV4dCIsInNlY3Rpb25fbmFtZSIsInNwZWFrZXJfaWQiLCJzcGVlY2hfdHlwZSIsInN0X2RvY3VtZW50c19TZWNBdHRyaWJ1dGVzVGV4dCIsImRvY3VtZW50X3R5cGUiLCJmaWxlX25hbWUiLCJzZXF1ZW5jZSIsInN0X2RvY3VtZW50c19TZWN0aW9uIiwic3RfZG9jdW1lbnRzX1NlbnRlbmNlIiwic2VudGltZW50X2NvbmZpZGVuY2UiLCJzdF9kb2N1bWVudHNfVGV4dEV2ZW50IiwiZXZlbnRfc2ltaWxhcml0eV9rZXkiLCJzdF9kb2N1bWVudHNfVGV4dEVudGl0eSIsInJwX2VudGl0eV9pZCIsInN0X2RvY3VtZW50c19UZXh0QmxvY2siLCJub3JtYWxpemVkX2Nvb3JkaW5hdGVzIiwibWFya2VycyIsImF0dHJpYnV0ZXMiLCJzZWN0aW9ucyIsInN0X2RvY3VtZW50c19UYWJsZUNlbGxUeXBlIiwic3RfZG9jdW1lbnRzX0xpc3RUeXBlIiwic3RfZG9jdW1lbnRzX0xpc3RFbnRyeSIsInN0X2RvY3VtZW50c19UYWJsZUJsb2NrIiwic3RfZG9jdW1lbnRzX0xpc3RCbG9jayIsImVudHJpZXMiLCJzdF9kb2N1bWVudHNfVGFibGVDZWxsIiwicm93c3BhbiIsImNvbHNwYW4iLCJzdF9kb2N1bWVudHNfVGFibGVSb3ciLCJjZWxscyIsInJvd3MiLCJzdF9kb2N1bWVudHNfQ29udGVudCIsInN0YXRzIiwic3RfZG9jdW1lbnRzX1JlY29tbWVuZGF0aW9uRW51bSIsInN0X2RvY3VtZW50c19BbmFseXRpY0RvY3VtZW50IiwiYW5hbHl0aWNzX3ZlcnNpb24iLCJhbmFseXRpY3NfcmV2aXNpb25fbnVtYmVyIiwidGl0bGVfc2ltaWxhcml0eV9rZXkiLCJ0aXRsZV9zaW1pbGFyaXR5X2RheXMiLCJkb2N1bWVudF9zaW1pbGFyaXR5X2tleSIsImRvY3VtZW50X3NpbWlsYXJpdHlfZGF5cyIsImRvY3VtZW50X3NlbnRpbWVudCIsImRvY3VtZW50X3NlbnRpbWVudF9jb25maWRlbmNlIiwiY29tcG9zaXRlX3NlbnRpbWVudF9zY29yZSIsInNlbnRpbWVudF9pbXBhY3RfcHJvamVjdGlvbiIsInN0b2NrX3RvbmVfc2VudGltZW50IiwiZWFybmluZ3NfdG9uZV9zZW50aW1lbnQiLCJjb21tZW50YXJ5X3NlbnRpbWVudCIsIm1lcmdlcnNfYWNxdWlzaXRpb25zX3NlbnRpbWVudCIsImNvcnBvcmF0ZV9hY3Rpb25zX3NlbnRpbWVudCIsImVhcm5pbmdzX3JlbGVhc2Vfc2VudGltZW50IiwicHJvZHVjdF9rZXkiLCJyZWFsdGltZSIsImRvY3VtZW50X3JlY29yZF9jb3VudCIsInN0X2RvY3VtZW50c19Sb2xlRXZlbnQiLCJyb2xlIiwidW5pdCIsImZhY3RfbGV2ZWwiLCJycF9wb3NpdGlvbl9pZCIsInBvc2l0aW9uX25hbWUiLCJycF9zZWdtZW50X2lkIiwic2VnbWVudF9uYW1lIiwicnBfdGVycml0b3J5X2lkIiwidGVycml0b3J5X25hbWUiLCJycF9yZWxhdGVkX2VudGl0eV9pZCIsInJlbGF0ZWRfZW50aXR5X25hbWUiLCJycF9wYXJlbnRfaWQiLCJwYXJlbnRfbmFtZSIsInJwX3ByaW9yX3BhcmVudF9pZCIsInByaW9yX3BhcmVudF9uYW1lIiwicmVsYXRpb25zaGlwIiwiZXZlbnRfc2VudGltZW50IiwiZXZlbnRfcmlzayIsInN1c3RhaW5hYmlsaXR5X3NlbnRpbWVudCIsImNyZWRpdF9zZW50aW1lbnQiLCJpbnRlcmVzdF9yYXRlX3NlbnRpbWVudCIsImV2ZW50X2RldGVjdGlvbl9kaXN0YW5jZSIsInJwX2V2ZW50X2RldGVjdGVkX2VudGl0eV9pZCIsImV2ZW50X2RldGVjdGVkX2VudGl0eV9uYW1lIiwiZXZlbnRfdGV4dCIsImRvY3VtZW50X3JlY29yZF9pbmRleCIsIm1hdGNoX3R5cGUiLCJzdF9kb2N1bWVudHNfQW5hbHl0aWNFdmVudCIsInRvcGljIiwiZ3JvdXAiLCJzdWJfdHlwZSIsImV2YWx1YXRpb25fbWV0aG9kIiwibWF0dXJpdHkiLCJyZXBvcnRpbmdfdHlwZSIsImV2ZW50X3N0YXJ0X2RhdGVfdXRjIiwiZXZlbnRfZW5kX2RhdGVfdXRjIiwicmVwb3J0aW5nX3BlcmlvZCIsInJlcG9ydGluZ19zdGFydF9kYXRlX3V0YyIsInJlcG9ydGluZ19lbmRfZGF0ZV91dGMiLCJldmVudF9yZWxldmFuY2UiLCJldmVudF9zaW1pbGFyaXR5X2RheXMiLCJyb2xlcyIsInN0X2RvY3VtZW50c19BbmFseXRpY0VudGl0eSIsImVudGl0eV90eXBlIiwiZW50aXR5X25hbWUiLCJjb3VudHJ5X2NvZGUiLCJlbnRpdHlfaGllcmFyY2h5X2xldmVsIiwiZW50aXR5X2RldGVjdGlvbl90eXBlIiwiZW50aXR5X2RldGVjdGlvbl9kaXN0YW5jZSIsImVudGl0eV9yZWxldmFuY2UiLCJlbnRpdHlfc2VudGltZW50IiwiZW50aXR5X3NlbnRpbWVudF9jb25maWRlbmNlIiwiZW50aXR5X3RleHRfc2VudGltZW50IiwiZW50aXR5X3RleHRfc2VudF9jb25maWRlbmNlIiwiYW5hbHlzdF9yYXRpbmdzX3NlbnRpbWVudCIsIm11bHRpX3N0b2NrX3NlbnRpbWVudCIsInN0X2RvY3VtZW50c19BbmFseXRpYyIsInN0X2RvY3VtZW50c19TZGtScGpzb24iLCJzdF9kb2N1bWVudHNfU291cmNlIiwicnBfY2hhbm5lbF9pZCIsInJwX29yZ2FuaXphdGlvbl9pZCIsInJwX2V4dGVybmFsX3NvdXJjZV9pZCIsInJwX3Byb3ZpZGVyX2lkIiwic3RfZG9jdW1lbnRzX1RpbWVzdGFtcHNVVEMiLCJjcmVhdGlvbiIsImxhc3RfbW9kaWZpZWQiLCJzdF9kb2N1bWVudHNfUmV2aXNpb25NZXRhZGF0YSIsImNoYWluX2lkIiwic2VxdWVuY2VfaWQiLCJzdF9kb2N1bWVudHNfQ29sbGVjdGlvbk1ldGFkYXRhIiwicnBfY29sbGVjdGlvbl9pZCIsInByb3ZpZGVyX2NvbGxlY3Rpb25faWQiLCJzdF9kb2N1bWVudHNfTWV0YWRhdGEiLCJwcmltYXJ5X2VudGl0eSIsInByb3ZpZGVyX2RvY3VtZW50X2lkIiwicHJvdmlkZXJfZmlsZW5hbWUiLCJwcm92aWRlcl90aW1lc3RhbXAiLCJtZWRpYV90eXBlIiwiY29weXJpZ2h0IiwiY29kZXMiLCJjdXN0b20iLCJjb2xsZWN0aW9uIiwic3RfZG9jdW1lbnRzX0RvY3VtZW50IiwiYXBpX3VuaXRzIiwic3RfZG9jdW1lbnRzX1NvZnR3YXJlVmVyc2lvbnMiLCJjb2xsZWN0aW9uX2J1aWxkIiwiY2xhc3NpZmljYXRpb25fYnVpbGQiLCJtZXRhZGF0YV9idWlsZCIsInN0X2RvY3VtZW50c19FeHRyYWN0aW9uU3RhZ2VQcm9maWxpbmciLCJwcm9jZXNzb3JfaW5fdGltZXN0YW1wX3V0YyIsInByb2Nlc3Nvcl9vdXRfdGltZXN0YW1wX3V0YyIsInRyYW5zbGF0aW9uX2luX3RpbWVzdGFtcF91dGMiLCJ0cmFuc2xhdGlvbl9vdXRfdGltZXN0YW1wX3V0YyIsInN0X2RvY3VtZW50c19Qcm9maWxpbmciLCJzdF9kb2N1bWVudHNfUnBqc29uIiwic29mdHdhcmVfdmVyc2lvbnMiLCJwcm9maWxpbmciLCJzdF9kb2N1bWVudHNfUHJlc2lnbmVkVXJsUnBqc29uIiwic3RfZG9jdW1lbnRzX0Vycm9yUmVzcG9uc2UiLCJzdF9kb2N1bWVudHNfVmVzcGFDb2xsZWN0aW9uRG9jdW1lbnQiLCJycERvY3VtZW50SWQiLCJycERvY3VtZW50VHlwZSIsInJwRG9jdW1lbnRTdWJ0eXBlIiwicnBDb2xsZWN0aW9uSWQiLCJzdF9kb2N1bWVudHNfVmVzcGFFbnRpdHkiLCJsb2dvVXJsIiwic3RfZG9jdW1lbnRzX1Zlc3BhQ29sbGVjdGlvblJlc3BvbnNlIiwic3RfZG9jdW1lbnRzX0RhdGFUb29sc0FwaVJlcXVlc3QiLCJycEVudGl0eUlkIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInN0X2RvY3VtZW50c19RdWFydGVyRW50aXR5UmVjb3JkIiwidHJhbnNjcmlwdEV2ZW50RGF0ZXRpbWUiLCJmaXNjYWxQZXJpb2QiLCJwcm92aWRlckNvbGxlY3Rpb25JZCIsInByb3ZpZGVyUHJpbWFyeUVudGl0eUlkIiwiYmFja2xpbmtVcmwiLCJzdF9kb2N1bWVudHNfRGF0YVRvb2xzQXBpUmVzcG9uc2UiLCJzdF9ldmVudF90cmFja2VyX1VzZXJFdmVudCIsImV2ZW50X25hbWUiLCJwcm9wZXJ0aWVzIiwic3RfZXZlbnRfdHJhY2tlcl9CYWRSZXF1ZXN0RXJyb3IiLCJzdF9maW5hbmNlc19GaW5hbmNlUmVxdWVzdCIsImZpbmFuY2lhbEluZm8iLCJzdF9maW5hbmNlc19GdWxsUXVvdGUiLCJzeW1ib2wiLCJzdF9maW5hbmNlc19GdWxsU3RvY2tQcmljZUNoYW5nZSIsInN0X2ZpbmFuY2VzX1Bvc3NpYmxlRmluYW5jaWFsSW5mbyIsInF1b3RlIiwic3RfZmluYW5jZXNfRmluYW5jZVJlc3BvbnNlIiwic3RfZmluYW5jZXNfVXBzdHJlYW1Ub29NYW55UmVxdWVzdHMiLCJzdF9maW5hbmNlc19FcnJvclJlc3BvbnNlIiwic3RfZmluYW5jZXNfVXBzdHJlYW1GYWlsZWRFcnJvciIsInN0X2ZpbmFuY2VzX0RCQ29ubmVjdGlvbkVycm9yIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9GaWx0ZXJTY29wZSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VhcmNoRW50aXR5Iiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9FbnRpdHlGaWx0ZXIiLCJub25lX29mIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9CYXNlRmlsdGVySXRlbSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfRXZlbnRGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RhdGVSYW5nZSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfU2VudGltZW50UG9sYXJpdHkiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50SWRGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1RyYW5zY3JpcHRTdWJ0eXBlIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudFRyYW5zY3JpcHRGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ZpbGluZ1N1YnR5cGUiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50RmlsaW5nRmlsdGVyIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Eb2N1bWVudE5ld3NGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0RvY3VtZW50VHJhbnNjcmlwdFByZXNlbnRhdGlvbkZpbHRlciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfUHJvdmlkZXJGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvdXJjZUZpbHRlciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jdW1lbnRVc2VyRmlsZUZpbHRlciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfRG9jVHlwZUZpbHRlciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfUGFja2FnZUlkRmlsdGVyIiwicGFja2FnZV9pZHMiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbnRlbnRGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0tleXdvcmRGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1BhY2thZ2VGaWx0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1JlcG9ydGluZ1BlcmlvZCIsImZpc2NhbF95ZWFyIiwiZmlzY2FsX3F1YXJ0ZXIiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1F1ZXJ5RmlsdGVycyIsImtleXdvcmRzIiwicGFja2FnZXMiLCJ2ZXNwYV9yZXF1ZXN0X292ZXJyaWRlIiwicmVwb3J0aW5nX2VudGl0aWVzIiwicmVwb3J0aW5nX3BlcmlvZHMiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlYXJjaFR5cGUiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NvcnRCeSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfUmVsZXZhbmNlUmFua2luZyIsInJlcmFuayIsImZyZXNobmVzcyIsImVucmljaG1lbnQiLCJzb3VyY2VfYXV0aG9yaXR5IiwiZG9jdW1lbnRfcHJvbWluZW5jZSIsInNlbnRpbWVudF9pbXBhY3QiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlYXJjaFF1ZXJ5Iiwid2Vha2FuZF90ZXh0IiwibWF4X2NodW5rcyIsImV4dGVybmFsX2NvbnRlbnQiLCJzZWFyY2hfdHlwZSIsInNvcnRfYnkiLCJjbHVzdGVyaW5nIiwicmVsZXZhbmNlX3JhbmtpbmciLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Byb2R1Y3RUeXBlIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Td2l0Y2hFbnRpdGxlbWVudCIsInNsdWciLCJwcm9kdWN0VHlwZXMiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0VudGl0bGVtZW50TGltaXRUYXJnZXQiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX01heFZhbHVlRW50aXRsZW1lbnQiLCJsaW1pdFRhcmdldCIsIm1heFZhbHVlIiwibGltaXRUaW1lUGVyaW9kIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Vc2VyUXVvdGFWMiIsInNlYXJjaE1heFNhdmVkIiwic2VhcmNoTWF4U2NoZWR1bGVkIiwic2VhcmNoTWF4Rm9sbG93ZWQiLCJzZWFyY2hNYXhTaGFyZWQiLCJ3YXRjaGxpc3RNYXhDcmVhdGVkIiwid2F0Y2hsaXN0TWF4U2hhcmVkIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Pcmdhbml6YXRpb25RdW90YVYyIiwiY29udGV4dHVhbFVuaXRzTWF4UmVhZCIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfVXNlciIsInVpZCIsImNvbXBhbnkiLCJ1c2VyRW1haWwiLCJvcmdhbml6YXRpb25JZCIsIm9yZ2FuaXphdGlvblJwQ2lkIiwiZW50aXRsZW1lbnRzIiwidXNlclF1b3RhIiwib3JnYW5pemF0aW9uUXVvdGEiLCJjb250ZW50UHJvdmlkZXJJZHMiLCJjb250ZW50U291cmNlSWRzIiwiZmVhdHVyZUFjY2Vzc1BvbGljaWVzIiwicmVxdWVzdE9yaWdpbiIsInByb2R1Y3RUeXBlIiwib25GcmVlbWl1bSIsImZyZWVVc2VyIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hSZXF1ZXN0IiwidXNlciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ2h1bmtTZW50ZW5jZSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfQm91bmRpbmdCb3giLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhQ2h1bmsiLCJib3VuZGluZ19ib3hlcyIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFEb2N1bWVudCIsImRvY3VtZW50X3Njb3BlIiwic3JjX2tleSIsInNyY19uYW1lIiwic291cmNlX3JhbmsiLCJjb250ZW50X3R5cGUiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1NlcnBSZXN1bHQiLCJzb3VyY2VfbmFtZSIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFUaW1lTWV0cmljcyIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfVmVzcGFDb3ZlcmFnZU1ldHJpY3MiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1Zlc3BhUmVzcG9uc2UiLCJ0b3RhbF9jb3VudCIsImRvY3VtZW50X2NvdW50Iiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9TZWFyY2hSZXN1bHQiLCJ2ZXNwYV9yZXN1bHRzIiwic2VycF9yZXN1bHRzIiwidmVzcGFfcmVzcG9uc2UiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0JhZFJlcXVlc3RFcnJvciIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfVW5hdXRob3JpemVkUmVzcG9uc2UiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0ludGVybmFsU2VydmVyUmVzcG9uc2UiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX0NvbWVudGlvbnNTZWFyY2hRdWVyeSIsInRvcF9uX2VudGl0aWVzIiwidG9wX25fZXZlbnRzIiwic3RfaW50ZXJuYWxfc2VhcmNoX2FwaV9Db21lbnRpb25zU2VhcmNoUmVxdWVzdCIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc0l0ZW1SZXNwb25zZSIsInRvdGFsX2NodW5rc19jb3VudCIsInRvdGFsX3RpdGxlc19jb3VudCIsInN0X2ludGVybmFsX3NlYXJjaF9hcGlfQ29tZW50aW9uc0dyb3VwUmVzcG9uc2UiLCJzdF9pbnRlcm5hbF9zZWFyY2hfYXBpX1ZvbHVtZVJlc3BvbnNlIiwiZGFpbHlfY291bnQiLCJzdF9sbG1fY2hhdF9DaGF0SW50ZXJhY3Rpb25TY29wZSIsInN0X2xsbV9jaGF0X0RvY3VtZW50IiwiZmlsZU5hbWUiLCJyYXdTaXplIiwidXBsb2FkVHMiLCJzdF9sbG1fY2hhdF9DaGF0SW50ZXJhY3Rpb25UeXBlIiwic3RfbGxtX2NoYXRfUmVxdWVzdEVudGl0eSIsInN0X2xsbV9jaGF0X1JlcXVlc3RUaW1lUmFuZ2UiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwic3RfbGxtX2NoYXRfRmxvd1R5cGUiLCJzdF9sbG1fY2hhdF9SZXF1ZXN0RmlsZXMiLCJmaWxlSWQiLCJvd25lcklkIiwidXNlcklzT3duZXIiLCJzdF9sbG1fY2hhdF9SZXF1ZXN0V2F0Y2hsaXN0cyIsInN0X2xsbV9jaGF0X0RldmljZUluZm9UcmFja2luZyIsIm1vZGVsIiwibWFudWZhY3R1cmVyIiwibG9jYWxlIiwic3RfbGxtX2NoYXRfQXBwSW5mb1RyYWNraW5nIiwiYnVpbGQiLCJuYW1lc3BhY2UiLCJ2ZXJzaW9uIiwic3RfbGxtX2NoYXRfRGV2aWNlTmV0d29ya0luZm9UcmFja2luZyIsImNlbGx1bGFyIiwid2lmaSIsImJsdWV0b290aCIsInN0X2xsbV9jaGF0X0RldmljZU9TSW5mb1RyYWNraW5nIiwic3RfbGxtX2NoYXRfUmVxdWVzdFRyYWNraW5nSW5mbyIsInN0YXR1cyIsInByb21wdFRvcGljcyIsInByb21wdFRhc2siLCJwbGF0Zm9ybVR5cGUiLCJmaWxlcyIsIndhdGNobGlzdHMiLCJjaGF0U3RhcnRMb2NhdGlvbiIsInBsYXRmb3JtIiwiZm9sbG93VXBTdWdnZXN0aW9uSW5kZXgiLCJkZXZpY2UiLCJhcHAiLCJuZXR3b3JrIiwib3MiLCJwcm9tcHRDb250ZXh0TGV2ZWwiLCJwcm9tcHRDYXRlZ29yeSIsInByb21wdENvbXBhbnlUeXBlIiwiZGF0YVZpZXdBdENsaWNrIiwiY2xpY2tlZFN1Z2dlc3RlZFByb21wdFRleHQiLCJzdWdnZXN0ZWRQcm9tcHRDbGFzc2lmaWNhdGlvbiIsInN1Z2dlc3RlZFByb21wdENsaWNrIiwic3RfbGxtX2NoYXRfQ2hhdFdpdGhNZW1vcnlSZXF1ZXN0IiwiZGlzcGxheWVkTWVzc2FnZSIsInNjb3BlRG9jdW1lbnRzIiwic2NvcGVXYXRjaGxpc3RJZCIsImludGVyYWN0aW9uVHlwZSIsInVzZU1hc3RlclJvdXRlciIsInRpbWVSYW5nZSIsImZsb3dUeXBlIiwiY3VzdG9tSW5zdHJ1Y3Rpb25zIiwic2VjdG9ycyIsInRyYWNraW5nIiwic3RfbGxtX2NoYXRfQ2hhdFdpdGhNZW1vcnlVcGRhdGVMYXN0UmVxdWVzdCIsIndlYnNvY2tldF93ZWJzb2NrZXRfX3Bvc3RfQm9keSIsInN0X2xsbV9jaGF0X0VuZ2luZUFpQmxvY2siLCJhbnN3ZXIiLCJleHBsYWluZXIiLCJ3aWRnZXRTcGVjIiwid2lkZ2V0U3BlY1VybCIsImlzU3VjY2Vzc2Z1bEFuc3dlciIsInN0X2xsbV9jaGF0X1N1bW1hcnlOZXh0QmxvY2tSZXNwb25zZSIsIm1lc3NhZ2VEZWx0YU1zIiwic2VxdWVuY2VOdW1iZXIiLCJibG9jayIsInN0X2xsbV9jaGF0X1F1b3RhVXNhZ2UiLCJpbnB1dFRva2VucyIsIm91dHB1dFRva2VucyIsInNlYXJjaGVzQ291bnQiLCJzdF9sbG1fY2hhdF9TdW1tYXJ5Q29tcGxldGlvblJlc3BvbnNlIiwiaW50ZXJhY3Rpb25UaW1lc3RhbXAiLCJjb250ZW50QmxvY2tzIiwidXNhZ2UiLCJzdF9sbG1fY2hhdF9Eb2N1bWVudFNvdXJjZUFjdGlvbiIsInN0X2xsbV9jaGF0X0V4dGVybmFsU291cmNlQWN0aW9uIiwic3RfbGxtX2NoYXRfRW5naW5lQWlTb3VyY2VBY3Rpb24iLCJzdF9sbG1fY2hhdF9PcmlnaW5Tb3VyY2VNZXRhZGF0YSIsInN0X2xsbV9jaGF0X09yaWdpblNvdXJjZXNNZXRhZGF0YSIsInN0X2xsbV9jaGF0X1N1bW1hcnlTb3VyY2VzUmVzcG9uc2UiLCJvcmlnaW5Tb3VyY2VzIiwic3RfbGxtX2NoYXRfVHJhY2VRdWVyeSIsInN0X2xsbV9jaGF0X0NodW5rU2VudGVuY2UiLCJzdF9sbG1fY2hhdF9Cb3VuZGluZ0JveCIsInN0X2xsbV9jaGF0X1RyYWNlUmVzdWx0Q2h1bmsiLCJzdF9sbG1fY2hhdF9UcmFjZVJlc3VsdENRU1N0b3J5Iiwic3RfbGxtX2NoYXRfQXVkaXRUcmFjZUNRU1Jlc3VsdCIsInN0X2xsbV9jaGF0X0V4dGVybmFsVHJhY2VSZXN1bHQiLCJzdF9sbG1fY2hhdF9BdWRpdFRyYWNlRXh0ZXJuYWxSZXN1bHQiLCJzdF9sbG1fY2hhdF9BdWRpdFRyYWNlRW5naW5lQUlSZXN1bHQiLCJzdF9sbG1fY2hhdF9BdWRpdFRyYWNlIiwic3RfbGxtX2NoYXRfQXVkaXRUcmFjZVJlc3BvbnNlIiwic3RfbGxtX2NoYXRfUHJvZmlsaW5nUmVzcG9uc2UiLCJ4cmF5VHJhY2VJZCIsImNvbGRTdGFydCIsInR0ZnQiLCJ0aW1lVG9Db21wbGV0aW9uIiwicm91dGluZ1Jlc3BvbnNlVGltZSIsInF1ZXJ5RW5yaWNobWVudFRpbWVzIiwic2VhcmNoUmVzcG9uc2VUaW1lIiwic291cmNlSW1hZ2VzUmVzcG9uc2VUaW1lIiwic291cmNlSW1hZ2VzQ291bnQiLCJzb3VyY2VVcmxzQ291bnQiLCJzb3VyY2VJbWFnZXNSZXNwb25zZVRpbWVzIiwiZG9jdW1lbnRVcmxzUmVzcG9uc2VUaW1lcyIsImNxc1Jlc3BvbnNlVGltZXMiLCJjcXNRdWVyeUNvdW50Iiwic2VycFJlc3BvbnNlVGltZXMiLCJzZXJwUXVlcnlDb3VudCIsInN1bW1hcml6ZXJUdGZ0IiwiZW5naW5lQWlSZXNwb25zZVRpbWUiLCJlbmdpbmVBaUNvbnRleHR1YWxpemF0aW9uVGltZSIsIndhdGNobGlzdFJvdXRpbmdSZXNwb25zZVRpbWUiLCJoaXN0b3J5UmV0cmlldmFsUmVzcG9uc2VUaW1lIiwiY3Jvc3NFbmNvZGVyUmVzcG9uc2VUaW1lIiwibWFzdGVyUm91dGVyQ29udGV4dHVhbGl6YXRpb25UaW1lIiwibWFzdGVyUm91dGVySW5mZXJlbmNlVGltZSIsImZvbGxvd1VwUmVzcG9uc2VUaW1lIiwic3RfbGxtX2NoYXRfU3RhdHVzSW5mb1Jlc3BvbnNlIiwic3RfbGxtX2NoYXRfUXVlcnlJZGVudGlmaWVyIiwicXVlcnlfaWQiLCJzdF9sbG1fY2hhdF9TdGF0dXNRdWVyeVJlc3BvbnNlIiwicXVlcmllcyIsInN0X2xsbV9jaGF0X1N0YXR1c1Jlc2V0UmVzcG9uc2UiLCJzdF9sbG1fY2hhdF9TdGF0dXNTb3VyY2VzRmluaXNoZWRSZXNwb25zZSIsInN0X2xsbV9jaGF0X0Vycm9yUmVzcG9uc2UiLCJzdF9sbG1fdHJlbmRpbmdfZ2V0X1RyZW5kaW5nUmVxdWVzdFR5cGUiLCJzdF9sbG1fdHJlbmRpbmdfZ2V0X0xhbWJkYUNvb2tpZSIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJodHRwX29ubHkiLCJtYXhfYWdlIiwiZXhwaXJlcyIsInNhbWVfc2l0ZSIsImN1c3RvbV9hdHRyaWJ1dGVzIiwic3RfbGxtX3RyZW5kaW5nX2dldF9MYW1iZGFSZXNwb25zZSIsInN0YXR1c19jb2RlIiwiaGVhZGVycyIsImNvb2tpZXMiLCJjb21wcmVzcyIsInN0X2xsbV90cmVuZGluZ19nZXRfTGFtYmRhQmFkUmVxdWVzdEVycm9yIiwibXNnIiwic3RfcHJpdmF0ZV9jb250ZW50X1N0YXR1c09wdGlvbnMiLCJzdF9wcml2YXRlX2NvbnRlbnRfU29ydEJ5T3B0aW9ucyIsInN0X3ByaXZhdGVfY29udGVudF9Tb3J0RGlyT3B0aW9ucyIsInNvcnRfZGlyIiwic3RfcHJpdmF0ZV9jb250ZW50X093bmVyc2hpcE9wdGlvbnMiLCJvd25lcnNoaXAiLCJzdF9wcml2YXRlX2NvbnRlbnRfT3duZXJEYXRhIiwibGVnYWN5SWQiLCJmdWxsTmFtZSIsIm9yZ0lkIiwib3JnU2x1ZyIsIm9yZ05hbWUiLCJzdF9wcml2YXRlX2NvbnRlbnRfRXJyb3JSZXNwb25zZSIsInN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ0ZpbHRlclJlc3BvbnNlIiwiYWxsb3dlZCIsImNvbmZpZ0lkIiwidXVpZCIsInN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ1Jlc3BvbnNlIiwiZW1haWxIYXNoIiwic3RfcHJpdmF0ZV9jb250ZW50X0xpc3RFbWFpbENvbmZpZ3NSZXNwb25zZSIsInN0X3ByaXZhdGVfY29udGVudF9FbWFpbENvbmZpZ0ZpbHRlclBheWxvYWQiLCJzdF9wcml2YXRlX2NvbnRlbnRfRW1haWxDb25maWdQYXlsb2FkIiwic3RfcHJpdmF0ZV9jb250ZW50X0ZpbGVSZXNwb25zZSIsInNoYXJlZFdpdGgiLCJlbWFpbENvbmZpZ0lkIiwic3RfcHJpdmF0ZV9jb250ZW50X0xpc3RGaWxlc1Jlc3BvbnNlIiwic3RfcHJpdmF0ZV9jb250ZW50X1ByaXZhdGVDb250ZW50VXJsUmVzcG9uc2UiLCJjb250ZW50VXJsIiwic3RfcHJvZmlsZXNfU3RhdHVzRW51bSIsInN0X3Byb2ZpbGVzX1F1b3RhU3RhdHVzIiwic3RfcHJvZmlsZXNfRXJyb3JSZXNwb25zZSIsInN0X3Byb2ZpbGVzX09yZ2FuaXphdGlvblF1b3RhVjIiLCJzdF9wcm9maWxlc19Pcmdhbml6YXRpb25Db25zdW1lZCIsImNvbnRleHR1YWxVbml0c1JlYWQiLCJzdF9wcm9maWxlc19GZWF0dXJlQWNjZXNzUG9saWN5Iiwic3RfcHJvZmlsZXNfUHJvZHVjdFR5cGUiLCJzdF9wcm9maWxlc19Td2l0Y2hFbnRpdGxlbWVudFJlc3BvbnNlIiwic3RfcHJvZmlsZXNfRW50aXRsZW1lbnRMaW1pdFRhcmdldCIsInN0X3Byb2ZpbGVzX01heFZhbHVlRW50aXRsZW1lbnRSZXNwb25zZSIsIm1heFF1b3RhIiwicXVvdGFDb25zdW1lZCIsInN0X3Byb2ZpbGVzX015RW50aXRsZW1lbnRzUmVzcG9uc2UiLCJvcmdhbml6YXRpb25Db25zdW1lZCIsInN0X3Byb2ZpbGVzX1VzZXJRdW90YVYyIiwic3RfcHJvZmlsZXNfVXNlckNvbnN1bWVkIiwic2VhcmNoU2F2ZWQiLCJzZWFyY2hTY2hlZHVsZWQiLCJzZWFyY2hGb2xsb3dlZCIsInNlYXJjaFNoYXJlZCIsIndhdGNobGlzdHNDcmVhdGVkIiwid2F0Y2hsaXN0c1NoYXJlZCIsInN0X3Byb2ZpbGVzX1N1YnNjcmlwdGlvblN0YXR1cyIsInN0X3Byb2ZpbGVzX1N1c2JzY3JpcHRpb25GcmVxdWVuY3kiLCJzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Tb3VyY2UiLCJzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb25TdGF0dXMiLCJzdF9wcm9maWxlc19TdWJzY3JpcHRpb25Nb2RpZmljYXRpb24iLCJzdGFydGVkQXQiLCJmaW5pc2hlZEF0Iiwic3RfcHJvZmlsZXNfTXlQcm9maWxlUmVzcG9uc2UiLCJ1c2VyQ29uc3VtZWQiLCJzdWJzY3JpcHRpb25TdGF0dXMiLCJzdWJzY3JpcHRpb25SZW5ld2FsRGF0ZSIsInN1YnNjcmlwdGlvbkZyZXF1ZW5jeSIsInN1YnNjcmlwdGlvblNvdXJjZSIsInN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbiIsInN0X3Byb2ZpbGVzX1VwZGF0ZVN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvblJlcXVlc3QiLCJzdF9wcm9maWxlc19GdWxsVXNlclByb2ZpbGVSZXNwb25zZSIsImVudGl0bGVtZW50c0NvbnN1bXB0aW9uIiwic3RfcHJvZmlsZXNfU3dpdGNoRW50aXRsZW1lbnQiLCJzdF9wcm9maWxlc19NYXhWYWx1ZUVudGl0bGVtZW50Iiwic3RfcHJvZmlsZXNfRnVsbE9yZ2FuaXphdGlvblByb2ZpbGVSZXNwb25zZSIsImFwcENvbnRlbnRBY2Nlc3NQb2xpY2llcyIsInNka0NvbnRlbnRBY2Nlc3NQb2xpY2llcyIsInN0X3Byb2ZpbGVzX1VwZGF0ZVN1YnNjcmlwdGlvbk1vZGlmaWNhdGlvbiIsInN0X3Byb2ZpbGVzX1VwZGF0ZU9yZ2FuaXphdGlvblByb2ZpbGUiLCJhcHBGZWF0dXJlQWNjZXNzUG9saWNpZXMiLCJzZGtGZWF0dXJlQWNjZXNzUG9saWNpZXMiLCJzdF9wcm9maWxlc19Pcmdhbml6YXRpb25Qcm9maWxlIiwic3RfcHJvZmlsZXNfQ29udGVudEFjY2Vzc1BvbGljeSIsInN0X3Byb2ZpbGVzX0NvbnRlbnRBY2Nlc3NQb2xpY2llc1Jlc3BvbnNlIiwic3RfcHJvZmlsZXNfVXNlck9uYm9hcmRpbmdGZWVkYmFjayIsImdvYWxzIiwic3RfcHJvZmlsZXNfVXNlclNhbGVzUmVxdWVzdCIsInBob25lIiwic3Rfc3Vic2NyaXB0aW9uc19kaXNwYXRjaGVyX0JhZFJlcXVlc3RFcnJvciIsInN0X3N1YnNjcmlwdGlvbnNfQ2hlY2tvdXRSZXNwb25zZSIsInN0X3N1YnNjcmlwdGlvbnNfQmFkUmVxdWVzdEVycm9yIiwic3Rfc3Vic2NyaXB0aW9uc19QbGFuRnJlcXVlbmN5Iiwic3Rfc3Vic2NyaXB0aW9uc19QbGFuQ3VycmVuY3kiLCJzdF9zdWJzY3JpcHRpb25zX0dlbmVyYXRlQ2hlY2tvdXRVcmxQYXJhbXNSZXF1ZXN0IiwiZnJlcXVlbmN5Iiwic3Rfc3Vic2NyaXB0aW9uc19DdXN0b21lclBvcnRhbCIsInRva2VuIiwiYWNjZXNzX3VybCIsInJlZGlyZWN0X3VybCIsImNyZWF0ZWRfYXQiLCJjdXN0b21lcl9pZCIsImV4cGlyZXNfYXQiLCJsaW5rZWRfY3VzdG9tZXJzIiwibG9naW5fYXQiLCJsb2dvdXRfYXQiLCJzdF9zdWJzY3JpcHRpb25zX05vdEZvdW5kRXJyb3IiLCJzdF91c2VyX2NoYXRzX0xpc3RVc2VyQ2hhdHNSZXF1ZXN0Iiwib3JkZXIiLCJzdF91c2VyX2NoYXRzX0xpZ2h0VXNlckNoYXRSZXNwb25zZSIsImlzUHVibGljIiwic3RfdXNlcl9jaGF0c19MaXN0VXNlckNoYXRSZXNwb25zZSIsInN0X3VzZXJfY2hhdHNfUGFnaW5hdGVkTGlzdFVzZXJDaGF0UmVzcG9uc2UiLCJpdGVtcyIsInN0X3VzZXJfY2hhdHNfQmFkUmVxdWVzdEVycm9yIiwic3RfdXNlcl9jaGF0c19Tb3VyY2UiLCJzdF91c2VyX2NoYXRzX0ZlZWRPcmlnaW4iLCJzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tRmVlZCIsInJlc3BvbnNlTWVzc2FnZSIsIm9yaWdpbiIsInN0X3VzZXJfY2hhdHNfVHJlbmRpbmdPcmlnaW4iLCJzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0SW50ZXJhY3Rpb25Gcm9tVHJlbmRpbmciLCJzdF91c2VyX2NoYXRzX0NyZWF0ZVVzZXJDaGF0V2l0aG91dFVzZXJJZCIsImludGVyYWN0aW9uIiwic3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25UeXBlIiwic3RfdXNlcl9jaGF0c19DaGF0SW50ZXJhY3Rpb25PcmlnaW4iLCJzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvblNjb3BlIiwic3RfdXNlcl9jaGF0c19Eb2N1bWVudCIsInN0X3VzZXJfY2hhdHNfVGV4dEJsb2NrIiwic3RfdXNlcl9jaGF0c19FbmdpbmVBaUJsb2NrIiwic3RfdXNlcl9jaGF0c19SZXF1ZXN0RW50aXR5Iiwic3RfdXNlcl9jaGF0c19UcmFjZVF1ZXJ5Iiwic3RfdXNlcl9jaGF0c19DaHVua1NlbnRlbmNlIiwic3RfdXNlcl9jaGF0c19Cb3VuZGluZ0JveCIsInN0X3VzZXJfY2hhdHNfVHJhY2VSZXN1bHRDaHVuayIsInN0X3VzZXJfY2hhdHNfVHJhY2VSZXN1bHRDUVNTdG9yeSIsInN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZUNRU1Jlc3VsdCIsInN0X3VzZXJfY2hhdHNfRXh0ZXJuYWxTb3VyY2VBY3Rpb24iLCJzdF91c2VyX2NoYXRzX0V4dGVybmFsVHJhY2VSZXN1bHQiLCJzdF91c2VyX2NoYXRzX0F1ZGl0VHJhY2VFeHRlcm5hbFJlc3VsdCIsInN0X3VzZXJfY2hhdHNfQXVkaXRUcmFjZUVuZ2luZUFJUmVzdWx0Iiwic3RfdXNlcl9jaGF0c19BdWRpdFRyYWNlIiwic3RfdXNlcl9jaGF0c19PcmlnaW5Tb3VyY2VNZXRhZGF0YSIsInN0X3VzZXJfY2hhdHNfT3JpZ2luU291cmNlc01ldGFkYXRhIiwic3RfdXNlcl9jaGF0c19Eb2N1bWVudFNvdXJjZUFjdGlvbiIsInN0X3VzZXJfY2hhdHNfRW5naW5lQWlTb3VyY2VBY3Rpb24iLCJzdF91c2VyX2NoYXRzX0NvbGxhcHNhYmxlQmxvY2siLCJzdF91c2VyX2NoYXRzX0NoYXRJbnRlcmFjdGlvbiIsImVmZmVjdGl2ZVNjb3BlIiwicmVzcG9uc2VCbG9jayIsImRpc2NyaW1pbmF0ZWRVbmlvbiIsInJlc3BvbnNlQmxvY2tzIiwicHJlZGljdGVkU2NvcGUiLCJhdWRpdFRyYWNlcyIsIm9yaWdpblNvdXJjZXNNZXRhZGF0YSIsImF1ZGl0QmxvY2tzIiwic3RfdXNlcl9jaGF0c19Vc2VyQ2hhdFJlc3BvbnNlIiwiaW50ZXJhY3Rpb25zIiwic3RfdXNlcl9jaGF0c19Ob3RGb3VuZEVycm9yIiwic3RfdXNlcl9jaGF0c19EZWxldGVVc2VyQ2hhdFJlc3BvbnNlIiwic3RfdXNlcl9jaGF0c19VcGRhdGVVc2VyQ2hhdCIsInN0X3VzZXJfY2hhdHNfVXNlckNoYXRVcGRhdGVkUmVzcG9uc2UiLCJzdF91c2VyX2NoYXRzX1VzZXJDaGF0U2hhcmVSZXF1ZXN0IiwicHVibGljIiwic3RfdXNlcl9jaGF0c19Vc2VyQ2hhdFNoYXJlZFJlc3BvbnNlIiwic3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVN0YXR1cyIsInNhdmVTdGF0dXMiLCJzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmVQZXJtaXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVNoYXJlQ29tcGFueUNvbnRleHQiLCJwZXJtaXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVNoYXJlVXNlckNvbnRleHQiLCJzdF91c2VyX3F1ZXJpZXNfVXNlclF1ZXJ5U2hhcmUiLCJ1c2VycyIsInN0X3VzZXJfcXVlcmllc19TY2hlZHVsZURlc3RpbmF0aW9uVHlwZSIsInN0X3VzZXJfcXVlcmllc19TbGFja1NjaGVkdWxlRGVzdGluYXRpb24iLCJzbGFja1dvcmtzcGFjZUlkIiwic2xhY2tDaGFubmVsSWQiLCJzbGFja0NoYW5uZWxOYW1lIiwic3RfdXNlcl9xdWVyaWVzX0VtYWlsRGVzdGluYXRpb25QYXJhbXMiLCJlbWFpbHMiLCJzdF91c2VyX3F1ZXJpZXNfU2NoZWR1bGUiLCJzY2hlZHVsZXJFeHByZXNzaW9uIiwiZGVzdGluYXRpb24iLCJkZXN0aW5hdGlvblBhcmFtcyIsInN0X3VzZXJfcXVlcmllc19MaWdodFVzZXJRdWVyeVJlc3BvbnNlIiwib3duZXIiLCJvd25lclVzZXJJZCIsImxhc3RFeGVjdXRlZCIsInBpbm5lZCIsInBpbkluZGV4Iiwib3duZXJOYW1lIiwic2hhcmVkIiwic2NoZWR1bGVzIiwic3RfdXNlcl9xdWVyaWVzX0xpc3RPYmplY3RzUmVzcG9uc2UiLCJzdF91c2VyX3F1ZXJpZXNfRXJyb3JSZXNwb25zZSIsInN0X3VzZXJfcXVlcmllc19TaW1pbGFyaXR5RXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19MaXN0T3BlcmF0aW9uRW51bSIsInN0X3VzZXJfcXVlcmllc19LZXl3b3JkRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19FbnRpdHlFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX0xhbmd1YWdlRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19Tb3VyY2VFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1JQVG9waWNFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX0RhdGVPcGVyYXRpb25FbnVtIiwic3RfdXNlcl9xdWVyaWVzX0RhdGVJbnRlcnZhbCIsInN0X3VzZXJfcXVlcmllc19EYXRlSW50ZXJ2YWxFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1RhZ3NFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX01hY3JvQ29tcGFuaWVzRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19NYWNyb09yZ2FuaXphdGlvbnNFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX01hY3JvQ29uY2VwdHNFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX01hY3JvUGVvcGxlRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19NYWNyb1BsYWNlc0V4cHJlc3Npb24iLCJzdF91c2VyX3F1ZXJpZXNfTWFjcm9Qcm9kdWN0c0V4cHJlc3Npb24iLCJzdF91c2VyX3F1ZXJpZXNfTWFjcm9Ub3BpY3NFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50RXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19TZWN0aW9uTWV0YWRhdGFFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX0RvY3VtZW50VHlwZUV4cHJlc3Npb24iLCJzdF91c2VyX3F1ZXJpZXNfUmVwb3J0aW5nUGVyaW9kRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19SZXBvcnRpbmdFbnRpdHlFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1NlbnRpbWVudFJhbmdlRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50U3VidHlwZVR5cGVFeHByZXNzaW9uIiwic3RfdXNlcl9xdWVyaWVzX1JQRG9jdW1lbnRWZXJzaW9uRXhwcmVzc2lvbiIsInN0X3VzZXJfcXVlcmllc19SUERvY3VtZW50VHlwZUV4cHJlc3Npb24iLCJzdF91c2VyX3F1ZXJpZXNfUlBQcm92aWRlckV4cHJlc3Npb24iLCJzdF91c2VyX3F1ZXJpZXNfT3JFeHByZXNzaW9uX0lucHV0Iiwic3RfdXNlcl9xdWVyaWVzX05vdEV4cHJlc3Npb25fSW5wdXQiLCJzdF91c2VyX3F1ZXJpZXNfQW5kRXhwcmVzc2lvbl9JbnB1dCIsInN0X3VzZXJfcXVlcmllc19TZW50ZW5jZUxhYmVsIiwic3RfdXNlcl9xdWVyaWVzX0lucHV0U2VudGVuY2UiLCJzdF91c2VyX3F1ZXJpZXNfU2NvcGUiLCJzdF91c2VyX3F1ZXJpZXNfU29ydEVudW0iLCJzdF91c2VyX3F1ZXJpZXNfUmFua2luZyIsInN0X3VzZXJfcXVlcmllc19DUVNTZWFyY2hDdXJzb3JQYWdpbmF0aW9uIiwic3RfdXNlcl9xdWVyaWVzX0NRU1NlYXJjaE9mZnNldFBhZ2luYXRpb24iLCJzdF91c2VyX3F1ZXJpZXNfQ1FTQ2x1c3RlcmluZ1BhcmFtcyIsInN0X3VzZXJfcXVlcmllc19TZWFyY2hDaGFpbiIsInN0X3VzZXJfcXVlcmllc19SUFhRdWVyeV9JbnB1dCIsInN0X3VzZXJfcXVlcmllc19Qcm9tcHQiLCJ0b25lIiwidXNlckluc3RydWN0aW9ucyIsInN0X3VzZXJfcXVlcmllc19DcmVhdGVVc2VyUXVlcnkiLCJwcm9tcHRQcm9wZXJ0aWVzIiwic3RfdXNlcl9xdWVyaWVzX09yRXhwcmVzc2lvbl9PdXRwdXQiLCJzdF91c2VyX3F1ZXJpZXNfTm90RXhwcmVzc2lvbl9PdXRwdXQiLCJzdF91c2VyX3F1ZXJpZXNfQW5kRXhwcmVzc2lvbl9PdXRwdXQiLCJzdF91c2VyX3F1ZXJpZXNfUlBYUXVlcnlfT3V0cHV0Iiwic3RfdXNlcl9xdWVyaWVzX1VzZXJRdWVyeVJlc3BvbnNlIiwic3RfdXNlcl9xdWVyaWVzX0RlbGV0ZU9iamVjdFJlc3BvbnNlIiwic3RfdXNlcl9xdWVyaWVzX1VwZGF0ZVVzZXJRdWVyeSIsInN0X3VzZXJfcXVlcmllc19CdWxrRGVsZXRlT2JqZWN0c1BhcmFtcyIsInN0X3VzZXJfcXVlcmllc19TZXRQaW5uZWRJdGVtc1BhcmFtcyIsInN0X3VzZXJfcXVlcmllc19Vc2VyUGlubmVkUXVlcmllc1Jlc3BvbnNlIiwic3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdEZpbHRlciIsImdsb2JhbFR5cGUiLCJzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0U3RhdHVzIiwiZ2xvYmFsU3RhdHVzIiwic3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUGVybWlzc2lvbiIsInN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZUNvbXBhbnlDb250ZXh0UmVzcG9uc2UiLCJzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0U2hhcmVVc2VyQ29udGV4dCIsInN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RTaGFyZVJlc3BvbnNlX0lucHV0Iiwic3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdEF1dGhvckRhdGEiLCJhdmF0YXJVcmwiLCJzdF91c2VyX3dhdGNobGlzdHNfR2xvYmFsV2F0Y2hsaXN0VHlwZSIsInN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3REYXRhIiwiYXV0aG9yIiwiaXNGZWF0dXJlZCIsInN0YXR1c0xhc3RVcGRhdGVkIiwibW90aXZhdGlvbiIsInN0X3VzZXJfd2F0Y2hsaXN0c19MaWdodFdhdGNobGlzdFJlc3BvbnNlX0lucHV0IiwibGFzdEludGVyYWN0ZWQiLCJvd25lckltYWdlVXJsIiwiZ2xvYmFsIiwiaXNGYXZvcml0ZSIsImZhdm9yaXRlc0NvdW50Iiwic3RfdXNlcl93YXRjaGxpc3RzX0xpc3RPYmplY3RzUmVzcG9uc2VfSW5wdXQiLCJzdF91c2VyX3dhdGNobGlzdHNfRXJyb3JSZXNwb25zZSIsInN0X3VzZXJfd2F0Y2hsaXN0c19XYXRjaGxpc3RVcGRhdGVBdXRob3JEYXRhIiwic3RfdXNlcl93YXRjaGxpc3RzX0dsb2JhbFdhdGNobGlzdENyZWF0ZURhdGEiLCJzdF91c2VyX3dhdGNobGlzdHNfQ3JlYXRlV2F0Y2hsaXN0UGFyYW1zIiwic3RfdXNlcl93YXRjaGxpc3RzX09ialBlcm1pc3Npb25zIiwiZWRpdGFibGUiLCJzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UmVzcG9uc2VfSW5wdXQiLCJwZXJtaXNzaW9ucyIsInN0X3VzZXJfd2F0Y2hsaXN0c19EZWxldGVXYXRjaGxpc3RSZXNwb25zZSIsInN0X3VzZXJfd2F0Y2hsaXN0c19HbG9iYWxXYXRjaGxpc3RVcGRhdGVEYXRhIiwic3RfdXNlcl93YXRjaGxpc3RzX1B1dFdhdGNobGlzdFBhcmFtcyIsInN0X3VzZXJfd2F0Y2hsaXN0c19QYXRjaFdhdGNobGlzdFBhcmFtcyIsInN0X3VzZXJfd2F0Y2hsaXN0c19CdWxrRGVsZXRlV2F0Y2hsaXN0UGFyYW1zIiwic3RfdXNlcl93YXRjaGxpc3RzX0J1bGtEZWxldGVXYXRjaGxpc3RSZXNwb25zZSIsImlkcyIsInN0X3VzZXJfd2F0Y2hsaXN0c19MaXN0V2F0Y2hsaXN0c1BhcmVudHNQYXJhbXMiLCJzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0UGFyZW50Iiwic3RfdXNlcl93YXRjaGxpc3RzX0xpc3RXYXRjaGxpc3RQYXJlbnRzUmVzcG9uc2UiLCJzdF91c2VyX3dhdGNobGlzdHNfV2F0Y2hsaXN0SXRlbXNVcGRhdGVSZXF1ZXN0Iiwic3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlQ29tcGFueUNvbnRleHRSZXF1ZXN0Iiwic3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdFNoYXJlUmVxdWVzdCIsInN0X3VzZXJfd2F0Y2hsaXN0c19HZW5lcmF0ZVByZXNpZ25lZFVybFJlc3BvbnNlIiwic3RfdXNlcl93YXRjaGxpc3RzX1VuQXV0aG9yaXNlZFdhdGNobGlzdEFjY2Vzc0Vycm9yIiwic3RfdXNlcl93YXRjaGxpc3RzX1dhdGNobGlzdE5vdEZvdW5kRXJyb3IiLCJzdF91c2VyX3dhdGNobGlzdHNfRGVsZXRlQXNzZXRSZXNwb25zZSIsImRlbGV0ZWRBdCIsInN0X3VzZXJfd2F0Y2hsaXN0c19SZXNvdXJjZU5vdEZvdW5kRXJyb3IiLCJzdF91c2VyX3dvcmtmbG93c19Xb3JrZmxvd1Jlc3BvbnNlIiwic3RfdXNlcl93b3JrZmxvd3NfV29ya2Zsb3dMaXN0UmVzcG9uc2UiLCJ3b3JrZmxvd3MiLCJlbmRwb2ludHMiLCJtYWtlQXBpIiwibWV0aG9kIiwiYWxpYXMiLCJyZXF1ZXN0Rm9ybWF0IiwicGFyYW1ldGVycyIsInNjaGVtYSIsInJlc3BvbnNlIiwiZXJyb3JzIiwiWm9kaW9zIiwiYmFzZVVybCIsIm9wdGlvbnMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUN2Q0MsTUFBTSxDQUFDO0lBQ04sTUFBTUQsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaERxUixLQUFLaFMsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDL0MsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxDQUFDVSxLQUFLLENBQUM7UUFBQ1YsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDOEMsTUFBTTtRQUFJOUMsTUFBQyxDQUFDVyxJQUFJO0tBQUc7SUFDaEQsTUFBTVgsTUFBQyxD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UTVKLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ2hEdUksUUFBUTdKLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ2hEd0ksUUFBUTlKLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ2hEeUksUUFBUS9KLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ2hEMEksV0FBV2hLLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ25EMkksV0FBV2pLLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ25ENEksV0FBV2xLLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ25ENkksV0FBV25LLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ25EOEksV0FBV3BLLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMsQ0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRyxFQUFFVyxRQUFRO0lBQ25EK0ksV0FBV3JLLE1BQUMsQ0FBQ1UsS0FBSyxDQUFDO1FBQUNWLE1BQUMs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Q0FBQ0ksTUFBTTtRQUFJSixNQUFDLENBQUNXLElBQUk7S0FBRztJQUN0QyxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRCxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRCxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRCxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRCxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRHFSLEtBQUtoUyxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUMvQyxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7S0FBRztJQUNoRCxNQUFNWCxNQUFDLENBQUNVLEtBQUssQ0FBQztRQUFDVixNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUM4QyxNQUFNO1FBQUk5QyxNQUFDLENBQUNXLElBQUk7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O0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FwRTtJQUNBc0U7SUFDQUc7SUFDQUU7SUFDQUU7SUFDQUM7SUFDQVE7SUFDQUM7SUFDQUU7SUFDQWlCO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FTO0lBQ0FDO0lBQ0FDO0lBQ0FPO0lBQ0FDO0lBQ0FLO0lBQ0FDO0lBQ0FLO0lBQ0FDO0lBQ0FxQztJQUNBQztJQUNBc0M7SUFDQUM7SUFDQW9EO0lBQ0FDO0lBQ0EwQztJQUNBQztJQUNBMEQ7SUFDQUM7SUFDQUk7SUFDQUM7SUFDQTJCO0lBQ0FNO0lBQ0FLO0lBQ0FDO0lBQ0FHO0lBQ0FNO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FLO0lBQ0FRO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FLO0lBQ0FJO0lBQ0FDO0lBQ0FTO0lBQ0FDO0lBQ0FXO0lBQ0FHO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FEO0lBQ0FFO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FJO0lBQ0FDO0lBQ0FJO0lBQ0FDO0lBQ0FZO0lBQ0FNO0lBQ0FJO0lBQ0FDO0lBQ0FNO0lBQ0FXO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FHO0lBQ0FXO0lBQ0FJO0lBQ0FPO0lBQ0FDO0lBQ0FTO0lBQ0FDO0lBQ0FJO0lBQ0FFO0lBQ0FFO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FLO0lBQ0FFO0lBQ0FJO0lBQ0FJO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FJO0lBQ0FJO0lBQ0FDO0lBQ0FFO0lBQ0FFO0lBQ0FFO0lBQ0FLO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FFO0lBQ0FHO0lBQ0FOO0lBQ0FTO0lBQ0FFO0lBQ0FDO0lBQ0FvQjtJQUNBNEI7SUFDQWU7SUFDQWM7SUFDQUM7SUFDQUM7SUFDQUs7SUFDQUc7SUFDQUc7SUFDQUc7SUFDQVU7SUFDQUU7SUFDQUk7SUFDQUs7SUFDQUM7SUFDQUc7SUFDQUM7SUFDQUM7SUFDQUs7SUFDQUU7SUFDQUM7SUFDQUk7SUFDQU07SUFDQUM7SUFDQUc7SUFDQUM7SUFDQUU7SUFDQUU7SUFDQUM7SUFDQUU7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUU7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUU7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUc7SUFDQU07SUFDQUM7SUFDQUM7SUFDQU87SUFDQVE7SUFDQUM7SUFDQUc7SUFDQUM7SUFDQUk7SUFDQU87SUFDQUU7SUFDQWdCO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FFO0lBQ0FNO0lBQ0FFO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FJO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FDO0lBQ0FHO0lBQ0FDO0lBQ0FFO0lBQ0FDO0lBQ0FJO0lBQ0FDO0lBQ0FDO0lBQ0FHO0lBQ0FDO0lBQ0FJO0lBQ0FDO0lBQ0FJO0lBQ0FJO0lBQ0FJO0lBQ0FDO0lBQ0FxQjtJQUNBVztJQUNBQztJQUNBQztJQUNBTTtJQUNBSTtJQUNBSTtJQUNBSTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBMEI7SUFDQUM7SUFDQUU7SUFDQUU7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQTF2QztJQUNBMnZDO0lBQ0FTO0lBQ0FLO0lBQ0FFO0lBQ0F4SDtJQUNBeUg7SUFDQWhPO0lBQ0FpTztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBTTtJQUNBQztJQUNBSTtJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBRztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRztJQUNBRTtJQUNBQztJQUNBTztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRztJQUNBTztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBRztJQUNBQztJQUNBRztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBVTtJQUNBQztJQUNBRTtJQUNBRTtJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBRztJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBUztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBQztJQUNBRTtJQUNBQztJQUNBSTtJQUNBRTtJQUNBSTtJQUNBUztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBRTtJQUNBRDtJQUNBRTtJ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