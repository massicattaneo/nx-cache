{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/Workflows/Workflow.test.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-extra-semi */\nimport { ChatWatchlistEntity } from \"@rp/common/api-types\"\nimport { useWorkflow } from \"@rp/react/tanstack-api/workflow\"\nimport { renderWithProviders } from \"@rp/react/web/common/tools\"\nimport { CHAT_ROUTE } from \"@rp/react/web/router\"\nimport { fireEvent, screen, waitFor } from \"@testing-library/react\"\nimport { Workflow } from \"./Workflow\"\n\n// Mock the useWorkflow hook\njest.mock(\"@rp/react/tanstack-api/workflow\", () => ({\n  useWorkflow: jest.fn(),\n  WorkflowSteps: {\n    SELECT_COMPANIES: 0,\n    SELECT_TIMEFRAME: 1,\n    SELECT_SECTOR: 2,\n  },\n}))\n\nconst mockNavigate = jest.fn()\n\n// Mock react-router-dom\njest.mock(\"react-router-dom\", () => ({\n  ...jest.requireActual(\"react-router-dom\"),\n  useNavigate: () => mockNavigate,\n  useParams: () => ({ id: \"test-workflow-id\" }),\n}))\n\nconst mockWorkflowData = {\n  flowName: \"Test Workflow Name\",\n  steps: [{ stepType: \"entity\" }, { stepType: \"dateFilter\" }],\n  description: \"Test workflow description\",\n  defaultDateFilter: \"last_12_hours\",\n}\n\nconst renderWorkflow = () => renderWithProviders(<Workflow />)\n\njest.mock(\"@rp/react/web/workflow\", () => {\n  const actual = jest.requireActual(\"@rp/react/web/workflow\")\n\n  const MockCompanySearchAutocomplete = ({\n    handleCompanySelection,\n  }: {\n    handleCompanySelection: (companies: Array<ChatWatchlistEntity>) => void\n    companies?: Array<ChatWatchlistEntity>\n    workflowDescription: string\n  }) => {\n    const simulateSelection = (companyName: string) => {\n      handleCompanySelection([\n        { key: companyName.toLowerCase().replace(\" \", \"-\"), name: companyName, type: \"company\" },\n      ])\n    }\n    const simulateClear = () => {\n      handleCompanySelection([])\n    }\n\n    return (\n      <div>\n        <input placeholder=\"Search for companies\" data-testid=\"mock-company-input\" readOnly />\n        <button\n          data-testid=\"mock-select-company-button\"\n          onClick={() => simulateSelection(\"Mock Company Inc.\")}\n        >\n          Select Mock Company Inc.\n        </button>\n        <button data-testid=\"mock-clear-company-button\" onClick={simulateClear}>\n          Clear Selection\n        </button>\n      </div>\n    )\n  }\n\n  return {\n    ...actual,\n    CompanySearchAutocomplete: jest.fn(MockCompanySearchAutocomplete),\n  }\n})\n\ndescribe(\"Workflow\", () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it(\"should render loading state\", () => {\n    ;(useWorkflow as jest.Mock).mockReturnValue({\n      isLoading: true,\n      data: null,\n      error: null,\n    })\n\n    renderWorkflow()\n    expect(useWorkflow).toHaveBeenCalledWith(\"test-workflow-id\", { enableCustomInstructions: true })\n  })\n\n  it(\"should handle error state and navigate back\", async () => {\n    const error = new Error(\"Test error\")\n    ;(useWorkflow as jest.Mock).mockReturnValue({\n      isLoading: false,\n      data: null,\n      error,\n    })\n\n    renderWorkflow()\n\n    await waitFor(() => {\n      expect(mockNavigate).toHaveBeenCalledWith(-1)\n    })\n  })\n\n  it(\"should handle direct workflow behavior\", async () => {\n    const directWorkflow = {\n      ...mockWorkflowData,\n      behavior: \"direct\",\n    }\n\n    ;(useWorkflow as jest.Mock).mockReturnValue({\n      isLoading: false,\n      data: directWorkflow,\n      error: null,\n    })\n\n    renderWorkflow()\n\n    await waitFor(() => {\n      expect(mockNavigate).toHaveBeenCalledWith(CHAT_ROUTE, expect.any(Object))\n    })\n  })\n\n  it(\"should render null when workflow data is empty\", () => {\n    ;(useWorkflow as jest.Mock).mockReturnValue({\n      isLoading: false,\n      data: null,\n      error: null,\n    })\n\n    const { container } = renderWorkflow()\n    expect(container.firstChild).toBeNull()\n  })\n\n  it(\"should render null when workflow steps are empty\", () => {\n    ;(useWorkflow as jest.Mock).mockReturnValue({\n      isLoading: false,\n      data: { ...mockWorkflowData, steps: [] },\n      error: null,\n    })\n\n    const { container } = renderWorkflow()\n    expect(container.firstChild).toBeNull()\n  })\n\n  describe(\"Step transitions and form interactions\", () => {\n    beforeEach(() => {\n      ;(useWorkflow as jest.Mock).mockReturnValue({\n        isLoading: false,\n        data: mockWorkflowData,\n        error: null,\n      })\n    })\n\n    it(\"should render workflow title\", () => {\n      renderWorkflow()\n      const title = screen.getByRole(\"heading\", { name: \"Test Workflow Name\" })\n      expect(title).toBeVisible()\n    })\n\n    it(\"should disable next button when no companies are selected\", () => {\n      renderWorkflow()\n      const nextButton = screen.getByTestId(\"vertical-scroll-stepper-footer-button\")\n      expect(nextButton).toBeDisabled()\n    })\n\n    it(\"should enable next button when companies are selected via mock\", async () => {\n      renderWorkflow()\n\n      const nextButton = screen.getByTestId(\"vertical-scroll-stepper-footer-button\")\n      expect(nextButton).toBeDisabled()\n\n      const mockSelectButton = screen.getByTestId(\"mock-select-company-button\")\n\n      fireEvent.click(mockSelectButton)\n\n      await waitFor(() => {\n        expect(nextButton).not.toBeDisabled()\n      })\n\n      const mockClearButton = screen.getByTestId(\"mock-clear-company-button\")\n      fireEvent.click(mockClearButton)\n      await waitFor(() => {\n        expect(nextButton).toBeDisabled()\n      })\n    })\n\n    it(\"should navigate to chat when workflow is completed\", async () => {\n      renderWorkflow()\n\n      // --- Step 1: Company Selection (using mock) ---\n      const nextButton = screen.getByTestId(\"vertical-scroll-stepper-footer-button\")\n      const mockSelectCompanyButton = screen.getByTestId(\"mock-select-company-button\")\n      fireEvent.click(mockSelectCompanyButton)\n      await waitFor(() => expect(nextButton).not.toBeDisabled())\n      fireEvent.click(nextButton)\n\n      // --- Step 2: Timeframe Selection ---\n      const option = screen.getByText(\"Last 7 days\")\n      fireEvent.click(option)\n\n      const chatButton = await screen.findByTestId(\"vertical-scroll-stepper-footer-button\")\n      await waitFor(() => expect(chatButton).not.toBeDisabled())\n      fireEvent.click(chatButton)\n\n      await waitFor(() => {\n        expect(mockNavigate).toHaveBeenCalledWith(\n          CHAT_ROUTE,\n          expect.objectContaining({\n            state: expect.objectContaining({\n              workflow: expect.objectContaining({\n                selectedData: expect.objectContaining({\n                  selectedCompanies: expect.arrayContaining([\n                    expect.objectContaining({ name: \"Mock Company Inc.\" }),\n                  ]),\n                }),\n              }),\n            }),\n          }),\n        )\n      })\n    })\n\n    it(\"should handle back navigation\", () => {\n      renderWorkflow()\n      const backButton = screen.getByLabelText(\"back\")\n      fireEvent.click(backButton)\n      expect(mockNavigate).toHaveBeenCalledWith(-1)\n    })\n  })\n})\n"],"names":["jest","mock","useWorkflow","fn","WorkflowSteps","SELECT_COMPANIES","SELECT_TIMEFRAME","SELECT_SECTOR","requireActual","useNavigate","mockNavigate","useParams","id","actual","MockCompanySearchAutocomplete","handleCompanySelection","simulateSelection","companyName","key","toLowerCase","replace","name","type","simulateClear","div","input","placeholder","data-testid","readOnly","button","onClick","CompanySearchAutocomplete","mockWorkflowData","flowName","steps","stepType","description","defaultDateFilter","renderWorkflow","renderWithProviders","Workflow","describe","beforeEach","clearAllMocks","it","mockReturnValue","isLoading","data","error","expect","toHaveBeenCalledWith","enableCustomInstructions","Error","waitFor","directWorkflow","behavior","CHAT_ROUTE","any","Object","container","firstChild","toBeNull","title","screen","getByRole","toBeVisible","nextButton","getByTestId","toBeDisabled","mockSelectButton","fireEvent","click","not","mockClearButton","mockSelectCompanyButton","option","getByText","chatButton","findByTestId","objectContaining","state","workflow","selectedData","selectedCompanies","arrayContaining","backButton","getByLabelText"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}