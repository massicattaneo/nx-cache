{"version":3,"sources":["../../../src/actions/dragDrop/beginDrag.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\n\nimport type {\n\tAction,\n\tBeginDragOptions,\n\tBeginDragPayload,\n\tDragDropManager,\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tXYCoord,\n} from '../../interfaces.js'\nimport { isObject } from '../../utils/js_utils.js'\nimport { setClientOffset } from './local/setClientOffset.js'\nimport { BEGIN_DRAG, INIT_COORDS } from './types.js'\n\nconst ResetCoordinatesAction = {\n\ttype: INIT_COORDS,\n\tpayload: {\n\t\tclientOffset: null,\n\t\tsourceClientOffset: null,\n\t},\n}\n\nexport function createBeginDrag(manager: DragDropManager) {\n\treturn function beginDrag(\n\t\tsourceIds: Identifier[] = [],\n\t\toptions: BeginDragOptions = {\n\t\t\tpublishSource: true,\n\t\t},\n\t): Action<BeginDragPayload> | undefined {\n\t\tconst {\n\t\t\tpublishSource = true,\n\t\t\tclientOffset,\n\t\t\tgetSourceClientOffset,\n\t\t}: BeginDragOptions = options\n\t\tconst monitor = manager.getMonitor()\n\t\tconst registry = manager.getRegistry()\n\n\t\t// Initialize the coordinates using the client offset\n\t\tmanager.dispatch(setClientOffset(clientOffset))\n\n\t\tverifyInvariants(sourceIds, monitor, registry)\n\n\t\t// Get the draggable source\n\t\tconst sourceId = getDraggableSource(sourceIds, monitor)\n\t\tif (sourceId == null) {\n\t\t\tmanager.dispatch(ResetCoordinatesAction)\n\t\t\treturn\n\t\t}\n\n\t\t// Get the source client offset\n\t\tlet sourceClientOffset: XYCoord | null = null\n\t\tif (clientOffset) {\n\t\t\tif (!getSourceClientOffset) {\n\t\t\t\tthrow new Error('getSourceClientOffset must be defined')\n\t\t\t}\n\t\t\tverifyGetSourceClientOffsetIsFunction(getSourceClientOffset)\n\t\t\tsourceClientOffset = getSourceClientOffset(sourceId)\n\t\t}\n\n\t\t// Initialize the full coordinates\n\t\tmanager.dispatch(setClientOffset(clientOffset, sourceClientOffset))\n\n\t\tconst source = registry.getSource(sourceId)\n\t\tconst item = source.beginDrag(monitor, sourceId)\n\t\t// If source.beginDrag returns null, this is an indicator to cancel the drag\n\t\tif (item == null) {\n\t\t\treturn undefined\n\t\t}\n\t\tverifyItemIsObject(item)\n\t\tregistry.pinSource(sourceId)\n\n\t\tconst itemType = registry.getSourceType(sourceId)\n\t\treturn {\n\t\t\ttype: BEGIN_DRAG,\n\t\t\tpayload: {\n\t\t\t\titemType,\n\t\t\t\titem,\n\t\t\t\tsourceId,\n\t\t\t\tclientOffset: clientOffset || null,\n\t\t\t\tsourceClientOffset: sourceClientOffset || null,\n\t\t\t\tisSourcePublic: !!publishSource,\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction verifyInvariants(\n\tsourceIds: Identifier[],\n\tmonitor: DragDropMonitor,\n\tregistry: HandlerRegistry,\n) {\n\tinvariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.')\n\tsourceIds.forEach(function (sourceId) {\n\t\tinvariant(\n\t\t\tregistry.getSource(sourceId),\n\t\t\t'Expected sourceIds to be registered.',\n\t\t)\n\t})\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset: any) {\n\tinvariant(\n\t\ttypeof getSourceClientOffset === 'function',\n\t\t'When clientOffset is provided, getSourceClientOffset must be a function.',\n\t)\n}\n\nfunction verifyItemIsObject(item: any) {\n\tinvariant(isObject(item), 'Item must be an object.')\n}\n\nfunction getDraggableSource(sourceIds: Identifier[], monitor: DragDropMonitor) {\n\tlet sourceId = null\n\tfor (let i = sourceIds.length - 1; i >= 0; i--) {\n\t\tif (monitor.canDragSource(sourceIds[i])) {\n\t\t\tsourceId = sourceIds[i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn sourceId\n}\n"],"names":["createBeginDrag","ResetCoordinatesAction","type","INIT_COORDS","payload","clientOffset","sourceClientOffset","manager","beginDrag","sourceIds","options","publishSource","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","setClientOffset","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","undefined","verifyItemIsObject","pinSource","itemType","getSourceType","BEGIN_DRAG","isSourcePublic","invariant","isDragging","forEach","isObject","i","length","canDragSource"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAwBgBA;;;eAAAA;;;2BAxBU;0BAYD;iCACO;uBACQ;AAExC,MAAMC,yBAAyB;IAC9BC,MAAMC,kBAAW;IACjBC,SAAS;QACRC,cAAc;QACdC,oBAAoB;;;AAIf,SAASN,gBAAgBO,OAAwB;IACvD,OAAO,SAASC,UACfC,YAA0B,EAAE,EAC5BC,UAA4B;QAC3BC,eAAe;KACf;QAED,MAAM,EACLA,gBAAgB,IAAI,EACpBN,YAAY,EACZO,qBAAqB,EACrB,GAAqBF;QACtB,MAAMG,UAAUN,QAAQO,UAAU;QAClC,MAAMC,WAAWR,QAAQS,WAAW;QAEpC,qDAAqD;QACrDT,QAAQU,QAAQ,CAACC,IAAAA,gCAAe,EAACb;QAEjCc,iBAAiBV,WAAWI,SAASE;QAErC,2BAA2B;QAC3B,MAAMK,WAAWC,mBAAmBZ,WAAWI;QAC/C,IAAIO,YAAY,MAAM;YACrBb,QAAQU,QAAQ,CAAChB;YACjB;;QAGD,+BAA+B;QAC/B,IAAIK,qBAAqC;QACzC,IAAID,cAAc;YACjB,IAAI,CAACO,uBAAuB;gBAC3B,MAAM,IAAIU,MAAM;;YAEjBC,sCAAsCX;YACtCN,qBAAqBM,sBAAsBQ;;QAG5C,kCAAkC;QAClCb,QAAQU,QAAQ,CAACC,IAAAA,gCAAe,EAACb,cAAcC;QAE/C,MAAMkB,SAAST,SAASU,SAAS,CAACL;QAClC,MAAMM,OAAOF,OAAOhB,SAAS,CAACK,SAASO;QACvC,4EAA4E;QAC5E,IAAIM,QAAQ,MAAM;YACjB,OAAOC;;QAERC,mBAAmBF;QACnBX,SAASc,SAAS,CAACT;QAEnB,MAAMU,WAAWf,SAASgB,aAAa,CAACX;QACxC,OAAO;YACNlB,MAAM8B,iBAAU;YAChB5B,SAAS;gBACR0B;gBACAJ;gBACAN;gBACAf,cAAcA,gBAAgB;gBAC9BC,oBAAoBA,sBAAsB;gBAC1C2B,gBAAgB,CAAC,CAACtB;;;;;AAMtB,SAASQ,iBACRV,SAAuB,EACvBI,OAAwB,EACxBE,QAAyB;IAEzBmB,IAAAA,oBAAS,EAAC,CAACrB,QAAQsB,UAAU,IAAI;IACjC1B,UAAU2B,OAAO,CAAC,SAAUhB,QAAQ;QACnCc,IAAAA,oBAAS,EACRnB,SAASU,SAAS,CAACL,WACnB;;;AAKH,SAASG,sCAAsCX,qBAA0B;IACxEsB,IAAAA,oBAAS,EACR,OAAOtB,0BAA0B,YACjC;;AAIF,SAASgB,mBAAmBF,IAAS;IACpCQ,IAAAA,oBAAS,EAACG,IAAAA,kBAAQ,EAACX,OAAO;;AAG3B,SAASL,mBAAmBZ,SAAuB,EAAEI,OAAwB;IAC5E,IAAIO,WAAW;IACf,IAAK,IAAIkB,IAAI7B,UAAU8B,MAAM,GAAG,GAAGD,KAAK,GAAGA,IAAK;QAC/C,IAAIzB,QAAQ2B,aAAa,CAAC/B,SAAS,CAAC6B,EAAE,GAAG;YACxClB,WAAWX,SAAS,CAAC6B,EAAE;YACvB;;;IAGF,OAAOlB"}