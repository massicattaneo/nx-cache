{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/chat/src/lib/Chat/Chat/ChatResponse/ChatResponse.tsx"],"sourcesContent":["import { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useFlags } from \"launchdarkly-react-client-sdk\"\nimport { ChatWatchlistEntity, CqsChunkStory, DatasetScope } from \"@rp/common/api-types\"\nimport { isFileStatusError } from \"@rp/common/utils\"\nimport { BigdataChatAvatar } from \"@rp/react/common/assets\"\nimport { getTextResponse, removeInlineAttributionsFromText } from \"@rp/react/common/chat\"\nimport { chatCustomerIo } from \"@rp/react/common/customer-io\"\nimport {\n  LlmSummaryError,\n  LlmTimings,\n  SummaryState,\n  createChunkMap,\n  useIsFreemium,\n  usePersistedChat,\n} from \"@rp/react/common/hooks\"\nimport { useAccount } from \"@rp/react/common/providers\"\nimport { WorkflowState } from \"@rp/react/common/workflow\"\nimport {\n  ChatInteractionType,\n  OriginSources,\n  ResponseBlock,\n  StoredAuditTrace,\n  StoredResponseBlockList,\n} from \"@rp/react/tanstack-api/chat\"\nimport {\n  LlmSourcesMetadata,\n  isLlmEngineSource,\n  isLlmExternalSource,\n  isLlmStandardSource,\n} from \"@rp/react/tanstack-api/llm-summary\"\nimport { UpdateToProBanner } from \"@rp/react/web/common/composite-components\"\nimport { getlocalOverrideFlags } from \"@rp/react/web/common/hooks\"\nimport { copyToClipboard } from \"@rp/react/web/common/utils\"\nimport { Box, ButtonBase, Typography } from \"@rp/react/web/mui/core\"\nimport { KeyboardArrowDown } from \"@rp/react/web/mui/icons\"\nimport { BriefChatSubscribeBanner } from \"../../../BriefChatSubscribeBanner\"\nimport { useChatDataContext } from \"../../ChatDataProvider/ChatDataProvider\"\nimport { getInteractionId } from \"../../PersistedChat/Chat\"\nimport { useChatFiles } from \"../../useChatFiles\"\nimport { ChatResponseText } from \"../Chat.styles\"\nimport { ChatMetrics } from \"./ChatMetrics\"\nimport { ChatResponseBlocks } from \"./ChatResponseBlocks/ChatResponseBlocks\"\nimport { ChatTextResponseSources } from \"./ChatTextResponse\"\nimport { ChatEngineChartResponse } from \"./EngineChart\"\nimport { FollowUpQuestions } from \"./FollowUpQuestions/FollowUpQuestions\"\nimport { MoreActions } from \"./FollowUpQuestions/MoreActions\"\nimport { RealTimeAudit } from \"./RealTimeAudit\"\nimport { ResponseActions } from \"./ResponseActions\"\n\ntype RenderAuditTrailCardHandler = (\n  props: { story: CqsChunkStory; interactionTimestamp: string; chatId: string },\n  index: number,\n) => React.ReactElement\n\ntype FeedbackChatHandler = (props: {\n  feedbackSentiment: number\n  interactionTimestamp: string\n}) => void\n\ntype LiveChatResponse = {\n  type: \"current\"\n  liveInteraction: {\n    userInput: string\n    error: boolean\n    stopped: boolean\n    edit: boolean\n    interactionType: ChatInteractionType\n    entities?: Array<ChatWatchlistEntity>\n    workflow?: WorkflowState\n    displayedMessage?: string\n  }\n  onStreamingComplete: (interactionId: string, data: SummaryState) => void\n  onError: (data: SummaryState, error: LlmSummaryError, wsError?: Event) => void\n  stopped?: boolean\n  stopGenerating: (data: SummaryState) => void\n  scope?: DatasetScope\n  filesIds: Array<string>\n}\n\ntype MemoryChatResponse = {\n  type: \"history\"\n  interactionId: string\n  responseBlock: ResponseBlock\n  sources: OriginSources\n  auditTraces: Array<StoredAuditTrace>\n  timings?: LlmTimings\n  metadata?: LlmSourcesMetadata\n  responseBlocks: StoredResponseBlockList\n  auditBlocks: StoredResponseBlockList\n}\n\ntype Props = (LiveChatResponse | MemoryChatResponse) & {\n  chatId: string\n  onChatFeedback?: FeedbackChatHandler\n  onRegenerateResponse?: (summary: SummaryState) => void\n  areMetricsEnabled?: boolean\n  renderCard: RenderAuditTrailCardHandler\n  auditMode: boolean\n  chatFeedback: Record<string, number>\n  useMasterRouter?: boolean\n  scope?: DatasetScope\n  webSocketUrl?: string\n  variant: \"desktop\" | \"mobile\"\n  onAuditTrailScroll: (containerY: number, interactionTimestamp: string) => void\n  areTracesOpen?: boolean\n  setTraceOpen: () => void\n  moreActions?: ReactNode\n  watchlistId?: string | undefined\n  showBriefBanner?: boolean\n  parentScrollContainer?: HTMLDivElement | null\n}\n\nexport type OnUserInteractionProps = {\n  action: \"preview\" | \"click\"\n  sourceUrl: string | null\n  sourceTitle: string\n  documentId: string | null\n  sourceLocation?: \"inline\" | \"carousel\"\n  sourceIndex?: number | null\n  sourceId: string | null\n  sourceName: string | null\n  providerId: string | null\n}\n\nexport const CHAT_RESPONSE_SOURCES_CLASS_NAME = \"chat-response-sources\"\n\nconst ChatResponse = (props: Props) => {\n  const {\n    type,\n    auditMode,\n    renderCard,\n    onRegenerateResponse,\n    onChatFeedback,\n    chatId,\n    areMetricsEnabled,\n    chatFeedback,\n    useMasterRouter,\n    scope,\n    webSocketUrl,\n    variant,\n    onAuditTrailScroll,\n    areTracesOpen,\n    setTraceOpen,\n    moreActions,\n  } = props\n\n  const {\n    ui: { followUpMap, isEditable },\n  } = useChatDataContext()\n\n  const filesIds = type === \"current\" ? props.filesIds : []\n  const { files: data, isLoading: isLoadingFiles } = useChatFiles(filesIds)\n\n  const validFiles = useMemo(() => {\n    return data\n      .filter(i => !isFileStatusError(i.status))\n      .map(file => ({\n        id: file.id ?? \"\",\n        fileName: file.name ?? \"\",\n        rawSize: file.size ?? 0,\n        uploadTs: file.date ?? \"\",\n      }))\n  }, [data])\n\n  const isMobile = variant === \"mobile\"\n  const [isAuditBlocksExpanded, setIsAuditBlocksExpanded] = useState(false)\n  const [textRef, setTextRef] = useState<HTMLDivElement | null>(null)\n\n  const handleAuditTrailToggle = () => {\n    if (type === \"history\") {\n      chatCustomerIo.responseAuditToggleClick({\n        interactionTimestamp: props.interactionId,\n        isAuditMode: !!areTracesOpen,\n        chatId,\n      })\n    }\n\n    setTraceOpen()\n\n    const containerElement =\n      type === \"history\"\n        ? document\n            .querySelector(`.${getInteractionId(props.interactionId)}`)\n            ?.getBoundingClientRect()\n        : undefined\n\n    if (containerElement) {\n      onAuditTrailScroll(containerElement.y, interactionTimestamp)\n    }\n  }\n\n  const { summary, status, error } = usePersistedChat(\n    props.type === \"current\" && !isLoadingFiles\n      ? {\n          chatId: chatId,\n          inputMessage: props.liveInteraction.userInput,\n          onComplete: props.onStreamingComplete,\n          stopped: props.stopped,\n          onStop: props.stopGenerating,\n          onError: props.onError,\n          scope: props.scope,\n          documentScope: validFiles,\n          edit: props.liveInteraction.edit,\n          watchlistId: props.watchlistId,\n          entities: props.liveInteraction.entities,\n          chatMetrics: areMetricsEnabled,\n          interactionType: props.liveInteraction.interactionType,\n          useMasterRouter,\n          webSocketUrl,\n          enableTracking: true,\n          workflow: props.liveInteraction.workflow,\n          displayedMessage: props.liveInteraction.displayedMessage,\n        }\n      : { enabled: false, chatId: \"\", inputMessage: \"\", interactionType: \"user_message\" },\n  )\n  const [showUpgradeToProBanner, setShowUpgradeToProBanner] = useState<boolean>(false)\n  const { quota } = useAccount()\n  const isFreemium = useIsFreemium(quota)\n  const sources = type === \"current\" ? summary.originSources : props.sources\n  const isEngineChartResponse = props.type === \"history\" && props.responseBlock.type === \"ENGINE\"\n  const responseBlocks = type === \"current\" ? summary.responseBlocks : props.responseBlocks\n  const auditBlocks = type === \"current\" ? summary.auditBlocks : props.auditBlocks\n  const { webFeUpgradeToPro } = useFlags()\n  const isUpgradeToProBannerShown = getlocalOverrideFlags(`webFeUpgradeToPro`, webFeUpgradeToPro)\n\n  const displayRealTimeAuditTrail = auditMode || type === \"current\"\n  const auditTraces =\n    type === \"current\"\n      ? summary.auditTraces\n      : props.auditTraces.map((audit, index) => ({ ...audit, queryId: index }))\n  const sourcesMetadata = type === \"current\" ? summary.metadata : props.metadata\n\n  const followUpQuestions = type === \"history\" ? followUpMap[props.interactionId] : undefined\n  const shouldHideResponse =\n    type === \"current\" &&\n    summary.response === \"\" &&\n    summary.responseBlocks.length === 0 &&\n    !props.liveInteraction.stopped &&\n    status !== \"ERROR\"\n  const getMetadata = (id: string) => {\n    if (!sourcesMetadata) {\n      return undefined\n    }\n\n    return sourcesMetadata[id]\n  }\n\n  const { chunkMap, externalMap } = useMemo(() => {\n    return createChunkMap(auditTraces, sources)\n  }, [auditTraces, sources])\n  const interactionTimestamp = type === \"history\" ? props.interactionId : \"\"\n  const onUserInteraction = useCallback(\n    ({\n      action,\n      sourceUrl,\n      sourceTitle,\n      documentId,\n      sourceLocation = \"inline\",\n      sourceIndex = null,\n      sourceName,\n      sourceId,\n      providerId,\n    }: OnUserInteractionProps) => {\n      chatCustomerIo.sourceInteraction({\n        action,\n        chatId,\n        interactionTimestamp,\n        sourceUrl,\n        sourceTitle,\n        sourceLocation,\n        documentId,\n        sourceIndex,\n        sourceId,\n        sourceName,\n        providerId,\n      })\n    },\n    [chatId, interactionTimestamp],\n  )\n\n  useEffect(() => {\n    if (isFreemium) {\n      setShowUpgradeToProBanner(true)\n    }\n  }, [isFreemium])\n\n  return (\n    <Box sx={{ mt: displayRealTimeAuditTrail ? 1 : 3 }}>\n      {areMetricsEnabled &&\n      (type === \"current\" || (type === \"history\" && props.timings !== undefined)) ? (\n        <ChatMetrics\n          interactionId={type === \"history\" ? props.interactionId : \"Waiting for id\"}\n          timings={type === \"current\" ? summary.timings : props.timings}\n        />\n      ) : null}\n\n      {displayRealTimeAuditTrail ? (\n        <RealTimeAudit\n          variant={variant}\n          status={\n            type === \"current\"\n              ? summary.statusData\n              : {\n                  step: \"completed\",\n                  message: \"Analysis Complete\",\n                  queries: auditTraces.map((trace, index) => ({\n                    query: trace.query.text,\n                    queryId: index,\n                  })),\n                }\n          }\n          stopped={type === \"current\" ? !!props.stopped : false}\n          engineSources={sources.filter(isLlmEngineSource)}\n          auditTraces={auditTraces}\n          chunkMap={chunkMap}\n          externalMap={externalMap}\n          onUserInteraction={onUserInteraction}\n          renderCard={(story, index) => {\n            return renderCard(\n              {\n                story,\n                interactionTimestamp: props.type === \"history\" ? props.interactionId : \"\",\n                chatId,\n              },\n              index,\n            )\n          }}\n          isOpen={areTracesOpen}\n          setIsOpen={handleAuditTrailToggle}\n        />\n      ) : null}\n      <Box\n        sx={{\n          opacity: shouldHideResponse ? 0 : 1,\n          transition: \"opacity 0.25s\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            gap: isMobile ? 1 : 2,\n            flexWrap: isMobile ? \"wrap\" : undefined,\n            mx: isMobile ? 2 : 0,\n          }}\n        >\n          <Box>\n            <BigdataChatAvatar height={isMobile ? 28 : 40} width={isMobile ? 28 : 40} />\n          </Box>\n          {isMobile ? (\n            <Typography sx={{ mt: 0.5, fontSize: \"body2.fontSize\", color: \"text.secondary\" }}>\n              Bigdata\n            </Typography>\n          ) : null}\n          {responseBlocks.length > 0 ? (\n            <Box ref={setTextRef} sx={{ width: 1 }}>\n              <ChatResponseBlocks\n                responseBlocks={responseBlocks}\n                mode={type}\n                inlineAttributionProps={{\n                  chunkMap,\n                  externalMap,\n                  onUserInteraction,\n                }}\n              />\n            </Box>\n          ) : null}\n          {auditBlocks.length > 0 ? (\n            <Box sx={{ width: 1 }}>\n              <ButtonBase\n                disableRipple\n                sx={{\n                  display: \"flex\",\n                  outline: 0,\n                  alignItems: \"center\",\n                  gap: 1,\n                  fontFamily: \"body1.fontFamily\",\n                  color: \"text.primary\",\n                  fontSize: 24,\n                  fontWeight: 700,\n                  mb: 2,\n                  width: 1,\n                  justifyContent: \"space-between\",\n                  borderTop: \"1px solid\",\n                  pt: 1,\n                  borderColor: \"outline.border\",\n                }}\n                onClick={() => setIsAuditBlocksExpanded(prev => !prev)}\n              >\n                Supporting Details\n                <KeyboardArrowDown\n                  sx={{ transform: isAuditBlocksExpanded ? \"rotateZ(180deg)\" : undefined }}\n                />\n              </ButtonBase>\n              <Box sx={{ display: !isAuditBlocksExpanded ? \"none\" : undefined }}>\n                <ChatResponseBlocks\n                  responseBlocks={auditBlocks}\n                  mode={type}\n                  inlineAttributionProps={{\n                    chunkMap,\n                    externalMap,\n                    onUserInteraction,\n                  }}\n                />\n              </Box>\n            </Box>\n          ) : null}\n          {error && error.type === \"ERROR\" ? (\n            <ChatResponseText sx={{ minWidth: 0 }}>{error.message}</ChatResponseText>\n          ) : null}\n        </Box>\n\n        {props.type === \"history\" && props.responseBlock.type === \"ENGINE\" && (\n          <Box sx={{ ml: isMobile ? 2 : 7, mr: isMobile ? 2 : 0, mb: 2.5 }}>\n            <ChatEngineChartResponse\n              sources={sources.filter(isLlmEngineSource)}\n              responseBlock={props.responseBlock}\n              scope={scope}\n            />\n          </Box>\n        )}\n        {(status === \"COMPLETED\" || type === \"history\") &&\n        sources.length &&\n        !isEngineChartResponse ? (\n          <Box\n            className={CHAT_RESPONSE_SOURCES_CLASS_NAME}\n            sx={{ ml: isMobile ? 0 : 7, mb: 2.5, position: \"relative\" }}\n          >\n            <ChatTextResponseSources\n              sources={sources.filter(isLlmStandardSource)}\n              getMetadata={getMetadata}\n              questions={type === \"history\" ? props.auditTraces : []}\n              onSourceClick={(source, index) => {\n                onUserInteraction({\n                  sourceUrl: source.url ?? null,\n                  sourceTitle: source.hd,\n                  sourceLocation: \"carousel\",\n                  action: \"click\",\n                  documentId: isLlmExternalSource(source) ? null : source.id,\n                  sourceIndex: index,\n                  sourceId: isLlmExternalSource(source) ? null : source.srcKey,\n                  sourceName: isLlmExternalSource(source) ? null : source.name,\n                  providerId:\n                    isLlmExternalSource(source) || !source.rpProviderId\n                      ? null\n                      : source.rpProviderId,\n                })\n              }}\n            />\n          </Box>\n        ) : null}\n        <BriefChatSubscribeBanner\n          parentScrollContainer={props.parentScrollContainer ?? null}\n          watchlistId={props.watchlistId}\n          show={props.showBriefBanner ?? false}\n          rootMargin=\"-100px\"\n        />\n        {isEditable && (status === \"COMPLETED\" || status === \"STOPPED\" || type === \"history\") ? (\n          <ResponseActions\n            variant={variant}\n            interactionTimestamp={props.type === \"history\" ? props.interactionId : \"\"}\n            onRegenerate={\n              onRegenerateResponse && !isEngineChartResponse\n                ? () => onRegenerateResponse(summary)\n                : null\n            }\n            onAuditToggle={auditMode ? handleAuditTrailToggle : null}\n            onChatFeedback={onChatFeedback || (() => {})}\n            chatFeedback={chatFeedback}\n            onCopy={() => {\n              const htmlToCopy =\n                isEngineChartResponse && props.responseBlock.type === \"ENGINE\"\n                  ? props.responseBlock.explainer\n                  : textRef?.innerHTML ?? removeInlineAttributionsFromText(summary.response)\n              const textToCopy =\n                isEngineChartResponse && props.responseBlock.type === \"ENGINE\"\n                  ? props.responseBlock.explainer\n                  : type === \"history\"\n                  ? getTextResponse(responseBlocks)\n                  : summary.response\n\n              const cleanTextToCopy = removeInlineAttributionsFromText(textToCopy)\n\n              function trackOnCopy() {\n                if (type === \"history\") {\n                  chatCustomerIo.responseAuditCopyClick({\n                    interactionTimestamp: props.interactionId,\n                    chatId,\n                  })\n                }\n              }\n\n              copyToClipboard({\n                textToCopy: cleanTextToCopy,\n                targetHTML: htmlToCopy,\n                onCopyCallback: trackOnCopy,\n              })\n            }}\n            isAuditActive={areTracesOpen}\n          />\n        ) : null}\n        {followUpQuestions ? (\n          <FollowUpQuestions\n            variant={variant}\n            interactionId={interactionTimestamp}\n            queries={followUpQuestions}\n          />\n        ) : null}\n        <MoreActions variant={variant}>{moreActions}</MoreActions>\n        {isUpgradeToProBannerShown && showUpgradeToProBanner && (\n          <UpdateToProBanner\n            closeBanner={() => {\n              setShowUpgradeToProBanner(false)\n            }}\n          />\n        )}\n      </Box>\n    </Box>\n  )\n}\n\nexport { ChatResponse }\nexport type { FeedbackChatHandler, RenderAuditTrailCardHandler }\n"],"names":["CHAT_RESPONSE_SOURCES_CLASS_NAME","ChatResponse","props","type","auditMode","renderCard","onRegenerateResponse","onChatFeedback","chatId","areMetricsEnabled","chatFeedback","useMasterRouter","scope","webSocketUrl","variant","onAuditTrailScroll","areTracesOpen","setTraceOpen","moreActions","ui","followUpMap","isEditable","useChatDataContext","filesIds","files","data","isLoading","isLoadingFiles","useChatFiles","validFiles","useMemo","filter","i","isFileStatusError","status","map","file","id","fileName","name","rawSize","size","uploadTs","date","isMobile","isAuditBlocksExpanded","setIsAuditBlocksExpanded","useState","textRef","setTextRef","handleAuditTrailToggle","document","chatCustomerIo","responseAuditToggleClick","interactionTimestamp","interactionId","isAuditMode","containerElement","querySelector","getInteractionId","getBoundingClientRect","undefined","y","summary","error","usePersistedChat","inputMessage","liveInteraction","userInput","onComplete","onStreamingComplete","stopped","onStop","stopGenerating","onError","documentScope","edit","watchlistId","entities","chatMetrics","interactionType","enableTracking","workflow","displayedMessage","enabled","showUpgradeToProBanner","setShowUpgradeToProBanner","quota","useAccount","isFreemium","useIsFreemium","sources","originSources","isEngineChartResponse","responseBlock","responseBlocks","auditBlocks","webFeUpgradeToPro","useFlags","isUpgradeToProBannerShown","getlocalOverrideFlags","displayRealTimeAuditTrail","auditTraces","audit","index","queryId","sourcesMetadata","metadata","followUpQuestions","shouldHideResponse","response","length","getMetadata","chunkMap","externalMap","createChunkMap","onUserInteraction","useCallback","action","sourceUrl","sourceTitle","documentId","sourceLocation","sourceIndex","sourceName","sourceId","providerId","sourceInteraction","useEffect","Box","sx","mt","timings","ChatMetrics","RealTimeAudit","statusData","step","message","queries","trace","query","text","engineSources","isLlmEngineSource","story","isOpen","setIsOpen","opacity","transition","display","gap","flexWrap","mx","BigdataChatAvatar","height","width","Typography","fontSize","color","ref","ChatResponseBlocks","mode","inlineAttributionProps","ButtonBase","disableRipple","outline","alignItems","fontFamily","fontWeight","mb","justifyContent","borderTop","pt","borderColor","onClick","prev","KeyboardArrowDown","transform","ChatResponseText","minWidth","ml","mr","ChatEngineChartResponse","className","position","ChatTextResponseSources","isLlmStandardSource","questions","onSourceClick","source","url","hd","isLlmExternalSource","srcKey","rpProviderId","BriefChatSubscribeBanner","parentScrollContainer","show","showBriefBanner","rootMargin","ResponseActions","onRegenerate","onAuditToggle","onCopy","htmlToCopy","explainer","innerHTML","removeInlineAttributionsFromText","textToCopy","getTextResponse","cleanTextToCopy","trackOnCopy","responseAuditCopyClick","copyToClipboard","targetHTML","onCopyCallback","isAuditActive","FollowUpQuestions","MoreActions","UpdateToProBanner","closeBanner"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}