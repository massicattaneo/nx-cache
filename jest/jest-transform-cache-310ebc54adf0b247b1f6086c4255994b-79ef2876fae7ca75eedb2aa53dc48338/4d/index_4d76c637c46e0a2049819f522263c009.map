{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once weâ€™ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesnâ€™t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n"],"names":["factoryLabel","effects","ok","nok","type","markerType","stringType","self","size","seen","start","code","enter","consume","exit","atBreak","parser","constructs","markdownLineEnding","contentType","labelInside","markdownSpace","labelEscape"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;+BAkCeA;;;eAAAA;;;wCAhCgC;AAgCzC,SAASA,aAAaC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,UAAU;IACzE,MAAMC,OAAO,IAAI;IACjB,IAAIC,OAAO;IACX,oBAAoB,GACpB,IAAIC;IACJ,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,MAAMC,IAAI;QACjBV,QAAQW,KAAK,CAACR;QACdH,QAAQW,KAAK,CAACP;QACdJ,QAAQY,OAAO,CAACF;QAChBV,QAAQa,IAAI,CAACT;QACbJ,QAAQW,KAAK,CAACN;QACd,OAAOS;IACT;IAEA;;;;;;;;;GASC,GACD,SAASA,QAAQJ,IAAI;QACnB,IACEH,OAAO,OACPG,SAAS,QACTA,SAAS,MACRA,SAAS,MAAM,CAACF,QACjB,uDAAuD;QACvD,wEAAwE;QACxE,2BAA2B;QAC3B,yBAAyB;QACzB,oBAAoB,GACnBE,SAAS,MACR,CAACH,QACD,4BAA4BD,KAAKS,MAAM,CAACC,UAAU,EACpD;YACA,OAAOd,IAAIQ;QACb;QACA,IAAIA,SAAS,IAAI;YACfV,QAAQa,IAAI,CAACR;YACbL,QAAQW,KAAK,CAACP;YACdJ,QAAQY,OAAO,CAACF;YAChBV,QAAQa,IAAI,CAACT;YACbJ,QAAQa,IAAI,CAACV;YACb,OAAOF;QACT;QAEA,gDAAgD;QAChD,IAAIgB,IAAAA,0CAAkB,EAACP,OAAO;YAC5BV,QAAQW,KAAK,CAAC;YACdX,QAAQY,OAAO,CAACF;YAChBV,QAAQa,IAAI,CAAC;YACb,OAAOC;QACT;QACAd,QAAQW,KAAK,CAAC,eAAe;YAC3BO,aAAa;QACf;QACA,OAAOC,YAAYT;IACrB;IAEA;;;;;;;;;GASC,GACD,SAASS,YAAYT,IAAI;QACvB,IACEA,SAAS,QACTA,SAAS,MACTA,SAAS,MACTO,IAAAA,0CAAkB,EAACP,SACnBH,SAAS,KACT;YACAP,QAAQa,IAAI,CAAC;YACb,OAAOC,QAAQJ;QACjB;QACAV,QAAQY,OAAO,CAACF;QAChB,IAAI,CAACF,MAAMA,OAAO,CAACY,IAAAA,qCAAa,EAACV;QACjC,OAAOA,SAAS,KAAKW,cAAcF;IACrC;IAEA;;;;;;;;;GASC,GACD,SAASE,YAAYX,IAAI;QACvB,IAAIA,SAAS,MAAMA,SAAS,MAAMA,SAAS,IAAI;YAC7CV,QAAQY,OAAO,CAACF;YAChBH;YACA,OAAOY;QACT;QACA,OAAOA,YAAYT;IACrB;AACF"}