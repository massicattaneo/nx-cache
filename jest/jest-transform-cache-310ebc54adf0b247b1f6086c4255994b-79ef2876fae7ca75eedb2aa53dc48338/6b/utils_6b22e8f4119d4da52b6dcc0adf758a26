f0acf0905642d8160b4c43280d26b71a
'use strict';
/**
 * Ensures there are no duplicate keys when building a procedure.
 * @internal
 */ function mergeWithoutOverrides(obj1, ...objs) {
    const newObj = Object.assign(Object.create(null), obj1);
    for (const overrides of objs){
        for(const key in overrides){
            if (key in newObj && newObj[key] !== overrides[key]) {
                throw new Error(`Duplicate key ${key}`);
            }
            newObj[key] = overrides[key];
        }
    }
    return newObj;
}
/**
 * Check that value is object
 * @internal
 */ function isObject(value) {
    return !!value && !Array.isArray(value) && typeof value === 'object';
}
/**
 * Create an object without inheriting anything from `Object.prototype`
 * @internal
 */ function omitPrototype(obj) {
    return Object.assign(Object.create(null), obj);
}
exports.isObject = isObject;
exports.mergeWithoutOverrides = mergeWithoutOverrides;
exports.omitPrototype = omitPrototype;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhlcmUgYXJlIG5vIGR1cGxpY2F0ZSBrZXlzIHdoZW4gYnVpbGRpbmcgYSBwcm9jZWR1cmUuXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBtZXJnZVdpdGhvdXRPdmVycmlkZXMob2JqMSwgLi4ub2Jqcykge1xuICAgIGNvbnN0IG5ld09iaiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgb2JqMSk7XG4gICAgZm9yIChjb25zdCBvdmVycmlkZXMgb2Ygb2Jqcyl7XG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gb3ZlcnJpZGVzKXtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gbmV3T2JqICYmIG5ld09ialtrZXldICE9PSBvdmVycmlkZXNba2V5XSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGtleSAke2tleX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld09ialtrZXldID0gb3ZlcnJpZGVzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbn1cbi8qKlxuICogQ2hlY2sgdGhhdCB2YWx1ZSBpcyBvYmplY3RcbiAqIEBpbnRlcm5hbFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG4vKipcbiAqIENyZWF0ZSBhbiBvYmplY3Qgd2l0aG91dCBpbmhlcml0aW5nIGFueXRoaW5nIGZyb20gYE9iamVjdC5wcm90b3R5cGVgXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiBvbWl0UHJvdG90eXBlKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIG9iaik7XG59XG5cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbmV4cG9ydHMubWVyZ2VXaXRob3V0T3ZlcnJpZGVzID0gbWVyZ2VXaXRob3V0T3ZlcnJpZGVzO1xuZXhwb3J0cy5vbWl0UHJvdG90eXBlID0gb21pdFByb3RvdHlwZTtcbiJdLCJuYW1lcyI6WyJtZXJnZVdpdGhvdXRPdmVycmlkZXMiLCJvYmoxIiwib2JqcyIsIm5ld09iaiIsIk9iamVjdCIsImFzc2lnbiIsImNyZWF0ZSIsIm92ZXJyaWRlcyIsImtleSIsIkVycm9yIiwiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsIm9taXRQcm90b3R5cGUiLCJvYmoiLCJleHBvcnRzIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7O0NBR0MsR0FBRyxTQUFTQSxzQkFBc0JDLElBQUksRUFBRSxHQUFHQyxJQUFJO0lBQzVDLE1BQU1DLFNBQVNDLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0UsTUFBTSxDQUFDLE9BQU9MO0lBQ2xELEtBQUssTUFBTU0sYUFBYUwsS0FBSztRQUN6QixJQUFJLE1BQU1NLE9BQU9ELFVBQVU7WUFDdkIsSUFBSUMsT0FBT0wsVUFBVUEsTUFBTSxDQUFDSyxJQUFJLEtBQUtELFNBQVMsQ0FBQ0MsSUFBSSxFQUFFO2dCQUNqRCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxjQUFjLEVBQUVELElBQUksQ0FBQztZQUMxQztZQUNBTCxNQUFNLENBQUNLLElBQUksR0FBR0QsU0FBUyxDQUFDQyxJQUFJO1FBQ2hDO0lBQ0o7SUFDQSxPQUFPTDtBQUNYO0FBQ0E7OztDQUdDLEdBQUcsU0FBU08sU0FBU0MsS0FBSztJQUN2QixPQUFPLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVUsT0FBT0EsVUFBVTtBQUNoRTtBQUNBOzs7Q0FHQyxHQUFHLFNBQVNHLGNBQWNDLEdBQUc7SUFDMUIsT0FBT1gsT0FBT0MsTUFBTSxDQUFDRCxPQUFPRSxNQUFNLENBQUMsT0FBT1M7QUFDOUM7QUFFQUMsUUFBUU4sUUFBUSxHQUFHQTtBQUNuQk0sUUFBUWhCLHFCQUFxQixHQUFHQTtBQUNoQ2dCLFFBQVFGLGFBQWEsR0FBR0EifQ==