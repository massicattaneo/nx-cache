{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/longest-streak/index.js"],"sourcesContent":["/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n"],"names":["longestStreak","value","substring","source","String","index","indexOf","expected","count","max","TypeError","length"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;;;CASC;;;;+BACeA;;;eAAAA;;;AAAT,SAASA,cAAcC,KAAK,EAAEC,SAAS;IAC5C,MAAMC,SAASC,OAAOH;IACtB,IAAII,QAAQF,OAAOG,OAAO,CAACJ;IAC3B,IAAIK,WAAWF;IACf,IAAIG,QAAQ;IACZ,IAAIC,MAAM;IAEV,IAAI,OAAOP,cAAc,UAAU;QACjC,MAAM,IAAIQ,UAAU;IACtB;IAEA,MAAOL,UAAU,CAAC,EAAG;QACnB,IAAIA,UAAUE,UAAU;YACtB,IAAI,EAAEC,QAAQC,KAAK;gBACjBA,MAAMD;YACR;QACF,OAAO;YACLA,QAAQ;QACV;QAEAD,WAAWF,QAAQH,UAAUS,MAAM;QACnCN,QAAQF,OAAOG,OAAO,CAACJ,WAAWK;IACpC;IAEA,OAAOE;AACT"}