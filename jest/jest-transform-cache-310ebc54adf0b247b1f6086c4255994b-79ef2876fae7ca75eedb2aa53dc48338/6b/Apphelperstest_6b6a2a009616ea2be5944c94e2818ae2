0a30a394077b37bfc62c54f568474406
"use strict";
jest.mock("@datadog/browser-rum");
jest.mock("./utils/clerkOverrides");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _browserrum = require("@datadog/browser-rum");
const _Apphelpers = require("./App.helpers");
const _clerkOverrides = require("./utils/clerkOverrides");
beforeEach(jest.clearAllMocks);
describe("App.helpers", ()=>{
    describe("handleClerkLoad", ()=>{
        const initialLoginId = "mock-initial-login-id-123";
        describe("when isLoaded", ()=>{
            const isLoaded = true;
            describe("when isInitialLogin", ()=>{
                const isInitialLogin = true;
                beforeEach(()=>{
                    (0, _Apphelpers.handleClerkLoad)({
                        isLoaded,
                        initialLoginId,
                        isInitialLogin
                    });
                });
                it("should call addAction with the correct params", ()=>{
                    expect(_browserrum.datadogRum.addAction).toHaveBeenCalledTimes(1);
                    expect(_browserrum.datadogRum.addAction).toHaveBeenCalledWith("Create User Custom Action End", {
                        initialLoginId
                    });
                });
                it("should call clerkOverrides", ()=>{
                    expect(_clerkOverrides.clerkOverrides).toHaveBeenCalledTimes(1);
                });
            });
            describe("when !isInitialLogin", ()=>{
                const isInitialLogin = false;
                beforeEach(()=>{
                    (0, _Apphelpers.handleClerkLoad)({
                        isLoaded,
                        initialLoginId,
                        isInitialLogin
                    });
                });
                it("should not call addAction", ()=>{
                    expect(_browserrum.datadogRum.addAction).not.toHaveBeenCalled();
                });
                it("should call clerkOverrides", ()=>{
                    expect(_clerkOverrides.clerkOverrides).toHaveBeenCalledTimes(1);
                });
            });
        });
        describe("when !isLoaded", ()=>{
            const isLoaded = false;
            const isInitialLogin = true;
            beforeEach(()=>{
                (0, _Apphelpers.handleClerkLoad)({
                    isLoaded,
                    initialLoginId,
                    isInitialLogin
                });
            });
            it("should not call addAction", ()=>{
                expect(_browserrum.datadogRum.addAction).not.toHaveBeenCalled();
            });
            it("should not call clerkOverrides", ()=>{
                expect(_clerkOverrides.clerkOverrides).not.toHaveBeenCalled();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL0FwcC5oZWxwZXJzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGF0YWRvZ1J1bSB9IGZyb20gXCJAZGF0YWRvZy9icm93c2VyLXJ1bVwiXG5pbXBvcnQgeyBoYW5kbGVDbGVya0xvYWQgfSBmcm9tIFwiLi9BcHAuaGVscGVyc1wiXG5pbXBvcnQgeyBjbGVya092ZXJyaWRlcyB9IGZyb20gXCIuL3V0aWxzL2NsZXJrT3ZlcnJpZGVzXCJcblxuamVzdC5tb2NrKFwiQGRhdGFkb2cvYnJvd3Nlci1ydW1cIilcbmplc3QubW9jayhcIi4vdXRpbHMvY2xlcmtPdmVycmlkZXNcIilcblxuYmVmb3JlRWFjaChqZXN0LmNsZWFyQWxsTW9ja3MpXG5cbmRlc2NyaWJlKFwiQXBwLmhlbHBlcnNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcImhhbmRsZUNsZXJrTG9hZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbExvZ2luSWQgPSBcIm1vY2staW5pdGlhbC1sb2dpbi1pZC0xMjNcIlxuICAgIGRlc2NyaWJlKFwid2hlbiBpc0xvYWRlZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBpc0xvYWRlZCA9IHRydWVcbiAgICAgIGRlc2NyaWJlKFwid2hlbiBpc0luaXRpYWxMb2dpblwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSW5pdGlhbExvZ2luID0gdHJ1ZVxuXG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgIGhhbmRsZUNsZXJrTG9hZCh7IGlzTG9hZGVkLCBpbml0aWFsTG9naW5JZCwgaXNJbml0aWFsTG9naW4gfSlcbiAgICAgICAgfSlcblxuICAgICAgICBpdChcInNob3VsZCBjYWxsIGFkZEFjdGlvbiB3aXRoIHRoZSBjb3JyZWN0IHBhcmFtc1wiLCAoKSA9PiB7XG4gICAgICAgICAgZXhwZWN0KGRhdGFkb2dSdW0uYWRkQWN0aW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgICAgICAgICBleHBlY3QoZGF0YWRvZ1J1bS5hZGRBY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiQ3JlYXRlIFVzZXIgQ3VzdG9tIEFjdGlvbiBFbmRcIiwge1xuICAgICAgICAgICAgaW5pdGlhbExvZ2luSWQsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICBpdChcInNob3VsZCBjYWxsIGNsZXJrT3ZlcnJpZGVzXCIsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoY2xlcmtPdmVycmlkZXMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgZGVzY3JpYmUoXCJ3aGVuICFpc0luaXRpYWxMb2dpblwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSW5pdGlhbExvZ2luID0gZmFsc2VcblxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICBoYW5kbGVDbGVya0xvYWQoeyBpc0xvYWRlZCwgaW5pdGlhbExvZ2luSWQsIGlzSW5pdGlhbExvZ2luIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgaXQoXCJzaG91bGQgbm90IGNhbGwgYWRkQWN0aW9uXCIsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoZGF0YWRvZ1J1bS5hZGRBY3Rpb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgICAgfSlcblxuICAgICAgICBpdChcInNob3VsZCBjYWxsIGNsZXJrT3ZlcnJpZGVzXCIsICgpID0+IHtcbiAgICAgICAgICBleHBlY3QoY2xlcmtPdmVycmlkZXMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoXCJ3aGVuICFpc0xvYWRlZFwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBpc0xvYWRlZCA9IGZhbHNlXG4gICAgICBjb25zdCBpc0luaXRpYWxMb2dpbiA9IHRydWVcblxuICAgICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGhhbmRsZUNsZXJrTG9hZCh7IGlzTG9hZGVkLCBpbml0aWFsTG9naW5JZCwgaXNJbml0aWFsTG9naW4gfSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KFwic2hvdWxkIG5vdCBjYWxsIGFkZEFjdGlvblwiLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChkYXRhZG9nUnVtLmFkZEFjdGlvbikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgICAgfSlcblxuICAgICAgaXQoXCJzaG91bGQgbm90IGNhbGwgY2xlcmtPdmVycmlkZXNcIiwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoY2xlcmtPdmVycmlkZXMpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn0pXG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImRlc2NyaWJlIiwiaW5pdGlhbExvZ2luSWQiLCJpc0xvYWRlZCIsImlzSW5pdGlhbExvZ2luIiwiaGFuZGxlQ2xlcmtMb2FkIiwiaXQiLCJleHBlY3QiLCJkYXRhZG9nUnVtIiwiYWRkQWN0aW9uIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJjbGVya092ZXJyaWRlcyIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiO0FBSUFBLEtBQUtDLElBQUksQ0FBQztBQUNWRCxLQUFLQyxJQUFJLENBQUM7Ozs7NEJBTGlCOzRCQUNLO2dDQUNEO0FBSy9CQyxXQUFXRixLQUFLRyxhQUFhO0FBRTdCQyxTQUFTLGVBQWU7SUFDdEJBLFNBQVMsbUJBQW1CO1FBQzFCLE1BQU1DLGlCQUFpQjtRQUN2QkQsU0FBUyxpQkFBaUI7WUFDeEIsTUFBTUUsV0FBVztZQUNqQkYsU0FBUyx1QkFBdUI7Z0JBQzlCLE1BQU1HLGlCQUFpQjtnQkFFdkJMLFdBQVc7b0JBQ1RNLElBQUFBLDJCQUFlLEVBQUM7d0JBQUVGO3dCQUFVRDt3QkFBZ0JFO29CQUFlO2dCQUM3RDtnQkFFQUUsR0FBRyxpREFBaUQ7b0JBQ2xEQyxPQUFPQyxzQkFBVSxDQUFDQyxTQUFTLEVBQUVDLHFCQUFxQixDQUFDO29CQUNuREgsT0FBT0Msc0JBQVUsQ0FBQ0MsU0FBUyxFQUFFRSxvQkFBb0IsQ0FBQyxpQ0FBaUM7d0JBQ2pGVDtvQkFDRjtnQkFDRjtnQkFFQUksR0FBRyw4QkFBOEI7b0JBQy9CQyxPQUFPSyw4QkFBYyxFQUFFRixxQkFBcUIsQ0FBQztnQkFDL0M7WUFDRjtZQUVBVCxTQUFTLHdCQUF3QjtnQkFDL0IsTUFBTUcsaUJBQWlCO2dCQUV2QkwsV0FBVztvQkFDVE0sSUFBQUEsMkJBQWUsRUFBQzt3QkFBRUY7d0JBQVVEO3dCQUFnQkU7b0JBQWU7Z0JBQzdEO2dCQUVBRSxHQUFHLDZCQUE2QjtvQkFDOUJDLE9BQU9DLHNCQUFVLENBQUNDLFNBQVMsRUFBRUksR0FBRyxDQUFDQyxnQkFBZ0I7Z0JBQ25EO2dCQUVBUixHQUFHLDhCQUE4QjtvQkFDL0JDLE9BQU9LLDhCQUFjLEVBQUVGLHFCQUFxQixDQUFDO2dCQUMvQztZQUNGO1FBQ0Y7UUFFQVQsU0FBUyxrQkFBa0I7WUFDekIsTUFBTUUsV0FBVztZQUNqQixNQUFNQyxpQkFBaUI7WUFFdkJMLFdBQVc7Z0JBQ1RNLElBQUFBLDJCQUFlLEVBQUM7b0JBQUVGO29CQUFVRDtvQkFBZ0JFO2dCQUFlO1lBQzdEO1lBRUFFLEdBQUcsNkJBQTZCO2dCQUM5QkMsT0FBT0Msc0JBQVUsQ0FBQ0MsU0FBUyxFQUFFSSxHQUFHLENBQUNDLGdCQUFnQjtZQUNuRDtZQUVBUixHQUFHLGtDQUFrQztnQkFDbkNDLE9BQU9LLDhCQUFjLEVBQUVDLEdBQUcsQ0FBQ0MsZ0JBQWdCO1lBQzdDO1FBQ0Y7SUFDRjtBQUNGIn0=