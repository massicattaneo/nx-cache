{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/source-selector/src/utils/toggleSourceSelectionFunc.ts"],"sourcesContent":["import { SetStateAction } from \"react\"\nimport { AutosuggestSource } from \"@rp/react/tanstack-api/content\"\nimport { SourceSelectorSelectedSourceInfo } from \"../sourceSelector.types\"\n\ntype ToggleSourceSelectionFuncProps = {\n  e: React.MouseEvent<HTMLDivElement>\n  allAutosuggestSources: Array<AutosuggestSource>\n  selectedSources: Array<SourceSelectorSelectedSourceInfo>\n  setSelectedSources: (value: SetStateAction<Array<SourceSelectorSelectedSourceInfo>>) => void\n  hasReachedMaxSelection: boolean\n  showMaxSelectionErrorToast: () => void\n  planComparisonHandleOpen: () => void\n}\n\nfunction toggleSourceSelectionFunc({\n  e,\n  selectedSources,\n  setSelectedSources,\n  allAutosuggestSources,\n  hasReachedMaxSelection,\n  showMaxSelectionErrorToast,\n  planComparisonHandleOpen,\n}: ToggleSourceSelectionFuncProps): void {\n  const id = e.currentTarget.getAttribute(\"data-id\")\n  const entitled = e.currentTarget.getAttribute(\"data-entitled\") === \"true\"\n\n  if (!entitled) {\n    planComparisonHandleOpen()\n    return\n  }\n\n  if (!id) return\n\n  if (hasReachedMaxSelection) {\n    showMaxSelectionErrorToast()\n    return\n  }\n\n  const idx = selectedSources.findIndex(source => source.id === id)\n\n  // removing source\n\n  if (idx !== -1) {\n    setSelectedSources(selectedSources => [\n      ...selectedSources.slice(0, idx),\n      ...selectedSources.slice(idx + 1),\n    ])\n    return\n  }\n\n  // adding source\n\n  const newSource = allAutosuggestSources.find(autosuggestSource => autosuggestSource.id === id)\n\n  if (!newSource) return\n\n  const newSourceSelection: SourceSelectorSelectedSourceInfo = {\n    id,\n    name: newSource.name,\n    packageIDs: newSource.rpPackageId,\n  }\n\n  setSelectedSources(selectedSources =>\n    [newSourceSelection, ...selectedSources].sort((a, b) => a.name.localeCompare(b.name)),\n  )\n}\n\nexport { toggleSourceSelectionFunc }\n"],"names":["toggleSourceSelectionFunc","e","selectedSources","setSelectedSources","allAutosuggestSources","hasReachedMaxSelection","showMaxSelectionErrorToast","planComparisonHandleOpen","id","currentTarget","getAttribute","entitled","idx","findIndex","source","slice","newSource","find","autosuggestSource","newSourceSelection","name","packageIDs","rpPackageId","sort","a","b","localeCompare"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAmESA;;;eAAAA;;;AArDT,SAASA,0BAA0B,EACjCC,CAAC,EACDC,eAAe,EACfC,kBAAkB,EAClBC,qBAAqB,EACrBC,sBAAsB,EACtBC,0BAA0B,EAC1BC,wBAAwB,EACO;IAC/B,MAAMC,KAAKP,EAAEQ,aAAa,CAACC,YAAY,CAAC;IACxC,MAAMC,WAAWV,EAAEQ,aAAa,CAACC,YAAY,CAAC,qBAAqB;IAEnE,IAAI,CAACC,UAAU;QACbJ;QACA;IACF;IAEA,IAAI,CAACC,IAAI;IAET,IAAIH,wBAAwB;QAC1BC;QACA;IACF;IAEA,MAAMM,MAAMV,gBAAgBW,SAAS,CAACC,CAAAA,SAAUA,OAAON,EAAE,KAAKA;IAE9D,kBAAkB;IAElB,IAAII,QAAQ,CAAC,GAAG;QACdT,mBAAmBD,CAAAA,kBAAmB;mBACjCA,gBAAgBa,KAAK,CAAC,GAAGH;mBACzBV,gBAAgBa,KAAK,CAACH,MAAM;aAChC;QACD;IACF;IAEA,gBAAgB;IAEhB,MAAMI,YAAYZ,sBAAsBa,IAAI,CAACC,CAAAA,oBAAqBA,kBAAkBV,EAAE,KAAKA;IAE3F,IAAI,CAACQ,WAAW;IAEhB,MAAMG,qBAAuD;QAC3DX;QACAY,MAAMJ,UAAUI,IAAI;QACpBC,YAAYL,UAAUM,WAAW;IACnC;IAEAnB,mBAAmBD,CAAAA,kBACjB;YAACiB;eAAuBjB;SAAgB,CAACqB,IAAI,CAAC,CAACC,GAAGC,IAAMD,EAAEJ,IAAI,CAACM,aAAa,CAACD,EAAEL,IAAI;AAEvF"}