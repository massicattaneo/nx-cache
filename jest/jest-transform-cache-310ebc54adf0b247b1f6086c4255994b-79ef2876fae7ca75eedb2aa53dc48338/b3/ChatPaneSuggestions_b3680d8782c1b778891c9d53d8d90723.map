{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/pages/Files/FilesV2/components/ChatPane/ChatPaneSuggestions/ChatPaneSuggestions.tsx"],"sourcesContent":["import React, { useMemo } from \"react\"\nimport { AddPromptParams } from \"@rp/react/web/chat\"\nimport { Box, Typography } from \"@rp/react/web/mui/core\"\nimport { getFilesChatPaneSuggestions } from \"../../../utils/getChatPaneSuggestions\"\nimport { ChatPaneGreeting } from \"../ChatPaneGreeting\"\nimport { ChatPaneSuggestionsItem } from \"./ChatPaneSuggestionsItem\"\nimport { FilesChatPaneSuggestion } from \"./chatPaneSuggestions.types\"\n\ntype ChatPaneSuggestionsProps = {\n  name: string\n  isSingleDocument: boolean\n  addPrompt: (params: AddPromptParams) => Promise<void>\n}\n\nfunction ChatPaneSuggestions({ name, isSingleDocument, addPrompt }: ChatPaneSuggestionsProps) {\n  const filesChatPaneSuggestions = useMemo(\n    () => getFilesChatPaneSuggestions({ isSingleDocument }),\n    [isSingleDocument],\n  )\n\n  const handleClick = (suggestion: FilesChatPaneSuggestion) =>\n    addPrompt({\n      prompt: suggestion.prompt(),\n      displayedMessage: suggestion.displayPrompt(),\n    })\n\n  return (\n    <>\n      <ChatPaneGreeting name={name} isSingleDocument={isSingleDocument} />\n\n      <Box\n        sx={{\n          backgroundColor: \"elevation.dp06\",\n          borderRadius: 2,\n          p: 2,\n        }}\n      >\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          {`Suggestion${filesChatPaneSuggestions.length === 1 ? \"\" : \"s\"}:`}\n        </Typography>\n\n        <Box sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", gap: 1.5 }}>\n          {filesChatPaneSuggestions.map(suggestion => (\n            <ChatPaneSuggestionsItem\n              suggestion={suggestion}\n              onClick={handleClick}\n              key={suggestion.id}\n            />\n          ))}\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport { ChatPaneSuggestions }\n"],"names":["ChatPaneSuggestions","name","isSingleDocument","addPrompt","filesChatPaneSuggestions","useMemo","getFilesChatPaneSuggestions","handleClick","suggestion","prompt","displayedMessage","displayPrompt","ChatPaneGreeting","Box","sx","backgroundColor","borderRadius","p","Typography","variant","color","mb","length","display","flexDirection","flexWrap","gap","map","ChatPaneSuggestionsItem","onClick","id"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAuDSA;;;eAAAA;;;;+DAvDsB;sBAEC;wCACY;kCACX;yCACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASxC,SAASA,oBAAoB,EAAEC,IAAI,EAAEC,gBAAgB,EAAEC,SAAS,EAA4B;IAC1F,MAAMC,2BAA2BC,IAAAA,cAAO,EACtC,IAAMC,IAAAA,mDAA2B,EAAC;YAAEJ;QAAiB,IACrD;QAACA;KAAiB;IAGpB,MAAMK,cAAc,CAACC,aACnBL,UAAU;YACRM,QAAQD,WAAWC,MAAM;YACzBC,kBAAkBF,WAAWG,aAAa;QAC5C;IAEF,qBACE;;0BACE,qBAACC,kCAAgB;gBAACX,MAAMA;gBAAMC,kBAAkBA;;0BAEhD,sBAACW,SAAG;gBACFC,IAAI;oBACFC,iBAAiB;oBACjBC,cAAc;oBACdC,GAAG;gBACL;;kCAEA,qBAACC,gBAAU;wBAACC,SAAQ;wBAAQC,OAAM;wBAAiBN,IAAI;4BAAEO,IAAI;wBAAE;kCAC5D,CAAC,UAAU,EAAEjB,yBAAyBkB,MAAM,KAAK,IAAI,KAAK,IAAI,CAAC,CAAC;;kCAGnE,qBAACT,SAAG;wBAACC,IAAI;4BAAES,SAAS;4BAAQC,eAAe;4BAAOC,UAAU;4BAAQC,KAAK;wBAAI;kCAC1EtB,yBAAyBuB,GAAG,CAACnB,CAAAA,2BAC5B,qBAACoB,gDAAuB;gCACtBpB,YAAYA;gCACZqB,SAAStB;+BACJC,WAAWsB,EAAE;;;;;;AAOhC"}