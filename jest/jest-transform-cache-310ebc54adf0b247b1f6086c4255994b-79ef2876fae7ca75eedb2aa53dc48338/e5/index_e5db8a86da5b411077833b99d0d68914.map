{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-util-combine-extensions/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n"],"names":["combineExtensions","combineHtmlExtensions","hasOwnProperty","extensions","all","index","length","syntaxExtension","extension","hook","maybe","call","undefined","left","right","code","value","constructs","Array","isArray","existing","list","before","add","push","splice","htmlExtensions","handlers","htmlExtension","type"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IAceA,iBAAiB;eAAjBA;;IA6EAC,qBAAqB;eAArBA;;;sCAzFK;AAErB,MAAMC,iBAAiB,CAAC,EAAEA,cAAc;AAUjC,SAASF,kBAAkBG,UAAU;IAC1C,gCAAgC,GAChC,MAAMC,MAAM,CAAC;IACb,IAAIC,QAAQ,CAAC;IAEb,MAAO,EAAEA,QAAQF,WAAWG,MAAM,CAAE;QAClCC,gBAAgBH,KAAKD,UAAU,CAACE,MAAM;IACxC;IAEA,OAAOD;AACT;AAEA;;;;;;;;CAQC,GACD,SAASG,gBAAgBH,GAAG,EAAEI,SAAS;IACrC,4BAA4B,GAC5B,IAAIC;IAEJ,IAAKA,QAAQD,UAAW;QACtB,MAAME,QAAQR,eAAeS,IAAI,CAACP,KAAKK,QAAQL,GAAG,CAACK,KAAK,GAAGG;QAC3D,oCAAoC,GACpC,MAAMC,OAAOH,SAAUN,CAAAA,GAAG,CAACK,KAAK,GAAG,CAAC,CAAA;QACpC,gDAAgD,GAChD,MAAMK,QAAQN,SAAS,CAACC,KAAK;QAC7B,mBAAmB,GACnB,IAAIM;QAEJ,IAAID,OAAO;YACT,IAAKC,QAAQD,MAAO;gBAClB,IAAI,CAACZ,eAAeS,IAAI,CAACE,MAAME,OAAOF,IAAI,CAACE,KAAK,GAAG,EAAE;gBACrD,MAAMC,QAAQF,KAAK,CAACC,KAAK;gBACzBE,WACE,sCAAsC;gBACtCJ,IAAI,CAACE,KAAK,EACVG,MAAMC,OAAO,CAACH,SAASA,QAAQA,QAAQ;oBAACA;iBAAM,GAAG,EAAE;YAEvD;QACF;IACF;AACF;AAEA;;;;;;;CAOC,GACD,SAASC,WAAWG,QAAQ,EAAEC,IAAI;IAChC,IAAIhB,QAAQ,CAAC;IACb,2BAA2B,GAC3B,MAAMiB,SAAS,EAAE;IAEjB,MAAO,EAAEjB,QAAQgB,KAAKf,MAAM,CAAE;QAE1Be,CAAAA,IAAI,CAAChB,MAAM,CAACkB,GAAG,KAAK,UAAUH,WAAWE,MAAK,EAAGE,IAAI,CAACH,IAAI,CAAChB,MAAM;IACrE;IAEAoB,IAAAA,4BAAM,EAACL,UAAU,GAAG,GAAGE;AACzB;AAUO,SAASrB,sBAAsByB,cAAc;IAClD,0BAA0B,GAC1B,MAAMC,WAAW,CAAC;IAClB,IAAItB,QAAQ,CAAC;IAEb,MAAO,EAAEA,QAAQqB,eAAepB,MAAM,CAAE;QACtCsB,cAAcD,UAAUD,cAAc,CAACrB,MAAM;IAC/C;IAEA,OAAOsB;AACT;AAEA;;;;;;;;CAQC,GACD,SAASC,cAAcxB,GAAG,EAAEI,SAAS;IACnC,gCAAgC,GAChC,IAAIC;IAEJ,IAAKA,QAAQD,UAAW;QACtB,MAAME,QAAQR,eAAeS,IAAI,CAACP,KAAKK,QAAQL,GAAG,CAACK,KAAK,GAAGG;QAC3D,MAAMC,OAAOH,SAAUN,CAAAA,GAAG,CAACK,KAAK,GAAG,CAAC,CAAA;QACpC,MAAMK,QAAQN,SAAS,CAACC,KAAK;QAC7B,0BAA0B,GAC1B,IAAIoB;QAEJ,IAAIf,OAAO;YACT,IAAKe,QAAQf,MAAO;gBAClB,6EAA6E;gBAC7ED,IAAI,CAACgB,KAAK,GAAGf,KAAK,CAACe,KAAK;YAC1B;QACF;IACF;AACF"}