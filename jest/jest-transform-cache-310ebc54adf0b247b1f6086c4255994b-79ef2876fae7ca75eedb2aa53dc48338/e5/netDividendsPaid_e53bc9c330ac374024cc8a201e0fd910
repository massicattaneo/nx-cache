4204df195ced2337d31836bae23ba691
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "netDividendsPaid", {
    enumerable: true,
    get: function() {
        return netDividendsPaid;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _WatchlistDataTablePriceCell = require("../../WatchlistDataTableCells/WatchlistDataTablePriceCell");
const _genericColumn = require("../../genericColumn");
const _fiscalPeriodUtils = require("../../utils/fiscalPeriodUtils");
function netDividendsPaid(tableName) {
    const title = "Net Dividends Paid (FQ)";
    return (0, _genericColumn.genericColumn)({
        endpoint: "companyCashFlowStatement",
        columnKeys: [
            "netDividendsPaid"
        ],
        size: 130,
        title,
        enableSorting: true,
        enableHiding: true,
        tooltip: "Cash paid to shareholders.",
        cell: (info)=>{
            var _info_row_original_financialData_companyCashFlowStatement_data, _info_row_original_financialData_companyCashFlowStatement, _info_row_original_financialData_companyCashFlowStatement_data1, _info_row_original_financialData_companyCashFlowStatement1;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_WatchlistDataTablePriceCell.WatchlistDataTablePriceCell, {
                tooltip: `Explain the ${title}`,
                queryResult: info.row.original.financialData.companyCashFlowStatement,
                currency: (_info_row_original_financialData_companyCashFlowStatement = info.row.original.financialData.companyCashFlowStatement) === null || _info_row_original_financialData_companyCashFlowStatement === void 0 ? void 0 : (_info_row_original_financialData_companyCashFlowStatement_data = _info_row_original_financialData_companyCashFlowStatement.data) === null || _info_row_original_financialData_companyCashFlowStatement_data === void 0 ? void 0 : _info_row_original_financialData_companyCashFlowStatement_data.reportedCurrency,
                onClick: ()=>{
                    var _info_row_original_financialData_companyCashFlowStatement_data, _info_row_original_financialData_companyCashFlowStatement, _info_row_original_onChatWithCell, _info_row_original;
                    const fiscalPeriod = (0, _fiscalPeriodUtils.getCashFlowFiscalPeriod)(info.row.original);
                    (_info_row_original_onChatWithCell = (_info_row_original = info.row.original).onChatWithCell) === null || _info_row_original_onChatWithCell === void 0 ? void 0 : _info_row_original_onChatWithCell.call(_info_row_original, {
                        prompt: `What has ${info.row.original.entityInfo.name} reported in ${fiscalPeriod} about net dividends paid?`,
                        value: (_info_row_original_financialData_companyCashFlowStatement = info.row.original.financialData.companyCashFlowStatement) === null || _info_row_original_financialData_companyCashFlowStatement === void 0 ? void 0 : (_info_row_original_financialData_companyCashFlowStatement_data = _info_row_original_financialData_companyCashFlowStatement.data) === null || _info_row_original_financialData_companyCashFlowStatement_data === void 0 ? void 0 : _info_row_original_financialData_companyCashFlowStatement_data.netDividendsPaid,
                        entityInfo: info.row.original.entityInfo,
                        columnName: `${tableName}: ${title}`
                    });
                },
                value: (_info_row_original_financialData_companyCashFlowStatement1 = info.row.original.financialData.companyCashFlowStatement) === null || _info_row_original_financialData_companyCashFlowStatement1 === void 0 ? void 0 : (_info_row_original_financialData_companyCashFlowStatement_data1 = _info_row_original_financialData_companyCashFlowStatement1.data) === null || _info_row_original_financialData_companyCashFlowStatement_data1 === void 0 ? void 0 : _info_row_original_financialData_companyCashFlowStatement_data1.netDividendsPaid
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9lbmRwb2ludHMvY29tcGFueUNhc2hGbG93U3RhdGVtZW50L25ldERpdmlkZW5kc1BhaWQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdhdGNobGlzdERhdGFUYWJsZVByaWNlQ2VsbCB9IGZyb20gXCIuLi8uLi9XYXRjaGxpc3REYXRhVGFibGVDZWxscy9XYXRjaGxpc3REYXRhVGFibGVQcmljZUNlbGxcIlxuaW1wb3J0IHsgZ2VuZXJpY0NvbHVtbiB9IGZyb20gXCIuLi8uLi9nZW5lcmljQ29sdW1uXCJcbmltcG9ydCB7IGdldENhc2hGbG93RmlzY2FsUGVyaW9kIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2Zpc2NhbFBlcmlvZFV0aWxzXCJcblxuZnVuY3Rpb24gbmV0RGl2aWRlbmRzUGFpZCh0YWJsZU5hbWU6IHN0cmluZykge1xuICBjb25zdCB0aXRsZSA9IFwiTmV0IERpdmlkZW5kcyBQYWlkIChGUSlcIlxuICByZXR1cm4gZ2VuZXJpY0NvbHVtbih7XG4gICAgZW5kcG9pbnQ6IFwiY29tcGFueUNhc2hGbG93U3RhdGVtZW50XCIsXG4gICAgY29sdW1uS2V5czogW1wibmV0RGl2aWRlbmRzUGFpZFwiXSxcbiAgICBzaXplOiAxMzAsXG4gICAgdGl0bGUsXG4gICAgZW5hYmxlU29ydGluZzogdHJ1ZSxcbiAgICBlbmFibGVIaWRpbmc6IHRydWUsXG4gICAgdG9vbHRpcDogXCJDYXNoIHBhaWQgdG8gc2hhcmVob2xkZXJzLlwiLFxuICAgIGNlbGw6IGluZm8gPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFdhdGNobGlzdERhdGFUYWJsZVByaWNlQ2VsbFxuICAgICAgICAgIHRvb2x0aXA9e2BFeHBsYWluIHRoZSAke3RpdGxlfWB9XG4gICAgICAgICAgcXVlcnlSZXN1bHQ9e2luZm8ucm93Lm9yaWdpbmFsLmZpbmFuY2lhbERhdGEuY29tcGFueUNhc2hGbG93U3RhdGVtZW50fVxuICAgICAgICAgIGN1cnJlbmN5PXtcbiAgICAgICAgICAgIGluZm8ucm93Lm9yaWdpbmFsLmZpbmFuY2lhbERhdGEuY29tcGFueUNhc2hGbG93U3RhdGVtZW50Py5kYXRhPy5yZXBvcnRlZEN1cnJlbmN5XG4gICAgICAgICAgfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpc2NhbFBlcmlvZCA9IGdldENhc2hGbG93RmlzY2FsUGVyaW9kKGluZm8ucm93Lm9yaWdpbmFsKVxuICAgICAgICAgICAgaW5mby5yb3cub3JpZ2luYWwub25DaGF0V2l0aENlbGw/Lih7XG4gICAgICAgICAgICAgIHByb21wdDogYFdoYXQgaGFzICR7aW5mby5yb3cub3JpZ2luYWwuZW50aXR5SW5mby5uYW1lfSByZXBvcnRlZCBpbiAke2Zpc2NhbFBlcmlvZH0gYWJvdXQgbmV0IGRpdmlkZW5kcyBwYWlkP2AsXG4gICAgICAgICAgICAgIHZhbHVlOlxuICAgICAgICAgICAgICAgIGluZm8ucm93Lm9yaWdpbmFsLmZpbmFuY2lhbERhdGEuY29tcGFueUNhc2hGbG93U3RhdGVtZW50Py5kYXRhPy5uZXREaXZpZGVuZHNQYWlkLFxuICAgICAgICAgICAgICBlbnRpdHlJbmZvOiBpbmZvLnJvdy5vcmlnaW5hbC5lbnRpdHlJbmZvLFxuICAgICAgICAgICAgICBjb2x1bW5OYW1lOiBgJHt0YWJsZU5hbWV9OiAke3RpdGxlfWAsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH19XG4gICAgICAgICAgdmFsdWU9e2luZm8ucm93Lm9yaWdpbmFsLmZpbmFuY2lhbERhdGEuY29tcGFueUNhc2hGbG93U3RhdGVtZW50Py5kYXRhPy5uZXREaXZpZGVuZHNQYWlkfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgIH0sXG4gIH0pXG59XG5cbmV4cG9ydCB7IG5ldERpdmlkZW5kc1BhaWQgfVxuIl0sIm5hbWVzIjpbIm5ldERpdmlkZW5kc1BhaWQiLCJ0YWJsZU5hbWUiLCJ0aXRsZSIsImdlbmVyaWNDb2x1bW4iLCJlbmRwb2ludCIsImNvbHVtbktleXMiLCJzaXplIiwiZW5hYmxlU29ydGluZyIsImVuYWJsZUhpZGluZyIsInRvb2x0aXAiLCJjZWxsIiwiaW5mbyIsIldhdGNobGlzdERhdGFUYWJsZVByaWNlQ2VsbCIsInF1ZXJ5UmVzdWx0Iiwicm93Iiwib3JpZ2luYWwiLCJmaW5hbmNpYWxEYXRhIiwiY29tcGFueUNhc2hGbG93U3RhdGVtZW50IiwiY3VycmVuY3kiLCJkYXRhIiwicmVwb3J0ZWRDdXJyZW5jeSIsIm9uQ2xpY2siLCJmaXNjYWxQZXJpb2QiLCJnZXRDYXNoRmxvd0Zpc2NhbFBlcmlvZCIsIm9uQ2hhdFdpdGhDZWxsIiwicHJvbXB0IiwiZW50aXR5SW5mbyIsIm5hbWUiLCJ2YWx1ZSIsImNvbHVtbk5hbWUiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF1Q1NBOzs7ZUFBQUE7Ozs7NkNBdkNtQzsrQkFDZDttQ0FDVTtBQUV4QyxTQUFTQSxpQkFBaUJDLFNBQWlCO0lBQ3pDLE1BQU1DLFFBQVE7SUFDZCxPQUFPQyxJQUFBQSw0QkFBYSxFQUFDO1FBQ25CQyxVQUFVO1FBQ1ZDLFlBQVk7WUFBQztTQUFtQjtRQUNoQ0MsTUFBTTtRQUNOSjtRQUNBSyxlQUFlO1FBQ2ZDLGNBQWM7UUFDZEMsU0FBUztRQUNUQyxNQUFNQyxDQUFBQTtnQkFNRUEsZ0VBQUFBLDJEQVlLQSxpRUFBQUE7WUFqQlgscUJBQ0UscUJBQUNDLHdEQUEyQjtnQkFDMUJILFNBQVMsQ0FBQyxZQUFZLEVBQUVQLE1BQU0sQ0FBQztnQkFDL0JXLGFBQWFGLEtBQUtHLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLENBQUNDLHdCQUF3QjtnQkFDckVDLFFBQVEsR0FDTlAsNERBQUFBLEtBQUtHLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDQyxhQUFhLENBQUNDLHdCQUF3QixjQUF4RE4saUZBQUFBLGlFQUFBQSwwREFBMERRLElBQUksY0FBOURSLHFGQUFBQSwrREFBZ0VTLGdCQUFnQjtnQkFFbEZDLFNBQVM7d0JBS0hWLGdFQUFBQSwyREFISkEsbUNBQUFBO29CQURBLE1BQU1XLGVBQWVDLElBQUFBLDBDQUF1QixFQUFDWixLQUFLRyxHQUFHLENBQUNDLFFBQVE7cUJBQzlESixvQ0FBQUEsQ0FBQUEscUJBQUFBLEtBQUtHLEdBQUcsQ0FBQ0MsUUFBUSxFQUFDUyxjQUFjLGNBQWhDYix3REFBQUEsdUNBQUFBLG9CQUFtQzt3QkFDakNjLFFBQVEsQ0FBQyxTQUFTLEVBQUVkLEtBQUtHLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDVyxVQUFVLENBQUNDLElBQUksQ0FBQyxhQUFhLEVBQUVMLGFBQWEsMEJBQTBCLENBQUM7d0JBQzdHTSxLQUFLLEdBQ0hqQiw0REFBQUEsS0FBS0csR0FBRyxDQUFDQyxRQUFRLENBQUNDLGFBQWEsQ0FBQ0Msd0JBQXdCLGNBQXhETixpRkFBQUEsaUVBQUFBLDBEQUEwRFEsSUFBSSxjQUE5RFIscUZBQUFBLCtEQUFnRVgsZ0JBQWdCO3dCQUNsRjBCLFlBQVlmLEtBQUtHLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDVyxVQUFVO3dCQUN4Q0csWUFBWSxDQUFDLEVBQUU1QixVQUFVLEVBQUUsRUFBRUMsTUFBTSxDQUFDO29CQUN0QztnQkFDRjtnQkFDQTBCLEtBQUssR0FBRWpCLDZEQUFBQSxLQUFLRyxHQUFHLENBQUNDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDQyx3QkFBd0IsY0FBeEROLGtGQUFBQSxrRUFBQUEsMkRBQTBEUSxJQUFJLGNBQTlEUixzRkFBQUEsZ0VBQWdFWCxnQkFBZ0I7O1FBRzdGO0lBQ0Y7QUFDRiJ9