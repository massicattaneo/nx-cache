df267a1c5044ae21bc70f9169760e268
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "transformBriefFormToPost", {
    enumerable: true,
    get: function() {
        return transformBriefFormToPost;
    }
});
const _apitypes = require("@rp/common/api-types");
const daysDict = {
    MON: "mon",
    TUE: "tue",
    WED: "wed",
    THU: "thu",
    FRI: "fri",
    SAT: "sat",
    SUN: "sun"
};
const everyDay = [
    daysDict.MON,
    daysDict.TUE,
    daysDict.WED,
    daysDict.THU,
    daysDict.FRI,
    daysDict.SAT,
    daysDict.SUN
];
const weekdays = [
    daysDict.MON,
    daysDict.TUE,
    daysDict.WED,
    daysDict.THU,
    daysDict.FRI
];
const getScheduleDays = (dayLabel)=>daysDict[dayLabel];
const parseDaysFromCron = (daysFromCron)=>{
    if ([
        "?",
        "*"
    ].includes(daysFromCron)) {
        return everyDay;
    }
    if (daysFromCron === "1-5") {
        return weekdays;
    }
    return daysFromCron.split(",").map(getScheduleDays);
};
const transformBriefFormToPost = (brief, userId)=>{
    const splitSchedule = brief.schedule.schedulerExpression.split(/\s+/gm);
    const daysFromCron = splitSchedule[4];
    const days = parseDaysFromCron(daysFromCron);
    return {
        brief_name: brief.name.trim(),
        user_id: userId,
        watchlist_ids: [
            brief.watchlistId
        ],
        email: (0, _apitypes.isEmailNotificationSchedule)(brief.schedule) ? brief.schedule.destinationParams.emails[0] : "",
        delivery_modes: [
            "email"
        ],
        schedule: {
            timezone: brief.schedule.timezone,
            days,
            hour: parseInt(splitSchedule[1]),
            minute: parseInt(splitSchedule[0])
        }
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2JyaWVmL3NyYy91dGlscy9icmllZlBhZ2VIb29rcy51dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0VtYWlsTm90aWZpY2F0aW9uU2NoZWR1bGUgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHtcbiAgQnJpZWZDb25maWdBUEksXG4gIEJyaWVmQ29uZmlnQVBJU2NoZWR1bGVEYXksXG4gIEJyaWVmQ29uZmlnRm9ybSxcbn0gZnJvbSBcIkBycC9yZWFjdC90YW5zdGFjay1hcGkvYnJpZWZcIlxuXG5jb25zdCBkYXlzRGljdDogUmVjb3JkPHN0cmluZywgQnJpZWZDb25maWdBUElTY2hlZHVsZURheT4gPSB7XG4gIE1PTjogXCJtb25cIiBhcyBjb25zdCxcbiAgVFVFOiBcInR1ZVwiIGFzIGNvbnN0LFxuICBXRUQ6IFwid2VkXCIgYXMgY29uc3QsXG4gIFRIVTogXCJ0aHVcIiBhcyBjb25zdCxcbiAgRlJJOiBcImZyaVwiIGFzIGNvbnN0LFxuICBTQVQ6IFwic2F0XCIgYXMgY29uc3QsXG4gIFNVTjogXCJzdW5cIiBhcyBjb25zdCxcbn1cblxuY29uc3QgZXZlcnlEYXk6IEFycmF5PEJyaWVmQ29uZmlnQVBJU2NoZWR1bGVEYXk+ID0gW1xuICBkYXlzRGljdC5NT04sXG4gIGRheXNEaWN0LlRVRSxcbiAgZGF5c0RpY3QuV0VELFxuICBkYXlzRGljdC5USFUsXG4gIGRheXNEaWN0LkZSSSxcbiAgZGF5c0RpY3QuU0FULFxuICBkYXlzRGljdC5TVU4sXG5dXG5cbmNvbnN0IHdlZWtkYXlzOiBBcnJheTxCcmllZkNvbmZpZ0FQSVNjaGVkdWxlRGF5PiA9IFtcbiAgZGF5c0RpY3QuTU9OLFxuICBkYXlzRGljdC5UVUUsXG4gIGRheXNEaWN0LldFRCxcbiAgZGF5c0RpY3QuVEhVLFxuICBkYXlzRGljdC5GUkksXG5dXG5cbmNvbnN0IGdldFNjaGVkdWxlRGF5cyA9IChkYXlMYWJlbDogc3RyaW5nKTogQnJpZWZDb25maWdBUElTY2hlZHVsZURheSA9PiBkYXlzRGljdFtkYXlMYWJlbF1cblxuY29uc3QgcGFyc2VEYXlzRnJvbUNyb24gPSAoZGF5c0Zyb21Dcm9uOiBzdHJpbmcpOiBBcnJheTxCcmllZkNvbmZpZ0FQSVNjaGVkdWxlRGF5PiA9PiB7XG4gIGlmIChbXCI/XCIsIFwiKlwiXS5pbmNsdWRlcyhkYXlzRnJvbUNyb24pKSB7XG4gICAgcmV0dXJuIGV2ZXJ5RGF5XG4gIH1cblxuICBpZiAoZGF5c0Zyb21Dcm9uID09PSBcIjEtNVwiKSB7XG4gICAgcmV0dXJuIHdlZWtkYXlzXG4gIH1cblxuICByZXR1cm4gZGF5c0Zyb21Dcm9uLnNwbGl0KFwiLFwiKS5tYXAoZ2V0U2NoZWR1bGVEYXlzKVxufVxuXG5jb25zdCB0cmFuc2Zvcm1CcmllZkZvcm1Ub1Bvc3QgPSAoYnJpZWY6IEJyaWVmQ29uZmlnRm9ybSwgdXNlcklkOiBzdHJpbmcpOiBCcmllZkNvbmZpZ0FQSSA9PiB7XG4gIGNvbnN0IHNwbGl0U2NoZWR1bGUgPSBicmllZi5zY2hlZHVsZS5zY2hlZHVsZXJFeHByZXNzaW9uLnNwbGl0KC9cXHMrL2dtKVxuXG4gIGNvbnN0IGRheXNGcm9tQ3JvbiA9IHNwbGl0U2NoZWR1bGVbNF1cbiAgY29uc3QgZGF5cyA9IHBhcnNlRGF5c0Zyb21Dcm9uKGRheXNGcm9tQ3JvbilcblxuICByZXR1cm4ge1xuICAgIGJyaWVmX25hbWU6IGJyaWVmLm5hbWUudHJpbSgpLFxuICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICB3YXRjaGxpc3RfaWRzOiBbYnJpZWYud2F0Y2hsaXN0SWRdLFxuICAgIGVtYWlsOiBpc0VtYWlsTm90aWZpY2F0aW9uU2NoZWR1bGUoYnJpZWYuc2NoZWR1bGUpXG4gICAgICA/IGJyaWVmLnNjaGVkdWxlLmRlc3RpbmF0aW9uUGFyYW1zLmVtYWlsc1swXVxuICAgICAgOiBcIlwiLFxuICAgIGRlbGl2ZXJ5X21vZGVzOiBbXCJlbWFpbFwiXSxcbiAgICBzY2hlZHVsZToge1xuICAgICAgdGltZXpvbmU6IGJyaWVmLnNjaGVkdWxlLnRpbWV6b25lLFxuICAgICAgZGF5cyxcbiAgICAgIGhvdXI6IHBhcnNlSW50KHNwbGl0U2NoZWR1bGVbMV0pLFxuICAgICAgbWludXRlOiBwYXJzZUludChzcGxpdFNjaGVkdWxlWzBdKSxcbiAgICB9LFxuICB9XG59XG5cbmV4cG9ydCB7IHRyYW5zZm9ybUJyaWVmRm9ybVRvUG9zdCB9XG4iXSwibmFtZXMiOlsidHJhbnNmb3JtQnJpZWZGb3JtVG9Qb3N0IiwiZGF5c0RpY3QiLCJNT04iLCJUVUUiLCJXRUQiLCJUSFUiLCJGUkkiLCJTQVQiLCJTVU4iLCJldmVyeURheSIsIndlZWtkYXlzIiwiZ2V0U2NoZWR1bGVEYXlzIiwiZGF5TGFiZWwiLCJwYXJzZURheXNGcm9tQ3JvbiIsImRheXNGcm9tQ3JvbiIsImluY2x1ZGVzIiwic3BsaXQiLCJtYXAiLCJicmllZiIsInVzZXJJZCIsInNwbGl0U2NoZWR1bGUiLCJzY2hlZHVsZSIsInNjaGVkdWxlckV4cHJlc3Npb24iLCJkYXlzIiwiYnJpZWZfbmFtZSIsIm5hbWUiLCJ0cmltIiwidXNlcl9pZCIsIndhdGNobGlzdF9pZHMiLCJ3YXRjaGxpc3RJZCIsImVtYWlsIiwiaXNFbWFpbE5vdGlmaWNhdGlvblNjaGVkdWxlIiwiZGVzdGluYXRpb25QYXJhbXMiLCJlbWFpbHMiLCJkZWxpdmVyeV9tb2RlcyIsInRpbWV6b25lIiwiaG91ciIsInBhcnNlSW50IiwibWludXRlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBd0VTQTs7O2VBQUFBOzs7MEJBeEVtQztBQU81QyxNQUFNQyxXQUFzRDtJQUMxREMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxLQUFLO0lBQ0xDLEtBQUs7SUFDTEMsS0FBSztBQUNQO0FBRUEsTUFBTUMsV0FBNkM7SUFDakRSLFNBQVNDLEdBQUc7SUFDWkQsU0FBU0UsR0FBRztJQUNaRixTQUFTRyxHQUFHO0lBQ1pILFNBQVNJLEdBQUc7SUFDWkosU0FBU0ssR0FBRztJQUNaTCxTQUFTTSxHQUFHO0lBQ1pOLFNBQVNPLEdBQUc7Q0FDYjtBQUVELE1BQU1FLFdBQTZDO0lBQ2pEVCxTQUFTQyxHQUFHO0lBQ1pELFNBQVNFLEdBQUc7SUFDWkYsU0FBU0csR0FBRztJQUNaSCxTQUFTSSxHQUFHO0lBQ1pKLFNBQVNLLEdBQUc7Q0FDYjtBQUVELE1BQU1LLGtCQUFrQixDQUFDQyxXQUFnRFgsUUFBUSxDQUFDVyxTQUFTO0FBRTNGLE1BQU1DLG9CQUFvQixDQUFDQztJQUN6QixJQUFJO1FBQUM7UUFBSztLQUFJLENBQUNDLFFBQVEsQ0FBQ0QsZUFBZTtRQUNyQyxPQUFPTDtJQUNUO0lBRUEsSUFBSUssaUJBQWlCLE9BQU87UUFDMUIsT0FBT0o7SUFDVDtJQUVBLE9BQU9JLGFBQWFFLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUNOO0FBQ3JDO0FBRUEsTUFBTVgsMkJBQTJCLENBQUNrQixPQUF3QkM7SUFDeEQsTUFBTUMsZ0JBQWdCRixNQUFNRyxRQUFRLENBQUNDLG1CQUFtQixDQUFDTixLQUFLLENBQUM7SUFFL0QsTUFBTUYsZUFBZU0sYUFBYSxDQUFDLEVBQUU7SUFDckMsTUFBTUcsT0FBT1Ysa0JBQWtCQztJQUUvQixPQUFPO1FBQ0xVLFlBQVlOLE1BQU1PLElBQUksQ0FBQ0MsSUFBSTtRQUMzQkMsU0FBU1I7UUFDVFMsZUFBZTtZQUFDVixNQUFNVyxXQUFXO1NBQUM7UUFDbENDLE9BQU9DLElBQUFBLHFDQUEyQixFQUFDYixNQUFNRyxRQUFRLElBQzdDSCxNQUFNRyxRQUFRLENBQUNXLGlCQUFpQixDQUFDQyxNQUFNLENBQUMsRUFBRSxHQUMxQztRQUNKQyxnQkFBZ0I7WUFBQztTQUFRO1FBQ3pCYixVQUFVO1lBQ1JjLFVBQVVqQixNQUFNRyxRQUFRLENBQUNjLFFBQVE7WUFDakNaO1lBQ0FhLE1BQU1DLFNBQVNqQixhQUFhLENBQUMsRUFBRTtZQUMvQmtCLFFBQVFELFNBQVNqQixhQUFhLENBQUMsRUFBRTtRQUNuQztJQUNGO0FBQ0YifQ==