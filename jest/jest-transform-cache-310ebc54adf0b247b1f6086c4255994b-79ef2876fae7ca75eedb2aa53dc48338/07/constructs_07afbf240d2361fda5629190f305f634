f16c13d0352e93225e9ec9b4f99517d5
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    attentionMarkers: function() {
        return attentionMarkers;
    },
    contentInitial: function() {
        return contentInitial;
    },
    disable: function() {
        return disable;
    },
    document: function() {
        return document;
    },
    flow: function() {
        return flow;
    },
    flowInitial: function() {
        return flowInitial;
    },
    insideSpan: function() {
        return insideSpan;
    },
    string: function() {
        return string;
    },
    text: function() {
        return text;
    }
});
const _micromarkcorecommonmark = require("micromark-core-commonmark");
const _text = require("./initialize/text.js");
const document = {
    [42]: _micromarkcorecommonmark.list,
    [43]: _micromarkcorecommonmark.list,
    [45]: _micromarkcorecommonmark.list,
    [48]: _micromarkcorecommonmark.list,
    [49]: _micromarkcorecommonmark.list,
    [50]: _micromarkcorecommonmark.list,
    [51]: _micromarkcorecommonmark.list,
    [52]: _micromarkcorecommonmark.list,
    [53]: _micromarkcorecommonmark.list,
    [54]: _micromarkcorecommonmark.list,
    [55]: _micromarkcorecommonmark.list,
    [56]: _micromarkcorecommonmark.list,
    [57]: _micromarkcorecommonmark.list,
    [62]: _micromarkcorecommonmark.blockQuote
};
const contentInitial = {
    [91]: _micromarkcorecommonmark.definition
};
const flowInitial = {
    [-2]: _micromarkcorecommonmark.codeIndented,
    [-1]: _micromarkcorecommonmark.codeIndented,
    [32]: _micromarkcorecommonmark.codeIndented
};
const flow = {
    [35]: _micromarkcorecommonmark.headingAtx,
    [42]: _micromarkcorecommonmark.thematicBreak,
    [45]: [
        _micromarkcorecommonmark.setextUnderline,
        _micromarkcorecommonmark.thematicBreak
    ],
    [60]: _micromarkcorecommonmark.htmlFlow,
    [61]: _micromarkcorecommonmark.setextUnderline,
    [95]: _micromarkcorecommonmark.thematicBreak,
    [96]: _micromarkcorecommonmark.codeFenced,
    [126]: _micromarkcorecommonmark.codeFenced
};
const string = {
    [38]: _micromarkcorecommonmark.characterReference,
    [92]: _micromarkcorecommonmark.characterEscape
};
const text = {
    [-5]: _micromarkcorecommonmark.lineEnding,
    [-4]: _micromarkcorecommonmark.lineEnding,
    [-3]: _micromarkcorecommonmark.lineEnding,
    [33]: _micromarkcorecommonmark.labelStartImage,
    [38]: _micromarkcorecommonmark.characterReference,
    [42]: _micromarkcorecommonmark.attention,
    [60]: [
        _micromarkcorecommonmark.autolink,
        _micromarkcorecommonmark.htmlText
    ],
    [91]: _micromarkcorecommonmark.labelStartLink,
    [92]: [
        _micromarkcorecommonmark.hardBreakEscape,
        _micromarkcorecommonmark.characterEscape
    ],
    [93]: _micromarkcorecommonmark.labelEnd,
    [95]: _micromarkcorecommonmark.attention,
    [96]: _micromarkcorecommonmark.codeText
};
const insideSpan = {
    null: [
        _micromarkcorecommonmark.attention,
        _text.resolver
    ]
};
const attentionMarkers = {
    null: [
        42,
        95
    ]
};
const disable = {
    null: []
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2NvbnN0cnVjdHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV4dGVuc2lvbn0gRXh0ZW5zaW9uXG4gKi9cblxuaW1wb3J0IHtcbiAgYXR0ZW50aW9uLFxuICBhdXRvbGluayxcbiAgYmxvY2tRdW90ZSxcbiAgY2hhcmFjdGVyRXNjYXBlLFxuICBjaGFyYWN0ZXJSZWZlcmVuY2UsXG4gIGNvZGVGZW5jZWQsXG4gIGNvZGVJbmRlbnRlZCxcbiAgY29kZVRleHQsXG4gIGRlZmluaXRpb24sXG4gIGhhcmRCcmVha0VzY2FwZSxcbiAgaGVhZGluZ0F0eCxcbiAgaHRtbEZsb3csXG4gIGh0bWxUZXh0LFxuICBsYWJlbEVuZCxcbiAgbGFiZWxTdGFydEltYWdlLFxuICBsYWJlbFN0YXJ0TGluayxcbiAgbGluZUVuZGluZyxcbiAgbGlzdCxcbiAgc2V0ZXh0VW5kZXJsaW5lLFxuICB0aGVtYXRpY0JyZWFrXG59IGZyb20gJ21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsnXG5pbXBvcnQge3Jlc29sdmVyIGFzIHJlc29sdmVUZXh0fSBmcm9tICcuL2luaXRpYWxpemUvdGV4dC5qcydcblxuLyoqIEBzYXRpc2ZpZXMge0V4dGVuc2lvblsnZG9jdW1lbnQnXX0gKi9cbmV4cG9ydCBjb25zdCBkb2N1bWVudCA9IHtcbiAgWzQyXTogbGlzdCxcbiAgWzQzXTogbGlzdCxcbiAgWzQ1XTogbGlzdCxcbiAgWzQ4XTogbGlzdCxcbiAgWzQ5XTogbGlzdCxcbiAgWzUwXTogbGlzdCxcbiAgWzUxXTogbGlzdCxcbiAgWzUyXTogbGlzdCxcbiAgWzUzXTogbGlzdCxcbiAgWzU0XTogbGlzdCxcbiAgWzU1XTogbGlzdCxcbiAgWzU2XTogbGlzdCxcbiAgWzU3XTogbGlzdCxcbiAgWzYyXTogYmxvY2tRdW90ZVxufVxuXG4vKiogQHNhdGlzZmllcyB7RXh0ZW5zaW9uWydjb250ZW50SW5pdGlhbCddfSAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRJbml0aWFsID0ge1xuICBbOTFdOiBkZWZpbml0aW9uXG59XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2Zsb3dJbml0aWFsJ119ICovXG5leHBvcnQgY29uc3QgZmxvd0luaXRpYWwgPSB7XG4gIFstMl06IGNvZGVJbmRlbnRlZCxcbiAgWy0xXTogY29kZUluZGVudGVkLFxuICBbMzJdOiBjb2RlSW5kZW50ZWRcbn1cblxuLyoqIEBzYXRpc2ZpZXMge0V4dGVuc2lvblsnZmxvdyddfSAqL1xuZXhwb3J0IGNvbnN0IGZsb3cgPSB7XG4gIFszNV06IGhlYWRpbmdBdHgsXG4gIFs0Ml06IHRoZW1hdGljQnJlYWssXG4gIFs0NV06IFtzZXRleHRVbmRlcmxpbmUsIHRoZW1hdGljQnJlYWtdLFxuICBbNjBdOiBodG1sRmxvdyxcbiAgWzYxXTogc2V0ZXh0VW5kZXJsaW5lLFxuICBbOTVdOiB0aGVtYXRpY0JyZWFrLFxuICBbOTZdOiBjb2RlRmVuY2VkLFxuICBbMTI2XTogY29kZUZlbmNlZFxufVxuXG4vKiogQHNhdGlzZmllcyB7RXh0ZW5zaW9uWydzdHJpbmcnXX0gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSB7XG4gIFszOF06IGNoYXJhY3RlclJlZmVyZW5jZSxcbiAgWzkyXTogY2hhcmFjdGVyRXNjYXBlXG59XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ3RleHQnXX0gKi9cbmV4cG9ydCBjb25zdCB0ZXh0ID0ge1xuICBbLTVdOiBsaW5lRW5kaW5nLFxuICBbLTRdOiBsaW5lRW5kaW5nLFxuICBbLTNdOiBsaW5lRW5kaW5nLFxuICBbMzNdOiBsYWJlbFN0YXJ0SW1hZ2UsXG4gIFszOF06IGNoYXJhY3RlclJlZmVyZW5jZSxcbiAgWzQyXTogYXR0ZW50aW9uLFxuICBbNjBdOiBbYXV0b2xpbmssIGh0bWxUZXh0XSxcbiAgWzkxXTogbGFiZWxTdGFydExpbmssXG4gIFs5Ml06IFtoYXJkQnJlYWtFc2NhcGUsIGNoYXJhY3RlckVzY2FwZV0sXG4gIFs5M106IGxhYmVsRW5kLFxuICBbOTVdOiBhdHRlbnRpb24sXG4gIFs5Nl06IGNvZGVUZXh0XG59XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2luc2lkZVNwYW4nXX0gKi9cbmV4cG9ydCBjb25zdCBpbnNpZGVTcGFuID0ge1xuICBudWxsOiBbYXR0ZW50aW9uLCByZXNvbHZlVGV4dF1cbn1cblxuLyoqIEBzYXRpc2ZpZXMge0V4dGVuc2lvblsnYXR0ZW50aW9uTWFya2VycyddfSAqL1xuZXhwb3J0IGNvbnN0IGF0dGVudGlvbk1hcmtlcnMgPSB7XG4gIG51bGw6IFs0MiwgOTVdXG59XG5cbi8qKiBAc2F0aXNmaWVzIHtFeHRlbnNpb25bJ2Rpc2FibGUnXX0gKi9cbmV4cG9ydCBjb25zdCBkaXNhYmxlID0ge1xuICBudWxsOiBbXVxufVxuIl0sIm5hbWVzIjpbImF0dGVudGlvbk1hcmtlcnMiLCJjb250ZW50SW5pdGlhbCIsImRpc2FibGUiLCJkb2N1bWVudCIsImZsb3ciLCJmbG93SW5pdGlhbCIsImluc2lkZVNwYW4iLCJzdHJpbmciLCJ0ZXh0IiwibGlzdCIsImJsb2NrUXVvdGUiLCJkZWZpbml0aW9uIiwiY29kZUluZGVudGVkIiwiaGVhZGluZ0F0eCIsInRoZW1hdGljQnJlYWsiLCJzZXRleHRVbmRlcmxpbmUiLCJodG1sRmxvdyIsImNvZGVGZW5jZWQiLCJjaGFyYWN0ZXJSZWZlcmVuY2UiLCJjaGFyYWN0ZXJFc2NhcGUiLCJsaW5lRW5kaW5nIiwibGFiZWxTdGFydEltYWdlIiwiYXR0ZW50aW9uIiwiYXV0b2xpbmsiLCJodG1sVGV4dCIsImxhYmVsU3RhcnRMaW5rIiwiaGFyZEJyZWFrRXNjYXBlIiwibGFiZWxFbmQiLCJjb2RlVGV4dCIsIm51bGwiLCJyZXNvbHZlVGV4dCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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