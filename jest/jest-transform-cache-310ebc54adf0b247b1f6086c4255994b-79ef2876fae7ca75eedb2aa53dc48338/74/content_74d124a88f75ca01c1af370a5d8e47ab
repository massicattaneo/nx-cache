5502498c3d51d20a88b12c8f4d17c53e
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "content", {
    enumerable: true,
    get: function() {
        return content;
    }
});
const _micromarkfactoryspace = require("micromark-factory-space");
const _micromarkutilcharacter = require("micromark-util-character");
const content = {
    tokenize: initializeContent
};
/**
 * @this {TokenizeContext}
 * @type {Initializer}
 */ function initializeContent(effects) {
    const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
    /** @type {Token} */ let previous;
    return contentStart;
    /** @type {State} */ function afterContentStartConstruct(code) {
        if (code === null) {
            effects.consume(code);
            return;
        }
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return (0, _micromarkfactoryspace.factorySpace)(effects, contentStart, 'linePrefix');
    }
    /** @type {State} */ function paragraphInitial(code) {
        effects.enter('paragraph');
        return lineStart(code);
    }
    /** @type {State} */ function lineStart(code) {
        const token = effects.enter('chunkText', {
            contentType: 'text',
            previous
        });
        if (previous) {
            previous.next = token;
        }
        previous = token;
        return data(code);
    }
    /** @type {State} */ function data(code) {
        if (code === null) {
            effects.exit('chunkText');
            effects.exit('paragraph');
            effects.consume(code);
            return;
        }
        if ((0, _micromarkutilcharacter.markdownLineEnding)(code)) {
            effects.consume(code);
            effects.exit('chunkText');
            return lineStart;
        }
        // Data.
        effects.consume(code);
        return data;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9taWNyb21hcmsvbGliL2luaXRpYWxpemUvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbENvbnN0cnVjdH0gSW5pdGlhbENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsaXplcn0gSW5pdGlhbGl6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICovXG5cbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG4vKiogQHR5cGUge0luaXRpYWxDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29udGVudCA9IHtcbiAgdG9rZW5pemU6IGluaXRpYWxpemVDb250ZW50XG59XG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqIEB0eXBlIHtJbml0aWFsaXplcn1cbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUNvbnRlbnQoZWZmZWN0cykge1xuICBjb25zdCBjb250ZW50U3RhcnQgPSBlZmZlY3RzLmF0dGVtcHQoXG4gICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5jb250ZW50SW5pdGlhbCxcbiAgICBhZnRlckNvbnRlbnRTdGFydENvbnN0cnVjdCxcbiAgICBwYXJhZ3JhcGhJbml0aWFsXG4gIClcbiAgLyoqIEB0eXBlIHtUb2tlbn0gKi9cbiAgbGV0IHByZXZpb3VzXG4gIHJldHVybiBjb250ZW50U3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlckNvbnRlbnRTdGFydENvbnN0cnVjdChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBjb250ZW50U3RhcnQsICdsaW5lUHJlZml4JylcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHBhcmFncmFwaEluaXRpYWwoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ3BhcmFncmFwaCcpXG4gICAgcmV0dXJuIGxpbmVTdGFydChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gbGluZVN0YXJ0KGNvZGUpIHtcbiAgICBjb25zdCB0b2tlbiA9IGVmZmVjdHMuZW50ZXIoJ2NodW5rVGV4dCcsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAndGV4dCcsXG4gICAgICBwcmV2aW91c1xuICAgIH0pXG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBwcmV2aW91cy5uZXh0ID0gdG9rZW5cbiAgICB9XG4gICAgcHJldmlvdXMgPSB0b2tlblxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1RleHQnKVxuICAgICAgZWZmZWN0cy5leGl0KCdwYXJhZ3JhcGgnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rVGV4dCcpXG4gICAgICByZXR1cm4gbGluZVN0YXJ0XG4gICAgfVxuXG4gICAgLy8gRGF0YS5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG59XG4iXSwibmFtZXMiOlsiY29udGVudCIsInRva2VuaXplIiwiaW5pdGlhbGl6ZUNvbnRlbnQiLCJlZmZlY3RzIiwiY29udGVudFN0YXJ0IiwiYXR0ZW1wdCIsInBhcnNlciIsImNvbnN0cnVjdHMiLCJjb250ZW50SW5pdGlhbCIsImFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0IiwicGFyYWdyYXBoSW5pdGlhbCIsInByZXZpb3VzIiwiY29kZSIsImNvbnN1bWUiLCJlbnRlciIsImV4aXQiLCJmYWN0b3J5U3BhY2UiLCJsaW5lU3RhcnQiLCJ0b2tlbiIsImNvbnRlbnRUeXBlIiwibmV4dCIsImRhdGEiLCJtYXJrZG93bkxpbmVFbmRpbmciXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUM7Ozs7K0JBS1lBOzs7ZUFBQUE7Ozt1Q0FIYzt3Q0FDTTtBQUUxQixNQUFNQSxVQUFVO0lBQ3JCQyxVQUFVQztBQUNaO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0Esa0JBQWtCQyxPQUFPO0lBQ2hDLE1BQU1DLGVBQWVELFFBQVFFLE9BQU8sQ0FDbEMsSUFBSSxDQUFDQyxNQUFNLENBQUNDLFVBQVUsQ0FBQ0MsY0FBYyxFQUNyQ0MsNEJBQ0FDO0lBRUYsa0JBQWtCLEdBQ2xCLElBQUlDO0lBQ0osT0FBT1A7SUFFUCxrQkFBa0IsR0FDbEIsU0FBU0ssMkJBQTJCRyxJQUFJO1FBQ3RDLElBQUlBLFNBQVMsTUFBTTtZQUNqQlQsUUFBUVUsT0FBTyxDQUFDRDtZQUNoQjtRQUNGO1FBQ0FULFFBQVFXLEtBQUssQ0FBQztRQUNkWCxRQUFRVSxPQUFPLENBQUNEO1FBQ2hCVCxRQUFRWSxJQUFJLENBQUM7UUFDYixPQUFPQyxJQUFBQSxtQ0FBWSxFQUFDYixTQUFTQyxjQUFjO0lBQzdDO0lBRUEsa0JBQWtCLEdBQ2xCLFNBQVNNLGlCQUFpQkUsSUFBSTtRQUM1QlQsUUFBUVcsS0FBSyxDQUFDO1FBQ2QsT0FBT0csVUFBVUw7SUFDbkI7SUFFQSxrQkFBa0IsR0FDbEIsU0FBU0ssVUFBVUwsSUFBSTtRQUNyQixNQUFNTSxRQUFRZixRQUFRVyxLQUFLLENBQUMsYUFBYTtZQUN2Q0ssYUFBYTtZQUNiUjtRQUNGO1FBQ0EsSUFBSUEsVUFBVTtZQUNaQSxTQUFTUyxJQUFJLEdBQUdGO1FBQ2xCO1FBQ0FQLFdBQVdPO1FBQ1gsT0FBT0csS0FBS1Q7SUFDZDtJQUVBLGtCQUFrQixHQUNsQixTQUFTUyxLQUFLVCxJQUFJO1FBQ2hCLElBQUlBLFNBQVMsTUFBTTtZQUNqQlQsUUFBUVksSUFBSSxDQUFDO1lBQ2JaLFFBQVFZLElBQUksQ0FBQztZQUNiWixRQUFRVSxPQUFPLENBQUNEO1lBQ2hCO1FBQ0Y7UUFDQSxJQUFJVSxJQUFBQSwwQ0FBa0IsRUFBQ1YsT0FBTztZQUM1QlQsUUFBUVUsT0FBTyxDQUFDRDtZQUNoQlQsUUFBUVksSUFBSSxDQUFDO1lBQ2IsT0FBT0U7UUFDVDtRQUVBLFFBQVE7UUFDUmQsUUFBUVUsT0FBTyxDQUFDRDtRQUNoQixPQUFPUztJQUNUO0FBQ0YifQ==