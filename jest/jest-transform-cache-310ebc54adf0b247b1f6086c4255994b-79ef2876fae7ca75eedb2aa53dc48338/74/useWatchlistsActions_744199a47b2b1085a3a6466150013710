b92acdf8db4a1cfc7248f65448c7cd02
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useWatchlistsActions", {
    enumerable: true,
    get: function() {
        return useWatchlistsActions;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _watchlists = require("@rp/react/common/watchlists");
const _common = require("@rp/react/tanstack-api/common");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _basecomponents = require("@rp/react/web/common/base-components");
const _providers1 = require("@rp/react/web/common/providers");
const _utils1 = require("@rp/react/web/common/vendors/utils");
const _icons = require("@rp/react/web/mui/icons");
const _router = require("@rp/react/web/router");
const _utils2 = require("@rp/web/utils");
const useWatchlistsActions = (options)=>{
    const { user } = (0, _clerkreact.useUser)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { pathname } = (0, _reactrouterdom.useLocation)();
    const { cameFromLinkPathname } = (0, _providers1.useShareContext)();
    const createQuery = (0, _userdataqueries.useCreateSavedQuery)();
    const { enqueueSuccess, enqueueError } = (0, _providers1.useSnackbar)();
    const { mutateAsync: createWatchlist } = (0, _watchlist.useCreateWatchlist)({
        enqueueError
    });
    const { mutateAsync: shareWatchlist } = (0, _watchlist.useShareWatchlist)({
        enqueueError
    });
    const { deleteWatchlistModal: { handleOpen: handleDelete }, watchlistModal: { handleOpen: handleOpenNew, setWatchlistEditAutoFocus }, shareModal: { handleOpen: handleShare } } = (0, _providers1.useModal)();
    const { mutate: mutateFavorite, isPending: isPendingFavorite } = (0, _watchlist.useFavoriteWatchlist)();
    const { mutate: mutateUnfavorite, isPending: isPendingUnfavorite } = (0, _watchlist.useUnfavoriteWatchlist)();
    const { quota, hasEntitlement } = (0, _providers.useAccount)();
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const hasMetWatchlistLimit = (0, _hooks.useIsWatchlistLimitMet)(quota);
    const handleEditName = async (row, autoFocus)=>{
        handleOpenNew(row, ({ id })=>{
            if (row.isClientWatchlist) {
                navigate((0, _reactrouterdom.generatePath)(_router.WATCHLIST_ID_ROUTE, {
                    id
                }), {
                    replace: true
                });
            }
            enqueueSuccess("Your watchlist has been saved successfully.");
        });
        autoFocus && setWatchlistEditAutoFocus(autoFocus);
    };
    const handleRunSearch = ({ id, name })=>{
        const expression = {
            type: "and",
            value: [
                {
                    type: "watchlist",
                    operation: "in",
                    value: id
                }
            ]
        };
        createQuery.mutate({
            name,
            query: {
                expression
            }
        }, {
            onSuccess: (response)=>{
                // Send the event to GTM
                _utils1.tagManagerEvents.queryInit({
                    queryId: response.id,
                    location: "watchlist",
                    queryType: "watchlist"
                });
                // Navigate to the search page
                navigate(`/search/${response.id}`);
            }
        });
    };
    const handleShareWatchlist = async (watchlist)=>{
        var _watchlist_global, _user_organizationMemberships_;
        const sharedStatus = watchlist.shared.isPublic || ((_watchlist_global = watchlist.global) === null || _watchlist_global === void 0 ? void 0 : _watchlist_global.status) === "published" ? "Public" : watchlist.shared.company.permission === "undefined" ? "Private" : "Organization";
        handleShare({
            data: {
                isEditable: watchlist.ownerUserId === (user === null || user === void 0 ? void 0 : user.id),
                shareObject: (0, _utils.getShareObject)({
                    shareObjectId: watchlist.id,
                    shareObjectType: "watchlist",
                    path: (0, _reactrouterdom.generatePath)(_router.WATCHLIST_ID_ROUTE, {
                        id: watchlist.id
                    }),
                    name: watchlist.name,
                    ownerInfo: (0, _watchlists.getWatchlistOwnerInfo)(watchlist, user)
                }),
                mutate: ({ sharedStatus: status, organizationId })=>{
                    if (status === "Public") {
                        return shareWatchlist({
                            id: watchlist.id,
                            sharedBody: {
                                isPublic: true
                            }
                        });
                    } else if (status === "Organization") {
                        return shareWatchlist({
                            id: watchlist.id,
                            sharedBody: {
                                company: {
                                    permission: "read",
                                    organizationId
                                },
                                users: []
                            }
                        });
                    } else {
                        return shareWatchlist({
                            id: watchlist.id,
                            sharedBody: {
                                company: {
                                    permission: "undefined"
                                },
                                users: []
                            }
                        });
                    }
                },
                ownerUserId: watchlist.ownerUserId,
                sharedStatus,
                title: `Share "${watchlist.name}" Watchlist`,
                enabledOptions: [
                    "Private",
                    "Organization",
                    "Public"
                ],
                orgName: user === null || user === void 0 ? void 0 : (_user_organizationMemberships_ = user.organizationMemberships[0]) === null || _user_organizationMemberships_ === void 0 ? void 0 : _user_organizationMemberships_.organization.name
            }
        });
    };
    const handleCopyWatchlist = async ({ id })=>{
        const { name, items } = await (0, _common.getWatchlistById)(id);
        await createWatchlist({
            name: `Copy of ${name}`,
            items
        });
        enqueueSuccess(/*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
            children: [
                "The watchlist ",
                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                    children: `Copy of ${(0, _utils.truncateString)(name)}`
                }),
                " has been created"
            ]
        }));
    };
    const actions = {
        share: {
            id: "share",
            label: "Share",
            icon: (watchlist)=>{
                var _watchlist_global;
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ShareIcon, {
                    size: 24,
                    shared: watchlist.shared.company.permission !== "undefined" || watchlist.shared.isPublic || ((_watchlist_global = watchlist.global) === null || _watchlist_global === void 0 ? void 0 : _watchlist_global.status) === "published"
                });
            },
            onClick: (watchlist)=>handleShareWatchlist(watchlist),
            disabledAction: (watchlist)=>watchlist.isClientWatchlist === true,
            allowedAction: (_watchlist)=>false
        },
        copy: {
            id: "copy",
            label: "Make a copy",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ContentCopy, {}),
            onClick: (watchlist)=>{
                hasMetWatchlistLimit ? planComparisonHandleOpen(_settings.WATCHLIST_FEATURE_NAME) : handleCopyWatchlist(watchlist);
            },
            disabledAction: (watchlist)=>watchlist.isClientWatchlist === true
        },
        search: {
            id: "search",
            label: "Search",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {}),
            onClick: (watchlist)=>handleRunSearch(watchlist),
            allowedAction: (watchlist)=>watchlist.isClientWatchlist === true || !hasEntitlement("search")
        },
        chat: {
            id: "chat",
            label: "Chat",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ChatBubbleOutline, {}),
            onClick: (watchlist)=>{
                const state = {
                    watchlistIds: [
                        watchlist.id
                    ]
                };
                navigate(_router.CHAT_ROUTE, {
                    state
                });
            }
        },
        rename: {
            id: "rename",
            label: "Rename",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Edit, {}),
            disabledAction: (watchlist)=>watchlist.ownerUserId !== (user === null || user === void 0 ? void 0 : user.id) && !(watchlist.isClientWatchlist === true),
            onClick: (watchlist, autoFocus)=>handleEditName(watchlist, autoFocus)
        },
        remove: {
            id: "remove",
            label: "Delete",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Delete, {}),
            onClick: (watchlist)=>{
                var _options_removeParams;
                return handleDelete({
                    watchlist: watchlist,
                    onSuccess: options === null || options === void 0 ? void 0 : (_options_removeParams = options.removeParams) === null || _options_removeParams === void 0 ? void 0 : _options_removeParams.onSuccess
                });
            },
            disabledAction: (watchlist)=>watchlist.ownerUserId !== (user === null || user === void 0 ? void 0 : user.id) || watchlist.isClientWatchlist === true,
            allowedAction: (watchlist)=>watchlist.ownerUserId !== (user === null || user === void 0 ? void 0 : user.id) && !(watchlist.isClientWatchlist === true)
        },
        builder: {
            id: "builder",
            label: "Advanced Builder",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.SettingsApplications, {}),
            onClick: (watchlist)=>{
                if (watchlist.isClientWatchlist) {
                    navigate(_router.WATCHLIST_EDIT_NEW, {
                        replace: true
                    });
                } else {
                    navigate((0, _reactrouterdom.generatePath)(_router.WATCHLIST_EDIT, {
                        id: watchlist.id
                    }));
                }
            }
        },
        favorite: {
            id: "favorite",
            label: (watchlist)=>(watchlist === null || watchlist === void 0 ? void 0 : watchlist.isFavorite) ? "Unfavorite" : "Favorite",
            icon: (watchlist)=>(watchlist === null || watchlist === void 0 ? void 0 : watchlist.isFavorite) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Star, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.StarBorderOutlined, {}),
            onClick: (watchlist)=>{
                if (isPendingFavorite || isPendingUnfavorite) return;
                const send = (0, _utils2.hasPerformedSessionAction)("shared_link_favorited", pathname, cameFromLinkPathname);
                if (watchlist === null || watchlist === void 0 ? void 0 : watchlist.id) {
                    watchlist.isFavorite ? mutateUnfavorite(watchlist.id) : mutateFavorite({
                        id: watchlist.id,
                        cameFromSharedLink: send
                    });
                }
            },
            disabledAction: (watchlist)=>(watchlist === null || watchlist === void 0 ? void 0 : watchlist.isClientWatchlist) === true
        }
    };
    return actions;
};

//# sourceMappingURL=data:application/json;base64,