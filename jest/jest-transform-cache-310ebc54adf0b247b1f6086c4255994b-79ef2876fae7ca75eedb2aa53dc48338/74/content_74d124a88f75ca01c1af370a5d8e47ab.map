{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark/lib/initialize/content.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n"],"names":["content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","factorySpace","lineStart","token","contentType","next","data","markdownLineEnding"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;CAMC;;;;+BAKYA;;;eAAAA;;;uCAHc;wCACM;AAE1B,MAAMA,UAAU;IACrBC,UAAUC;AACZ;AAEA;;;CAGC,GACD,SAASA,kBAAkBC,OAAO;IAChC,MAAMC,eAAeD,QAAQE,OAAO,CAClC,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,cAAc,EACrCC,4BACAC;IAEF,kBAAkB,GAClB,IAAIC;IACJ,OAAOP;IAEP,kBAAkB,GAClB,SAASK,2BAA2BG,IAAI;QACtC,IAAIA,SAAS,MAAM;YACjBT,QAAQU,OAAO,CAACD;YAChB;QACF;QACAT,QAAQW,KAAK,CAAC;QACdX,QAAQU,OAAO,CAACD;QAChBT,QAAQY,IAAI,CAAC;QACb,OAAOC,IAAAA,mCAAY,EAACb,SAASC,cAAc;IAC7C;IAEA,kBAAkB,GAClB,SAASM,iBAAiBE,IAAI;QAC5BT,QAAQW,KAAK,CAAC;QACd,OAAOG,UAAUL;IACnB;IAEA,kBAAkB,GAClB,SAASK,UAAUL,IAAI;QACrB,MAAMM,QAAQf,QAAQW,KAAK,CAAC,aAAa;YACvCK,aAAa;YACbR;QACF;QACA,IAAIA,UAAU;YACZA,SAASS,IAAI,GAAGF;QAClB;QACAP,WAAWO;QACX,OAAOG,KAAKT;IACd;IAEA,kBAAkB,GAClB,SAASS,KAAKT,IAAI;QAChB,IAAIA,SAAS,MAAM;YACjBT,QAAQY,IAAI,CAAC;YACbZ,QAAQY,IAAI,CAAC;YACbZ,QAAQU,OAAO,CAACD;YAChB;QACF;QACA,IAAIU,IAAAA,0CAAkB,EAACV,OAAO;YAC5BT,QAAQU,OAAO,CAACD;YAChBT,QAAQY,IAAI,CAAC;YACb,OAAOE;QACT;QAEA,QAAQ;QACRd,QAAQU,OAAO,CAACD;QAChB,OAAOS;IACT;AACF"}