40f34152816edfee7b73cbe1e3cd2e9e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getEmptyWatchlist: function() {
        return getEmptyWatchlist;
    },
    onWatchlistUpdateSuccess: function() {
        return onWatchlistUpdateSuccess;
    },
    patchWatchlist: function() {
        return patchWatchlist;
    },
    useAllWatchlists: function() {
        return useAllWatchlists;
    },
    useCreateWatchlist: function() {
        return useCreateWatchlist;
    },
    useEntitiesFromWatchlists: function() {
        return useEntitiesFromWatchlists;
    },
    useFavoriteWatchlist: function() {
        return useFavoriteWatchlist;
    },
    useGetWatchlistDependencies: function() {
        return useGetWatchlistDependencies;
    },
    usePatchWatchlist: function() {
        return usePatchWatchlist;
    },
    useResetWatchlistImage: function() {
        return useResetWatchlistImage;
    },
    useSaveWatchlistImage: function() {
        return useSaveWatchlistImage;
    },
    useShareWatchlist: function() {
        return useShareWatchlist;
    },
    useUnfavoriteWatchlist: function() {
        return useUnfavoriteWatchlist;
    },
    useWatchlistDependencies: function() {
        return useWatchlistDependencies;
    },
    useWatchlistName: function() {
        return useWatchlistName;
    },
    useWatchlists: function() {
        return useWatchlists;
    }
});
const _axios = require("axios");
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _environment = require("@rp/common/environment");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _customerio = require("@rp/react/common/customer-io");
const _common = require("@rp/react/tanstack-api/common");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _utils1 = require("@rp/web/utils");
const _reactquery = require("@tanstack/react-query");
const _useDeleteWatchlist = require("./useDeleteWatchlist");
const _useWatchlist = require("./useWatchlist");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const onWatchlistUpdateSuccess = (queryClient)=>(result)=>{
        queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(result.id), result);
        queryClient.refetchQueries({
            queryKey: _common.watchlistQueryKeys.all()
        });
    };
// -------------------
// Network Requests
// -------------------
const getAll = async (params)=>{
    const queryString = _qs.default.stringify(params, {
        addQueryPrefix: true,
        skipNulls: true
    });
    const { data } = await _axiosclient.axiosClient.get(`${_common.USER_DATA_WATCHLIST_ROOT}${queryString}`);
    return data;
};
const create = async (watchlist)=>{
    const { data } = await _axiosclient.axiosClient.post(_common.USER_DATA_WATCHLIST_ROOT, watchlist);
    return data;
};
const patchWatchlist = async (_param)=>{
    var { id } = _param, fields = _object_without_properties(_param, [
        "id"
    ]);
    const { data } = await _axiosclient.axiosClient.patch(`${_common.USER_DATA_WATCHLIST_ROOT}/${id}`, fields);
    return data;
};
const dependencies = async (ids)=>{
    const { data } = await _axiosclient.axiosClient.post(`${_common.USER_DATA_WATCHLIST_ROOT}/dependencies`, ids);
    return data;
};
const shareWatchlist = async ({ id, sharedBody })=>{
    const { data } = await _axiosclient.axiosClient.post(`${_common.USER_DATA_WATCHLIST_ROOT}/${id}/share`, sharedBody);
    return {
        data,
        id
    };
};
const favorite = async (options)=>{
    const { data } = await _axiosclient.axiosClient.put(`${_common.USER_DATA_WATCHLIST_ROOT}/${options.id}/favorite`);
    var _options_cameFromSharedLink;
    return {
        watchlist: data,
        watchlistId: options.id,
        cameFromSharedLink: (_options_cameFromSharedLink = options.cameFromSharedLink) !== null && _options_cameFromSharedLink !== void 0 ? _options_cameFromSharedLink : false
    };
};
const unfavorite = async (watchlistId)=>{
    const { data } = await _axiosclient.axiosClient.delete(`${_common.USER_DATA_WATCHLIST_ROOT}/${watchlistId}/favorite`);
    return {
        watchlist: data,
        watchlistId
    };
};
// -------------------
// Hooks
// -------------------
const useWatchlists = (watchlistIds)=>{
    const queryData = watchlistIds.map((watchlistId)=>{
        return {
            queryKey: _common.watchlistQueryKeys.watchlist(watchlistId),
            queryFn: ()=>(0, _common.getWatchlistById)(watchlistId)
        };
    });
    return (0, _reactquery.useQueries)({
        queries: queryData
    });
};
const useEntitiesFromWatchlists = (expression)=>{
    const watchlistIds = expression ? (0, _userdataqueries.getExpressionIds)(expression, {
        types: [
            "watchlist"
        ]
    }) : [];
    const watchlistsData = useWatchlists(watchlistIds);
    const entities = watchlistsData.reduce((acc, watchlist)=>{
        if (watchlist.data) {
            return [
                ...acc,
                ...watchlist.data.items
            ];
        }
        return acc;
    }, []);
    return entities;
};
const useAllWatchlists = (ownership)=>(0, _reactquery.useQuery)({
        queryKey: _common.watchlistQueryKeys.all(ownership),
        queryFn: ()=>{
            if (!ownership) {
                return getAll({});
            }
            return ownership === "user" ? getAll({
                owned: true
            }) : getAll({
                shared: "company"
            });
        },
        select: (response)=>response.results.map(_utils.mapToISOTimestamp),
        gcTime: 30000,
        staleTime: 30000
    });
// Create a new watchlist
const useCreateWatchlist = (options)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: create,
        onSuccess: (watchlist)=>{
            _customerio.watchlistCustomerIo.watchlistApi.create({
                watchlistId: watchlist.id,
                interactionTimestamp: Date.now() * 1000,
                entities: watchlist.items.map((id)=>({
                        id
                    }))
            });
            onWatchlistUpdateSuccess(queryClient)(watchlist);
        },
        onError: (error)=>{
            if (error instanceof _axios.AxiosError) {
                var _error_response_data, _error_response, _options_enqueueError;
                var _error_response_data_message;
                options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (_error_response_data_message = error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) !== null && _error_response_data_message !== void 0 ? _error_response_data_message : "An error occurred");
            }
        }
    });
};
const usePatchWatchlist = (options)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const onMutate = async (watchlist)=>{
        queryClient.setQueriesData({
            queryKey: _common.watchlistQueryKeys.all()
        }, (data)=>{
            if (!data) return data;
            return {
                results: data.results.map((item)=>{
                    if (item.id === watchlist.id) {
                        return _object_spread({}, item, watchlist);
                    }
                    return item;
                })
            };
        });
        queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(watchlist.id), (data)=>{
            if (!data) return data;
            if (data.id === watchlist.id) {
                return _object_spread({}, data, watchlist);
            }
            return data;
        });
    };
    const onError = (error, watchlist)=>{
        if (error instanceof _axios.AxiosError) {
            var _error_response_data, _error_response, _options_enqueueError;
            var _error_response_data_message;
            options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (_error_response_data_message = error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) !== null && _error_response_data_message !== void 0 ? _error_response_data_message : "An error occurred");
        }
        queryClient.invalidateQueries({
            queryKey: _common.watchlistQueryKeys.watchlist(watchlist.id)
        });
        queryClient.invalidateQueries({
            queryKey: _common.watchlistQueryKeys.all()
        });
    };
    const onSuccess = (watchlist, variables)=>{
        // If items of the watchlist were updated, clear query preview caches
        // TODO: Check how hard is to only remove the queries that are affected
        if (variables.items) {
            queryClient.invalidateQueries({
                queryKey: [
                    _settings.QUERY_KEY_FEATURE_FLAG
                ]
            });
            queryClient.removeQueries({
                queryKey: [
                    _settings.CQS_SUMMARY_KEY
                ]
            });
        }
        const updatedFields = [];
        if (variables.name) updatedFields.push("name");
        if (variables.items) updatedFields.push("entities");
        _customerio.watchlistCustomerIo.watchlistApi.update({
            watchlistId: watchlist.id,
            interactionTimestamp: Date.now() * 1000,
            entities: watchlist.items.map((item)=>({
                    id: item
                })),
            updatedFields,
            sharedWith: _customerio.shareCustomerIo.getSharedWith(watchlist.shared)
        });
        if (!(options === null || options === void 0 ? void 0 : options.disableSuccessCallback)) {
            onWatchlistUpdateSuccess(queryClient)(watchlist);
        }
    };
    return (0, _reactquery.useMutation)({
        mutationFn: patchWatchlist,
        onMutate,
        onError,
        onSuccess
    });
};
const useWatchlistDependencies = (watchlistId, savedStatus)=>{
    const { data, isFetching } = (0, _userdataqueries.useUserQueries)(savedStatus, "user");
    const result = (0, _reactquery.useQuery)({
        queryKey: [
            "watchlists-dependencies",
            watchlistId
        ],
        queryFn: ()=>dependencies([
                watchlistId !== null && watchlistId !== void 0 ? watchlistId : ""
            ]),
        enabled: !!watchlistId,
        select: (inner)=>{
            var _inner_;
            var _inner__filter;
            return (_inner__filter = (_inner_ = inner[watchlistId !== null && watchlistId !== void 0 ? watchlistId : ""]) === null || _inner_ === void 0 ? void 0 : _inner_.filter((item)=>{
                var _data_results;
                if (!(data === null || data === void 0 ? void 0 : data.results)) return false;
                return !!((_data_results = data.results) === null || _data_results === void 0 ? void 0 : _data_results.find((query)=>query.id === item.id));
            })) !== null && _inner__filter !== void 0 ? _inner__filter : [];
        }
    });
    return _object_spread_props(_object_spread({}, result), {
        isLoading: result.isFetching || isFetching
    });
};
const useShareWatchlist = ({ enqueueError })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: shareWatchlist,
        onMutate: ({ id, sharedBody })=>{
            // TODO: add company id to shared.company
            queryClient.setQueriesData({
                queryKey: _common.watchlistQueryKeys.all()
            }, (data)=>{
                if (!data) return data;
                return {
                    results: data.results.map((item)=>{
                        if (item.id === id) {
                            return _object_spread_props(_object_spread({}, item), {
                                shared: _object_spread_props(_object_spread({}, item.shared, sharedBody), {
                                    company: _object_spread({}, item.shared.company, sharedBody.company)
                                })
                            });
                        }
                        return item;
                    })
                };
            });
            queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(id), (data)=>{
                if (!data) return data;
                if (data.id === id) {
                    return _object_spread_props(_object_spread({}, data), {
                        shared: _object_spread_props(_object_spread({}, data.shared, sharedBody), {
                            company: _object_spread({}, data.shared.company, sharedBody.company)
                        })
                    });
                }
                return data;
            });
        },
        onError: (error, data)=>{
            if (error instanceof _axios.AxiosError) {
                var _error_response_data, _error_response;
                var _error_response_data_message;
                enqueueError === null || enqueueError === void 0 ? void 0 : enqueueError((_error_response_data_message = error === null || error === void 0 ? void 0 : (_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) !== null && _error_response_data_message !== void 0 ? _error_response_data_message : "An error occurred");
            }
            queryClient.invalidateQueries({
                queryKey: _common.watchlistQueryKeys.watchlist(data.id)
            });
            queryClient.invalidateQueries({
                queryKey: _common.watchlistQueryKeys.all()
            });
        },
        onSuccess: (params, watchlist)=>{
            const { id, data } = params;
            _customerio.watchlistCustomerIo.watchlistApi.update({
                watchlistId: watchlist.id,
                interactionTimestamp: Date.now() * 1000,
                updatedFields: [
                    "sharedWith"
                ],
                entities: null,
                sharedWith: _customerio.shareCustomerIo.getSharedWith(data.shared)
            });
            queryClient.refetchQueries({
                queryKey: _common.watchlistQueryKeys.watchlist(id)
            });
            queryClient.refetchQueries({
                queryKey: _common.watchlistQueryKeys.all()
            });
        }
    });
};
const useGetWatchlistDependencies = (id, { enqueueError })=>{
    const { mutateAsync: deleteWatchlist } = (0, _useDeleteWatchlist.useDeleteWatchlist)({
        enqueueError
    });
    const { data, isLoading: isLoadingDeps } = useWatchlistDependencies(id, "saved");
    const ids = data ? data.filter((item)=>item.type === "query").map((item)=>item.id) : [];
    const results = (0, _userdataqueries.useMultipleSavedQueries)(ids);
    const isFetchingQueries = results.filter((item)=>item.isFetching).length > 0;
    const isFetching = isLoadingDeps || isFetchingQueries;
    return {
        deleteWatchlist,
        isFetching,
        dependencies: data
    };
};
const useWatchlistName = (watchlistId)=>{
    const { data, isLoading: loading } = (0, _useWatchlist.useWatchlist)(watchlistId);
    const queryClient = (0, _reactquery.useQueryClient)();
    const res = queryClient.getQueriesData({
        queryKey: _common.watchlistQueryKeys.all()
    });
    const watchlist = res.map(([_queryKey, data])=>{
        return data === null || data === void 0 ? void 0 : data.results.find((file)=>file.id === watchlistId);
    }).flat().find((file)=>(file === null || file === void 0 ? void 0 : file.id) === watchlistId);
    const isLoading = (watchlist === null || watchlist === void 0 ? void 0 : watchlist.name) ? false : loading;
    var _watchlist_name;
    return {
        name: (_watchlist_name = watchlist === null || watchlist === void 0 ? void 0 : watchlist.name) !== null && _watchlist_name !== void 0 ? _watchlist_name : data === null || data === void 0 ? void 0 : data.name,
        isLoading
    };
};
const useFavoriteWatchlist = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: favorite,
        onMutate: (options)=>{
            queryClient.setQueriesData({
                queryKey: _common.watchlistQueryKeys.all()
            }, (data)=>{
                if (!data) return data;
                return {
                    results: data.results.map((item)=>{
                        if (item.id === options.id) {
                            return _object_spread_props(_object_spread({}, item), {
                                isFavorite: true
                            });
                        }
                        return item;
                    })
                };
            });
            queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(options.id), (data)=>{
                if (!data) return data;
                if (data.id === options.id) {
                    return _object_spread_props(_object_spread({}, data), {
                        isFavorite: true
                    });
                }
                return data;
            });
        },
        onSuccess: async ({ watchlist, watchlistId, cameFromSharedLink })=>{
            if (watchlist.shared.isPublic) {
                queryClient.invalidateQueries({
                    queryKey: _common.watchlistQueryKeys.all()
                });
            }
            _customerio.watchlistCustomerIo.watchlistApi.favorite({
                watchlistId: watchlistId,
                interactionTimestamp: Date.now() * 1000,
                entities: watchlist.items.map((id)=>({
                        id
                    })),
                updatedFields: [],
                sharedWith: _customerio.shareCustomerIo.getSharedWith(watchlist.shared),
                cameFromSharedLink
            });
        }
    });
};
const useUnfavoriteWatchlist = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: unfavorite,
        onMutate: (watchlistId)=>{
            queryClient.setQueriesData({
                queryKey: _common.watchlistQueryKeys.all()
            }, (data)=>{
                if (!data) return data;
                return {
                    results: data.results.map((item)=>{
                        if (item.id === watchlistId) {
                            return _object_spread_props(_object_spread({}, item), {
                                isFavorite: false
                            });
                        }
                        return item;
                    })
                };
            });
            queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(watchlistId), (data)=>{
                if (!data) return data;
                if (data.id === watchlistId) {
                    return _object_spread_props(_object_spread({}, data), {
                        isFavorite: false
                    });
                }
                return data;
            });
        },
        onSuccess: ({ watchlist, watchlistId })=>{
            _customerio.watchlistCustomerIo.watchlistApi.unfavorite({
                watchlistId: watchlistId,
                interactionTimestamp: Date.now() * 1000,
                entities: watchlist.items.map((id)=>({
                        id
                    })),
                updatedFields: [],
                sharedWith: _customerio.shareCustomerIo.getSharedWith(watchlist.shared)
            });
        }
    });
};
const getEmptyWatchlist = (user)=>{
    var _user_id, _user_fullName, _user_imageUrl;
    return {
        id: "",
        items: [],
        name: (0, _utils.defaultSaveName)("watchlist"),
        ownerUserId: (_user_id = user === null || user === void 0 ? void 0 : user.id) !== null && _user_id !== void 0 ? _user_id : "",
        dateCreated: new Date().toISOString().replace("Z", ""),
        lastUpdated: new Date().toISOString().replace("Z", ""),
        lastInteracted: new Date().toISOString().replace("Z", ""),
        ownerName: (_user_fullName = user === null || user === void 0 ? void 0 : user.fullName) !== null && _user_fullName !== void 0 ? _user_fullName : "",
        ownerImageUrl: (_user_imageUrl = user === null || user === void 0 ? void 0 : user.imageUrl) !== null && _user_imageUrl !== void 0 ? _user_imageUrl : "",
        shared: {
            company: {
                permission: "undefined",
                organizationId: ""
            },
            users: []
        },
        isClientWatchlist: true,
        global: {
            status: "private"
        }
    };
};
const useSaveWatchlistImage = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async ({ id, image })=>{
            const { data } = await _axiosclient.axiosClient.post(`/user-data/watchlists/${id}/generate-presigned-url?image=true`);
            const headers = {
                "x-amz-server-side-encryption": "AES256",
                "Content-Type": "image/jpeg"
            };
            const [type, base64String] = image.split(";base64,");
            const blob = (0, _utils1.base64ToBlob)(base64String, type, "We couldn't read your file. Please upload an image in a supported format (like JPG, PNG, or GIF).");
            await _axiosclient.axiosClient.put(data.url, blob, {
                headers,
                withCredentials: false
            });
            return data;
        },
        onSuccess: (data, { id })=>{
            // TODO setQueries
            const imageUrl = `${_environment.environment.assetsOrigin}/${data.key}`;
            queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(id), (data)=>{
                if (!data) return data;
                if (data.id === id) {
                    return _object_spread_props(_object_spread({}, data), {
                        imageUrl
                    });
                }
                return data;
            });
            queryClient.setQueriesData({
                queryKey: _common.watchlistQueryKeys.all()
            }, (data)=>{
                if (!data) return data;
                return {
                    results: data.results.map((item)=>{
                        if (item.id === id) {
                            return _object_spread_props(_object_spread({}, item), {
                                imageUrl
                            });
                        }
                        return item;
                    })
                };
            });
        }
    });
};
const useResetWatchlistImage = ()=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: async ({ watchlistId })=>{
            const { data } = await _axiosclient.axiosClient.delete(`/user-data/watchlists/${watchlistId}/assets?image=true`);
            return data;
        },
        onSuccess: (data, { watchlistId })=>{
            // TODO setQueries
            const imageUrl = undefined;
            queryClient.setQueryData(_common.watchlistQueryKeys.watchlist(watchlistId), (data)=>{
                if (!data) return data;
                if (data.id === watchlistId) {
                    return _object_spread_props(_object_spread({}, data), {
                        imageUrl
                    });
                }
                return data;
            });
            queryClient.setQueriesData({
                queryKey: _common.watchlistQueryKeys.all()
            }, (data)=>{
                if (!data) return data;
                return {
                    results: data.results.map((item)=>{
                        if (item.id === watchlistId) {
                            return _object_spread_props(_object_spread({}, item), {
                                imageUrl
                            });
                        }
                        return item;
                    })
                };
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,