{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/watchlist/src/watchlist.hooks.ts"],"sourcesContent":["import { AxiosError } from \"axios\"\nimport qs from \"qs\"\nimport { z } from \"zod\"\nimport {\n  CqsSavedStatus,\n  RpqlFilter,\n  SharingPermission,\n  UserDataDependenciesPostResponse,\n  UserSharingData,\n  Watchlist,\n  WatchlistOwnership,\n} from \"@rp/common/api-types\"\nimport { environment } from \"@rp/common/environment\"\nimport { CQS_SUMMARY_KEY, QUERY_KEY_FEATURE_FLAG } from \"@rp/common/settings\"\nimport { defaultSaveName, mapToISOTimestamp } from \"@rp/common/utils\"\nimport { watchlistSaveImageOutputSchema } from \"@rp/common/zod-contracts/watchlists\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { shareCustomerIo, watchlistCustomerIo } from \"@rp/react/common/customer-io\"\nimport { SnackbarEnqueueAction } from \"@rp/react/common/types\"\nimport {\n  USER_DATA_WATCHLIST_ROOT,\n  getWatchlistById,\n  watchlistQueryKeys,\n} from \"@rp/react/tanstack-api/common\"\nimport {\n  getExpressionIds,\n  useMultipleSavedQueries,\n  useUserQueries,\n} from \"@rp/react/tanstack-api/user-data-queries\"\nimport { base64ToBlob } from \"@rp/web/utils\"\nimport {\n  QueryClient,\n  useMutation,\n  useQueries,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\"\nimport { useDeleteWatchlist } from \"./useDeleteWatchlist\"\nimport { useWatchlist } from \"./useWatchlist\"\nimport { CreateWatchlist, PatchWatchlist, WatchlistCollection } from \"./watchlist.types\"\n\n// -------------------\n// Types\n// -------------------\n\ntype UpdateContext = {\n  //\n}\n\n// -------------------\n// Query Keys\n// -------------------\n\n// -------------------\n// Helper Functions\n// -------------------\n\nexport const onWatchlistUpdateSuccess = (queryClient: QueryClient) => (result: Watchlist) => {\n  queryClient.setQueryData(watchlistQueryKeys.watchlist(result.id), result)\n  queryClient.refetchQueries({ queryKey: watchlistQueryKeys.all() })\n}\n\n// -------------------\n// Network Requests\n// -------------------\n\nconst getAll = async (params: { owned?: boolean; shared?: \"company\" }) => {\n  const queryString = qs.stringify(params, { addQueryPrefix: true, skipNulls: true })\n\n  const { data } = await axiosClient.get<WatchlistCollection>(\n    `${USER_DATA_WATCHLIST_ROOT}${queryString}`,\n  )\n  return data\n}\n\nconst create = async (watchlist: CreateWatchlist) => {\n  const { data } = await axiosClient.post<Watchlist>(USER_DATA_WATCHLIST_ROOT, watchlist)\n  return data\n}\n\nexport const patchWatchlist = async ({ id, ...fields }: PatchWatchlist) => {\n  const { data } = await axiosClient.patch<Watchlist>(`${USER_DATA_WATCHLIST_ROOT}/${id}`, fields)\n  return data\n}\n\nconst dependencies = async (ids: Array<string>) => {\n  const { data } = await axiosClient.post<UserDataDependenciesPostResponse>(\n    `${USER_DATA_WATCHLIST_ROOT}/dependencies`,\n    ids,\n  )\n  return data\n}\n\ntype ShareWatchlistSharedBody = {\n  company?: {\n    organizationId?: string\n    permission: SharingPermission\n  }\n  users?: Array<UserSharingData>\n  isPublic?: boolean\n}\n\ntype ShareWatchlistParams = {\n  id: string\n  sharedBody: ShareWatchlistSharedBody\n}\n\nconst shareWatchlist = async ({ id, sharedBody }: ShareWatchlistParams) => {\n  const { data } = await axiosClient.post<Watchlist>(\n    `${USER_DATA_WATCHLIST_ROOT}/${id}/share`,\n    sharedBody,\n  )\n  return { data, id }\n}\n\nconst favorite = async (options: { id: string; cameFromSharedLink?: boolean }) => {\n  const { data } = await axiosClient.put(`${USER_DATA_WATCHLIST_ROOT}/${options.id}/favorite`)\n  return {\n    watchlist: data,\n    watchlistId: options.id,\n    cameFromSharedLink: options.cameFromSharedLink ?? false,\n  }\n}\n\nconst unfavorite = async (watchlistId: string) => {\n  const { data } = await axiosClient.delete(`${USER_DATA_WATCHLIST_ROOT}/${watchlistId}/favorite`)\n  return { watchlist: data, watchlistId }\n}\n\n// -------------------\n// Hooks\n// -------------------\n\nconst useWatchlists = (watchlistIds: Array<string>) => {\n  const queryData = watchlistIds.map(watchlistId => {\n    return {\n      queryKey: watchlistQueryKeys.watchlist(watchlistId),\n      queryFn: () => getWatchlistById(watchlistId),\n    }\n  })\n\n  return useQueries({\n    queries: queryData,\n  })\n}\n\nconst useEntitiesFromWatchlists = (expression?: RpqlFilter) => {\n  const watchlistIds: Array<string> = expression\n    ? getExpressionIds(expression, { types: [\"watchlist\"] })\n    : []\n  const watchlistsData = useWatchlists(watchlistIds)\n  const entities = watchlistsData.reduce<Array<string>>((acc, watchlist) => {\n    if (watchlist.data) {\n      return [...acc, ...watchlist.data.items]\n    }\n    return acc\n  }, [])\n  return entities\n}\n\nconst useAllWatchlists = (ownership?: WatchlistOwnership) =>\n  useQuery({\n    queryKey: watchlistQueryKeys.all(ownership),\n    queryFn: () => {\n      if (!ownership) {\n        return getAll({})\n      }\n\n      return ownership === \"user\" ? getAll({ owned: true }) : getAll({ shared: \"company\" })\n    },\n    select: response => response.results.map(mapToISOTimestamp),\n    gcTime: 30000,\n    staleTime: 30000,\n  })\n\n// Create a new watchlist\nconst useCreateWatchlist = (options?: { enqueueError?: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: create,\n    onSuccess: watchlist => {\n      watchlistCustomerIo.watchlistApi.create({\n        watchlistId: watchlist.id,\n        interactionTimestamp: Date.now() * 1000,\n        entities: watchlist.items.map(id => ({ id })),\n      })\n      onWatchlistUpdateSuccess(queryClient)(watchlist)\n    },\n    onError: error => {\n      if (error instanceof AxiosError) {\n        options?.enqueueError?.(error?.response?.data?.message ?? \"An error occurred\")\n      }\n    },\n  })\n}\n\nconst usePatchWatchlist = (options?: {\n  disableSuccessCallback?: boolean\n  enqueueError?: SnackbarEnqueueAction\n}) => {\n  const queryClient = useQueryClient()\n\n  const onMutate = async (watchlist: PatchWatchlist) => {\n    queryClient.setQueriesData<WatchlistCollection>(\n      { queryKey: watchlistQueryKeys.all() },\n      data => {\n        if (!data) return data\n        return {\n          results: data.results.map(item => {\n            if (item.id === watchlist.id) {\n              return { ...item, ...watchlist }\n            }\n            return item\n          }),\n        }\n      },\n    )\n    queryClient.setQueryData<Watchlist | undefined>(\n      watchlistQueryKeys.watchlist(watchlist.id),\n      data => {\n        if (!data) return data\n        if (data.id === watchlist.id) {\n          return { ...data, ...watchlist }\n        }\n        return data\n      },\n    )\n  }\n\n  const onError = (error: unknown, watchlist: PatchWatchlist) => {\n    if (error instanceof AxiosError) {\n      options?.enqueueError?.(error?.response?.data?.message ?? \"An error occurred\")\n    }\n    queryClient.invalidateQueries({ queryKey: watchlistQueryKeys.watchlist(watchlist.id) })\n    queryClient.invalidateQueries({ queryKey: watchlistQueryKeys.all() })\n  }\n\n  const onSuccess = (watchlist: Watchlist, variables: PatchWatchlist) => {\n    // If items of the watchlist were updated, clear query preview caches\n    // TODO: Check how hard is to only remove the queries that are affected\n    if (variables.items) {\n      queryClient.invalidateQueries({\n        queryKey: [QUERY_KEY_FEATURE_FLAG],\n      })\n      queryClient.removeQueries({\n        queryKey: [CQS_SUMMARY_KEY],\n      })\n    }\n    const updatedFields: Array<\"name\" | \"entities\"> = []\n    if (variables.name) updatedFields.push(\"name\")\n    if (variables.items) updatedFields.push(\"entities\")\n    watchlistCustomerIo.watchlistApi.update({\n      watchlistId: watchlist.id,\n      interactionTimestamp: Date.now() * 1000,\n      entities: watchlist.items.map(item => ({ id: item })),\n      updatedFields,\n      sharedWith: shareCustomerIo.getSharedWith(watchlist.shared),\n    })\n\n    if (!options?.disableSuccessCallback) {\n      onWatchlistUpdateSuccess(queryClient)(watchlist)\n    }\n  }\n\n  return useMutation<Watchlist, AxiosError, PatchWatchlist, UpdateContext>({\n    mutationFn: patchWatchlist,\n    onMutate,\n    onError,\n    onSuccess,\n  })\n}\n\nconst useWatchlistDependencies = (watchlistId: string | null, savedStatus?: CqsSavedStatus) => {\n  const { data, isFetching } = useUserQueries(savedStatus, \"user\")\n\n  const result = useQuery({\n    queryKey: [\"watchlists-dependencies\", watchlistId],\n    queryFn: () => dependencies([watchlistId ?? \"\"]),\n    enabled: !!watchlistId,\n    select: inner =>\n      inner[watchlistId ?? \"\"]?.filter(item => {\n        if (!data?.results) return false\n        return !!data.results?.find(query => query.id === item.id)\n      }) ?? [],\n  })\n\n  return { ...result, isLoading: result.isFetching || isFetching }\n}\n\nconst useShareWatchlist = ({ enqueueError }: { enqueueError?: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: shareWatchlist,\n    onMutate: ({ id, sharedBody }: ShareWatchlistParams) => {\n      // TODO: add company id to shared.company\n      queryClient.setQueriesData<WatchlistCollection>(\n        { queryKey: watchlistQueryKeys.all() },\n        data => {\n          if (!data) return data\n          return {\n            results: data.results.map(item => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  shared: {\n                    ...item.shared,\n                    ...sharedBody,\n                    company: {\n                      ...item.shared.company,\n                      ...sharedBody.company,\n                    },\n                  },\n                }\n              }\n              return item\n            }),\n          }\n        },\n      )\n      queryClient.setQueryData<Watchlist | undefined>(watchlistQueryKeys.watchlist(id), data => {\n        if (!data) return data\n        if (data.id === id) {\n          return {\n            ...data,\n            shared: {\n              ...data.shared,\n              ...sharedBody,\n              company: {\n                ...data.shared.company,\n                ...sharedBody.company,\n              },\n            },\n          }\n        }\n        return data\n      })\n    },\n    onError: (error, data: ShareWatchlistParams) => {\n      if (error instanceof AxiosError) {\n        enqueueError?.(error?.response?.data?.message ?? \"An error occurred\")\n      }\n      queryClient.invalidateQueries({ queryKey: watchlistQueryKeys.watchlist(data.id) })\n      queryClient.invalidateQueries({ queryKey: watchlistQueryKeys.all() })\n    },\n    onSuccess: (params, watchlist) => {\n      const { id, data } = params\n      watchlistCustomerIo.watchlistApi.update({\n        watchlistId: watchlist.id,\n        interactionTimestamp: Date.now() * 1000,\n        updatedFields: [\"sharedWith\"],\n        entities: null,\n        sharedWith: shareCustomerIo.getSharedWith(data.shared),\n      })\n      queryClient.refetchQueries({ queryKey: watchlistQueryKeys.watchlist(id) })\n      queryClient.refetchQueries({ queryKey: watchlistQueryKeys.all() })\n    },\n  })\n}\n\nconst useGetWatchlistDependencies = (\n  id: string,\n  { enqueueError }: { enqueueError: SnackbarEnqueueAction },\n) => {\n  const { mutateAsync: deleteWatchlist } = useDeleteWatchlist({ enqueueError })\n\n  const { data, isLoading: isLoadingDeps } = useWatchlistDependencies(id, \"saved\")\n  const ids = data ? data.filter(item => item.type === \"query\").map(item => item.id) : []\n  const results = useMultipleSavedQueries(ids)\n  const isFetchingQueries = results.filter(item => item.isFetching).length > 0\n\n  const isFetching = isLoadingDeps || isFetchingQueries\n\n  return { deleteWatchlist, isFetching, dependencies: data }\n}\n\nconst useWatchlistName = (watchlistId: string | undefined) => {\n  const { data, isLoading: loading } = useWatchlist(watchlistId)\n  const queryClient = useQueryClient()\n  const res = queryClient.getQueriesData<WatchlistCollection>({\n    queryKey: watchlistQueryKeys.all(),\n  })\n  const watchlist = res\n    .map(([_queryKey, data]) => {\n      return data?.results.find(file => file.id === watchlistId)\n    })\n    .flat()\n    .find(file => file?.id === watchlistId)\n  const isLoading = watchlist?.name ? false : loading\n  return { name: watchlist?.name ?? data?.name, isLoading }\n}\n\nconst useFavoriteWatchlist = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: favorite,\n    onMutate: options => {\n      queryClient.setQueriesData<WatchlistCollection>(\n        { queryKey: watchlistQueryKeys.all() },\n        data => {\n          if (!data) return data\n          return {\n            results: data.results.map(item => {\n              if (item.id === options.id) {\n                return { ...item, isFavorite: true }\n              }\n              return item\n            }),\n          }\n        },\n      )\n      queryClient.setQueryData<Watchlist | undefined>(\n        watchlistQueryKeys.watchlist(options.id),\n        data => {\n          if (!data) return data\n          if (data.id === options.id) {\n            return { ...data, isFavorite: true }\n          }\n          return data\n        },\n      )\n    },\n    onSuccess: async ({\n      watchlist,\n      watchlistId,\n      cameFromSharedLink,\n    }: {\n      watchlist: Watchlist\n      watchlistId: string\n      cameFromSharedLink: boolean\n    }) => {\n      if (watchlist.shared.isPublic) {\n        queryClient.invalidateQueries({ queryKey: watchlistQueryKeys.all() })\n      }\n      watchlistCustomerIo.watchlistApi.favorite({\n        watchlistId: watchlistId,\n        interactionTimestamp: Date.now() * 1000,\n        entities: watchlist.items.map(id => ({ id })),\n        updatedFields: [],\n        sharedWith: shareCustomerIo.getSharedWith(watchlist.shared),\n        cameFromSharedLink,\n      })\n    },\n  })\n}\n\nconst useUnfavoriteWatchlist = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: unfavorite,\n    onMutate: (watchlistId: string) => {\n      queryClient.setQueriesData<WatchlistCollection>(\n        { queryKey: watchlistQueryKeys.all() },\n        data => {\n          if (!data) return data\n          return {\n            results: data.results.map(item => {\n              if (item.id === watchlistId) {\n                return { ...item, isFavorite: false }\n              }\n              return item\n            }),\n          }\n        },\n      )\n      queryClient.setQueryData<Watchlist | undefined>(\n        watchlistQueryKeys.watchlist(watchlistId),\n        data => {\n          if (!data) return data\n          if (data.id === watchlistId) {\n            return { ...data, isFavorite: false }\n          }\n          return data\n        },\n      )\n    },\n    onSuccess: ({ watchlist, watchlistId }: { watchlist: Watchlist; watchlistId: string }) => {\n      watchlistCustomerIo.watchlistApi.unfavorite({\n        watchlistId: watchlistId,\n        interactionTimestamp: Date.now() * 1000,\n        entities: watchlist.items.map(id => ({ id })),\n        updatedFields: [],\n        sharedWith: shareCustomerIo.getSharedWith(watchlist.shared),\n      })\n    },\n  })\n}\n\nconst getEmptyWatchlist = (\n  user: { id?: string; fullName?: string | null; imageUrl?: string | null } | null | undefined,\n): Watchlist => {\n  return {\n    id: \"\",\n    items: [],\n    name: defaultSaveName(\"watchlist\"),\n    ownerUserId: user?.id ?? \"\",\n    dateCreated: new Date().toISOString().replace(\"Z\", \"\"),\n    lastUpdated: new Date().toISOString().replace(\"Z\", \"\"),\n    lastInteracted: new Date().toISOString().replace(\"Z\", \"\"),\n    ownerName: user?.fullName ?? \"\",\n    ownerImageUrl: user?.imageUrl ?? \"\",\n    shared: { company: { permission: \"undefined\", organizationId: \"\" }, users: [] },\n    isClientWatchlist: true,\n    global: {\n      status: \"private\",\n    },\n  }\n}\n\nconst useSaveWatchlistImage = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: async ({ id, image }: { id: string; image: string }) => {\n      const { data } = await axiosClient.post<z.infer<typeof watchlistSaveImageOutputSchema>>(\n        `/user-data/watchlists/${id}/generate-presigned-url?image=true`,\n      )\n      const headers = {\n        \"x-amz-server-side-encryption\": \"AES256\",\n        \"Content-Type\": \"image/jpeg\",\n      }\n      const [type, base64String] = image.split(\";base64,\")\n      const blob = base64ToBlob(\n        base64String,\n        type,\n        \"We couldn't read your file. Please upload an image in a supported format (like JPG, PNG, or GIF).\",\n      )\n      await axiosClient.put(data.url, blob, { headers, withCredentials: false })\n      return data\n    },\n    onSuccess: (data, { id }) => {\n      // TODO setQueries\n      const imageUrl = `${environment.assetsOrigin}/${data.key}`\n      queryClient.setQueryData<Watchlist | undefined>(watchlistQueryKeys.watchlist(id), data => {\n        if (!data) return data\n        if (data.id === id) {\n          return { ...data, imageUrl }\n        }\n        return data\n      })\n      queryClient.setQueriesData<WatchlistCollection>(\n        { queryKey: watchlistQueryKeys.all() },\n        data => {\n          if (!data) return data\n          return {\n            results: data.results.map(item => {\n              if (item.id === id) {\n                return { ...item, imageUrl }\n              }\n              return item\n            }),\n          }\n        },\n      )\n    },\n  })\n}\n\nconst useResetWatchlistImage = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: async ({ watchlistId }: { watchlistId: string }) => {\n      const { data } = await axiosClient.delete(\n        `/user-data/watchlists/${watchlistId}/assets?image=true`,\n      )\n      return data\n    },\n    onSuccess: (data, { watchlistId }) => {\n      // TODO setQueries\n      const imageUrl = undefined\n      queryClient.setQueryData<Watchlist | undefined>(\n        watchlistQueryKeys.watchlist(watchlistId),\n        data => {\n          if (!data) return data\n          if (data.id === watchlistId) {\n            return { ...data, imageUrl }\n          }\n          return data\n        },\n      )\n      queryClient.setQueriesData<WatchlistCollection>(\n        { queryKey: watchlistQueryKeys.all() },\n        data => {\n          if (!data) return data\n          return {\n            results: data.results.map(item => {\n              if (item.id === watchlistId) {\n                return { ...item, imageUrl }\n              }\n              return item\n            }),\n          }\n        },\n      )\n    },\n  })\n}\n\nexport {\n  getEmptyWatchlist,\n  useAllWatchlists,\n  useCreateWatchlist,\n  useEntitiesFromWatchlists,\n  useFavoriteWatchlist,\n  useGetWatchlistDependencies,\n  usePatchWatchlist,\n  useResetWatchlistImage,\n  useSaveWatchlistImage,\n  useShareWatchlist,\n  useUnfavoriteWatchlist,\n  useWatchlistDependencies,\n  useWatchlistName,\n  useWatchlists,\n  type ShareWatchlistSharedBody,\n}\n"],"names":["getEmptyWatchlist","onWatchlistUpdateSuccess","patchWatchlist","useAllWatchlists","useCreateWatchlist","useEntitiesFromWatchlists","useFavoriteWatchlist","useGetWatchlistDependencies","usePatchWatchlist","useResetWatchlistImage","useSaveWatchlistImage","useShareWatchlist","useUnfavoriteWatchlist","useWatchlistDependencies","useWatchlistName","useWatchlists","queryClient","result","setQueryData","watchlistQueryKeys","watchlist","id","refetchQueries","queryKey","all","getAll","params","queryString","qs","stringify","addQueryPrefix","skipNulls","data","axiosClient","get","USER_DATA_WATCHLIST_ROOT","create","post","fields","patch","dependencies","ids","shareWatchlist","sharedBody","favorite","options","put","watchlistId","cameFromSharedLink","unfavorite","delete","watchlistIds","queryData","map","queryFn","getWatchlistById","useQueries","queries","expression","getExpressionIds","types","watchlistsData","entities","reduce","acc","items","ownership","useQuery","owned","shared","select","response","results","mapToISOTimestamp","gcTime","staleTime","useQueryClient","useMutation","mutationFn","onSuccess","watchlistCustomerIo","watchlistApi","interactionTimestamp","Date","now","onError","error","AxiosError","enqueueError","message","onMutate","setQueriesData","item","invalidateQueries","variables","QUERY_KEY_FEATURE_FLAG","removeQueries","CQS_SUMMARY_KEY","updatedFields","name","push","update","sharedWith","shareCustomerIo","getSharedWith","disableSuccessCallback","savedStatus","isFetching","useUserQueries","enabled","inner","filter","find","query","isLoading","company","mutateAsync","deleteWatchlist","useDeleteWatchlist","isLoadingDeps","type","useMultipleSavedQueries","isFetchingQueries","length","loading","useWatchlist","res","getQueriesData","_queryKey","file","flat","isFavorite","isPublic","user","defaultSaveName","ownerUserId","dateCreated","toISOString","replace","lastUpdated","lastInteracted","ownerName","fullName","ownerImageUrl","imageUrl","permission","organizationId","users","isClientWatchlist","global","status","image","headers","base64String","split","blob","base64ToBlob","url","withCredentials","environment","assetsOrigin","key","undefined"],"rangeMappingsmappings":"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"}