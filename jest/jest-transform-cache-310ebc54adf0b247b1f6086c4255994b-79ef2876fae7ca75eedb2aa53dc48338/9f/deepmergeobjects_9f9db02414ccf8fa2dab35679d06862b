748ea5835d9e1c71f146d24608f2b0de
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "deepMergeObjects", {
    enumerable: true,
    get: function() {
        return deepMergeObjects;
    }
});
const _genericobjecttypes = require("./generic-object.types");
function deepMergeObjects(first, second, options) {
    const ret = Object.assign({}, first);
    Object.keys(second).forEach((key)=>{
        if (Object.prototype.hasOwnProperty.call(ret, key)) {
            if ((0, _genericobjecttypes.isObject)(ret) && (0, _genericobjecttypes.isObject)(second) && (0, _genericobjecttypes.isArray)(ret[key]) && (0, _genericobjecttypes.isArray)(second[key])) {
            // do nothing
            } else if ((0, _genericobjecttypes.isObject)(ret) && (0, _genericobjecttypes.isObject)(second) && (0, _genericobjecttypes.isObject)(ret[key]) && (0, _genericobjecttypes.isObject)(second[key])) {
                Object.assign(ret, {
                    [key]: deepMergeObjects(ret[key], second[key], options)
                });
            } else if ((0, _genericobjecttypes.isObject)(second)) {
                Object.assign(ret, {
                    [key]: second[key]
                });
            }
        } else if ((0, _genericobjecttypes.isObject)(second)) {
            Object.assign(ret, {
                [key]: second[key]
            });
        }
    });
    return ret;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3V0aWxzL3NyYy9saWIvZGVlcC1tZXJnZS1vYmplY3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyaWNPYmplY3QsIGlzQXJyYXksIGlzT2JqZWN0IH0gZnJvbSBcIi4vZ2VuZXJpYy1vYmplY3QudHlwZXNcIlxuXG5pbnRlcmZhY2UgSU9wdGlvbnMge1xuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAsIHZhbHVlcyBleHBsaWNpdGx5IHByb3ZpZGVkIGFzIGB1bmRlZmluZWRgIHdpbGwgb3ZlcnJpZGUgZXhpc3RpbmcgdmFsdWVzLCB0aG91Z2ggcHJvcGVydGllcyB0aGF0IGFyZSBzaW1wbHkgb21pdHRlZCB3b24ndCBhZmZlY3QgYW55dGhpbmcuXG4gICAqIFdoZW4gYGZhbHNlYCwgdmFsdWVzIGV4cGxpY2l0bHkgcHJvdmlkZWQgYXMgYHVuZGVmaW5lZGAgd29uJ3Qgb3ZlcnJpZGUgZXhpc3RpbmcgdmFsdWVzLlxuICAgKlxuICAgKiBEZWZhdWx0OiBgdHJ1ZWBcbiAgICovXG4gIGFsbG93VW5kZWZpbmVkT3ZlcnJpZGVzOiBib29sZWFuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBpdCB3aWxsIG1lcmdlIGFycmF5IHByb3BlcnRpZXMuXG4gICAqIFdoZW4gYGZhbHNlYCBpdCB3aWxsIHJlcGxhY2UgYXJyYXkgcHJvcGVydGllcyB3aXRoIHRoZSBsYXN0IGluc3RhbmNlIGVudGlyZWx5IGluc3RlYWQgb2YgbWVyZ2luZyB0aGVpciBjb250ZW50cy5cbiAgICpcbiAgICogRGVmYXVsdDogYHRydWVgXG4gICAqL1xuICBtZXJnZUFycmF5czogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBkZWVwTWVyZ2VPYmplY3RzPEEgZXh0ZW5kcyBHZW5lcmljT2JqZWN0LCBCIGV4dGVuZHMgR2VuZXJpY09iamVjdD4oXG4gIGZpcnN0OiBBLFxuICBzZWNvbmQ6IEIsXG4gIG9wdGlvbnM/OiBJT3B0aW9ucyxcbik6IEEgJiBCIHtcbiAgY29uc3QgcmV0OiBBICYgQiA9IE9iamVjdC5hc3NpZ24oe30sIGZpcnN0KSBhcyBBICYgQlxuICBPYmplY3Qua2V5cyhzZWNvbmQpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJldCwga2V5KSkge1xuICAgICAgaWYgKGlzT2JqZWN0KHJldCkgJiYgaXNPYmplY3Qoc2Vjb25kKSAmJiBpc0FycmF5KHJldFtrZXldKSAmJiBpc0FycmF5KHNlY29uZFtrZXldKSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHJldCkgJiYgaXNPYmplY3Qoc2Vjb25kKSAmJiBpc09iamVjdChyZXRba2V5XSkgJiYgaXNPYmplY3Qoc2Vjb25kW2tleV0pKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmV0LCB7IFtrZXldOiBkZWVwTWVyZ2VPYmplY3RzKHJldFtrZXldLCBzZWNvbmRba2V5XSwgb3B0aW9ucykgfSlcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc2Vjb25kKSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKHJldCwgeyBba2V5XTogc2Vjb25kW2tleV0gfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNlY29uZCkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmV0LCB7IFtrZXldOiBzZWNvbmRba2V5XSB9KVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHJldFxufVxuXG5leHBvcnQgeyBkZWVwTWVyZ2VPYmplY3RzIH1cbiJdLCJuYW1lcyI6WyJkZWVwTWVyZ2VPYmplY3RzIiwiZmlyc3QiLCJzZWNvbmQiLCJvcHRpb25zIiwicmV0IiwiT2JqZWN0IiwiYXNzaWduIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc09iamVjdCIsImlzQXJyYXkiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXlDU0E7OztlQUFBQTs7O29DQXpDd0M7QUFtQmpELFNBQVNBLGlCQUNQQyxLQUFRLEVBQ1JDLE1BQVMsRUFDVEMsT0FBa0I7SUFFbEIsTUFBTUMsTUFBYUMsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR0w7SUFDckNJLE9BQU9FLElBQUksQ0FBQ0wsUUFBUU0sT0FBTyxDQUFDQyxDQUFBQTtRQUMxQixJQUFJSixPQUFPSyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixLQUFLSyxNQUFNO1lBQ2xELElBQUlJLElBQUFBLDRCQUFRLEVBQUNULFFBQVFTLElBQUFBLDRCQUFRLEVBQUNYLFdBQVdZLElBQUFBLDJCQUFPLEVBQUNWLEdBQUcsQ0FBQ0ssSUFBSSxLQUFLSyxJQUFBQSwyQkFBTyxFQUFDWixNQUFNLENBQUNPLElBQUksR0FBRztZQUNsRixhQUFhO1lBQ2YsT0FBTyxJQUFJSSxJQUFBQSw0QkFBUSxFQUFDVCxRQUFRUyxJQUFBQSw0QkFBUSxFQUFDWCxXQUFXVyxJQUFBQSw0QkFBUSxFQUFDVCxHQUFHLENBQUNLLElBQUksS0FBS0ksSUFBQUEsNEJBQVEsRUFBQ1gsTUFBTSxDQUFDTyxJQUFJLEdBQUc7Z0JBQzNGSixPQUFPQyxNQUFNLENBQUNGLEtBQUs7b0JBQUUsQ0FBQ0ssSUFBSSxFQUFFVCxpQkFBaUJJLEdBQUcsQ0FBQ0ssSUFBSSxFQUFFUCxNQUFNLENBQUNPLElBQUksRUFBRU47Z0JBQVM7WUFDL0UsT0FBTyxJQUFJVSxJQUFBQSw0QkFBUSxFQUFDWCxTQUFTO2dCQUMzQkcsT0FBT0MsTUFBTSxDQUFDRixLQUFLO29CQUFFLENBQUNLLElBQUksRUFBRVAsTUFBTSxDQUFDTyxJQUFJO2dCQUFDO1lBQzFDO1FBQ0YsT0FBTyxJQUFJSSxJQUFBQSw0QkFBUSxFQUFDWCxTQUFTO1lBQzNCRyxPQUFPQyxNQUFNLENBQUNGLEtBQUs7Z0JBQUUsQ0FBQ0ssSUFBSSxFQUFFUCxNQUFNLENBQUNPLElBQUk7WUFBQztRQUMxQztJQUNGO0lBQ0EsT0FBT0w7QUFDVCJ9