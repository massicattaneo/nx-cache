a5717b90c40d266e780e5143c1143126
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useBriefCreateOrEditSteps", {
    enumerable: true,
    get: function() {
        return useBriefCreateOrEditSteps;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _components = require("../../components");
const _briefCreateOrEditStepsutils = require("../../utils/briefCreateOrEditSteps.utils");
const useBriefCreateOrEditSteps = ({ isEdit, initialWatchlistId, isLoadingWatchlistPreload })=>{
    const [activeStep, setActiveStep] = (0, _react.useState)(0);
    const briefCreateOrEditStepsDict = (0, _react.useMemo)(()=>({
            watchlist: {
                component: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.BriefWatchlistSelectionStep, {}),
                getIsStepDisabled: _briefCreateOrEditStepsutils.getIsSelectWatchlistStepDisabled,
                type: "watchlists"
            },
            schedule: {
                component: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.BriefNotificationsStep, {}),
                getIsStepDisabled: _briefCreateOrEditStepsutils.getIsSelectScheduleStepDisabled,
                type: "schedule"
            },
            name: {
                component: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.BriefSaveStep, {
                    isLoadingWatchlistPreload: isLoadingWatchlistPreload
                }),
                getIsStepDisabled: _briefCreateOrEditStepsutils.getIsSelectNameStepDisabled,
                type: "name"
            }
        }), [
        isLoadingWatchlistPreload
    ]);
    const steps = (0, _react.useMemo)(()=>{
        if (isEdit || initialWatchlistId) {
            return [
                briefCreateOrEditStepsDict.schedule,
                briefCreateOrEditStepsDict.name
            ];
        }
        return [
            briefCreateOrEditStepsDict.watchlist,
            briefCreateOrEditStepsDict.schedule,
            briefCreateOrEditStepsDict.name
        ];
    }, [
        briefCreateOrEditStepsDict,
        isEdit,
        initialWatchlistId
    ]);
    return {
        step: steps[activeStep],
        activeStep,
        setActiveStep,
        numSteps: steps.length
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2JyaWVmL3NyYy9ob29rcy91c2VCcmllZkNyZWF0ZU9yRWRpdFN0ZXBzL3VzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoLCBKU1gsIFNldFN0YXRlQWN0aW9uLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBCcmllZkNvbmZpZ0Zvcm0gfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9icmllZlwiXG5pbXBvcnQge1xuICBCcmllZk5vdGlmaWNhdGlvbnNTdGVwLFxuICBCcmllZlNhdmVTdGVwLFxuICBCcmllZldhdGNobGlzdFNlbGVjdGlvblN0ZXAsXG59IGZyb20gXCIuLi8uLi9jb21wb25lbnRzXCJcbmltcG9ydCB7XG4gIGdldElzU2VsZWN0TmFtZVN0ZXBEaXNhYmxlZCxcbiAgZ2V0SXNTZWxlY3RTY2hlZHVsZVN0ZXBEaXNhYmxlZCxcbiAgZ2V0SXNTZWxlY3RXYXRjaGxpc3RTdGVwRGlzYWJsZWQsXG59IGZyb20gXCIuLi8uLi91dGlscy9icmllZkNyZWF0ZU9yRWRpdFN0ZXBzLnV0aWxzXCJcblxudHlwZSBCcmllZkNyZWF0ZU9yRWRpdFN0ZXBOYW1lID0gXCJ3YXRjaGxpc3RzXCIgfCBcInNjaGVkdWxlXCIgfCBcIm5hbWVcIlxuXG50eXBlIFN0ZXAgPSB7XG4gIGNvbXBvbmVudDogSlNYLkVsZW1lbnRcbiAgZ2V0SXNTdGVwRGlzYWJsZWQ6IChicmllZkNvbmZpZzogQnJpZWZDb25maWdGb3JtLCBoYXNDb21wYW5pZXM6IGJvb2xlYW4pID0+IGJvb2xlYW5cbiAgdHlwZTogQnJpZWZDcmVhdGVPckVkaXRTdGVwTmFtZVxufVxuXG50eXBlIFVzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNQcm9wcyA9IHtcbiAgaXNFZGl0OiBib29sZWFuXG4gIGluaXRpYWxXYXRjaGxpc3RJZDogc3RyaW5nIHwgbnVsbFxuICBpc0xvYWRpbmdXYXRjaGxpc3RQcmVsb2FkOiBib29sZWFuXG59XG5cbnR5cGUgVXNlQnJpZWZDcmVhdGVPckVkaXRTdGVwc1N0YXRlID0ge1xuICBzdGVwOiBTdGVwXG4gIGFjdGl2ZVN0ZXA6IG51bWJlclxuICBudW1TdGVwczogbnVtYmVyXG4gIHNldEFjdGl2ZVN0ZXA6IERpc3BhdGNoPFNldFN0YXRlQWN0aW9uPG51bWJlcj4+XG59XG5cbmNvbnN0IHVzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHMgPSAoe1xuICBpc0VkaXQsXG4gIGluaXRpYWxXYXRjaGxpc3RJZCxcbiAgaXNMb2FkaW5nV2F0Y2hsaXN0UHJlbG9hZCxcbn06IFVzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNQcm9wcyk6IFVzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNTdGF0ZSA9PiB7XG4gIGNvbnN0IFthY3RpdmVTdGVwLCBzZXRBY3RpdmVTdGVwXSA9IHVzZVN0YXRlKDApXG5cbiAgY29uc3QgYnJpZWZDcmVhdGVPckVkaXRTdGVwc0RpY3QgPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICB3YXRjaGxpc3Q6IHtcbiAgICAgICAgY29tcG9uZW50OiA8QnJpZWZXYXRjaGxpc3RTZWxlY3Rpb25TdGVwIC8+LFxuICAgICAgICBnZXRJc1N0ZXBEaXNhYmxlZDogZ2V0SXNTZWxlY3RXYXRjaGxpc3RTdGVwRGlzYWJsZWQsXG4gICAgICAgIHR5cGU6IFwid2F0Y2hsaXN0c1wiIGFzIGNvbnN0LFxuICAgICAgfSxcbiAgICAgIHNjaGVkdWxlOiB7XG4gICAgICAgIGNvbXBvbmVudDogPEJyaWVmTm90aWZpY2F0aW9uc1N0ZXAgLz4sXG4gICAgICAgIGdldElzU3RlcERpc2FibGVkOiBnZXRJc1NlbGVjdFNjaGVkdWxlU3RlcERpc2FibGVkLFxuICAgICAgICB0eXBlOiBcInNjaGVkdWxlXCIgYXMgY29uc3QsXG4gICAgICB9LFxuICAgICAgbmFtZToge1xuICAgICAgICBjb21wb25lbnQ6IDxCcmllZlNhdmVTdGVwIGlzTG9hZGluZ1dhdGNobGlzdFByZWxvYWQ9e2lzTG9hZGluZ1dhdGNobGlzdFByZWxvYWR9IC8+LFxuICAgICAgICBnZXRJc1N0ZXBEaXNhYmxlZDogZ2V0SXNTZWxlY3ROYW1lU3RlcERpc2FibGVkLFxuICAgICAgICB0eXBlOiBcIm5hbWVcIiBhcyBjb25zdCxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgW2lzTG9hZGluZ1dhdGNobGlzdFByZWxvYWRdLFxuICApXG5cbiAgY29uc3Qgc3RlcHM6IEFycmF5PFN0ZXA+ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKGlzRWRpdCB8fCBpbml0aWFsV2F0Y2hsaXN0SWQpIHtcbiAgICAgIHJldHVybiBbYnJpZWZDcmVhdGVPckVkaXRTdGVwc0RpY3Quc2NoZWR1bGUsIGJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNEaWN0Lm5hbWVdXG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgIGJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNEaWN0LndhdGNobGlzdCxcbiAgICAgIGJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNEaWN0LnNjaGVkdWxlLFxuICAgICAgYnJpZWZDcmVhdGVPckVkaXRTdGVwc0RpY3QubmFtZSxcbiAgICBdXG4gIH0sIFticmllZkNyZWF0ZU9yRWRpdFN0ZXBzRGljdCwgaXNFZGl0LCBpbml0aWFsV2F0Y2hsaXN0SWRdKVxuXG4gIHJldHVybiB7IHN0ZXA6IHN0ZXBzW2FjdGl2ZVN0ZXBdLCBhY3RpdmVTdGVwLCBzZXRBY3RpdmVTdGVwLCBudW1TdGVwczogc3RlcHMubGVuZ3RoIH1cbn1cblxuZXhwb3J0IHsgdXNlQnJpZWZDcmVhdGVPckVkaXRTdGVwcyB9XG5leHBvcnQgdHlwZSB7IFVzZUJyaWVmQ3JlYXRlT3JFZGl0U3RlcHNTdGF0ZSwgVXNlQnJpZWZDcmVhdGVPckVkaXRTdGVwc1Byb3BzIH1cbiJdLCJuYW1lcyI6WyJ1c2VCcmllZkNyZWF0ZU9yRWRpdFN0ZXBzIiwiaXNFZGl0IiwiaW5pdGlhbFdhdGNobGlzdElkIiwiaXNMb2FkaW5nV2F0Y2hsaXN0UHJlbG9hZCIsImFjdGl2ZVN0ZXAiLCJzZXRBY3RpdmVTdGVwIiwidXNlU3RhdGUiLCJicmllZkNyZWF0ZU9yRWRpdFN0ZXBzRGljdCIsInVzZU1lbW8iLCJ3YXRjaGxpc3QiLCJjb21wb25lbnQiLCJCcmllZldhdGNobGlzdFNlbGVjdGlvblN0ZXAiLCJnZXRJc1N0ZXBEaXNhYmxlZCIsImdldElzU2VsZWN0V2F0Y2hsaXN0U3RlcERpc2FibGVkIiwidHlwZSIsInNjaGVkdWxlIiwiQnJpZWZOb3RpZmljYXRpb25zU3RlcCIsImdldElzU2VsZWN0U2NoZWR1bGVTdGVwRGlzYWJsZWQiLCJuYW1lIiwiQnJpZWZTYXZlU3RlcCIsImdldElzU2VsZWN0TmFtZVN0ZXBEaXNhYmxlZCIsInN0ZXBzIiwic3RlcCIsIm51bVN0ZXBzIiwibGVuZ3RoIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE2RVNBOzs7ZUFBQUE7Ozs7dUJBN0V3RDs0QkFNMUQ7NkNBS0E7QUF1QlAsTUFBTUEsNEJBQTRCLENBQUMsRUFDakNDLE1BQU0sRUFDTkMsa0JBQWtCLEVBQ2xCQyx5QkFBeUIsRUFDTTtJQUMvQixNQUFNLENBQUNDLFlBQVlDLGNBQWMsR0FBR0MsSUFBQUEsZUFBUSxFQUFDO0lBRTdDLE1BQU1DLDZCQUE2QkMsSUFBQUEsY0FBTyxFQUN4QyxJQUFPLENBQUE7WUFDTEMsV0FBVztnQkFDVEMseUJBQVcscUJBQUNDLHVDQUEyQjtnQkFDdkNDLG1CQUFtQkMsNkRBQWdDO2dCQUNuREMsTUFBTTtZQUNSO1lBQ0FDLFVBQVU7Z0JBQ1JMLHlCQUFXLHFCQUFDTSxrQ0FBc0I7Z0JBQ2xDSixtQkFBbUJLLDREQUErQjtnQkFDbERILE1BQU07WUFDUjtZQUNBSSxNQUFNO2dCQUNKUix5QkFBVyxxQkFBQ1MseUJBQWE7b0JBQUNoQiwyQkFBMkJBOztnQkFDckRTLG1CQUFtQlEsd0RBQTJCO2dCQUM5Q04sTUFBTTtZQUNSO1FBQ0YsQ0FBQSxHQUNBO1FBQUNYO0tBQTBCO0lBRzdCLE1BQU1rQixRQUFxQmIsSUFBQUEsY0FBTyxFQUFDO1FBQ2pDLElBQUlQLFVBQVVDLG9CQUFvQjtZQUNoQyxPQUFPO2dCQUFDSywyQkFBMkJRLFFBQVE7Z0JBQUVSLDJCQUEyQlcsSUFBSTthQUFDO1FBQy9FO1FBRUEsT0FBTztZQUNMWCwyQkFBMkJFLFNBQVM7WUFDcENGLDJCQUEyQlEsUUFBUTtZQUNuQ1IsMkJBQTJCVyxJQUFJO1NBQ2hDO0lBQ0gsR0FBRztRQUFDWDtRQUE0Qk47UUFBUUM7S0FBbUI7SUFFM0QsT0FBTztRQUFFb0IsTUFBTUQsS0FBSyxDQUFDakIsV0FBVztRQUFFQTtRQUFZQztRQUFla0IsVUFBVUYsTUFBTUcsTUFBTTtJQUFDO0FBQ3RGIn0=