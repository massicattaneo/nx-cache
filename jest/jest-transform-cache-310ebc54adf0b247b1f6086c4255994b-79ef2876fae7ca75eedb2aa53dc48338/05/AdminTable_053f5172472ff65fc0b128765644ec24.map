{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/AdminTable/AdminTable.tsx"],"sourcesContent":["import { SystemCssProperties } from \"@mui/system\"\nimport { Box, Paper, SxProps } from \"@rp/react/web/mui/core\"\nimport { ArrowDownward, ArrowUpward } from \"@rp/react/web/mui/icons\"\n\ntype Props<TData, SortId> = {\n  data: Array<TData>\n  renderRow: (row: TData, index: number) => React.ReactNode\n  labels: Array<{\n    text: string\n    sx?: SxProps\n    orderId?: SortId\n  }>\n  orderBy?: SortId\n  orderDirection?: \"asc\" | \"desc\"\n  onOrderClick?: (label: SortId) => void\n  sx?: SystemCssProperties\n}\nconst AdminTable = <TData, SortId>({\n  data,\n  renderRow,\n  labels,\n  sx,\n  orderBy,\n  orderDirection,\n  onOrderClick,\n}: Props<TData, SortId>) => {\n  return (\n    <Paper\n      elevation={1}\n      sx={theme => ({\n        backgroundColor: \"elevation.dp01\",\n        position: \"relative\",\n        ...theme.scrollbarStyles,\n        ...sx,\n      })}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          position: \"sticky\",\n          top: 0,\n          zIndex: 1,\n          backgroundColor: \"elevation.dp02\",\n          borderBottom: 1,\n          borderColor: \"outline.sidebar\",\n          fontWeight: 700,\n          px: 3,\n        }}\n      >\n        {labels.map(label => {\n          const sorted = orderBy && label.orderId === orderBy ? orderDirection || \"desc\" : undefined\n          return (\n            <Box\n              onClick={() => {\n                if (label.orderId && onOrderClick) onOrderClick(label.orderId)\n              }}\n              key={label.text}\n              sx={{\n                display: \"flex\",\n                \"& svg\": { fontSize: 20 },\n                gap: 1,\n                py: 1.5,\n                cursor: label.orderId ? \"pointer\" : undefined,\n                ...label.sx,\n              }}\n            >\n              {label.text}\n              {sorted === \"asc\" && <ArrowUpward />}\n              {sorted === \"desc\" && <ArrowDownward />}\n            </Box>\n          )\n        })}\n      </Box>\n      <Box sx={{ px: 2 }}>{data.map((row, index) => renderRow(row, index))}</Box>\n    </Paper>\n  )\n}\n\nexport { AdminTable }\n"],"names":["AdminTable","data","renderRow","labels","sx","orderBy","orderDirection","onOrderClick","Paper","elevation","theme","backgroundColor","position","scrollbarStyles","Box","display","top","zIndex","borderBottom","borderColor","fontWeight","px","map","label","sorted","orderId","undefined","onClick","fontSize","gap","py","cursor","text","ArrowUpward","ArrowDownward","row","index"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA8ESA;;;eAAAA;;;;sBA7E2B;uBACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAe3C,MAAMA,aAAa,CAAgB,EACjCC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,EAAE,EACFC,OAAO,EACPC,cAAc,EACdC,YAAY,EACS;IACrB,qBACE,sBAACC,WAAK;QACJC,WAAW;QACXL,IAAIM,CAAAA,QAAU;gBACZC,iBAAiB;gBACjBC,UAAU;eACPF,MAAMG,eAAe,EACrBT;;0BAGL,qBAACU,SAAG;gBACFV,IAAI;oBACFW,SAAS;oBACTH,UAAU;oBACVI,KAAK;oBACLC,QAAQ;oBACRN,iBAAiB;oBACjBO,cAAc;oBACdC,aAAa;oBACbC,YAAY;oBACZC,IAAI;gBACN;0BAEClB,OAAOmB,GAAG,CAACC,CAAAA;oBACV,MAAMC,SAASnB,WAAWkB,MAAME,OAAO,KAAKpB,UAAUC,kBAAkB,SAASoB;oBACjF,qBACE,sBAACZ,SAAG;wBACFa,SAAS;4BACP,IAAIJ,MAAME,OAAO,IAAIlB,cAAcA,aAAagB,MAAME,OAAO;wBAC/D;wBAEArB,IAAI;4BACFW,SAAS;4BACT,SAAS;gCAAEa,UAAU;4BAAG;4BACxBC,KAAK;4BACLC,IAAI;4BACJC,QAAQR,MAAME,OAAO,GAAG,YAAYC;2BACjCH,MAAMnB,EAAE;;4BAGZmB,MAAMS,IAAI;4BACVR,WAAW,uBAAS,qBAACS,kBAAW;4BAChCT,WAAW,wBAAU,qBAACU,oBAAa;;uBAZ/BX,MAAMS,IAAI;gBAerB;;0BAEF,qBAAClB,SAAG;gBAACV,IAAI;oBAAEiB,IAAI;gBAAE;0BAAIpB,KAAKqB,GAAG,CAAC,CAACa,KAAKC,QAAUlC,UAAUiC,KAAKC;;;;AAGnE"}