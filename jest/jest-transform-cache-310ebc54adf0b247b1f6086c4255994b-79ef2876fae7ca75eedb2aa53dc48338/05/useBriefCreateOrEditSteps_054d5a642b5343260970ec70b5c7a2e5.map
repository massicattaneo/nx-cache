{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/brief/src/hooks/useBriefCreateOrEditSteps/useBriefCreateOrEditSteps.tsx"],"sourcesContent":["import { Dispatch, JSX, SetStateAction, useMemo, useState } from \"react\"\nimport { BriefConfigForm } from \"@rp/react/tanstack-api/brief\"\nimport {\n  BriefNotificationsStep,\n  BriefSaveStep,\n  BriefWatchlistSelectionStep,\n} from \"../../components\"\nimport {\n  getIsSelectNameStepDisabled,\n  getIsSelectScheduleStepDisabled,\n  getIsSelectWatchlistStepDisabled,\n} from \"../../utils/briefCreateOrEditSteps.utils\"\n\ntype BriefCreateOrEditStepName = \"watchlists\" | \"schedule\" | \"name\"\n\ntype Step = {\n  component: JSX.Element\n  getIsStepDisabled: (briefConfig: BriefConfigForm, hasCompanies: boolean) => boolean\n  type: BriefCreateOrEditStepName\n}\n\ntype UseBriefCreateOrEditStepsProps = {\n  isEdit: boolean\n  initialWatchlistId: string | null\n  isLoadingWatchlistPreload: boolean\n}\n\ntype UseBriefCreateOrEditStepsState = {\n  step: Step\n  activeStep: number\n  numSteps: number\n  setActiveStep: Dispatch<SetStateAction<number>>\n}\n\nconst useBriefCreateOrEditSteps = ({\n  isEdit,\n  initialWatchlistId,\n  isLoadingWatchlistPreload,\n}: UseBriefCreateOrEditStepsProps): UseBriefCreateOrEditStepsState => {\n  const [activeStep, setActiveStep] = useState(0)\n\n  const briefCreateOrEditStepsDict = useMemo(\n    () => ({\n      watchlist: {\n        component: <BriefWatchlistSelectionStep />,\n        getIsStepDisabled: getIsSelectWatchlistStepDisabled,\n        type: \"watchlists\" as const,\n      },\n      schedule: {\n        component: <BriefNotificationsStep />,\n        getIsStepDisabled: getIsSelectScheduleStepDisabled,\n        type: \"schedule\" as const,\n      },\n      name: {\n        component: <BriefSaveStep isLoadingWatchlistPreload={isLoadingWatchlistPreload} />,\n        getIsStepDisabled: getIsSelectNameStepDisabled,\n        type: \"name\" as const,\n      },\n    }),\n    [isLoadingWatchlistPreload],\n  )\n\n  const steps: Array<Step> = useMemo(() => {\n    if (isEdit || initialWatchlistId) {\n      return [briefCreateOrEditStepsDict.schedule, briefCreateOrEditStepsDict.name]\n    }\n\n    return [\n      briefCreateOrEditStepsDict.watchlist,\n      briefCreateOrEditStepsDict.schedule,\n      briefCreateOrEditStepsDict.name,\n    ]\n  }, [briefCreateOrEditStepsDict, isEdit, initialWatchlistId])\n\n  return { step: steps[activeStep], activeStep, setActiveStep, numSteps: steps.length }\n}\n\nexport { useBriefCreateOrEditSteps }\nexport type { UseBriefCreateOrEditStepsState, UseBriefCreateOrEditStepsProps }\n"],"names":["useBriefCreateOrEditSteps","isEdit","initialWatchlistId","isLoadingWatchlistPreload","activeStep","setActiveStep","useState","briefCreateOrEditStepsDict","useMemo","watchlist","component","BriefWatchlistSelectionStep","getIsStepDisabled","getIsSelectWatchlistStepDisabled","type","schedule","BriefNotificationsStep","getIsSelectScheduleStepDisabled","name","BriefSaveStep","getIsSelectNameStepDisabled","steps","step","numSteps","length"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA6ESA;;;eAAAA;;;;uBA7EwD;4BAM1D;6CAKA;AAuBP,MAAMA,4BAA4B,CAAC,EACjCC,MAAM,EACNC,kBAAkB,EAClBC,yBAAyB,EACM;IAC/B,MAAM,CAACC,YAAYC,cAAc,GAAGC,IAAAA,eAAQ,EAAC;IAE7C,MAAMC,6BAA6BC,IAAAA,cAAO,EACxC,IAAO,CAAA;YACLC,WAAW;gBACTC,yBAAW,qBAACC,uCAA2B;gBACvCC,mBAAmBC,6DAAgC;gBACnDC,MAAM;YACR;YACAC,UAAU;gBACRL,yBAAW,qBAACM,kCAAsB;gBAClCJ,mBAAmBK,4DAA+B;gBAClDH,MAAM;YACR;YACAI,MAAM;gBACJR,yBAAW,qBAACS,yBAAa;oBAAChB,2BAA2BA;;gBACrDS,mBAAmBQ,wDAA2B;gBAC9CN,MAAM;YACR;QACF,CAAA,GACA;QAACX;KAA0B;IAG7B,MAAMkB,QAAqBb,IAAAA,cAAO,EAAC;QACjC,IAAIP,UAAUC,oBAAoB;YAChC,OAAO;gBAACK,2BAA2BQ,QAAQ;gBAAER,2BAA2BW,IAAI;aAAC;QAC/E;QAEA,OAAO;YACLX,2BAA2BE,SAAS;YACpCF,2BAA2BQ,QAAQ;YACnCR,2BAA2BW,IAAI;SAChC;IACH,GAAG;QAACX;QAA4BN;QAAQC;KAAmB;IAE3D,OAAO;QAAEoB,MAAMD,KAAK,CAACjB,WAAW;QAAEA;QAAYC;QAAekB,UAAUF,MAAMG,MAAM;IAAC;AACtF"}