58288f0cb257045e19a0f8751262c222
'use strict';
var codes = require('../rpc/codes.js');
const JSONRPC2_TO_HTTP_CODE = {
    PARSE_ERROR: 400,
    BAD_REQUEST: 400,
    UNAUTHORIZED: 401,
    NOT_FOUND: 404,
    FORBIDDEN: 403,
    METHOD_NOT_SUPPORTED: 405,
    TIMEOUT: 408,
    CONFLICT: 409,
    PRECONDITION_FAILED: 412,
    PAYLOAD_TOO_LARGE: 413,
    UNSUPPORTED_MEDIA_TYPE: 415,
    UNPROCESSABLE_CONTENT: 422,
    TOO_MANY_REQUESTS: 429,
    CLIENT_CLOSED_REQUEST: 499,
    INTERNAL_SERVER_ERROR: 500,
    NOT_IMPLEMENTED: 501
};
function getStatusCodeFromKey(code) {
    var _JSONRPC2_TO_HTTP_CODE_code;
    return (_JSONRPC2_TO_HTTP_CODE_code = JSONRPC2_TO_HTTP_CODE[code]) !== null && _JSONRPC2_TO_HTTP_CODE_code !== void 0 ? _JSONRPC2_TO_HTTP_CODE_code : 500;
}
function getHTTPStatusCode(json) {
    const arr = Array.isArray(json) ? json : [
        json
    ];
    const httpStatuses = new Set(arr.map((res)=>{
        if ('error' in res) {
            const data = res.error.data;
            if (typeof data.httpStatus === 'number') {
                return data.httpStatus;
            }
            const code = codes.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];
            return getStatusCodeFromKey(code);
        }
        return 200;
    }));
    if (httpStatuses.size !== 1) {
        return 207;
    }
    const httpStatus = httpStatuses.values().next().value;
    return httpStatus;
}
function getHTTPStatusCodeFromError(error) {
    return getStatusCodeFromKey(error.code);
}
exports.getHTTPStatusCode = getHTTPStatusCode;
exports.getHTTPStatusCodeFromError = getHTTPStatusCodeFromError;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AdHJwYy9zZXJ2ZXIvZGlzdC91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQvaHR0cC9nZXRIVFRQU3RhdHVzQ29kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb2RlcyA9IHJlcXVpcmUoJy4uL3JwYy9jb2Rlcy5qcycpO1xuXG5jb25zdCBKU09OUlBDMl9UT19IVFRQX0NPREUgPSB7XG4gICAgUEFSU0VfRVJST1I6IDQwMCxcbiAgICBCQURfUkVRVUVTVDogNDAwLFxuICAgIFVOQVVUSE9SSVpFRDogNDAxLFxuICAgIE5PVF9GT1VORDogNDA0LFxuICAgIEZPUkJJRERFTjogNDAzLFxuICAgIE1FVEhPRF9OT1RfU1VQUE9SVEVEOiA0MDUsXG4gICAgVElNRU9VVDogNDA4LFxuICAgIENPTkZMSUNUOiA0MDksXG4gICAgUFJFQ09ORElUSU9OX0ZBSUxFRDogNDEyLFxuICAgIFBBWUxPQURfVE9PX0xBUkdFOiA0MTMsXG4gICAgVU5TVVBQT1JURURfTUVESUFfVFlQRTogNDE1LFxuICAgIFVOUFJPQ0VTU0FCTEVfQ09OVEVOVDogNDIyLFxuICAgIFRPT19NQU5ZX1JFUVVFU1RTOiA0MjksXG4gICAgQ0xJRU5UX0NMT1NFRF9SRVFVRVNUOiA0OTksXG4gICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAsXG4gICAgTk9UX0lNUExFTUVOVEVEOiA1MDFcbn07XG5mdW5jdGlvbiBnZXRTdGF0dXNDb2RlRnJvbUtleShjb2RlKSB7XG4gICAgcmV0dXJuIEpTT05SUEMyX1RPX0hUVFBfQ09ERVtjb2RlXSA/PyA1MDA7XG59XG5mdW5jdGlvbiBnZXRIVFRQU3RhdHVzQ29kZShqc29uKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuaXNBcnJheShqc29uKSA/IGpzb24gOiBbXG4gICAgICAgIGpzb25cbiAgICBdO1xuICAgIGNvbnN0IGh0dHBTdGF0dXNlcyA9IG5ldyBTZXQoYXJyLm1hcCgocmVzKT0+e1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5odHRwU3RhdHVzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmh0dHBTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gY29kZXMuVFJQQ19FUlJPUl9DT0RFU19CWV9OVU1CRVJbcmVzLmVycm9yLmNvZGVdO1xuICAgICAgICAgICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGNvZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAyMDA7XG4gICAgfSkpO1xuICAgIGlmIChodHRwU3RhdHVzZXMuc2l6ZSAhPT0gMSkge1xuICAgICAgICByZXR1cm4gMjA3O1xuICAgIH1cbiAgICBjb25zdCBodHRwU3RhdHVzID0gaHR0cFN0YXR1c2VzLnZhbHVlcygpLm5leHQoKS52YWx1ZTtcbiAgICByZXR1cm4gaHR0cFN0YXR1cztcbn1cbmZ1bmN0aW9uIGdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIGdldFN0YXR1c0NvZGVGcm9tS2V5KGVycm9yLmNvZGUpO1xufVxuXG5leHBvcnRzLmdldEhUVFBTdGF0dXNDb2RlID0gZ2V0SFRUUFN0YXR1c0NvZGU7XG5leHBvcnRzLmdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yID0gZ2V0SFRUUFN0YXR1c0NvZGVGcm9tRXJyb3I7XG4iXSwibmFtZXMiOlsiY29kZXMiLCJyZXF1aXJlIiwiSlNPTlJQQzJfVE9fSFRUUF9DT0RFIiwiUEFSU0VfRVJST1IiLCJCQURfUkVRVUVTVCIsIlVOQVVUSE9SSVpFRCIsIk5PVF9GT1VORCIsIkZPUkJJRERFTiIsIk1FVEhPRF9OT1RfU1VQUE9SVEVEIiwiVElNRU9VVCIsIkNPTkZMSUNUIiwiUFJFQ09ORElUSU9OX0ZBSUxFRCIsIlBBWUxPQURfVE9PX0xBUkdFIiwiVU5TVVBQT1JURURfTUVESUFfVFlQRSIsIlVOUFJPQ0VTU0FCTEVfQ09OVEVOVCIsIlRPT19NQU5ZX1JFUVVFU1RTIiwiQ0xJRU5UX0NMT1NFRF9SRVFVRVNUIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiTk9UX0lNUExFTUVOVEVEIiwiZ2V0U3RhdHVzQ29kZUZyb21LZXkiLCJjb2RlIiwiZ2V0SFRUUFN0YXR1c0NvZGUiLCJqc29uIiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiaHR0cFN0YXR1c2VzIiwiU2V0IiwibWFwIiwicmVzIiwiZGF0YSIsImVycm9yIiwiaHR0cFN0YXR1cyIsIlRSUENfRVJST1JfQ09ERVNfQllfTlVNQkVSIiwic2l6ZSIsInZhbHVlcyIsIm5leHQiLCJ2YWx1ZSIsImdldEhUVFBTdGF0dXNDb2RlRnJvbUVycm9yIiwiZXhwb3J0cyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLFFBQVE7QUFFcEIsTUFBTUMsd0JBQXdCO0lBQzFCQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsY0FBYztJQUNkQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsc0JBQXNCO0lBQ3RCQyxTQUFTO0lBQ1RDLFVBQVU7SUFDVkMscUJBQXFCO0lBQ3JCQyxtQkFBbUI7SUFDbkJDLHdCQUF3QjtJQUN4QkMsdUJBQXVCO0lBQ3ZCQyxtQkFBbUI7SUFDbkJDLHVCQUF1QjtJQUN2QkMsdUJBQXVCO0lBQ3ZCQyxpQkFBaUI7QUFDckI7QUFDQSxTQUFTQyxxQkFBcUJDLElBQUk7UUFDdkJsQjtJQUFQLE9BQU9BLENBQUFBLDhCQUFBQSxxQkFBcUIsQ0FBQ2tCLEtBQUssY0FBM0JsQix5Q0FBQUEsOEJBQStCO0FBQzFDO0FBQ0EsU0FBU21CLGtCQUFrQkMsSUFBSTtJQUMzQixNQUFNQyxNQUFNQyxNQUFNQyxPQUFPLENBQUNILFFBQVFBLE9BQU87UUFDckNBO0tBQ0g7SUFDRCxNQUFNSSxlQUFlLElBQUlDLElBQUlKLElBQUlLLEdBQUcsQ0FBQyxDQUFDQztRQUNsQyxJQUFJLFdBQVdBLEtBQUs7WUFDaEIsTUFBTUMsT0FBT0QsSUFBSUUsS0FBSyxDQUFDRCxJQUFJO1lBQzNCLElBQUksT0FBT0EsS0FBS0UsVUFBVSxLQUFLLFVBQVU7Z0JBQ3JDLE9BQU9GLEtBQUtFLFVBQVU7WUFDMUI7WUFDQSxNQUFNWixPQUFPcEIsTUFBTWlDLDBCQUEwQixDQUFDSixJQUFJRSxLQUFLLENBQUNYLElBQUksQ0FBQztZQUM3RCxPQUFPRCxxQkFBcUJDO1FBQ2hDO1FBQ0EsT0FBTztJQUNYO0lBQ0EsSUFBSU0sYUFBYVEsSUFBSSxLQUFLLEdBQUc7UUFDekIsT0FBTztJQUNYO0lBQ0EsTUFBTUYsYUFBYU4sYUFBYVMsTUFBTSxHQUFHQyxJQUFJLEdBQUdDLEtBQUs7SUFDckQsT0FBT0w7QUFDWDtBQUNBLFNBQVNNLDJCQUEyQlAsS0FBSztJQUNyQyxPQUFPWixxQkFBcUJZLE1BQU1YLElBQUk7QUFDMUM7QUFFQW1CLFFBQVFsQixpQkFBaUIsR0FBR0E7QUFDNUJrQixRQUFRRCwwQkFBMEIsR0FBR0EifQ==