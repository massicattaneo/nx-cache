{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/@trpc/server/dist/unstable-core-do-not-import/http/getHTTPStatusCode.js"],"sourcesContent":["'use strict';\n\nvar codes = require('../rpc/codes.js');\n\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNSUPPORTED_MEDIA_TYPE: 415,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501\n};\nfunction getStatusCodeFromKey(code) {\n    return JSONRPC2_TO_HTTP_CODE[code] ?? 500;\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if ('error' in res) {\n            const data = res.error.data;\n            if (typeof data.httpStatus === 'number') {\n                return data.httpStatus;\n            }\n            const code = codes.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) {\n        return 207;\n    }\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n\nexports.getHTTPStatusCode = getHTTPStatusCode;\nexports.getHTTPStatusCodeFromError = getHTTPStatusCodeFromError;\n"],"names":["codes","require","JSONRPC2_TO_HTTP_CODE","PARSE_ERROR","BAD_REQUEST","UNAUTHORIZED","NOT_FOUND","FORBIDDEN","METHOD_NOT_SUPPORTED","TIMEOUT","CONFLICT","PRECONDITION_FAILED","PAYLOAD_TOO_LARGE","UNSUPPORTED_MEDIA_TYPE","UNPROCESSABLE_CONTENT","TOO_MANY_REQUESTS","CLIENT_CLOSED_REQUEST","INTERNAL_SERVER_ERROR","NOT_IMPLEMENTED","getStatusCodeFromKey","code","getHTTPStatusCode","json","arr","Array","isArray","httpStatuses","Set","map","res","data","error","httpStatus","TRPC_ERROR_CODES_BY_NUMBER","size","values","next","value","getHTTPStatusCodeFromError","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,IAAIA,QAAQC,QAAQ;AAEpB,MAAMC,wBAAwB;IAC1BC,aAAa;IACbC,aAAa;IACbC,cAAc;IACdC,WAAW;IACXC,WAAW;IACXC,sBAAsB;IACtBC,SAAS;IACTC,UAAU;IACVC,qBAAqB;IACrBC,mBAAmB;IACnBC,wBAAwB;IACxBC,uBAAuB;IACvBC,mBAAmB;IACnBC,uBAAuB;IACvBC,uBAAuB;IACvBC,iBAAiB;AACrB;AACA,SAASC,qBAAqBC,IAAI;QACvBlB;IAAP,OAAOA,CAAAA,8BAAAA,qBAAqB,CAACkB,KAAK,cAA3BlB,yCAAAA,8BAA+B;AAC1C;AACA,SAASmB,kBAAkBC,IAAI;IAC3B,MAAMC,MAAMC,MAAMC,OAAO,CAACH,QAAQA,OAAO;QACrCA;KACH;IACD,MAAMI,eAAe,IAAIC,IAAIJ,IAAIK,GAAG,CAAC,CAACC;QAClC,IAAI,WAAWA,KAAK;YAChB,MAAMC,OAAOD,IAAIE,KAAK,CAACD,IAAI;YAC3B,IAAI,OAAOA,KAAKE,UAAU,KAAK,UAAU;gBACrC,OAAOF,KAAKE,UAAU;YAC1B;YACA,MAAMZ,OAAOpB,MAAMiC,0BAA0B,CAACJ,IAAIE,KAAK,CAACX,IAAI,CAAC;YAC7D,OAAOD,qBAAqBC;QAChC;QACA,OAAO;IACX;IACA,IAAIM,aAAaQ,IAAI,KAAK,GAAG;QACzB,OAAO;IACX;IACA,MAAMF,aAAaN,aAAaS,MAAM,GAAGC,IAAI,GAAGC,KAAK;IACrD,OAAOL;AACX;AACA,SAASM,2BAA2BP,KAAK;IACrC,OAAOZ,qBAAqBY,MAAMX,IAAI;AAC1C;AAEAmB,QAAQlB,iBAAiB,GAAGA;AAC5BkB,QAAQD,0BAA0B,GAAGA"}