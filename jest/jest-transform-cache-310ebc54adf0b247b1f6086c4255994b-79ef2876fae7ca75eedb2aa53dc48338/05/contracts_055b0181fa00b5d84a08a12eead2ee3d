89edab1bb69b59c88f679b143fb689fb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    validateSourceContract: function() {
        return validateSourceContract;
    },
    validateTargetContract: function() {
        return validateTargetContract;
    },
    validateType: function() {
        return validateType;
    }
});
const _invariant = require("@react-dnd/invariant");
function validateSourceContract(source) {
    (0, _invariant.invariant)(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
    (0, _invariant.invariant)(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
    (0, _invariant.invariant)(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
}
function validateTargetContract(target) {
    (0, _invariant.invariant)(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
    (0, _invariant.invariant)(typeof target.hover === 'function', 'Expected hover to be a function.');
    (0, _invariant.invariant)(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
}
function validateType(type, allowArray) {
    if (allowArray && Array.isArray(type)) {
        type.forEach((t)=>validateType(t, false));
        return;
    }
    (0, _invariant.invariant)(typeof type === 'string' || typeof type === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
} //# sourceMappingURL=contracts.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cmFjdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAnQHJlYWN0LWRuZC9pbnZhcmlhbnQnXG5cbmltcG9ydCB0eXBlIHsgRHJhZ1NvdXJjZSwgRHJvcFRhcmdldCwgSWRlbnRpZmllciB9IGZyb20gJy4vaW50ZXJmYWNlcy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU291cmNlQ29udHJhY3Qoc291cmNlOiBEcmFnU291cmNlKTogdm9pZCB7XG5cdGludmFyaWFudChcblx0XHR0eXBlb2Ygc291cmNlLmNhbkRyYWcgPT09ICdmdW5jdGlvbicsXG5cdFx0J0V4cGVjdGVkIGNhbkRyYWcgdG8gYmUgYSBmdW5jdGlvbi4nLFxuXHQpXG5cdGludmFyaWFudChcblx0XHR0eXBlb2Ygc291cmNlLmJlZ2luRHJhZyA9PT0gJ2Z1bmN0aW9uJyxcblx0XHQnRXhwZWN0ZWQgYmVnaW5EcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHNvdXJjZS5lbmREcmFnID09PSAnZnVuY3Rpb24nLFxuXHRcdCdFeHBlY3RlZCBlbmREcmFnIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXRDb250cmFjdCh0YXJnZXQ6IERyb3BUYXJnZXQpOiB2b2lkIHtcblx0aW52YXJpYW50KFxuXHRcdHR5cGVvZiB0YXJnZXQuY2FuRHJvcCA9PT0gJ2Z1bmN0aW9uJyxcblx0XHQnRXhwZWN0ZWQgY2FuRHJvcCB0byBiZSBhIGZ1bmN0aW9uLicsXG5cdClcblx0aW52YXJpYW50KFxuXHRcdHR5cGVvZiB0YXJnZXQuaG92ZXIgPT09ICdmdW5jdGlvbicsXG5cdFx0J0V4cGVjdGVkIGhvdmVyIHRvIGJlIGEgZnVuY3Rpb24uJyxcblx0KVxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHRhcmdldC5kcm9wID09PSAnZnVuY3Rpb24nLFxuXHRcdCdFeHBlY3RlZCBiZWdpbkRyYWcgdG8gYmUgYSBmdW5jdGlvbi4nLFxuXHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVR5cGUoXG5cdHR5cGU6IElkZW50aWZpZXIgfCBJZGVudGlmaWVyW10sXG5cdGFsbG93QXJyYXk/OiBib29sZWFuLFxuKTogdm9pZCB7XG5cdGlmIChhbGxvd0FycmF5ICYmIEFycmF5LmlzQXJyYXkodHlwZSkpIHtcblx0XHR0eXBlLmZvckVhY2goKHQpID0+IHZhbGlkYXRlVHlwZSh0LCBmYWxzZSkpXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRpbnZhcmlhbnQoXG5cdFx0dHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnc3ltYm9sJyxcblx0XHRhbGxvd0FycmF5XG5cdFx0XHQ/ICdUeXBlIGNhbiBvbmx5IGJlIGEgc3RyaW5nLCBhIHN5bWJvbCwgb3IgYW4gYXJyYXkgb2YgZWl0aGVyLidcblx0XHRcdDogJ1R5cGUgY2FuIG9ubHkgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2wuJyxcblx0KVxufVxuIl0sIm5hbWVzIjpbInZhbGlkYXRlU291cmNlQ29udHJhY3QiLCJ2YWxpZGF0ZVRhcmdldENvbnRyYWN0IiwidmFsaWRhdGVUeXBlIiwic291cmNlIiwiaW52YXJpYW50IiwiY2FuRHJhZyIsImJlZ2luRHJhZyIsImVuZERyYWciLCJ0YXJnZXQiLCJjYW5Ecm9wIiwiaG92ZXIiLCJkcm9wIiwidHlwZSIsImFsbG93QXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwidCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUlnQkEsc0JBQXNCO2VBQXRCQTs7SUFlQUMsc0JBQXNCO2VBQXRCQTs7SUFlQUMsWUFBWTtlQUFaQTs7OzJCQWxDVTtBQUluQixTQUFTRix1QkFBdUJHLE1BQWtCO0lBQ3hEQyxJQUFBQSxvQkFBUyxFQUNSLE9BQU9ELE9BQU9FLE9BQU8sS0FBSyxZQUMxQjtJQUVERCxJQUFBQSxvQkFBUyxFQUNSLE9BQU9ELE9BQU9HLFNBQVMsS0FBSyxZQUM1QjtJQUVERixJQUFBQSxvQkFBUyxFQUNSLE9BQU9ELE9BQU9JLE9BQU8sS0FBSyxZQUMxQjs7QUFJSyxTQUFTTix1QkFBdUJPLE1BQWtCO0lBQ3hESixJQUFBQSxvQkFBUyxFQUNSLE9BQU9JLE9BQU9DLE9BQU8sS0FBSyxZQUMxQjtJQUVETCxJQUFBQSxvQkFBUyxFQUNSLE9BQU9JLE9BQU9FLEtBQUssS0FBSyxZQUN4QjtJQUVETixJQUFBQSxvQkFBUyxFQUNSLE9BQU9JLE9BQU9HLElBQUksS0FBSyxZQUN2Qjs7QUFJSyxTQUFTVCxhQUNmVSxJQUErQixFQUMvQkMsVUFBb0I7SUFFcEIsSUFBSUEsY0FBY0MsTUFBTUMsT0FBTyxDQUFDSCxPQUFPO1FBQ3RDQSxLQUFLSSxPQUFPLENBQUMsQ0FBQ0MsSUFBTWYsYUFBYWUsR0FBRztRQUNwQzs7SUFHRGIsSUFBQUEsb0JBQVMsRUFDUixPQUFPUSxTQUFTLFlBQVksT0FBT0EsU0FBUyxVQUM1Q0MsYUFDRyxnRUFDQSJ9