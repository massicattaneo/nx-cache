6329ad711757dd1cc37708486107af33
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MIN_LENGTH_SENTENCE: function() {
        return MIN_LENGTH_SENTENCE;
    },
    SUGGESTIONS_QUERY_KEY: function() {
        return SUGGESTIONS_QUERY_KEY;
    },
    transformWatchlistBatchUploadResponse: function() {
        return transformWatchlistBatchUploadResponse;
    },
    useSuggestions: function() {
        return useSuggestions;
    },
    useWatchlistBatchUpload: function() {
        return useWatchlistBatchUpload;
    },
    useWatchlistFacets: function() {
        return useWatchlistFacets;
    },
    useWatchlistSuggestions: function() {
        return useWatchlistSuggestions;
    },
    useWatchlistSuggestionsFlat: function() {
        return useWatchlistSuggestionsFlat;
    }
});
const _i18next = require("i18next");
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _adapters = require("@rp/adapters");
const _settings = require("@rp/common/settings");
const _axiosclient = require("@rp/react/axios-client");
const _internationalization = require("@rp/react/common/internationalization");
const _reactquery = require("@tanstack/react-query");
const _suggestiontypeguards = require("./suggestion.type-guards");
const _makeSuggestionId = require("./utils/makeSuggestionId");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const SUGGESTIONS_ROOT = "/autosuggest";
const SUGGESTIONS_QUERY_KEY = "autosuggest";
const MIN_LENGTH_SENTENCE = 4 // words
;
const UPLOAD_FILE_SIZE_LIMIT = 45 // KB
;
// Helpers
const mapSuggestionsForQueryCache = (data)=>data.map((suggestion)=>_object_spread_props(_object_spread({}, suggestion), {
            type: suggestion.queryType,
            label: suggestion.name,
            value: suggestion.key,
            id: (0, _makeSuggestionId.makeSuggestionId)(suggestion.key, suggestion.queryType === "topic" ? "event" : suggestion.queryType, (0, _suggestiontypeguards.isMacroSearchSuggestion)(suggestion) ? suggestion.groups : undefined)
        }));
const mapForQueryCache = (data)=>{
    if (!data.length) return [];
    return mapSuggestionsForQueryCache(data);
};
// -------------------
// Network Requests
// -------------------
const get = async (query, limit)=>{
    const params = {
        query,
        limit
    };
    const queryParams = _qs.default.stringify(params, {
        arrayFormat: "comma"
    });
    const { data } = await _axiosclient.axiosClient.get(`${SUGGESTIONS_ROOT}?${queryParams}`);
    return data.results;
};
// -------------------
// Hooks
// -------------------
const useSuggestions = (rawParams)=>{
    const params = _object_spread_props(_object_spread({}, rawParams), {
        query: rawParams.query.trim()
    });
    const { query, perPage } = params;
    const queryKey = [
        SUGGESTIONS_QUERY_KEY,
        query
    ];
    const fetchFunction = ()=>get(query, perPage);
    const results = (0, _reactquery.useQuery)({
        queryKey,
        queryFn: fetchFunction,
        staleTime: Infinity,
        enabled: query.length !== 0,
        select: mapForQueryCache,
        placeholderData: _reactquery.keepPreviousData
    });
    return results;
};
const hasKey = (obj)=>"key" in obj;
const postWatchlistAutosuggest = async (params)=>{
    const { data } = await _axiosclient.axiosClient.post(`/watchlist-autosuggest`, params);
    return _object_spread_props(_object_spread({}, data), {
        results: data.results.filter(hasKey).map((item)=>_object_spread_props(_object_spread({}, item), {
                id: item.key
            }))
    });
};
const postWatchlistFacetQuery = async (params)=>{
    const { data } = await _axiosclient.axiosClient.post(`watchlist-autosuggest/facet-query`, params);
    return data;
};
const useWatchlistSuggestions = (rawParams)=>{
    const params = _object_spread_props(_object_spread({}, rawParams), {
        query: rawParams.query.trim()
    });
    var _params_perPage;
    const perPage = (_params_perPage = params.perPage) !== null && _params_perPage !== void 0 ? _params_perPage : 20;
    const { query, category, group1, group2, group3, group4, group5 } = params;
    const args = [
        query,
        category,
        group1,
        group2,
        group3,
        group4,
        group5
    ];
    const results = (0, _reactquery.useInfiniteQuery)({
        queryKey: [
            "watchlist-autosuggest",
            perPage,
            args,
            params
        ],
        queryFn: (p)=>{
            var _p_pageParam;
            return postWatchlistAutosuggest(_object_spread_props(_object_spread({}, params), {
                perPage,
                page: (_p_pageParam = p.pageParam) !== null && _p_pageParam !== void 0 ? _p_pageParam : 1
            }));
        },
        getNextPageParam: (lastPage)=>{
            const { page, count } = lastPage;
            if (page * perPage <= count) return page + 1;
            return null;
        },
        gcTime: Infinity,
        staleTime: Infinity,
        initialPageParam: 1
    });
    return results;
};
const useWatchlistSuggestionsFlat = (params)=>{
    var _params_perPage;
    const perPage = (_params_perPage = params.perPage) !== null && _params_perPage !== void 0 ? _params_perPage : 20;
    const results = (0, _reactquery.useQuery)({
        queryKey: [
            "watchlist-autosuggest-flat",
            perPage,
            params
        ],
        queryFn: ()=>postWatchlistAutosuggest(_object_spread_props(_object_spread({}, params), {
                perPage
            })),
        gcTime: Infinity,
        staleTime: Infinity,
        select: (data)=>data.results,
        enabled: !!params.query
    });
    return results;
};
const useWatchlistFacets = (rawParams)=>{
    const params = _object_spread_props(_object_spread({}, rawParams), {
        query: rawParams.query.trim()
    });
    const { query, category, group1, group2, group3, group4, group5, facetQuery } = params;
    const args = [
        query,
        category,
        group1,
        group2,
        group3,
        group4,
        group5,
        facetQuery.field,
        facetQuery.value
    ];
    return (0, _reactquery.useQuery)({
        queryKey: [
            "watchlist-autosuggest-facets",
            args,
            params
        ],
        queryFn: ()=>postWatchlistFacetQuery(_object_spread({}, params)),
        gcTime: Infinity,
        staleTime: Infinity,
        enabled: !!params.facetQuery.value
    });
};
function transformWatchlistBatchUploadResponse(data) {
    var _data_entities_map;
    const entities = (_data_entities_map = data.entities.map((item, id, array)=>{
        const isDuplicate = !!item.data && array.findIndex((i)=>{
            var _i_data, _item_data;
            return ((_i_data = i.data) === null || _i_data === void 0 ? void 0 : _i_data.key) === ((_item_data = item.data) === null || _item_data === void 0 ? void 0 : _item_data.key);
        }) !== id;
        return {
            companyInfo: item.companyInfo,
            data: isDuplicate ? undefined : item.data,
            label: item.companyInfo.name || item.companyInfo.ticker,
            id: id.toString(),
            isModified: false,
            isDeleted: false,
            isConflict: !item.data || isDuplicate,
            isDuplicate
        };
    })) !== null && _data_entities_map !== void 0 ? _data_entities_map : [];
    var _data_timeTaken, _entities_length, _entities_filter_length, _entities_filter_length1;
    const extended = {
        entities,
        timeTaken: (_data_timeTaken = data.timeTaken) !== null && _data_timeTaken !== void 0 ? _data_timeTaken : 0,
        submitted: (_entities_length = entities.length) !== null && _entities_length !== void 0 ? _entities_length : 0,
        matched: (_entities_filter_length = entities.filter((item)=>!!item.data).length) !== null && _entities_filter_length !== void 0 ? _entities_filter_length : 0,
        conflicts: (_entities_filter_length1 = entities.filter((item)=>item.isConflict).length) !== null && _entities_filter_length1 !== void 0 ? _entities_filter_length1 : 0
    };
    return extended;
}
const useWatchlistBatchUpload = ({ onError } = {})=>{
    return (0, _reactquery.useMutation)({
        onError,
        mutationFn: async ({ file })=>{
            const errorParams = {
                rowLimit: _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT
            };
            const base64 = await _adapters.adapters.file.toBase64(file);
            if (file.type !== "text/csv") {
                throw new Error((0, _i18next.t)("apiErrors.watchlistBatchUpload.FILE_UPLOAD-UNSUPPORTED_FILE_TYPE"));
            }
            const payload = {
                file: base64
            };
            const kb = Math.ceil(JSON.stringify(payload).length * 6 / 8 / 1000);
            if (kb > UPLOAD_FILE_SIZE_LIMIT) {
                throw new Error((0, _i18next.t)("apiErrors.watchlistBatchUpload.FILE_UPLOAD-FILE_TOO_BIG", {
                    fileSize: kb,
                    sizeLimit: UPLOAD_FILE_SIZE_LIMIT
                }));
            }
            const res = await _axiosclient.axiosClient.post("/watchlist-autosuggest/batch-upload", payload).catch((error)=>(0, _internationalization.throwI18nApiError)("watchlistBatchUpload", error, errorParams));
            const results = (res === null || res === void 0 ? void 0 : res.data) ? transformWatchlistBatchUploadResponse(res.data) : null;
            if (results && results.submitted > _settings.WATCHLIST_ITEMS_MAXIMUM_COUNT) {
                throw new Error(`Your watchlist has reached its limit of ${_settings.WATCHLIST_ITEMS_MAXIMUM_COUNT} entities. To upload your file, please reduce the number of entities in your watchlist.`);
            }
            return results;
        }
    });
};

//# sourceMappingURL=data:application/json;base64,