{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/suggestion/src/suggestion.hooks.ts"],"sourcesContent":["import { t } from \"i18next\"\nimport qs from \"qs\"\nimport { adapters } from \"@rp/adapters\"\nimport { WATCHLIST_ITEMS_MAXIMUM_COUNT } from \"@rp/common/settings\"\nimport { NativeFile } from \"@rp/common/utils\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { throwI18nApiError } from \"@rp/react/common/internationalization\"\nimport { keepPreviousData, useInfiniteQuery, useMutation, useQuery } from \"@tanstack/react-query\"\nimport { isMacroSearchSuggestion } from \"./suggestion.type-guards\"\nimport {\n  EnhancedCompanySuggestion,\n  EnhancedSuggestion,\n  Suggestion,\n  SuggestionResponse,\n  WatchlistAutosuggestPostParams,\n  WatchlistAutosuggestPostResponse,\n  WatchlistBatchSuggestionPostResponse,\n  WatchlistBatchSuggestionPostResponseExtended,\n  WatchlistFacetPostParams,\n  WatchlistFacetPostResponse,\n} from \"./suggestion.types\"\nimport { makeSuggestionId } from \"./utils/makeSuggestionId\"\n\nconst SUGGESTIONS_ROOT = \"/autosuggest\"\nconst SUGGESTIONS_QUERY_KEY = \"autosuggest\"\nconst MIN_LENGTH_SENTENCE = 4 // words\nconst UPLOAD_FILE_SIZE_LIMIT = 45 // KB\n\ntype SuggestionCollection = Array<Suggestion>\n\n// Helpers\n\nconst mapSuggestionsForQueryCache = (data: SuggestionCollection): Array<EnhancedSuggestion> =>\n  data.map(suggestion => ({\n    ...suggestion,\n    type: suggestion.queryType,\n    label: suggestion.name,\n    value: suggestion.key,\n    id: makeSuggestionId(\n      suggestion.key,\n      suggestion.queryType === \"topic\" ? \"event\" : suggestion.queryType,\n      isMacroSearchSuggestion(suggestion) ? suggestion.groups : undefined,\n    ),\n  }))\n\nconst mapForQueryCache = (data: SuggestionCollection): Array<EnhancedSuggestion> => {\n  if (!data.length) return []\n  return mapSuggestionsForQueryCache(data)\n}\n\n// -------------------\n// Network Requests\n// -------------------\nconst get = async (query: string, limit?: number) => {\n  const params = {\n    query,\n    limit,\n  }\n\n  const queryParams = qs.stringify(params, { arrayFormat: \"comma\" })\n\n  const { data } = await axiosClient.get<SuggestionResponse>(`${SUGGESTIONS_ROOT}?${queryParams}`)\n  return data.results\n}\n\n// -------------------\n// Hooks\n// -------------------\nconst useSuggestions = (rawParams: WatchlistAutosuggestPostParams) => {\n  const params = { ...rawParams, query: rawParams.query.trim() }\n  const { query, perPage } = params\n  const queryKey = [SUGGESTIONS_QUERY_KEY, query]\n  const fetchFunction = () => get(query, perPage)\n\n  const results = useQuery<Array<Suggestion>, unknown, Array<EnhancedSuggestion>>({\n    queryKey,\n    queryFn: fetchFunction,\n    staleTime: Infinity,\n    enabled: query.length !== 0,\n    select: mapForQueryCache,\n    placeholderData: keepPreviousData,\n  })\n\n  return results\n}\n\nconst hasKey = (obj: EnhancedSuggestion): obj is EnhancedCompanySuggestion => \"key\" in obj\n\nconst postWatchlistAutosuggest = async (\n  params: WatchlistAutosuggestPostParams,\n): Promise<WatchlistAutosuggestPostResponse> => {\n  const { data } = await axiosClient.post<WatchlistAutosuggestPostResponse>(\n    `/watchlist-autosuggest`,\n    params,\n  )\n  return { ...data, results: data.results.filter(hasKey).map(item => ({ ...item, id: item.key })) }\n}\n\nconst postWatchlistFacetQuery = async (params: WatchlistFacetPostParams) => {\n  const { data } = await axiosClient.post<WatchlistFacetPostResponse>(\n    `watchlist-autosuggest/facet-query`,\n    params,\n  )\n  return data\n}\n\nconst useWatchlistSuggestions = (rawParams: WatchlistAutosuggestPostParams) => {\n  const params = { ...rawParams, query: rawParams.query.trim() }\n  const perPage = params.perPage ?? 20\n  const { query, category, group1, group2, group3, group4, group5 } = params\n  const args = [query, category, group1, group2, group3, group4, group5]\n  const results = useInfiniteQuery({\n    queryKey: [\"watchlist-autosuggest\", perPage, args, params],\n    queryFn: p => postWatchlistAutosuggest({ ...params, perPage, page: p.pageParam ?? 1 }),\n    getNextPageParam: lastPage => {\n      const { page, count } = lastPage\n      if (page * perPage <= count) return page + 1\n      return null\n    },\n    gcTime: Infinity,\n    staleTime: Infinity,\n    initialPageParam: 1,\n  })\n\n  return results\n}\n\nconst useWatchlistSuggestionsFlat = (params: WatchlistAutosuggestPostParams) => {\n  const perPage = params.perPage ?? 20\n  const results = useQuery({\n    queryKey: [\"watchlist-autosuggest-flat\", perPage, params],\n    queryFn: () => postWatchlistAutosuggest({ ...params, perPage }),\n    gcTime: Infinity,\n    staleTime: Infinity,\n    select: data => data.results,\n    enabled: !!params.query,\n  })\n  return results\n}\n\nconst useWatchlistFacets = (rawParams: WatchlistFacetPostParams) => {\n  const params = { ...rawParams, query: rawParams.query.trim() }\n  const { query, category, group1, group2, group3, group4, group5, facetQuery } = params\n  const args = [\n    query,\n    category,\n    group1,\n    group2,\n    group3,\n    group4,\n    group5,\n    facetQuery.field,\n    facetQuery.value,\n  ]\n  return useQuery({\n    queryKey: [\"watchlist-autosuggest-facets\", args, params],\n    queryFn: () => postWatchlistFacetQuery({ ...params }),\n    gcTime: Infinity,\n    staleTime: Infinity,\n    enabled: !!params.facetQuery.value,\n  })\n}\n\ntype WatchlistBatchUploadProps = {\n  onError?: (error: Error) => void\n}\n\nfunction transformWatchlistBatchUploadResponse(\n  data: WatchlistBatchSuggestionPostResponse,\n): WatchlistBatchSuggestionPostResponseExtended {\n  const entities =\n    data.entities.map((item, id, array) => {\n      const isDuplicate = !!item.data && array.findIndex(i => i.data?.key === item.data?.key) !== id\n      return {\n        companyInfo: item.companyInfo,\n        data: isDuplicate ? undefined : item.data,\n        label: item.companyInfo.name || item.companyInfo.ticker,\n        id: id.toString(),\n        isModified: false,\n        isDeleted: false,\n        isConflict: !item.data || isDuplicate,\n        isDuplicate,\n      }\n    }) ?? []\n  const extended: WatchlistBatchSuggestionPostResponseExtended = {\n    entities,\n    timeTaken: data.timeTaken ?? 0,\n    submitted: entities.length ?? 0,\n    matched: entities.filter(item => !!item.data).length ?? 0,\n    conflicts: entities.filter(item => item.isConflict).length ?? 0,\n  }\n  return extended\n}\n\nconst useWatchlistBatchUpload = ({ onError }: WatchlistBatchUploadProps = {}) => {\n  return useMutation({\n    onError,\n    mutationFn: async ({ file }: { file: File | NativeFile }) => {\n      const errorParams = { rowLimit: WATCHLIST_ITEMS_MAXIMUM_COUNT }\n      const base64 = await adapters.file.toBase64(file)\n      if (file.type !== \"text/csv\") {\n        throw new Error(t(\"apiErrors.watchlistBatchUpload.FILE_UPLOAD-UNSUPPORTED_FILE_TYPE\"))\n      }\n      const payload = { file: base64 }\n      const kb = Math.ceil((JSON.stringify(payload).length * 6) / 8 / 1000)\n      if (kb > UPLOAD_FILE_SIZE_LIMIT) {\n        throw new Error(\n          t(\"apiErrors.watchlistBatchUpload.FILE_UPLOAD-FILE_TOO_BIG\", {\n            fileSize: kb,\n            sizeLimit: UPLOAD_FILE_SIZE_LIMIT,\n          }),\n        )\n      }\n      const res = await axiosClient\n        .post<WatchlistBatchSuggestionPostResponse>(\"/watchlist-autosuggest/batch-upload\", payload)\n        .catch(error => throwI18nApiError(\"watchlistBatchUpload\", error, errorParams))\n      const results = res?.data ? transformWatchlistBatchUploadResponse(res.data) : null\n      if (results && results.submitted > WATCHLIST_ITEMS_MAXIMUM_COUNT) {\n        throw new Error(\n          `Your watchlist has reached its limit of ${WATCHLIST_ITEMS_MAXIMUM_COUNT} entities. To upload your file, please reduce the number of entities in your watchlist.`,\n        )\n      }\n      return results\n    },\n  })\n}\n\nexport {\n  SUGGESTIONS_QUERY_KEY,\n  useSuggestions,\n  MIN_LENGTH_SENTENCE,\n  useWatchlistSuggestions,\n  useWatchlistSuggestionsFlat,\n  useWatchlistFacets,\n  useWatchlistBatchUpload,\n  transformWatchlistBatchUploadResponse,\n}\n"],"names":["MIN_LENGTH_SENTENCE","SUGGESTIONS_QUERY_KEY","transformWatchlistBatchUploadResponse","useSuggestions","useWatchlistBatchUpload","useWatchlistFacets","useWatchlistSuggestions","useWatchlistSuggestionsFlat","SUGGESTIONS_ROOT","UPLOAD_FILE_SIZE_LIMIT","mapSuggestionsForQueryCache","data","map","suggestion","type","queryType","label","name","value","key","id","makeSuggestionId","isMacroSearchSuggestion","groups","undefined","mapForQueryCache","length","get","query","limit","params","queryParams","qs","stringify","arrayFormat","axiosClient","results","rawParams","trim","perPage","queryKey","fetchFunction","useQuery","queryFn","staleTime","Infinity","enabled","select","placeholderData","keepPreviousData","hasKey","obj","postWatchlistAutosuggest","post","filter","item","postWatchlistFacetQuery","category","group1","group2","group3","group4","group5","args","useInfiniteQuery","p","page","pageParam","getNextPageParam","lastPage","count","gcTime","initialPageParam","facetQuery","field","entities","array","isDuplicate","findIndex","i","companyInfo","ticker","toString","isModified","isDeleted","isConflict","extended","timeTaken","submitted","matched","conflicts","onError","useMutation","mutationFn","file","errorParams","rowLimit","WATCHLIST_ITEMS_MAXIMUM_COUNT","base64","adapters","toBase64","Error","t","payload","kb","Math","ceil","JSON","fileSize","sizeLimit","res","catch","error","throwI18nApiError"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}