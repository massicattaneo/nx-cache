{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/chat/src/utils.ts"],"sourcesContent":["import { INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL } from \"@rp/common/utils\"\nimport { SummaryState } from \"@rp/react/common/hooks\"\nimport { StoredResponseBlockList } from \"@rp/react/tanstack-api/chat\"\n\nconst removeInlineAttributionsFromText = (text: string) => {\n  return text.replace(INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL, \"\")\n}\n\nconst getTextResponse = (\n  responseBlocks: StoredResponseBlockList | SummaryState[\"responseBlocks\"],\n): string => {\n  return responseBlocks.reduce((acc, block) => {\n    switch (block.type) {\n      case \"TEXT\":\n        return acc + block.value\n      case \"ENGINE\":\n        return acc + block.answer\n      case \"COLLAPSE\":\n        return acc + block.title + \"\\n\" + getTextResponse([block.content])\n      default:\n        return acc\n    }\n  }, \"\")\n}\n\nconst KNOWN_TYPES: Record<string, boolean> = {\n  CQS: true,\n  EXTERNAL: true,\n}\n\nconst getDataFromRef = (refId: string) => {\n  const [_, type, id] = /:ref\\[(\\S+):(\\S+)\\]/.exec(refId) ?? []\n  return {\n    type,\n    id,\n  }\n}\n\nconst getRefList = (refId: string) => {\n  const result = /:ref\\[LIST:(\\[\\S+:\\S+\\])+\\]/.exec(refId)\n\n  if (result === null) {\n    return null\n  }\n\n  return result[1]\n    .split(\"]\")\n    .map(attribution => {\n      const [dirtyType, id] = attribution.split(\":\")\n\n      return {\n        type: dirtyType.slice(1),\n        id,\n      }\n    })\n    .filter(\n      attributionData => attributionData.id !== undefined && KNOWN_TYPES[attributionData.type],\n    )\n}\n\nexport { getTextResponse, removeInlineAttributionsFromText, getRefList, getDataFromRef }\n"],"names":["getDataFromRef","getRefList","getTextResponse","removeInlineAttributionsFromText","text","replace","INLINE_ATTRIBUTION_REGEX_FOR_REMOVAL","responseBlocks","reduce","acc","block","type","value","answer","title","content","KNOWN_TYPES","CQS","EXTERNAL","refId","_","id","exec","result","split","map","attribution","dirtyType","slice","filter","attributionData","undefined"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA4DwEA,cAAc;eAAdA;;IAAZC,UAAU;eAAVA;;IAAnDC,eAAe;eAAfA;;IAAiBC,gCAAgC;eAAhCA;;;uBA5D2B;AAIrD,MAAMA,mCAAmC,CAACC;IACxC,OAAOA,KAAKC,OAAO,CAACC,2CAAoC,EAAE;AAC5D;AAEA,MAAMJ,kBAAkB,CACtBK;IAEA,OAAOA,eAAeC,MAAM,CAAC,CAACC,KAAKC;QACjC,OAAQA,MAAMC,IAAI;YAChB,KAAK;gBACH,OAAOF,MAAMC,MAAME,KAAK;YAC1B,KAAK;gBACH,OAAOH,MAAMC,MAAMG,MAAM;YAC3B,KAAK;gBACH,OAAOJ,MAAMC,MAAMI,KAAK,GAAG,OAAOZ,gBAAgB;oBAACQ,MAAMK,OAAO;iBAAC;YACnE;gBACE,OAAON;QACX;IACF,GAAG;AACL;AAEA,MAAMO,cAAuC;IAC3CC,KAAK;IACLC,UAAU;AACZ;AAEA,MAAMlB,iBAAiB,CAACmB;QACA;IAAtB,MAAM,CAACC,GAAGT,MAAMU,GAAG,GAAG,CAAA,QAAA,sBAAsBC,IAAI,CAACH,oBAA3B,mBAAA,QAAqC,EAAE;IAC7D,OAAO;QACLR;QACAU;IACF;AACF;AAEA,MAAMpB,aAAa,CAACkB;IAClB,MAAMI,SAAS,8BAA8BD,IAAI,CAACH;IAElD,IAAII,WAAW,MAAM;QACnB,OAAO;IACT;IAEA,OAAOA,MAAM,CAAC,EAAE,CACbC,KAAK,CAAC,KACNC,GAAG,CAACC,CAAAA;QACH,MAAM,CAACC,WAAWN,GAAG,GAAGK,YAAYF,KAAK,CAAC;QAE1C,OAAO;YACLb,MAAMgB,UAAUC,KAAK,CAAC;YACtBP;QACF;IACF,GACCQ,MAAM,CACLC,CAAAA,kBAAmBA,gBAAgBT,EAAE,KAAKU,aAAaf,WAAW,CAACc,gBAAgBnB,IAAI,CAAC;AAE9F"}