b574ace205ad7c32a689dfb6b0b5f9bb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "trpcBigdataApiRouter", {
    enumerable: true,
    get: function() {
        return trpcBigdataApiRouter;
    }
});
const _bigdataapiprocedure = require("./bigdata-api-procedure");
const _apikeysprocedures = require("./procedures/api-keys-procedures");
const _apikeysquotasprocedures = require("./procedures/api-keys-quotas-procedures");
const _autosuggestprocedure = require("./procedures/autosuggest-procedure");
const _briefsprocedures = require("./procedures/briefs-procedures");
const _configprocedures = require("./procedures/config-procedures");
const _contentprocedures = require("./procedures/content-procedures");
const _cqsprocedures = require("./procedures/cqs-procedures");
const _financialprocedures = require("./procedures/financial-procedures");
const _profilesprocedure = require("./procedures/profiles-procedure");
const _slackprocedures = require("./procedures/slack-procedures");
const _statusprocedure = require("./procedures/status-procedure");
const _chatsprocedures = require("./procedures/user-data/chats-procedures");
const _customdataviewsprocedures = require("./procedures/user-data/custom-data-views-procedures");
const _queriesprocedures = require("./procedures/user-data/queries-procedures");
const _watchlistsprocedures = require("./procedures/user-data/watchlists-procedures");
const trpcBigdataApiRouter = _bigdataapiprocedure.trpcBigdataApiServer.router({
    apiKeys: _apikeysprocedures.apiKeysProcedures,
    apiKeysQuotas: _apikeysquotasprocedures.apiKeysQuotasProcedures,
    status: _statusprocedure.statusProcedures,
    profiles: _profilesprocedure.profilesProcedure,
    autosuggest: _autosuggestprocedure.autosuggestProcedures,
    config: _configprocedures.configProcedures,
    cqs: _cqsprocedures.cqsProcedures,
    slack: _slackprocedures.slackProcedures,
    briefs: _briefsprocedures.briefsProcedures,
    finance: _financialprocedures.financeProcedures,
    content: _contentprocedures.contentProcedures,
    userData: {
        chats: _chatsprocedures.userDataChatsProcedures,
        customDataViews: _customdataviewsprocedures.userDataCustomDataViewsProcedures,
        queries: _queriesprocedures.userDataQueriesProcedures,
        watchlists: _watchlistsprocedures.userDataWatchlistsProcedures
    }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvZGV2ZWxvcG1lbnQvc3JjL2xpYi90cnBjL2JpZ2RhdGEtYXBpL2JpZ2RhdGEtYXBpLXJvdXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnBjQmlnZGF0YUFwaVNlcnZlciB9IGZyb20gXCIuL2JpZ2RhdGEtYXBpLXByb2NlZHVyZVwiXG5pbXBvcnQgeyBhcGlLZXlzUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvYXBpLWtleXMtcHJvY2VkdXJlc1wiXG5pbXBvcnQgeyBhcGlLZXlzUXVvdGFzUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvYXBpLWtleXMtcXVvdGFzLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgYXV0b3N1Z2dlc3RQcm9jZWR1cmVzIH0gZnJvbSBcIi4vcHJvY2VkdXJlcy9hdXRvc3VnZ2VzdC1wcm9jZWR1cmVcIlxuaW1wb3J0IHsgYnJpZWZzUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvYnJpZWZzLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgY29uZmlnUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvY29uZmlnLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgY29udGVudFByb2NlZHVyZXMgfSBmcm9tIFwiLi9wcm9jZWR1cmVzL2NvbnRlbnQtcHJvY2VkdXJlc1wiXG5pbXBvcnQgeyBjcXNQcm9jZWR1cmVzIH0gZnJvbSBcIi4vcHJvY2VkdXJlcy9jcXMtcHJvY2VkdXJlc1wiXG5pbXBvcnQgeyBmaW5hbmNlUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvZmluYW5jaWFsLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgcHJvZmlsZXNQcm9jZWR1cmUgfSBmcm9tIFwiLi9wcm9jZWR1cmVzL3Byb2ZpbGVzLXByb2NlZHVyZVwiXG5pbXBvcnQgeyBzbGFja1Byb2NlZHVyZXMgfSBmcm9tIFwiLi9wcm9jZWR1cmVzL3NsYWNrLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgc3RhdHVzUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvc3RhdHVzLXByb2NlZHVyZVwiXG5pbXBvcnQgeyB1c2VyRGF0YUNoYXRzUHJvY2VkdXJlcyB9IGZyb20gXCIuL3Byb2NlZHVyZXMvdXNlci1kYXRhL2NoYXRzLXByb2NlZHVyZXNcIlxuaW1wb3J0IHsgdXNlckRhdGFDdXN0b21EYXRhVmlld3NQcm9jZWR1cmVzIH0gZnJvbSBcIi4vcHJvY2VkdXJlcy91c2VyLWRhdGEvY3VzdG9tLWRhdGEtdmlld3MtcHJvY2VkdXJlc1wiXG5pbXBvcnQgeyB1c2VyRGF0YVF1ZXJpZXNQcm9jZWR1cmVzIH0gZnJvbSBcIi4vcHJvY2VkdXJlcy91c2VyLWRhdGEvcXVlcmllcy1wcm9jZWR1cmVzXCJcbmltcG9ydCB7IHVzZXJEYXRhV2F0Y2hsaXN0c1Byb2NlZHVyZXMgfSBmcm9tIFwiLi9wcm9jZWR1cmVzL3VzZXItZGF0YS93YXRjaGxpc3RzLXByb2NlZHVyZXNcIlxuXG5leHBvcnQgY29uc3QgdHJwY0JpZ2RhdGFBcGlSb3V0ZXIgPSB0cnBjQmlnZGF0YUFwaVNlcnZlci5yb3V0ZXIoe1xuICBhcGlLZXlzOiBhcGlLZXlzUHJvY2VkdXJlcyxcbiAgYXBpS2V5c1F1b3RhczogYXBpS2V5c1F1b3Rhc1Byb2NlZHVyZXMsXG4gIHN0YXR1czogc3RhdHVzUHJvY2VkdXJlcyxcbiAgcHJvZmlsZXM6IHByb2ZpbGVzUHJvY2VkdXJlLFxuICBhdXRvc3VnZ2VzdDogYXV0b3N1Z2dlc3RQcm9jZWR1cmVzLFxuICBjb25maWc6IGNvbmZpZ1Byb2NlZHVyZXMsXG4gIGNxczogY3FzUHJvY2VkdXJlcyxcbiAgc2xhY2s6IHNsYWNrUHJvY2VkdXJlcyxcbiAgYnJpZWZzOiBicmllZnNQcm9jZWR1cmVzLFxuICBmaW5hbmNlOiBmaW5hbmNlUHJvY2VkdXJlcyxcbiAgY29udGVudDogY29udGVudFByb2NlZHVyZXMsXG4gIHVzZXJEYXRhOiB7XG4gICAgY2hhdHM6IHVzZXJEYXRhQ2hhdHNQcm9jZWR1cmVzLFxuICAgIGN1c3RvbURhdGFWaWV3czogdXNlckRhdGFDdXN0b21EYXRhVmlld3NQcm9jZWR1cmVzLFxuICAgIHF1ZXJpZXM6IHVzZXJEYXRhUXVlcmllc1Byb2NlZHVyZXMsXG4gICAgd2F0Y2hsaXN0czogdXNlckRhdGFXYXRjaGxpc3RzUHJvY2VkdXJlcyxcbiAgfSxcbn0pXG4iXSwibmFtZXMiOlsidHJwY0JpZ2RhdGFBcGlSb3V0ZXIiLCJ0cnBjQmlnZGF0YUFwaVNlcnZlciIsInJvdXRlciIsImFwaUtleXMiLCJhcGlLZXlzUHJvY2VkdXJlcyIsImFwaUtleXNRdW90YXMiLCJhcGlLZXlzUXVvdGFzUHJvY2VkdXJlcyIsInN0YXR1cyIsInN0YXR1c1Byb2NlZHVyZXMiLCJwcm9maWxlcyIsInByb2ZpbGVzUHJvY2VkdXJlIiwiYXV0b3N1Z2dlc3QiLCJhdXRvc3VnZ2VzdFByb2NlZHVyZXMiLCJjb25maWciLCJjb25maWdQcm9jZWR1cmVzIiwiY3FzIiwiY3FzUHJvY2VkdXJlcyIsInNsYWNrIiwic2xhY2tQcm9jZWR1cmVzIiwiYnJpZWZzIiwiYnJpZWZzUHJvY2VkdXJlcyIsImZpbmFuY2UiLCJmaW5hbmNlUHJvY2VkdXJlcyIsImNvbnRlbnQiLCJjb250ZW50UHJvY2VkdXJlcyIsInVzZXJEYXRhIiwiY2hhdHMiLCJ1c2VyRGF0YUNoYXRzUHJvY2VkdXJlcyIsImN1c3RvbURhdGFWaWV3cyIsInVzZXJEYXRhQ3VzdG9tRGF0YVZpZXdzUHJvY2VkdXJlcyIsInF1ZXJpZXMiLCJ1c2VyRGF0YVF1ZXJpZXNQcm9jZWR1cmVzIiwid2F0Y2hsaXN0cyIsInVzZXJEYXRhV2F0Y2hsaXN0c1Byb2NlZHVyZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBaUJhQTs7O2VBQUFBOzs7cUNBakJ3QjttQ0FDSDt5Q0FDTTtzQ0FDRjtrQ0FDTDtrQ0FDQTttQ0FDQzsrQkFDSjtxQ0FDSTttQ0FDQTtpQ0FDRjtpQ0FDQztpQ0FDTzsyQ0FDVTttQ0FDUjtzQ0FDRztBQUV0QyxNQUFNQSx1QkFBdUJDLHlDQUFvQixDQUFDQyxNQUFNLENBQUM7SUFDOURDLFNBQVNDLG9DQUFpQjtJQUMxQkMsZUFBZUMsZ0RBQXVCO0lBQ3RDQyxRQUFRQyxpQ0FBZ0I7SUFDeEJDLFVBQVVDLG9DQUFpQjtJQUMzQkMsYUFBYUMsMkNBQXFCO0lBQ2xDQyxRQUFRQyxrQ0FBZ0I7SUFDeEJDLEtBQUtDLDRCQUFhO0lBQ2xCQyxPQUFPQyxnQ0FBZTtJQUN0QkMsUUFBUUMsa0NBQWdCO0lBQ3hCQyxTQUFTQyxzQ0FBaUI7SUFDMUJDLFNBQVNDLG9DQUFpQjtJQUMxQkMsVUFBVTtRQUNSQyxPQUFPQyx3Q0FBdUI7UUFDOUJDLGlCQUFpQkMsNERBQWlDO1FBQ2xEQyxTQUFTQyw0Q0FBeUI7UUFDbENDLFlBQVlDLGtEQUE0QjtJQUMxQztBQUNGIn0=