{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/hooks/src/useLocalStorage.ts"],"sourcesContent":["// Based on https://usehooks.com/useLocalStorage/, but only for\n// values, no functions allowed\nimport { Dispatch, SetStateAction, useCallback, useState } from \"react\"\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, Dispatch<SetStateAction<T>>, () => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    const item = localStorage.getItem(key)\n    return item ? JSON.parse(item) : initialValue\n  })\n\n  const setValue: Dispatch<SetStateAction<T>> = useCallback(\n    value => {\n      setStoredValue(prev => {\n        const newValue = value instanceof Function ? value(prev) : value\n        localStorage.setItem(key, JSON.stringify(newValue))\n        return newValue\n      })\n    },\n    [key],\n  )\n\n  const remove = useCallback(() => {\n    localStorage.removeItem(key)\n    setStoredValue(initialValue)\n  }, [initialValue, key])\n\n  return [storedValue, setValue, remove]\n}\n\nexport { useLocalStorage }\n"],"names":["useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","item","localStorage","getItem","JSON","parse","setValue","useCallback","value","prev","newValue","Function","setItem","stringify","remove","removeItem"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,+DAA+D;AAC/D,+BAA+B;;;;;+BA+BtBA;;;eAAAA;;;uBA9BuD;AAEhE,SAASA,gBACPC,GAAW,EACXC,YAAe;IAEf,MAAM,CAACC,aAAaC,eAAe,GAAGC,IAAAA,eAAQ,EAAI;QAChD,MAAMC,OAAOC,aAAaC,OAAO,CAACP;QAClC,OAAOK,OAAOG,KAAKC,KAAK,CAACJ,QAAQJ;IACnC;IAEA,MAAMS,WAAwCC,IAAAA,kBAAW,EACvDC,CAAAA;QACET,eAAeU,CAAAA;YACb,MAAMC,WAAWF,iBAAiBG,WAAWH,MAAMC,QAAQD;YAC3DN,aAAaU,OAAO,CAAChB,KAAKQ,KAAKS,SAAS,CAACH;YACzC,OAAOA;QACT;IACF,GACA;QAACd;KAAI;IAGP,MAAMkB,SAASP,IAAAA,kBAAW,EAAC;QACzBL,aAAaa,UAAU,CAACnB;QACxBG,eAAeF;IACjB,GAAG;QAACA;QAAcD;KAAI;IAEtB,OAAO;QAACE;QAAaQ;QAAUQ;KAAO;AACxC"}