c9f9e502add90fca47e779d2dc8ec49c
"use strict";
jest.mock("uuid", ()=>({
        v4: ()=>mockGeneratedUUID
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _PasswordStephelpers = require("./PasswordStep.helpers");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const mockGeneratedUUID = "mock-generated-uuid";
describe("PasswordStep.helpers", ()=>{
    describe("getSignUpUpdateValues", ()=>{
        const values = {
            first: "first-123",
            last: "last-123",
            secret: "secret-123"
        };
        const unsafeMetadata = {
            self_registered: true,
            requireOnboarding: true,
            source: "web-client",
            initialLogin: true,
            utm: {
                utm_source: "utm_source-123",
                utm_medium: "utm_medium-123",
                utm_campaign: "utm_campaign-123",
                utm_term: "utm_term-123",
                utm_content: "utm_content-123"
            }
        };
        const expectedReturn = {
            firstName: values.first,
            lastName: values.last,
            password: values.secret,
            legalAccepted: true,
            unsafeMetadata: _object_spread_props(_object_spread({}, unsafeMetadata), {
                initialLoginId: mockGeneratedUUID
            })
        };
        it("should return the correct object", ()=>{
            expect((0, _PasswordStephelpers.getSignUpUpdateValues)(values, unsafeMetadata)).toStrictEqual(expectedReturn);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL3BhZ2VzL1NpZ25VcC9TdGVwcy9QYXNzd29yZFN0ZXAvUGFzc3dvcmRTdGVwLmhlbHBlcnMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTaWduVXBVcGRhdGVWYWx1ZXMgfSBmcm9tIFwiLi9QYXNzd29yZFN0ZXAuaGVscGVyc1wiXG5cbmNvbnN0IG1vY2tHZW5lcmF0ZWRVVUlEID0gXCJtb2NrLWdlbmVyYXRlZC11dWlkXCJcbmplc3QubW9jayhcInV1aWRcIiwgKCkgPT4gKHtcbiAgdjQ6ICgpID0+IG1vY2tHZW5lcmF0ZWRVVUlELFxufSkpXG5cbmRlc2NyaWJlKFwiUGFzc3dvcmRTdGVwLmhlbHBlcnNcIiwgKCkgPT4ge1xuICBkZXNjcmliZShcImdldFNpZ25VcFVwZGF0ZVZhbHVlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsdWVzID0geyBmaXJzdDogXCJmaXJzdC0xMjNcIiwgbGFzdDogXCJsYXN0LTEyM1wiLCBzZWNyZXQ6IFwic2VjcmV0LTEyM1wiIH1cbiAgICBjb25zdCB1bnNhZmVNZXRhZGF0YSA9IHtcbiAgICAgIHNlbGZfcmVnaXN0ZXJlZDogdHJ1ZSBhcyBjb25zdCxcbiAgICAgIHJlcXVpcmVPbmJvYXJkaW5nOiB0cnVlIGFzIGNvbnN0LFxuICAgICAgc291cmNlOiBcIndlYi1jbGllbnRcIiBhcyBjb25zdCxcbiAgICAgIGluaXRpYWxMb2dpbjogdHJ1ZSBhcyBjb25zdCxcbiAgICAgIHV0bToge1xuICAgICAgICB1dG1fc291cmNlOiBcInV0bV9zb3VyY2UtMTIzXCIsXG4gICAgICAgIHV0bV9tZWRpdW06IFwidXRtX21lZGl1bS0xMjNcIixcbiAgICAgICAgdXRtX2NhbXBhaWduOiBcInV0bV9jYW1wYWlnbi0xMjNcIixcbiAgICAgICAgdXRtX3Rlcm06IFwidXRtX3Rlcm0tMTIzXCIsXG4gICAgICAgIHV0bV9jb250ZW50OiBcInV0bV9jb250ZW50LTEyM1wiLFxuICAgICAgfSxcbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRSZXR1cm4gPSB7XG4gICAgICBmaXJzdE5hbWU6IHZhbHVlcy5maXJzdCxcbiAgICAgIGxhc3ROYW1lOiB2YWx1ZXMubGFzdCxcbiAgICAgIHBhc3N3b3JkOiB2YWx1ZXMuc2VjcmV0LFxuICAgICAgbGVnYWxBY2NlcHRlZDogdHJ1ZSxcbiAgICAgIHVuc2FmZU1ldGFkYXRhOiB7XG4gICAgICAgIC4uLnVuc2FmZU1ldGFkYXRhLFxuICAgICAgICBpbml0aWFsTG9naW5JZDogbW9ja0dlbmVyYXRlZFVVSUQsXG4gICAgICB9LFxuICAgIH1cblxuICAgIGl0KFwic2hvdWxkIHJldHVybiB0aGUgY29ycmVjdCBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldFNpZ25VcFVwZGF0ZVZhbHVlcyh2YWx1ZXMsIHVuc2FmZU1ldGFkYXRhKSkudG9TdHJpY3RFcXVhbChleHBlY3RlZFJldHVybilcbiAgICB9KVxuICB9KVxufSlcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInY0IiwibW9ja0dlbmVyYXRlZFVVSUQiLCJkZXNjcmliZSIsInZhbHVlcyIsImZpcnN0IiwibGFzdCIsInNlY3JldCIsInVuc2FmZU1ldGFkYXRhIiwic2VsZl9yZWdpc3RlcmVkIiwicmVxdWlyZU9uYm9hcmRpbmciLCJzb3VyY2UiLCJpbml0aWFsTG9naW4iLCJ1dG0iLCJ1dG1fc291cmNlIiwidXRtX21lZGl1bSIsInV0bV9jYW1wYWlnbiIsInV0bV90ZXJtIiwidXRtX2NvbnRlbnQiLCJleHBlY3RlZFJldHVybiIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGFzc3dvcmQiLCJsZWdhbEFjY2VwdGVkIiwiaW5pdGlhbExvZ2luSWQiLCJpdCIsImV4cGVjdCIsImdldFNpZ25VcFVwZGF0ZVZhbHVlcyIsInRvU3RyaWN0RXF1YWwiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6IjtBQUdBQSxLQUFLQyxJQUFJLENBQUMsUUFBUSxJQUFPLENBQUE7UUFDdkJDLElBQUksSUFBTUM7SUFDWixDQUFBOzs7O3FDQUxzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFdEMsTUFBTUEsb0JBQW9CO0FBSzFCQyxTQUFTLHdCQUF3QjtJQUMvQkEsU0FBUyx5QkFBeUI7UUFDaEMsTUFBTUMsU0FBUztZQUFFQyxPQUFPO1lBQWFDLE1BQU07WUFBWUMsUUFBUTtRQUFhO1FBQzVFLE1BQU1DLGlCQUFpQjtZQUNyQkMsaUJBQWlCO1lBQ2pCQyxtQkFBbUI7WUFDbkJDLFFBQVE7WUFDUkMsY0FBYztZQUNkQyxLQUFLO2dCQUNIQyxZQUFZO2dCQUNaQyxZQUFZO2dCQUNaQyxjQUFjO2dCQUNkQyxVQUFVO2dCQUNWQyxhQUFhO1lBQ2Y7UUFDRjtRQUNBLE1BQU1DLGlCQUFpQjtZQUNyQkMsV0FBV2hCLE9BQU9DLEtBQUs7WUFDdkJnQixVQUFVakIsT0FBT0UsSUFBSTtZQUNyQmdCLFVBQVVsQixPQUFPRyxNQUFNO1lBQ3ZCZ0IsZUFBZTtZQUNmZixnQkFBZ0Isd0NBQ1hBO2dCQUNIZ0IsZ0JBQWdCdEI7O1FBRXBCO1FBRUF1QixHQUFHLG9DQUFvQztZQUNyQ0MsT0FBT0MsSUFBQUEsMENBQXFCLEVBQUN2QixRQUFRSSxpQkFBaUJvQixhQUFhLENBQUNUO1FBQ3RFO0lBQ0Y7QUFDRiJ9