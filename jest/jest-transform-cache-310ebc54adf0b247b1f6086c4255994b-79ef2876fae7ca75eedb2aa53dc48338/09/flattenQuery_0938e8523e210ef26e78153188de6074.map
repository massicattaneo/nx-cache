{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/rpql/src/lib/rpql-utils/flattenQuery.ts"],"sourcesContent":["import {\n  isRpqlArrayFilter,\n  isRpqlArrayIdFilter,\n  isRpqlFlatLogicalGroup,\n  isRpqlLogicalGroup,\n  isRpqlLogicalNot,\n  isRpqlMatchFilter,\n  isRpqlRangeFilter,\n} from \"@rp/common/api-types\"\nimport { RpqlFilter } from \"@rp/common/api-types\"\nimport { RpqlFilterMap } from \"@rp/common/api-types\"\nimport { addNotToOperation, addNotToType, generateId } from \"../helpers\"\n\ntype FlattenResult = {\n  root: string\n  filterMap: RpqlFilterMap\n}\n\nconst flattenQuery = (query: RpqlFilter): FlattenResult => {\n  const root = generateId()\n\n  if (isRpqlLogicalGroup(query) || isRpqlMatchFilter(query)) {\n    const values = query.value.map(v => flattenQuery(v))\n\n    const baseMap: RpqlFilterMap = {\n      [root]: {\n        id: root,\n        ...query,\n        value: values.map(v => v.root),\n      },\n    }\n\n    const filterMap = values.reduce(\n      (acc, item) => ({\n        ...acc,\n        ...item.filterMap,\n      }),\n      baseMap,\n    )\n\n    return {\n      root,\n      filterMap,\n    }\n  }\n\n  if (isRpqlLogicalNot(query)) {\n    const child = query.value\n\n    if (isRpqlLogicalGroup(child)) {\n      const flattenedInfo = flattenQuery(child)\n\n      const flatChild = flattenedInfo.filterMap[flattenedInfo.root]\n\n      if (!isRpqlFlatLogicalGroup(flatChild)) {\n        // You shouldn't be able to get into this situation but this guard helps avoid TS\n        // complaining\n        throw new Error(\"The returned values was not a logical group\")\n      }\n\n      return {\n        root: flattenedInfo.root,\n        filterMap: {\n          ...flattenedInfo.filterMap,\n          [flattenedInfo.root]: {\n            id: flattenedInfo.root,\n            type: addNotToType(child.type),\n            value: flatChild.value,\n          },\n        },\n      }\n    }\n\n    if (isRpqlArrayFilter(child) || isRpqlArrayIdFilter(child)) {\n      return {\n        root,\n        filterMap: {\n          [root]: { ...child, id: root, operation: addNotToOperation(child.operation) },\n        },\n      }\n    }\n\n    if (isRpqlRangeFilter(child)) {\n      return {\n        root,\n        filterMap: {\n          [root]: {\n            id: root,\n            type: child.type,\n            operation: \"not-between\",\n            value: [child.start, child.end],\n          },\n        },\n      }\n    }\n\n    const flatChild = flattenQuery(child)\n    return {\n      root,\n      filterMap: {\n        ...flatChild.filterMap,\n        [root]: { id: root, type: \"not\", value: flatChild.root },\n      },\n    }\n  }\n\n  if (isRpqlRangeFilter(query)) {\n    return {\n      root,\n      filterMap: {\n        [root]: {\n          id: root,\n          type: query.type,\n          operation: \"between\",\n          value: [query.start, query.end],\n        },\n      },\n    }\n  }\n\n  return {\n    root,\n    filterMap: {\n      [root]: { id: root, ...query },\n    },\n  }\n}\n\nexport { flattenQuery }\n"],"names":["flattenQuery","query","root","generateId","isRpqlLogicalGroup","isRpqlMatchFilter","values","value","map","v","baseMap","id","filterMap","reduce","acc","item","isRpqlLogicalNot","child","flattenedInfo","flatChild","isRpqlFlatLogicalGroup","Error","type","addNotToType","isRpqlArrayFilter","isRpqlArrayIdFilter","operation","addNotToOperation","isRpqlRangeFilter","start","end"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgISA;;;eAAAA;;;0BAxHF;yBAGqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAO5D,MAAMA,eAAe,CAACC;IACpB,MAAMC,OAAOC,IAAAA,mBAAU;IAEvB,IAAIC,IAAAA,4BAAkB,EAACH,UAAUI,IAAAA,2BAAiB,EAACJ,QAAQ;QACzD,MAAMK,SAASL,MAAMM,KAAK,CAACC,GAAG,CAACC,CAAAA,IAAKT,aAAaS;QAEjD,MAAMC,UAAyB;YAC7B,CAACR,KAAK,EAAE;gBACNS,IAAIT;eACDD;gBACHM,OAAOD,OAAOE,GAAG,CAACC,CAAAA,IAAKA,EAAEP,IAAI;;QAEjC;QAEA,MAAMU,YAAYN,OAAOO,MAAM,CAC7B,CAACC,KAAKC,OAAU,mBACXD,KACAC,KAAKH,SAAS,GAEnBF;QAGF,OAAO;YACLR;YACAU;QACF;IACF;IAEA,IAAII,IAAAA,0BAAgB,EAACf,QAAQ;QAC3B,MAAMgB,QAAQhB,MAAMM,KAAK;QAEzB,IAAIH,IAAAA,4BAAkB,EAACa,QAAQ;YAC7B,MAAMC,gBAAgBlB,aAAaiB;YAEnC,MAAME,YAAYD,cAAcN,SAAS,CAACM,cAAchB,IAAI,CAAC;YAE7D,IAAI,CAACkB,IAAAA,gCAAsB,EAACD,YAAY;gBACtC,iFAAiF;gBACjF,cAAc;gBACd,MAAM,IAAIE,MAAM;YAClB;YAEA,OAAO;gBACLnB,MAAMgB,cAAchB,IAAI;gBACxBU,WAAW,wCACNM,cAAcN,SAAS;oBAC1B,CAACM,cAAchB,IAAI,CAAC,EAAE;wBACpBS,IAAIO,cAAchB,IAAI;wBACtBoB,MAAMC,IAAAA,qBAAY,EAACN,MAAMK,IAAI;wBAC7Bf,OAAOY,UAAUZ,KAAK;oBACxB;;YAEJ;QACF;QAEA,IAAIiB,IAAAA,2BAAiB,EAACP,UAAUQ,IAAAA,6BAAmB,EAACR,QAAQ;YAC1D,OAAO;gBACLf;gBACAU,WAAW;oBACT,CAACV,KAAK,EAAE,wCAAKe;wBAAON,IAAIT;wBAAMwB,WAAWC,IAAAA,0BAAiB,EAACV,MAAMS,SAAS;;gBAC5E;YACF;QACF;QAEA,IAAIE,IAAAA,2BAAiB,EAACX,QAAQ;YAC5B,OAAO;gBACLf;gBACAU,WAAW;oBACT,CAACV,KAAK,EAAE;wBACNS,IAAIT;wBACJoB,MAAML,MAAMK,IAAI;wBAChBI,WAAW;wBACXnB,OAAO;4BAACU,MAAMY,KAAK;4BAAEZ,MAAMa,GAAG;yBAAC;oBACjC;gBACF;YACF;QACF;QAEA,MAAMX,YAAYnB,aAAaiB;QAC/B,OAAO;YACLf;YACAU,WAAW,wCACNO,UAAUP,SAAS;gBACtB,CAACV,KAAK,EAAE;oBAAES,IAAIT;oBAAMoB,MAAM;oBAAOf,OAAOY,UAAUjB,IAAI;gBAAC;;QAE3D;IACF;IAEA,IAAI0B,IAAAA,2BAAiB,EAAC3B,QAAQ;QAC5B,OAAO;YACLC;YACAU,WAAW;gBACT,CAACV,KAAK,EAAE;oBACNS,IAAIT;oBACJoB,MAAMrB,MAAMqB,IAAI;oBAChBI,WAAW;oBACXnB,OAAO;wBAACN,MAAM4B,KAAK;wBAAE5B,MAAM6B,GAAG;qBAAC;gBACjC;YACF;QACF;IACF;IAEA,OAAO;QACL5B;QACAU,WAAW;YACT,CAACV,KAAK,EAAE;gBAAES,IAAIT;eAASD;QACzB;IACF;AACF"}