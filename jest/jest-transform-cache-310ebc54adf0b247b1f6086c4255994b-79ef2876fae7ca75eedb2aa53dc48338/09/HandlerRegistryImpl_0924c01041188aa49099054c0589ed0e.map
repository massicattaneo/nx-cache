{"version":3,"sources":["../../src/classes/HandlerRegistryImpl.ts"],"sourcesContent":["import { asap } from '@react-dnd/asap'\nimport { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport {\n\taddSource,\n\taddTarget,\n\tremoveSource,\n\tremoveTarget,\n} from '../actions/registry.js'\nimport {\n\tvalidateSourceContract,\n\tvalidateTargetContract,\n\tvalidateType,\n} from '../contracts.js'\nimport type {\n\tDragSource,\n\tDropTarget,\n\tHandlerRegistry,\n\tIdentifier,\n\tSourceType,\n\tTargetType,\n} from '../interfaces.js'\nimport { HandlerRole } from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js'\n\nfunction getNextHandlerId(role: HandlerRole): string {\n\tconst id = getNextUniqueId().toString()\n\tswitch (role) {\n\t\tcase HandlerRole.SOURCE:\n\t\t\treturn `S${id}`\n\t\tcase HandlerRole.TARGET:\n\t\t\treturn `T${id}`\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown Handler Role: ${role}`)\n\t}\n}\n\nfunction parseRoleFromHandlerId(handlerId: string) {\n\tswitch (handlerId[0]) {\n\t\tcase 'S':\n\t\t\treturn HandlerRole.SOURCE\n\t\tcase 'T':\n\t\t\treturn HandlerRole.TARGET\n\t\tdefault:\n\t\t\tthrow new Error(`Cannot parse handler ID: ${handlerId}`)\n\t}\n}\n\nfunction mapContainsValue<T>(map: Map<string, T>, searchValue: T) {\n\tconst entries = map.entries()\n\tlet isDone = false\n\tdo {\n\t\tconst {\n\t\t\tdone,\n\t\t\tvalue: [, value],\n\t\t} = entries.next()\n\t\tif (value === searchValue) {\n\t\t\treturn true\n\t\t}\n\t\tisDone = !!done\n\t} while (!isDone)\n\treturn false\n}\n\nexport class HandlerRegistryImpl implements HandlerRegistry {\n\tprivate types: Map<string, SourceType | TargetType> = new Map()\n\tprivate dragSources: Map<string, DragSource> = new Map()\n\tprivate dropTargets: Map<string, DropTarget> = new Map()\n\tprivate pinnedSourceId: string | null = null\n\tprivate pinnedSource: any = null\n\tprivate store: Store<State>\n\n\tpublic constructor(store: Store<State>) {\n\t\tthis.store = store\n\t}\n\n\tpublic addSource(type: SourceType, source: DragSource): string {\n\t\tvalidateType(type)\n\t\tvalidateSourceContract(source)\n\n\t\tconst sourceId = this.addHandler(HandlerRole.SOURCE, type, source)\n\t\tthis.store.dispatch(addSource(sourceId))\n\t\treturn sourceId\n\t}\n\n\tpublic addTarget(type: TargetType, target: DropTarget): string {\n\t\tvalidateType(type, true)\n\t\tvalidateTargetContract(target)\n\n\t\tconst targetId = this.addHandler(HandlerRole.TARGET, type, target)\n\t\tthis.store.dispatch(addTarget(targetId))\n\t\treturn targetId\n\t}\n\n\tpublic containsHandler(handler: DragSource | DropTarget): boolean {\n\t\treturn (\n\t\t\tmapContainsValue(this.dragSources, handler) ||\n\t\t\tmapContainsValue(this.dropTargets, handler)\n\t\t)\n\t}\n\n\tpublic getSource(sourceId: string, includePinned = false): DragSource {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\tconst isPinned = includePinned && sourceId === this.pinnedSourceId\n\t\tconst source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId)\n\t\treturn source\n\t}\n\n\tpublic getTarget(targetId: string): DropTarget {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.dropTargets.get(targetId) as DropTarget\n\t}\n\n\tpublic getSourceType(sourceId: string): Identifier {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\treturn this.types.get(sourceId) as Identifier\n\t}\n\n\tpublic getTargetType(targetId: string): Identifier | Identifier[] {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.types.get(targetId) as Identifier | Identifier[]\n\t}\n\n\tpublic isSourceId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.SOURCE\n\t}\n\n\tpublic isTargetId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.TARGET\n\t}\n\n\tpublic removeSource(sourceId: string): void {\n\t\tinvariant(this.getSource(sourceId), 'Expected an existing source.')\n\t\tthis.store.dispatch(removeSource(sourceId))\n\t\tasap(() => {\n\t\t\tthis.dragSources.delete(sourceId)\n\t\t\tthis.types.delete(sourceId)\n\t\t})\n\t}\n\n\tpublic removeTarget(targetId: string): void {\n\t\tinvariant(this.getTarget(targetId), 'Expected an existing target.')\n\t\tthis.store.dispatch(removeTarget(targetId))\n\t\tthis.dropTargets.delete(targetId)\n\t\tthis.types.delete(targetId)\n\t}\n\n\tpublic pinSource(sourceId: string): void {\n\t\tconst source = this.getSource(sourceId)\n\t\tinvariant(source, 'Expected an existing source.')\n\n\t\tthis.pinnedSourceId = sourceId\n\t\tthis.pinnedSource = source\n\t}\n\n\tpublic unpinSource(): void {\n\t\tinvariant(this.pinnedSource, 'No source is pinned at the time.')\n\n\t\tthis.pinnedSourceId = null\n\t\tthis.pinnedSource = null\n\t}\n\n\tprivate addHandler(\n\t\trole: HandlerRole,\n\t\ttype: SourceType | TargetType,\n\t\thandler: DragSource | DropTarget,\n\t): string {\n\t\tconst id = getNextHandlerId(role)\n\t\tthis.types.set(id, type)\n\t\tif (role === HandlerRole.SOURCE) {\n\t\t\tthis.dragSources.set(id, handler as DragSource)\n\t\t} else if (role === HandlerRole.TARGET) {\n\t\t\tthis.dropTargets.set(id, handler as DropTarget)\n\t\t}\n\t\treturn id\n\t}\n}\n"],"names":["HandlerRegistryImpl","getNextHandlerId","role","id","getNextUniqueId","toString","HandlerRole","SOURCE","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","done","value","next","addSource","type","source","validateType","validateSourceContract","sourceId","addHandler","store","dispatch","addTarget","target","validateTargetContract","targetId","containsHandler","handler","dragSources","dropTargets","getSource","includePinned","invariant","isSourceId","isPinned","pinnedSourceId","pinnedSource","get","getTarget","isTargetId","getSourceType","types","getTargetType","removeSource","asap","delete","removeTarget","pinSource","unpinSource","set","constructor","Map"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}