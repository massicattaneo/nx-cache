c186fe128f534bd37830f05dcd25855c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSourceSelectorStateV2", {
    enumerable: true,
    get: function() {
        return useSourceSelectorStateV2;
    }
});
const _react = require("react");
const _providers = require("@rp/react/web/common/providers");
const _sourceSelectorconstants = require("../sourceSelector.constants");
const _getIsContentElementSelectedByID = require("../utils/getIsContentElementSelectedByID");
const _getIsSourceSelectorPristineV2 = require("../utils/getIsSourceSelectorPristineV2");
const _handleApplyClickFuncV2 = require("../utils/handleApplyClickFuncV2");
const _removeSelectedItemFunc = require("../utils/removeSelectedItemFunc");
const _resetSourceSelectorStateV2 = require("../utils/resetSourceSelectorStateV2");
const _toggleCategorySelectionFunc = require("../utils/toggleCategorySelectionFunc");
const _toggleSourceSelectionFuncV2 = require("../utils/toggleSourceSelectionFuncV2");
const _useSourceSelectorStateInitializeFullV2 = require("./useSourceSelectorStateInitializeFullV2");
function useSourceSelectorStateV2({ initialState, allAutosuggestSources, applyCallback, allContentCategories }) {
    const { enqueueError } = (0, _providers.useSnackbar)();
    const [isFilterInclude, setIsFilterInclude] = (0, _react.useState)(true);
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers.useModal)();
    const [selectedSources, setSelectedSources] = (0, _react.useState)([]);
    const [selectedCategories, setSelectedCategories] = (0, _react.useState)([]);
    const hasReachedMaxSelection = (0, _react.useMemo)(()=>selectedSources.length >= _sourceSelectorconstants.CONTENT_SOURCES_MAX_SELECTION, [
        selectedSources
    ]);
    const { initialStateFull } = (0, _useSourceSelectorStateInitializeFullV2.useSourceSelectorStateInitializeFullV2)({
        initialState,
        setSelectedSources,
        setSelectedCategories,
        setIsFilterInclude
    });
    const isPristine = (0, _react.useMemo)(()=>(0, _getIsSourceSelectorPristineV2.getIsSourceSelectorPristineV2)({
            isFilterInclude,
            selectedSources,
            selectedCategories,
            initialStateFull
        }), [
        isFilterInclude,
        selectedSources,
        selectedCategories,
        initialStateFull
    ]);
    const showMaxSelectionErrorToast = (0, _react.useCallback)(()=>{
        enqueueError(`You've reached the limit of ${_sourceSelectorconstants.CONTENT_SOURCES_MAX_SELECTION} sources`);
    }, [
        enqueueError
    ]);
    const toggleSourceSelection = (0, _react.useCallback)((e)=>(0, _toggleSourceSelectionFuncV2.toggleSourceSelectionFuncV2)({
            allAutosuggestSources,
            e,
            hasReachedMaxSelection,
            planComparisonHandleOpen,
            selectedSources,
            setSelectedSources,
            showMaxSelectionErrorToast
        }), [
        allAutosuggestSources,
        hasReachedMaxSelection,
        planComparisonHandleOpen,
        selectedSources,
        showMaxSelectionErrorToast
    ]);
    const getIsContentAutosuggestSelectedByID = (0, _react.useCallback)((id)=>(0, _getIsContentElementSelectedByID.getIsContentElementSelectedByID)(id, selectedSources), [
        selectedSources
    ]);
    const getIsContentCategorySelectedByID = (0, _react.useCallback)((id)=>(0, _getIsContentElementSelectedByID.getIsContentElementSelectedByID)(id, selectedCategories), [
        selectedCategories
    ]);
    const toggleIsFilterInclude = (0, _react.useCallback)(()=>setIsFilterInclude((s)=>!s), []);
    const removeSelectedItem = (0, _react.useCallback)((item)=>(0, _removeSelectedItemFunc.removeSelectedItemFunc)({
            item,
            selectedSources,
            setSelectedSources,
            selectedCategories,
            setSelectedCategories
        }), [
        selectedCategories,
        selectedSources
    ]);
    const handleResetClick = (0, _react.useCallback)(()=>{
        (0, _resetSourceSelectorStateV2.resetSourceSelectorStateV2)({
            setSelectedSources,
            setSelectedCategories,
            setIsFilterInclude,
            initialStateFull
        });
    }, [
        initialStateFull
    ]);
    const handleApplyClick = (0, _react.useCallback)(()=>{
        (0, _handleApplyClickFuncV2.handleApplyClickFuncV2)({
            isFilterInclude,
            selectedSources,
            selectedCategories,
            applyCallback
        });
    }, [
        applyCallback,
        isFilterInclude,
        selectedSources,
        selectedCategories
    ]);
    const toggleCategorySelection = (0, _react.useCallback)((e)=>{
        (0, _toggleCategorySelectionFunc.toggleCategorySelectionFunc)({
            allContentCategories,
            e,
            selectedCategories,
            setSelectedCategories
        });
    }, [
        selectedCategories,
        allContentCategories
    ]);
    return {
        getIsContentAutosuggestSelectedByID,
        getIsContentCategorySelectedByID,
        handleApplyClick,
        handleResetClick,
        isFilterInclude,
        isPristine,
        removeSelectedItem,
        selectedCategories,
        selectedSources,
        toggleCategorySelection,
        toggleIsFilterInclude,
        toggleSourceSelection
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL3NvdXJjZS1zZWxlY3Rvci9zcmMvaG9va3MvdXNlU291cmNlU2VsZWN0b3JTdGF0ZVYyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgdHlwZSB7XG4gIEF1dG9zdWdnZXN0U291cmNlLFxuICBDb250ZW50Q2F0ZWdvcnksXG4gIFNvdXJjZVNlbGVjdG9yU3VibWlzc2lvblYyLFxufSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9jb250ZW50XCJcbmltcG9ydCB7IHVzZU1vZGFsLCB1c2VTbmFja2JhciB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgQ09OVEVOVF9TT1VSQ0VTX01BWF9TRUxFQ1RJT04gfSBmcm9tIFwiLi4vc291cmNlU2VsZWN0b3IuY29uc3RhbnRzXCJcbmltcG9ydCB7XG4gIFNvdXJjZVNlbGVjdG9yU2VsZWN0ZWRDYXRlZ29yeUluZm8sXG4gIFNvdXJjZVNlbGVjdG9yU2VsZWN0ZWRTb3VyY2VJbmZvVjIsXG59IGZyb20gXCIuLi9zb3VyY2VTZWxlY3Rvci50eXBlc1wiXG5pbXBvcnQgeyBnZXRJc0NvbnRlbnRFbGVtZW50U2VsZWN0ZWRCeUlEIH0gZnJvbSBcIi4uL3V0aWxzL2dldElzQ29udGVudEVsZW1lbnRTZWxlY3RlZEJ5SURcIlxuaW1wb3J0IHsgZ2V0SXNTb3VyY2VTZWxlY3RvclByaXN0aW5lVjIgfSBmcm9tIFwiLi4vdXRpbHMvZ2V0SXNTb3VyY2VTZWxlY3RvclByaXN0aW5lVjJcIlxuaW1wb3J0IHsgaGFuZGxlQXBwbHlDbGlja0Z1bmNWMiB9IGZyb20gXCIuLi91dGlscy9oYW5kbGVBcHBseUNsaWNrRnVuY1YyXCJcbmltcG9ydCB7IHJlbW92ZVNlbGVjdGVkSXRlbUZ1bmMgfSBmcm9tIFwiLi4vdXRpbHMvcmVtb3ZlU2VsZWN0ZWRJdGVtRnVuY1wiXG5pbXBvcnQgeyByZXNldFNvdXJjZVNlbGVjdG9yU3RhdGVWMiB9IGZyb20gXCIuLi91dGlscy9yZXNldFNvdXJjZVNlbGVjdG9yU3RhdGVWMlwiXG5pbXBvcnQgeyB0b2dnbGVDYXRlZ29yeVNlbGVjdGlvbkZ1bmMgfSBmcm9tIFwiLi4vdXRpbHMvdG9nZ2xlQ2F0ZWdvcnlTZWxlY3Rpb25GdW5jXCJcbmltcG9ydCB7IHRvZ2dsZVNvdXJjZVNlbGVjdGlvbkZ1bmNWMiB9IGZyb20gXCIuLi91dGlscy90b2dnbGVTb3VyY2VTZWxlY3Rpb25GdW5jVjJcIlxuaW1wb3J0IHsgdXNlU291cmNlU2VsZWN0b3JTdGF0ZUluaXRpYWxpemVGdWxsVjIgfSBmcm9tIFwiLi91c2VTb3VyY2VTZWxlY3RvclN0YXRlSW5pdGlhbGl6ZUZ1bGxWMlwiXG5cbnR5cGUgVXNlU291cmNlU2VsZWN0b3JWMlByb3BzID0ge1xuICBpbml0aWFsU3RhdGU6IFNvdXJjZVNlbGVjdG9yU3VibWlzc2lvblYyIHwgdW5kZWZpbmVkXG4gIGFsbENvbnRlbnRDYXRlZ29yaWVzOiBBcnJheTxDb250ZW50Q2F0ZWdvcnk+XG4gIGFsbEF1dG9zdWdnZXN0U291cmNlczogQXJyYXk8QXV0b3N1Z2dlc3RTb3VyY2U+XG4gIGFwcGx5Q2FsbGJhY2s6IChzb3VyY2VTZWxlY3Rpb25TdWJtaXNzaW9uOiBTb3VyY2VTZWxlY3RvclN1Ym1pc3Npb25WMikgPT4gdm9pZFxufVxuXG50eXBlIFVzZVNvdXJjZVNlbGVjdG9yVjJTdGF0ZSA9IHtcbiAgZ2V0SXNDb250ZW50QXV0b3N1Z2dlc3RTZWxlY3RlZEJ5SUQ6IChpZDogc3RyaW5nKSA9PiBib29sZWFuXG4gIGdldElzQ29udGVudENhdGVnb3J5U2VsZWN0ZWRCeUlEOiAoaWQ6IHN0cmluZykgPT4gYm9vbGVhblxuICBoYW5kbGVBcHBseUNsaWNrOiAoKSA9PiB2b2lkXG4gIGhhbmRsZVJlc2V0Q2xpY2s6ICgpID0+IHZvaWRcbiAgaXNGaWx0ZXJJbmNsdWRlOiBib29sZWFuXG4gIGlzUHJpc3RpbmU6IGJvb2xlYW5cbiAgcmVtb3ZlU2VsZWN0ZWRJdGVtOiAoXG4gICAgc2VsZWN0ZWRJdGVtOiBTb3VyY2VTZWxlY3RvclNlbGVjdGVkU291cmNlSW5mb1YyIHwgU291cmNlU2VsZWN0b3JTZWxlY3RlZENhdGVnb3J5SW5mbyxcbiAgKSA9PiB2b2lkXG4gIHNlbGVjdGVkQ2F0ZWdvcmllczogQXJyYXk8U291cmNlU2VsZWN0b3JTZWxlY3RlZENhdGVnb3J5SW5mbz5cbiAgc2VsZWN0ZWRTb3VyY2VzOiBBcnJheTxTb3VyY2VTZWxlY3RvclNlbGVjdGVkU291cmNlSW5mb1YyPlxuICB0b2dnbGVDYXRlZ29yeVNlbGVjdGlvbjogKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB2b2lkXG4gIHRvZ2dsZUlzRmlsdGVySW5jbHVkZTogKCkgPT4gdm9pZFxuICB0b2dnbGVTb3VyY2VTZWxlY3Rpb246IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZFxufVxuXG5mdW5jdGlvbiB1c2VTb3VyY2VTZWxlY3RvclN0YXRlVjIoe1xuICBpbml0aWFsU3RhdGUsXG4gIGFsbEF1dG9zdWdnZXN0U291cmNlcyxcbiAgYXBwbHlDYWxsYmFjayxcbiAgYWxsQ29udGVudENhdGVnb3JpZXMsXG59OiBVc2VTb3VyY2VTZWxlY3RvclYyUHJvcHMpOiBVc2VTb3VyY2VTZWxlY3RvclYyU3RhdGUge1xuICBjb25zdCB7IGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuICBjb25zdCBbaXNGaWx0ZXJJbmNsdWRlLCBzZXRJc0ZpbHRlckluY2x1ZGVdID0gdXNlU3RhdGUodHJ1ZSlcblxuICBjb25zdCB7XG4gICAgcGxhbkNvbXBhcmlzb25Nb2RhbDogeyBoYW5kbGVPcGVuOiBwbGFuQ29tcGFyaXNvbkhhbmRsZU9wZW4gfSxcbiAgfSA9IHVzZU1vZGFsKClcblxuICBjb25zdCBbc2VsZWN0ZWRTb3VyY2VzLCBzZXRTZWxlY3RlZFNvdXJjZXNdID0gdXNlU3RhdGU8QXJyYXk8U291cmNlU2VsZWN0b3JTZWxlY3RlZFNvdXJjZUluZm9WMj4+KFxuICAgIFtdLFxuICApXG5cbiAgY29uc3QgW3NlbGVjdGVkQ2F0ZWdvcmllcywgc2V0U2VsZWN0ZWRDYXRlZ29yaWVzXSA9IHVzZVN0YXRlPFxuICAgIEFycmF5PFNvdXJjZVNlbGVjdG9yU2VsZWN0ZWRDYXRlZ29yeUluZm8+XG4gID4oW10pXG5cbiAgY29uc3QgaGFzUmVhY2hlZE1heFNlbGVjdGlvbiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gc2VsZWN0ZWRTb3VyY2VzLmxlbmd0aCA+PSBDT05URU5UX1NPVVJDRVNfTUFYX1NFTEVDVElPTixcbiAgICBbc2VsZWN0ZWRTb3VyY2VzXSxcbiAgKVxuXG4gIGNvbnN0IHsgaW5pdGlhbFN0YXRlRnVsbCB9ID0gdXNlU291cmNlU2VsZWN0b3JTdGF0ZUluaXRpYWxpemVGdWxsVjIoe1xuICAgIGluaXRpYWxTdGF0ZSxcbiAgICBzZXRTZWxlY3RlZFNvdXJjZXMsXG4gICAgc2V0U2VsZWN0ZWRDYXRlZ29yaWVzLFxuICAgIHNldElzRmlsdGVySW5jbHVkZSxcbiAgfSlcblxuICBjb25zdCBpc1ByaXN0aW5lID0gdXNlTWVtbyhcbiAgICAoKSA9PlxuICAgICAgZ2V0SXNTb3VyY2VTZWxlY3RvclByaXN0aW5lVjIoe1xuICAgICAgICBpc0ZpbHRlckluY2x1ZGUsXG4gICAgICAgIHNlbGVjdGVkU291cmNlcyxcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yaWVzLFxuICAgICAgICBpbml0aWFsU3RhdGVGdWxsLFxuICAgICAgfSksXG4gICAgW2lzRmlsdGVySW5jbHVkZSwgc2VsZWN0ZWRTb3VyY2VzLCBzZWxlY3RlZENhdGVnb3JpZXMsIGluaXRpYWxTdGF0ZUZ1bGxdLFxuICApXG5cbiAgY29uc3Qgc2hvd01heFNlbGVjdGlvbkVycm9yVG9hc3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgZW5xdWV1ZUVycm9yKGBZb3UndmUgcmVhY2hlZCB0aGUgbGltaXQgb2YgJHtDT05URU5UX1NPVVJDRVNfTUFYX1NFTEVDVElPTn0gc291cmNlc2ApXG4gIH0sIFtlbnF1ZXVlRXJyb3JdKVxuXG4gIGNvbnN0IHRvZ2dsZVNvdXJjZVNlbGVjdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT5cbiAgICAgIHRvZ2dsZVNvdXJjZVNlbGVjdGlvbkZ1bmNWMih7XG4gICAgICAgIGFsbEF1dG9zdWdnZXN0U291cmNlcyxcbiAgICAgICAgZSxcbiAgICAgICAgaGFzUmVhY2hlZE1heFNlbGVjdGlvbixcbiAgICAgICAgcGxhbkNvbXBhcmlzb25IYW5kbGVPcGVuLFxuICAgICAgICBzZWxlY3RlZFNvdXJjZXMsXG4gICAgICAgIHNldFNlbGVjdGVkU291cmNlcyxcbiAgICAgICAgc2hvd01heFNlbGVjdGlvbkVycm9yVG9hc3QsXG4gICAgICB9KSxcbiAgICBbXG4gICAgICBhbGxBdXRvc3VnZ2VzdFNvdXJjZXMsXG4gICAgICBoYXNSZWFjaGVkTWF4U2VsZWN0aW9uLFxuICAgICAgcGxhbkNvbXBhcmlzb25IYW5kbGVPcGVuLFxuICAgICAgc2VsZWN0ZWRTb3VyY2VzLFxuICAgICAgc2hvd01heFNlbGVjdGlvbkVycm9yVG9hc3QsXG4gICAgXSxcbiAgKVxuXG4gIGNvbnN0IGdldElzQ29udGVudEF1dG9zdWdnZXN0U2VsZWN0ZWRCeUlEID0gdXNlQ2FsbGJhY2soXG4gICAgKGlkOiBzdHJpbmcpID0+IGdldElzQ29udGVudEVsZW1lbnRTZWxlY3RlZEJ5SUQoaWQsIHNlbGVjdGVkU291cmNlcyksXG4gICAgW3NlbGVjdGVkU291cmNlc10sXG4gIClcblxuICBjb25zdCBnZXRJc0NvbnRlbnRDYXRlZ29yeVNlbGVjdGVkQnlJRCA9IHVzZUNhbGxiYWNrKFxuICAgIChpZDogc3RyaW5nKSA9PiBnZXRJc0NvbnRlbnRFbGVtZW50U2VsZWN0ZWRCeUlEKGlkLCBzZWxlY3RlZENhdGVnb3JpZXMpLFxuICAgIFtzZWxlY3RlZENhdGVnb3JpZXNdLFxuICApXG5cbiAgY29uc3QgdG9nZ2xlSXNGaWx0ZXJJbmNsdWRlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0SXNGaWx0ZXJJbmNsdWRlKHMgPT4gIXMpLCBbXSlcblxuICBjb25zdCByZW1vdmVTZWxlY3RlZEl0ZW0gPSB1c2VDYWxsYmFjayhcbiAgICAoaXRlbTogU291cmNlU2VsZWN0b3JTZWxlY3RlZFNvdXJjZUluZm9WMiB8IFNvdXJjZVNlbGVjdG9yU2VsZWN0ZWRDYXRlZ29yeUluZm8pID0+XG4gICAgICByZW1vdmVTZWxlY3RlZEl0ZW1GdW5jKHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgc2VsZWN0ZWRTb3VyY2VzLFxuICAgICAgICBzZXRTZWxlY3RlZFNvdXJjZXMsXG4gICAgICAgIHNlbGVjdGVkQ2F0ZWdvcmllcyxcbiAgICAgICAgc2V0U2VsZWN0ZWRDYXRlZ29yaWVzLFxuICAgICAgfSksXG4gICAgW3NlbGVjdGVkQ2F0ZWdvcmllcywgc2VsZWN0ZWRTb3VyY2VzXSxcbiAgKVxuXG4gIGNvbnN0IGhhbmRsZVJlc2V0Q2xpY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmVzZXRTb3VyY2VTZWxlY3RvclN0YXRlVjIoe1xuICAgICAgc2V0U2VsZWN0ZWRTb3VyY2VzLFxuICAgICAgc2V0U2VsZWN0ZWRDYXRlZ29yaWVzLFxuICAgICAgc2V0SXNGaWx0ZXJJbmNsdWRlLFxuICAgICAgaW5pdGlhbFN0YXRlRnVsbCxcbiAgICB9KVxuICB9LCBbaW5pdGlhbFN0YXRlRnVsbF0pXG5cbiAgY29uc3QgaGFuZGxlQXBwbHlDbGljayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBoYW5kbGVBcHBseUNsaWNrRnVuY1YyKHtcbiAgICAgIGlzRmlsdGVySW5jbHVkZSxcbiAgICAgIHNlbGVjdGVkU291cmNlcyxcbiAgICAgIHNlbGVjdGVkQ2F0ZWdvcmllcyxcbiAgICAgIGFwcGx5Q2FsbGJhY2ssXG4gICAgfSlcbiAgfSwgW2FwcGx5Q2FsbGJhY2ssIGlzRmlsdGVySW5jbHVkZSwgc2VsZWN0ZWRTb3VyY2VzLCBzZWxlY3RlZENhdGVnb3JpZXNdKVxuXG4gIGNvbnN0IHRvZ2dsZUNhdGVnb3J5U2VsZWN0aW9uID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB7XG4gICAgICB0b2dnbGVDYXRlZ29yeVNlbGVjdGlvbkZ1bmMoe1xuICAgICAgICBhbGxDb250ZW50Q2F0ZWdvcmllcyxcbiAgICAgICAgZSxcbiAgICAgICAgc2VsZWN0ZWRDYXRlZ29yaWVzLFxuICAgICAgICBzZXRTZWxlY3RlZENhdGVnb3JpZXMsXG4gICAgICB9KVxuICAgIH0sXG4gICAgW3NlbGVjdGVkQ2F0ZWdvcmllcywgYWxsQ29udGVudENhdGVnb3JpZXNdLFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBnZXRJc0NvbnRlbnRBdXRvc3VnZ2VzdFNlbGVjdGVkQnlJRCxcbiAgICBnZXRJc0NvbnRlbnRDYXRlZ29yeVNlbGVjdGVkQnlJRCxcbiAgICBoYW5kbGVBcHBseUNsaWNrLFxuICAgIGhhbmRsZVJlc2V0Q2xpY2ssXG4gICAgaXNGaWx0ZXJJbmNsdWRlLFxuICAgIGlzUHJpc3RpbmUsXG4gICAgcmVtb3ZlU2VsZWN0ZWRJdGVtLFxuICAgIHNlbGVjdGVkQ2F0ZWdvcmllcyxcbiAgICBzZWxlY3RlZFNvdXJjZXMsXG4gICAgdG9nZ2xlQ2F0ZWdvcnlTZWxlY3Rpb24sXG4gICAgdG9nZ2xlSXNGaWx0ZXJJbmNsdWRlLFxuICAgIHRvZ2dsZVNvdXJjZVNlbGVjdGlvbixcbiAgfVxufVxuXG5leHBvcnQgeyB1c2VTb3VyY2VTZWxlY3RvclN0YXRlVjIgfVxuZXhwb3J0IHR5cGUgeyBVc2VTb3VyY2VTZWxlY3RvclYyU3RhdGUgfVxuIl0sIm5hbWVzIjpbInVzZVNvdXJjZVNlbGVjdG9yU3RhdGVWMiIsImluaXRpYWxTdGF0ZSIsImFsbEF1dG9zdWdnZXN0U291cmNlcyIsImFwcGx5Q2FsbGJhY2siLCJhbGxDb250ZW50Q2F0ZWdvcmllcyIsImVucXVldWVFcnJvciIsInVzZVNuYWNrYmFyIiwiaXNGaWx0ZXJJbmNsdWRlIiwic2V0SXNGaWx0ZXJJbmNsdWRlIiwidXNlU3RhdGUiLCJwbGFuQ29tcGFyaXNvbk1vZGFsIiwiaGFuZGxlT3BlbiIsInBsYW5Db21wYXJpc29uSGFuZGxlT3BlbiIsInVzZU1vZGFsIiwic2VsZWN0ZWRTb3VyY2VzIiwic2V0U2VsZWN0ZWRTb3VyY2VzIiwic2VsZWN0ZWRDYXRlZ29yaWVzIiwic2V0U2VsZWN0ZWRDYXRlZ29yaWVzIiwiaGFzUmVhY2hlZE1heFNlbGVjdGlvbiIsInVzZU1lbW8iLCJsZW5ndGgiLCJDT05URU5UX1NPVVJDRVNfTUFYX1NFTEVDVElPTiIsImluaXRpYWxTdGF0ZUZ1bGwiLCJ1c2VTb3VyY2VTZWxlY3RvclN0YXRlSW5pdGlhbGl6ZUZ1bGxWMiIsImlzUHJpc3RpbmUiLCJnZXRJc1NvdXJjZVNlbGVjdG9yUHJpc3RpbmVWMiIsInNob3dNYXhTZWxlY3Rpb25FcnJvclRvYXN0IiwidXNlQ2FsbGJhY2siLCJ0b2dnbGVTb3VyY2VTZWxlY3Rpb24iLCJlIiwidG9nZ2xlU291cmNlU2VsZWN0aW9uRnVuY1YyIiwiZ2V0SXNDb250ZW50QXV0b3N1Z2dlc3RTZWxlY3RlZEJ5SUQiLCJpZCIsImdldElzQ29udGVudEVsZW1lbnRTZWxlY3RlZEJ5SUQiLCJnZXRJc0NvbnRlbnRDYXRlZ29yeVNlbGVjdGVkQnlJRCIsInRvZ2dsZUlzRmlsdGVySW5jbHVkZSIsInMiLCJyZW1vdmVTZWxlY3RlZEl0ZW0iLCJpdGVtIiwicmVtb3ZlU2VsZWN0ZWRJdGVtRnVuYyIsImhhbmRsZVJlc2V0Q2xpY2siLCJyZXNldFNvdXJjZVNlbGVjdG9yU3RhdGVWMiIsImhhbmRsZUFwcGx5Q2xpY2siLCJoYW5kbGVBcHBseUNsaWNrRnVuY1YyIiwidG9nZ2xlQ2F0ZWdvcnlTZWxlY3Rpb24iLCJ0b2dnbGVDYXRlZ29yeVNlbGVjdGlvbkZ1bmMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQXVMU0E7OztlQUFBQTs7O3VCQXZMc0M7MkJBTVQ7eUNBQ1E7aURBS0U7K0NBQ0Y7d0NBQ1A7d0NBQ0E7NENBQ0k7NkNBQ0M7NkNBQ0E7d0RBQ1c7QUEwQnZELFNBQVNBLHlCQUF5QixFQUNoQ0MsWUFBWSxFQUNaQyxxQkFBcUIsRUFDckJDLGFBQWEsRUFDYkMsb0JBQW9CLEVBQ0s7SUFDekIsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBR0MsSUFBQUEsc0JBQVc7SUFDcEMsTUFBTSxDQUFDQyxpQkFBaUJDLG1CQUFtQixHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFFdkQsTUFBTSxFQUNKQyxxQkFBcUIsRUFBRUMsWUFBWUMsd0JBQXdCLEVBQUUsRUFDOUQsR0FBR0MsSUFBQUEsbUJBQVE7SUFFWixNQUFNLENBQUNDLGlCQUFpQkMsbUJBQW1CLEdBQUdOLElBQUFBLGVBQVEsRUFDcEQsRUFBRTtJQUdKLE1BQU0sQ0FBQ08sb0JBQW9CQyxzQkFBc0IsR0FBR1IsSUFBQUEsZUFBUSxFQUUxRCxFQUFFO0lBRUosTUFBTVMseUJBQXlCQyxJQUFBQSxjQUFPLEVBQ3BDLElBQU1MLGdCQUFnQk0sTUFBTSxJQUFJQyxzREFBNkIsRUFDN0Q7UUFBQ1A7S0FBZ0I7SUFHbkIsTUFBTSxFQUFFUSxnQkFBZ0IsRUFBRSxHQUFHQyxJQUFBQSw4RUFBc0MsRUFBQztRQUNsRXRCO1FBQ0FjO1FBQ0FFO1FBQ0FUO0lBQ0Y7SUFFQSxNQUFNZ0IsYUFBYUwsSUFBQUEsY0FBTyxFQUN4QixJQUNFTSxJQUFBQSw0REFBNkIsRUFBQztZQUM1QmxCO1lBQ0FPO1lBQ0FFO1lBQ0FNO1FBQ0YsSUFDRjtRQUFDZjtRQUFpQk87UUFBaUJFO1FBQW9CTTtLQUFpQjtJQUcxRSxNQUFNSSw2QkFBNkJDLElBQUFBLGtCQUFXLEVBQUM7UUFDN0N0QixhQUFhLENBQUMsNEJBQTRCLEVBQUVnQixzREFBNkIsQ0FBQyxRQUFRLENBQUM7SUFDckYsR0FBRztRQUFDaEI7S0FBYTtJQUVqQixNQUFNdUIsd0JBQXdCRCxJQUFBQSxrQkFBVyxFQUN2QyxDQUFDRSxJQUNDQyxJQUFBQSx3REFBMkIsRUFBQztZQUMxQjVCO1lBQ0EyQjtZQUNBWDtZQUNBTjtZQUNBRTtZQUNBQztZQUNBVztRQUNGLElBQ0Y7UUFDRXhCO1FBQ0FnQjtRQUNBTjtRQUNBRTtRQUNBWTtLQUNEO0lBR0gsTUFBTUssc0NBQXNDSixJQUFBQSxrQkFBVyxFQUNyRCxDQUFDSyxLQUFlQyxJQUFBQSxnRUFBK0IsRUFBQ0QsSUFBSWxCLGtCQUNwRDtRQUFDQTtLQUFnQjtJQUduQixNQUFNb0IsbUNBQW1DUCxJQUFBQSxrQkFBVyxFQUNsRCxDQUFDSyxLQUFlQyxJQUFBQSxnRUFBK0IsRUFBQ0QsSUFBSWhCLHFCQUNwRDtRQUFDQTtLQUFtQjtJQUd0QixNQUFNbUIsd0JBQXdCUixJQUFBQSxrQkFBVyxFQUFDLElBQU1uQixtQkFBbUI0QixDQUFBQSxJQUFLLENBQUNBLElBQUksRUFBRTtJQUUvRSxNQUFNQyxxQkFBcUJWLElBQUFBLGtCQUFXLEVBQ3BDLENBQUNXLE9BQ0NDLElBQUFBLDhDQUFzQixFQUFDO1lBQ3JCRDtZQUNBeEI7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRixJQUNGO1FBQUNEO1FBQW9CRjtLQUFnQjtJQUd2QyxNQUFNMEIsbUJBQW1CYixJQUFBQSxrQkFBVyxFQUFDO1FBQ25DYyxJQUFBQSxzREFBMEIsRUFBQztZQUN6QjFCO1lBQ0FFO1lBQ0FUO1lBQ0FjO1FBQ0Y7SUFDRixHQUFHO1FBQUNBO0tBQWlCO0lBRXJCLE1BQU1vQixtQkFBbUJmLElBQUFBLGtCQUFXLEVBQUM7UUFDbkNnQixJQUFBQSw4Q0FBc0IsRUFBQztZQUNyQnBDO1lBQ0FPO1lBQ0FFO1lBQ0FiO1FBQ0Y7SUFDRixHQUFHO1FBQUNBO1FBQWVJO1FBQWlCTztRQUFpQkU7S0FBbUI7SUFFeEUsTUFBTTRCLDBCQUEwQmpCLElBQUFBLGtCQUFXLEVBQ3pDLENBQUNFO1FBQ0NnQixJQUFBQSx3REFBMkIsRUFBQztZQUMxQnpDO1lBQ0F5QjtZQUNBYjtZQUNBQztRQUNGO0lBQ0YsR0FDQTtRQUFDRDtRQUFvQlo7S0FBcUI7SUFHNUMsT0FBTztRQUNMMkI7UUFDQUc7UUFDQVE7UUFDQUY7UUFDQWpDO1FBQ0FpQjtRQUNBYTtRQUNBckI7UUFDQUY7UUFDQThCO1FBQ0FUO1FBQ0FQO0lBQ0Y7QUFDRiJ9