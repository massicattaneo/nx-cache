{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/rpql/src/lib/rpql-utils/removeFiltersFromMap.ts"],"sourcesContent":["import { isRpqlFlatLogicalGroup, isRpqlFlatMatchFilter } from \"@rp/common/api-types\"\nimport {\n  RpqlFilterMap,\n  RpqlFlatFilter,\n  RpqlFlatLogicalFilter,\n  RpqlFlatMatchFilter,\n} from \"@rp/common/api-types\"\n\nconst removeOrphans = (root: string, filterMap: RpqlFilterMap): RpqlFilterMap => {\n  const children = Object.values(filterMap)\n    .filter(\n      (filter): filter is RpqlFlatLogicalFilter | RpqlFlatMatchFilter =>\n        isRpqlFlatLogicalGroup(filter) || isRpqlFlatMatchFilter(filter),\n    )\n    .flatMap(filter => filter.value)\n\n  const cleanedMap = Object.entries(filterMap).filter(([filterId, _]) =>\n    [root, ...children].includes(filterId),\n  )\n\n  return Object.fromEntries(cleanedMap)\n}\n\nconst removeFiltersFromMap = (\n  filterMap: { [key: string]: RpqlFlatFilter },\n  filtersToRemove: Array<RpqlFlatFilter | null>,\n  root: string,\n) => {\n  const hasErrors = !!filtersToRemove.filter(filter => filter === null).length\n  if (hasErrors) return { error: \"Attempting to remove non-existing filter\", map: filterMap }\n\n  const { ...newFilterMap } = filterMap\n  const idsToRemove = filtersToRemove.map(filter => filter?.id || \"\")\n\n  idsToRemove.forEach(idToRemove => {\n    delete newFilterMap[idToRemove]\n  })\n\n  const filterMapEntries = Object.entries(newFilterMap)\n  const cleanedEntries = filterMapEntries.map(([filterId, filter]) => [\n    filterId,\n    {\n      ...filter,\n      value: isRpqlFlatLogicalGroup(filter)\n        ? filter.value.filter(id => !idsToRemove.includes(id))\n        : filter.value,\n    },\n  ])\n  return { map: removeOrphans(root, Object.fromEntries(cleanedEntries)) }\n}\n\nexport { removeFiltersFromMap }\n"],"names":["removeFiltersFromMap","removeOrphans","root","filterMap","children","Object","values","filter","isRpqlFlatLogicalGroup","isRpqlFlatMatchFilter","flatMap","value","cleanedMap","entries","filterId","_","includes","fromEntries","filtersToRemove","hasErrors","length","error","map","newFilterMap","idsToRemove","id","forEach","idToRemove","filterMapEntries","cleanedEntries"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAmDSA;;;eAAAA;;;0BAnDqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ9D,MAAMC,gBAAgB,CAACC,MAAcC;IACnC,MAAMC,WAAWC,OAAOC,MAAM,CAACH,WAC5BI,MAAM,CACL,CAACA,SACCC,IAAAA,gCAAsB,EAACD,WAAWE,IAAAA,+BAAqB,EAACF,SAE3DG,OAAO,CAACH,CAAAA,SAAUA,OAAOI,KAAK;IAEjC,MAAMC,aAAaP,OAAOQ,OAAO,CAACV,WAAWI,MAAM,CAAC,CAAC,CAACO,UAAUC,EAAE,GAChE;YAACb;eAASE;SAAS,CAACY,QAAQ,CAACF;IAG/B,OAAOT,OAAOY,WAAW,CAACL;AAC5B;AAEA,MAAMZ,uBAAuB,CAC3BG,WACAe,iBACAhB;IAEA,MAAMiB,YAAY,CAAC,CAACD,gBAAgBX,MAAM,CAACA,CAAAA,SAAUA,WAAW,MAAMa,MAAM;IAC5E,IAAID,WAAW,OAAO;QAAEE,OAAO;QAA4CC,KAAKnB;IAAU;IAE1F,MAAQ,AAAGoB,wDAAiBpB;IAC5B,MAAMqB,cAAcN,gBAAgBI,GAAG,CAACf,CAAAA,SAAUA,CAAAA,mBAAAA,6BAAAA,OAAQkB,EAAE,KAAI;IAEhED,YAAYE,OAAO,CAACC,CAAAA;QAClB,OAAOJ,YAAY,CAACI,WAAW;IACjC;IAEA,MAAMC,mBAAmBvB,OAAOQ,OAAO,CAACU;IACxC,MAAMM,iBAAiBD,iBAAiBN,GAAG,CAAC,CAAC,CAACR,UAAUP,OAAO,GAAK;YAClEO;YACA,wCACKP;gBACHI,OAAOH,IAAAA,gCAAsB,EAACD,UAC1BA,OAAOI,KAAK,CAACJ,MAAM,CAACkB,CAAAA,KAAM,CAACD,YAAYR,QAAQ,CAACS,OAChDlB,OAAOI,KAAK;;SAEnB;IACD,OAAO;QAAEW,KAAKrB,cAAcC,MAAMG,OAAOY,WAAW,CAACY;IAAiB;AACxE"}