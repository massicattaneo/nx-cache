25d3e10e7ffe4ef50d351d479e3befe2
"use strict";
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
// src/utils/index.ts
var utils_exports = {};
__export(utils_exports, {
    createDeferredPromise: ()=>createDeferredPromise,
    fastDeepMergeAndKeep: ()=>fastDeepMergeAndKeep,
    fastDeepMergeAndReplace: ()=>fastDeepMergeAndReplace,
    handleValueOrFn: ()=>handleValueOrFn,
    isDevelopmentEnvironment: ()=>isDevelopmentEnvironment,
    isProductionEnvironment: ()=>isProductionEnvironment,
    isStaging: ()=>isStaging,
    isTestEnvironment: ()=>isTestEnvironment,
    logErrorInDevMode: ()=>logErrorInDevMode,
    noop: ()=>noop,
    runWithExponentialBackOff: ()=>runWithExponentialBackOff
});
module.exports = __toCommonJS(utils_exports);
// src/utils/noop.ts
var noop = (..._args)=>{};
// src/utils/createDeferredPromise.ts
var createDeferredPromise = ()=>{
    let resolve = noop;
    let reject = noop;
    const promise = new Promise((res, rej)=>{
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        resolve,
        reject
    };
};
// src/utils/instance.ts
function isStaging(frontendApi) {
    return frontendApi.endsWith(".lclstage.dev") || frontendApi.endsWith(".stgstage.dev") || frontendApi.endsWith(".clerkstage.dev") || frontendApi.endsWith(".accountsstage.dev");
}
// src/utils/runtimeEnvironment.ts
var isDevelopmentEnvironment = ()=>{
    try {
        return process.env.NODE_ENV === "development";
    } catch (e) {}
    return false;
};
var isTestEnvironment = ()=>{
    try {
        return process.env.NODE_ENV === "test";
    } catch (e) {}
    return false;
};
var isProductionEnvironment = ()=>{
    try {
        return process.env.NODE_ENV === "production";
    } catch (e) {}
    return false;
};
// src/utils/logErrorInDevMode.ts
var logErrorInDevMode = (message)=>{
    if (isDevelopmentEnvironment()) {
        console.error(`Clerk: ${message}`);
    }
};
// src/utils/runWithExponentialBackOff.ts
var defaultOptions = {
    firstDelay: 125,
    maxDelay: 0,
    timeMultiple: 2,
    shouldRetry: ()=>true
};
var sleep = async (ms)=>new Promise((s)=>setTimeout(s, ms));
var createExponentialDelayAsyncFn = (opts)=>{
    let timesCalled = 0;
    const calculateDelayInMs = ()=>{
        const constant = opts.firstDelay;
        const base = opts.timeMultiple;
        const delay = constant * Math.pow(base, timesCalled);
        return Math.min(opts.maxDelay || delay, delay);
    };
    return async ()=>{
        await sleep(calculateDelayInMs());
        timesCalled++;
    };
};
var runWithExponentialBackOff = async (callback, options = {})=>{
    let iterationsCount = 0;
    const { shouldRetry, firstDelay, maxDelay, timeMultiple } = _object_spread({}, defaultOptions, options);
    const delay = createExponentialDelayAsyncFn({
        firstDelay,
        maxDelay,
        timeMultiple
    });
    while(true){
        try {
            return await callback();
        } catch (e) {
            iterationsCount++;
            if (!shouldRetry(e, iterationsCount)) {
                throw e;
            }
            await delay();
        }
    }
};
// src/utils/handleValueOrFn.ts
function handleValueOrFn(value, url, defaultValue) {
    if (typeof value === "function") {
        return value(url);
    }
    if (typeof value !== "undefined") {
        return value;
    }
    if (typeof defaultValue !== "undefined") {
        return defaultValue;
    }
    return void 0;
}
// src/utils/fastDeepMerge.ts
var fastDeepMergeAndReplace = (source, target)=>{
    if (!source || !target) {
        return;
    }
    for(const key in source){
        if (Object.prototype.hasOwnProperty.call(source, key) && source[key] !== null && typeof source[key] === `object`) {
            if (target[key] === void 0) {
                target[key] = new (Object.getPrototypeOf(source[key])).constructor();
            }
            fastDeepMergeAndReplace(source[key], target[key]);
        } else if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
};
var fastDeepMergeAndKeep = (source, target)=>{
    if (!source || !target) {
        return;
    }
    for(const key in source){
        if (Object.prototype.hasOwnProperty.call(source, key) && source[key] !== null && typeof source[key] === `object`) {
            if (target[key] === void 0) {
                target[key] = new (Object.getPrototypeOf(source[key])).constructor();
            }
            fastDeepMergeAndKeep(source[key], target[key]);
        } else if (Object.prototype.hasOwnProperty.call(source, key) && target[key] === void 0) {
            target[key] = source[key];
        }
    }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    createDeferredPromise,
    fastDeepMergeAndKeep,
    fastDeepMergeAndReplace,
    handleValueOrFn,
    isDevelopmentEnvironment,
    isProductionEnvironment,
    isStaging,
    isTestEnvironment,
    logErrorInDevMode,
    noop,
    runWithExponentialBackOff
}); //# sourceMappingURL=index.js.map

//# sourceMappingURL=data:application/json;base64,