e8a1cf13ece8ce7dff4b69694409d615
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "removeFiltersFromMap", {
    enumerable: true,
    get: function() {
        return removeFiltersFromMap;
    }
});
const _apitypes = require("@rp/common/api-types");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source){
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _object_destructuring_empty(o) {
    if (o === null || o === void 0) throw new TypeError("Cannot destructure " + o);
    return o;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const removeOrphans = (root, filterMap)=>{
    const children = Object.values(filterMap).filter((filter)=>(0, _apitypes.isRpqlFlatLogicalGroup)(filter) || (0, _apitypes.isRpqlFlatMatchFilter)(filter)).flatMap((filter)=>filter.value);
    const cleanedMap = Object.entries(filterMap).filter(([filterId, _])=>[
            root,
            ...children
        ].includes(filterId));
    return Object.fromEntries(cleanedMap);
};
const removeFiltersFromMap = (filterMap, filtersToRemove, root)=>{
    const hasErrors = !!filtersToRemove.filter((filter)=>filter === null).length;
    if (hasErrors) return {
        error: "Attempting to remove non-existing filter",
        map: filterMap
    };
    const newFilterMap = _extends({}, _object_destructuring_empty(filterMap));
    const idsToRemove = filtersToRemove.map((filter)=>(filter === null || filter === void 0 ? void 0 : filter.id) || "");
    idsToRemove.forEach((idToRemove)=>{
        delete newFilterMap[idToRemove];
    });
    const filterMapEntries = Object.entries(newFilterMap);
    const cleanedEntries = filterMapEntries.map(([filterId, filter])=>[
            filterId,
            _object_spread_props(_object_spread({}, filter), {
                value: (0, _apitypes.isRpqlFlatLogicalGroup)(filter) ? filter.value.filter((id)=>!idsToRemove.includes(id)) : filter.value
            })
        ]);
    return {
        map: removeOrphans(root, Object.fromEntries(cleanedEntries))
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvcnBxbC9zcmMvbGliL3JwcWwtdXRpbHMvcmVtb3ZlRmlsdGVyc0Zyb21NYXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNScHFsRmxhdExvZ2ljYWxHcm91cCwgaXNScHFsRmxhdE1hdGNoRmlsdGVyIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7XG4gIFJwcWxGaWx0ZXJNYXAsXG4gIFJwcWxGbGF0RmlsdGVyLFxuICBScHFsRmxhdExvZ2ljYWxGaWx0ZXIsXG4gIFJwcWxGbGF0TWF0Y2hGaWx0ZXIsXG59IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG5cbmNvbnN0IHJlbW92ZU9ycGhhbnMgPSAocm9vdDogc3RyaW5nLCBmaWx0ZXJNYXA6IFJwcWxGaWx0ZXJNYXApOiBScHFsRmlsdGVyTWFwID0+IHtcbiAgY29uc3QgY2hpbGRyZW4gPSBPYmplY3QudmFsdWVzKGZpbHRlck1hcClcbiAgICAuZmlsdGVyKFxuICAgICAgKGZpbHRlcik6IGZpbHRlciBpcyBScHFsRmxhdExvZ2ljYWxGaWx0ZXIgfCBScHFsRmxhdE1hdGNoRmlsdGVyID0+XG4gICAgICAgIGlzUnBxbEZsYXRMb2dpY2FsR3JvdXAoZmlsdGVyKSB8fCBpc1JwcWxGbGF0TWF0Y2hGaWx0ZXIoZmlsdGVyKSxcbiAgICApXG4gICAgLmZsYXRNYXAoZmlsdGVyID0+IGZpbHRlci52YWx1ZSlcblxuICBjb25zdCBjbGVhbmVkTWFwID0gT2JqZWN0LmVudHJpZXMoZmlsdGVyTWFwKS5maWx0ZXIoKFtmaWx0ZXJJZCwgX10pID0+XG4gICAgW3Jvb3QsIC4uLmNoaWxkcmVuXS5pbmNsdWRlcyhmaWx0ZXJJZCksXG4gIClcblxuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGNsZWFuZWRNYXApXG59XG5cbmNvbnN0IHJlbW92ZUZpbHRlcnNGcm9tTWFwID0gKFxuICBmaWx0ZXJNYXA6IHsgW2tleTogc3RyaW5nXTogUnBxbEZsYXRGaWx0ZXIgfSxcbiAgZmlsdGVyc1RvUmVtb3ZlOiBBcnJheTxScHFsRmxhdEZpbHRlciB8IG51bGw+LFxuICByb290OiBzdHJpbmcsXG4pID0+IHtcbiAgY29uc3QgaGFzRXJyb3JzID0gISFmaWx0ZXJzVG9SZW1vdmUuZmlsdGVyKGZpbHRlciA9PiBmaWx0ZXIgPT09IG51bGwpLmxlbmd0aFxuICBpZiAoaGFzRXJyb3JzKSByZXR1cm4geyBlcnJvcjogXCJBdHRlbXB0aW5nIHRvIHJlbW92ZSBub24tZXhpc3RpbmcgZmlsdGVyXCIsIG1hcDogZmlsdGVyTWFwIH1cblxuICBjb25zdCB7IC4uLm5ld0ZpbHRlck1hcCB9ID0gZmlsdGVyTWFwXG4gIGNvbnN0IGlkc1RvUmVtb3ZlID0gZmlsdGVyc1RvUmVtb3ZlLm1hcChmaWx0ZXIgPT4gZmlsdGVyPy5pZCB8fCBcIlwiKVxuXG4gIGlkc1RvUmVtb3ZlLmZvckVhY2goaWRUb1JlbW92ZSA9PiB7XG4gICAgZGVsZXRlIG5ld0ZpbHRlck1hcFtpZFRvUmVtb3ZlXVxuICB9KVxuXG4gIGNvbnN0IGZpbHRlck1hcEVudHJpZXMgPSBPYmplY3QuZW50cmllcyhuZXdGaWx0ZXJNYXApXG4gIGNvbnN0IGNsZWFuZWRFbnRyaWVzID0gZmlsdGVyTWFwRW50cmllcy5tYXAoKFtmaWx0ZXJJZCwgZmlsdGVyXSkgPT4gW1xuICAgIGZpbHRlcklkLFxuICAgIHtcbiAgICAgIC4uLmZpbHRlcixcbiAgICAgIHZhbHVlOiBpc1JwcWxGbGF0TG9naWNhbEdyb3VwKGZpbHRlcilcbiAgICAgICAgPyBmaWx0ZXIudmFsdWUuZmlsdGVyKGlkID0+ICFpZHNUb1JlbW92ZS5pbmNsdWRlcyhpZCkpXG4gICAgICAgIDogZmlsdGVyLnZhbHVlLFxuICAgIH0sXG4gIF0pXG4gIHJldHVybiB7IG1hcDogcmVtb3ZlT3JwaGFucyhyb290LCBPYmplY3QuZnJvbUVudHJpZXMoY2xlYW5lZEVudHJpZXMpKSB9XG59XG5cbmV4cG9ydCB7IHJlbW92ZUZpbHRlcnNGcm9tTWFwIH1cbiJdLCJuYW1lcyI6WyJyZW1vdmVGaWx0ZXJzRnJvbU1hcCIsInJlbW92ZU9ycGhhbnMiLCJyb290IiwiZmlsdGVyTWFwIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJpc1JwcWxGbGF0TG9naWNhbEdyb3VwIiwiaXNScHFsRmxhdE1hdGNoRmlsdGVyIiwiZmxhdE1hcCIsInZhbHVlIiwiY2xlYW5lZE1hcCIsImVudHJpZXMiLCJmaWx0ZXJJZCIsIl8iLCJpbmNsdWRlcyIsImZyb21FbnRyaWVzIiwiZmlsdGVyc1RvUmVtb3ZlIiwiaGFzRXJyb3JzIiwibGVuZ3RoIiwiZXJyb3IiLCJtYXAiLCJuZXdGaWx0ZXJNYXAiLCJpZHNUb1JlbW92ZSIsImlkIiwiZm9yRWFjaCIsImlkVG9SZW1vdmUiLCJmaWx0ZXJNYXBFbnRyaWVzIiwiY2xlYW5lZEVudHJpZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBbURTQTs7O2VBQUFBOzs7MEJBbkRxRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFROUQsTUFBTUMsZ0JBQWdCLENBQUNDLE1BQWNDO0lBQ25DLE1BQU1DLFdBQVdDLE9BQU9DLE1BQU0sQ0FBQ0gsV0FDNUJJLE1BQU0sQ0FDTCxDQUFDQSxTQUNDQyxJQUFBQSxnQ0FBc0IsRUFBQ0QsV0FBV0UsSUFBQUEsK0JBQXFCLEVBQUNGLFNBRTNERyxPQUFPLENBQUNILENBQUFBLFNBQVVBLE9BQU9JLEtBQUs7SUFFakMsTUFBTUMsYUFBYVAsT0FBT1EsT0FBTyxDQUFDVixXQUFXSSxNQUFNLENBQUMsQ0FBQyxDQUFDTyxVQUFVQyxFQUFFLEdBQ2hFO1lBQUNiO2VBQVNFO1NBQVMsQ0FBQ1ksUUFBUSxDQUFDRjtJQUcvQixPQUFPVCxPQUFPWSxXQUFXLENBQUNMO0FBQzVCO0FBRUEsTUFBTVosdUJBQXVCLENBQzNCRyxXQUNBZSxpQkFDQWhCO0lBRUEsTUFBTWlCLFlBQVksQ0FBQyxDQUFDRCxnQkFBZ0JYLE1BQU0sQ0FBQ0EsQ0FBQUEsU0FBVUEsV0FBVyxNQUFNYSxNQUFNO0lBQzVFLElBQUlELFdBQVcsT0FBTztRQUFFRSxPQUFPO1FBQTRDQyxLQUFLbkI7SUFBVTtJQUUxRixNQUFRLEFBQUdvQix3REFBaUJwQjtJQUM1QixNQUFNcUIsY0FBY04sZ0JBQWdCSSxHQUFHLENBQUNmLENBQUFBLFNBQVVBLENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUWtCLEVBQUUsS0FBSTtJQUVoRUQsWUFBWUUsT0FBTyxDQUFDQyxDQUFBQTtRQUNsQixPQUFPSixZQUFZLENBQUNJLFdBQVc7SUFDakM7SUFFQSxNQUFNQyxtQkFBbUJ2QixPQUFPUSxPQUFPLENBQUNVO0lBQ3hDLE1BQU1NLGlCQUFpQkQsaUJBQWlCTixHQUFHLENBQUMsQ0FBQyxDQUFDUixVQUFVUCxPQUFPLEdBQUs7WUFDbEVPO1lBQ0Esd0NBQ0tQO2dCQUNISSxPQUFPSCxJQUFBQSxnQ0FBc0IsRUFBQ0QsVUFDMUJBLE9BQU9JLEtBQUssQ0FBQ0osTUFBTSxDQUFDa0IsQ0FBQUEsS0FBTSxDQUFDRCxZQUFZUixRQUFRLENBQUNTLE9BQ2hEbEIsT0FBT0ksS0FBSzs7U0FFbkI7SUFDRCxPQUFPO1FBQUVXLEtBQUtyQixjQUFjQyxNQUFNRyxPQUFPWSxXQUFXLENBQUNZO0lBQWlCO0FBQ3hFIn0=