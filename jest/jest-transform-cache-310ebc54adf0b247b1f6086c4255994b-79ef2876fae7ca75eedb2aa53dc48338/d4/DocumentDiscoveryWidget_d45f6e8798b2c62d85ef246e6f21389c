f4352f02a63b42dbfdd74b7d793bbf0f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentDiscoveryWidget", {
    enumerable: true,
    get: function() {
        return DocumentDiscoveryWidget;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _Detections = require("./Detections");
const _RpJsonGroup = require("./RpJsonGroup");
const DocumentDiscoveryWidget = ({ rpjsonDocument, disableCheckbox, disableWatchlist, selectedDetection, onChange, onExclude, onDetectionClick, isLoading, widgetActions, widgetCategory, onAddToWatchlist })=>{
    const [mentionsItem, setMentionsItem] = (0, _react.useState)(undefined);
    (0, _react.useEffect)(()=>{
        setMentionsItem((prev)=>prev ? widgetCategory.filters.find((item)=>item.key === prev.key) : undefined);
    }, [
        widgetCategory.filters
    ]);
    return mentionsItem && rpjsonDocument ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_Detections.Detections, {
        rpjsonDocument: rpjsonDocument,
        filter: mentionsItem,
        onClose: ()=>{
            setMentionsItem(undefined);
        },
        onChange: onChange,
        disableCheckbox: disableCheckbox,
        selectedDetection: selectedDetection,
        onDetectionClick: onDetectionClick,
        title: widgetCategory.label,
        onAddToWatchlist: onAddToWatchlist,
        onExclude: onExclude
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_RpJsonGroup.RpJsonGroup, {
        isLoading: isLoading,
        disableCheckbox: disableCheckbox,
        disableWatchlist: disableWatchlist,
        onChange: onChange,
        onClick: (item)=>setMentionsItem(item),
        widgetActions: widgetActions,
        widgetCategory: widgetCategory,
        onAddToWatchlist: onAddToWatchlist,
        onExclude: onExclude
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2Rpc2NvdmVyeS1zaWRlYmFyL2RvY3VtZW50LWRpc2NvdmVyeS9zcmMvbGliL0RvY3VtZW50RGlzY292ZXJ5V2lkZ2V0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENxc0l0ZW0gfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IEFwcGVhcmFuY2UsIFJwSnNvbkRvY3VtZW50IH0gZnJvbSBcIkBycC9yZWFjdC9ycGpzb24vdHlwZXNcIlxuaW1wb3J0IHsgQ2F0ZWdvcnlXaWRnZXRBY3Rpb25zLCBXaWRnZXRDYXRlZ29yeSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9kaXNjb3Zlcnktc2lkZWJhclwiXG5pbXBvcnQgeyBEZXRlY3Rpb25zIH0gZnJvbSBcIi4vRGV0ZWN0aW9uc1wiXG5pbXBvcnQgeyBScEpzb25Hcm91cCB9IGZyb20gXCIuL1JwSnNvbkdyb3VwXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgcnBqc29uRG9jdW1lbnQ6IFJwSnNvbkRvY3VtZW50IHwgdW5kZWZpbmVkXG4gIGlzTG9hZGluZzogYm9vbGVhblxuICBkaXNhYmxlQ2hlY2tib3g/OiBib29sZWFuXG4gIGRpc2FibGVXYXRjaGxpc3Q/OiBib29sZWFuXG4gIG9uQ2hhbmdlPzogKGl0ZW06IENxc0l0ZW0pID0+IHZvaWRcbiAgb25FeGNsdWRlPzogKGl0ZW06IENxc0l0ZW0pID0+IHZvaWRcbiAgb25EZXRlY3Rpb25DbGljazogKGRldGVjdGlvbjogQXBwZWFyYW5jZSkgPT4gdm9pZFxuICBzZWxlY3RlZERldGVjdGlvbj86IHsgcG51bTogbnVtYmVyOyBzbnVtOiBudW1iZXIgfVxuICB3aWRnZXRBY3Rpb25zOiBDYXRlZ29yeVdpZGdldEFjdGlvbnNcbiAgd2lkZ2V0Q2F0ZWdvcnk6IFdpZGdldENhdGVnb3J5XG4gIG9uQWRkVG9XYXRjaGxpc3Q/OiAod2F0Y2hsaXN0OiBXYXRjaGxpc3QpID0+IHZvaWRcbn1cblxuY29uc3QgRG9jdW1lbnREaXNjb3ZlcnlXaWRnZXQgPSAoe1xuICBycGpzb25Eb2N1bWVudCxcbiAgZGlzYWJsZUNoZWNrYm94LFxuICBkaXNhYmxlV2F0Y2hsaXN0LFxuICBzZWxlY3RlZERldGVjdGlvbixcbiAgb25DaGFuZ2UsXG4gIG9uRXhjbHVkZSxcbiAgb25EZXRlY3Rpb25DbGljayxcbiAgaXNMb2FkaW5nLFxuICB3aWRnZXRBY3Rpb25zLFxuICB3aWRnZXRDYXRlZ29yeSxcbiAgb25BZGRUb1dhdGNobGlzdCxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IFttZW50aW9uc0l0ZW0sIHNldE1lbnRpb25zSXRlbV0gPSB1c2VTdGF0ZTxDcXNJdGVtIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRNZW50aW9uc0l0ZW0ocHJldiA9PlxuICAgICAgcHJldiA/IHdpZGdldENhdGVnb3J5LmZpbHRlcnMuZmluZChpdGVtID0+IGl0ZW0ua2V5ID09PSBwcmV2LmtleSkgOiB1bmRlZmluZWQsXG4gICAgKVxuICB9LCBbd2lkZ2V0Q2F0ZWdvcnkuZmlsdGVyc10pXG5cbiAgcmV0dXJuIG1lbnRpb25zSXRlbSAmJiBycGpzb25Eb2N1bWVudCA/IChcbiAgICA8RGV0ZWN0aW9uc1xuICAgICAgcnBqc29uRG9jdW1lbnQ9e3JwanNvbkRvY3VtZW50fVxuICAgICAgZmlsdGVyPXttZW50aW9uc0l0ZW19XG4gICAgICBvbkNsb3NlPXsoKSA9PiB7XG4gICAgICAgIHNldE1lbnRpb25zSXRlbSh1bmRlZmluZWQpXG4gICAgICB9fVxuICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgZGlzYWJsZUNoZWNrYm94PXtkaXNhYmxlQ2hlY2tib3h9XG4gICAgICBzZWxlY3RlZERldGVjdGlvbj17c2VsZWN0ZWREZXRlY3Rpb259XG4gICAgICBvbkRldGVjdGlvbkNsaWNrPXtvbkRldGVjdGlvbkNsaWNrfVxuICAgICAgdGl0bGU9e3dpZGdldENhdGVnb3J5LmxhYmVsfVxuICAgICAgb25BZGRUb1dhdGNobGlzdD17b25BZGRUb1dhdGNobGlzdH1cbiAgICAgIG9uRXhjbHVkZT17b25FeGNsdWRlfVxuICAgIC8+XG4gICkgOiAoXG4gICAgPFJwSnNvbkdyb3VwXG4gICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgIGRpc2FibGVDaGVja2JveD17ZGlzYWJsZUNoZWNrYm94fVxuICAgICAgZGlzYWJsZVdhdGNobGlzdD17ZGlzYWJsZVdhdGNobGlzdH1cbiAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgIG9uQ2xpY2s9eyhpdGVtOiBDcXNJdGVtKSA9PiBzZXRNZW50aW9uc0l0ZW0oaXRlbSl9XG4gICAgICB3aWRnZXRBY3Rpb25zPXt3aWRnZXRBY3Rpb25zfVxuICAgICAgd2lkZ2V0Q2F0ZWdvcnk9e3dpZGdldENhdGVnb3J5fVxuICAgICAgb25BZGRUb1dhdGNobGlzdD17b25BZGRUb1dhdGNobGlzdH1cbiAgICAgIG9uRXhjbHVkZT17b25FeGNsdWRlfVxuICAgIC8+XG4gIClcbn1cblxuZXhwb3J0IHsgRG9jdW1lbnREaXNjb3ZlcnlXaWRnZXQgfVxuIl0sIm5hbWVzIjpbIkRvY3VtZW50RGlzY292ZXJ5V2lkZ2V0IiwicnBqc29uRG9jdW1lbnQiLCJkaXNhYmxlQ2hlY2tib3giLCJkaXNhYmxlV2F0Y2hsaXN0Iiwic2VsZWN0ZWREZXRlY3Rpb24iLCJvbkNoYW5nZSIsIm9uRXhjbHVkZSIsIm9uRGV0ZWN0aW9uQ2xpY2siLCJpc0xvYWRpbmciLCJ3aWRnZXRBY3Rpb25zIiwid2lkZ2V0Q2F0ZWdvcnkiLCJvbkFkZFRvV2F0Y2hsaXN0IiwibWVudGlvbnNJdGVtIiwic2V0TWVudGlvbnNJdGVtIiwidXNlU3RhdGUiLCJ1bmRlZmluZWQiLCJ1c2VFZmZlY3QiLCJwcmV2IiwiZmlsdGVycyIsImZpbmQiLCJpdGVtIiwia2V5IiwiRGV0ZWN0aW9ucyIsImZpbHRlciIsIm9uQ2xvc2UiLCJ0aXRsZSIsImxhYmVsIiwiUnBKc29uR3JvdXAiLCJvbkNsaWNrIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkF5RVNBOzs7ZUFBQUE7Ozs7dUJBekUyQjs0QkFLVDs2QkFDQztBQWdCNUIsTUFBTUEsMEJBQTBCLENBQUMsRUFDL0JDLGNBQWMsRUFDZEMsZUFBZSxFQUNmQyxnQkFBZ0IsRUFDaEJDLGlCQUFpQixFQUNqQkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLGdCQUFnQixFQUNoQkMsU0FBUyxFQUNUQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsZ0JBQWdCLEVBQ1Y7SUFDTixNQUFNLENBQUNDLGNBQWNDLGdCQUFnQixHQUFHQyxJQUFBQSxlQUFRLEVBQXNCQztJQUV0RUMsSUFBQUEsZ0JBQVMsRUFBQztRQUNSSCxnQkFBZ0JJLENBQUFBLE9BQ2RBLE9BQU9QLGVBQWVRLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxPQUFRQSxLQUFLQyxHQUFHLEtBQUtKLEtBQUtJLEdBQUcsSUFBSU47SUFFeEUsR0FBRztRQUFDTCxlQUFlUSxPQUFPO0tBQUM7SUFFM0IsT0FBT04sZ0JBQWdCWCwrQkFDckIscUJBQUNxQixzQkFBVTtRQUNUckIsZ0JBQWdCQTtRQUNoQnNCLFFBQVFYO1FBQ1JZLFNBQVM7WUFDUFgsZ0JBQWdCRTtRQUNsQjtRQUNBVixVQUFVQTtRQUNWSCxpQkFBaUJBO1FBQ2pCRSxtQkFBbUJBO1FBQ25CRyxrQkFBa0JBO1FBQ2xCa0IsT0FBT2YsZUFBZWdCLEtBQUs7UUFDM0JmLGtCQUFrQkE7UUFDbEJMLFdBQVdBO3VCQUdiLHFCQUFDcUIsd0JBQVc7UUFDVm5CLFdBQVdBO1FBQ1hOLGlCQUFpQkE7UUFDakJDLGtCQUFrQkE7UUFDbEJFLFVBQVVBO1FBQ1Z1QixTQUFTLENBQUNSLE9BQWtCUCxnQkFBZ0JPO1FBQzVDWCxlQUFlQTtRQUNmQyxnQkFBZ0JBO1FBQ2hCQyxrQkFBa0JBO1FBQ2xCTCxXQUFXQTs7QUFHakIifQ==