81275aa8962de48adb5a0d5c2d6d9e46
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useQueryActions", {
    enumerable: true,
    get: function() {
        return useQueryActions;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _colors = require("@mui/material/colors");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _basecomponents = require("@rp/react/web/common/base-components");
const _icons = require("@rp/react/web/icons");
const _icons1 = require("@rp/react/web/mui/icons");
const _router = require("@rp/react/web/router");
const _reactquery = require("@tanstack/react-query");
const _FollowContext = require("../FollowContext");
const _ModalContext = require("../ModalContext");
const _Slack = require("../Slack");
const _Snackbar = require("../Snackbar");
const _useCopySearch = require("../useCopySearch");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const useQueryActions = (savedQuery)=>{
    const loc = (0, _reactrouterdom.useLocation)();
    const isFeedView = !!(0, _reactrouterdom.matchPath)(_router.FEED_ID_ROUTE, loc.pathname) || false;
    const isSearchesPage = !!(0, _reactrouterdom.matchPath)(_router.SEARCHES_ROUTE, loc.pathname) || false;
    const { onFollow, isFollowing, isLoading, isPending } = (0, _FollowContext.useFollow)(savedQuery.id);
    const navigate = (0, _reactrouterdom.useNavigate)();
    // Sharing
    const { saveSearchModal: { handleOpen: handleOpenSave }, deleteSearchModal: { handleOpen: handleOpenDelete }, shareNameSearchModal: { handleOpen: openNameModal }, shareInfoModal: { handleOpen: openInfoModal } } = (0, _ModalContext.useModal)();
    const { user } = (0, _clerkreact.useUser)();
    const { enqueueError } = (0, _Snackbar.useSnackbar)();
    const { mutateAsync } = (0, _Slack.useUpdateSchedule)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const { id, saveStatus, shared, name, ownerName, ownerUserId } = savedQuery || {};
    const isShared = (shared === null || shared === void 0 ? void 0 : shared.company.permission) !== "undefined";
    const isOwner = ownerUserId ? ownerUserId === (user === null || user === void 0 ? void 0 : user.id) : (user === null || user === void 0 ? void 0 : user.id) === ownerUserId;
    const { copy, copyInANewTab } = (0, _useCopySearch.useCopySearchById)(id);
    const handleEdit = async ()=>{
        handleOpenSave(_object_spread_props(_object_spread({}, savedQuery), {
            isLoading: true
        }));
        try {
            const search = await (0, _userdataqueries.getSavedQuery)(queryClient, id);
            handleOpenSave(search);
        } catch (error) {
            enqueueError("Oops! There was an error editing this search. Please try again...");
        }
    };
    const handleShareSearch = ()=>{
        const shareData = {
            saveStatus,
            shared,
            name,
            id,
            ownerName,
            ownerUserId,
            dataType: "search"
        };
        if (saveStatus === "unsaved") {
            openNameModal(shareData, ()=>openInfoModal(shareData));
            return;
        }
        openInfoModal(shareData);
    };
    const removeNotifications = ()=>{
        mutateAsync({
            destination: "slack",
            queryId: savedQuery.id,
            schedules: [],
            queryName: savedQuery.name || "",
            deleteAll: true
        });
    };
    // Feed view
    const handleFeedView = ()=>{
        navigate(_router.FEED_ID_ROUTE.replace(":id", id));
    };
    // Delete modal
    const handleDelete = ()=>{
        var _savedQuery_name;
        handleOpenDelete({
            id,
            name: (_savedQuery_name = savedQuery.name) !== null && _savedQuery_name !== void 0 ? _savedQuery_name : "",
            onSuccess: async ()=>{
                if (isSearchesPage) return;
                navigate("/", {
                    replace: true
                });
            }
        });
    };
    const queryActions = {
        follow: {
            id: "follow",
            label: isFollowing ? "Unfollow" : "Follow",
            icon: isFollowing ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Block, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Add, {}),
            onClick: ()=>onFollow(savedQuery),
            disabledAction: ()=>isLoading || isPending
        },
        feed: {
            id: "feed",
            label: isFeedView ? "Search View" : "Feed View",
            icon: isFeedView ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.ManageSearch, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.FeedViewIcon, {}),
            onClick: ()=>{
                isFeedView ? navigate(_router.SEARCH_ID_ROUTE.replace(":id", id)) : handleFeedView();
            }
        },
        searchView: {
            id: "searchView",
            label: "Search View",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.ManageSearch, {}),
            onClick: ()=>{
                navigate(_router.SEARCH_ID_ROUTE.replace(":id", id));
            }
        },
        share: {
            id: "share",
            label: "Share",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ShareIcon, {
                shared: isShared,
                size: 24
            }),
            onClick: handleShareSearch
        },
        removeNotifications: {
            id: "removeNotifications",
            label: "Remove Notifications",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.NotificationsOff, {
                style: {
                    color: _colors.red["500"]
                }
            }),
            onClick: removeNotifications,
            disabledAction: ()=>!isOwner,
            color: _colors.red["500"]
        },
        // llm: {
        //   id: "llm",
        //   label: "Custom Instructions",
        //   icon: <AIBot />,
        //   onClick: openCustomInstructions ?? (() => {}),
        // },
        rename: {
            id: "rename",
            label: "Rename",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Edit, {}),
            onClick: handleEdit,
            disabledAction: ()=>!isOwner
        },
        save: {
            id: "save",
            label: "Save Search",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Save, {}),
            onClick: handleEdit,
            disabledAction: ()=>!isOwner
        },
        copy: {
            id: "copy",
            label: "Make a copy",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.ContentCopy, {}),
            onClick: copy,
            allowedAction: ()=>saveStatus !== "saved"
        },
        copyInANewTab: {
            id: "copyInANewTab",
            label: "Make a copy",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.ContentCopy, {}),
            onClick: copyInANewTab,
            allowedAction: ()=>saveStatus !== "saved"
        },
        remove: {
            id: "remove",
            label: "Delete",
            icon: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons1.Delete, {}),
            onClick: handleDelete,
            disabledAction: ()=>!isOwner
        }
    };
    return queryActions;
};

//# sourceMappingURL=data:application/json;base64,