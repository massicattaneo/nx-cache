744c38da1358d42073adc1a984d9b142
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return effectVirtualTransitionEnd;
    }
});
const _utils = require("./utils.js");
function effectVirtualTransitionEnd({ swiper, duration, transformElements, allSlides }) {
    const { activeIndex } = swiper;
    const getSlide = (el)=>{
        if (!el.parentElement) {
            // assume shadow root
            const slide = swiper.slides.filter((slideEl)=>slideEl.shadowEl && slideEl.shadowEl === el.parentNode)[0];
            return slide;
        }
        return el.parentElement;
    };
    if (swiper.params.virtualTranslate && duration !== 0) {
        let eventTriggered = false;
        let transitionEndTarget;
        if (allSlides) {
            transitionEndTarget = transformElements;
        } else {
            transitionEndTarget = transformElements.filter((transformEl)=>{
                const el = transformEl.classList.contains('swiper-slide-transform') ? getSlide(transformEl) : transformEl;
                return swiper.getSlideIndex(el) === activeIndex;
            });
        }
        transitionEndTarget.forEach((el)=>{
            (0, _utils.elementTransitionEnd)(el, ()=>{
                if (eventTriggered) return;
                if (!swiper || swiper.destroyed) return;
                eventTriggered = true;
                swiper.animating = false;
                const evt = new window.CustomEvent('transitionend', {
                    bubbles: true,
                    cancelable: true
                });
                swiper.wrapperEl.dispatchEvent(evt);
            });
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVsZW1lbnRUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gIHN3aXBlcixcbiAgZHVyYXRpb24sXG4gIHRyYW5zZm9ybUVsZW1lbnRzLFxuICBhbGxTbGlkZXNcbn0pIHtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGdldFNsaWRlID0gZWwgPT4ge1xuICAgIGlmICghZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5zaGFkb3dFbCAmJiBzbGlkZUVsLnNoYWRvd0VsID09PSBlbC5wYXJlbnROb2RlKVswXTtcbiAgICAgIHJldHVybiBzbGlkZTtcbiAgICB9XG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XG4gIH07XG4gIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICBsZXQgdHJhbnNpdGlvbkVuZFRhcmdldDtcbiAgICBpZiAoYWxsU2xpZGVzKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbGVtZW50cy5maWx0ZXIodHJhbnNmb3JtRWwgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHRyYW5zZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpID8gZ2V0U2xpZGUodHJhbnNmb3JtRWwpIDogdHJhbnNmb3JtRWw7XG4gICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbCkgPT09IGFjdGl2ZUluZGV4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRyYW5zaXRpb25FbmRUYXJnZXQuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0iXSwibmFtZXMiOlsiZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQiLCJzd2lwZXIiLCJkdXJhdGlvbiIsInRyYW5zZm9ybUVsZW1lbnRzIiwiYWxsU2xpZGVzIiwiYWN0aXZlSW5kZXgiLCJnZXRTbGlkZSIsImVsIiwicGFyZW50RWxlbWVudCIsInNsaWRlIiwic2xpZGVzIiwiZmlsdGVyIiwic2xpZGVFbCIsInNoYWRvd0VsIiwicGFyZW50Tm9kZSIsInBhcmFtcyIsInZpcnR1YWxUcmFuc2xhdGUiLCJldmVudFRyaWdnZXJlZCIsInRyYW5zaXRpb25FbmRUYXJnZXQiLCJ0cmFuc2Zvcm1FbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZ2V0U2xpZGVJbmRleCIsImZvckVhY2giLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsImRlc3Ryb3llZCIsImFuaW1hdGluZyIsImV2dCIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ3cmFwcGVyRWwiLCJkaXNwYXRjaEV2ZW50Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBQ0E7OztlQUF3QkE7Ozt1QkFEYTtBQUN0QixTQUFTQSwyQkFBMkIsRUFDakRDLE1BQU0sRUFDTkMsUUFBUSxFQUNSQyxpQkFBaUIsRUFDakJDLFNBQVMsRUFDVjtJQUNDLE1BQU0sRUFDSkMsV0FBVyxFQUNaLEdBQUdKO0lBQ0osTUFBTUssV0FBV0MsQ0FBQUE7UUFDZixJQUFJLENBQUNBLEdBQUdDLGFBQWEsRUFBRTtZQUNyQixxQkFBcUI7WUFDckIsTUFBTUMsUUFBUVIsT0FBT1MsTUFBTSxDQUFDQyxNQUFNLENBQUNDLENBQUFBLFVBQVdBLFFBQVFDLFFBQVEsSUFBSUQsUUFBUUMsUUFBUSxLQUFLTixHQUFHTyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3hHLE9BQU9MO1FBQ1Q7UUFDQSxPQUFPRixHQUFHQyxhQUFhO0lBQ3pCO0lBQ0EsSUFBSVAsT0FBT2MsTUFBTSxDQUFDQyxnQkFBZ0IsSUFBSWQsYUFBYSxHQUFHO1FBQ3BELElBQUllLGlCQUFpQjtRQUNyQixJQUFJQztRQUNKLElBQUlkLFdBQVc7WUFDYmMsc0JBQXNCZjtRQUN4QixPQUFPO1lBQ0xlLHNCQUFzQmYsa0JBQWtCUSxNQUFNLENBQUNRLENBQUFBO2dCQUM3QyxNQUFNWixLQUFLWSxZQUFZQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyw0QkFBNEJmLFNBQVNhLGVBQWVBO2dCQUM5RixPQUFPbEIsT0FBT3FCLGFBQWEsQ0FBQ2YsUUFBUUY7WUFDdEM7UUFDRjtRQUNBYSxvQkFBb0JLLE9BQU8sQ0FBQ2hCLENBQUFBO1lBQzFCaUIsSUFBQUEsMkJBQW9CLEVBQUNqQixJQUFJO2dCQUN2QixJQUFJVSxnQkFBZ0I7Z0JBQ3BCLElBQUksQ0FBQ2hCLFVBQVVBLE9BQU93QixTQUFTLEVBQUU7Z0JBQ2pDUixpQkFBaUI7Z0JBQ2pCaEIsT0FBT3lCLFNBQVMsR0FBRztnQkFDbkIsTUFBTUMsTUFBTSxJQUFJQyxPQUFPQyxXQUFXLENBQUMsaUJBQWlCO29CQUNsREMsU0FBUztvQkFDVEMsWUFBWTtnQkFDZDtnQkFDQTlCLE9BQU8rQixTQUFTLENBQUNDLGFBQWEsQ0FBQ047WUFDakM7UUFDRjtJQUNGO0FBQ0YifQ==