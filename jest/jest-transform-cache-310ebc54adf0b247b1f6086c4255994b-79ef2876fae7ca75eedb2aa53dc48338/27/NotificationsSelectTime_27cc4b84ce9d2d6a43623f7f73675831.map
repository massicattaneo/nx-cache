{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/composite-components/src/Notifications/NotificationsSelectTime.tsx"],"sourcesContent":["import { NotificationSchedule } from \"@rp/common/api-types\"\nimport { awsCron } from \"@rp/common/utils\"\nimport { TextField, Typography } from \"@rp/react/web/mui/core\"\n\ntype NotificationsSelectTimeProps = {\n  disabled?: boolean\n  schedule: NotificationSchedule | null\n  setSchedule: (schedule: NotificationSchedule) => void\n  label: string\n}\n\nconst NotificationsSelectTime = ({\n  disabled,\n  schedule,\n  setSchedule,\n  label,\n}: NotificationsSelectTimeProps) => {\n  const exp = awsCron.expressionToTime(schedule?.schedulerExpression)\n  const value = `${exp.hour.toString().padStart(2, \"0\")}:${exp.minute.toString().padStart(2, \"0\")}`\n  return (\n    <>\n      <Typography sx={{ mb: 1 }}>{label}</Typography>\n      <TextField\n        value={value}\n        disabled={disabled}\n        sx={{\n          \"& .MuiInputBase-input\": {\n            color: \"rgba(255, 255, 255, 0.7)\",\n          },\n        }}\n        onChange={ev => {\n          if (!schedule) return\n\n          if (exp.recurrence === \"weekly\") {\n            setSchedule({\n              ...schedule,\n              schedulerExpression: awsCron.timeToExpression({\n                hour: parseInt(ev.target.value.split(\":\")[0]),\n                minute: parseInt(ev.target.value.split(\":\")[1]),\n                recurrence: exp.recurrence,\n                daysOfWeek: exp.daysOfWeek,\n              }),\n            })\n          } else {\n            setSchedule({\n              ...schedule,\n              schedulerExpression: awsCron.timeToExpression({\n                hour: parseInt(ev.target.value.split(\":\")[0]),\n                minute: parseInt(ev.target.value.split(\":\")[1]),\n                recurrence: exp.recurrence,\n              }),\n            })\n          }\n        }}\n        aria-label=\"Time\"\n        type=\"time\"\n        fullWidth\n        size=\"small\"\n      />\n    </>\n  )\n}\n\nexport { NotificationsSelectTime }\n"],"names":["NotificationsSelectTime","disabled","schedule","setSchedule","label","exp","awsCron","expressionToTime","schedulerExpression","value","hour","toString","padStart","minute","Typography","sx","mb","TextField","color","onChange","ev","recurrence","timeToExpression","parseInt","target","split","daysOfWeek","aria-label","type","fullWidth","size"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA+DSA;;;eAAAA;;;;uBA9De;sBACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAStC,MAAMA,0BAA0B,CAAC,EAC/BC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,KAAK,EACwB;IAC7B,MAAMC,MAAMC,cAAO,CAACC,gBAAgB,CAACL,qBAAAA,+BAAAA,SAAUM,mBAAmB;IAClE,MAAMC,QAAQ,CAAC,EAAEJ,IAAIK,IAAI,CAACC,QAAQ,GAAGC,QAAQ,CAAC,GAAG,KAAK,CAAC,EAAEP,IAAIQ,MAAM,CAACF,QAAQ,GAAGC,QAAQ,CAAC,GAAG,KAAK,CAAC;IACjG,qBACE;;0BACE,qBAACE,gBAAU;gBAACC,IAAI;oBAAEC,IAAI;gBAAE;0BAAIZ;;0BAC5B,qBAACa,eAAS;gBACRR,OAAOA;gBACPR,UAAUA;gBACVc,IAAI;oBACF,yBAAyB;wBACvBG,OAAO;oBACT;gBACF;gBACAC,UAAUC,CAAAA;oBACR,IAAI,CAAClB,UAAU;oBAEf,IAAIG,IAAIgB,UAAU,KAAK,UAAU;wBAC/BlB,YAAY,wCACPD;4BACHM,qBAAqBF,cAAO,CAACgB,gBAAgB,CAAC;gCAC5CZ,MAAMa,SAASH,GAAGI,MAAM,CAACf,KAAK,CAACgB,KAAK,CAAC,IAAI,CAAC,EAAE;gCAC5CZ,QAAQU,SAASH,GAAGI,MAAM,CAACf,KAAK,CAACgB,KAAK,CAAC,IAAI,CAAC,EAAE;gCAC9CJ,YAAYhB,IAAIgB,UAAU;gCAC1BK,YAAYrB,IAAIqB,UAAU;4BAC5B;;oBAEJ,OAAO;wBACLvB,YAAY,wCACPD;4BACHM,qBAAqBF,cAAO,CAACgB,gBAAgB,CAAC;gCAC5CZ,MAAMa,SAASH,GAAGI,MAAM,CAACf,KAAK,CAACgB,KAAK,CAAC,IAAI,CAAC,EAAE;gCAC5CZ,QAAQU,SAASH,GAAGI,MAAM,CAACf,KAAK,CAACgB,KAAK,CAAC,IAAI,CAAC,EAAE;gCAC9CJ,YAAYhB,IAAIgB,UAAU;4BAC5B;;oBAEJ;gBACF;gBACAM,cAAW;gBACXC,MAAK;gBACLC,SAAS;gBACTC,MAAK;;;;AAIb"}