51abee9592ea49a672b4686fcbc3a3dd
"use strict";
jest.mock("@rp/react/web/common/providers", ()=>_object_spread_props(_object_spread({}, jest.requireActual("@rp/react/web/common/providers")), {
        useSnackbar: jest.fn()
    }));
jest.mock("uuid", ()=>({
        v4: ()=>mockGeneratedUUID
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _providers = require("@rp/react/web/common/providers");
const _tools = require("@rp/react/web/common/tools");
const _react = require("@testing-library/react");
const _SignUpPage = require("./SignUpPage");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const useSnackbarMock = _providers.useSnackbar;
const create = jest.fn();
const update = jest.fn();
const prepareEmailAddressVerification = jest.fn();
const attemptEmailAddressVerification = jest.fn();
const mockUseSignUp = _clerkreact.useSignUp;
const mockGeneratedUUID = "mock-generated-uuid";
const email = "test@ravenpack.com";
const password = "aaaSSSdddFFF1!";
const signUp = {
    create,
    update,
    prepareEmailAddressVerification,
    attemptEmailAddressVerification
};
const setActive = jest.fn();
describe("Sign Up", ()=>{
    useSnackbarMock.mockReturnValue({
        enqueueSuccess: jest.fn(),
        enqueueError: jest.fn()
    });
    it("should render page", ()=>{
        mockUseSignUp.mockReturnValue({
            isLoaded: true,
            signUp,
            setActive
        });
        const { getByRole } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        expect(getByRole("button", {
            name: "Continue"
        })).toBeInTheDocument();
    });
    it("should handle success", async ()=>{
        mockUseSignUp.mockReturnValue({
            isLoaded: true,
            signUp,
            setActive
        });
        const { getByRole, getByLabelText, rerender } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        const emailInput = getByLabelText(/email/i);
        expect(emailInput).toBeInTheDocument();
        expect(emailInput).toHaveValue("");
        const submitButton = getByRole("button", {
            name: "Continue"
        });
        expect(submitButton).toBeInTheDocument();
        _react.fireEvent.change(emailInput, {
            target: {
                value: email
            }
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{});
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        const nameInput = getByLabelText(/first name/i);
        expect(nameInput).toBeInTheDocument();
        expect(nameInput).toHaveValue("");
        const lastNameInput = getByLabelText(/last name/i);
        expect(lastNameInput).toBeInTheDocument();
        expect(lastNameInput).toHaveValue("");
        const passwordInput = getByLabelText(/password/i);
        expect(passwordInput).toBeInTheDocument();
        expect(passwordInput).toHaveValue("");
        const termsCheckbox = getByLabelText(/i agree/i);
        expect(termsCheckbox).toBeInTheDocument();
        const continueButton = getByRole("button", {
            name: /create account/i
        });
        expect(continueButton).toBeInTheDocument();
        _react.fireEvent.change(nameInput, {
            target: {
                value: "John"
            }
        });
        _react.fireEvent.change(lastNameInput, {
            target: {
                value: "Doe"
            }
        });
        _react.fireEvent.change(passwordInput, {
            target: {
                value: password
            }
        });
        _react.fireEvent.click(termsCheckbox);
        _react.fireEvent.click(continueButton);
        await (0, _react.waitFor)(()=>{});
        expect(prepareEmailAddressVerification).toBeCalledWith({
            strategy: "email_code"
        });
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        const verify = getByRole("button", {
            name: /verify/i
        });
        expect(verify).toBeInTheDocument();
        const codeInput = getByLabelText(/verification code/i);
        expect(codeInput).toBeInTheDocument();
        expect(codeInput).toHaveValue("");
        attemptEmailAddressVerification.mockReturnValue({
            status: "complete",
            createdSessionId: "123"
        });
        _react.fireEvent.change(codeInput, {
            target: {
                value: "123456"
            }
        });
        _react.fireEvent.click(verify);
        await (0, _react.waitFor)(()=>{
            expect(attemptEmailAddressVerification).toBeCalledWith({
                code: "123456"
            });
            expect(setActive).toBeCalledWith({
                session: "123"
            });
        });
    });
    it("should redirect to confirmation page after entering details", async ()=>{
        mockUseSignUp.mockReturnValue({
            isLoaded: true,
            signUp,
            setActive
        });
        const { getByRole, getByLabelText, rerender } = (0, _tools.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        const emailInput = getByLabelText(/email/i);
        expect(emailInput).toBeInTheDocument();
        expect(emailInput).toHaveValue("");
        const submitButton = getByRole("button", {
            name: "Continue"
        });
        expect(submitButton).toBeInTheDocument();
        _react.fireEvent.change(emailInput, {
            target: {
                value: email
            }
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{});
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {}));
        const nameInput = getByLabelText(/first name/i);
        const lastNameInput = getByLabelText(/last name/i);
        const passwordInput = getByLabelText(/password/i);
        _react.fireEvent.change(nameInput, {
            target: {
                value: "John"
            }
        });
        _react.fireEvent.change(lastNameInput, {
            target: {
                value: "Doe"
            }
        });
        _react.fireEvent.change(passwordInput, {
            target: {
                value: password
            }
        });
        _react.fireEvent.click(getByRole("button", {
            name: /Create Account/i
        }));
        await (0, _react.waitFor)(()=>{});
    });
    it("should redirect to invitation page when __clerk_ticket is present in URL", async ()=>{
        mockUseSignUp.mockReturnValue({
            isLoaded: true,
            signUp,
            setActive
        });
        const ui = /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactrouterdom.MemoryRouter, {
            initialEntries: [
                "/signup?__clerk_ticket=test-ticket&otherParam=value"
            ],
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_reactrouterdom.Routes, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactrouterdom.Route, {
                        path: "/signup",
                        element: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SignUpPage.SignUpPage, {})
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactrouterdom.Route, {
                        path: "/invitation",
                        element: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "invitation-page",
                            children: "Invitation Page"
                        })
                    })
                ]
            })
        });
        (0, _tools.renderWithProviders)(ui, {}, false);
        const invitationPage = _react.screen.getByTestId("invitation-page");
        expect(invitationPage).toBeInTheDocument();
        expect(invitationPage.textContent).toBe("Invitation Page");
    });
});

//# sourceMappingURL=data:application/json;base64,