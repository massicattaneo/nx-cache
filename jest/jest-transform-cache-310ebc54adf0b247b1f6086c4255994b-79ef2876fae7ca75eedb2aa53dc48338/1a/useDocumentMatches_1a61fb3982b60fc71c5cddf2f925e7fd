ec7fda0a07497e697ba2710a97652f3d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    matchesPreviewKey: function() {
        return matchesPreviewKey;
    },
    useDocumentChunks: function() {
        return useDocumentChunks;
    },
    useDocumentMatches: function() {
        return useDocumentMatches;
    }
});
const _react = require("react");
const _apitypes = require("@rp/common/api-types");
const _settings = require("@rp/common/settings");
const _axiosclient = require("@rp/react/axios-client");
const _cqsutils = require("@rp/react/web/cqs-utils");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const matchesPreviewKey = (key, search, documentId)=>[
        _settings.QUERY_KEY_FEATURE_FLAG,
        key,
        search,
        documentId
    ];
function buildDocumentQuery(search, documentId) {
    var _search_expression;
    return _object_spread_props(_object_spread({}, search), {
        expression: {
            type: "and",
            value: [
                (_search_expression = search.expression) !== null && _search_expression !== void 0 ? _search_expression : _cqsutils.DEFAULT_EXPRESSION,
                {
                    type: "document",
                    operation: "in",
                    value: [
                        documentId
                    ]
                }
            ]
        },
        pagination: {
            limit: _settings.DEFAULT_QUERY_LIMIT
        },
        hybrid: true
    });
}
const fetchDocumentMatches = async ({ queryKey })=>{
    const [, , search, documentId] = queryKey;
    if (search === undefined || documentId === undefined) return;
    const query = buildDocumentQuery(search, documentId);
    const { data } = await _axiosclient.axiosClient.post("/cqs/query", query);
    return data;
};
const fetchDocumentChunks = async ({ queryKey })=>{
    const [, , search, documentId] = queryKey;
    if (search === undefined || documentId === undefined) return;
    const query = buildDocumentQuery(search, documentId);
    const { data } = await _axiosclient.axiosClient.post("/cqs/query-chunks", query);
    return data;
};
const useDocumentMatches = (query, documentId, enabled = true)=>{
    var _result_data_stories_, _result_data, _result_data1;
    var _query_expression;
    const expression = (_query_expression = query === null || query === void 0 ? void 0 : query.expression) !== null && _query_expression !== void 0 ? _query_expression : _cqsutils.DEFAULT_EXPRESSION;
    const result = (0, _reactquery.useQuery)({
        queryKey: matchesPreviewKey("rpjson-document-matches", _object_spread_props(_object_spread({}, query), {
            expression,
            scope: _apitypes.CqsQueryScopeEnum.All
        }), documentId),
        queryFn: fetchDocumentMatches,
        placeholderData: _reactquery.keepPreviousData,
        staleTime: Infinity,
        refetchOnWindowFocus: false,
        enabled: !!documentId && !!query && enabled
    });
    const mostRelevantSentence = (_result_data = result.data) === null || _result_data === void 0 ? void 0 : (_result_data_stories_ = _result_data.stories[0]) === null || _result_data_stories_ === void 0 ? void 0 : _result_data_stories_.sentences[0];
    // Sort sentences by pnum and snum
    const sortedSentences = (0, _react.useMemo)(()=>{
        var _result_data;
        return ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.stories[0]) ? [
            ...result.data.stories[0].sentences
        ] : [];
    }, [
        (_result_data1 = result.data) === null || _result_data1 === void 0 ? void 0 : _result_data1.stories
    ]);
    sortedSentences.sort((a, b)=>{
        if (a.pnum < b.pnum) {
            return -1;
        }
        if (a.pnum > b.pnum) {
            return 1;
        }
        if (a.snum < b.snum) {
            return -1;
        }
        if (a.snum > b.snum) {
            return 1;
        }
        return 0;
    });
    const initialIndex = mostRelevantSentence ? sortedSentences.findIndex((sentence)=>sentence.pnum === mostRelevantSentence.pnum && sentence.snum === mostRelevantSentence.snum) : 0;
    return {
        count: sortedSentences.length,
        sentences: sortedSentences,
        initialIndex,
        isLoading: result.isLoading,
        isFetching: result.isFetching
    };
};
const useDocumentChunks = (query, documentId, enabled = true)=>{
    var _result_data;
    var _query_expression;
    const expression = (_query_expression = query === null || query === void 0 ? void 0 : query.expression) !== null && _query_expression !== void 0 ? _query_expression : _cqsutils.DEFAULT_EXPRESSION;
    const result = (0, _reactquery.useQuery)({
        queryKey: matchesPreviewKey("rpjson-document-chunks", _object_spread_props(_object_spread({}, query), {
            expression,
            scope: _apitypes.CqsQueryScopeEnum.All
        }), documentId),
        queryFn: fetchDocumentChunks,
        placeholderData: _reactquery.keepPreviousData,
        staleTime: Infinity,
        refetchOnWindowFocus: false,
        enabled: !!documentId && !!query && enabled
    });
    // Sort sentences by pnum and snum
    const sortedChunks = (0, _react.useMemo)(()=>{
        var _result_data;
        return ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.stories[0]) ? [
            ...result.data.stories[0].chunks
        ] : [];
    }, [
        (_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data.stories
    ]);
    return {
        count: sortedChunks.length,
        chunks: sortedChunks,
        initialIndex: 0,
        isLoading: result.isLoading,
        isFetching: result.isFetching
    };
};

//# sourceMappingURL=data:application/json;base64,