871a7b4860f1810ac57dbe92d445b268
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    initTagManager: function() {
        return initTagManager;
    },
    tagManagerEvents: function() {
        return tagManagerEvents;
    }
});
const _reactgtmmodule = /*#__PURE__*/ _interop_require_default(require("react-gtm-module"));
const _adapters = require("@rp/adapters");
const _constants = require("./constants");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const initTagManager = (config)=>{
    if (config.enabled) {
        const tagManagerArgs = {
            gtmId: config.gtmId
        };
        _reactgtmmodule.default.initialize(tagManagerArgs);
    }
};
const triggerEvent = (eventId, data = {})=>{
    _reactgtmmodule.default.dataLayer({
        dataLayer: _object_spread({
            event: eventId
        }, data)
    });
};
const login = (user)=>{
    triggerEvent(_constants.EVENT_TYPES.login, user);
    userAuthenticated(user);
    _adapters.adapters.customerIo.identify(user);
};
const logout = ()=>{
    triggerEvent(_constants.EVENT_TYPES.logout);
};
const userAuthenticated = (user)=>{
    triggerEvent(_constants.EVENT_TYPES.userAuthenticated, user);
};
// Story Card
const storyCard = (storyCardData)=>{
    triggerEvent(_constants.EVENT_TYPES.storyCard, storyCardData);
};
// Document Reader
const documentOutbound = (outboundData)=>{
    triggerEvent(_constants.EVENT_TYPES.outbound, outboundData);
};
const documentReading = (readingData)=>{
    triggerEvent(_constants.EVENT_TYPES.documentReading, readingData);
};
const documentClosed = (closedData)=>{
    triggerEvent(_constants.EVENT_TYPES.documentClosed, closedData);
};
// Intercom
const error = (sentryErrorId)=>{
    triggerEvent(_constants.EVENT_TYPES.error, {
        sentryErrorId
    });
};
const contactSupport = ()=>{
    triggerEvent(_constants.EVENT_TYPES.contactSupport);
};
// Device
const isMobile = ()=>{
    triggerEvent(_constants.EVENT_TYPES.isMobile);
};
const isDesktop = ()=>{
    triggerEvent(_constants.EVENT_TYPES.isDesktop);
};
// Query Interactions
const queryRefinement = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.queryRefinement, data);
};
const queryInit = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.queryInit, data);
};
const queryRevisit = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.queryRevisit, data);
};
const querySaved = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.querySaved, data);
};
// Panel Grouping
const dpGrouping = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.dpGrouping, data);
};
// Feeds
const feedView = (data)=>{
    triggerEvent(_constants.EVENT_TYPES.feedView, data);
};
const tagManagerEvents = {
    login,
    logout,
    error,
    contactSupport,
    isMobile,
    isDesktop,
    storyCard,
    documentOutbound,
    documentReading,
    documentClosed,
    queryRefinement,
    queryInit,
    queryRevisit,
    querySaved,
    dpGrouping,
    feedView
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi92ZW5kb3JzL3V0aWxzL3NyYy91dGlscy90YWctbWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGFnTWFuYWdlciBmcm9tIFwicmVhY3QtZ3RtLW1vZHVsZVwiXG5pbXBvcnQgeyBhZGFwdGVycyB9IGZyb20gXCJAcnAvYWRhcHRlcnNcIlxuaW1wb3J0IHsgRVZFTlRfVFlQRVMgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuaW1wb3J0IHtcbiAgRG9jdW1lbnRDbG9zZWREYXRhLFxuICBEb2N1bWVudE91dGJvdW5kRGF0YSxcbiAgRG9jdW1lbnRSZWFkaW5nRGF0YSxcbiAgRHBHcm91cGluZ0RhdGEsXG4gIEV2ZW50RGF0YSxcbiAgRXZlbnRUeXBlcyxcbiAgRmVlZFZpZXdEYXRhLFxuICBRdWVyeUluaXREYXRhLFxuICBRdWVyeVJlZmluZW1lbnREYXRhLFxuICBRdWVyeVJldmlzaXREYXRhLFxuICBRdWVyeVNhdmVkRGF0YSxcbiAgU3RvcnlDYXJkRGF0YSxcbiAgVGFnTWFuYWdlckNvbmZpZyxcbn0gZnJvbSBcIi4vdHlwZXNcIlxuXG5leHBvcnQgY29uc3QgaW5pdFRhZ01hbmFnZXIgPSAoY29uZmlnOiBUYWdNYW5hZ2VyQ29uZmlnKSA9PiB7XG4gIGlmIChjb25maWcuZW5hYmxlZCkge1xuICAgIGNvbnN0IHRhZ01hbmFnZXJBcmdzID0ge1xuICAgICAgZ3RtSWQ6IGNvbmZpZy5ndG1JZCxcbiAgICB9XG5cbiAgICBUYWdNYW5hZ2VyLmluaXRpYWxpemUodGFnTWFuYWdlckFyZ3MpXG4gIH1cbn1cblxuY29uc3QgdHJpZ2dlckV2ZW50ID0gKGV2ZW50SWQ6IEV2ZW50VHlwZXMsIGRhdGE6IEV2ZW50RGF0YSA9IHt9KSA9PiB7XG4gIFRhZ01hbmFnZXIuZGF0YUxheWVyKHtcbiAgICBkYXRhTGF5ZXI6IHtcbiAgICAgIGV2ZW50OiBldmVudElkLFxuICAgICAgLi4uZGF0YSxcbiAgICB9LFxuICB9KVxufVxuXG4vLyBBdXRoZW50aWNhdGlvblxudHlwZSBMb2dpblVzZXIgPSBQYXJhbWV0ZXJzPHR5cGVvZiBhZGFwdGVycy5jdXN0b21lcklvLmlkZW50aWZ5PlswXVxuY29uc3QgbG9naW4gPSAodXNlcjogTG9naW5Vc2VyKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5sb2dpbiwgdXNlcilcbiAgdXNlckF1dGhlbnRpY2F0ZWQodXNlcilcbiAgYWRhcHRlcnMuY3VzdG9tZXJJby5pZGVudGlmeSh1c2VyKVxufVxuXG5jb25zdCBsb2dvdXQgPSAoKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5sb2dvdXQpXG59XG5cbmNvbnN0IHVzZXJBdXRoZW50aWNhdGVkID0gKHVzZXI6IExvZ2luVXNlcikgPT4ge1xuICB0cmlnZ2VyRXZlbnQoRVZFTlRfVFlQRVMudXNlckF1dGhlbnRpY2F0ZWQsIHVzZXIpXG59XG5cbi8vIFN0b3J5IENhcmRcbmNvbnN0IHN0b3J5Q2FyZCA9IChzdG9yeUNhcmREYXRhOiBTdG9yeUNhcmREYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5zdG9yeUNhcmQsIHN0b3J5Q2FyZERhdGEpXG59XG5cbi8vIERvY3VtZW50IFJlYWRlclxuY29uc3QgZG9jdW1lbnRPdXRib3VuZCA9IChvdXRib3VuZERhdGE6IERvY3VtZW50T3V0Ym91bmREYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5vdXRib3VuZCwgb3V0Ym91bmREYXRhKVxufVxuXG5jb25zdCBkb2N1bWVudFJlYWRpbmcgPSAocmVhZGluZ0RhdGE6IERvY3VtZW50UmVhZGluZ0RhdGEpID0+IHtcbiAgdHJpZ2dlckV2ZW50KEVWRU5UX1RZUEVTLmRvY3VtZW50UmVhZGluZywgcmVhZGluZ0RhdGEpXG59XG5cbmNvbnN0IGRvY3VtZW50Q2xvc2VkID0gKGNsb3NlZERhdGE6IERvY3VtZW50Q2xvc2VkRGF0YSkgPT4ge1xuICB0cmlnZ2VyRXZlbnQoRVZFTlRfVFlQRVMuZG9jdW1lbnRDbG9zZWQsIGNsb3NlZERhdGEpXG59XG5cbi8vIEludGVyY29tXG5jb25zdCBlcnJvciA9IChzZW50cnlFcnJvcklkOiBzdHJpbmcpID0+IHtcbiAgdHJpZ2dlckV2ZW50KEVWRU5UX1RZUEVTLmVycm9yLCB7IHNlbnRyeUVycm9ySWQgfSlcbn1cblxuY29uc3QgY29udGFjdFN1cHBvcnQgPSAoKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5jb250YWN0U3VwcG9ydClcbn1cblxuLy8gRGV2aWNlXG5jb25zdCBpc01vYmlsZSA9ICgpID0+IHtcbiAgdHJpZ2dlckV2ZW50KEVWRU5UX1RZUEVTLmlzTW9iaWxlKVxufVxuY29uc3QgaXNEZXNrdG9wID0gKCkgPT4ge1xuICB0cmlnZ2VyRXZlbnQoRVZFTlRfVFlQRVMuaXNEZXNrdG9wKVxufVxuXG4vLyBRdWVyeSBJbnRlcmFjdGlvbnNcbmNvbnN0IHF1ZXJ5UmVmaW5lbWVudCA9IChkYXRhOiBRdWVyeVJlZmluZW1lbnREYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5xdWVyeVJlZmluZW1lbnQsIGRhdGEpXG59XG5cbmNvbnN0IHF1ZXJ5SW5pdCA9IChkYXRhOiBRdWVyeUluaXREYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5xdWVyeUluaXQsIGRhdGEpXG59XG5cbmNvbnN0IHF1ZXJ5UmV2aXNpdCA9IChkYXRhOiBRdWVyeVJldmlzaXREYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5xdWVyeVJldmlzaXQsIGRhdGEpXG59XG5cbmNvbnN0IHF1ZXJ5U2F2ZWQgPSAoZGF0YTogUXVlcnlTYXZlZERhdGEpID0+IHtcbiAgdHJpZ2dlckV2ZW50KEVWRU5UX1RZUEVTLnF1ZXJ5U2F2ZWQsIGRhdGEpXG59XG5cbi8vIFBhbmVsIEdyb3VwaW5nXG5jb25zdCBkcEdyb3VwaW5nID0gKGRhdGE6IERwR3JvdXBpbmdEYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5kcEdyb3VwaW5nLCBkYXRhKVxufVxuXG4vLyBGZWVkc1xuY29uc3QgZmVlZFZpZXcgPSAoZGF0YTogRmVlZFZpZXdEYXRhKSA9PiB7XG4gIHRyaWdnZXJFdmVudChFVkVOVF9UWVBFUy5mZWVkVmlldywgZGF0YSlcbn1cblxuZXhwb3J0IGNvbnN0IHRhZ01hbmFnZXJFdmVudHMgPSB7XG4gIGxvZ2luLFxuICBsb2dvdXQsXG4gIGVycm9yLFxuICBjb250YWN0U3VwcG9ydCxcbiAgaXNNb2JpbGUsXG4gIGlzRGVza3RvcCxcbiAgc3RvcnlDYXJkLFxuICBkb2N1bWVudE91dGJvdW5kLFxuICBkb2N1bWVudFJlYWRpbmcsXG4gIGRvY3VtZW50Q2xvc2VkLFxuICBxdWVyeVJlZmluZW1lbnQsXG4gIHF1ZXJ5SW5pdCxcbiAgcXVlcnlSZXZpc2l0LFxuICBxdWVyeVNhdmVkLFxuICBkcEdyb3VwaW5nLFxuICBmZWVkVmlldyxcbn1cbiJdLCJuYW1lcyI6WyJpbml0VGFnTWFuYWdlciIsInRhZ01hbmFnZXJFdmVudHMiLCJjb25maWciLCJlbmFibGVkIiwidGFnTWFuYWdlckFyZ3MiLCJndG1JZCIsIlRhZ01hbmFnZXIiLCJpbml0aWFsaXplIiwidHJpZ2dlckV2ZW50IiwiZXZlbnRJZCIsImRhdGEiLCJkYXRhTGF5ZXIiLCJldmVudCIsImxvZ2luIiwidXNlciIsIkVWRU5UX1RZUEVTIiwidXNlckF1dGhlbnRpY2F0ZWQiLCJhZGFwdGVycyIsImN1c3RvbWVySW8iLCJpZGVudGlmeSIsImxvZ291dCIsInN0b3J5Q2FyZCIsInN0b3J5Q2FyZERhdGEiLCJkb2N1bWVudE91dGJvdW5kIiwib3V0Ym91bmREYXRhIiwib3V0Ym91bmQiLCJkb2N1bWVudFJlYWRpbmciLCJyZWFkaW5nRGF0YSIsImRvY3VtZW50Q2xvc2VkIiwiY2xvc2VkRGF0YSIsImVycm9yIiwic2VudHJ5RXJyb3JJZCIsImNvbnRhY3RTdXBwb3J0IiwiaXNNb2JpbGUiLCJpc0Rlc2t0b3AiLCJxdWVyeVJlZmluZW1lbnQiLCJxdWVyeUluaXQiLCJxdWVyeVJldmlzaXQiLCJxdWVyeVNhdmVkIiwiZHBHcm91cGluZyIsImZlZWRWaWV3Il0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBbUJhQSxjQUFjO2VBQWRBOztJQWlHQUMsZ0JBQWdCO2VBQWhCQTs7O3VFQXBIVTswQkFDRTsyQkFDRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCckIsTUFBTUQsaUJBQWlCLENBQUNFO0lBQzdCLElBQUlBLE9BQU9DLE9BQU8sRUFBRTtRQUNsQixNQUFNQyxpQkFBaUI7WUFDckJDLE9BQU9ILE9BQU9HLEtBQUs7UUFDckI7UUFFQUMsdUJBQVUsQ0FBQ0MsVUFBVSxDQUFDSDtJQUN4QjtBQUNGO0FBRUEsTUFBTUksZUFBZSxDQUFDQyxTQUFxQkMsT0FBa0IsQ0FBQyxDQUFDO0lBQzdESix1QkFBVSxDQUFDSyxTQUFTLENBQUM7UUFDbkJBLFdBQVc7WUFDVEMsT0FBT0g7V0FDSkM7SUFFUDtBQUNGO0FBSUEsTUFBTUcsUUFBUSxDQUFDQztJQUNiTixhQUFhTyxzQkFBVyxDQUFDRixLQUFLLEVBQUVDO0lBQ2hDRSxrQkFBa0JGO0lBQ2xCRyxrQkFBUSxDQUFDQyxVQUFVLENBQUNDLFFBQVEsQ0FBQ0w7QUFDL0I7QUFFQSxNQUFNTSxTQUFTO0lBQ2JaLGFBQWFPLHNCQUFXLENBQUNLLE1BQU07QUFDakM7QUFFQSxNQUFNSixvQkFBb0IsQ0FBQ0Y7SUFDekJOLGFBQWFPLHNCQUFXLENBQUNDLGlCQUFpQixFQUFFRjtBQUM5QztBQUVBLGFBQWE7QUFDYixNQUFNTyxZQUFZLENBQUNDO0lBQ2pCZCxhQUFhTyxzQkFBVyxDQUFDTSxTQUFTLEVBQUVDO0FBQ3RDO0FBRUEsa0JBQWtCO0FBQ2xCLE1BQU1DLG1CQUFtQixDQUFDQztJQUN4QmhCLGFBQWFPLHNCQUFXLENBQUNVLFFBQVEsRUFBRUQ7QUFDckM7QUFFQSxNQUFNRSxrQkFBa0IsQ0FBQ0M7SUFDdkJuQixhQUFhTyxzQkFBVyxDQUFDVyxlQUFlLEVBQUVDO0FBQzVDO0FBRUEsTUFBTUMsaUJBQWlCLENBQUNDO0lBQ3RCckIsYUFBYU8sc0JBQVcsQ0FBQ2EsY0FBYyxFQUFFQztBQUMzQztBQUVBLFdBQVc7QUFDWCxNQUFNQyxRQUFRLENBQUNDO0lBQ2J2QixhQUFhTyxzQkFBVyxDQUFDZSxLQUFLLEVBQUU7UUFBRUM7SUFBYztBQUNsRDtBQUVBLE1BQU1DLGlCQUFpQjtJQUNyQnhCLGFBQWFPLHNCQUFXLENBQUNpQixjQUFjO0FBQ3pDO0FBRUEsU0FBUztBQUNULE1BQU1DLFdBQVc7SUFDZnpCLGFBQWFPLHNCQUFXLENBQUNrQixRQUFRO0FBQ25DO0FBQ0EsTUFBTUMsWUFBWTtJQUNoQjFCLGFBQWFPLHNCQUFXLENBQUNtQixTQUFTO0FBQ3BDO0FBRUEscUJBQXFCO0FBQ3JCLE1BQU1DLGtCQUFrQixDQUFDekI7SUFDdkJGLGFBQWFPLHNCQUFXLENBQUNvQixlQUFlLEVBQUV6QjtBQUM1QztBQUVBLE1BQU0wQixZQUFZLENBQUMxQjtJQUNqQkYsYUFBYU8sc0JBQVcsQ0FBQ3FCLFNBQVMsRUFBRTFCO0FBQ3RDO0FBRUEsTUFBTTJCLGVBQWUsQ0FBQzNCO0lBQ3BCRixhQUFhTyxzQkFBVyxDQUFDc0IsWUFBWSxFQUFFM0I7QUFDekM7QUFFQSxNQUFNNEIsYUFBYSxDQUFDNUI7SUFDbEJGLGFBQWFPLHNCQUFXLENBQUN1QixVQUFVLEVBQUU1QjtBQUN2QztBQUVBLGlCQUFpQjtBQUNqQixNQUFNNkIsYUFBYSxDQUFDN0I7SUFDbEJGLGFBQWFPLHNCQUFXLENBQUN3QixVQUFVLEVBQUU3QjtBQUN2QztBQUVBLFFBQVE7QUFDUixNQUFNOEIsV0FBVyxDQUFDOUI7SUFDaEJGLGFBQWFPLHNCQUFXLENBQUN5QixRQUFRLEVBQUU5QjtBQUNyQztBQUVPLE1BQU1ULG1CQUFtQjtJQUM5Qlk7SUFDQU87SUFDQVU7SUFDQUU7SUFDQUM7SUFDQUM7SUFDQWI7SUFDQUU7SUFDQUc7SUFDQUU7SUFDQU87SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDRiJ9