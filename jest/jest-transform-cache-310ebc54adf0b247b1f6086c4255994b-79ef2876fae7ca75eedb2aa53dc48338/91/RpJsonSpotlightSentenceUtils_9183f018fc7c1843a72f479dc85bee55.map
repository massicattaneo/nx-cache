{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/components/RpJsonSpotlightSentence/RpJsonSpotlightSentenceUtils.ts"],"sourcesContent":["import { LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH } from \"@rp/common/settings\"\nimport { EnhancedTextBlock, Statistics } from \"@rp/react/rpjson/types\"\nimport { getStatsParagraph } from \"../RpJsonParagraph/getStatsParagraph\"\n\ntype Props = {\n  sentences: Array<{ pnum: number; snum: number }>\n  stats: Statistics\n}\n\nconst getTextFromCoordinates = (stats: Statistics, pnum: number, snum: number) => {\n  const paragraph = getStatsParagraph(stats, pnum, snum)\n\n  if (!paragraph) return \"\"\n\n  const sentence = paragraph.sentences.find(sent => sent.sentenceNumber === snum)\n\n  if (!sentence) {\n    return paragraph.text\n  }\n\n  return paragraph.text.substring(sentence.start, sentence.end)\n}\n\nfunction getRealParagraphTextLength(\n  paragraph: EnhancedTextBlock,\n  sentencesMerged: Array<{ pnum: number; snum: number }>,\n  paragraphNumber: number,\n  stats: Statistics,\n) {\n  return paragraph.sentences\n    .filter(s =>\n      sentencesMerged.find(m => m.pnum === paragraphNumber && m.snum === s.sentenceNumber),\n    )\n    .map(sent => {\n      return {\n        ...sent,\n        textLength: getTextFromCoordinates(stats, paragraphNumber, sent.sentenceNumber).length,\n      }\n    })\n    .reduce(\n      (acc, sent) => {\n        if (acc.reached) return acc\n        const realTextLength = acc.realTextLength + sent.textLength\n        if (realTextLength > LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH) {\n          return {\n            reached: true,\n            prev: acc.prev,\n            end:\n              acc.end +\n              sent.start -\n              acc.prev +\n              (LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH - acc.realTextLength),\n            realTextLength: LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH,\n          }\n        }\n        const prev = sent.end\n\n        return {\n          prev,\n          end: acc.end + sent.start - acc.prev + sent.textLength,\n          realTextLength,\n          reached: false,\n        }\n      },\n      { prev: 0, end: 0, realTextLength: 0, reached: false },\n    )\n}\n\nconst getSpotlightSentenceContent = ({ sentences, stats }: Props) => {\n  const content: Array<EnhancedTextBlock> = []\n\n  const sentencesMerged = sentences.length ? sentences : [{ pnum: 1, snum: 1 }]\n  const { pnum: startParagraphNumber, snum: startSentenceNumber } = sentencesMerged[0]\n\n  let textLength = 0\n\n  const { start = 0 } =\n    stats.paragraphs[startParagraphNumber]?.[0].sentences.find(\n      s => s.sentenceNumber === startSentenceNumber,\n    ) ?? {}\n\n  let prevStart = start\n  sentencesMerged.forEach(({ pnum: paragraphNumber, snum: sentenceNumber }) => {\n    const paragraph = getStatsParagraph(stats, paragraphNumber, sentenceNumber)\n    const clone = Object.assign({}, paragraph)\n    if (paragraph && !content.find(p => p.paragraphNumber === paragraphNumber)) {\n      const { end } = getRealParagraphTextLength(paragraph, sentencesMerged, paragraphNumber, stats)\n      const realEnd = Math.max(end, LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH)\n      if (clone.text.length + prevStart + textLength > realEnd) {\n        const addEllipsis = realEnd - textLength > 0 ? \"...\" : \"\"\n        clone.text = clone.text.substring(0, realEnd - textLength) + addEllipsis\n      }\n      textLength += clone.text.length || 0\n      content.push(clone)\n      prevStart = end\n    }\n  })\n\n  const hasReachedMaximumLength = textLength >= LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH\n\n  return { content, hasReachedMaximumLength }\n}\n\nexport { getSpotlightSentenceContent, getTextFromCoordinates, getRealParagraphTextLength }\n"],"names":["getRealParagraphTextLength","getSpotlightSentenceContent","getTextFromCoordinates","stats","pnum","snum","paragraph","getStatsParagraph","sentence","sentences","find","sent","sentenceNumber","text","substring","start","end","sentencesMerged","paragraphNumber","filter","s","m","map","textLength","length","reduce","acc","reached","realTextLength","LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH","prev","content","startParagraphNumber","startSentenceNumber","paragraphs","prevStart","forEach","clone","Object","assign","p","realEnd","Math","max","addEllipsis","push","hasReachedMaximumLength"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}