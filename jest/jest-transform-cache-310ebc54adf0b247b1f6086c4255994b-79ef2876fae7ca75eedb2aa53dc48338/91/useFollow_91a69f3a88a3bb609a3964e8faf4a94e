2d9e8f9d2db07280e68fcc50e124a4bc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useFollow", {
    enumerable: true,
    get: function() {
        return useFollow;
    }
});
const _react = require("react");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _reactquery = require("@tanstack/react-query");
const _ModalContext = require("../ModalContext");
const _Snackbar = require("../Snackbar");
const useFollow = (id)=>{
    var _data_results_find;
    const { makeDynamicName } = (0, _userdataqueries.useDynamicCQSName)();
    const { data, isLoading: isLoadingQueries } = (0, _userdataqueries.useUserQueries)();
    const [isUnfollowModalOpen, setIsOpenUnfollow] = (0, _react.useState)(false);
    const [isFollowModalOpen, setIsOpenFollow] = (0, _react.useState)(false);
    const { enqueueError } = (0, _Snackbar.useSnackbar)();
    const { mutateAsync: pinQuery, isPending: isPinning } = (0, _userdataqueries.usePinQuery)({
        enqueueError
    });
    const queryClient = (0, _reactquery.useQueryClient)();
    const isLoading = isLoadingQueries;
    const isPending = isPinning;
    const loading = isLoading || isPending;
    const [isFollowing, setIsFollowing] = (0, _react.useState)((data === null || data === void 0 ? void 0 : (_data_results_find = data.results.find((q)=>q.id === id)) === null || _data_results_find === void 0 ? void 0 : _data_results_find.pinned) || false);
    const { unfollowSearchModal, followSearchModal } = (0, _ModalContext.useModal)();
    (0, _react.useEffect)(()=>{
        var _data_results_find;
        setIsFollowing((data === null || data === void 0 ? void 0 : (_data_results_find = data.results.find((q)=>q.id === id)) === null || _data_results_find === void 0 ? void 0 : _data_results_find.pinned) || false);
    }, [
        data,
        id,
        loading
    ]);
    const onFollow = (0, _react.useCallback)(async (props)=>{
        const { id, saveStatus } = props;
        const queryData = await (0, _userdataqueries.getSavedQuery)(queryClient, id !== null && id !== void 0 ? id : "");
        const name = queryData ? makeDynamicName(queryData) : "";
        if (!id) return;
        const query = data ? data.results.find((q)=>q.id === id) : undefined;
        const isFollowing = query ? !!query.pinned : false;
        if (saveStatus === "unsaved") {
            setIsOpenFollow(true);
            followSearchModal.handleOpen({
                id,
                name: name || "",
                saveStatus,
                isLoading: loading,
                onClose: ()=>{
                    setIsOpenFollow(false);
                }
            });
        } else if (!isFollowing) {
            pinQuery(id);
        } else {
            setIsOpenUnfollow === null || setIsOpenUnfollow === void 0 ? void 0 : setIsOpenUnfollow(true);
            unfollowSearchModal.handleOpen({
                id,
                name: (query === null || query === void 0 ? void 0 : query.name) || name || "",
                saveStatus,
                isLoading: loading,
                onClose: ()=>setIsOpenUnfollow === null || setIsOpenUnfollow === void 0 ? void 0 : setIsOpenUnfollow(false)
            });
        }
    }, [
        data,
        followSearchModal,
        loading,
        makeDynamicName,
        pinQuery,
        queryClient,
        unfollowSearchModal
    ]);
    return {
        isLoading,
        isPending,
        onFollow,
        isFollowing,
        isUnfollowModalOpen,
        isFollowModalOpen
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL0ZvbGxvd0NvbnRleHQvdXNlRm9sbG93LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IENxc1NhdmVkUXVlcnkgfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHtcbiAgZ2V0U2F2ZWRRdWVyeSxcbiAgdXNlUGluUXVlcnksXG4gIHVzZVVzZXJRdWVyaWVzLFxufSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS91c2VyLWRhdGEtcXVlcmllc1wiXG5pbXBvcnQgeyB1c2VEeW5hbWljQ1FTTmFtZSB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL3VzZXItZGF0YS1xdWVyaWVzXCJcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiXG5pbXBvcnQgeyB1c2VNb2RhbCB9IGZyb20gXCIuLi9Nb2RhbENvbnRleHRcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiLi4vU25hY2tiYXJcIlxuXG50eXBlIE9uRm9sbG93UHJvcHMgPSB7XG4gIGlkPzogc3RyaW5nXG4gIHNhdmVTdGF0dXM/OiBDcXNTYXZlZFF1ZXJ5W1wic2F2ZVN0YXR1c1wiXVxufVxuXG5jb25zdCB1c2VGb2xsb3cgPSAoaWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IG1ha2VEeW5hbWljTmFtZSB9ID0gdXNlRHluYW1pY0NRU05hbWUoKVxuICBjb25zdCB7IGRhdGEsIGlzTG9hZGluZzogaXNMb2FkaW5nUXVlcmllcyB9ID0gdXNlVXNlclF1ZXJpZXMoKVxuICBjb25zdCBbaXNVbmZvbGxvd01vZGFsT3Blbiwgc2V0SXNPcGVuVW5mb2xsb3ddID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtpc0ZvbGxvd01vZGFsT3Blbiwgc2V0SXNPcGVuRm9sbG93XSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCB7IGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuICBjb25zdCB7IG11dGF0ZUFzeW5jOiBwaW5RdWVyeSwgaXNQZW5kaW5nOiBpc1Bpbm5pbmcgfSA9IHVzZVBpblF1ZXJ5KHsgZW5xdWV1ZUVycm9yIH0pXG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKVxuICBjb25zdCBpc0xvYWRpbmcgPSBpc0xvYWRpbmdRdWVyaWVzXG4gIGNvbnN0IGlzUGVuZGluZyA9IGlzUGlubmluZ1xuICBjb25zdCBsb2FkaW5nID0gaXNMb2FkaW5nIHx8IGlzUGVuZGluZ1xuICBjb25zdCBbaXNGb2xsb3dpbmcsIHNldElzRm9sbG93aW5nXSA9IHVzZVN0YXRlKFxuICAgIGRhdGE/LnJlc3VsdHMuZmluZChxID0+IHEuaWQgPT09IGlkKT8ucGlubmVkIHx8IGZhbHNlLFxuICApXG4gIGNvbnN0IHsgdW5mb2xsb3dTZWFyY2hNb2RhbCwgZm9sbG93U2VhcmNoTW9kYWwgfSA9IHVzZU1vZGFsKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldElzRm9sbG93aW5nKGRhdGE/LnJlc3VsdHMuZmluZChxID0+IHEuaWQgPT09IGlkKT8ucGlubmVkIHx8IGZhbHNlKVxuICB9LCBbZGF0YSwgaWQsIGxvYWRpbmddKVxuXG4gIGNvbnN0IG9uRm9sbG93ID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHByb3BzOiBPbkZvbGxvd1Byb3BzKSA9PiB7XG4gICAgICBjb25zdCB7IGlkLCBzYXZlU3RhdHVzIH0gPSBwcm9wc1xuICAgICAgY29uc3QgcXVlcnlEYXRhID0gYXdhaXQgZ2V0U2F2ZWRRdWVyeShxdWVyeUNsaWVudCwgaWQgPz8gXCJcIilcbiAgICAgIGNvbnN0IG5hbWUgPSBxdWVyeURhdGEgPyBtYWtlRHluYW1pY05hbWUocXVlcnlEYXRhKSA6IFwiXCJcbiAgICAgIGlmICghaWQpIHJldHVyblxuICAgICAgY29uc3QgcXVlcnkgPSBkYXRhID8gZGF0YS5yZXN1bHRzLmZpbmQocSA9PiBxLmlkID09PSBpZCkgOiB1bmRlZmluZWRcbiAgICAgIGNvbnN0IGlzRm9sbG93aW5nID0gcXVlcnkgPyAhIXF1ZXJ5LnBpbm5lZCA6IGZhbHNlXG4gICAgICBpZiAoc2F2ZVN0YXR1cyA9PT0gXCJ1bnNhdmVkXCIpIHtcbiAgICAgICAgc2V0SXNPcGVuRm9sbG93KHRydWUpXG4gICAgICAgIGZvbGxvd1NlYXJjaE1vZGFsLmhhbmRsZU9wZW4oe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIG5hbWU6IG5hbWUgfHwgXCJcIixcbiAgICAgICAgICBzYXZlU3RhdHVzLFxuICAgICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgICBvbkNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc09wZW5Gb2xsb3coZmFsc2UpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzRm9sbG93aW5nKSB7XG4gICAgICAgIHBpblF1ZXJ5KGlkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0SXNPcGVuVW5mb2xsb3c/Lih0cnVlKVxuICAgICAgICB1bmZvbGxvd1NlYXJjaE1vZGFsLmhhbmRsZU9wZW4oe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIG5hbWU6IHF1ZXJ5Py5uYW1lIHx8IG5hbWUgfHwgXCJcIixcbiAgICAgICAgICBzYXZlU3RhdHVzLFxuICAgICAgICAgIGlzTG9hZGluZzogbG9hZGluZyxcbiAgICAgICAgICBvbkNsb3NlOiAoKSA9PiBzZXRJc09wZW5VbmZvbGxvdz8uKGZhbHNlKSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIFtkYXRhLCBmb2xsb3dTZWFyY2hNb2RhbCwgbG9hZGluZywgbWFrZUR5bmFtaWNOYW1lLCBwaW5RdWVyeSwgcXVlcnlDbGllbnQsIHVuZm9sbG93U2VhcmNoTW9kYWxdLFxuICApXG5cbiAgcmV0dXJuIHtcbiAgICBpc0xvYWRpbmcsXG4gICAgaXNQZW5kaW5nLFxuICAgIG9uRm9sbG93LFxuICAgIGlzRm9sbG93aW5nLFxuICAgIGlzVW5mb2xsb3dNb2RhbE9wZW4sXG4gICAgaXNGb2xsb3dNb2RhbE9wZW4sXG4gIH1cbn1cblxuZXhwb3J0IHsgdXNlRm9sbG93IH1cbiJdLCJuYW1lcyI6WyJ1c2VGb2xsb3ciLCJpZCIsImRhdGEiLCJtYWtlRHluYW1pY05hbWUiLCJ1c2VEeW5hbWljQ1FTTmFtZSIsImlzTG9hZGluZyIsImlzTG9hZGluZ1F1ZXJpZXMiLCJ1c2VVc2VyUXVlcmllcyIsImlzVW5mb2xsb3dNb2RhbE9wZW4iLCJzZXRJc09wZW5VbmZvbGxvdyIsInVzZVN0YXRlIiwiaXNGb2xsb3dNb2RhbE9wZW4iLCJzZXRJc09wZW5Gb2xsb3ciLCJlbnF1ZXVlRXJyb3IiLCJ1c2VTbmFja2JhciIsIm11dGF0ZUFzeW5jIiwicGluUXVlcnkiLCJpc1BlbmRpbmciLCJpc1Bpbm5pbmciLCJ1c2VQaW5RdWVyeSIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJsb2FkaW5nIiwiaXNGb2xsb3dpbmciLCJzZXRJc0ZvbGxvd2luZyIsInJlc3VsdHMiLCJmaW5kIiwicSIsInBpbm5lZCIsInVuZm9sbG93U2VhcmNoTW9kYWwiLCJmb2xsb3dTZWFyY2hNb2RhbCIsInVzZU1vZGFsIiwidXNlRWZmZWN0Iiwib25Gb2xsb3ciLCJ1c2VDYWxsYmFjayIsInByb3BzIiwic2F2ZVN0YXR1cyIsInF1ZXJ5RGF0YSIsImdldFNhdmVkUXVlcnkiLCJuYW1lIiwicXVlcnkiLCJ1bmRlZmluZWQiLCJoYW5kbGVPcGVuIiwib25DbG9zZSJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFrRlNBOzs7ZUFBQUE7Ozt1QkFsRndDO2lDQU0xQzs0QkFFd0I7OEJBQ047MEJBQ0c7QUFPNUIsTUFBTUEsWUFBWSxDQUFDQztRQVlmQztJQVhGLE1BQU0sRUFBRUMsZUFBZSxFQUFFLEdBQUdDLElBQUFBLGtDQUFpQjtJQUM3QyxNQUFNLEVBQUVGLElBQUksRUFBRUcsV0FBV0MsZ0JBQWdCLEVBQUUsR0FBR0MsSUFBQUEsK0JBQWM7SUFDNUQsTUFBTSxDQUFDQyxxQkFBcUJDLGtCQUFrQixHQUFHQyxJQUFBQSxlQUFRLEVBQUM7SUFDMUQsTUFBTSxDQUFDQyxtQkFBbUJDLGdCQUFnQixHQUFHRixJQUFBQSxlQUFRLEVBQUM7SUFDdEQsTUFBTSxFQUFFRyxZQUFZLEVBQUUsR0FBR0MsSUFBQUEscUJBQVc7SUFDcEMsTUFBTSxFQUFFQyxhQUFhQyxRQUFRLEVBQUVDLFdBQVdDLFNBQVMsRUFBRSxHQUFHQyxJQUFBQSw0QkFBVyxFQUFDO1FBQUVOO0lBQWE7SUFDbkYsTUFBTU8sY0FBY0MsSUFBQUEsMEJBQWM7SUFDbEMsTUFBTWhCLFlBQVlDO0lBQ2xCLE1BQU1XLFlBQVlDO0lBQ2xCLE1BQU1JLFVBQVVqQixhQUFhWTtJQUM3QixNQUFNLENBQUNNLGFBQWFDLGVBQWUsR0FBR2QsSUFBQUEsZUFBUSxFQUM1Q1IsQ0FBQUEsaUJBQUFBLDRCQUFBQSxxQkFBQUEsS0FBTXVCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFMUIsRUFBRSxLQUFLQSxpQkFBakNDLHlDQUFBQSxtQkFBc0MwQixNQUFNLEtBQUk7SUFFbEQsTUFBTSxFQUFFQyxtQkFBbUIsRUFBRUMsaUJBQWlCLEVBQUUsR0FBR0MsSUFBQUEsc0JBQVE7SUFFM0RDLElBQUFBLGdCQUFTLEVBQUM7WUFDTzlCO1FBQWZzQixlQUFldEIsQ0FBQUEsaUJBQUFBLDRCQUFBQSxxQkFBQUEsS0FBTXVCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFMUIsRUFBRSxLQUFLQSxpQkFBakNDLHlDQUFBQSxtQkFBc0MwQixNQUFNLEtBQUk7SUFDakUsR0FBRztRQUFDMUI7UUFBTUQ7UUFBSXFCO0tBQVE7SUFFdEIsTUFBTVcsV0FBV0MsSUFBQUEsa0JBQVcsRUFDMUIsT0FBT0M7UUFDTCxNQUFNLEVBQUVsQyxFQUFFLEVBQUVtQyxVQUFVLEVBQUUsR0FBR0Q7UUFDM0IsTUFBTUUsWUFBWSxNQUFNQyxJQUFBQSw4QkFBYSxFQUFDbEIsYUFBYW5CLGVBQUFBLGdCQUFBQSxLQUFNO1FBQ3pELE1BQU1zQyxPQUFPRixZQUFZbEMsZ0JBQWdCa0MsYUFBYTtRQUN0RCxJQUFJLENBQUNwQyxJQUFJO1FBQ1QsTUFBTXVDLFFBQVF0QyxPQUFPQSxLQUFLdUIsT0FBTyxDQUFDQyxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUUxQixFQUFFLEtBQUtBLE1BQU13QztRQUMzRCxNQUFNbEIsY0FBY2lCLFFBQVEsQ0FBQyxDQUFDQSxNQUFNWixNQUFNLEdBQUc7UUFDN0MsSUFBSVEsZUFBZSxXQUFXO1lBQzVCeEIsZ0JBQWdCO1lBQ2hCa0Isa0JBQWtCWSxVQUFVLENBQUM7Z0JBQzNCekM7Z0JBQ0FzQyxNQUFNQSxRQUFRO2dCQUNkSDtnQkFDQS9CLFdBQVdpQjtnQkFDWHFCLFNBQVM7b0JBQ1AvQixnQkFBZ0I7Z0JBQ2xCO1lBQ0Y7UUFDRixPQUFPLElBQUksQ0FBQ1csYUFBYTtZQUN2QlAsU0FBU2Y7UUFDWCxPQUFPO1lBQ0xRLDhCQUFBQSx3Q0FBQUEsa0JBQW9CO1lBQ3BCb0Isb0JBQW9CYSxVQUFVLENBQUM7Z0JBQzdCekM7Z0JBQ0FzQyxNQUFNQyxDQUFBQSxrQkFBQUEsNEJBQUFBLE1BQU9ELElBQUksS0FBSUEsUUFBUTtnQkFDN0JIO2dCQUNBL0IsV0FBV2lCO2dCQUNYcUIsU0FBUyxJQUFNbEMsOEJBQUFBLHdDQUFBQSxrQkFBb0I7WUFDckM7UUFDRjtJQUNGLEdBQ0E7UUFBQ1A7UUFBTTRCO1FBQW1CUjtRQUFTbkI7UUFBaUJhO1FBQVVJO1FBQWFTO0tBQW9CO0lBR2pHLE9BQU87UUFDTHhCO1FBQ0FZO1FBQ0FnQjtRQUNBVjtRQUNBZjtRQUNBRztJQUNGO0FBQ0YifQ==