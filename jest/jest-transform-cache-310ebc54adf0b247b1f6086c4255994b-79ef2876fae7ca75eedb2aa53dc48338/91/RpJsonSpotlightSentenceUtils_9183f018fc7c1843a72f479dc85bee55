eeb4876d5c1b6e466d9145631484260b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getRealParagraphTextLength: function() {
        return getRealParagraphTextLength;
    },
    getSpotlightSentenceContent: function() {
        return getSpotlightSentenceContent;
    },
    getTextFromCoordinates: function() {
        return getTextFromCoordinates;
    }
});
const _settings = require("@rp/common/settings");
const _getStatsParagraph = require("../RpJsonParagraph/getStatsParagraph");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const getTextFromCoordinates = (stats, pnum, snum)=>{
    const paragraph = (0, _getStatsParagraph.getStatsParagraph)(stats, pnum, snum);
    if (!paragraph) return "";
    const sentence = paragraph.sentences.find((sent)=>sent.sentenceNumber === snum);
    if (!sentence) {
        return paragraph.text;
    }
    return paragraph.text.substring(sentence.start, sentence.end);
};
function getRealParagraphTextLength(paragraph, sentencesMerged, paragraphNumber, stats) {
    return paragraph.sentences.filter((s)=>sentencesMerged.find((m)=>m.pnum === paragraphNumber && m.snum === s.sentenceNumber)).map((sent)=>{
        return _object_spread_props(_object_spread({}, sent), {
            textLength: getTextFromCoordinates(stats, paragraphNumber, sent.sentenceNumber).length
        });
    }).reduce((acc, sent)=>{
        if (acc.reached) return acc;
        const realTextLength = acc.realTextLength + sent.textLength;
        if (realTextLength > _settings.LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH) {
            return {
                reached: true,
                prev: acc.prev,
                end: acc.end + sent.start - acc.prev + (_settings.LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH - acc.realTextLength),
                realTextLength: _settings.LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH
            };
        }
        const prev = sent.end;
        return {
            prev,
            end: acc.end + sent.start - acc.prev + sent.textLength,
            realTextLength,
            reached: false
        };
    }, {
        prev: 0,
        end: 0,
        realTextLength: 0,
        reached: false
    });
}
const getSpotlightSentenceContent = ({ sentences, stats })=>{
    var _stats_paragraphs_startParagraphNumber;
    const content = [];
    const sentencesMerged = sentences.length ? sentences : [
        {
            pnum: 1,
            snum: 1
        }
    ];
    const { pnum: startParagraphNumber, snum: startSentenceNumber } = sentencesMerged[0];
    let textLength = 0;
    var _stats_paragraphs_startParagraphNumber__sentences_find;
    const { start = 0 } = (_stats_paragraphs_startParagraphNumber__sentences_find = (_stats_paragraphs_startParagraphNumber = stats.paragraphs[startParagraphNumber]) === null || _stats_paragraphs_startParagraphNumber === void 0 ? void 0 : _stats_paragraphs_startParagraphNumber[0].sentences.find((s)=>s.sentenceNumber === startSentenceNumber)) !== null && _stats_paragraphs_startParagraphNumber__sentences_find !== void 0 ? _stats_paragraphs_startParagraphNumber__sentences_find : {};
    let prevStart = start;
    sentencesMerged.forEach(({ pnum: paragraphNumber, snum: sentenceNumber })=>{
        const paragraph = (0, _getStatsParagraph.getStatsParagraph)(stats, paragraphNumber, sentenceNumber);
        const clone = Object.assign({}, paragraph);
        if (paragraph && !content.find((p)=>p.paragraphNumber === paragraphNumber)) {
            const { end } = getRealParagraphTextLength(paragraph, sentencesMerged, paragraphNumber, stats);
            const realEnd = Math.max(end, _settings.LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH);
            if (clone.text.length + prevStart + textLength > realEnd) {
                const addEllipsis = realEnd - textLength > 0 ? "..." : "";
                clone.text = clone.text.substring(0, realEnd - textLength) + addEllipsis;
            }
            textLength += clone.text.length || 0;
            content.push(clone);
            prevStart = end;
        }
    });
    const hasReachedMaximumLength = textLength >= _settings.LIMITED_DOC_VIEWER_MAX_TEXT_LENGTH;
    return {
        content,
        hasReachedMaximumLength
    };
};

//# sourceMappingURL=data:application/json;base64,