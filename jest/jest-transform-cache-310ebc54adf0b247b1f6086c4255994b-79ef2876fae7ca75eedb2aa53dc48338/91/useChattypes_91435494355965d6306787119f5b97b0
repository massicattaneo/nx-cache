de708151aa8f14b0fb5adee33c763ad5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isChatContext: function() {
        return isChatContext;
    },
    isChatFileContext: function() {
        return isChatFileContext;
    },
    isChatWatchlistContext: function() {
        return isChatWatchlistContext;
    },
    isChatWorkflowContext: function() {
        return isChatWorkflowContext;
    },
    isHomeChatContext: function() {
        return isHomeChatContext;
    },
    isPromptLibraryContext: function() {
        return isPromptLibraryContext;
    }
});
const isChatContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "type" in seed && "context" in seed && typeof seed.context === "object" && seed.context !== null && "summary" in seed.context;
};
const isPromptLibraryContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "type" in seed && seed.type === "promptLibrary" && "value" in seed && seed.value !== null;
};
const isHomeChatContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "type" in seed && seed.type === "homeChat" && "value" in seed && seed.value !== null;
};
const isChatFileContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "filesIds" in seed && Array.isArray(seed.filesIds);
};
const isChatWatchlistContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "watchlistIds" in seed && Array.isArray(seed.watchlistIds);
};
const isChatWorkflowContext = (seed)=>{
    return typeof seed === "object" && seed !== null && "workflow" in seed;
};

//# sourceMappingURL=data:application/json;base64,