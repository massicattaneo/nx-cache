e7b21e1f57ec0a0bc19a2f8b3010266d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useHistoricalBriefReport: function() {
        return useHistoricalBriefReport;
    },
    useLatestBriefReport: function() {
        return useLatestBriefReport;
    }
});
const _reactquery = require("@tanstack/react-query");
const _brieftypes = require("../brief.types");
const _briefReportservices = require("./briefReport.services");
const briefReportQueryKeys = {
    all: ()=>[
            "briefReport"
        ],
    briefReport: (context, briefId, reportId)=>[
            "briefReport",
            context,
            briefId,
            reportId
        ]
};
const useLatestBriefReport = (briefId, isEnabled)=>{
    return (0, _reactquery.useQuery)({
        enabled: !!briefId && isEnabled,
        queryKey: briefReportQueryKeys.briefReport("latest", briefId),
        queryFn: ()=>(0, _briefReportservices.loadLatestBriefReport)(briefId),
        gcTime: Infinity,
        staleTime: Infinity,
        retry: (_retryCount, error)=>error.message === _brieftypes.BriefAPIError.BRIEF_REPORT_STILL_LOADING,
        retryDelay: 10000
    });
};
const useHistoricalBriefReport = (briefId, reportId)=>{
    return (0, _reactquery.useQuery)({
        enabled: !!briefId && !!reportId,
        queryKey: briefReportQueryKeys.briefReport("historical", briefId, reportId),
        queryFn: ()=>(0, _briefReportservices.loadHistoricalBriefReport)(briefId, reportId),
        gcTime: Infinity,
        staleTime: Infinity,
        retry: false
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2JyaWVmL3NyYy9icmllZlJlcG9ydC9icmllZlJlcG9ydC5ob29rcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIlxuaW1wb3J0IHsgQnJpZWZBUElFcnJvciB9IGZyb20gXCIuLi9icmllZi50eXBlc1wiXG5pbXBvcnQgeyBsb2FkSGlzdG9yaWNhbEJyaWVmUmVwb3J0LCBsb2FkTGF0ZXN0QnJpZWZSZXBvcnQgfSBmcm9tIFwiLi9icmllZlJlcG9ydC5zZXJ2aWNlc1wiXG5cbmNvbnN0IGJyaWVmUmVwb3J0UXVlcnlLZXlzID0ge1xuICBhbGw6ICgpID0+IFtcImJyaWVmUmVwb3J0XCJdLFxuICBicmllZlJlcG9ydDogKGNvbnRleHQ6IHN0cmluZywgYnJpZWZJZDogc3RyaW5nIHwgdW5kZWZpbmVkLCByZXBvcnRJZD86IHN0cmluZykgPT5cbiAgICBbXCJicmllZlJlcG9ydFwiLCBjb250ZXh0LCBicmllZklkLCByZXBvcnRJZF0gYXMgY29uc3QsXG59XG5cbmNvbnN0IHVzZUxhdGVzdEJyaWVmUmVwb3J0ID0gKGJyaWVmSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCwgaXNFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gIHJldHVybiB1c2VRdWVyeSh7XG4gICAgZW5hYmxlZDogISFicmllZklkICYmIGlzRW5hYmxlZCxcbiAgICBxdWVyeUtleTogYnJpZWZSZXBvcnRRdWVyeUtleXMuYnJpZWZSZXBvcnQoXCJsYXRlc3RcIiwgYnJpZWZJZCksXG4gICAgcXVlcnlGbjogKCkgPT4gbG9hZExhdGVzdEJyaWVmUmVwb3J0KGJyaWVmSWQpLFxuICAgIGdjVGltZTogSW5maW5pdHksXG4gICAgc3RhbGVUaW1lOiBJbmZpbml0eSxcbiAgICByZXRyeTogKF9yZXRyeUNvdW50LCBlcnJvcikgPT4gZXJyb3IubWVzc2FnZSA9PT0gQnJpZWZBUElFcnJvci5CUklFRl9SRVBPUlRfU1RJTExfTE9BRElORyxcbiAgICByZXRyeURlbGF5OiAxMF8wMDAsXG4gIH0pXG59XG5cbmNvbnN0IHVzZUhpc3RvcmljYWxCcmllZlJlcG9ydCA9IChicmllZklkOiBzdHJpbmcgfCB1bmRlZmluZWQsIHJlcG9ydElkOiBzdHJpbmcgfCB1bmRlZmluZWQpID0+IHtcbiAgcmV0dXJuIHVzZVF1ZXJ5KHtcbiAgICBlbmFibGVkOiAhIWJyaWVmSWQgJiYgISFyZXBvcnRJZCxcbiAgICBxdWVyeUtleTogYnJpZWZSZXBvcnRRdWVyeUtleXMuYnJpZWZSZXBvcnQoXCJoaXN0b3JpY2FsXCIsIGJyaWVmSWQsIHJlcG9ydElkKSxcbiAgICBxdWVyeUZuOiAoKSA9PiBsb2FkSGlzdG9yaWNhbEJyaWVmUmVwb3J0KGJyaWVmSWQsIHJlcG9ydElkKSxcbiAgICBnY1RpbWU6IEluZmluaXR5LFxuICAgIHN0YWxlVGltZTogSW5maW5pdHksXG4gICAgcmV0cnk6IGZhbHNlLFxuICB9KVxufVxuXG5leHBvcnQgeyB1c2VMYXRlc3RCcmllZlJlcG9ydCwgdXNlSGlzdG9yaWNhbEJyaWVmUmVwb3J0IH1cbiJdLCJuYW1lcyI6WyJ1c2VIaXN0b3JpY2FsQnJpZWZSZXBvcnQiLCJ1c2VMYXRlc3RCcmllZlJlcG9ydCIsImJyaWVmUmVwb3J0UXVlcnlLZXlzIiwiYWxsIiwiYnJpZWZSZXBvcnQiLCJjb250ZXh0IiwiYnJpZWZJZCIsInJlcG9ydElkIiwiaXNFbmFibGVkIiwidXNlUXVlcnkiLCJlbmFibGVkIiwicXVlcnlLZXkiLCJxdWVyeUZuIiwibG9hZExhdGVzdEJyaWVmUmVwb3J0IiwiZ2NUaW1lIiwiSW5maW5pdHkiLCJzdGFsZVRpbWUiLCJyZXRyeSIsIl9yZXRyeUNvdW50IiwiZXJyb3IiLCJtZXNzYWdlIiwiQnJpZWZBUElFcnJvciIsIkJSSUVGX1JFUE9SVF9TVElMTF9MT0FESU5HIiwicmV0cnlEZWxheSIsImxvYWRIaXN0b3JpY2FsQnJpZWZSZXBvcnQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFpQytCQSx3QkFBd0I7ZUFBeEJBOztJQUF0QkMsb0JBQW9CO2VBQXBCQTs7OzRCQWpDZ0I7NEJBQ0s7cUNBQ21DO0FBRWpFLE1BQU1DLHVCQUF1QjtJQUMzQkMsS0FBSyxJQUFNO1lBQUM7U0FBYztJQUMxQkMsYUFBYSxDQUFDQyxTQUFpQkMsU0FBNkJDLFdBQzFEO1lBQUM7WUFBZUY7WUFBU0M7WUFBU0M7U0FBUztBQUMvQztBQUVBLE1BQU1OLHVCQUF1QixDQUFDSyxTQUE2QkU7SUFDekQsT0FBT0MsSUFBQUEsb0JBQVEsRUFBQztRQUNkQyxTQUFTLENBQUMsQ0FBQ0osV0FBV0U7UUFDdEJHLFVBQVVULHFCQUFxQkUsV0FBVyxDQUFDLFVBQVVFO1FBQ3JETSxTQUFTLElBQU1DLElBQUFBLDBDQUFxQixFQUFDUDtRQUNyQ1EsUUFBUUM7UUFDUkMsV0FBV0Q7UUFDWEUsT0FBTyxDQUFDQyxhQUFhQyxRQUFVQSxNQUFNQyxPQUFPLEtBQUtDLHlCQUFhLENBQUNDLDBCQUEwQjtRQUN6RkMsWUFBWTtJQUNkO0FBQ0Y7QUFFQSxNQUFNdkIsMkJBQTJCLENBQUNNLFNBQTZCQztJQUM3RCxPQUFPRSxJQUFBQSxvQkFBUSxFQUFDO1FBQ2RDLFNBQVMsQ0FBQyxDQUFDSixXQUFXLENBQUMsQ0FBQ0M7UUFDeEJJLFVBQVVULHFCQUFxQkUsV0FBVyxDQUFDLGNBQWNFLFNBQVNDO1FBQ2xFSyxTQUFTLElBQU1ZLElBQUFBLDhDQUF5QixFQUFDbEIsU0FBU0M7UUFDbERPLFFBQVFDO1FBQ1JDLFdBQVdEO1FBQ1hFLE9BQU87SUFDVDtBQUNGIn0=