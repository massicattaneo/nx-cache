11e7cde4d1cf846bc33917ccb861a4b2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return PersonaSubTypeForm;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _core = require("@rp/react/web/mui/core");
const _FeedbackContext = require("./FeedbackContext");
const _FeedbackModestyles = require("./FeedbackMode.styles");
const _feedbacktypes = require("./feedback.types");
function PersonaSubTypeForm() {
    const { subType, setSubType } = (0, _FeedbackContext.useFeedbackContext)();
    const handleChange = (event)=>{
        setSubType(event.target.value);
    };
    const options = _feedbacktypes.subTypeOptions.map((option)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.MenuItem, {
            value: option.value,
            children: option.label
        }, option.value));
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_FeedbackModestyles.FeedbackForm, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_FeedbackModestyles.FormControlStyled, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.InputLabel, {
                    id: "persona-sub-type-label",
                    children: "Persona sub-type"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Select, {
                    disabled: true,
                    value: subType,
                    label: "persona-sub-type",
                    onChange: handleChange,
                    inputProps: {
                        "data-testid": "sub-type-options-id"
                    },
                    children: options
                })
            ]
        })
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnMvc3JjL0ZlZWRiYWNrQ29udGV4dC9QZXJzb25hU3ViVHlwZUZvcm0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0TGFiZWwsIE1lbnVJdGVtLCBTZWxlY3QsIFNlbGVjdENoYW5nZUV2ZW50IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgdXNlRmVlZGJhY2tDb250ZXh0IH0gZnJvbSBcIi4vRmVlZGJhY2tDb250ZXh0XCJcbmltcG9ydCB7IEZlZWRiYWNrRm9ybSwgRm9ybUNvbnRyb2xTdHlsZWQgfSBmcm9tIFwiLi9GZWVkYmFja01vZGUuc3R5bGVzXCJcbmltcG9ydCB7IFN1YlR5cGVzLCBzdWJUeXBlT3B0aW9ucyB9IGZyb20gXCIuL2ZlZWRiYWNrLnR5cGVzXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGVyc29uYVN1YlR5cGVGb3JtKCkge1xuICBjb25zdCB7IHN1YlR5cGUsIHNldFN1YlR5cGUgfSA9IHVzZUZlZWRiYWNrQ29udGV4dCgpXG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50OiBTZWxlY3RDaGFuZ2VFdmVudCkgPT4ge1xuICAgIHNldFN1YlR5cGUoZXZlbnQudGFyZ2V0LnZhbHVlIGFzIFN1YlR5cGVzKVxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHN1YlR5cGVPcHRpb25zLm1hcChvcHRpb24gPT4gKFxuICAgIDxNZW51SXRlbSBrZXk9e29wdGlvbi52YWx1ZX0gdmFsdWU9e29wdGlvbi52YWx1ZX0+XG4gICAgICB7b3B0aW9uLmxhYmVsfVxuICAgIDwvTWVudUl0ZW0+XG4gICkpXG5cbiAgcmV0dXJuIChcbiAgICA8RmVlZGJhY2tGb3JtPlxuICAgICAgPEZvcm1Db250cm9sU3R5bGVkPlxuICAgICAgICA8SW5wdXRMYWJlbCBpZD1cInBlcnNvbmEtc3ViLXR5cGUtbGFiZWxcIj5QZXJzb25hIHN1Yi10eXBlPC9JbnB1dExhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgZGlzYWJsZWRcbiAgICAgICAgICB2YWx1ZT17c3ViVHlwZX1cbiAgICAgICAgICBsYWJlbD1cInBlcnNvbmEtc3ViLXR5cGVcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgaW5wdXRQcm9wcz17e1xuICAgICAgICAgICAgXCJkYXRhLXRlc3RpZFwiOiBcInN1Yi10eXBlLW9wdGlvbnMtaWRcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge29wdGlvbnN9XG4gICAgICAgIDwvU2VsZWN0PlxuICAgICAgPC9Gb3JtQ29udHJvbFN0eWxlZD5cbiAgICA8L0ZlZWRiYWNrRm9ybT5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlBlcnNvbmFTdWJUeXBlRm9ybSIsInN1YlR5cGUiLCJzZXRTdWJUeXBlIiwidXNlRmVlZGJhY2tDb250ZXh0IiwiaGFuZGxlQ2hhbmdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJzdWJUeXBlT3B0aW9ucyIsIm1hcCIsIm9wdGlvbiIsIk1lbnVJdGVtIiwibGFiZWwiLCJGZWVkYmFja0Zvcm0iLCJGb3JtQ29udHJvbFN0eWxlZCIsIklucHV0TGFiZWwiLCJpZCIsIlNlbGVjdCIsImRpc2FibGVkIiwib25DaGFuZ2UiLCJpbnB1dFByb3BzIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQUtBOzs7ZUFBd0JBOzs7O3NCQUx3QztpQ0FDN0I7b0NBQ2E7K0JBQ1A7QUFFMUIsU0FBU0E7SUFDdEIsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRSxHQUFHQyxJQUFBQSxtQ0FBa0I7SUFFbEQsTUFBTUMsZUFBZSxDQUFDQztRQUNwQkgsV0FBV0csTUFBTUMsTUFBTSxDQUFDQyxLQUFLO0lBQy9CO0lBRUEsTUFBTUMsVUFBVUMsNkJBQWMsQ0FBQ0MsR0FBRyxDQUFDQyxDQUFBQSx1QkFDakMscUJBQUNDLGNBQVE7WUFBb0JMLE9BQU9JLE9BQU9KLEtBQUs7c0JBQzdDSSxPQUFPRSxLQUFLO1dBREFGLE9BQU9KLEtBQUs7SUFLN0IscUJBQ0UscUJBQUNPLGdDQUFZO2tCQUNYLGNBQUEsc0JBQUNDLHFDQUFpQjs7OEJBQ2hCLHFCQUFDQyxnQkFBVTtvQkFBQ0MsSUFBRzs4QkFBeUI7OzhCQUN4QyxxQkFBQ0MsWUFBTTtvQkFDTEMsUUFBUTtvQkFDUlosT0FBT047b0JBQ1BZLE9BQU07b0JBQ05PLFVBQVVoQjtvQkFDVmlCLFlBQVk7d0JBQ1YsZUFBZTtvQkFDakI7OEJBRUNiOzs7OztBQUtYIn0=