03806be579f6a067165dd1c778a6f5da
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InlineAttributionSelector", {
    enumerable: true,
    get: function() {
        return InlineAttributionSelector;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const InlineAttributionSelector = ({ attributions, onClick, selectedIndex })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const theme = (0, _core.useTheme)();
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            pb: 1.5,
            w: 1,
            pl: isMobile ? 2.5 : 2,
            pr: isMobile ? 0 : 2
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.ScrollCarousel, {
            bgColor: theme.palette.elevation.dp03,
            onArrowMouseDown: (event)=>event.preventDefault(),
            sx: {
                "& > div": {
                    paddingRight: isMobile ? 4 : 0,
                    gap: 1
                }
            },
            children: attributions.map((attribution, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_core.ButtonBase, {
                    onMouseDown: (event)=>event.preventDefault(),
                    onClick: (ev)=>{
                        ev.stopPropagation();
                        onClick(index);
                    },
                    sx: {
                        maxWidth: 200,
                        px: 1,
                        py: "5px",
                        borderRadius: 1,
                        color: selectedIndex === index ? "primary.main" : undefined,
                        bgcolor: selectedIndex === index ? "blue.900" : "overlay.surface",
                        border: 1,
                        borderColor: "transparent",
                        "&: hover": {
                            borderColor: selectedIndex === index ? "primary.main" : "outline.border"
                        }
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        sx: {
                            textOverflow: "ellipsis",
                            fontFamily: "body1.fontFamily",
                            fontSize: 14,
                            whiteSpace: "nowrap",
                            overflow: "hidden"
                        },
                        children: attribution.label
                    })
                }, index))
        })
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NoYXQvc3JjL2xpYi9DaGF0L0NoYXQvQ2hhdFJlc3BvbnNlL0lubGluZUF0dHJpYnV0aW9uL0lubGluZUF0dHJpYnV0aW9uU2VsZWN0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjcm9sbENhcm91c2VsIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IHVzZURldmljZUluZm8gfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vaG9va3NcIlxuaW1wb3J0IHsgQm94LCBCdXR0b25CYXNlLCBUeXBvZ3JhcGh5LCB1c2VUaGVtZSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL211aS9jb3JlXCJcblxudHlwZSBQcm9wcyA9IHtcbiAgYXR0cmlidXRpb25zOiBBcnJheTx7IGxhYmVsOiBzdHJpbmcgfT5cbiAgb25DbGljazogKGluZGV4OiBudW1iZXIpID0+IHZvaWRcbiAgc2VsZWN0ZWRJbmRleDogbnVtYmVyXG59XG5cbmNvbnN0IElubGluZUF0dHJpYnV0aW9uU2VsZWN0b3IgPSAoeyBhdHRyaWJ1dGlvbnMsIG9uQ2xpY2ssIHNlbGVjdGVkSW5kZXggfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpc01vYmlsZSB9ID0gdXNlRGV2aWNlSW5mbygpXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKVxuICByZXR1cm4gKFxuICAgIDxCb3ggc3g9e3sgcGI6IDEuNSwgdzogMSwgcGw6IGlzTW9iaWxlID8gMi41IDogMiwgcHI6IGlzTW9iaWxlID8gMCA6IDIgfX0+XG4gICAgICA8U2Nyb2xsQ2Fyb3VzZWxcbiAgICAgICAgYmdDb2xvcj17dGhlbWUucGFsZXR0ZS5lbGV2YXRpb24uZHAwM31cbiAgICAgICAgb25BcnJvd01vdXNlRG93bj17ZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKX1cbiAgICAgICAgc3g9e3tcbiAgICAgICAgICBcIiYgPiBkaXZcIjoge1xuICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBpc01vYmlsZSA/IDQgOiAwLFxuICAgICAgICAgICAgZ2FwOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHthdHRyaWJ1dGlvbnMubWFwKChhdHRyaWJ1dGlvbiwgaW5kZXgpID0+IChcbiAgICAgICAgICA8QnV0dG9uQmFzZVxuICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldmVudCA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpfVxuICAgICAgICAgICAgb25DbGljaz17ZXYgPT4ge1xuICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgICBvbkNsaWNrKGluZGV4KVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgIG1heFdpZHRoOiAyMDAsXG4gICAgICAgICAgICAgIHB4OiAxLFxuICAgICAgICAgICAgICBweTogXCI1cHhcIixcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAxLFxuICAgICAgICAgICAgICBjb2xvcjogc2VsZWN0ZWRJbmRleCA9PT0gaW5kZXggPyBcInByaW1hcnkubWFpblwiIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBiZ2NvbG9yOiBzZWxlY3RlZEluZGV4ID09PSBpbmRleCA/IFwiYmx1ZS45MDBcIiA6IFwib3ZlcmxheS5zdXJmYWNlXCIsXG4gICAgICAgICAgICAgIGJvcmRlcjogMSxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgXCImOiBob3ZlclwiOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHNlbGVjdGVkSW5kZXggPT09IGluZGV4ID8gXCJwcmltYXJ5Lm1haW5cIiA6IFwib3V0bGluZS5ib3JkZXJcIixcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIixcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBcImJvZHkxLmZvbnRGYW1pbHlcIixcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTQsXG4gICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2F0dHJpYnV0aW9uLmxhYmVsfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgIDwvQnV0dG9uQmFzZT5cbiAgICAgICAgKSl9XG4gICAgICA8L1Njcm9sbENhcm91c2VsPlxuICAgIDwvQm94PlxuICApXG59XG5leHBvcnQgeyBJbmxpbmVBdHRyaWJ1dGlvblNlbGVjdG9yIH1cbiJdLCJuYW1lcyI6WyJJbmxpbmVBdHRyaWJ1dGlvblNlbGVjdG9yIiwiYXR0cmlidXRpb25zIiwib25DbGljayIsInNlbGVjdGVkSW5kZXgiLCJpc01vYmlsZSIsInVzZURldmljZUluZm8iLCJ0aGVtZSIsInVzZVRoZW1lIiwiQm94Iiwic3giLCJwYiIsInciLCJwbCIsInByIiwiU2Nyb2xsQ2Fyb3VzZWwiLCJiZ0NvbG9yIiwicGFsZXR0ZSIsImVsZXZhdGlvbiIsImRwMDMiLCJvbkFycm93TW91c2VEb3duIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInBhZGRpbmdSaWdodCIsImdhcCIsIm1hcCIsImF0dHJpYnV0aW9uIiwiaW5kZXgiLCJCdXR0b25CYXNlIiwib25Nb3VzZURvd24iLCJldiIsInN0b3BQcm9wYWdhdGlvbiIsIm1heFdpZHRoIiwicHgiLCJweSIsImJvcmRlclJhZGl1cyIsImNvbG9yIiwidW5kZWZpbmVkIiwiYmdjb2xvciIsImJvcmRlciIsImJvcmRlckNvbG9yIiwiVHlwb2dyYXBoeSIsInRleHRPdmVyZmxvdyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsIndoaXRlU3BhY2UiLCJvdmVyZmxvdyIsImxhYmVsIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQWdFU0E7OztlQUFBQTs7OztxQ0FoRXNCO3VCQUNEO3NCQUN3QjtBQVF0RCxNQUFNQSw0QkFBNEIsQ0FBQyxFQUFFQyxZQUFZLEVBQUVDLE9BQU8sRUFBRUMsYUFBYSxFQUFTO0lBQ2hGLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdDLElBQUFBLG9CQUFhO0lBQ2xDLE1BQU1DLFFBQVFDLElBQUFBLGNBQVE7SUFDdEIscUJBQ0UscUJBQUNDLFNBQUc7UUFBQ0MsSUFBSTtZQUFFQyxJQUFJO1lBQUtDLEdBQUc7WUFBR0MsSUFBSVIsV0FBVyxNQUFNO1lBQUdTLElBQUlULFdBQVcsSUFBSTtRQUFFO2tCQUNyRSxjQUFBLHFCQUFDVSxtQ0FBYztZQUNiQyxTQUFTVCxNQUFNVSxPQUFPLENBQUNDLFNBQVMsQ0FBQ0MsSUFBSTtZQUNyQ0Msa0JBQWtCQyxDQUFBQSxRQUFTQSxNQUFNQyxjQUFjO1lBQy9DWixJQUFJO2dCQUNGLFdBQVc7b0JBQ1RhLGNBQWNsQixXQUFXLElBQUk7b0JBQzdCbUIsS0FBSztnQkFDUDtZQUNGO3NCQUVDdEIsYUFBYXVCLEdBQUcsQ0FBQyxDQUFDQyxhQUFhQyxzQkFDOUIscUJBQUNDLGdCQUFVO29CQUVUQyxhQUFhUixDQUFBQSxRQUFTQSxNQUFNQyxjQUFjO29CQUMxQ25CLFNBQVMyQixDQUFBQTt3QkFDUEEsR0FBR0MsZUFBZTt3QkFDbEI1QixRQUFRd0I7b0JBQ1Y7b0JBQ0FqQixJQUFJO3dCQUNGc0IsVUFBVTt3QkFDVkMsSUFBSTt3QkFDSkMsSUFBSTt3QkFDSkMsY0FBYzt3QkFDZEMsT0FBT2hDLGtCQUFrQnVCLFFBQVEsaUJBQWlCVTt3QkFDbERDLFNBQVNsQyxrQkFBa0J1QixRQUFRLGFBQWE7d0JBQ2hEWSxRQUFRO3dCQUNSQyxhQUFhO3dCQUNiLFlBQVk7NEJBQ1ZBLGFBQWFwQyxrQkFBa0J1QixRQUFRLGlCQUFpQjt3QkFDMUQ7b0JBQ0Y7OEJBRUEsY0FBQSxxQkFBQ2MsZ0JBQVU7d0JBQ1QvQixJQUFJOzRCQUNGZ0MsY0FBYzs0QkFDZEMsWUFBWTs0QkFDWkMsVUFBVTs0QkFDVkMsWUFBWTs0QkFDWkMsVUFBVTt3QkFDWjtrQ0FFQ3BCLFlBQVlxQixLQUFLOzttQkE3QmZwQjs7O0FBb0NqQiJ9