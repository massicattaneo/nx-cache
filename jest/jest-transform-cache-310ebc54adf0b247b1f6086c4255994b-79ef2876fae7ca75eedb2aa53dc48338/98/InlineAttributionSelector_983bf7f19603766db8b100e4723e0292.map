{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/chat/src/lib/Chat/Chat/ChatResponse/InlineAttribution/InlineAttributionSelector.tsx"],"sourcesContent":["import { ScrollCarousel } from \"@rp/react/web/common/composite-components\"\nimport { useDeviceInfo } from \"@rp/react/web/common/hooks\"\nimport { Box, ButtonBase, Typography, useTheme } from \"@rp/react/web/mui/core\"\n\ntype Props = {\n  attributions: Array<{ label: string }>\n  onClick: (index: number) => void\n  selectedIndex: number\n}\n\nconst InlineAttributionSelector = ({ attributions, onClick, selectedIndex }: Props) => {\n  const { isMobile } = useDeviceInfo()\n  const theme = useTheme()\n  return (\n    <Box sx={{ pb: 1.5, w: 1, pl: isMobile ? 2.5 : 2, pr: isMobile ? 0 : 2 }}>\n      <ScrollCarousel\n        bgColor={theme.palette.elevation.dp03}\n        onArrowMouseDown={event => event.preventDefault()}\n        sx={{\n          \"& > div\": {\n            paddingRight: isMobile ? 4 : 0,\n            gap: 1,\n          },\n        }}\n      >\n        {attributions.map((attribution, index) => (\n          <ButtonBase\n            key={index}\n            onMouseDown={event => event.preventDefault()}\n            onClick={ev => {\n              ev.stopPropagation()\n              onClick(index)\n            }}\n            sx={{\n              maxWidth: 200,\n              px: 1,\n              py: \"5px\",\n              borderRadius: 1,\n              color: selectedIndex === index ? \"primary.main\" : undefined,\n              bgcolor: selectedIndex === index ? \"blue.900\" : \"overlay.surface\",\n              border: 1,\n              borderColor: \"transparent\",\n              \"&: hover\": {\n                borderColor: selectedIndex === index ? \"primary.main\" : \"outline.border\",\n              },\n            }}\n          >\n            <Typography\n              sx={{\n                textOverflow: \"ellipsis\",\n                fontFamily: \"body1.fontFamily\",\n                fontSize: 14,\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n              }}\n            >\n              {attribution.label}\n            </Typography>\n          </ButtonBase>\n        ))}\n      </ScrollCarousel>\n    </Box>\n  )\n}\nexport { InlineAttributionSelector }\n"],"names":["InlineAttributionSelector","attributions","onClick","selectedIndex","isMobile","useDeviceInfo","theme","useTheme","Box","sx","pb","w","pl","pr","ScrollCarousel","bgColor","palette","elevation","dp03","onArrowMouseDown","event","preventDefault","paddingRight","gap","map","attribution","index","ButtonBase","onMouseDown","ev","stopPropagation","maxWidth","px","py","borderRadius","color","undefined","bgcolor","border","borderColor","Typography","textOverflow","fontFamily","fontSize","whiteSpace","overflow","label"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgESA;;;eAAAA;;;;qCAhEsB;uBACD;sBACwB;AAQtD,MAAMA,4BAA4B,CAAC,EAAEC,YAAY,EAAEC,OAAO,EAAEC,aAAa,EAAS;IAChF,MAAM,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,oBAAa;IAClC,MAAMC,QAAQC,IAAAA,cAAQ;IACtB,qBACE,qBAACC,SAAG;QAACC,IAAI;YAAEC,IAAI;YAAKC,GAAG;YAAGC,IAAIR,WAAW,MAAM;YAAGS,IAAIT,WAAW,IAAI;QAAE;kBACrE,cAAA,qBAACU,mCAAc;YACbC,SAAST,MAAMU,OAAO,CAACC,SAAS,CAACC,IAAI;YACrCC,kBAAkBC,CAAAA,QAASA,MAAMC,cAAc;YAC/CZ,IAAI;gBACF,WAAW;oBACTa,cAAclB,WAAW,IAAI;oBAC7BmB,KAAK;gBACP;YACF;sBAECtB,aAAauB,GAAG,CAAC,CAACC,aAAaC,sBAC9B,qBAACC,gBAAU;oBAETC,aAAaR,CAAAA,QAASA,MAAMC,cAAc;oBAC1CnB,SAAS2B,CAAAA;wBACPA,GAAGC,eAAe;wBAClB5B,QAAQwB;oBACV;oBACAjB,IAAI;wBACFsB,UAAU;wBACVC,IAAI;wBACJC,IAAI;wBACJC,cAAc;wBACdC,OAAOhC,kBAAkBuB,QAAQ,iBAAiBU;wBAClDC,SAASlC,kBAAkBuB,QAAQ,aAAa;wBAChDY,QAAQ;wBACRC,aAAa;wBACb,YAAY;4BACVA,aAAapC,kBAAkBuB,QAAQ,iBAAiB;wBAC1D;oBACF;8BAEA,cAAA,qBAACc,gBAAU;wBACT/B,IAAI;4BACFgC,cAAc;4BACdC,YAAY;4BACZC,UAAU;4BACVC,YAAY;4BACZC,UAAU;wBACZ;kCAECpB,YAAYqB,KAAK;;mBA7BfpB;;;AAoCjB"}