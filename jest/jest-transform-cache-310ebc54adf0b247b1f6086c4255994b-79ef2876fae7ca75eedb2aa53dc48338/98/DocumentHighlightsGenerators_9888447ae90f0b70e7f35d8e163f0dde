4f3ea1535fd2dfcec3038945579a341a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useChunkStyles: function() {
        return useChunkStyles;
    },
    useDetectionStyles: function() {
        return useDetectionStyles;
    },
    useEntitiesStyles: function() {
        return useEntitiesStyles;
    },
    useFindStyles: function() {
        return useFindStyles;
    },
    useKeywordStyles: function() {
        return useKeywordStyles;
    },
    useLimitedChunksStyles: function() {
        return useLimitedChunksStyles;
    },
    useRpJsonAnalyticsStyles: function() {
        return useRpJsonAnalyticsStyles;
    }
});
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _rpjson = require("@rp/react/web/rpjson");
const getBoldHighlightStyle = (theme)=>{
    return {
        color: theme.palette.text.primary,
        fontWeight: 700
    };
};
const useChunkStyles = (chunks, selectedSentence, highlight)=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    if (!chunks.length) return [];
    return chunks.map((chunk, index)=>chunk.sentences.map((sentence)=>{
            const defaultBackground = !highlight || sentence.pnum === 0 ? "transparent" : "#2F2F2F";
            return (0, _rpjson.highlightSentence)({
                backgroundColor: selectedSentence === index ? "#0E3141" : defaultBackground,
                paddingBlock: isMobile ? 2 : 3
            }, {
                sentenceNumber: sentence.snum,
                paragraphNumber: sentence.pnum
            });
        })).flat();
};
// We are going to assume that keywords are going to
// be the first on the finds array
const useKeywordStyles = (keywords, find, getHighlightStyle = getBoldHighlightStyle)=>{
    const theme = (0, _core.useTheme)();
    return (0, _utils.splitKeywords)(keywords).map((_, index)=>(0, _rpjson.highlightFinds)(getHighlightStyle(theme), {
            findIndex: index + (find ? 1 : 0)
        })[0]);
};
const useRpJsonAnalyticsStyles = (rpjson, showHighlight)=>{
    const theme = (0, _core.useTheme)();
    if (!showHighlight) return [];
    return [
        (0, _rpjson.highlightAllEntities)(getBoldHighlightStyle(theme))
    ];
};
const useEntitiesStyles = (entities, showHighlight, getHighlightStyle = getBoldHighlightStyle)=>{
    const theme = (0, _core.useTheme)();
    const queryEntities = showHighlight ? entities.map((id)=>(0, _rpjson.highlightEntity)(getHighlightStyle(theme), {
            id
        })) : [];
    return queryEntities;
};
const useFindStyles = (find, selectedIndex)=>{
    const theme = (0, _core.useTheme)();
    if (!find) return [];
    return (0, _rpjson.highlightFinds)({
        backgroundColor: theme.palette.primary.light,
        color: theme.palette.surface.main,
        "& span": {
            color: `${theme.palette.surface.main} !important`
        }
    }, {
        selectedIndex: selectedIndex - 1,
        selectedStyle: {
            backgroundColor: "#FFB26B",
            color: theme.palette.surface.main
        }
    });
};
const useDetectionStyles = (pnum, snum)=>{
    if (pnum === undefined || snum === undefined) {
        return [];
    }
    return [
        (0, _rpjson.highlightSentence)({
            backgroundColor: "#0E3141",
            paddingBlock: 3
        }, {
            sentenceNumber: snum,
            paragraphNumber: pnum
        })
    ];
};
const useLimitedChunksStyles = (chunk)=>{
    if (!chunk) return [];
    return chunk.sentences.map(({ pnum, snum })=>{
        return [
            (0, _rpjson.highlightSentence)({
                // display: "none",
                backgroundColor: pnum === 0 ? "#0E3141" : undefined,
                paddingBlock: 2,
                lineHeight: "33px"
            }, {
                sentenceNumber: snum,
                paragraphNumber: pnum
            })
        ];
    }).flat();
};

//# sourceMappingURL=data:application/json;base64,