60c8d7b048c99fa5441a4773afafa231
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "companyIncomeStatement", {
    enumerable: true,
    get: function() {
        return companyIncomeStatement;
    }
});
const _acceptedDate = require("./acceptedDate");
const _bottomLineNetIncome = require("./bottomLineNetIncome");
const _cik = require("./cik");
const _costAndExpenses = require("./costAndExpenses");
const _costOfRevenue = require("./costOfRevenue");
const _date = require("./date");
const _depreciationAndAmortization = require("./depreciationAndAmortization");
const _ebit = require("./ebit");
const _ebitda = require("./ebitda");
const _eps = require("./eps");
const _epsDiluted = require("./epsDiluted");
const _filingDate = require("./filingDate");
const _fiscalYear = require("./fiscalYear");
const _fiscalYearAndPeriod = require("./fiscalYearAndPeriod");
const _generalAndAdministrativeExpenses = require("./generalAndAdministrativeExpenses");
const _grossProfit = require("./grossProfit");
const _incomeBeforeTax = require("./incomeBeforeTax");
const _incomeTaxExpense = require("./incomeTaxExpense");
const _interestExpense = require("./interestExpense");
const _interestIncome = require("./interestIncome");
const _netIncome = require("./netIncome");
const _netIncomeDeductions = require("./netIncomeDeductions");
const _netIncomeFromContinuingOperations = require("./netIncomeFromContinuingOperations");
const _netIncomeFromDiscontinuedOperations = require("./netIncomeFromDiscontinuedOperations");
const _netInterestIncome = require("./netInterestIncome");
const _nonOperatingIncomeExcludingInterest = require("./nonOperatingIncomeExcludingInterest");
const _operatingExpenses = require("./operatingExpenses");
const _operatingIncome = require("./operatingIncome");
const _otherAdjustmentsToNetIncome = require("./otherAdjustmentsToNetIncome");
const _otherExpenses = require("./otherExpenses");
const _period = require("./period");
const _reportedCurrency = require("./reportedCurrency");
const _researchAndDevelopmentExpenses = require("./researchAndDevelopmentExpenses");
const _revenue = require("./revenue");
const _sellingAndMarketingExpenses = require("./sellingAndMarketingExpenses");
const _sellingGeneralAndAdministrativeExpenses = require("./sellingGeneralAndAdministrativeExpenses");
const _totalOtherIncomeExpensesNet = require("./totalOtherIncomeExpensesNet");
const _weightedAverageShsOut = require("./weightedAverageShsOut");
const _weightedAverageShsOutDil = require("./weightedAverageShsOutDil");
const companyIncomeStatement = {
    acceptedDate: _acceptedDate.acceptedDate,
    bottomLineNetIncome: _bottomLineNetIncome.bottomLineNetIncome,
    cik: _cik.cik,
    costAndExpenses: _costAndExpenses.costAndExpenses,
    costOfRevenue: _costOfRevenue.costOfRevenue,
    date: _date.date,
    depreciationAndAmortization: _depreciationAndAmortization.depreciationAndAmortization,
    ebit: _ebit.ebit,
    ebitda: _ebitda.ebitda,
    eps: _eps.eps,
    epsDiluted: _epsDiluted.epsDiluted,
    filingDate: _filingDate.filingDate,
    fiscalYear: _fiscalYear.fiscalYear,
    fiscalYearAndPeriod: _fiscalYearAndPeriod.fiscalYearAndPeriod,
    generalAndAdministrativeExpenses: _generalAndAdministrativeExpenses.generalAndAdministrativeExpenses,
    grossProfit: _grossProfit.grossProfit,
    incomeBeforeTax: _incomeBeforeTax.incomeBeforeTax,
    incomeTaxExpense: _incomeTaxExpense.incomeTaxExpense,
    interestExpense: _interestExpense.interestExpense,
    interestIncome: _interestIncome.interestIncome,
    netIncome: _netIncome.netIncome,
    netIncomeDeductions: _netIncomeDeductions.netIncomeDeductions,
    netIncomeFromContinuingOperations: _netIncomeFromContinuingOperations.netIncomeFromContinuingOperations,
    netIncomeFromDiscontinuedOperations: _netIncomeFromDiscontinuedOperations.netIncomeFromDiscontinuedOperations,
    netInterestIncome: _netInterestIncome.netInterestIncome,
    nonOperatingIncomeExcludingInterest: _nonOperatingIncomeExcludingInterest.nonOperatingIncomeExcludingInterest,
    operatingIncome: _operatingIncome.operatingIncome,
    operatingExpenses: _operatingExpenses.operatingExpenses,
    otherAdjustmentsToNetIncome: _otherAdjustmentsToNetIncome.otherAdjustmentsToNetIncome,
    otherExpenses: _otherExpenses.otherExpenses,
    period: _period.period,
    reportedCurrency: _reportedCurrency.reportedCurrency,
    researchAndDevelopmentExpenses: _researchAndDevelopmentExpenses.researchAndDevelopmentExpenses,
    revenue: _revenue.revenue,
    sellingAndMarketingExpenses: _sellingAndMarketingExpenses.sellingAndMarketingExpenses,
    sellingGeneralAndAdministrativeExpenses: _sellingGeneralAndAdministrativeExpenses.sellingGeneralAndAdministrativeExpenses,
    totalOtherIncomeExpensesNet: _totalOtherIncomeExpensesNet.totalOtherIncomeExpensesNet,
    weightedAverageShsOut: _weightedAverageShsOut.weightedAverageShsOut,
    weightedAverageShsOutDil: _weightedAverageShsOutDil.weightedAverageShsOutDil
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3REYXRhVGFicy9lbmRwb2ludHMvY29tcGFueUluY29tZVN0YXRlbWVudC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhY2NlcHRlZERhdGUgfSBmcm9tIFwiLi9hY2NlcHRlZERhdGVcIlxuaW1wb3J0IHsgYm90dG9tTGluZU5ldEluY29tZSB9IGZyb20gXCIuL2JvdHRvbUxpbmVOZXRJbmNvbWVcIlxuaW1wb3J0IHsgY2lrIH0gZnJvbSBcIi4vY2lrXCJcbmltcG9ydCB7IGNvc3RBbmRFeHBlbnNlcyB9IGZyb20gXCIuL2Nvc3RBbmRFeHBlbnNlc1wiXG5pbXBvcnQgeyBjb3N0T2ZSZXZlbnVlIH0gZnJvbSBcIi4vY29zdE9mUmV2ZW51ZVwiXG5pbXBvcnQgeyBkYXRlIH0gZnJvbSBcIi4vZGF0ZVwiXG5pbXBvcnQgeyBkZXByZWNpYXRpb25BbmRBbW9ydGl6YXRpb24gfSBmcm9tIFwiLi9kZXByZWNpYXRpb25BbmRBbW9ydGl6YXRpb25cIlxuaW1wb3J0IHsgZWJpdCB9IGZyb20gXCIuL2ViaXRcIlxuaW1wb3J0IHsgZWJpdGRhIH0gZnJvbSBcIi4vZWJpdGRhXCJcbmltcG9ydCB7IGVwcyB9IGZyb20gXCIuL2Vwc1wiXG5pbXBvcnQgeyBlcHNEaWx1dGVkIH0gZnJvbSBcIi4vZXBzRGlsdXRlZFwiXG5pbXBvcnQgeyBmaWxpbmdEYXRlIH0gZnJvbSBcIi4vZmlsaW5nRGF0ZVwiXG5pbXBvcnQgeyBmaXNjYWxZZWFyIH0gZnJvbSBcIi4vZmlzY2FsWWVhclwiXG5pbXBvcnQgeyBmaXNjYWxZZWFyQW5kUGVyaW9kIH0gZnJvbSBcIi4vZmlzY2FsWWVhckFuZFBlcmlvZFwiXG5pbXBvcnQgeyBnZW5lcmFsQW5kQWRtaW5pc3RyYXRpdmVFeHBlbnNlcyB9IGZyb20gXCIuL2dlbmVyYWxBbmRBZG1pbmlzdHJhdGl2ZUV4cGVuc2VzXCJcbmltcG9ydCB7IGdyb3NzUHJvZml0IH0gZnJvbSBcIi4vZ3Jvc3NQcm9maXRcIlxuaW1wb3J0IHsgaW5jb21lQmVmb3JlVGF4IH0gZnJvbSBcIi4vaW5jb21lQmVmb3JlVGF4XCJcbmltcG9ydCB7IGluY29tZVRheEV4cGVuc2UgfSBmcm9tIFwiLi9pbmNvbWVUYXhFeHBlbnNlXCJcbmltcG9ydCB7IGludGVyZXN0RXhwZW5zZSB9IGZyb20gXCIuL2ludGVyZXN0RXhwZW5zZVwiXG5pbXBvcnQgeyBpbnRlcmVzdEluY29tZSB9IGZyb20gXCIuL2ludGVyZXN0SW5jb21lXCJcbmltcG9ydCB7IG5ldEluY29tZSB9IGZyb20gXCIuL25ldEluY29tZVwiXG5pbXBvcnQgeyBuZXRJbmNvbWVEZWR1Y3Rpb25zIH0gZnJvbSBcIi4vbmV0SW5jb21lRGVkdWN0aW9uc1wiXG5pbXBvcnQgeyBuZXRJbmNvbWVGcm9tQ29udGludWluZ09wZXJhdGlvbnMgfSBmcm9tIFwiLi9uZXRJbmNvbWVGcm9tQ29udGludWluZ09wZXJhdGlvbnNcIlxuaW1wb3J0IHsgbmV0SW5jb21lRnJvbURpc2NvbnRpbnVlZE9wZXJhdGlvbnMgfSBmcm9tIFwiLi9uZXRJbmNvbWVGcm9tRGlzY29udGludWVkT3BlcmF0aW9uc1wiXG5pbXBvcnQgeyBuZXRJbnRlcmVzdEluY29tZSB9IGZyb20gXCIuL25ldEludGVyZXN0SW5jb21lXCJcbmltcG9ydCB7IG5vbk9wZXJhdGluZ0luY29tZUV4Y2x1ZGluZ0ludGVyZXN0IH0gZnJvbSBcIi4vbm9uT3BlcmF0aW5nSW5jb21lRXhjbHVkaW5nSW50ZXJlc3RcIlxuaW1wb3J0IHsgb3BlcmF0aW5nRXhwZW5zZXMgfSBmcm9tIFwiLi9vcGVyYXRpbmdFeHBlbnNlc1wiXG5pbXBvcnQgeyBvcGVyYXRpbmdJbmNvbWUgfSBmcm9tIFwiLi9vcGVyYXRpbmdJbmNvbWVcIlxuaW1wb3J0IHsgb3RoZXJBZGp1c3RtZW50c1RvTmV0SW5jb21lIH0gZnJvbSBcIi4vb3RoZXJBZGp1c3RtZW50c1RvTmV0SW5jb21lXCJcbmltcG9ydCB7IG90aGVyRXhwZW5zZXMgfSBmcm9tIFwiLi9vdGhlckV4cGVuc2VzXCJcbmltcG9ydCB7IHBlcmlvZCB9IGZyb20gXCIuL3BlcmlvZFwiXG5pbXBvcnQgeyByZXBvcnRlZEN1cnJlbmN5IH0gZnJvbSBcIi4vcmVwb3J0ZWRDdXJyZW5jeVwiXG5pbXBvcnQgeyByZXNlYXJjaEFuZERldmVsb3BtZW50RXhwZW5zZXMgfSBmcm9tIFwiLi9yZXNlYXJjaEFuZERldmVsb3BtZW50RXhwZW5zZXNcIlxuaW1wb3J0IHsgcmV2ZW51ZSB9IGZyb20gXCIuL3JldmVudWVcIlxuaW1wb3J0IHsgc2VsbGluZ0FuZE1hcmtldGluZ0V4cGVuc2VzIH0gZnJvbSBcIi4vc2VsbGluZ0FuZE1hcmtldGluZ0V4cGVuc2VzXCJcbmltcG9ydCB7IHNlbGxpbmdHZW5lcmFsQW5kQWRtaW5pc3RyYXRpdmVFeHBlbnNlcyB9IGZyb20gXCIuL3NlbGxpbmdHZW5lcmFsQW5kQWRtaW5pc3RyYXRpdmVFeHBlbnNlc1wiXG5pbXBvcnQgeyB0b3RhbE90aGVySW5jb21lRXhwZW5zZXNOZXQgfSBmcm9tIFwiLi90b3RhbE90aGVySW5jb21lRXhwZW5zZXNOZXRcIlxuaW1wb3J0IHsgd2VpZ2h0ZWRBdmVyYWdlU2hzT3V0IH0gZnJvbSBcIi4vd2VpZ2h0ZWRBdmVyYWdlU2hzT3V0XCJcbmltcG9ydCB7IHdlaWdodGVkQXZlcmFnZVNoc091dERpbCB9IGZyb20gXCIuL3dlaWdodGVkQXZlcmFnZVNoc091dERpbFwiXG5cbmNvbnN0IGNvbXBhbnlJbmNvbWVTdGF0ZW1lbnQgPSB7XG4gIGFjY2VwdGVkRGF0ZSxcbiAgYm90dG9tTGluZU5ldEluY29tZSxcbiAgY2lrLFxuICBjb3N0QW5kRXhwZW5zZXMsXG4gIGNvc3RPZlJldmVudWUsXG4gIGRhdGUsXG4gIGRlcHJlY2lhdGlvbkFuZEFtb3J0aXphdGlvbixcbiAgZWJpdCxcbiAgZWJpdGRhLFxuICBlcHMsXG4gIGVwc0RpbHV0ZWQsXG4gIGZpbGluZ0RhdGUsXG4gIGZpc2NhbFllYXIsXG4gIGZpc2NhbFllYXJBbmRQZXJpb2QsXG4gIGdlbmVyYWxBbmRBZG1pbmlzdHJhdGl2ZUV4cGVuc2VzLFxuICBncm9zc1Byb2ZpdCxcbiAgaW5jb21lQmVmb3JlVGF4LFxuICBpbmNvbWVUYXhFeHBlbnNlLFxuICBpbnRlcmVzdEV4cGVuc2UsXG4gIGludGVyZXN0SW5jb21lLFxuICBuZXRJbmNvbWUsXG4gIG5ldEluY29tZURlZHVjdGlvbnMsXG4gIG5ldEluY29tZUZyb21Db250aW51aW5nT3BlcmF0aW9ucyxcbiAgbmV0SW5jb21lRnJvbURpc2NvbnRpbnVlZE9wZXJhdGlvbnMsXG4gIG5ldEludGVyZXN0SW5jb21lLFxuICBub25PcGVyYXRpbmdJbmNvbWVFeGNsdWRpbmdJbnRlcmVzdCxcbiAgb3BlcmF0aW5nSW5jb21lLFxuICBvcGVyYXRpbmdFeHBlbnNlcyxcbiAgb3RoZXJBZGp1c3RtZW50c1RvTmV0SW5jb21lLFxuICBvdGhlckV4cGVuc2VzLFxuICBwZXJpb2QsXG4gIHJlcG9ydGVkQ3VycmVuY3ksXG4gIHJlc2VhcmNoQW5kRGV2ZWxvcG1lbnRFeHBlbnNlcyxcbiAgcmV2ZW51ZSxcbiAgc2VsbGluZ0FuZE1hcmtldGluZ0V4cGVuc2VzLFxuICBzZWxsaW5nR2VuZXJhbEFuZEFkbWluaXN0cmF0aXZlRXhwZW5zZXMsXG4gIHRvdGFsT3RoZXJJbmNvbWVFeHBlbnNlc05ldCxcbiAgd2VpZ2h0ZWRBdmVyYWdlU2hzT3V0LFxuICB3ZWlnaHRlZEF2ZXJhZ2VTaHNPdXREaWwsXG59XG5cbmV4cG9ydCB7IGNvbXBhbnlJbmNvbWVTdGF0ZW1lbnQgfVxuIl0sIm5hbWVzIjpbImNvbXBhbnlJbmNvbWVTdGF0ZW1lbnQiLCJhY2NlcHRlZERhdGUiLCJib3R0b21MaW5lTmV0SW5jb21lIiwiY2lrIiwiY29zdEFuZEV4cGVuc2VzIiwiY29zdE9mUmV2ZW51ZSIsImRhdGUiLCJkZXByZWNpYXRpb25BbmRBbW9ydGl6YXRpb24iLCJlYml0IiwiZWJpdGRhIiwiZXBzIiwiZXBzRGlsdXRlZCIsImZpbGluZ0RhdGUiLCJmaXNjYWxZZWFyIiwiZmlzY2FsWWVhckFuZFBlcmlvZCIsImdlbmVyYWxBbmRBZG1pbmlzdHJhdGl2ZUV4cGVuc2VzIiwiZ3Jvc3NQcm9maXQiLCJpbmNvbWVCZWZvcmVUYXgiLCJpbmNvbWVUYXhFeHBlbnNlIiwiaW50ZXJlc3RFeHBlbnNlIiwiaW50ZXJlc3RJbmNvbWUiLCJuZXRJbmNvbWUiLCJuZXRJbmNvbWVEZWR1Y3Rpb25zIiwibmV0SW5jb21lRnJvbUNvbnRpbnVpbmdPcGVyYXRpb25zIiwibmV0SW5jb21lRnJvbURpc2NvbnRpbnVlZE9wZXJhdGlvbnMiLCJuZXRJbnRlcmVzdEluY29tZSIsIm5vbk9wZXJhdGluZ0luY29tZUV4Y2x1ZGluZ0ludGVyZXN0Iiwib3BlcmF0aW5nSW5jb21lIiwib3BlcmF0aW5nRXhwZW5zZXMiLCJvdGhlckFkanVzdG1lbnRzVG9OZXRJbmNvbWUiLCJvdGhlckV4cGVuc2VzIiwicGVyaW9kIiwicmVwb3J0ZWRDdXJyZW5jeSIsInJlc2VhcmNoQW5kRGV2ZWxvcG1lbnRFeHBlbnNlcyIsInJldmVudWUiLCJzZWxsaW5nQW5kTWFya2V0aW5nRXhwZW5zZXMiLCJzZWxsaW5nR2VuZXJhbEFuZEFkbWluaXN0cmF0aXZlRXhwZW5zZXMiLCJ0b3RhbE90aGVySW5jb21lRXhwZW5zZXNOZXQiLCJ3ZWlnaHRlZEF2ZXJhZ2VTaHNPdXQiLCJ3ZWlnaHRlZEF2ZXJhZ2VTaHNPdXREaWwiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBa0ZTQTs7O2VBQUFBOzs7OEJBbEZvQjtxQ0FDTztxQkFDaEI7aUNBQ1k7K0JBQ0Y7c0JBQ1Q7NkNBQ3VCO3NCQUN2Qjt3QkFDRTtxQkFDSDs0QkFDTzs0QkFDQTs0QkFDQTtxQ0FDUztrREFDYTs2QkFDckI7aUNBQ0k7a0NBQ0M7aUNBQ0Q7Z0NBQ0Q7MkJBQ0w7cUNBQ1U7bURBQ2M7cURBQ0U7bUNBQ2xCO3FEQUNrQjttQ0FDbEI7aUNBQ0Y7NkNBQ1k7K0JBQ2Q7d0JBQ1A7a0NBQ1U7Z0RBQ2M7eUJBQ3ZCOzZDQUNvQjt5REFDWTs2Q0FDWjt1Q0FDTjswQ0FDRztBQUV6QyxNQUFNQSx5QkFBeUI7SUFDN0JDLGNBQUFBLDBCQUFZO0lBQ1pDLHFCQUFBQSx3Q0FBbUI7SUFDbkJDLEtBQUFBLFFBQUc7SUFDSEMsaUJBQUFBLGdDQUFlO0lBQ2ZDLGVBQUFBLDRCQUFhO0lBQ2JDLE1BQUFBLFVBQUk7SUFDSkMsNkJBQUFBLHdEQUEyQjtJQUMzQkMsTUFBQUEsVUFBSTtJQUNKQyxRQUFBQSxjQUFNO0lBQ05DLEtBQUFBLFFBQUc7SUFDSEMsWUFBQUEsc0JBQVU7SUFDVkMsWUFBQUEsc0JBQVU7SUFDVkMsWUFBQUEsc0JBQVU7SUFDVkMscUJBQUFBLHdDQUFtQjtJQUNuQkMsa0NBQUFBLGtFQUFnQztJQUNoQ0MsYUFBQUEsd0JBQVc7SUFDWEMsaUJBQUFBLGdDQUFlO0lBQ2ZDLGtCQUFBQSxrQ0FBZ0I7SUFDaEJDLGlCQUFBQSxnQ0FBZTtJQUNmQyxnQkFBQUEsOEJBQWM7SUFDZEMsV0FBQUEsb0JBQVM7SUFDVEMscUJBQUFBLHdDQUFtQjtJQUNuQkMsbUNBQUFBLG9FQUFpQztJQUNqQ0MscUNBQUFBLHdFQUFtQztJQUNuQ0MsbUJBQUFBLG9DQUFpQjtJQUNqQkMscUNBQUFBLHdFQUFtQztJQUNuQ0MsaUJBQUFBLGdDQUFlO0lBQ2ZDLG1CQUFBQSxvQ0FBaUI7SUFDakJDLDZCQUFBQSx3REFBMkI7SUFDM0JDLGVBQUFBLDRCQUFhO0lBQ2JDLFFBQUFBLGNBQU07SUFDTkMsa0JBQUFBLGtDQUFnQjtJQUNoQkMsZ0NBQUFBLDhEQUE4QjtJQUM5QkMsU0FBQUEsZ0JBQU87SUFDUEMsNkJBQUFBLHdEQUEyQjtJQUMzQkMseUNBQUFBLGdGQUF1QztJQUN2Q0MsNkJBQUFBLHdEQUEyQjtJQUMzQkMsdUJBQUFBLDRDQUFxQjtJQUNyQkMsMEJBQUFBLGtEQUF3QjtBQUMxQiJ9