{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/brief/src/hooks/useGetBriefInitialData.ts"],"sourcesContent":["import { useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { useUser } from \"@clerk/clerk-react\"\nimport { BriefConfigForm, useBriefConfigById } from \"@rp/react/tanstack-api/brief\"\nimport { convertScheduleToCronExp } from \"../utils\"\n\ntype UseGetBriefInitialDataProps = {\n  isEdit: boolean\n}\n\ntype UseGetBriefInitialDataState = {\n  isLoadingInitialBriefData: boolean\n  initialBriefData: BriefConfigForm | null\n  briefConfigId: string | null\n}\n\nconst useGetBriefInitialData = ({\n  isEdit,\n}: UseGetBriefInitialDataProps): UseGetBriefInitialDataState => {\n  const { briefId } = useParams()\n  const { data: briefConfig } = useBriefConfigById({ briefId })\n  const { isLoaded } = useUser()\n\n  const initialData = useMemo(() => {\n    if (isEdit && !!briefConfig && isLoaded) {\n      const initialBriefData: BriefConfigForm = {\n        name: briefConfig.briefName,\n        schedule: {\n          schedulerExpression: convertScheduleToCronExp(briefConfig.schedule),\n          timezone: briefConfig.schedule.timezone,\n          destination: briefConfig.deliveryModes[0],\n          destinationParams: { emails: [briefConfig.email] },\n        },\n        watchlistId: briefConfig.watchlistIds[0],\n      }\n\n      return { isLoadingInitialBriefData: false, initialBriefData }\n    }\n\n    return {\n      isLoadingInitialBriefData: true,\n      initialBriefData: null,\n    }\n  }, [briefConfig, isEdit, isLoaded])\n\n  return {\n    isLoadingInitialBriefData: initialData.isLoadingInitialBriefData,\n    initialBriefData: initialData.initialBriefData,\n    briefConfigId: briefConfig?.id ?? null,\n  }\n}\n\nexport { useGetBriefInitialData }\nexport type { UseGetBriefInitialDataProps, UseGetBriefInitialDataState }\n"],"names":["useGetBriefInitialData","isEdit","briefId","useParams","data","briefConfig","useBriefConfigById","isLoaded","useUser","initialData","useMemo","initialBriefData","name","briefName","schedule","schedulerExpression","convertScheduleToCronExp","timezone","destination","deliveryModes","destinationParams","emails","email","watchlistId","watchlistIds","isLoadingInitialBriefData","briefConfigId","id"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoDSA;;;eAAAA;;;uBApDe;gCACE;4BACF;uBAC4B;uBACX;AAYzC,MAAMA,yBAAyB,CAAC,EAC9BC,MAAM,EACsB;IAC5B,MAAM,EAAEC,OAAO,EAAE,GAAGC,IAAAA,yBAAS;IAC7B,MAAM,EAAEC,MAAMC,WAAW,EAAE,GAAGC,IAAAA,yBAAkB,EAAC;QAAEJ;IAAQ;IAC3D,MAAM,EAAEK,QAAQ,EAAE,GAAGC,IAAAA,mBAAO;IAE5B,MAAMC,cAAcC,IAAAA,cAAO,EAAC;QAC1B,IAAIT,UAAU,CAAC,CAACI,eAAeE,UAAU;YACvC,MAAMI,mBAAoC;gBACxCC,MAAMP,YAAYQ,SAAS;gBAC3BC,UAAU;oBACRC,qBAAqBC,IAAAA,+BAAwB,EAACX,YAAYS,QAAQ;oBAClEG,UAAUZ,YAAYS,QAAQ,CAACG,QAAQ;oBACvCC,aAAab,YAAYc,aAAa,CAAC,EAAE;oBACzCC,mBAAmB;wBAAEC,QAAQ;4BAAChB,YAAYiB,KAAK;yBAAC;oBAAC;gBACnD;gBACAC,aAAalB,YAAYmB,YAAY,CAAC,EAAE;YAC1C;YAEA,OAAO;gBAAEC,2BAA2B;gBAAOd;YAAiB;QAC9D;QAEA,OAAO;YACLc,2BAA2B;YAC3Bd,kBAAkB;QACpB;IACF,GAAG;QAACN;QAAaJ;QAAQM;KAAS;QAKjBF;IAHjB,OAAO;QACLoB,2BAA2BhB,YAAYgB,yBAAyB;QAChEd,kBAAkBF,YAAYE,gBAAgB;QAC9Ce,eAAerB,CAAAA,kBAAAA,wBAAAA,kCAAAA,YAAasB,EAAE,cAAftB,6BAAAA,kBAAmB;IACpC;AACF"}