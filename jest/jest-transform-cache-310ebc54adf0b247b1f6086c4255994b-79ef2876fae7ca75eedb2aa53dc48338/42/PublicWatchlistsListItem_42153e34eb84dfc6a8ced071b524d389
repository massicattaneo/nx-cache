611858ccb24087b69dddbbe79d19525d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PublicWatchlistsListItem", {
    enumerable: true,
    get: function() {
        return PublicWatchlistsListItem;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _utils = require("@rp/common/utils");
const _watchlists = require("@rp/react/common/watchlists");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _router = require("@rp/react/web/router");
const _useWatchlistsActions = require("../hooks/useWatchlistsActions");
const PublicWatchlistsListItem = ({ item, columnsWidth })=>{
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { user } = (0, _clerkreact.useUser)();
    const { share, copy, search, favorite } = (0, _useWatchlistsActions.useWatchlistsActions)();
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const [openMenu, setOpenMenu] = (0, _react.useState)(false);
    const actions = [
        share,
        favorite,
        copy,
        search
    ];
    const { displayName, name, avatar } = (0, _watchlists.getWatchlistOwnerInfo)(item, user);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
        sx: {
            "&:hover": {
                backgroundColor: "grey.800"
            },
            gap: 0,
            "& > div": {
                pr: 2
            },
            "& > div:last-of-type": {
                pr: 0
            }
        },
        selected: openMenu,
        onRowClick: ()=>{
            if (isMobile) {
                navigate(_router.WATCHLIST_EDIT.replace(":id", item.id));
            } else {
                navigate(_router.WATCHLIST_ID_ROUTE.replace(":id", item.id));
            }
        },
        columnsWidth: columnsWidth,
        columns: [
            {
                text: item.name
            },
            {
                text: `${(0, _utils.formatTime)(item.lastUpdated)} Â· ${displayName}`,
                node: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        display: "flex",
                        alignItems: "center",
                        gap: 1
                    },
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.UserAvatar, {
                            imgUrl: avatar,
                            hasImage: !!avatar,
                            ownerName: name
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.EllipsisTooltip, {
                            tooltipText: name,
                            typographyProps: {
                                fontSize: 14
                            },
                            children: displayName
                        })
                    ]
                })
            },
            {
                text: (0, _utils.formatTime)(item.lastUpdated)
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                    sx: {
                        display: "flex",
                        justifyContent: "right",
                        alignItems: "center"
                    },
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.ActionsMenu, {
                        open: openMenu,
                        setOpen: setOpenMenu,
                        actions: actions,
                        item: item
                    })
                })
            }
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL3dhdGNobGlzdHMvc3JjL2xpYi9XYXRjaGxpc3RzTGlzdFZpZXcvUHVibGljV2F0Y2hsaXN0c0xpc3RJdGVtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCJcbmltcG9ydCB7IHVzZVVzZXIgfSBmcm9tIFwiQGNsZXJrL2NsZXJrLXJlYWN0XCJcbmltcG9ydCB7IE9yZ2FuaXphdGlvbk1lbWJlcnNoaXBSZXNvdXJjZSB9IGZyb20gXCJAY2xlcmsvdHlwZXNcIlxuaW1wb3J0IHsgV2F0Y2hsaXN0IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IGZvcm1hdFRpbWUgfSBmcm9tIFwiQHJwL2NvbW1vbi91dGlsc1wiXG5pbXBvcnQgeyBnZXRXYXRjaGxpc3RPd25lckluZm8gfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi93YXRjaGxpc3RzXCJcbmltcG9ydCB7IEFjdGlvbnNNZW51LCBVc2VyQXZhdGFyIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2Jhc2UtY29tcG9uZW50c1wiXG5pbXBvcnQgeyBFbGxpcHNpc1Rvb2x0aXAsIEh1YlRhYmxlUm93IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2NvbXBvc2l0ZS1jb21wb25lbnRzXCJcbmltcG9ydCB7IHVzZURldmljZUluZm8gfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vaG9va3NcIlxuaW1wb3J0IHsgQm94IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgV0FUQ0hMSVNUX0VESVQsIFdBVENITElTVF9JRF9ST1VURSB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL3JvdXRlclwiXG5pbXBvcnQgeyB1c2VXYXRjaGxpc3RzQWN0aW9ucyB9IGZyb20gXCIuLi9ob29rcy91c2VXYXRjaGxpc3RzQWN0aW9uc1wiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGl0ZW06IFdhdGNobGlzdCAmIHsgb3duZXI/OiBPcmdhbml6YXRpb25NZW1iZXJzaGlwUmVzb3VyY2UgfCB1bmRlZmluZWQgfVxuICBjb2x1bW5zV2lkdGg6IEFycmF5PHN0cmluZz5cbn1cblxuZXhwb3J0IGNvbnN0IFB1YmxpY1dhdGNobGlzdHNMaXN0SXRlbSA9ICh7IGl0ZW0sIGNvbHVtbnNXaWR0aCB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcbiAgY29uc3QgeyB1c2VyIH0gPSB1c2VVc2VyKClcbiAgY29uc3QgeyBzaGFyZSwgY29weSwgc2VhcmNoLCBmYXZvcml0ZSB9ID0gdXNlV2F0Y2hsaXN0c0FjdGlvbnMoKVxuICBjb25zdCB7IGlzTW9iaWxlIH0gPSB1c2VEZXZpY2VJbmZvKClcbiAgY29uc3QgW29wZW5NZW51LCBzZXRPcGVuTWVudV0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgY29uc3QgYWN0aW9ucyA9IFtzaGFyZSwgZmF2b3JpdGUsIGNvcHksIHNlYXJjaF1cbiAgY29uc3QgeyBkaXNwbGF5TmFtZSwgbmFtZSwgYXZhdGFyIH0gPSBnZXRXYXRjaGxpc3RPd25lckluZm8oaXRlbSwgdXNlcilcblxuICByZXR1cm4gKFxuICAgIDxIdWJUYWJsZVJvd1xuICAgICAgc3g9e3tcbiAgICAgICAgXCImOmhvdmVyXCI6IHsgYmFja2dyb3VuZENvbG9yOiBcImdyZXkuODAwXCIgfSxcbiAgICAgICAgZ2FwOiAwLFxuICAgICAgICBcIiYgPiBkaXZcIjogeyBwcjogMiB9LFxuICAgICAgICBcIiYgPiBkaXY6bGFzdC1vZi10eXBlXCI6IHsgcHI6IDAgfSxcbiAgICAgIH19XG4gICAgICBzZWxlY3RlZD17b3Blbk1lbnV9XG4gICAgICBvblJvd0NsaWNrPXsoKSA9PiB7XG4gICAgICAgIGlmIChpc01vYmlsZSkge1xuICAgICAgICAgIG5hdmlnYXRlKFdBVENITElTVF9FRElULnJlcGxhY2UoXCI6aWRcIiwgaXRlbS5pZCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmF2aWdhdGUoV0FUQ0hMSVNUX0lEX1JPVVRFLnJlcGxhY2UoXCI6aWRcIiwgaXRlbS5pZCkpXG4gICAgICAgIH1cbiAgICAgIH19XG4gICAgICBjb2x1bW5zV2lkdGg9e2NvbHVtbnNXaWR0aH1cbiAgICAgIGNvbHVtbnM9e1tcbiAgICAgICAgeyB0ZXh0OiBpdGVtLm5hbWUgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IGAke2Zvcm1hdFRpbWUoaXRlbS5sYXN0VXBkYXRlZCl9IMK3ICR7ZGlzcGxheU5hbWV9YCxcbiAgICAgICAgICBub2RlOiAoXG4gICAgICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBnYXA6IDEgfX0+XG4gICAgICAgICAgICAgIDxVc2VyQXZhdGFyIGltZ1VybD17YXZhdGFyfSBoYXNJbWFnZT17ISFhdmF0YXJ9IG93bmVyTmFtZT17bmFtZX0gLz5cbiAgICAgICAgICAgICAgPEVsbGlwc2lzVG9vbHRpcCB0b29sdGlwVGV4dD17bmFtZX0gdHlwb2dyYXBoeVByb3BzPXt7IGZvbnRTaXplOiAxNCB9fT5cbiAgICAgICAgICAgICAgICB7ZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgIDwvRWxsaXBzaXNUb29sdGlwPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgeyB0ZXh0OiBmb3JtYXRUaW1lKGl0ZW0ubGFzdFVwZGF0ZWQpIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiAoXG4gICAgICAgICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJyaWdodFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiIH19PlxuICAgICAgICAgICAgICA8QWN0aW9uc01lbnUgb3Blbj17b3Blbk1lbnV9IHNldE9wZW49e3NldE9wZW5NZW51fSBhY3Rpb25zPXthY3Rpb25zfSBpdGVtPXtpdGVtfSAvPlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgIF19XG4gICAgLz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlB1YmxpY1dhdGNobGlzdHNMaXN0SXRlbSIsIml0ZW0iLCJjb2x1bW5zV2lkdGgiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwidXNlciIsInVzZVVzZXIiLCJzaGFyZSIsImNvcHkiLCJzZWFyY2giLCJmYXZvcml0ZSIsInVzZVdhdGNobGlzdHNBY3Rpb25zIiwiaXNNb2JpbGUiLCJ1c2VEZXZpY2VJbmZvIiwib3Blbk1lbnUiLCJzZXRPcGVuTWVudSIsInVzZVN0YXRlIiwiYWN0aW9ucyIsImRpc3BsYXlOYW1lIiwibmFtZSIsImF2YXRhciIsImdldFdhdGNobGlzdE93bmVySW5mbyIsIkh1YlRhYmxlUm93Iiwic3giLCJiYWNrZ3JvdW5kQ29sb3IiLCJnYXAiLCJwciIsInNlbGVjdGVkIiwib25Sb3dDbGljayIsIldBVENITElTVF9FRElUIiwicmVwbGFjZSIsImlkIiwiV0FUQ0hMSVNUX0lEX1JPVVRFIiwiY29sdW1ucyIsInRleHQiLCJmb3JtYXRUaW1lIiwibGFzdFVwZGF0ZWQiLCJub2RlIiwiQm94IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJVc2VyQXZhdGFyIiwiaW1nVXJsIiwiaGFzSW1hZ2UiLCJvd25lck5hbWUiLCJFbGxpcHNpc1Rvb2x0aXAiLCJ0b29sdGlwVGV4dCIsInR5cG9ncmFwaHlQcm9wcyIsImZvbnRTaXplIiwianVzdGlmeUNvbnRlbnQiLCJBY3Rpb25zTWVudSIsIm9wZW4iLCJzZXRPcGVuIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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