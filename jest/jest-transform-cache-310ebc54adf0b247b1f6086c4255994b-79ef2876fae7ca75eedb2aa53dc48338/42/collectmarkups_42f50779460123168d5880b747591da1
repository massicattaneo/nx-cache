3ac5bd64c8985a4df196e76202134b70
/* eslint-disable no-param-reassign */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "collectMarkups", {
    enumerable: true,
    get: function() {
        return collectMarkups;
    }
});
const _constants = require("../constants");
const mapRpJsonEntity = (array = [], { textStartAt = 0 } = {})=>{
    return array.map((item)=>{
        return {
            rpJsonType: item.queryType,
            rpJsonId: item.key,
            id: item.id,
            start: item.start - textStartAt,
            end: item.end - textStartAt
        };
    });
};
const mapFind = (block, options = {})=>{
    const { finds = [], findsCounter = {} } = options;
    if (!finds.length) return [];
    const accumulator = [];
    return finds.filter((find)=>find).reduce((acc, find, findId)=>{
        const regExp = find instanceof RegExp ? find : new RegExp(find.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "gi") // Escape special character
        ;
        const source = find instanceof RegExp ? find.source : find;
        const item = Array.from(block.text.matchAll(regExp));
        findsCounter[findId] = findsCounter[findId] || 0;
        const findsMarkups = item.map((sub)=>{
            const count = findsCounter[findId]++;
            return {
                rpJsonId: `${_constants.CLASS_NAMES.FIND_PREFIX}${findId}-${count}`,
                id: `find-${source}-${findId}-${count}`,
                rpJsonType: `${_constants.TYPES.FIND}-${findId}`,
                start: sub.index || 0,
                end: sub.index ? sub.index + sub[0].length : sub[0].length
            };
        });
        return acc.concat(findsMarkups);
    }, accumulator);
};
const mapNewLines = (block, options = {})=>{
    const { idIterator = ()=>"" } = options;
    return Array.from(block.text.matchAll(/\n/g)).map((match)=>({
            isBreakLine: true,
            start: match.index || 0,
            end: match.index || 0,
            index: match.index,
            id: idIterator()
        }));
};
const collectMarkups = (block, rpJsonDetections, options = {})=>{
    const markups = [];
    const { performance = {} } = options;
    if (performance.markupDetections && Array.isArray(performance.markupDetections)) {
        const all = rpJsonDetections.entities.filter((i)=>{
            var _performance_markupDetections;
            return Array.isArray(performance.markupDetections) ? (_performance_markupDetections = performance.markupDetections) === null || _performance_markupDetections === void 0 ? void 0 : _performance_markupDetections.includes(i.key) : false;
        });
        markups.push(...mapRpJsonEntity(all, block));
    } else if (performance.markupDetections) {
        markups.push(...mapRpJsonEntity(rpJsonDetections.entities, block));
    }
    markups.push(...mapFind(block, options));
    if (performance.markupNewLines) {
        markups.push(...mapNewLines(block, options));
    }
    return {
        text: block.text,
        markups: markups.sort((first, second)=>first.start - second.start)
    };
};

//# sourceMappingURL=data:application/json;base64,