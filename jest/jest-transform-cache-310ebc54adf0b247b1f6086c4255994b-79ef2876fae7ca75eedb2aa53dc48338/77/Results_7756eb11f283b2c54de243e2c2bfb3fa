ad14292777f521174db0a8c7af1b4303
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Results", {
    enumerable: true,
    get: function() {
        return Results;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _clerkreact = require("@clerk/clerk-react");
const _hooks = require("@rp/react/web/common/hooks");
const _providers = require("@rp/react/web/common/providers");
const _utils = require("@rp/react/web/common/vendors/utils");
const _cqsquerycontext = require("@rp/react/web/cqs-query-context");
const _reactquery = require("@tanstack/react-query");
const _ResultsLayout = require("./ResultsLayout");
const _ResultsLayoutmobile = require("./ResultsLayout.mobile");
const Results = ()=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const { watchlistModal: { handleOpen: openWatchlistModal } } = (0, _providers.useModal)();
    const { user } = (0, _clerkreact.useUser)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const { uiState: { isLoading, isError }, savedQuery: { id, name, query, saveStatus, shared, ownerUserId }, actions: { expression: queryCQSActions }, queryId, searchQuery } = (0, _providers.useQueryContext)();
    const handleAddToWatchlist = (0, _hooks.useAddToWatchlistReset)(searchQuery.expression, queryId);
    const editable = ownerUserId && (user === null || user === void 0 ? void 0 : user.id) === ownerUserId;
    const handleOnChange = (0, _react.useCallback)((element)=>{
        const shouldRemove = element.queryRelationship === "direct";
        _utils.tagManagerEvents.queryRefinement({
            action: shouldRemove ? "remove" : "add",
            component: "documentPanel",
            queryId,
            queryType: element.queryType,
            savedStatus: saveStatus !== null && saveStatus !== void 0 ? saveStatus : "unsaved"
        });
        const filterItem = (0, _cqsquerycontext.convertDiscoveryPanelItem)(element);
        if (shouldRemove) {
            queryCQSActions.removeItem(filterItem);
            return;
        }
        queryCQSActions.addItem(filterItem);
    }, [
        queryCQSActions,
        queryId,
        saveStatus
    ]);
    const handleExclude = (0, _react.useCallback)((element)=>{
        const shouldUpdate = element.queryRelationship === "direct";
        _utils.tagManagerEvents.queryRefinement({
            action: shouldUpdate ? "changeOperation" : "add",
            component: "discoveryPanel",
            queryId,
            queryType: element.queryType,
            savedStatus: saveStatus !== null && saveStatus !== void 0 ? saveStatus : "unsaved"
        });
        const filterItem = (0, _cqsquerycontext.convertDiscoveryPanelItem)(element);
        queryCQSActions.excludeItemFromDP(filterItem, !shouldUpdate, ()=>{
            navigate(-1);
        });
    }, [
        navigate,
        queryCQSActions,
        queryId,
        saveStatus
    ]);
    (0, _react.useEffect)(()=>{
        return ()=>{
            // This ensure that every time we revisit a query we refetch the data
            queryClient.removeQueries({
                queryKey: [
                    "query",
                    id
                ]
            });
        };
    }, [
        id,
        queryClient
    ]);
    return isMobile ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ResultsLayoutmobile.ResultsLayoutMobile, {
        handleOnChange: handleOnChange,
        handleOnExclude: handleExclude,
        expression: query.expression,
        name: name,
        saveStatus: saveStatus,
        onAddToWatchlist: handleAddToWatchlist,
        isPublic: (shared === null || shared === void 0 ? void 0 : shared.company) && shared.company.permission !== "undefined",
        onHandleOpenModal: openWatchlistModal,
        editable: !!editable
    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_ResultsLayout.ResultsLayout, {
        handleOnChange: handleOnChange,
        handleOnExclude: handleExclude,
        saveStatus: saveStatus,
        name: name,
        editable: !!editable,
        expression: query.expression,
        isLoading: isLoading,
        isError: isError,
        onAddToWatchlist: handleAddToWatchlist,
        onHandleOpenModal: openWatchlistModal
    });
};

//# sourceMappingURL=data:application/json;base64,