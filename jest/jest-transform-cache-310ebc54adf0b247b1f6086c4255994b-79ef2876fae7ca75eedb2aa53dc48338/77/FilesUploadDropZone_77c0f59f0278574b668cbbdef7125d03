4abcacbc192e1dd61c84bc81d3d87d16
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesUploadDropZone", {
    enumerable: true,
    get: function() {
        return FilesUploadDropZone;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _adapters = require("@rp/adapters");
const _providers = require("@rp/react/common/providers");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _providers1 = require("@rp/react/web/common/providers");
const _FilesUploadOverlay = require("./FilesUploadOverlay");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
const FilesUploadDropZone = ({ children, disabled, customDropZoneAreaStyle = {}, customFileUploadOverlayStyle = {} })=>{
    const { isOverLimit } = (0, _file.useQuota)();
    const { enqueueError } = (0, _providers1.useSnackbar)();
    const { addToUploadQueue } = (0, _providers.useUploadFilesContext)();
    const onDrop = (0, _react.useCallback)((acceptedFiles)=>{
        if (isOverLimit) return;
        addToUploadQueue(acceptedFiles, {
            location: "filesPage"
        });
    }, [
        addToUploadQueue,
        isOverLimit
    ]);
    const onDropRejected = (0, _react.useCallback)((rejectedFiles)=>{
        // Invalid formats
        const files = [
            ...new Set(rejectedFiles.map((file)=>file.file.type))
        ];
        const notSupported = files.join(" ,").replace(/application|\/|image/gi, "");
        // Error Snackbar
        enqueueError(`The files format ${notSupported} are not supported.`, {
            autoHideDuration: 5000
        }, {
            action: /*#__PURE__*/ (0, _jsxruntime.jsx)(_providers1.ContactSupport, {})
        });
    }, [
        enqueueError
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.DropZone, {
        onDrop: onDrop,
        onDropRejected: onDropRejected,
        disabled: disabled,
        Overlay: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesUploadOverlay.FilesUploadOverlay, {
            style: customFileUploadOverlayStyle
        }),
        accept: _adapters.adapters.file.getTaExtension().join(", "),
        sx: {
            [`& .${_basecomponents.DROP_ZONE_AREA_CLASS_NAME}`]: _object_spread({
                display: "flex",
                flexGrow: 1,
                width: "100%",
                height: "100%",
                position: "relative",
                maxHeight: "100%",
                overflow: "hidden"
            }, customDropZoneAreaStyle)
        },
        multiple: true,
        children: children
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2ZpbGVzL3NyYy9saWIvRmlsZXNVcGxvYWREcm9wWm9uZS9GaWxlc1VwbG9hZERyb3Bab25lLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDU1NQcm9wZXJ0aWVzLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBGaWxlUmVqZWN0aW9uIH0gZnJvbSBcInJlYWN0LWRyb3B6b25lXCJcbmltcG9ydCB7IGFkYXB0ZXJzIH0gZnJvbSBcIkBycC9hZGFwdGVyc1wiXG5pbXBvcnQgeyB1c2VVcGxvYWRGaWxlc0NvbnRleHQgfSBmcm9tIFwiQHJwL3JlYWN0L2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgdXNlUXVvdGEgfSBmcm9tIFwiQHJwL3JlYWN0L3RhbnN0YWNrLWFwaS9maWxlXCJcbmltcG9ydCB7IERST1BfWk9ORV9BUkVBX0NMQVNTX05BTUUsIERyb3Bab25lIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL2Jhc2UtY29tcG9uZW50c1wiXG5pbXBvcnQgeyBDb250YWN0U3VwcG9ydCB9IGZyb20gXCJAcnAvcmVhY3Qvd2ViL2NvbW1vbi9wcm92aWRlcnNcIlxuaW1wb3J0IHsgdXNlU25hY2tiYXIgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vcHJvdmlkZXJzXCJcbmltcG9ydCB7IEZpbGVzVXBsb2FkT3ZlcmxheSB9IGZyb20gXCIuL0ZpbGVzVXBsb2FkT3ZlcmxheVwiXG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGVcbiAgZGlzYWJsZWQ/OiBib29sZWFuXG4gIGN1c3RvbURyb3Bab25lQXJlYVN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBjdXN0b21Ecm9wWm9uZVN0eWxlPzogQ1NTUHJvcGVydGllc1xuICBjdXN0b21GaWxlVXBsb2FkT3ZlcmxheVN0eWxlPzogQ1NTUHJvcGVydGllc1xufVxuXG5leHBvcnQgY29uc3QgRmlsZXNVcGxvYWREcm9wWm9uZSA9ICh7XG4gIGNoaWxkcmVuLFxuICBkaXNhYmxlZCxcbiAgY3VzdG9tRHJvcFpvbmVBcmVhU3R5bGUgPSB7fSxcbiAgY3VzdG9tRmlsZVVwbG9hZE92ZXJsYXlTdHlsZSA9IHt9LFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBpc092ZXJMaW1pdCB9ID0gdXNlUXVvdGEoKVxuICBjb25zdCB7IGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuICBjb25zdCB7IGFkZFRvVXBsb2FkUXVldWUgfSA9IHVzZVVwbG9hZEZpbGVzQ29udGV4dCgpXG5cbiAgY29uc3Qgb25Ecm9wID0gdXNlQ2FsbGJhY2soXG4gICAgKGFjY2VwdGVkRmlsZXM6IEFycmF5PEZpbGU+KSA9PiB7XG4gICAgICBpZiAoaXNPdmVyTGltaXQpIHJldHVyblxuICAgICAgYWRkVG9VcGxvYWRRdWV1ZShhY2NlcHRlZEZpbGVzLCB7XG4gICAgICAgIGxvY2F0aW9uOiBcImZpbGVzUGFnZVwiLFxuICAgICAgfSlcbiAgICB9LFxuICAgIFthZGRUb1VwbG9hZFF1ZXVlLCBpc092ZXJMaW1pdF0sXG4gIClcblxuICBjb25zdCBvbkRyb3BSZWplY3RlZCA9IHVzZUNhbGxiYWNrKFxuICAgIChyZWplY3RlZEZpbGVzOiBBcnJheTxGaWxlUmVqZWN0aW9uPikgPT4ge1xuICAgICAgLy8gSW52YWxpZCBmb3JtYXRzXG4gICAgICBjb25zdCBmaWxlczogQXJyYXk8c3RyaW5nPiA9IFtcbiAgICAgICAgLi4ubmV3IFNldDxzdHJpbmc+KHJlamVjdGVkRmlsZXMubWFwKChmaWxlOiBGaWxlUmVqZWN0aW9uKSA9PiBmaWxlLmZpbGUudHlwZSkpLFxuICAgICAgXVxuICAgICAgY29uc3Qgbm90U3VwcG9ydGVkID0gZmlsZXMuam9pbihcIiAsXCIpLnJlcGxhY2UoL2FwcGxpY2F0aW9ufFxcL3xpbWFnZS9naSwgXCJcIilcbiAgICAgIC8vIEVycm9yIFNuYWNrYmFyXG4gICAgICBlbnF1ZXVlRXJyb3IoXG4gICAgICAgIGBUaGUgZmlsZXMgZm9ybWF0ICR7bm90U3VwcG9ydGVkfSBhcmUgbm90IHN1cHBvcnRlZC5gLFxuICAgICAgICB7XG4gICAgICAgICAgYXV0b0hpZGVEdXJhdGlvbjogNTAwMCxcbiAgICAgICAgfSxcbiAgICAgICAgeyBhY3Rpb246IDxDb250YWN0U3VwcG9ydCAvPiB9LFxuICAgICAgKVxuICAgIH0sXG4gICAgW2VucXVldWVFcnJvcl0sXG4gIClcblxuICByZXR1cm4gKFxuICAgIDxEcm9wWm9uZVxuICAgICAgb25Ecm9wPXtvbkRyb3B9XG4gICAgICBvbkRyb3BSZWplY3RlZD17b25Ecm9wUmVqZWN0ZWR9XG4gICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICBPdmVybGF5PXs8RmlsZXNVcGxvYWRPdmVybGF5IHN0eWxlPXtjdXN0b21GaWxlVXBsb2FkT3ZlcmxheVN0eWxlfSAvPn1cbiAgICAgIGFjY2VwdD17YWRhcHRlcnMuZmlsZS5nZXRUYUV4dGVuc2lvbigpLmpvaW4oXCIsIFwiKX1cbiAgICAgIHN4PXt7XG4gICAgICAgIFtgJiAuJHtEUk9QX1pPTkVfQVJFQV9DTEFTU19OQU1FfWBdOiB7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICBtYXhIZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIC4uLmN1c3RvbURyb3Bab25lQXJlYVN0eWxlLFxuICAgICAgICB9LFxuICAgICAgfX1cbiAgICAgIG11bHRpcGxlXG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRHJvcFpvbmU+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJGaWxlc1VwbG9hZERyb3Bab25lIiwiY2hpbGRyZW4iLCJkaXNhYmxlZCIsImN1c3RvbURyb3Bab25lQXJlYVN0eWxlIiwiY3VzdG9tRmlsZVVwbG9hZE92ZXJsYXlTdHlsZSIsImlzT3ZlckxpbWl0IiwidXNlUXVvdGEiLCJlbnF1ZXVlRXJyb3IiLCJ1c2VTbmFja2JhciIsImFkZFRvVXBsb2FkUXVldWUiLCJ1c2VVcGxvYWRGaWxlc0NvbnRleHQiLCJvbkRyb3AiLCJ1c2VDYWxsYmFjayIsImFjY2VwdGVkRmlsZXMiLCJsb2NhdGlvbiIsIm9uRHJvcFJlamVjdGVkIiwicmVqZWN0ZWRGaWxlcyIsImZpbGVzIiwiU2V0IiwibWFwIiwiZmlsZSIsInR5cGUiLCJub3RTdXBwb3J0ZWQiLCJqb2luIiwicmVwbGFjZSIsImF1dG9IaWRlRHVyYXRpb24iLCJhY3Rpb24iLCJDb250YWN0U3VwcG9ydCIsIkRyb3Bab25lIiwiT3ZlcmxheSIsIkZpbGVzVXBsb2FkT3ZlcmxheSIsInN0eWxlIiwiYWNjZXB0IiwiYWRhcHRlcnMiLCJnZXRUYUV4dGVuc2lvbiIsInN4IiwiRFJPUF9aT05FX0FSRUFfQ0xBU1NfTkFNRSIsImRpc3BsYXkiLCJmbGV4R3JvdyIsIndpZHRoIiwiaGVpZ2h0IiwicG9zaXRpb24iLCJtYXhIZWlnaHQiLCJvdmVyZmxvdyIsIm11bHRpcGxlIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkFrQmFBOzs7ZUFBQUE7Ozs7dUJBbEI4QjswQkFFbEI7MkJBQ2E7c0JBQ2I7Z0NBQzJCOzRCQUNyQjtvQ0FFSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVNUIsTUFBTUEsc0JBQXNCLENBQUMsRUFDbENDLFFBQVEsRUFDUkMsUUFBUSxFQUNSQywwQkFBMEIsQ0FBQyxDQUFDLEVBQzVCQywrQkFBK0IsQ0FBQyxDQUFDLEVBQzNCO0lBQ04sTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBR0MsSUFBQUEsY0FBUTtJQUNoQyxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSx1QkFBVztJQUNwQyxNQUFNLEVBQUVDLGdCQUFnQixFQUFFLEdBQUdDLElBQUFBLGdDQUFxQjtJQUVsRCxNQUFNQyxTQUFTQyxJQUFBQSxrQkFBVyxFQUN4QixDQUFDQztRQUNDLElBQUlSLGFBQWE7UUFDakJJLGlCQUFpQkksZUFBZTtZQUM5QkMsVUFBVTtRQUNaO0lBQ0YsR0FDQTtRQUFDTDtRQUFrQko7S0FBWTtJQUdqQyxNQUFNVSxpQkFBaUJILElBQUFBLGtCQUFXLEVBQ2hDLENBQUNJO1FBQ0Msa0JBQWtCO1FBQ2xCLE1BQU1DLFFBQXVCO2VBQ3hCLElBQUlDLElBQVlGLGNBQWNHLEdBQUcsQ0FBQyxDQUFDQyxPQUF3QkEsS0FBS0EsSUFBSSxDQUFDQyxJQUFJO1NBQzdFO1FBQ0QsTUFBTUMsZUFBZUwsTUFBTU0sSUFBSSxDQUFDLE1BQU1DLE9BQU8sQ0FBQywwQkFBMEI7UUFDeEUsaUJBQWlCO1FBQ2pCakIsYUFDRSxDQUFDLGlCQUFpQixFQUFFZSxhQUFhLG1CQUFtQixDQUFDLEVBQ3JEO1lBQ0VHLGtCQUFrQjtRQUNwQixHQUNBO1lBQUVDLHNCQUFRLHFCQUFDQywwQkFBYztRQUFJO0lBRWpDLEdBQ0E7UUFBQ3BCO0tBQWE7SUFHaEIscUJBQ0UscUJBQUNxQix3QkFBUTtRQUNQakIsUUFBUUE7UUFDUkksZ0JBQWdCQTtRQUNoQmIsVUFBVUE7UUFDVjJCLHVCQUFTLHFCQUFDQyxzQ0FBa0I7WUFBQ0MsT0FBTzNCOztRQUNwQzRCLFFBQVFDLGtCQUFRLENBQUNiLElBQUksQ0FBQ2MsY0FBYyxHQUFHWCxJQUFJLENBQUM7UUFDNUNZLElBQUk7WUFDRixDQUFDLENBQUMsR0FBRyxFQUFFQyx5Q0FBeUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbkNDLFNBQVM7Z0JBQ1RDLFVBQVU7Z0JBQ1ZDLE9BQU87Z0JBQ1BDLFFBQVE7Z0JBQ1JDLFVBQVU7Z0JBQ1ZDLFdBQVc7Z0JBQ1hDLFVBQVU7ZUFDUHhDO1FBRVA7UUFDQXlDLFFBQVE7a0JBRVAzQzs7QUFHUCJ9