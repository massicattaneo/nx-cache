5f0d96c58c8bcff1ae694d3a68d7ced7
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkForDuplicates: function() {
        return checkForDuplicates;
    },
    mapServerFile: function() {
        return mapServerFile;
    },
    mapServerFilesForTable: function() {
        return mapServerFilesForTable;
    },
    mapUploadingFilesForTable: function() {
        return mapUploadingFilesForTable;
    },
    removeDuplicates: function() {
        return removeDuplicates;
    }
});
const _filestypes = require("./files.types");
function removeDuplicates(items, key) {
    const map = new Map();
    for (const item of items){
        map.set(item[key], item);
    }
    return Array.from(map.values());
}
const fileStatus = (status)=>{
    if ((0, _filestypes.isValidStatus)(status)) return status;
    return "completed";
};
const mapUploadingFilesForTable = (data = [])=>data.map((obj)=>{
        var _obj_file_name_split_pop, _toISOString;
        return {
            id: obj.fileId,
            name: obj.file.name,
            type: (_obj_file_name_split_pop = obj.file.name.split(".").pop()) !== null && _obj_file_name_split_pop !== void 0 ? _obj_file_name_split_pop : "",
            status: fileStatus(obj.status.toLocaleLowerCase()),
            size: obj.file.size,
            progress: obj.progress,
            date: (_toISOString = new Date().toISOString()) !== null && _toISOString !== void 0 ? _toISOString : "",
            error: obj.error,
            sharedWith: obj.sharedWith,
            owner: obj.owner
        };
    });
const checkForDuplicates = (serverFiles, uploading, fn)=>{
    uploading.forEach((uploadingFile)=>{
        serverFiles.forEach((serverFile)=>{
            if (serverFile.id === uploadingFile.fileId) {
                fn(uploadingFile);
            }
        });
    });
};
const mapServerFile = (file)=>{
    const status = file.status.toLocaleLowerCase();
    var _file_file_name_split_pop;
    return {
        id: file.file_id,
        name: file.file_name,
        type: (_file_file_name_split_pop = file.file_name.split(".").pop()) !== null && _file_file_name_split_pop !== void 0 ? _file_file_name_split_pop : "",
        status: (0, _filestypes.isValidStatus)(status) ? status : "completed",
        size: file.raw_size,
        date: file.upload_ts.endsWith("Z") ? file.upload_ts : `${file.upload_ts}Z`,
        error: file.error,
        sharedWith: file.shared_with,
        owner: file.owner
    };
};
const mapServerFilesForTable = (data = [])=>{
    return data.map(mapServerFile);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvY29tbW9uL3V0aWxzL3NyYy9saWIvZmlsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXBsb2FkYWJsZSB9IGZyb20gXCIuL2ZpbGVzLnR5cGVzXCJcbmltcG9ydCB7IEZpbGVTdGF0dXNTdGF0ZSwgU2VydmVyRmlsZSwgaXNWYWxpZFN0YXR1cyB9IGZyb20gXCIuL2ZpbGVzLnR5cGVzXCJcbmltcG9ydCB7IEZpbGVSb3dUeXBlIH0gZnJvbSBcIi4vZmlsZXMudHlwZXNcIlxuXG5mdW5jdGlvbiByZW1vdmVEdXBsaWNhdGVzPFRJdGVtPihpdGVtczogQXJyYXk8VEl0ZW0+LCBrZXk6IGtleW9mIFRJdGVtKTogQXJyYXk8VEl0ZW0+IHtcbiAgY29uc3QgbWFwID0gbmV3IE1hcDxUSXRlbVtrZXlvZiBUSXRlbV0sIFRJdGVtPigpXG4gIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgIG1hcC5zZXQoaXRlbVtrZXldLCBpdGVtKVxuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKG1hcC52YWx1ZXMoKSlcbn1cblxuY29uc3QgZmlsZVN0YXR1cyA9IChzdGF0dXM6IHN0cmluZyk6IEZpbGVTdGF0dXNTdGF0ZSA9PiB7XG4gIGlmIChpc1ZhbGlkU3RhdHVzKHN0YXR1cykpIHJldHVybiBzdGF0dXNcbiAgcmV0dXJuIFwiY29tcGxldGVkXCJcbn1cblxuY29uc3QgbWFwVXBsb2FkaW5nRmlsZXNGb3JUYWJsZSA9IChkYXRhOiBBcnJheTxVcGxvYWRhYmxlPiA9IFtdKSA9PlxuICBkYXRhLm1hcChvYmogPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogb2JqLmZpbGVJZCxcbiAgICAgIG5hbWU6IG9iai5maWxlLm5hbWUsXG4gICAgICB0eXBlOiBvYmouZmlsZS5uYW1lLnNwbGl0KFwiLlwiKS5wb3AoKSA/PyBcIlwiLFxuICAgICAgc3RhdHVzOiBmaWxlU3RhdHVzKG9iai5zdGF0dXMudG9Mb2NhbGVMb3dlckNhc2UoKSksXG4gICAgICBzaXplOiBvYmouZmlsZS5zaXplLFxuICAgICAgcHJvZ3Jlc3M6IG9iai5wcm9ncmVzcyxcbiAgICAgIGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSA/PyBcIlwiLFxuICAgICAgZXJyb3I6IG9iai5lcnJvcixcbiAgICAgIHNoYXJlZFdpdGg6IG9iai5zaGFyZWRXaXRoLFxuICAgICAgb3duZXI6IG9iai5vd25lcixcbiAgICB9XG4gIH0pXG5cbmNvbnN0IGNoZWNrRm9yRHVwbGljYXRlcyA9IChcbiAgc2VydmVyRmlsZXM6IEFycmF5PEZpbGVSb3dUeXBlPixcbiAgdXBsb2FkaW5nOiBBcnJheTxVcGxvYWRhYmxlPixcbiAgZm46IChmaWxlOiBVcGxvYWRhYmxlKSA9PiB2b2lkLFxuKSA9PiB7XG4gIHVwbG9hZGluZy5mb3JFYWNoKHVwbG9hZGluZ0ZpbGUgPT4ge1xuICAgIHNlcnZlckZpbGVzLmZvckVhY2goc2VydmVyRmlsZSA9PiB7XG4gICAgICBpZiAoc2VydmVyRmlsZS5pZCA9PT0gdXBsb2FkaW5nRmlsZS5maWxlSWQpIHtcbiAgICAgICAgZm4odXBsb2FkaW5nRmlsZSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxufVxuXG5jb25zdCBtYXBTZXJ2ZXJGaWxlID0gKGZpbGU6IFNlcnZlckZpbGUpOiBGaWxlUm93VHlwZSA9PiB7XG4gIGNvbnN0IHN0YXR1cyA9IGZpbGUuc3RhdHVzLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgcmV0dXJuIHtcbiAgICBpZDogZmlsZS5maWxlX2lkLFxuICAgIG5hbWU6IGZpbGUuZmlsZV9uYW1lLFxuICAgIHR5cGU6IGZpbGUuZmlsZV9uYW1lLnNwbGl0KFwiLlwiKS5wb3AoKSA/PyBcIlwiLFxuICAgIHN0YXR1czogaXNWYWxpZFN0YXR1cyhzdGF0dXMpID8gc3RhdHVzIDogXCJjb21wbGV0ZWRcIixcbiAgICBzaXplOiBmaWxlLnJhd19zaXplLFxuICAgIGRhdGU6IGZpbGUudXBsb2FkX3RzLmVuZHNXaXRoKFwiWlwiKSA/IGZpbGUudXBsb2FkX3RzIDogYCR7ZmlsZS51cGxvYWRfdHN9WmAsXG4gICAgZXJyb3I6IGZpbGUuZXJyb3IsXG4gICAgc2hhcmVkV2l0aDogZmlsZS5zaGFyZWRfd2l0aCxcbiAgICBvd25lcjogZmlsZS5vd25lcixcbiAgfVxufVxuXG5jb25zdCBtYXBTZXJ2ZXJGaWxlc0ZvclRhYmxlID0gKGRhdGE6IEFycmF5PFNlcnZlckZpbGU+ID0gW10pOiBBcnJheTxGaWxlUm93VHlwZT4gPT4ge1xuICByZXR1cm4gZGF0YS5tYXAobWFwU2VydmVyRmlsZSlcbn1cbmV4cG9ydCB7XG4gIG1hcFNlcnZlckZpbGUsXG4gIG1hcFNlcnZlckZpbGVzRm9yVGFibGUsXG4gIG1hcFVwbG9hZGluZ0ZpbGVzRm9yVGFibGUsXG4gIHJlbW92ZUR1cGxpY2F0ZXMsXG4gIGNoZWNrRm9yRHVwbGljYXRlcyxcbn1cbiJdLCJuYW1lcyI6WyJjaGVja0ZvckR1cGxpY2F0ZXMiLCJtYXBTZXJ2ZXJGaWxlIiwibWFwU2VydmVyRmlsZXNGb3JUYWJsZSIsIm1hcFVwbG9hZGluZ0ZpbGVzRm9yVGFibGUiLCJyZW1vdmVEdXBsaWNhdGVzIiwiaXRlbXMiLCJrZXkiLCJtYXAiLCJNYXAiLCJpdGVtIiwic2V0IiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwiZmlsZVN0YXR1cyIsInN0YXR1cyIsImlzVmFsaWRTdGF0dXMiLCJkYXRhIiwib2JqIiwiaWQiLCJmaWxlSWQiLCJuYW1lIiwiZmlsZSIsInR5cGUiLCJzcGxpdCIsInBvcCIsInRvTG9jYWxlTG93ZXJDYXNlIiwic2l6ZSIsInByb2dyZXNzIiwiZGF0ZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImVycm9yIiwic2hhcmVkV2l0aCIsIm93bmVyIiwic2VydmVyRmlsZXMiLCJ1cGxvYWRpbmciLCJmbiIsImZvckVhY2giLCJ1cGxvYWRpbmdGaWxlIiwic2VydmVyRmlsZSIsImZpbGVfaWQiLCJmaWxlX25hbWUiLCJyYXdfc2l6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