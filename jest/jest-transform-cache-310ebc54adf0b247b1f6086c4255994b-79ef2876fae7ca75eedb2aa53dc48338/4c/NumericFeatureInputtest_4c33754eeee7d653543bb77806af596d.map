{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/apps/client-web/src/app/dev-tools/AdminTools/components/NumericFeatureInput/NumericFeatureInput.test.tsx"],"sourcesContent":["import { fireEvent, render } from \"@testing-library/react\"\nimport { NumericFeatureInput } from \"./NumericFeatureInput\"\n\ntest(\"should correctly display value and change it accordingly\", () => {\n  const labelText = \"Test input\"\n  const initialValue = 10\n  const minValue = 1\n  const maxValue = 50\n  const mockOnChange = jest.fn()\n\n  const { getByLabelText, getByRole } = render(\n    <NumericFeatureInput\n      initialValue={initialValue}\n      onChange={mockOnChange}\n      id={\"test\"}\n      label={labelText}\n      min={minValue}\n      max={maxValue}\n    />,\n  )\n\n  const input = getByLabelText(labelText)\n  const button = getByRole(\"button\", { name: \"Set\" })\n  expect(input).toBeInTheDocument()\n  expect(button).toBeDisabled()\n\n  const validInputValue = 25\n  fireEvent.change(input, { target: { value: \"25\" } })\n  expect(button).toBeEnabled()\n  fireEvent.click(button)\n  expect(mockOnChange).toBeCalledWith(validInputValue)\n  expect(mockOnChange).toBeCalledTimes(1)\n\n  fireEvent.change(input, { target: { value: \"259\" } })\n  expect(input).toHaveValue(maxValue)\n\n  // clearing the input should set to the min\n  fireEvent.change(input, { target: { value: \"\" } })\n  expect(input).toHaveValue(minValue)\n})\n\ntest(\"should correctly display warning when conditions match\", () => {\n  const warningMessage = \"This is an error\"\n  const { getByTitle } = render(\n    <NumericFeatureInput\n      initialValue={1}\n      onChange={jest.fn()}\n      id={\"test\"}\n      label={\"Test\"}\n      warning={() => true}\n      warningMessage={warningMessage}\n    />,\n  )\n\n  expect(getByTitle(warningMessage)).toBeInTheDocument()\n})\n"],"names":["test","labelText","initialValue","minValue","maxValue","mockOnChange","jest","fn","getByLabelText","getByRole","render","NumericFeatureInput","onChange","id","label","min","max","input","button","name","expect","toBeInTheDocument","toBeDisabled","validInputValue","fireEvent","change","target","value","toBeEnabled","click","toBeCalledWith","toBeCalledTimes","toHaveValue","warningMessage","getByTitle","warning"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;uBAAkC;qCACE;AAEpCA,KAAK,4DAA4D;IAC/D,MAAMC,YAAY;IAClB,MAAMC,eAAe;IACrB,MAAMC,WAAW;IACjB,MAAMC,WAAW;IACjB,MAAMC,eAAeC,KAAKC,EAAE;IAE5B,MAAM,EAAEC,cAAc,EAAEC,SAAS,EAAE,GAAGC,IAAAA,aAAM,gBAC1C,qBAACC,wCAAmB;QAClBT,cAAcA;QACdU,UAAUP;QACVQ,IAAI;QACJC,OAAOb;QACPc,KAAKZ;QACLa,KAAKZ;;IAIT,MAAMa,QAAQT,eAAeP;IAC7B,MAAMiB,SAAST,UAAU,UAAU;QAAEU,MAAM;IAAM;IACjDC,OAAOH,OAAOI,iBAAiB;IAC/BD,OAAOF,QAAQI,YAAY;IAE3B,MAAMC,kBAAkB;IACxBC,gBAAS,CAACC,MAAM,CAACR,OAAO;QAAES,QAAQ;YAAEC,OAAO;QAAK;IAAE;IAClDP,OAAOF,QAAQU,WAAW;IAC1BJ,gBAAS,CAACK,KAAK,CAACX;IAChBE,OAAOf,cAAcyB,cAAc,CAACP;IACpCH,OAAOf,cAAc0B,eAAe,CAAC;IAErCP,gBAAS,CAACC,MAAM,CAACR,OAAO;QAAES,QAAQ;YAAEC,OAAO;QAAM;IAAE;IACnDP,OAAOH,OAAOe,WAAW,CAAC5B;IAE1B,2CAA2C;IAC3CoB,gBAAS,CAACC,MAAM,CAACR,OAAO;QAAES,QAAQ;YAAEC,OAAO;QAAG;IAAE;IAChDP,OAAOH,OAAOe,WAAW,CAAC7B;AAC5B;AAEAH,KAAK,0DAA0D;IAC7D,MAAMiC,iBAAiB;IACvB,MAAM,EAAEC,UAAU,EAAE,GAAGxB,IAAAA,aAAM,gBAC3B,qBAACC,wCAAmB;QAClBT,cAAc;QACdU,UAAUN,KAAKC,EAAE;QACjBM,IAAI;QACJC,OAAO;QACPqB,SAAS,IAAM;QACfF,gBAAgBA;;IAIpBb,OAAOc,WAAWD,iBAAiBZ,iBAAiB;AACtD"}