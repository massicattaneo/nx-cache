040a936021f3d3337d3d0b7a7982fcb5
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _NumericFeatureInput = require("./NumericFeatureInput");
test("should correctly display value and change it accordingly", ()=>{
    const labelText = "Test input";
    const initialValue = 10;
    const minValue = 1;
    const maxValue = 50;
    const mockOnChange = jest.fn();
    const { getByLabelText, getByRole } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NumericFeatureInput.NumericFeatureInput, {
        initialValue: initialValue,
        onChange: mockOnChange,
        id: "test",
        label: labelText,
        min: minValue,
        max: maxValue
    }));
    const input = getByLabelText(labelText);
    const button = getByRole("button", {
        name: "Set"
    });
    expect(input).toBeInTheDocument();
    expect(button).toBeDisabled();
    const validInputValue = 25;
    _react.fireEvent.change(input, {
        target: {
            value: "25"
        }
    });
    expect(button).toBeEnabled();
    _react.fireEvent.click(button);
    expect(mockOnChange).toBeCalledWith(validInputValue);
    expect(mockOnChange).toBeCalledTimes(1);
    _react.fireEvent.change(input, {
        target: {
            value: "259"
        }
    });
    expect(input).toHaveValue(maxValue);
    // clearing the input should set to the min
    _react.fireEvent.change(input, {
        target: {
            value: ""
        }
    });
    expect(input).toHaveValue(minValue);
});
test("should correctly display warning when conditions match", ()=>{
    const warningMessage = "This is an error";
    const { getByTitle } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NumericFeatureInput.NumericFeatureInput, {
        initialValue: 1,
        onChange: jest.fn(),
        id: "test",
        label: "Test",
        warning: ()=>true,
        warningMessage: warningMessage
    }));
    expect(getByTitle(warningMessage)).toBeInTheDocument();
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2FwcHMvY2xpZW50LXdlYi9zcmMvYXBwL2Rldi10b29scy9BZG1pblRvb2xzL2NvbXBvbmVudHMvTnVtZXJpY0ZlYXR1cmVJbnB1dC9OdW1lcmljRmVhdHVyZUlucHV0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyIH0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIlxuaW1wb3J0IHsgTnVtZXJpY0ZlYXR1cmVJbnB1dCB9IGZyb20gXCIuL051bWVyaWNGZWF0dXJlSW5wdXRcIlxuXG50ZXN0KFwic2hvdWxkIGNvcnJlY3RseSBkaXNwbGF5IHZhbHVlIGFuZCBjaGFuZ2UgaXQgYWNjb3JkaW5nbHlcIiwgKCkgPT4ge1xuICBjb25zdCBsYWJlbFRleHQgPSBcIlRlc3QgaW5wdXRcIlxuICBjb25zdCBpbml0aWFsVmFsdWUgPSAxMFxuICBjb25zdCBtaW5WYWx1ZSA9IDFcbiAgY29uc3QgbWF4VmFsdWUgPSA1MFxuICBjb25zdCBtb2NrT25DaGFuZ2UgPSBqZXN0LmZuKClcblxuICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0LCBnZXRCeVJvbGUgfSA9IHJlbmRlcihcbiAgICA8TnVtZXJpY0ZlYXR1cmVJbnB1dFxuICAgICAgaW5pdGlhbFZhbHVlPXtpbml0aWFsVmFsdWV9XG4gICAgICBvbkNoYW5nZT17bW9ja09uQ2hhbmdlfVxuICAgICAgaWQ9e1widGVzdFwifVxuICAgICAgbGFiZWw9e2xhYmVsVGV4dH1cbiAgICAgIG1pbj17bWluVmFsdWV9XG4gICAgICBtYXg9e21heFZhbHVlfVxuICAgIC8+LFxuICApXG5cbiAgY29uc3QgaW5wdXQgPSBnZXRCeUxhYmVsVGV4dChsYWJlbFRleHQpXG4gIGNvbnN0IGJ1dHRvbiA9IGdldEJ5Um9sZShcImJ1dHRvblwiLCB7IG5hbWU6IFwiU2V0XCIgfSlcbiAgZXhwZWN0KGlucHV0KS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIGV4cGVjdChidXR0b24pLnRvQmVEaXNhYmxlZCgpXG5cbiAgY29uc3QgdmFsaWRJbnB1dFZhbHVlID0gMjVcbiAgZmlyZUV2ZW50LmNoYW5nZShpbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiMjVcIiB9IH0pXG4gIGV4cGVjdChidXR0b24pLnRvQmVFbmFibGVkKClcbiAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbilcbiAgZXhwZWN0KG1vY2tPbkNoYW5nZSkudG9CZUNhbGxlZFdpdGgodmFsaWRJbnB1dFZhbHVlKVxuICBleHBlY3QobW9ja09uQ2hhbmdlKS50b0JlQ2FsbGVkVGltZXMoMSlcblxuICBmaXJlRXZlbnQuY2hhbmdlKGlucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogXCIyNTlcIiB9IH0pXG4gIGV4cGVjdChpbnB1dCkudG9IYXZlVmFsdWUobWF4VmFsdWUpXG5cbiAgLy8gY2xlYXJpbmcgdGhlIGlucHV0IHNob3VsZCBzZXQgdG8gdGhlIG1pblxuICBmaXJlRXZlbnQuY2hhbmdlKGlucHV0LCB7IHRhcmdldDogeyB2YWx1ZTogXCJcIiB9IH0pXG4gIGV4cGVjdChpbnB1dCkudG9IYXZlVmFsdWUobWluVmFsdWUpXG59KVxuXG50ZXN0KFwic2hvdWxkIGNvcnJlY3RseSBkaXNwbGF5IHdhcm5pbmcgd2hlbiBjb25kaXRpb25zIG1hdGNoXCIsICgpID0+IHtcbiAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSBcIlRoaXMgaXMgYW4gZXJyb3JcIlxuICBjb25zdCB7IGdldEJ5VGl0bGUgfSA9IHJlbmRlcihcbiAgICA8TnVtZXJpY0ZlYXR1cmVJbnB1dFxuICAgICAgaW5pdGlhbFZhbHVlPXsxfVxuICAgICAgb25DaGFuZ2U9e2plc3QuZm4oKX1cbiAgICAgIGlkPXtcInRlc3RcIn1cbiAgICAgIGxhYmVsPXtcIlRlc3RcIn1cbiAgICAgIHdhcm5pbmc9eygpID0+IHRydWV9XG4gICAgICB3YXJuaW5nTWVzc2FnZT17d2FybmluZ01lc3NhZ2V9XG4gICAgLz4sXG4gIClcblxuICBleHBlY3QoZ2V0QnlUaXRsZSh3YXJuaW5nTWVzc2FnZSkpLnRvQmVJblRoZURvY3VtZW50KClcbn0pXG4iXSwibmFtZXMiOlsidGVzdCIsImxhYmVsVGV4dCIsImluaXRpYWxWYWx1ZSIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJtb2NrT25DaGFuZ2UiLCJqZXN0IiwiZm4iLCJnZXRCeUxhYmVsVGV4dCIsImdldEJ5Um9sZSIsInJlbmRlciIsIk51bWVyaWNGZWF0dXJlSW5wdXQiLCJvbkNoYW5nZSIsImlkIiwibGFiZWwiLCJtaW4iLCJtYXgiLCJpbnB1dCIsImJ1dHRvbiIsIm5hbWUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRvQmVEaXNhYmxlZCIsInZhbGlkSW5wdXRWYWx1ZSIsImZpcmVFdmVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwidG9CZUVuYWJsZWQiLCJjbGljayIsInRvQmVDYWxsZWRXaXRoIiwidG9CZUNhbGxlZFRpbWVzIiwidG9IYXZlVmFsdWUiLCJ3YXJuaW5nTWVzc2FnZSIsImdldEJ5VGl0bGUiLCJ3YXJuaW5nIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozt1QkFBa0M7cUNBQ0U7QUFFcENBLEtBQUssNERBQTREO0lBQy9ELE1BQU1DLFlBQVk7SUFDbEIsTUFBTUMsZUFBZTtJQUNyQixNQUFNQyxXQUFXO0lBQ2pCLE1BQU1DLFdBQVc7SUFDakIsTUFBTUMsZUFBZUMsS0FBS0MsRUFBRTtJQUU1QixNQUFNLEVBQUVDLGNBQWMsRUFBRUMsU0FBUyxFQUFFLEdBQUdDLElBQUFBLGFBQU0sZ0JBQzFDLHFCQUFDQyx3Q0FBbUI7UUFDbEJULGNBQWNBO1FBQ2RVLFVBQVVQO1FBQ1ZRLElBQUk7UUFDSkMsT0FBT2I7UUFDUGMsS0FBS1o7UUFDTGEsS0FBS1o7O0lBSVQsTUFBTWEsUUFBUVQsZUFBZVA7SUFDN0IsTUFBTWlCLFNBQVNULFVBQVUsVUFBVTtRQUFFVSxNQUFNO0lBQU07SUFDakRDLE9BQU9ILE9BQU9JLGlCQUFpQjtJQUMvQkQsT0FBT0YsUUFBUUksWUFBWTtJQUUzQixNQUFNQyxrQkFBa0I7SUFDeEJDLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ1IsT0FBTztRQUFFUyxRQUFRO1lBQUVDLE9BQU87UUFBSztJQUFFO0lBQ2xEUCxPQUFPRixRQUFRVSxXQUFXO0lBQzFCSixnQkFBUyxDQUFDSyxLQUFLLENBQUNYO0lBQ2hCRSxPQUFPZixjQUFjeUIsY0FBYyxDQUFDUDtJQUNwQ0gsT0FBT2YsY0FBYzBCLGVBQWUsQ0FBQztJQUVyQ1AsZ0JBQVMsQ0FBQ0MsTUFBTSxDQUFDUixPQUFPO1FBQUVTLFFBQVE7WUFBRUMsT0FBTztRQUFNO0lBQUU7SUFDbkRQLE9BQU9ILE9BQU9lLFdBQVcsQ0FBQzVCO0lBRTFCLDJDQUEyQztJQUMzQ29CLGdCQUFTLENBQUNDLE1BQU0sQ0FBQ1IsT0FBTztRQUFFUyxRQUFRO1lBQUVDLE9BQU87UUFBRztJQUFFO0lBQ2hEUCxPQUFPSCxPQUFPZSxXQUFXLENBQUM3QjtBQUM1QjtBQUVBSCxLQUFLLDBEQUEwRDtJQUM3RCxNQUFNaUMsaUJBQWlCO0lBQ3ZCLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUd4QixJQUFBQSxhQUFNLGdCQUMzQixxQkFBQ0Msd0NBQW1CO1FBQ2xCVCxjQUFjO1FBQ2RVLFVBQVVOLEtBQUtDLEVBQUU7UUFDakJNLElBQUk7UUFDSkMsT0FBTztRQUNQcUIsU0FBUyxJQUFNO1FBQ2ZGLGdCQUFnQkE7O0lBSXBCYixPQUFPYyxXQUFXRCxpQkFBaUJaLGlCQUFpQjtBQUN0RCJ9