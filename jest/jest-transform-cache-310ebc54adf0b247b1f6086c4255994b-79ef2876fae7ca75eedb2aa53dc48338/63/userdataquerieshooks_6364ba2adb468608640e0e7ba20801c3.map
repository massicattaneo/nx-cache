{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/user-data-queries/src/user-data-queries.hooks.ts"],"sourcesContent":["import { useMemo } from \"react\"\nimport { AxiosError } from \"axios\"\nimport qs from \"qs\"\nimport {\n  CqsSavedQuery,\n  CqsSavedStatus,\n  CqsUserDataQueriesGetResponse,\n  CqsUserDataQueriesPostRequest,\n  CqsUserQuery,\n  SharedDataPost,\n} from \"@rp/common/api-types\"\nimport { mapToISOTimestamp } from \"@rp/common/utils\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { SnackbarEnqueueAction } from \"@rp/react/common/types\"\nimport {\n  QueryClient,\n  keepPreviousData,\n  useMutation,\n  useQueries,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\"\n\nconst USER_DATA_ROOT = \"/user-data/queries\"\n\ntype QueryUpdate = {\n  id: string\n  fields: CqsUserDataQueriesPostRequest\n}\n\ntype PatchContext = {\n  id: string\n  previous: CqsSavedQuery | undefined\n  previousSavedQueries: CqsUserDataQueriesGetResponse | undefined\n}\n\ntype SharedSearchUpdate = { id: string; sharedBody: SharedDataPost }\n\ntype Ownership = \"user\" | \"company\"\n\nconst getQueryKey = (savedStatus?: CqsSavedStatus, ownership?: Ownership) => {\n  const queryKey = [\"queries\"]\n\n  if (ownership) {\n    queryKey.push(ownership)\n  }\n\n  if (savedStatus) {\n    queryKey.push(savedStatus)\n  }\n\n  return queryKey\n}\n\nconst getSavedQueryKey = (queryId?: string) => [\"query\", queryId]\n\n// -------------------\n// Network Requests\n// -------------------\nconst getAll = async (params: {\n  save_status?: CqsSavedStatus\n  owned?: boolean\n  shared?: \"company\"\n}) => {\n  const queryString = qs.stringify(params, { addQueryPrefix: true, skipNulls: true })\n  const { data } = await axiosClient.get<CqsUserDataQueriesGetResponse>(\n    `${USER_DATA_ROOT}${queryString}`,\n  )\n  return data\n}\n\nconst getSavedQueryById = async (queryId: string) => {\n  const { data } = await axiosClient.get<CqsSavedQuery>(`${USER_DATA_ROOT}/${queryId}`)\n  return data\n}\n\nconst create = async (query: CqsUserDataQueriesPostRequest) => {\n  const { data } = await axiosClient.post<CqsSavedQuery>(USER_DATA_ROOT, query)\n  return data\n}\n\nconst patchSavedQuery = async ({ id, fields }: QueryUpdate) => {\n  const { data } = await axiosClient.patch<CqsSavedQuery>(`${USER_DATA_ROOT}/${id}`, fields)\n  return data\n}\n\nconst putLastExecuted = async (id: string) => {\n  return axiosClient.put<CqsSavedQuery>(`${USER_DATA_ROOT}/${id}/executed`)\n}\n\nconst destroy = async (queryId: string) => {\n  await axiosClient.delete(`${USER_DATA_ROOT}/${queryId}`)\n}\n\nconst pin = async (queryId: string) => {\n  return await axiosClient.put(`${USER_DATA_ROOT}/${queryId}/pin`)\n}\n\nconst unpin = async (queryId: string) => {\n  await axiosClient.delete(`${USER_DATA_ROOT}/${queryId}/pin`)\n}\n\nconst reorder = async (queryIds: Array<string>) => {\n  await axiosClient.post(`${USER_DATA_ROOT}/pinned`, queryIds)\n}\nconst shareSearch = async ({ id, sharedBody }: SharedSearchUpdate) => {\n  const { data } = await axiosClient.post<QueryUpdate>(`${USER_DATA_ROOT}/${id}/share`, sharedBody)\n  //TODO The BE should respond with the new data, passing the id for the moment\n  return { data, id }\n}\n\n// -------------------\n// Hooks\n// -------------------\n\n// Get all queries\nconst useUserQueries = (save_status?: CqsSavedStatus, ownership?: Ownership, enabled = true) => {\n  return useQuery({\n    queryKey: getQueryKey(save_status, ownership),\n    queryFn: () => {\n      if (!ownership) {\n        return getAll({ save_status })\n      }\n\n      return ownership === \"user\"\n        ? getAll({ save_status, owned: true })\n        : getAll({ save_status, shared: \"company\" })\n    },\n    staleTime: Infinity,\n    gcTime: Infinity,\n    retry: false,\n    placeholderData: keepPreviousData,\n    enabled: enabled,\n    select: response => ({\n      ...response,\n      results: response.results.map(mapToISOTimestamp),\n    }),\n  })\n}\n\n// Get a query\nconst useSavedQuery = (queryId?: string) => {\n  return useQuery({\n    queryKey: getSavedQueryKey(queryId),\n    queryFn: () => getSavedQueryById(queryId ?? \"\"),\n    staleTime: Infinity,\n    gcTime: Infinity,\n    retry: false,\n    enabled: Boolean(queryId),\n    select: response => mapToISOTimestamp(response),\n    // initialData: dummySavedQuery,\n  })\n}\n\nconst useMultipleSavedQueries = (ids: Array<string>) => {\n  return useQueries({\n    queries: ids.map(id => ({\n      queryKey: getSavedQueryKey(id),\n      queryFn: () => getSavedQueryById(id),\n      staleTime: Infinity,\n      select: (response: CqsSavedQuery) => mapToISOTimestamp(response),\n    })),\n  })\n}\n\n// Create a new Saved Query\nconst useCreateSavedQuery = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: create,\n    onSuccess: query => {\n      queryClient.setQueryData(getSavedQueryKey(query.id), query)\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n    },\n  })\n}\n\n// Handle the PUT and PATCH functions\nconst useUpdateSavedQueryField = ({ enqueueError }: { enqueueError: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: patchSavedQuery,\n    onMutate: async (queryUpdate: QueryUpdate): Promise<PatchContext> => {\n      await queryClient.cancelQueries({\n        queryKey: getSavedQueryKey(queryUpdate.id),\n      })\n\n      // Update the query data\n      const previous = queryClient.getQueryData<CqsSavedQuery>(getSavedQueryKey(queryUpdate.id))\n\n      queryClient.setQueryData(getSavedQueryKey(queryUpdate.id), {\n        ...previous,\n        ...queryUpdate.fields,\n      })\n\n      // Update the saved queries list\n      const previousSavedQueries = queryClient.getQueryData<CqsUserDataQueriesGetResponse>(\n        getQueryKey(\"saved\"),\n      )\n\n      if (previousSavedQueries) {\n        const queryBeingUpdated = previousSavedQueries.results.find(\n          query => query.id === queryUpdate.id,\n        )\n\n        queryClient.setQueryData(getQueryKey(\"saved\"), {\n          results: [\n            ...previousSavedQueries.results.filter(query => query.id !== queryUpdate.id),\n            {\n              ...queryBeingUpdated,\n              ...queryUpdate.fields,\n            },\n          ],\n        })\n      }\n\n      return { id: queryUpdate.id, previous, previousSavedQueries }\n    },\n    onSuccess: result => {\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n      queryClient.refetchQueries({\n        queryKey: [\"stories for query:\", result.id],\n      })\n      queryClient.setQueryData(getSavedQueryKey(result.id), result)\n    },\n    onError: (error, _, context) => {\n      if (error instanceof AxiosError && error.response?.status === 403) {\n        enqueueError(error?.response?.data.message)\n      } else {\n        enqueueError(\"There was an error updating your search\")\n      }\n\n      if (context) {\n        queryClient.setQueryData(getSavedQueryKey(context.id), context.previous)\n        queryClient.setQueryData(getQueryKey(\"saved\"), context.previousSavedQueries)\n      }\n    },\n    retry: (count, error) => {\n      if (error instanceof AxiosError && error.response?.status === 409 && count < 3) {\n        return true\n      }\n      return false\n    },\n    retryDelay: 1000,\n  })\n}\n\n// Update the last executed time for a query\nconst useUpdateLastExecuted = () => {\n  return useMutation({\n    mutationFn: putLastExecuted,\n    retry: (count, error: AxiosError) => {\n      if (error.response?.status === 409 && count < 3) {\n        return true\n      }\n      return false\n    },\n    retryDelay: 1000,\n  })\n}\n\n// Delete a query\nconst useDeleteSavedQuery = () => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: destroy,\n    onMutate: queryId => {\n      const previous = queryClient.getQueriesData({ queryKey: getQueryKey() })\n\n      queryClient.setQueriesData<CqsUserDataQueriesGetResponse>(\n        { queryKey: getQueryKey() },\n        old => {\n          if (!old) {\n            return old\n          }\n          return { results: old?.results.filter(item => item.id !== queryId) }\n        },\n      )\n\n      return previous\n    },\n    onError: (_, __, context) => {\n      if (context) {\n        for (const [queryKey, previous] of context) {\n          queryClient.setQueryData(queryKey, previous)\n        }\n      }\n    },\n    onSuccess: () => queryClient.refetchQueries({ queryKey: getQueryKey() }),\n  })\n}\n\nconst usePinQuery = ({ enqueueError }: { enqueueError: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: pin,\n    onMutate: (queryId: string) => {\n      const previous = queryClient.getQueriesData<CqsSavedQuery>({ queryKey: getQueryKey() })\n\n      queryClient.setQueriesData<CqsUserDataQueriesGetResponse>(\n        { queryKey: getQueryKey() },\n        prev => {\n          if (!prev) {\n            return prev\n          }\n\n          let lastItem = 0\n          let pinnedQuery = undefined\n          let pinnedQueryIndex = 0\n          for (const entry of Object.entries(prev.results)) {\n            const [index, query] = entry\n\n            if (query.pinIndex !== null && query.pinIndex > lastItem) {\n              lastItem = query.pinIndex\n            }\n\n            if (query.id === queryId) {\n              pinnedQuery = { ...query }\n              pinnedQueryIndex = Number(index)\n            }\n          }\n\n          if (!pinnedQuery) {\n            return prev\n          }\n\n          pinnedQuery.pinned = true\n          pinnedQuery.pinIndex = lastItem + 1\n\n          return {\n            results: [\n              ...prev.results.slice(0, pinnedQueryIndex),\n              pinnedQuery,\n              ...prev.results.slice(pinnedQueryIndex + 1),\n            ],\n          }\n        },\n      )\n\n      return previous\n    },\n    onSuccess: () => {\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n    },\n    onError: (error: AxiosError<{ message: string; status: number }>, __, context) => {\n      enqueueError(\n        error.response?.data?.message ?? \"There was an error updating your pinned searches\",\n      )\n      if (context) {\n        for (const [queryKey, previous] of context) {\n          queryClient.setQueryData(queryKey, previous)\n        }\n      }\n    },\n  })\n}\n\nconst useUnpinQuery = ({ enqueueError }: { enqueueError: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: unpin,\n    onMutate: (queryId: string) => {\n      const previous = queryClient.getQueriesData<CqsSavedQuery>({ queryKey: getQueryKey() })\n\n      queryClient.setQueriesData<CqsUserDataQueriesGetResponse>(\n        { queryKey: getQueryKey() },\n        prev => {\n          if (!prev) {\n            return prev\n          }\n\n          const pinnedQueryIndex = prev.results.findIndex(result => result.id === queryId)\n          const pinnedQuery = {\n            ...prev.results[pinnedQueryIndex],\n            pinned: null,\n            pinnedQueryIndex: null,\n          }\n\n          if (!pinnedQuery) {\n            return prev\n          }\n\n          return {\n            results: [\n              ...prev.results.slice(0, pinnedQueryIndex),\n              pinnedQuery,\n              ...prev.results.slice(pinnedQueryIndex + 1),\n            ],\n          }\n        },\n      )\n\n      return previous\n    },\n    onSuccess: () => {\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n    },\n    onError: (_, __, context) => {\n      enqueueError(\"There was an error updating your pinned searches\")\n      if (context) {\n        for (const [queryKey, previous] of context) {\n          queryClient.setQueryData(queryKey, previous)\n        }\n      }\n    },\n  })\n}\n\nconst useReorderPinQueries = ({\n  successMessage,\n  enqueueSuccess,\n  enqueueError,\n}: {\n  successMessage?: string\n  enqueueSuccess: SnackbarEnqueueAction\n  enqueueError: SnackbarEnqueueAction\n}) => {\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: reorder,\n    onMutate: queryIds => {\n      const previous = queryClient.getQueryData<CqsSavedQuery>(getQueryKey(\"saved\"))\n      queryClient.setQueryData<CqsUserDataQueriesGetResponse>(getQueryKey(\"saved\"), prev => {\n        if (!prev) {\n          return prev\n        }\n\n        const idIndexes = queryIds.reduce<Record<string, number>>((acc, id, index) => {\n          // eslint-disable-next-line no-param-reassign\n          acc[id] ??= index\n          return acc\n        }, {})\n\n        return {\n          results: prev.results.map(query =>\n            idIndexes[query.id] !== undefined\n              ? {\n                  ...query,\n                  pinIndex: idIndexes[query.id],\n                }\n              : {\n                  ...query,\n                  pinned: false,\n                },\n          ),\n        }\n      })\n\n      return previous\n    },\n    onSuccess: () => {\n      enqueueSuccess(successMessage ?? \"The new order will be reflected on the Homepage\")\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n    },\n    onError: (_, __, context) => {\n      enqueueError(\"There was an error updating your pinned searches\")\n      if (context) {\n        queryClient.setQueryData(getQueryKey(\"saved\"), context)\n      }\n    },\n  })\n}\nconst useSetPublicSearch = ({ enqueueError }: { enqueueError: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: shareSearch,\n    onMutate: ({ id, sharedBody }) => {\n      const prev: PatchContext | undefined = queryClient.getQueryData(getSavedQueryKey(id))\n\n      if (prev) {\n        // TODO: add company id to shared.company\n        queryClient.setQueryData(getSavedQueryKey(id), { ...prev, shared: sharedBody })\n      }\n\n      return prev\n    },\n    onSuccess: ({ id }) => {\n      queryClient.refetchQueries({\n        queryKey: getSavedQueryKey(id),\n      })\n      queryClient.refetchQueries({ queryKey: getQueryKey() })\n    },\n    onError: (error, __, data) => {\n      if (error instanceof AxiosError && error.response?.status === 403) {\n        enqueueError(error?.response?.data.message)\n      } else {\n        enqueueError(\"There was an error sharing your search\")\n      }\n\n      if (data) {\n        queryClient.setQueryData(getSavedQueryKey(data.id), data)\n      }\n    },\n  })\n}\n\nconst getSavedQuery = async (queryClient: QueryClient, queryId: string) => {\n  const fromCache = queryClient.getQueryData<CqsSavedQuery>([\"query\", queryId])\n  if (fromCache) return fromCache\n  return getSavedQueryById(queryId)\n}\n\nconst sortByPinIndex = (first: CqsUserQuery, second: CqsUserQuery) =>\n  (first.pinIndex ?? -1) - (second.pinIndex ?? -1)\n\nconst useSearchFeedQueries = () => {\n  const { data: { results: saved = [] } = {}, isLoading } = useUserQueries(\"saved\")\n  const isLoadingQueries = isLoading\n  const pinned = useMemo(() => saved.filter(i => i.pinned).sort(sortByPinIndex), [saved])\n  return { saved, pinned, isLoading: isLoadingQueries, isInitialLoading: isLoading }\n}\n\nexport {\n  getSavedQuery,\n  getSavedQueryById,\n  useUserQueries,\n  useSavedQuery,\n  useCreateSavedQuery,\n  useUpdateSavedQueryField,\n  useDeleteSavedQuery,\n  useMultipleSavedQueries,\n  useUpdateLastExecuted,\n  usePinQuery,\n  useUnpinQuery,\n  useReorderPinQueries,\n  useSetPublicSearch,\n  getQueryKey,\n  getSavedQueryKey,\n  useSearchFeedQueries,\n}\n\nexport type { QueryUpdate }\n"],"names":["getQueryKey","getSavedQuery","getSavedQueryById","getSavedQueryKey","useCreateSavedQuery","useDeleteSavedQuery","useMultipleSavedQueries","usePinQuery","useReorderPinQueries","useSavedQuery","useSearchFeedQueries","useSetPublicSearch","useUnpinQuery","useUpdateLastExecuted","useUpdateSavedQueryField","useUserQueries","USER_DATA_ROOT","savedStatus","ownership","queryKey","push","queryId","getAll","params","queryString","qs","stringify","addQueryPrefix","skipNulls","data","axiosClient","get","create","query","post","patchSavedQuery","id","fields","patch","putLastExecuted","put","destroy","delete","pin","unpin","reorder","queryIds","shareSearch","sharedBody","save_status","enabled","useQuery","queryFn","owned","shared","staleTime","Infinity","gcTime","retry","placeholderData","keepPreviousData","select","response","results","map","mapToISOTimestamp","Boolean","ids","useQueries","queries","queryClient","useQueryClient","useMutation","mutationFn","onSuccess","setQueryData","refetchQueries","enqueueError","onMutate","queryUpdate","cancelQueries","previous","getQueryData","previousSavedQueries","queryBeingUpdated","find","filter","result","onError","error","_","context","AxiosError","status","message","count","retryDelay","getQueriesData","setQueriesData","old","item","__","prev","lastItem","pinnedQuery","undefined","pinnedQueryIndex","entry","Object","entries","index","pinIndex","Number","pinned","slice","findIndex","successMessage","enqueueSuccess","idIndexes","reduce","acc","fromCache","sortByPinIndex","first","second","saved","isLoading","isLoadingQueries","useMemo","i","sort","isInitialLoading"],"rangeMappingsmappings":"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"}