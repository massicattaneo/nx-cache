9db1d1729b3e4a8aff82eff99ebd0893
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAgent", {
    enumerable: true,
    get: function() {
        return useAgent;
    }
});
const _react = require("react");
const _adapters = require("@rp/adapters");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _handlers = require("./handlers");
const _getPromptWithContext = require("./utils/getPromptWithContext");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const AGENT_EXECUTE_REQUEST = "AgentExecuteRequest";
var _getApiEnvironmentConfig_url;
const WEB_SOCKET_URL = (_getApiEnvironmentConfig_url = (0, _utils.getApiEnvironmentConfig)("web-socket").url) !== null && _getApiEnvironmentConfig_url !== void 0 ? _getApiEnvironmentConfig_url : "";
const defaultAgentData = {
    frames: [],
    answerStream: [],
    closed: false,
    isLoading: true,
    error: undefined,
    requestId: "",
    references: {}
};
function useAgent(props) {
    const websocket = (0, _react.useRef)(null);
    const onCompleteCallbackExecuted = (0, _react.useRef)(false);
    const [isFrameCompleted, setFrameCompleted] = (0, _react.useState)(false);
    const [agentData, setAgentData] = (0, _react.useState)(_object_spread({}, defaultAgentData));
    const disposeWebsocket = (0, _react.useCallback)(function disposeWebsocket() {
        if (websocket.current) {
            websocket.current.close();
            websocket.current = null;
        }
    }, []);
    const { agentEnabled, onComplete, chatId, inputMessage } = props;
    (0, _react.useEffect)(()=>{
        if (isFrameCompleted && agentEnabled && !onCompleteCallbackExecuted.current) {
            onComplete(agentData);
            onCompleteCallbackExecuted.current = true;
        }
    }, [
        agentEnabled,
        onComplete,
        isFrameCompleted,
        agentData
    ]);
    (0, _react.useEffect)(()=>{
        if (agentEnabled) {
            var _props_executionMode;
            // Set up the message transaction when starting
            _customerio.chatCustomerIo.inputAgentPromptSubmit({
                chatId,
                executionMode: (_props_executionMode = props.executionMode) !== null && _props_executionMode !== void 0 ? _props_executionMode : "research",
                requestId: agentData.requestId
            });
            setupSocket();
        }
        return ()=>{
            disposeWebsocket();
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        agentEnabled,
        chatId,
        inputMessage,
        disposeWebsocket
    ]);
    function handleErrorMessage(data) {
        var _props_onError;
        setAgentData((prevState)=>{
            var _data_requestId;
            return _object_spread_props(_object_spread({}, prevState), {
                error: data.error,
                requestId: (_data_requestId = data.requestId) !== null && _data_requestId !== void 0 ? _data_requestId : prevState.requestId
            });
        });
        (_props_onError = props.onError) === null || _props_onError === void 0 ? void 0 : _props_onError.call(props, {
            response: "",
            responseBlocks: [],
            timings: {
                start: Date.now()
            },
            auditTraces: [],
            originSources: [],
            interactionType: "user_message",
            statusData: {
                step: "completed",
                queries: []
            },
            auditBlocks: []
        }, {
            message: data.error,
            type: "ERROR"
        });
        disposeWebsocket();
    }
    function handleWebSocketMessage(event) {
        const data = JSON.parse(event.data);
        switch(data.type){
            case "THINKING":
                setAgentData((prev)=>(0, _handlers.handleThinkingMessage)(prev, data));
                break;
            case "ACTION":
                setAgentData((prev)=>(0, _handlers.handleActionMessage)(prev, data));
                break;
            case "AUDIT":
                setAgentData((prev)=>(0, _handlers.handleAuditMessage)(prev, data));
                break;
            case "ANSWER":
                setAgentData((prev)=>(0, _handlers.handleAnswerMessage)(prev, data));
                break;
            case "GROUNDING":
                if (!props.enableAgentGrounding) {
                    break;
                }
                setAgentData((prev)=>(0, _handlers.handleGroundingMessage)(prev, data));
                break;
            case "COMPLETE":
                setFrameCompleted(true);
                setAgentData((prev)=>(0, _handlers.handleCompleteMessage)(prev, {
                        executionMode: props.executionMode,
                        chatId
                    }));
                break;
            case "ERROR":
                handleErrorMessage(data);
                break;
            default:
                break;
        }
    }
    function handleWebSocketError(_error) {
        var _props_onError;
        if (websocket.current) {
            websocket.current.close();
            websocket.current = null;
        }
        (_props_onError = props.onError) === null || _props_onError === void 0 ? void 0 : _props_onError.call(props, {
            response: "",
            responseBlocks: [],
            timings: {
                start: Date.now()
            },
            auditTraces: [],
            originSources: [],
            interactionType: "user_message",
            statusData: {
                step: "completed",
                queries: []
            },
            auditBlocks: []
        }, {
            message: "WebSocket connection error",
            type: "ERROR"
        });
    }
    async function setupSocket() {
        if (!props.agentEnabled || websocket.current) {
            return disposeWebsocket();
        }
        const requestId = `${Date.now()}`;
        setAgentData(_object_spread_props(_object_spread({}, defaultAgentData), {
            requestId
        }));
        const token = await _adapters.adapters.api.getClerkToken();
        if (token) {
            var _props_webSocketUrl;
            const newWebsocket = new WebSocket(`${(_props_webSocketUrl = props.webSocketUrl) !== null && _props_webSocketUrl !== void 0 ? _props_webSocketUrl : WEB_SOCKET_URL}?jwt_token=${token}`);
            websocket.current = newWebsocket;
            newWebsocket.onopen = ()=>{
                if (newWebsocket !== websocket.current) {
                    newWebsocket.close();
                    return;
                }
                newWebsocket.send(JSON.stringify({
                    requestId,
                    action: AGENT_EXECUTE_REQUEST,
                    chatId: props.chatId,
                    inputMessage: (0, _getPromptWithContext.getPromptWithContext)(props.inputMessage, props.context),
                    requestType: props.executionMode,
                    onlySearchAudit: !props.enableCompanyTearsheet
                }));
                onCompleteCallbackExecuted.current = false;
                setFrameCompleted(false);
            };
            newWebsocket.onmessage = (event)=>{
                if (newWebsocket !== websocket.current) {
                    newWebsocket.close();
                    return;
                }
                handleWebSocketMessage(event);
            };
            newWebsocket.onerror = handleWebSocketError;
        }
    }
    return {
        agentData
    };
}

//# sourceMappingURL=data:application/json;base64,