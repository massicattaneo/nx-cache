07471228c3e40de1e3b2c44466fd1c3c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useColumnSelection", {
    enumerable: true,
    get: function() {
        return useColumnSelection;
    }
});
const _react = require("react");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function useColumnSelection({ selectedColumns, setSelectedColumns, filteredColumns }) {
    const handleColumnToggle = (0, _react.useCallback)((column, checked)=>{
        setSelectedColumns((prev)=>{
            if (checked) {
                // Add column if not already present
                const exists = prev.some((col)=>col.sourceTab === column.sourceTab && col.endpoint === column.endpoint && col.columnKey === column.columnKey);
                if (!exists) {
                    const columnWithId = _object_spread_props(_object_spread({}, column), {
                        id: `${column.endpoint}-${column.columnKey}-${Date.now()}`
                    });
                    return [
                        ...prev,
                        columnWithId
                    ];
                }
                return prev;
            } else {
                // Remove column
                return prev.filter((col)=>!(col.sourceTab === column.sourceTab && col.endpoint === column.endpoint && col.columnKey === column.columnKey));
            }
        });
    }, [
        setSelectedColumns
    ]);
    const handleSelectAll = (0, _react.useCallback)((checked)=>{
        if (checked) {
            // Add all filtered columns that aren't already selected
            setSelectedColumns((prev)=>{
                const newColumns = [
                    ...prev
                ];
                filteredColumns.forEach((column)=>{
                    const exists = newColumns.some((col)=>col.sourceTab === column.sourceTab && col.endpoint === column.endpoint && col.columnKey === column.columnKey);
                    if (!exists) {
                        const columnWithId = _object_spread_props(_object_spread({}, column), {
                            id: `${column.endpoint}-${column.columnKey}-${Date.now()}-${Math.random()}`
                        });
                        newColumns.push(columnWithId);
                    }
                });
                return newColumns;
            });
        } else {
            // Remove all filtered columns
            setSelectedColumns((prev)=>prev.filter((col)=>!filteredColumns.some((filtered)=>col.sourceTab === filtered.sourceTab && col.endpoint === filtered.endpoint && col.columnKey === filtered.columnKey)));
        }
    }, [
        filteredColumns,
        setSelectedColumns
    ]);
    const isColumnSelected = (0, _react.useCallback)((column)=>{
        return selectedColumns.some((col)=>col.sourceTab === column.sourceTab && col.endpoint === column.endpoint && col.columnKey === column.columnKey);
    }, [
        selectedColumns
    ]);
    const handleDeleteColumn = (0, _react.useCallback)((columnToDelete)=>{
        setSelectedColumns((prev)=>prev.filter((col)=>col.id !== columnToDelete.id));
    }, [
        setSelectedColumns
    ]);
    const allFilteredSelected = (0, _react.useMemo)(()=>{
        return filteredColumns.length > 0 && filteredColumns.every(isColumnSelected);
    }, [
        filteredColumns,
        isColumnSelected
    ]);
    const someFilteredSelected = (0, _react.useMemo)(()=>{
        return filteredColumns.some(isColumnSelected) && !allFilteredSelected;
    }, [
        filteredColumns,
        isColumnSelected,
        allFilteredSelected
    ]);
    return {
        handleColumnToggle,
        handleSelectAll,
        isColumnSelected,
        handleDeleteColumn,
        allFilteredSelected,
        someFilteredSelected
    };
}

//# sourceMappingURL=data:application/json;base64,