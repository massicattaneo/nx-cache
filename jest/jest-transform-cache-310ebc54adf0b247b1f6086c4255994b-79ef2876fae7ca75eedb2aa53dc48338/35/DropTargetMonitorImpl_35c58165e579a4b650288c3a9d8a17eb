158379e7bc1a80dd89844327db96c23d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DropTargetMonitorImpl", {
    enumerable: true,
    get: function() {
        return DropTargetMonitorImpl;
    }
});
const _invariant = require("@react-dnd/invariant");
let isCallingCanDrop = false;
class DropTargetMonitorImpl {
    receiveHandlerId(targetId) {
        this.targetId = targetId;
    }
    getHandlerId() {
        return this.targetId;
    }
    subscribeToStateChange(listener, options) {
        return this.internalMonitor.subscribeToStateChange(listener, options);
    }
    canDrop() {
        // Cut out early if the target id has not been set. This should prevent errors
        // where the user has an older version of dnd-core like in
        // https://github.com/react-dnd/react-dnd/issues/1310
        if (!this.targetId) {
            return false;
        }
        (0, _invariant.invariant)(!isCallingCanDrop, 'You may not call monitor.canDrop() inside your canDrop() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor');
        try {
            isCallingCanDrop = true;
            return this.internalMonitor.canDropOnTarget(this.targetId);
        } finally{
            isCallingCanDrop = false;
        }
    }
    isOver(options) {
        if (!this.targetId) {
            return false;
        }
        return this.internalMonitor.isOverTarget(this.targetId, options);
    }
    getItemType() {
        return this.internalMonitor.getItemType();
    }
    getItem() {
        return this.internalMonitor.getItem();
    }
    getDropResult() {
        return this.internalMonitor.getDropResult();
    }
    didDrop() {
        return this.internalMonitor.didDrop();
    }
    getInitialClientOffset() {
        return this.internalMonitor.getInitialClientOffset();
    }
    getInitialSourceClientOffset() {
        return this.internalMonitor.getInitialSourceClientOffset();
    }
    getSourceClientOffset() {
        return this.internalMonitor.getSourceClientOffset();
    }
    getClientOffset() {
        return this.internalMonitor.getClientOffset();
    }
    getDifferenceFromInitialOffset() {
        return this.internalMonitor.getDifferenceFromInitialOffset();
    }
    constructor(manager){
        this.targetId = null;
        this.internalMonitor = manager.getMonitor();
    }
} //# sourceMappingURL=DropTargetMonitorImpl.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbHMvRHJvcFRhcmdldE1vbml0b3JJbXBsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ0ByZWFjdC1kbmQvaW52YXJpYW50J1xuaW1wb3J0IHR5cGUge1xuXHREcmFnRHJvcE1hbmFnZXIsXG5cdERyYWdEcm9wTW9uaXRvcixcblx0SWRlbnRpZmllcixcblx0TGlzdGVuZXIsXG5cdFVuc3Vic2NyaWJlLFxuXHRYWUNvb3JkLFxufSBmcm9tICdkbmQtY29yZSdcblxuaW1wb3J0IHR5cGUgeyBEcm9wVGFyZ2V0TW9uaXRvciB9IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJ1xuXG5sZXQgaXNDYWxsaW5nQ2FuRHJvcCA9IGZhbHNlXG5cbmV4cG9ydCBjbGFzcyBEcm9wVGFyZ2V0TW9uaXRvckltcGwgaW1wbGVtZW50cyBEcm9wVGFyZ2V0TW9uaXRvciB7XG5cdHByaXZhdGUgaW50ZXJuYWxNb25pdG9yOiBEcmFnRHJvcE1vbml0b3Jcblx0cHJpdmF0ZSB0YXJnZXRJZDogSWRlbnRpZmllciB8IG51bGwgPSBudWxsXG5cblx0cHVibGljIGNvbnN0cnVjdG9yKG1hbmFnZXI6IERyYWdEcm9wTWFuYWdlcikge1xuXHRcdHRoaXMuaW50ZXJuYWxNb25pdG9yID0gbWFuYWdlci5nZXRNb25pdG9yKClcblx0fVxuXG5cdHB1YmxpYyByZWNlaXZlSGFuZGxlcklkKHRhcmdldElkOiBJZGVudGlmaWVyIHwgbnVsbCk6IHZvaWQge1xuXHRcdHRoaXMudGFyZ2V0SWQgPSB0YXJnZXRJZFxuXHR9XG5cblx0cHVibGljIGdldEhhbmRsZXJJZCgpOiBJZGVudGlmaWVyIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMudGFyZ2V0SWRcblx0fVxuXG5cdHB1YmxpYyBzdWJzY3JpYmVUb1N0YXRlQ2hhbmdlKFxuXHRcdGxpc3RlbmVyOiBMaXN0ZW5lcixcblx0XHRvcHRpb25zPzogeyBoYW5kbGVySWRzPzogSWRlbnRpZmllcltdIH0sXG5cdCk6IFVuc3Vic2NyaWJlIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3Iuc3Vic2NyaWJlVG9TdGF0ZUNoYW5nZShsaXN0ZW5lciwgb3B0aW9ucylcblx0fVxuXG5cdHB1YmxpYyBjYW5Ecm9wKCk6IGJvb2xlYW4ge1xuXHRcdC8vIEN1dCBvdXQgZWFybHkgaWYgdGhlIHRhcmdldCBpZCBoYXMgbm90IGJlZW4gc2V0LiBUaGlzIHNob3VsZCBwcmV2ZW50IGVycm9yc1xuXHRcdC8vIHdoZXJlIHRoZSB1c2VyIGhhcyBhbiBvbGRlciB2ZXJzaW9uIG9mIGRuZC1jb3JlIGxpa2UgaW5cblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtZG5kL3JlYWN0LWRuZC9pc3N1ZXMvMTMxMFxuXHRcdGlmICghdGhpcy50YXJnZXRJZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlXG5cdFx0fVxuXHRcdGludmFyaWFudChcblx0XHRcdCFpc0NhbGxpbmdDYW5Ecm9wLFxuXHRcdFx0J1lvdSBtYXkgbm90IGNhbGwgbW9uaXRvci5jYW5Ecm9wKCkgaW5zaWRlIHlvdXIgY2FuRHJvcCgpIGltcGxlbWVudGF0aW9uLiAnICtcblx0XHRcdFx0J1JlYWQgbW9yZTogaHR0cDovL3JlYWN0LWRuZC5naXRodWIuaW8vcmVhY3QtZG5kL2RvY3MvYXBpL2Ryb3AtdGFyZ2V0LW1vbml0b3InLFxuXHRcdClcblxuXHRcdHRyeSB7XG5cdFx0XHRpc0NhbGxpbmdDYW5Ecm9wID0gdHJ1ZVxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmNhbkRyb3BPblRhcmdldCh0aGlzLnRhcmdldElkKVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRpc0NhbGxpbmdDYW5Ecm9wID0gZmFsc2Vcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgaXNPdmVyKG9wdGlvbnM/OiB7IHNoYWxsb3c/OiBib29sZWFuIH0pOiBib29sZWFuIHtcblx0XHRpZiAoIXRoaXMudGFyZ2V0SWQpIHtcblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuaXNPdmVyVGFyZ2V0KHRoaXMudGFyZ2V0SWQsIG9wdGlvbnMpXG5cdH1cblxuXHRwdWJsaWMgZ2V0SXRlbVR5cGUoKTogSWRlbnRpZmllciB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtVHlwZSgpXG5cdH1cblxuXHRwdWJsaWMgZ2V0SXRlbSgpOiBhbnkge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJdGVtKClcblx0fVxuXG5cdHB1YmxpYyBnZXREcm9wUmVzdWx0KCk6IGFueSB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldERyb3BSZXN1bHQoKVxuXHR9XG5cblx0cHVibGljIGRpZERyb3AoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmRpZERyb3AoKVxuXHR9XG5cblx0cHVibGljIGdldEluaXRpYWxDbGllbnRPZmZzZXQoKTogWFlDb29yZCB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRJbml0aWFsQ2xpZW50T2Zmc2V0KClcblx0fVxuXG5cdHB1YmxpYyBnZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0KCk6IFhZQ29vcmQgfCBudWxsIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0SW5pdGlhbFNvdXJjZUNsaWVudE9mZnNldCgpXG5cdH1cblxuXHRwdWJsaWMgZ2V0U291cmNlQ2xpZW50T2Zmc2V0KCk6IFhZQ29vcmQgfCBudWxsIHtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcm5hbE1vbml0b3IuZ2V0U291cmNlQ2xpZW50T2Zmc2V0KClcblx0fVxuXG5cdHB1YmxpYyBnZXRDbGllbnRPZmZzZXQoKTogWFlDb29yZCB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLmludGVybmFsTW9uaXRvci5nZXRDbGllbnRPZmZzZXQoKVxuXHR9XG5cblx0cHVibGljIGdldERpZmZlcmVuY2VGcm9tSW5pdGlhbE9mZnNldCgpOiBYWUNvb3JkIHwgbnVsbCB7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJuYWxNb25pdG9yLmdldERpZmZlcmVuY2VGcm9tSW5pdGlhbE9mZnNldCgpXG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJEcm9wVGFyZ2V0TW9uaXRvckltcGwiLCJpc0NhbGxpbmdDYW5Ecm9wIiwicmVjZWl2ZUhhbmRsZXJJZCIsInRhcmdldElkIiwiZ2V0SGFuZGxlcklkIiwic3Vic2NyaWJlVG9TdGF0ZUNoYW5nZSIsImxpc3RlbmVyIiwib3B0aW9ucyIsImludGVybmFsTW9uaXRvciIsImNhbkRyb3AiLCJpbnZhcmlhbnQiLCJjYW5Ecm9wT25UYXJnZXQiLCJpc092ZXIiLCJpc092ZXJUYXJnZXQiLCJnZXRJdGVtVHlwZSIsImdldEl0ZW0iLCJnZXREcm9wUmVzdWx0IiwiZGlkRHJvcCIsImdldEluaXRpYWxDbGllbnRPZmZzZXQiLCJnZXRJbml0aWFsU291cmNlQ2xpZW50T2Zmc2V0IiwiZ2V0U291cmNlQ2xpZW50T2Zmc2V0IiwiZ2V0Q2xpZW50T2Zmc2V0IiwiZ2V0RGlmZmVyZW5jZUZyb21Jbml0aWFsT2Zmc2V0IiwiY29uc3RydWN0b3IiLCJtYW5hZ2VyIiwiZ2V0TW9uaXRvciJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBY2FBOzs7ZUFBQUE7OzsyQkFkYTtBQVkxQixJQUFJQyxtQkFBbUI7QUFFaEIsTUFBTUQ7SUFRWkUsaUJBQXdCQyxRQUEyQixFQUFRO1FBQzFELElBQUksQ0FBQ0EsUUFBUSxHQUFHQTs7SUFHakJDLGVBQXlDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDRCxRQUFROztJQUdyQkUsdUJBQ0NDLFFBQWtCLEVBQ2xCQyxPQUF1QyxFQUN6QjtRQUNkLE9BQU8sSUFBSSxDQUFDQyxlQUFlLENBQUNILHNCQUFzQixDQUFDQyxVQUFVQzs7SUFHOURFLFVBQTBCO1FBQ3pCLDhFQUE4RTtRQUM5RSwwREFBMEQ7UUFDMUQscURBQXFEO1FBQ3JELElBQUksQ0FBQyxJQUFJLENBQUNOLFFBQVEsRUFBRTtZQUNuQixPQUFPOztRQUVSTyxJQUFBQSxvQkFBUyxFQUNSLENBQUNULGtCQUNELDhFQUNDO1FBR0YsSUFBSTtZQUNIQSxtQkFBbUI7WUFDbkIsT0FBTyxJQUFJLENBQUNPLGVBQWUsQ0FBQ0csZUFBZSxDQUFDLElBQUksQ0FBQ1IsUUFBUTtpQkFDaEQ7WUFDVEYsbUJBQW1COzs7SUFJckJXLE9BQWNMLE9BQStCLEVBQVc7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQ0osUUFBUSxFQUFFO1lBQ25CLE9BQU87O1FBRVIsT0FBTyxJQUFJLENBQUNLLGVBQWUsQ0FBQ0ssWUFBWSxDQUFDLElBQUksQ0FBQ1YsUUFBUSxFQUFFSTs7SUFHekRPLGNBQXdDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDTixlQUFlLENBQUNNLFdBQVc7O0lBR3hDQyxVQUFzQjtRQUNyQixPQUFPLElBQUksQ0FBQ1AsZUFBZSxDQUFDTyxPQUFPOztJQUdwQ0MsZ0JBQTRCO1FBQzNCLE9BQU8sSUFBSSxDQUFDUixlQUFlLENBQUNRLGFBQWE7O0lBRzFDQyxVQUEwQjtRQUN6QixPQUFPLElBQUksQ0FBQ1QsZUFBZSxDQUFDUyxPQUFPOztJQUdwQ0MseUJBQWdEO1FBQy9DLE9BQU8sSUFBSSxDQUFDVixlQUFlLENBQUNVLHNCQUFzQjs7SUFHbkRDLCtCQUFzRDtRQUNyRCxPQUFPLElBQUksQ0FBQ1gsZUFBZSxDQUFDVyw0QkFBNEI7O0lBR3pEQyx3QkFBK0M7UUFDOUMsT0FBTyxJQUFJLENBQUNaLGVBQWUsQ0FBQ1kscUJBQXFCOztJQUdsREMsa0JBQXlDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDYixlQUFlLENBQUNhLGVBQWU7O0lBRzVDQyxpQ0FBd0Q7UUFDdkQsT0FBTyxJQUFJLENBQUNkLGVBQWUsQ0FBQ2MsOEJBQThCOztJQWhGM0RDLFlBQW1CQyxPQUF3QixDQUFFO1FBRjdDLElBQUEsQ0FBUXJCLFFBQVEsR0FBc0I7UUFHckMsSUFBSSxDQUFDSyxlQUFlLEdBQUdnQixRQUFRQyxVQUFVIn0=