5ff74f6cc0205f451052c4285977f623
/* eslint no-unused-vars: "off" */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return slidePrev;
    }
});
function slidePrev(speed = this.params.speed, runCallbacks = true, internal) {
    const swiper = this;
    const { params, snapGrid, slidesGrid, rtlTranslate, enabled, animating } = swiper;
    if (!enabled) return swiper;
    const isVirtual = swiper.virtual && params.virtual.enabled;
    if (params.loop) {
        if (animating && !isVirtual && params.loopPreventsSliding) return false;
        swiper.loopFix({
            direction: 'prev'
        });
        // eslint-disable-next-line
        swiper._clientLeft = swiper.wrapperEl.clientLeft;
    }
    const translate = rtlTranslate ? swiper.translate : -swiper.translate;
    function normalize(val) {
        if (val < 0) return -Math.floor(Math.abs(val));
        return Math.floor(val);
    }
    const normalizedTranslate = normalize(translate);
    const normalizedSnapGrid = snapGrid.map((val)=>normalize(val));
    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];
    if (typeof prevSnap === 'undefined' && params.cssMode) {
        let prevSnapIndex;
        snapGrid.forEach((snap, snapIndex)=>{
            if (normalizedTranslate >= snap) {
                // prevSnap = snap;
                prevSnapIndex = snapIndex;
            }
        });
        if (typeof prevSnapIndex !== 'undefined') {
            prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];
        }
    }
    let prevIndex = 0;
    if (typeof prevSnap !== 'undefined') {
        prevIndex = slidesGrid.indexOf(prevSnap);
        if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
        if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {
            prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;
            prevIndex = Math.max(prevIndex, 0);
        }
    }
    if (params.rewind && swiper.isBeginning) {
        const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;
        return swiper.slideTo(lastIndex, speed, runCallbacks, internal);
    }
    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSJdLCJuYW1lcyI6WyJzbGlkZVByZXYiLCJzcGVlZCIsInBhcmFtcyIsInJ1bkNhbGxiYWNrcyIsImludGVybmFsIiwic3dpcGVyIiwic25hcEdyaWQiLCJzbGlkZXNHcmlkIiwicnRsVHJhbnNsYXRlIiwiZW5hYmxlZCIsImFuaW1hdGluZyIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJsb29wIiwibG9vcFByZXZlbnRzU2xpZGluZyIsImxvb3BGaXgiLCJkaXJlY3Rpb24iLCJfY2xpZW50TGVmdCIsIndyYXBwZXJFbCIsImNsaWVudExlZnQiLCJ0cmFuc2xhdGUiLCJub3JtYWxpemUiLCJ2YWwiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZFNuYXBHcmlkIiwibWFwIiwicHJldlNuYXAiLCJpbmRleE9mIiwiY3NzTW9kZSIsInByZXZTbmFwSW5kZXgiLCJmb3JFYWNoIiwic25hcCIsInNuYXBJbmRleCIsInByZXZJbmRleCIsImFjdGl2ZUluZGV4Iiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBBdXRvIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJtYXgiLCJyZXdpbmQiLCJpc0JlZ2lubmluZyIsImxhc3RJbmRleCIsInNsaWRlcyIsImxlbmd0aCIsInNsaWRlVG8iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiQUFBQSxnQ0FBZ0M7Ozs7K0JBQ2hDOzs7ZUFBd0JBOzs7QUFBVCxTQUFTQSxVQUFVQyxRQUFRLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxLQUFLLEVBQUVFLGVBQWUsSUFBSSxFQUFFQyxRQUFRO0lBQ3hGLE1BQU1DLFNBQVMsSUFBSTtJQUNuQixNQUFNLEVBQ0pILE1BQU0sRUFDTkksUUFBUSxFQUNSQyxVQUFVLEVBQ1ZDLFlBQVksRUFDWkMsT0FBTyxFQUNQQyxTQUFTLEVBQ1YsR0FBR0w7SUFDSixJQUFJLENBQUNJLFNBQVMsT0FBT0o7SUFDckIsTUFBTU0sWUFBWU4sT0FBT08sT0FBTyxJQUFJVixPQUFPVSxPQUFPLENBQUNILE9BQU87SUFDMUQsSUFBSVAsT0FBT1csSUFBSSxFQUFFO1FBQ2YsSUFBSUgsYUFBYSxDQUFDQyxhQUFhVCxPQUFPWSxtQkFBbUIsRUFBRSxPQUFPO1FBQ2xFVCxPQUFPVSxPQUFPLENBQUM7WUFDYkMsV0FBVztRQUNiO1FBQ0EsMkJBQTJCO1FBQzNCWCxPQUFPWSxXQUFXLEdBQUdaLE9BQU9hLFNBQVMsQ0FBQ0MsVUFBVTtJQUNsRDtJQUNBLE1BQU1DLFlBQVlaLGVBQWVILE9BQU9lLFNBQVMsR0FBRyxDQUFDZixPQUFPZSxTQUFTO0lBQ3JFLFNBQVNDLFVBQVVDLEdBQUc7UUFDcEIsSUFBSUEsTUFBTSxHQUFHLE9BQU8sQ0FBQ0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxHQUFHLENBQUNIO1FBQ3pDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0Y7SUFDcEI7SUFDQSxNQUFNSSxzQkFBc0JMLFVBQVVEO0lBQ3RDLE1BQU1PLHFCQUFxQnJCLFNBQVNzQixHQUFHLENBQUNOLENBQUFBLE1BQU9ELFVBQVVDO0lBQ3pELElBQUlPLFdBQVd2QixRQUFRLENBQUNxQixtQkFBbUJHLE9BQU8sQ0FBQ0osdUJBQXVCLEVBQUU7SUFDNUUsSUFBSSxPQUFPRyxhQUFhLGVBQWUzQixPQUFPNkIsT0FBTyxFQUFFO1FBQ3JELElBQUlDO1FBQ0oxQixTQUFTMkIsT0FBTyxDQUFDLENBQUNDLE1BQU1DO1lBQ3RCLElBQUlULHVCQUF1QlEsTUFBTTtnQkFDL0IsbUJBQW1CO2dCQUNuQkYsZ0JBQWdCRztZQUNsQjtRQUNGO1FBQ0EsSUFBSSxPQUFPSCxrQkFBa0IsYUFBYTtZQUN4Q0gsV0FBV3ZCLFFBQVEsQ0FBQzBCLGdCQUFnQixJQUFJQSxnQkFBZ0IsSUFBSUEsY0FBYztRQUM1RTtJQUNGO0lBQ0EsSUFBSUksWUFBWTtJQUNoQixJQUFJLE9BQU9QLGFBQWEsYUFBYTtRQUNuQ08sWUFBWTdCLFdBQVd1QixPQUFPLENBQUNEO1FBQy9CLElBQUlPLFlBQVksR0FBR0EsWUFBWS9CLE9BQU9nQyxXQUFXLEdBQUc7UUFDcEQsSUFBSW5DLE9BQU9vQyxhQUFhLEtBQUssVUFBVXBDLE9BQU9xQyxjQUFjLEtBQUssS0FBS3JDLE9BQU9zQyxrQkFBa0IsRUFBRTtZQUMvRkosWUFBWUEsWUFBWS9CLE9BQU9vQyxvQkFBb0IsQ0FBQyxZQUFZLFFBQVE7WUFDeEVMLFlBQVliLEtBQUttQixHQUFHLENBQUNOLFdBQVc7UUFDbEM7SUFDRjtJQUNBLElBQUlsQyxPQUFPeUMsTUFBTSxJQUFJdEMsT0FBT3VDLFdBQVcsRUFBRTtRQUN2QyxNQUFNQyxZQUFZeEMsT0FBT0gsTUFBTSxDQUFDVSxPQUFPLElBQUlQLE9BQU9ILE1BQU0sQ0FBQ1UsT0FBTyxDQUFDSCxPQUFPLElBQUlKLE9BQU9PLE9BQU8sR0FBR1AsT0FBT08sT0FBTyxDQUFDa0MsTUFBTSxDQUFDQyxNQUFNLEdBQUcsSUFBSTFDLE9BQU95QyxNQUFNLENBQUNDLE1BQU0sR0FBRztRQUN2SixPQUFPMUMsT0FBTzJDLE9BQU8sQ0FBQ0gsV0FBVzVDLE9BQU9FLGNBQWNDO0lBQ3hEO0lBQ0EsT0FBT0MsT0FBTzJDLE9BQU8sQ0FBQ1osV0FBV25DLE9BQU9FLGNBQWNDO0FBQ3hEIn0=