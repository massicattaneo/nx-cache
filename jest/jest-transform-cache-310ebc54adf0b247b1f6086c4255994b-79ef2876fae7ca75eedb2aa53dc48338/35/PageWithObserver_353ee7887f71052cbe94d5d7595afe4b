907ddc6bd03e428387c114bd8bd44d4b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PageWithObserver", {
    enumerable: true,
    get: function() {
        return PageWithObserver;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactpdf = require("react-pdf");
const _hooks = require("@rp/react/web/common/hooks");
const _useInitialScrollPage = require("./hooks/useInitialScrollPage");
const _usePageSourceHighlight = require("./hooks/usePageSourceHighlight");
const observerConfig = {
    rootMargin: "-45%"
};
const observerConfigPane = {
    rootMargin: "-60% 0% -35% 0%"
};
const PageWithObserver = ({ className, onRenderSuccess, pageNumber, scale, setPageVisibility, width, initPage, boundingBox, isPaneView })=>{
    const [page, setPage] = (0, _react.useState)(null);
    (0, _useInitialScrollPage.useInitialScrollPage)({
        page,
        pageNumber,
        initPage
    });
    const [isPageLoading, setIsPageLoading] = (0, _react.useState)(true);
    const onIntersectionChange = (0, _react.useCallback)(([entry])=>{
        setPageVisibility(pageNumber, entry.isIntersecting);
    }, [
        pageNumber,
        setPageVisibility
    ]);
    (0, _hooks.useIntersectionObserver)(page, isPaneView ? observerConfigPane : observerConfig, onIntersectionChange);
    (0, _usePageSourceHighlight.usePageSourceHighlight)({
        boundingBox,
        page,
        pageNumber,
        isPageLoading
    });
    const handleRenderSuccess = (0, _react.useCallback)(()=>{
        setIsPageLoading(false);
        onRenderSuccess === null || onRenderSuccess === void 0 ? void 0 : onRenderSuccess();
    }, [
        onRenderSuccess
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactpdf.Page, {
        canvasRef: setPage,
        className: className,
        loading: "" // if not it will show the default loading message
        ,
        onRenderSuccess: handleRenderSuccess,
        pageNumber: pageNumber,
        scale: scale,
        width: width
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2RvY3VtZW50LXZpZXdlci9zcmMvbGliL0RvY3VtZW50Vmlld2VyUGFnZS9QYWdlV2l0aE9ic2VydmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCJyZWFjdC1wZGZcIlxuaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tIFwiQHJwL2NvbW1vbi9hcGktdHlwZXNcIlxuaW1wb3J0IHsgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9jb21tb24vaG9va3NcIlxuaW1wb3J0IHsgdXNlSW5pdGlhbFNjcm9sbFBhZ2UgfSBmcm9tIFwiLi9ob29rcy91c2VJbml0aWFsU2Nyb2xsUGFnZVwiXG5pbXBvcnQgeyB1c2VQYWdlU291cmNlSGlnaGxpZ2h0IH0gZnJvbSBcIi4vaG9va3MvdXNlUGFnZVNvdXJjZUhpZ2hsaWdodFwiXG5cbnR5cGUgUGFnZVdpdGhPYnNlcnZlclByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgb25SZW5kZXJTdWNjZXNzPzogKCkgPT4gdm9pZFxuICBwYWdlTnVtYmVyOiBudW1iZXJcbiAgc2NhbGU6IG51bWJlclxuICBzZXRQYWdlVmlzaWJpbGl0eTogKHBhZ2VOdW1iZXI6IG51bWJlciwgaXNJbnRlcnNlY3Rpbmc6IGJvb2xlYW4pID0+IHZvaWRcbiAgd2lkdGg6IG51bWJlclxuICBpbml0UGFnZTogbnVtYmVyXG4gIGJvdW5kaW5nQm94OiBCb3VuZGluZ0JveFxuICBpc1BhbmVWaWV3OiBib29sZWFuXG59XG5cbmNvbnN0IG9ic2VydmVyQ29uZmlnID0ge1xuICByb290TWFyZ2luOiBcIi00NSVcIixcbn1cblxuY29uc3Qgb2JzZXJ2ZXJDb25maWdQYW5lID0ge1xuICByb290TWFyZ2luOiBcIi02MCUgMCUgLTM1JSAwJVwiLFxufVxuXG5jb25zdCBQYWdlV2l0aE9ic2VydmVyID0gKHtcbiAgY2xhc3NOYW1lLFxuICBvblJlbmRlclN1Y2Nlc3MsXG4gIHBhZ2VOdW1iZXIsXG4gIHNjYWxlLFxuICBzZXRQYWdlVmlzaWJpbGl0eSxcbiAgd2lkdGgsXG4gIGluaXRQYWdlLFxuICBib3VuZGluZ0JveCxcbiAgaXNQYW5lVmlldyxcbn06IFBhZ2VXaXRoT2JzZXJ2ZXJQcm9wcykgPT4ge1xuICBjb25zdCBbcGFnZSwgc2V0UGFnZV0gPSB1c2VTdGF0ZTxIVE1MQ2FudmFzRWxlbWVudCB8IG51bGw+KG51bGwpXG4gIHVzZUluaXRpYWxTY3JvbGxQYWdlKHsgcGFnZSwgcGFnZU51bWJlciwgaW5pdFBhZ2UgfSlcbiAgY29uc3QgW2lzUGFnZUxvYWRpbmcsIHNldElzUGFnZUxvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSlcblxuICBjb25zdCBvbkludGVyc2VjdGlvbkNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChbZW50cnldOiBBcnJheTxJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5PikgPT4ge1xuICAgICAgc2V0UGFnZVZpc2liaWxpdHkocGFnZU51bWJlciwgZW50cnkuaXNJbnRlcnNlY3RpbmcpXG4gICAgfSxcbiAgICBbcGFnZU51bWJlciwgc2V0UGFnZVZpc2liaWxpdHldLFxuICApXG5cbiAgdXNlSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgcGFnZSxcbiAgICBpc1BhbmVWaWV3ID8gb2JzZXJ2ZXJDb25maWdQYW5lIDogb2JzZXJ2ZXJDb25maWcsXG4gICAgb25JbnRlcnNlY3Rpb25DaGFuZ2UsXG4gIClcbiAgdXNlUGFnZVNvdXJjZUhpZ2hsaWdodCh7XG4gICAgYm91bmRpbmdCb3gsXG4gICAgcGFnZSxcbiAgICBwYWdlTnVtYmVyLFxuICAgIGlzUGFnZUxvYWRpbmcsXG4gIH0pXG5cbiAgY29uc3QgaGFuZGxlUmVuZGVyU3VjY2VzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZXRJc1BhZ2VMb2FkaW5nKGZhbHNlKVxuICAgIG9uUmVuZGVyU3VjY2Vzcz8uKClcbiAgfSwgW29uUmVuZGVyU3VjY2Vzc10pXG5cbiAgcmV0dXJuIChcbiAgICA8UGFnZVxuICAgICAgY2FudmFzUmVmPXtzZXRQYWdlfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBsb2FkaW5nPVwiXCIgLy8gaWYgbm90IGl0IHdpbGwgc2hvdyB0aGUgZGVmYXVsdCBsb2FkaW5nIG1lc3NhZ2VcbiAgICAgIG9uUmVuZGVyU3VjY2Vzcz17aGFuZGxlUmVuZGVyU3VjY2Vzc31cbiAgICAgIHBhZ2VOdW1iZXI9e3BhZ2VOdW1iZXJ9XG4gICAgICBzY2FsZT17c2NhbGV9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgeyBQYWdlV2l0aE9ic2VydmVyIH1cbiJdLCJuYW1lcyI6WyJQYWdlV2l0aE9ic2VydmVyIiwib2JzZXJ2ZXJDb25maWciLCJyb290TWFyZ2luIiwib2JzZXJ2ZXJDb25maWdQYW5lIiwiY2xhc3NOYW1lIiwib25SZW5kZXJTdWNjZXNzIiwicGFnZU51bWJlciIsInNjYWxlIiwic2V0UGFnZVZpc2liaWxpdHkiLCJ3aWR0aCIsImluaXRQYWdlIiwiYm91bmRpbmdCb3giLCJpc1BhbmVWaWV3IiwicGFnZSIsInNldFBhZ2UiLCJ1c2VTdGF0ZSIsInVzZUluaXRpYWxTY3JvbGxQYWdlIiwiaXNQYWdlTG9hZGluZyIsInNldElzUGFnZUxvYWRpbmciLCJvbkludGVyc2VjdGlvbkNoYW5nZSIsInVzZUNhbGxiYWNrIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInVzZUludGVyc2VjdGlvbk9ic2VydmVyIiwidXNlUGFnZVNvdXJjZUhpZ2hsaWdodCIsImhhbmRsZVJlbmRlclN1Y2Nlc3MiLCJQYWdlIiwiY2FudmFzUmVmIiwibG9hZGluZyJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkErRVNBOzs7ZUFBQUE7Ozs7dUJBL0U2QjswQkFDakI7dUJBRW1CO3NDQUNIO3dDQUNFO0FBY3ZDLE1BQU1DLGlCQUFpQjtJQUNyQkMsWUFBWTtBQUNkO0FBRUEsTUFBTUMscUJBQXFCO0lBQ3pCRCxZQUFZO0FBQ2Q7QUFFQSxNQUFNRixtQkFBbUIsQ0FBQyxFQUN4QkksU0FBUyxFQUNUQyxlQUFlLEVBQ2ZDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxpQkFBaUIsRUFDakJDLEtBQUssRUFDTEMsUUFBUSxFQUNSQyxXQUFXLEVBQ1hDLFVBQVUsRUFDWTtJQUN0QixNQUFNLENBQUNDLE1BQU1DLFFBQVEsR0FBR0MsSUFBQUEsZUFBUSxFQUEyQjtJQUMzREMsSUFBQUEsMENBQW9CLEVBQUM7UUFBRUg7UUFBTVA7UUFBWUk7SUFBUztJQUNsRCxNQUFNLENBQUNPLGVBQWVDLGlCQUFpQixHQUFHSCxJQUFBQSxlQUFRLEVBQUM7SUFFbkQsTUFBTUksdUJBQXVCQyxJQUFBQSxrQkFBVyxFQUN0QyxDQUFDLENBQUNDLE1BQXdDO1FBQ3hDYixrQkFBa0JGLFlBQVllLE1BQU1DLGNBQWM7SUFDcEQsR0FDQTtRQUFDaEI7UUFBWUU7S0FBa0I7SUFHakNlLElBQUFBLDhCQUF1QixFQUNyQlYsTUFDQUQsYUFBYVQscUJBQXFCRixnQkFDbENrQjtJQUVGSyxJQUFBQSw4Q0FBc0IsRUFBQztRQUNyQmI7UUFDQUU7UUFDQVA7UUFDQVc7SUFDRjtJQUVBLE1BQU1RLHNCQUFzQkwsSUFBQUEsa0JBQVcsRUFBQztRQUN0Q0YsaUJBQWlCO1FBQ2pCYiw0QkFBQUEsc0NBQUFBO0lBQ0YsR0FBRztRQUFDQTtLQUFnQjtJQUVwQixxQkFDRSxxQkFBQ3FCLGNBQUk7UUFDSEMsV0FBV2I7UUFDWFYsV0FBV0E7UUFDWHdCLFNBQVEsR0FBRyxrREFBa0Q7O1FBQzdEdkIsaUJBQWlCb0I7UUFDakJuQixZQUFZQTtRQUNaQyxPQUFPQTtRQUNQRSxPQUFPQTs7QUFHYiJ9