{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"],"names":["inlineCode","state","node","text","type","value","replace","patch","result","tagName","properties","children","applyData"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;CAKC,GAED,mDAAmD;AACnD;;;;;+BAYgBA;;;eAAAA;;;AAAT,SAASA,WAAWC,KAAK,EAAEC,IAAI;IACpC,iBAAiB,GACjB,MAAMC,OAAO;QAACC,MAAM;QAAQC,OAAOH,KAAKG,KAAK,CAACC,OAAO,CAAC,aAAa;IAAI;IACvEL,MAAMM,KAAK,CAACL,MAAMC;IAElB,oBAAoB,GACpB,MAAMK,SAAS;QACbJ,MAAM;QACNK,SAAS;QACTC,YAAY,CAAC;QACbC,UAAU;YAACR;SAAK;IAClB;IACAF,MAAMM,KAAK,CAACL,MAAMM;IAClB,OAAOP,MAAMW,SAAS,CAACV,MAAMM;AAC/B"}