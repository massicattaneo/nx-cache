{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/node_modules/micromark-core-commonmark/lib/content.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: itâ€™s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n"],"names":["content","tokenize","tokenizeContent","resolve","resolveContent","continuationConstruct","tokenizeContinuation","partial","events","subtokenize","effects","ok","previous","chunkStart","code","enter","contentType","chunkInside","contentEnd","markdownLineEnding","check","contentContinue","consume","exit","next","nok","self","startLookahead","factorySpace","prefixed","tail","length","parser","constructs","disable","null","includes","type","sliceSerialize","interrupt","flow"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;CAOC;;;;+BASYA;;;eAAAA;;;uCAPc;wCACM;0CACP;AAKnB,MAAMA,UAAU;IACrBC,UAAUC;IACVC,SAASC;AACX;AAEA,sBAAsB,GACtB,MAAMC,wBAAwB;IAC5BJ,UAAUK;IACVC,SAAS;AACX;AAEA;;;;;CAKC,GACD,SAASH,eAAeI,MAAM;IAC5BC,IAAAA,qCAAW,EAACD;IACZ,OAAOA;AACT;AAEA;;;CAGC,GACD,SAASN,gBAAgBQ,OAAO,EAAEC,EAAE;IAClC,8BAA8B,GAC9B,IAAIC;IACJ,OAAOC;IAEP;;;;;;;;;GASC,GACD,SAASA,WAAWC,IAAI;QACtBJ,QAAQK,KAAK,CAAC;QACdH,WAAWF,QAAQK,KAAK,CAAC,gBAAgB;YACvCC,aAAa;QACf;QACA,OAAOC,YAAYH;IACrB;IAEA;;;;;;;;;GASC,GACD,SAASG,YAAYH,IAAI;QACvB,IAAIA,SAAS,MAAM;YACjB,OAAOI,WAAWJ;QACpB;QAEA,0EAA0E;QAC1E,kCAAkC;QAClC,IAAIK,IAAAA,0CAAkB,EAACL,OAAO;YAC5B,OAAOJ,QAAQU,KAAK,CAClBf,uBACAgB,iBACAH,YACAJ;QACJ;QAEA,QAAQ;QACRJ,QAAQY,OAAO,CAACR;QAChB,OAAOG;IACT;IAEA;;;;GAIC,GACD,SAASC,WAAWJ,IAAI;QACtBJ,QAAQa,IAAI,CAAC;QACbb,QAAQa,IAAI,CAAC;QACb,OAAOZ,GAAGG;IACZ;IAEA;;;;GAIC,GACD,SAASO,gBAAgBP,IAAI;QAC3BJ,QAAQY,OAAO,CAACR;QAChBJ,QAAQa,IAAI,CAAC;QACbX,SAASY,IAAI,GAAGd,QAAQK,KAAK,CAAC,gBAAgB;YAC5CC,aAAa;YACbJ;QACF;QACAA,WAAWA,SAASY,IAAI;QACxB,OAAOP;IACT;AACF;AAEA;;;CAGC,GACD,SAASX,qBAAqBI,OAAO,EAAEC,EAAE,EAAEc,GAAG;IAC5C,MAAMC,OAAO,IAAI;IACjB,OAAOC;IAEP;;;;GAIC,GACD,SAASA,eAAeb,IAAI;QAC1BJ,QAAQa,IAAI,CAAC;QACbb,QAAQK,KAAK,CAAC;QACdL,QAAQY,OAAO,CAACR;QAChBJ,QAAQa,IAAI,CAAC;QACb,OAAOK,IAAAA,mCAAY,EAAClB,SAASmB,UAAU;IACzC;IAEA;;;;GAIC,GACD,SAASA,SAASf,IAAI;QACpB,IAAIA,SAAS,QAAQK,IAAAA,0CAAkB,EAACL,OAAO;YAC7C,OAAOW,IAAIX;QACb;QAEA,gCAAgC;QAEhC,MAAMgB,OAAOJ,KAAKlB,MAAM,CAACkB,KAAKlB,MAAM,CAACuB,MAAM,GAAG,EAAE;QAChD,IACE,CAACL,KAAKM,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,mBAC9CN,QACAA,IAAI,CAAC,EAAE,CAACO,IAAI,KAAK,gBACjBP,IAAI,CAAC,EAAE,CAACQ,cAAc,CAACR,IAAI,CAAC,EAAE,EAAE,MAAMC,MAAM,IAAI,GAChD;YACA,OAAOpB,GAAGG;QACZ;QACA,OAAOJ,QAAQ6B,SAAS,CAACb,KAAKM,MAAM,CAACC,UAAU,CAACO,IAAI,EAAEf,KAAKd,IAAIG;IACjE;AACF"}