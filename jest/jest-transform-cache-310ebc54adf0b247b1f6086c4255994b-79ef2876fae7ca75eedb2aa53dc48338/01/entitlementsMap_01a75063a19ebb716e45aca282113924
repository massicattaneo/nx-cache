dec5da2fd019708066d724621bc5d807
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    datasetEntitlements: function() {
        return datasetEntitlements;
    },
    relatedScopeEntitlements: function() {
        return relatedScopeEntitlements;
    }
});
// TODO: Enforce ApplicationEntitlement typing on the values of
// these objects.
const datasetEntitlements = {
    transcripts: "content:fs_transcripts",
    "job-analytics": "chat:jobs",
    filings: "content:sec_filings",
    news: undefined,
    price: "chat:pricing",
    "sentiment-attention": "chat:sentiment",
    estimates: "chat:estimates",
    "knowledge-graph": "chat:knowledge_graph",
    crunchbase: "chat:crunchbase",
    "etf-holdings": "chat:etf_holdings",
    market_intelligence: "content:capital_markets",
    earnings_calls: "content:quartr_transcripts"
};
const relatedScopeEntitlements = {
    "job-analytics": "chat:jobs",
    estimates: "chat:estimates",
    "sentiment-attention": "chat:sentiment",
    files: "chat:file",
    filings: "content:sec_filings",
    news: undefined,
    price: "chat:pricing",
    transcripts: "content:fs_transcripts",
    "knowledge-graph": "chat:knowledge_graph",
    crunchbase: "chat:crunchbase",
    "etf-holdings": "chat:etf_holdings",
    market_intelligence: "content:capital_markets",
    earnings_calls: "content:quartr_transcripts",
    quartr_pro: "content:quartr_presentation_materials",
    market_narratives: "content:pricing_culture",
    middle_eastern_markets: "content:middle_eastern_markets",
    crypto_markets: "content:crypto_markets",
    financial_times: "content:financial_times",
    expert_networks: "content:expert_networks"
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL2hvb2tzL3NyYy9saWIvdXNlU3VnZ2VzdGVkUHJvbXB0cy9lbnRpdGxlbWVudHNNYXAudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCJcbmltcG9ydCB7IERhdGFzZXRTY29wZSwgU3VnZ2VzdGVkUHJvbXB0U2NoZW1hIH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcblxudHlwZSBEYXRhc2V0cyA9IGtleW9mIHouaW5mZXI8dHlwZW9mIFN1Z2dlc3RlZFByb21wdFNjaGVtYT5bXCJkYXRhc2V0c1wiXVxuXG4vLyBUT0RPOiBFbmZvcmNlIEFwcGxpY2F0aW9uRW50aXRsZW1lbnQgdHlwaW5nIG9uIHRoZSB2YWx1ZXMgb2Zcbi8vIHRoZXNlIG9iamVjdHMuXG5cbmNvbnN0IGRhdGFzZXRFbnRpdGxlbWVudHMgPSB7XG4gIHRyYW5zY3JpcHRzOiBcImNvbnRlbnQ6ZnNfdHJhbnNjcmlwdHNcIixcbiAgXCJqb2ItYW5hbHl0aWNzXCI6IFwiY2hhdDpqb2JzXCIsXG4gIGZpbGluZ3M6IFwiY29udGVudDpzZWNfZmlsaW5nc1wiLFxuICBuZXdzOiB1bmRlZmluZWQsXG4gIHByaWNlOiBcImNoYXQ6cHJpY2luZ1wiLFxuICBcInNlbnRpbWVudC1hdHRlbnRpb25cIjogXCJjaGF0OnNlbnRpbWVudFwiLFxuICBlc3RpbWF0ZXM6IFwiY2hhdDplc3RpbWF0ZXNcIixcbiAgXCJrbm93bGVkZ2UtZ3JhcGhcIjogXCJjaGF0Omtub3dsZWRnZV9ncmFwaFwiLFxuICBjcnVuY2hiYXNlOiBcImNoYXQ6Y3J1bmNoYmFzZVwiLFxuICBcImV0Zi1ob2xkaW5nc1wiOiBcImNoYXQ6ZXRmX2hvbGRpbmdzXCIsXG4gIG1hcmtldF9pbnRlbGxpZ2VuY2U6IFwiY29udGVudDpjYXBpdGFsX21hcmtldHNcIixcbiAgZWFybmluZ3NfY2FsbHM6IFwiY29udGVudDpxdWFydHJfdHJhbnNjcmlwdHNcIixcbn0gYXMgY29uc3Qgc2F0aXNmaWVzIFJlY29yZDxEYXRhc2V0cywgc3RyaW5nIHwgdW5kZWZpbmVkPlxuXG5jb25zdCByZWxhdGVkU2NvcGVFbnRpdGxlbWVudHMgPSB7XG4gIFwiam9iLWFuYWx5dGljc1wiOiBcImNoYXQ6am9ic1wiLFxuICBlc3RpbWF0ZXM6IFwiY2hhdDplc3RpbWF0ZXNcIixcbiAgXCJzZW50aW1lbnQtYXR0ZW50aW9uXCI6IFwiY2hhdDpzZW50aW1lbnRcIixcbiAgZmlsZXM6IFwiY2hhdDpmaWxlXCIsXG4gIGZpbGluZ3M6IFwiY29udGVudDpzZWNfZmlsaW5nc1wiLFxuICBuZXdzOiB1bmRlZmluZWQsXG4gIHByaWNlOiBcImNoYXQ6cHJpY2luZ1wiLFxuICB0cmFuc2NyaXB0czogXCJjb250ZW50OmZzX3RyYW5zY3JpcHRzXCIsXG4gIFwia25vd2xlZGdlLWdyYXBoXCI6IFwiY2hhdDprbm93bGVkZ2VfZ3JhcGhcIixcbiAgY3J1bmNoYmFzZTogXCJjaGF0OmNydW5jaGJhc2VcIixcbiAgXCJldGYtaG9sZGluZ3NcIjogXCJjaGF0OmV0Zl9ob2xkaW5nc1wiLFxuICBtYXJrZXRfaW50ZWxsaWdlbmNlOiBcImNvbnRlbnQ6Y2FwaXRhbF9tYXJrZXRzXCIsXG4gIGVhcm5pbmdzX2NhbGxzOiBcImNvbnRlbnQ6cXVhcnRyX3RyYW5zY3JpcHRzXCIsXG4gIHF1YXJ0cl9wcm86IFwiY29udGVudDpxdWFydHJfcHJlc2VudGF0aW9uX21hdGVyaWFsc1wiLCAvLyBUT0RPOiBUaGlzIGlzIG5vdCBmdWxseSBjb3JyZWN0LiBGaXhpbmcgdGhpcyBsb2dpYyBpcyBub3Qgd29ydGggaXQgYXMgc3VnZ2VzdGVkUHJvbXB0cyBzaG91bGQgYmUgZGVhZCBzb29uXG4gIG1hcmtldF9uYXJyYXRpdmVzOiBcImNvbnRlbnQ6cHJpY2luZ19jdWx0dXJlXCIsXG4gIG1pZGRsZV9lYXN0ZXJuX21hcmtldHM6IFwiY29udGVudDptaWRkbGVfZWFzdGVybl9tYXJrZXRzXCIsXG4gIGNyeXB0b19tYXJrZXRzOiBcImNvbnRlbnQ6Y3J5cHRvX21hcmtldHNcIixcbiAgZmluYW5jaWFsX3RpbWVzOiBcImNvbnRlbnQ6ZmluYW5jaWFsX3RpbWVzXCIsXG4gIGV4cGVydF9uZXR3b3JrczogXCJjb250ZW50OmV4cGVydF9uZXR3b3Jrc1wiLFxufSBhcyBjb25zdCBzYXRpc2ZpZXMgUmVjb3JkPERhdGFzZXRTY29wZSwgc3RyaW5nIHwgdW5kZWZpbmVkPlxuXG5leHBvcnQgeyBkYXRhc2V0RW50aXRsZW1lbnRzLCByZWxhdGVkU2NvcGVFbnRpdGxlbWVudHMgfVxuIl0sIm5hbWVzIjpbImRhdGFzZXRFbnRpdGxlbWVudHMiLCJyZWxhdGVkU2NvcGVFbnRpdGxlbWVudHMiLCJ0cmFuc2NyaXB0cyIsImZpbGluZ3MiLCJuZXdzIiwidW5kZWZpbmVkIiwicHJpY2UiLCJlc3RpbWF0ZXMiLCJjcnVuY2hiYXNlIiwibWFya2V0X2ludGVsbGlnZW5jZSIsImVhcm5pbmdzX2NhbGxzIiwiZmlsZXMiLCJxdWFydHJfcHJvIiwibWFya2V0X25hcnJhdGl2ZXMiLCJtaWRkbGVfZWFzdGVybl9tYXJrZXRzIiwiY3J5cHRvX21hcmtldHMiLCJmaW5hbmNpYWxfdGltZXMiLCJleHBlcnRfbmV0d29ya3MiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTZDU0EsbUJBQW1CO2VBQW5CQTs7SUFBcUJDLHdCQUF3QjtlQUF4QkE7OztBQXhDOUIsK0RBQStEO0FBQy9ELGlCQUFpQjtBQUVqQixNQUFNRCxzQkFBc0I7SUFDMUJFLGFBQWE7SUFDYixpQkFBaUI7SUFDakJDLFNBQVM7SUFDVEMsTUFBTUM7SUFDTkMsT0FBTztJQUNQLHVCQUF1QjtJQUN2QkMsV0FBVztJQUNYLG1CQUFtQjtJQUNuQkMsWUFBWTtJQUNaLGdCQUFnQjtJQUNoQkMscUJBQXFCO0lBQ3JCQyxnQkFBZ0I7QUFDbEI7QUFFQSxNQUFNVCwyQkFBMkI7SUFDL0IsaUJBQWlCO0lBQ2pCTSxXQUFXO0lBQ1gsdUJBQXVCO0lBQ3ZCSSxPQUFPO0lBQ1BSLFNBQVM7SUFDVEMsTUFBTUM7SUFDTkMsT0FBTztJQUNQSixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CTSxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCQyxxQkFBcUI7SUFDckJDLGdCQUFnQjtJQUNoQkUsWUFBWTtJQUNaQyxtQkFBbUI7SUFDbkJDLHdCQUF3QjtJQUN4QkMsZ0JBQWdCO0lBQ2hCQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtBQUNuQiJ9