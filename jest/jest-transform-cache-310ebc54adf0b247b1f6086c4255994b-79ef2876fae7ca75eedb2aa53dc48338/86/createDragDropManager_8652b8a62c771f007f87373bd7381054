4651241f02f76881133f17d81707755d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createDragDropManager", {
    enumerable: true,
    get: function() {
        return createDragDropManager;
    }
});
const _redux = require("redux");
const _DragDropManagerImpl = require("./classes/DragDropManagerImpl.js");
const _DragDropMonitorImpl = require("./classes/DragDropMonitorImpl.js");
const _HandlerRegistryImpl = require("./classes/HandlerRegistryImpl.js");
const _index = require("./reducers/index.js");
function createDragDropManager(backendFactory, globalContext = undefined, backendOptions = {}, debugMode = false) {
    const store = makeStoreInstance(debugMode);
    const monitor = new _DragDropMonitorImpl.DragDropMonitorImpl(store, new _HandlerRegistryImpl.HandlerRegistryImpl(store));
    const manager = new _DragDropManagerImpl.DragDropManagerImpl(store, monitor);
    const backend = backendFactory(manager, globalContext, backendOptions);
    manager.receiveBackend(backend);
    return manager;
}
function makeStoreInstance(debugMode) {
    // TODO: if we ever make a react-native version of this,
    // we'll need to consider how to pull off dev-tooling
    const reduxDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;
    return (0, _redux.createStore)(_index.reduce, debugMode && reduxDevTools && reduxDevTools({
        name: 'dnd-core',
        instanceId: 'dnd-core'
    }));
} //# sourceMappingURL=createDragDropManager.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVEcmFnRHJvcE1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTdG9yZSB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCdcblxuaW1wb3J0IHsgRHJhZ0Ryb3BNYW5hZ2VySW1wbCB9IGZyb20gJy4vY2xhc3Nlcy9EcmFnRHJvcE1hbmFnZXJJbXBsLmpzJ1xuaW1wb3J0IHsgRHJhZ0Ryb3BNb25pdG9ySW1wbCB9IGZyb20gJy4vY2xhc3Nlcy9EcmFnRHJvcE1vbml0b3JJbXBsLmpzJ1xuaW1wb3J0IHsgSGFuZGxlclJlZ2lzdHJ5SW1wbCB9IGZyb20gJy4vY2xhc3Nlcy9IYW5kbGVyUmVnaXN0cnlJbXBsLmpzJ1xuaW1wb3J0IHR5cGUgeyBCYWNrZW5kRmFjdG9yeSwgRHJhZ0Ryb3BNYW5hZ2VyIH0gZnJvbSAnLi9pbnRlcmZhY2VzLmpzJ1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSB9IGZyb20gJy4vcmVkdWNlcnMvaW5kZXguanMnXG5pbXBvcnQgeyByZWR1Y2UgfSBmcm9tICcuL3JlZHVjZXJzL2luZGV4LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyKFxuXHRiYWNrZW5kRmFjdG9yeTogQmFja2VuZEZhY3RvcnksXG5cdGdsb2JhbENvbnRleHQ6IHVua25vd24gPSB1bmRlZmluZWQsXG5cdGJhY2tlbmRPcHRpb25zOiB1bmtub3duID0ge30sXG5cdGRlYnVnTW9kZSA9IGZhbHNlLFxuKTogRHJhZ0Ryb3BNYW5hZ2VyIHtcblx0Y29uc3Qgc3RvcmUgPSBtYWtlU3RvcmVJbnN0YW5jZShkZWJ1Z01vZGUpXG5cdGNvbnN0IG1vbml0b3IgPSBuZXcgRHJhZ0Ryb3BNb25pdG9ySW1wbChzdG9yZSwgbmV3IEhhbmRsZXJSZWdpc3RyeUltcGwoc3RvcmUpKVxuXHRjb25zdCBtYW5hZ2VyID0gbmV3IERyYWdEcm9wTWFuYWdlckltcGwoc3RvcmUsIG1vbml0b3IpXG5cdGNvbnN0IGJhY2tlbmQgPSBiYWNrZW5kRmFjdG9yeShtYW5hZ2VyLCBnbG9iYWxDb250ZXh0LCBiYWNrZW5kT3B0aW9ucylcblx0bWFuYWdlci5yZWNlaXZlQmFja2VuZChiYWNrZW5kKVxuXHRyZXR1cm4gbWFuYWdlclxufVxuXG5mdW5jdGlvbiBtYWtlU3RvcmVJbnN0YW5jZShkZWJ1Z01vZGU6IGJvb2xlYW4pOiBTdG9yZTxTdGF0ZT4ge1xuXHQvLyBUT0RPOiBpZiB3ZSBldmVyIG1ha2UgYSByZWFjdC1uYXRpdmUgdmVyc2lvbiBvZiB0aGlzLFxuXHQvLyB3ZSdsbCBuZWVkIHRvIGNvbnNpZGVyIGhvdyB0byBwdWxsIG9mZiBkZXYtdG9vbGluZ1xuXHRjb25zdCByZWR1eERldlRvb2xzID1cblx0XHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuXHRcdCh3aW5kb3cgYXMgYW55KS5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fXG5cdHJldHVybiBjcmVhdGVTdG9yZShcblx0XHRyZWR1Y2UsXG5cdFx0ZGVidWdNb2RlICYmXG5cdFx0XHRyZWR1eERldlRvb2xzICYmXG5cdFx0XHRyZWR1eERldlRvb2xzKHtcblx0XHRcdFx0bmFtZTogJ2RuZC1jb3JlJyxcblx0XHRcdFx0aW5zdGFuY2VJZDogJ2RuZC1jb3JlJyxcblx0XHRcdH0pLFxuXHQpXG59XG4iXSwibmFtZXMiOlsiY3JlYXRlRHJhZ0Ryb3BNYW5hZ2VyIiwiYmFja2VuZEZhY3RvcnkiLCJnbG9iYWxDb250ZXh0IiwidW5kZWZpbmVkIiwiYmFja2VuZE9wdGlvbnMiLCJkZWJ1Z01vZGUiLCJzdG9yZSIsIm1ha2VTdG9yZUluc3RhbmNlIiwibW9uaXRvciIsIkRyYWdEcm9wTW9uaXRvckltcGwiLCJIYW5kbGVyUmVnaXN0cnlJbXBsIiwibWFuYWdlciIsIkRyYWdEcm9wTWFuYWdlckltcGwiLCJiYWNrZW5kIiwicmVjZWl2ZUJhY2tlbmQiLCJyZWR1eERldlRvb2xzIiwid2luZG93IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlIiwibmFtZSIsImluc3RhbmNlSWQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBVWdCQTs7O2VBQUFBOzs7dUJBVFk7cUNBRVE7cUNBQ0E7cUNBQ0E7dUJBR2I7QUFFaEIsU0FBU0Esc0JBQ2ZDLGNBQThCLEVBQzlCQyxnQkFBeUJDLFNBQVMsRUFDbENDLGlCQUEwQixDQUFBLENBQUUsRUFDNUJDLFlBQVksS0FBSztJQUVqQixNQUFNQyxRQUFRQyxrQkFBa0JGO0lBQ2hDLE1BQU1HLFVBQVUsSUFBSUMsd0NBQW1CLENBQUNILE9BQU8sSUFBSUksd0NBQW1CLENBQUNKO0lBQ3ZFLE1BQU1LLFVBQVUsSUFBSUMsd0NBQW1CLENBQUNOLE9BQU9FO0lBQy9DLE1BQU1LLFVBQVVaLGVBQWVVLFNBQVNULGVBQWVFO0lBQ3ZETyxRQUFRRyxjQUFjLENBQUNEO0lBQ3ZCLE9BQU9GOztBQUdSLFNBQVNKLGtCQUFrQkYsU0FBa0I7SUFDNUMsd0RBQXdEO0lBQ3hELHFEQUFxRDtJQUNyRCxNQUFNVSxnQkFDTCxPQUFPQyxXQUFXLGVBQ2xCQSxPQUFnQkMsNEJBQTRCO0lBQzdDLE9BQU9DLElBQUFBLGtCQUFXLEVBQ2pCQyxhQUFNLEVBQ05kLGFBQ0NVLGlCQUNBQSxjQUFjO1FBQ2JLLE1BQU07UUFDTkMsWUFBWSJ9