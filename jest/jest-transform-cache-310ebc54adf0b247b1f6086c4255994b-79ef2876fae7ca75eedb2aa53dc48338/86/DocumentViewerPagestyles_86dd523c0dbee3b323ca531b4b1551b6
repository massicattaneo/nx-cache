bc3d3090b8dbbc05b60b252f68ea0f5d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ContentStyled: function() {
        return ContentStyled;
    },
    DocumentMetadataContainer: function() {
        return DocumentMetadataContainer;
    },
    DocumentTextContainer: function() {
        return DocumentTextContainer;
    },
    RpJsonFixedContent: function() {
        return RpJsonFixedContent;
    },
    RpJsonScrollWrapperStyled: function() {
        return RpJsonScrollWrapperStyled;
    },
    RpJsonSpotlightSentenceStyled: function() {
        return RpJsonSpotlightSentenceStyled;
    },
    RpJsonTitleDisplayStyled: function() {
        return RpJsonTitleDisplayStyled;
    }
});
const _theme = require("@rp/react/theme");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _rpjson = require("@rp/react/web/rpjson");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const RpJsonFixedContent = (0, _theme.styled)(_core.Grid, {
    shouldForwardProp: (prop)=>prop !== "isMobile"
})(({ theme, isMobile })=>({
        paddingRight: isMobile ? 0 : theme.spacing(3)
    }));
const RpJsonScrollWrapperStyled = (0, _theme.styled)(_rpjson.RpJsonScrollWrapper, {
    shouldForwardProp: (propName)=>propName !== "isPane"
})(({ theme, isPane = false })=>({
        "&": _object_spread_props(_object_spread({
            paddingBottom: isPane ? 0 : theme.spacing(2),
            backgroundColor: isPane ? theme.palette.elevation.dp01 : "inherit"
        }, theme.onHoverScrollbarStyles), {
            ":hover": _object_spread({}, theme.scrollbarStyles)
        })
    }));
const ContentStyled = (0, _theme.styled)("div", {
    name: "ContentStyled"
})(()=>({
        "& hr": {
            border: "none"
        }
    }));
const DocumentMetadataContainer = (0, _theme.styled)("div")(({ theme })=>({
        color: theme.palette.grey[300],
        fontSize: 11,
        letterSpacing: 1,
        display: "flex",
        overflow: "hidden",
        justifyContent: "left",
        alignItems: "center",
        gap: theme.spacing(1),
        margin: `${theme.spacing(2)} 0`,
        paddingRight: theme.spacing(2),
        "& span": {
            fontSize: 11,
            "& svg": {
                marginRight: theme.spacing(0.5)
            }
        },
        "& div": {
            display: "flex",
            alignItems: "center",
            "& svg": {
                height: 24
            }
        }
    }));
const DocumentTextContainer = (0, _theme.styled)("div")(({ theme })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    const contentBlockDefaults = {
        fontWeight: 400,
        lineHeight: "30px",
        margin: 0,
        marginTop: theme.spacing(2)
    };
    return {
        overflow: "hidden",
        width: "100%",
        display: "flex",
        flexDirection: "column",
        fontSize: isMobile ? 20 : 18,
        lineHeight: isMobile ? "32px" : "",
        paddingBottom: theme.spacing(2),
        minHeight: "100vh",
        // Content blocks
        // HEADING
        "& h3": _object_spread_props(_object_spread({}, contentBlockDefaults), {
            color: theme.palette.info.light
        }),
        // Add spacing on top of HEADINGS
        "& * + h3": {
            marginTop: theme.spacing(4)
        },
        // PARAGRAPH
        "& p": _object_spread({}, contentBlockDefaults),
        // But remove margin from paragraphs inside list items and tables
        "& li>p, & td>p": {
            marginTop: 0
        },
        // TABLE
        "& table": {
            borderCollapse: "collapse",
            marginTop: theme.spacing(2)
        },
        "& td": {
            color: "white",
            background: theme.palette.grey[700],
            boxShadow: "inset -1px -1px 0px #515151",
            padding: theme.spacing(2),
            minWidth: 150
        },
        // FOOTER
        "& h5": _object_spread_props(_object_spread({}, contentBlockDefaults), {
            fontSize: theme.typography.caption.fontSize
        }),
        // LISTS
        "& ul, & ol": {
            paddingInlineStart: theme.spacing(3)
        }
    };
});
const RpJsonSpotlightSentenceStyled = (0, _theme.styled)(_rpjson.RpJsonSpotlightSentence, {
    name: "RpJsonSpotlightSentence"
})(({ theme, isHeadline })=>{
    const { isMobile } = (0, _hooks.useDeviceInfo)();
    if (isHeadline) {
        return {
            "& a": {
                textDecoration: "none",
                color: "inherit",
                cursor: "auto"
            }
        };
    }
    return {
        "& a": {
            color: theme.palette.text.primary,
            padding: isMobile ? "4px 0px" : "5px 0px",
            cursor: "pointer",
            textDecoration: "none",
            backgroundColor: "#0E3141",
            ":hover": {
                backgroundColor: theme.palette.primary.dark
            }
        }
    };
});
const RpJsonTitleDisplayStyled = (0, _theme.styled)(_rpjson.RpJsonTitleDisplay)(({ theme })=>({
        "& p": {
            fontSize: theme.typography.h5.fontSize,
            lineHeight: "32px",
            fontWeight: 700,
            margin: 0,
            display: "inline"
        }
    }));

//# sourceMappingURL=data:application/json;base64,