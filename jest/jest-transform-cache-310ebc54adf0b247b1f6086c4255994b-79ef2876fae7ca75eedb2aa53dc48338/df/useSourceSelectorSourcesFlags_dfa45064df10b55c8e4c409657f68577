a2ca3f253cf22c0848e9f2689d71ba27
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSourceSelectorSourcesFlags", {
    enumerable: true,
    get: function() {
        return useSourceSelectorSourcesFlags;
    }
});
const _react = require("react");
const _launchdarklyreactclientsdk = require("launchdarkly-react-client-sdk");
const _sourceSelectorconstants = require("../sourceSelector.constants");
function useSourceSelectorSourcesFlags({ isLoadingAutosuggestSources, parentItem, isInitializingState, isFetchingNextPage, allAutosuggestSources, hasError }) {
    const { enableWebFeSourceSelectorV1SelectAll } = (0, _launchdarklyreactclientsdk.useFlags)();
    return (0, _react.useMemo)(()=>{
        if (hasError) {
            return {
                isDataLoading: false,
                isDataNoResults: false,
                isDataToShow: false,
                shouldHaveSelectAll: false
            };
        }
        const shouldHaveSelectAll = !!enableWebFeSourceSelectorV1SelectAll && !!(parentItem === null || parentItem === void 0 ? void 0 : parentItem.id) && !_sourceSelectorconstants.CONTENT_PACKAGES_WITHOUT_SELECT_ALL.includes(parentItem.id);
        if (isLoadingAutosuggestSources || isFetchingNextPage || isInitializingState || !parentItem) {
            return {
                isDataLoading: true,
                isDataNoResults: false,
                isDataToShow: false,
                shouldHaveSelectAll
            };
        }
        const isDataToShow = allAutosuggestSources.length !== 0;
        const isDataNoResults = !isDataToShow;
        return {
            isDataLoading: false,
            isDataNoResults,
            isDataToShow,
            shouldHaveSelectAll
        };
    }, [
        isLoadingAutosuggestSources,
        parentItem,
        isInitializingState,
        isFetchingNextPage,
        allAutosuggestSources,
        hasError,
        enableWebFeSourceSelectorV1SelectAll
    ]);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvY29tbW9uL3NvdXJjZS1zZWxlY3Rvci9zcmMvaG9va3MvdXNlU291cmNlU2VsZWN0b3JTb3VyY2VzRmxhZ3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VGbGFncyB9IGZyb20gXCJsYXVuY2hkYXJrbHktcmVhY3QtY2xpZW50LXNka1wiXG5pbXBvcnQgeyBBdXRvc3VnZ2VzdFNvdXJjZSwgQ29udGVudENhdGVnb3J5LCBDb250ZW50UGFja2FnZSB9IGZyb20gXCJAcnAvcmVhY3QvdGFuc3RhY2stYXBpL2NvbnRlbnRcIlxuaW1wb3J0IHsgQ09OVEVOVF9QQUNLQUdFU19XSVRIT1VUX1NFTEVDVF9BTEwgfSBmcm9tIFwiLi4vc291cmNlU2VsZWN0b3IuY29uc3RhbnRzXCJcbmltcG9ydCB7IFNvdXJjZVNlbGVjdG9yRmVhdHVyZUZsYWdzIH0gZnJvbSBcIi4uL3NvdXJjZVNlbGVjdG9yLnR5cGVzXCJcblxudHlwZSBVc2VTb3VyY2VTZWxlY3RvclNvdXJjZXNGbGFnc1Byb3BzID0ge1xuICBpc0xvYWRpbmdBdXRvc3VnZ2VzdFNvdXJjZXM6IGJvb2xlYW5cbiAgcGFyZW50SXRlbTogQ29udGVudFBhY2thZ2UgfCBDb250ZW50Q2F0ZWdvcnkgfCBudWxsXG4gIGlzSW5pdGlhbGl6aW5nU3RhdGU6IGJvb2xlYW5cbiAgaXNGZXRjaGluZ05leHRQYWdlOiBib29sZWFuXG4gIGFsbEF1dG9zdWdnZXN0U291cmNlczogQXJyYXk8QXV0b3N1Z2dlc3RTb3VyY2U+XG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbnR5cGUgVXNlU291cmNlU2VsZWN0b3JTb3VyY2VzRmxhZ3NTdGF0ZSA9IHtcbiAgaXNEYXRhTG9hZGluZzogYm9vbGVhblxuICBpc0RhdGFOb1Jlc3VsdHM6IGJvb2xlYW5cbiAgaXNEYXRhVG9TaG93OiBib29sZWFuXG4gIHNob3VsZEhhdmVTZWxlY3RBbGw6IGJvb2xlYW5cbn1cbmZ1bmN0aW9uIHVzZVNvdXJjZVNlbGVjdG9yU291cmNlc0ZsYWdzKHtcbiAgaXNMb2FkaW5nQXV0b3N1Z2dlc3RTb3VyY2VzLFxuICBwYXJlbnRJdGVtLFxuICBpc0luaXRpYWxpemluZ1N0YXRlLFxuICBpc0ZldGNoaW5nTmV4dFBhZ2UsXG4gIGFsbEF1dG9zdWdnZXN0U291cmNlcyxcbiAgaGFzRXJyb3IsXG59OiBVc2VTb3VyY2VTZWxlY3RvclNvdXJjZXNGbGFnc1Byb3BzKTogVXNlU291cmNlU2VsZWN0b3JTb3VyY2VzRmxhZ3NTdGF0ZSB7XG4gIGNvbnN0IHsgZW5hYmxlV2ViRmVTb3VyY2VTZWxlY3RvclYxU2VsZWN0QWxsIH0gPSB1c2VGbGFnczxTb3VyY2VTZWxlY3RvckZlYXR1cmVGbGFncz4oKVxuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzRGF0YUxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBpc0RhdGFOb1Jlc3VsdHM6IGZhbHNlLFxuICAgICAgICBpc0RhdGFUb1Nob3c6IGZhbHNlLFxuICAgICAgICBzaG91bGRIYXZlU2VsZWN0QWxsOiBmYWxzZSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzaG91bGRIYXZlU2VsZWN0QWxsID1cbiAgICAgICEhZW5hYmxlV2ViRmVTb3VyY2VTZWxlY3RvclYxU2VsZWN0QWxsICYmXG4gICAgICAhIXBhcmVudEl0ZW0/LmlkICYmXG4gICAgICAhQ09OVEVOVF9QQUNLQUdFU19XSVRIT1VUX1NFTEVDVF9BTEwuaW5jbHVkZXMocGFyZW50SXRlbS5pZClcblxuICAgIGlmIChpc0xvYWRpbmdBdXRvc3VnZ2VzdFNvdXJjZXMgfHwgaXNGZXRjaGluZ05leHRQYWdlIHx8IGlzSW5pdGlhbGl6aW5nU3RhdGUgfHwgIXBhcmVudEl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzRGF0YUxvYWRpbmc6IHRydWUsXG4gICAgICAgIGlzRGF0YU5vUmVzdWx0czogZmFsc2UsXG4gICAgICAgIGlzRGF0YVRvU2hvdzogZmFsc2UsXG4gICAgICAgIHNob3VsZEhhdmVTZWxlY3RBbGwsXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaXNEYXRhVG9TaG93ID0gYWxsQXV0b3N1Z2dlc3RTb3VyY2VzLmxlbmd0aCAhPT0gMFxuICAgIGNvbnN0IGlzRGF0YU5vUmVzdWx0cyA9ICFpc0RhdGFUb1Nob3dcblxuICAgIHJldHVybiB7XG4gICAgICBpc0RhdGFMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGlzRGF0YU5vUmVzdWx0cyxcbiAgICAgIGlzRGF0YVRvU2hvdyxcbiAgICAgIHNob3VsZEhhdmVTZWxlY3RBbGwsXG4gICAgfVxuICB9LCBbXG4gICAgaXNMb2FkaW5nQXV0b3N1Z2dlc3RTb3VyY2VzLFxuICAgIHBhcmVudEl0ZW0sXG4gICAgaXNJbml0aWFsaXppbmdTdGF0ZSxcbiAgICBpc0ZldGNoaW5nTmV4dFBhZ2UsXG4gICAgYWxsQXV0b3N1Z2dlc3RTb3VyY2VzLFxuICAgIGhhc0Vycm9yLFxuICAgIGVuYWJsZVdlYkZlU291cmNlU2VsZWN0b3JWMVNlbGVjdEFsbCxcbiAgXSlcbn1cblxuZXhwb3J0IHsgdXNlU291cmNlU2VsZWN0b3JTb3VyY2VzRmxhZ3MgfVxuZXhwb3J0IHR5cGUgeyBVc2VTb3VyY2VTZWxlY3RvclNvdXJjZXNGbGFnc1Byb3BzLCBVc2VTb3VyY2VTZWxlY3RvclNvdXJjZXNGbGFnc1N0YXRlIH1cbiJdLCJuYW1lcyI6WyJ1c2VTb3VyY2VTZWxlY3RvclNvdXJjZXNGbGFncyIsImlzTG9hZGluZ0F1dG9zdWdnZXN0U291cmNlcyIsInBhcmVudEl0ZW0iLCJpc0luaXRpYWxpemluZ1N0YXRlIiwiaXNGZXRjaGluZ05leHRQYWdlIiwiYWxsQXV0b3N1Z2dlc3RTb3VyY2VzIiwiaGFzRXJyb3IiLCJlbmFibGVXZWJGZVNvdXJjZVNlbGVjdG9yVjFTZWxlY3RBbGwiLCJ1c2VGbGFncyIsInVzZU1lbW8iLCJpc0RhdGFMb2FkaW5nIiwiaXNEYXRhTm9SZXN1bHRzIiwiaXNEYXRhVG9TaG93Iiwic2hvdWxkSGF2ZVNlbGVjdEFsbCIsImlkIiwiQ09OVEVOVF9QQUNLQUdFU19XSVRIT1VUX1NFTEVDVF9BTEwiLCJpbmNsdWRlcyIsImxlbmd0aCJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkEyRVNBOzs7ZUFBQUE7Ozt1QkEzRWU7NENBQ0M7eUNBRTJCO0FBa0JwRCxTQUFTQSw4QkFBOEIsRUFDckNDLDJCQUEyQixFQUMzQkMsVUFBVSxFQUNWQyxtQkFBbUIsRUFDbkJDLGtCQUFrQixFQUNsQkMscUJBQXFCLEVBQ3JCQyxRQUFRLEVBQzJCO0lBQ25DLE1BQU0sRUFBRUMsb0NBQW9DLEVBQUUsR0FBR0MsSUFBQUEsb0NBQVE7SUFFekQsT0FBT0MsSUFBQUEsY0FBTyxFQUFDO1FBQ2IsSUFBSUgsVUFBVTtZQUNaLE9BQU87Z0JBQ0xJLGVBQWU7Z0JBQ2ZDLGlCQUFpQjtnQkFDakJDLGNBQWM7Z0JBQ2RDLHFCQUFxQjtZQUN2QjtRQUNGO1FBRUEsTUFBTUEsc0JBQ0osQ0FBQyxDQUFDTix3Q0FDRixDQUFDLEVBQUNMLHVCQUFBQSxpQ0FBQUEsV0FBWVksRUFBRSxLQUNoQixDQUFDQyw0REFBbUMsQ0FBQ0MsUUFBUSxDQUFDZCxXQUFXWSxFQUFFO1FBRTdELElBQUliLCtCQUErQkcsc0JBQXNCRCx1QkFBdUIsQ0FBQ0QsWUFBWTtZQUMzRixPQUFPO2dCQUNMUSxlQUFlO2dCQUNmQyxpQkFBaUI7Z0JBQ2pCQyxjQUFjO2dCQUNkQztZQUNGO1FBQ0Y7UUFFQSxNQUFNRCxlQUFlUCxzQkFBc0JZLE1BQU0sS0FBSztRQUN0RCxNQUFNTixrQkFBa0IsQ0FBQ0M7UUFFekIsT0FBTztZQUNMRixlQUFlO1lBQ2ZDO1lBQ0FDO1lBQ0FDO1FBQ0Y7SUFDRixHQUFHO1FBQ0RaO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO0tBQ0Q7QUFDSCJ9