{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/brief/src/components/briefSteps/BriefWatchlistSelectionStep/BriefUserWatchlists/BriefUserWatchlists.tsx"],"sourcesContent":["import { useMemo } from \"react\"\nimport { useAtom } from \"jotai\"\nimport { Watchlist } from \"@rp/common/api-types\"\nimport { atomBriefWatchlistFilter, useBriefConfigForm } from \"@rp/react/common/brief\"\nimport { useUserBriefConfigs } from \"@rp/react/tanstack-api/brief\"\nimport { LoadingSpinner } from \"@rp/react/web/common/base-components\"\nimport {\n  HubSortableHeadCell,\n  HubTableRow,\n  InfiniteList,\n} from \"@rp/react/web/common/composite-components\"\nimport { usePageWithListSorter } from \"@rp/react/web/common/hooks\"\nimport { Box, Typography } from \"@rp/react/web/mui/core\"\nimport { WatchlistsTab } from \"@rp/react/web/watchlists\"\nimport { BriefEmptyWatchlists } from \"./BriefEmptyWatchlists\"\nimport { BriefNoWatchlistsCreated } from \"./BriefNoWatchlistsCreated\"\nimport { BriefUserWatchlistItem } from \"./BriefUserWatchlistItem\"\n\nconst COLUMNS_WIDTH = [\"40px\", \"calc(100% - 340px)\", \"290px\"]\nconst SORT_OPTIONS = [\n  { label: \"Last modified\", value: \"lastUpdated\" },\n  { label: \"Name\", value: \"name\" },\n]\n\ntype BriefUserWatchlistProps = {\n  isLoadingUserWatchlists: boolean\n  userWatchlists: Array<Watchlist>\n  activeTab: WatchlistsTab\n}\n\nconst BriefUserWatchlists = ({\n  isLoadingUserWatchlists: isLoadingWatchlists,\n  userWatchlists: watchlists,\n  activeTab,\n}: BriefUserWatchlistProps) => {\n  const { data: briefs } = useUserBriefConfigs()\n\n  const { sorterFn, sortBy, direction, onChange } = usePageWithListSorter(\"userWatchlists\")\n  const [filterTerm] = useAtom(atomBriefWatchlistFilter)\n\n  const {\n    form: { watchlistId },\n    setWatchlistId,\n    setName,\n  } = useBriefConfigForm()\n\n  const filteredResults = useMemo(\n    () =>\n      watchlists\n        .filter(item => item.name.toLowerCase().includes(filterTerm.toLowerCase()))\n        .sort(sorterFn),\n    [filterTerm, watchlists, sorterFn],\n  )\n\n  const favoriteWatchlists = useMemo(() => {\n    return watchlists.filter(item => item.isFavorite)\n  }, [watchlists])\n\n  if (isLoadingWatchlists)\n    return (\n      <Box\n        sx={{\n          height: \"calc(100dvh - 450px)\",\n          position: \"relative\",\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        <LoadingSpinner />\n      </Box>\n    )\n\n  if (\n    activeTab === \"favorites\" &&\n    favoriteWatchlists.length === 0 &&\n    !isLoadingWatchlists &&\n    !filterTerm\n  ) {\n    return (\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        You haven't added any favorite watchlists yet. Add a watchlist to your favorites to see them\n        here.\n      </Typography>\n    )\n  }\n\n  if (watchlists.length === 0) {\n    return <BriefNoWatchlistsCreated />\n  }\n\n  if (filteredResults.length === 0) {\n    return <BriefEmptyWatchlists />\n  }\n\n  return (\n    <Box sx={{ width: 1, mt: 1 }}>\n      <HubTableRow\n        sx={{ backgroundColor: \"transparent\", height: 35, gap: 1, px: 0 }}\n        columnsWidth={COLUMNS_WIDTH}\n        columns={[\n          {},\n          {\n            node: (\n              <HubSortableHeadCell\n                label=\"NAME\"\n                value=\"name\"\n                onChange={onChange}\n                sortBy={sortBy}\n                direction={direction}\n                sortOptions={SORT_OPTIONS}\n              />\n            ),\n          },\n          {\n            node: (\n              <HubSortableHeadCell\n                label=\"LAST MODIFIED\"\n                value=\"lastUpdated\"\n                onChange={onChange}\n                sortBy={sortBy}\n                direction={direction}\n                sortOptions={SORT_OPTIONS}\n                defaultDirection=\"desc\"\n              />\n            ),\n          },\n        ]}\n      />\n      <InfiniteList\n        rootMargin={\"0px 0px 300px 0px\"}\n        initialElements={20}\n        items={filteredResults}\n        renderItem={item => {\n          return (\n            <BriefUserWatchlistItem\n              key={item.id}\n              briefId={briefs?.find(brief => brief.watchlistIds.includes(item.id))?.id}\n              item={item}\n              columnsWidth={COLUMNS_WIDTH}\n              watchlistId={watchlistId}\n              setWatchlistId={setWatchlistId}\n              setName={setName}\n            />\n          )\n        }}\n      />\n    </Box>\n  )\n}\n\nexport { BriefUserWatchlists }\n"],"names":["BriefUserWatchlists","COLUMNS_WIDTH","SORT_OPTIONS","label","value","isLoadingUserWatchlists","isLoadingWatchlists","userWatchlists","watchlists","activeTab","data","briefs","useUserBriefConfigs","sorterFn","sortBy","direction","onChange","usePageWithListSorter","filterTerm","useAtom","atomBriefWatchlistFilter","form","watchlistId","setWatchlistId","setName","useBriefConfigForm","filteredResults","useMemo","filter","item","name","toLowerCase","includes","sort","favoriteWatchlists","isFavorite","Box","sx","height","position","display","alignItems","LoadingSpinner","length","Typography","variant","color","BriefNoWatchlistsCreated","BriefEmptyWatchlists","width","mt","HubTableRow","backgroundColor","gap","px","columnsWidth","columns","node","HubSortableHeadCell","sortOptions","defaultDirection","InfiniteList","rootMargin","initialElements","items","renderItem","BriefUserWatchlistItem","briefId","find","brief","watchlistIds","id"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAsJSA;;;eAAAA;;;;uBAtJe;uBACA;uBAEqC;wBACzB;gCACL;qCAKxB;uBAC+B;sBACN;sCAEK;0CACI;wCACF;AAEvC,MAAMC,gBAAgB;IAAC;IAAQ;IAAsB;CAAQ;AAC7D,MAAMC,eAAe;IACnB;QAAEC,OAAO;QAAiBC,OAAO;IAAc;IAC/C;QAAED,OAAO;QAAQC,OAAO;IAAO;CAChC;AAQD,MAAMJ,sBAAsB,CAAC,EAC3BK,yBAAyBC,mBAAmB,EAC5CC,gBAAgBC,UAAU,EAC1BC,SAAS,EACe;IACxB,MAAM,EAAEC,MAAMC,MAAM,EAAE,GAAGC,IAAAA,2BAAmB;IAE5C,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAE,GAAGC,IAAAA,4BAAqB,EAAC;IACxE,MAAM,CAACC,WAAW,GAAGC,IAAAA,cAAO,EAACC,+BAAwB;IAErD,MAAM,EACJC,MAAM,EAAEC,WAAW,EAAE,EACrBC,cAAc,EACdC,OAAO,EACR,GAAGC,IAAAA,yBAAkB;IAEtB,MAAMC,kBAAkBC,IAAAA,cAAO,EAC7B,IACEnB,WACGoB,MAAM,CAACC,CAAAA,OAAQA,KAAKC,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAACd,WAAWa,WAAW,KACtEE,IAAI,CAACpB,WACV;QAACK;QAAYV;QAAYK;KAAS;IAGpC,MAAMqB,qBAAqBP,IAAAA,cAAO,EAAC;QACjC,OAAOnB,WAAWoB,MAAM,CAACC,CAAAA,OAAQA,KAAKM,UAAU;IAClD,GAAG;QAAC3B;KAAW;IAEf,IAAIF,qBACF,qBACE,qBAAC8B,SAAG;QACFC,IAAI;YACFC,QAAQ;YACRC,UAAU;YACVC,SAAS;YACTC,YAAY;QACd;kBAEA,cAAA,qBAACC,8BAAc;;IAIrB,IACEjC,cAAc,eACdyB,mBAAmBS,MAAM,KAAK,KAC9B,CAACrC,uBACD,CAACY,YACD;QACA,qBACE,qBAAC0B,gBAAU;YAACC,SAAQ;YAAQC,OAAM;sBAAiB;;IAKvD;IAEA,IAAItC,WAAWmC,MAAM,KAAK,GAAG;QAC3B,qBAAO,qBAACI,kDAAwB;IAClC;IAEA,IAAIrB,gBAAgBiB,MAAM,KAAK,GAAG;QAChC,qBAAO,qBAACK,0CAAoB;IAC9B;IAEA,qBACE,sBAACZ,SAAG;QAACC,IAAI;YAAEY,OAAO;YAAGC,IAAI;QAAE;;0BACzB,qBAACC,gCAAW;gBACVd,IAAI;oBAAEe,iBAAiB;oBAAed,QAAQ;oBAAIe,KAAK;oBAAGC,IAAI;gBAAE;gBAChEC,cAActD;gBACduD,SAAS;oBACP,CAAC;oBACD;wBACEC,oBACE,qBAACC,wCAAmB;4BAClBvD,OAAM;4BACNC,OAAM;4BACNY,UAAUA;4BACVF,QAAQA;4BACRC,WAAWA;4BACX4C,aAAazD;;oBAGnB;oBACA;wBACEuD,oBACE,qBAACC,wCAAmB;4BAClBvD,OAAM;4BACNC,OAAM;4BACNY,UAAUA;4BACVF,QAAQA;4BACRC,WAAWA;4BACX4C,aAAazD;4BACb0D,kBAAiB;;oBAGvB;iBACD;;0BAEH,qBAACC,iCAAY;gBACXC,YAAY;gBACZC,iBAAiB;gBACjBC,OAAOtC;gBACPuC,YAAYpC,CAAAA;wBAIGlB;oBAHb,qBACE,qBAACuD,8CAAsB;wBAErBC,OAAO,EAAExD,mBAAAA,8BAAAA,eAAAA,OAAQyD,IAAI,CAACC,CAAAA,QAASA,MAAMC,YAAY,CAACtC,QAAQ,CAACH,KAAK0C,EAAE,gBAAzD5D,mCAAAA,aAA6D4D,EAAE;wBACxE1C,MAAMA;wBACN0B,cAActD;wBACdqB,aAAaA;wBACbC,gBAAgBA;wBAChBC,SAASA;uBANJK,KAAK0C,EAAE;gBASlB;;;;AAIR"}