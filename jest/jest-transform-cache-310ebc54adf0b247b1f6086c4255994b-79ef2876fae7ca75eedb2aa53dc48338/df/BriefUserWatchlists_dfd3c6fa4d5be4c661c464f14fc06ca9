0b9ae6e2b0607536dddef804e9694af1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BriefUserWatchlists", {
    enumerable: true,
    get: function() {
        return BriefUserWatchlists;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _jotai = require("jotai");
const _brief = require("@rp/react/common/brief");
const _brief1 = require("@rp/react/tanstack-api/brief");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _hooks = require("@rp/react/web/common/hooks");
const _core = require("@rp/react/web/mui/core");
const _BriefEmptyWatchlists = require("./BriefEmptyWatchlists");
const _BriefNoWatchlistsCreated = require("./BriefNoWatchlistsCreated");
const _BriefUserWatchlistItem = require("./BriefUserWatchlistItem");
const COLUMNS_WIDTH = [
    "40px",
    "calc(100% - 340px)",
    "290px"
];
const SORT_OPTIONS = [
    {
        label: "Last modified",
        value: "lastUpdated"
    },
    {
        label: "Name",
        value: "name"
    }
];
const BriefUserWatchlists = ({ isLoadingUserWatchlists: isLoadingWatchlists, userWatchlists: watchlists, activeTab })=>{
    const { data: briefs } = (0, _brief1.useUserBriefConfigs)();
    const { sorterFn, sortBy, direction, onChange } = (0, _hooks.usePageWithListSorter)("userWatchlists");
    const [filterTerm] = (0, _jotai.useAtom)(_brief.atomBriefWatchlistFilter);
    const { form: { watchlistId }, setWatchlistId, setName } = (0, _brief.useBriefConfigForm)();
    const filteredResults = (0, _react.useMemo)(()=>watchlists.filter((item)=>item.name.toLowerCase().includes(filterTerm.toLowerCase())).sort(sorterFn), [
        filterTerm,
        watchlists,
        sorterFn
    ]);
    const favoriteWatchlists = (0, _react.useMemo)(()=>{
        return watchlists.filter((item)=>item.isFavorite);
    }, [
        watchlists
    ]);
    if (isLoadingWatchlists) return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
        sx: {
            height: "calc(100dvh - 450px)",
            position: "relative",
            display: "flex",
            alignItems: "center"
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {})
    });
    if (activeTab === "favorites" && favoriteWatchlists.length === 0 && !isLoadingWatchlists && !filterTerm) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
            variant: "body2",
            color: "text.secondary",
            children: "You haven't added any favorite watchlists yet. Add a watchlist to your favorites to see them here."
        });
    }
    if (watchlists.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefNoWatchlistsCreated.BriefNoWatchlistsCreated, {});
    }
    if (filteredResults.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefEmptyWatchlists.BriefEmptyWatchlists, {});
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            width: 1,
            mt: 1
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
                sx: {
                    backgroundColor: "transparent",
                    height: 35,
                    gap: 1,
                    px: 0
                },
                columnsWidth: COLUMNS_WIDTH,
                columns: [
                    {},
                    {
                        node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                            label: "NAME",
                            value: "name",
                            onChange: onChange,
                            sortBy: sortBy,
                            direction: direction,
                            sortOptions: SORT_OPTIONS
                        })
                    },
                    {
                        node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                            label: "LAST MODIFIED",
                            value: "lastUpdated",
                            onChange: onChange,
                            sortBy: sortBy,
                            direction: direction,
                            sortOptions: SORT_OPTIONS,
                            defaultDirection: "desc"
                        })
                    }
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                rootMargin: "0px 0px 300px 0px",
                initialElements: 20,
                items: filteredResults,
                renderItem: (item)=>{
                    var _briefs_find;
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_BriefUserWatchlistItem.BriefUserWatchlistItem, {
                        briefId: briefs === null || briefs === void 0 ? void 0 : (_briefs_find = briefs.find((brief)=>brief.watchlistIds.includes(item.id))) === null || _briefs_find === void 0 ? void 0 : _briefs_find.id,
                        item: item,
                        columnsWidth: COLUMNS_WIDTH,
                        watchlistId: watchlistId,
                        setWatchlistId: setWatchlistId,
                        setName: setName
                    }, item.id);
                }
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,