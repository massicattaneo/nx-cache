{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/create-react-elements/collect-breakpoints.ts"],"sourcesContent":["import { EnhancedTextBlock } from \"@rp/react/rpjson/types\"\nimport { CLASS_NAMES } from \"../constants\"\nimport { TYPES } from \"../constants\"\nimport { collectMarkups } from \"./collect-markups\"\nimport {\n  Breakpoint,\n  ReactDocumentOptions,\n  RpJsonBlockDetections,\n} from \"./create-react-elements.types\"\nimport { sortBreakpoints } from \"./sort-breakpoints\"\n\nconst getSentencesInfo = (block: EnhancedTextBlock, options: ReactDocumentOptions = {}) => {\n  const { sentences: sent = [] } = block\n  const sentences: Array<Breakpoint> = sent.map(mark => ({\n    index: mark.start,\n    isSentenceNumber: true,\n    id: options?.idIterator ? options.idIterator() : \"\",\n    count: mark.sentenceNumber,\n  }))\n  const sentStart: Array<Breakpoint> = sent.map(mark => ({\n    index: mark.start,\n    isStart: true,\n    rpJsonType: TYPES.SENTENCE,\n    id: options?.idIterator ? options.idIterator() : \"\",\n    rpJsonId: `${CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${block.paragraphNumber}-${mark.sentenceNumber}`,\n  }))\n\n  const sentEnd: Array<Breakpoint> = sent.map(mark => ({\n    index: mark.end,\n    isEnd: true,\n    rpJsonType: TYPES.SENTENCE,\n    id: options?.idIterator ? options.idIterator() : \"\",\n    rpJsonId: `${CLASS_NAMES.SENTENCE_NUMBER_PREFIX}${block.paragraphNumber}-${mark.sentenceNumber}`,\n  }))\n  return { sentences, sentStart, sentEnd }\n}\n\nexport const collectBreakPoints = (\n  block: EnhancedTextBlock,\n  rpJsonDetections: RpJsonBlockDetections,\n  options: ReactDocumentOptions = {},\n): Array<Breakpoint> => {\n  const { text, markups } = collectMarkups(block, rpJsonDetections, options)\n  const { performance = {} } = options\n\n  const starts = markups.map(mark => {\n    const breakpoint: Breakpoint = { index: mark.start || 0, ...mark, isStart: true }\n    return breakpoint\n  })\n  const ends = markups.map(mark => {\n    const breakpoint: Breakpoint = { index: mark.end || 0, ...mark, isEnd: true }\n    return breakpoint\n  })\n\n  const breaks = []\n  const start: Breakpoint = { index: 0, id: \"start\" }\n  const end: Breakpoint = { index: text.length, id: \"end\" }\n\n  if (performance.markupSentences) {\n    const { sentences, sentStart, sentEnd } = getSentencesInfo(block, options)\n    breaks.push(...sentences, start, ...sentStart, ...sentEnd, ...starts, ...ends, end)\n  } else {\n    breaks.push(start, ...starts, ...ends, end)\n  }\n\n  return breaks\n    .sort(sortBreakpoints)\n    .filter(br => (br.isEnd ? br.index > 0 : br.index >= 0))\n    .filter(br => (br.isStart ? br.index < text.length : br.index <= text.length))\n}\n"],"names":["collectBreakPoints","getSentencesInfo","block","options","sentences","sent","map","mark","index","start","isSentenceNumber","id","idIterator","count","sentenceNumber","sentStart","isStart","rpJsonType","TYPES","SENTENCE","rpJsonId","CLASS_NAMES","SENTENCE_NUMBER_PREFIX","paragraphNumber","sentEnd","end","isEnd","rpJsonDetections","text","markups","collectMarkups","performance","starts","breakpoint","ends","breaks","length","markupSentences","push","sort","sortBreakpoints","filter","br"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}