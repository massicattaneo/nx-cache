{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/rpjson/src/lib/styles/selectors.ts"],"sourcesContent":["import { CLASS_NAMES, TYPES } from \"../constants\"\n\nconst selectFindsByIndex = (findIndex: number) =>\n  `${CLASS_NAMES.TYPE_PREFIX}${TYPES.FIND}-${findIndex}`\n\nconst selectFindByCount = (findIndex: number, findCount: number | string) =>\n  `${CLASS_NAMES.ID_PREFIX}${CLASS_NAMES.FIND_PREFIX}${findIndex}-${findCount}`\n\nexport function getFindMatchesLength(element: HTMLElement | null): number {\n  if (!element) return 0\n  const array = Array.from(element.querySelectorAll(`.${selectFindsByIndex(0)}`))\n  const regExp = new RegExp(`${selectFindByCount(0, \"(\\\\d*)\")}`)\n  const matches = array\n    .map(element => element.className)\n    .map(className => className.match(regExp))\n    .map(match => (match ? Number(match[1]) : -1))\n  return matches.length ? Math.max(...matches) + 1 : 0\n}\n"],"names":["getFindMatchesLength","selectFindsByIndex","findIndex","CLASS_NAMES","TYPE_PREFIX","TYPES","FIND","selectFindByCount","findCount","ID_PREFIX","FIND_PREFIX","element","array","Array","from","querySelectorAll","regExp","RegExp","matches","map","className","match","Number","length","Math","max"],"rangeMappings":";;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAQgBA;;;eAAAA;;;2BARmB;AAEnC,MAAMC,qBAAqB,CAACC,YAC1B,CAAC,EAAEC,sBAAW,CAACC,WAAW,CAAC,EAAEC,gBAAK,CAACC,IAAI,CAAC,CAAC,EAAEJ,UAAU,CAAC;AAExD,MAAMK,oBAAoB,CAACL,WAAmBM,YAC5C,CAAC,EAAEL,sBAAW,CAACM,SAAS,CAAC,EAAEN,sBAAW,CAACO,WAAW,CAAC,EAAER,UAAU,CAAC,EAAEM,UAAU,CAAC;AAExE,SAASR,qBAAqBW,OAA2B;IAC9D,IAAI,CAACA,SAAS,OAAO;IACrB,MAAMC,QAAQC,MAAMC,IAAI,CAACH,QAAQI,gBAAgB,CAAC,CAAC,CAAC,EAAEd,mBAAmB,GAAG,CAAC;IAC7E,MAAMe,SAAS,IAAIC,OAAO,CAAC,EAAEV,kBAAkB,GAAG,UAAU,CAAC;IAC7D,MAAMW,UAAUN,MACbO,GAAG,CAACR,CAAAA,UAAWA,QAAQS,SAAS,EAChCD,GAAG,CAACC,CAAAA,YAAaA,UAAUC,KAAK,CAACL,SACjCG,GAAG,CAACE,CAAAA,QAAUA,QAAQC,OAAOD,KAAK,CAAC,EAAE,IAAI,CAAC;IAC7C,OAAOH,QAAQK,MAAM,GAAGC,KAAKC,GAAG,IAAIP,WAAW,IAAI;AACrD"}