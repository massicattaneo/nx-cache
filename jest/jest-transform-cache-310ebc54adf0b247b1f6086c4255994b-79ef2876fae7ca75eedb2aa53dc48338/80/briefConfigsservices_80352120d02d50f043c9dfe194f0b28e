7d587d30dc75cca49b6c7eae374875df
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createBrief: function() {
        return createBrief;
    },
    deleteBriefConfigById: function() {
        return deleteBriefConfigById;
    },
    editBriefConfig: function() {
        return editBriefConfig;
    },
    loadAllBriefs: function() {
        return loadAllBriefs;
    },
    loadBriefConfigById: function() {
        return loadBriefConfigById;
    }
});
const _reactrouterdom = require("react-router-dom");
const _axiosclient = require("@rp/react/axios-client");
const _briefConfigsroutes = require("./briefConfigs.routes");
const createBrief = async (briefPost)=>{
    const { data } = await _axiosclient.axiosClient.post(_briefConfigsroutes.BRIEF_API_PATH, briefPost);
    return data;
};
const loadAllBriefs = async ()=>{
    const { data } = await _axiosclient.axiosClient.get(_briefConfigsroutes.BRIEF_API_PATH);
    return data.results;
};
const loadBriefConfigById = async (briefId)=>{
    if (!briefId) return null;
    const { data } = await _axiosclient.axiosClient.get((0, _reactrouterdom.generatePath)(_briefConfigsroutes.BRIEF_BY_ID_API_PATH, {
        briefId
    }));
    return data;
};
const deleteBriefConfigById = async (briefId)=>{
    if (!briefId) return;
    await _axiosclient.axiosClient.delete((0, _reactrouterdom.generatePath)(_briefConfigsroutes.BRIEF_BY_ID_API_PATH, {
        briefId
    }));
};
const editBriefConfig = async (briefEdit, briefId)=>{
    if (!briefId) return;
    await _axiosclient.axiosClient.put((0, _reactrouterdom.generatePath)(_briefConfigsroutes.BRIEF_BY_ID_API_PATH.replace(":briefId", briefId)), briefEdit);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3QvdGFuc3RhY2stYXBpL2JyaWVmL3NyYy9icmllZkNvbmZpZy9icmllZkNvbmZpZ3Muc2VydmljZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXhpb3NSZXNwb25zZSB9IGZyb20gXCJheGlvc1wiXG5pbXBvcnQgeyBnZW5lcmF0ZVBhdGggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiXG5pbXBvcnQgeyBheGlvc0NsaWVudCB9IGZyb20gXCJAcnAvcmVhY3QvYXhpb3MtY2xpZW50XCJcbmltcG9ydCB7IEJyaWVmQ29uZmlnLCBCcmllZkNvbmZpZ0FQSSwgQnJpZWZDb25maWdHZXRBbGxSZXNwb25zZSB9IGZyb20gXCIuLi9icmllZi50eXBlc1wiXG5pbXBvcnQgeyBCUklFRl9BUElfUEFUSCwgQlJJRUZfQllfSURfQVBJX1BBVEggfSBmcm9tIFwiLi9icmllZkNvbmZpZ3Mucm91dGVzXCJcblxuY29uc3QgY3JlYXRlQnJpZWYgPSBhc3luYyAoYnJpZWZQb3N0OiBCcmllZkNvbmZpZ0FQSSk6IFByb21pc2U8QnJpZWZDb25maWc+ID0+IHtcbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc0NsaWVudC5wb3N0PEJyaWVmQ29uZmlnQVBJLCBBeGlvc1Jlc3BvbnNlPEJyaWVmQ29uZmlnPj4oXG4gICAgQlJJRUZfQVBJX1BBVEgsXG4gICAgYnJpZWZQb3N0LFxuICApXG4gIHJldHVybiBkYXRhXG59XG5cbmNvbnN0IGxvYWRBbGxCcmllZnMgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxCcmllZkNvbmZpZz4+ID0+IHtcbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc0NsaWVudC5nZXQ8QnJpZWZDb25maWdHZXRBbGxSZXNwb25zZT4oQlJJRUZfQVBJX1BBVEgpXG4gIHJldHVybiBkYXRhLnJlc3VsdHNcbn1cblxuY29uc3QgbG9hZEJyaWVmQ29uZmlnQnlJZCA9IGFzeW5jIChicmllZklkOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPEJyaWVmQ29uZmlnIHwgbnVsbD4gPT4ge1xuICBpZiAoIWJyaWVmSWQpIHJldHVybiBudWxsXG5cbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvc0NsaWVudC5nZXQ8QnJpZWZDb25maWc+KFxuICAgIGdlbmVyYXRlUGF0aChCUklFRl9CWV9JRF9BUElfUEFUSCwgeyBicmllZklkIH0pLFxuICApXG5cbiAgcmV0dXJuIGRhdGFcbn1cblxuY29uc3QgZGVsZXRlQnJpZWZDb25maWdCeUlkID0gYXN5bmMgKGJyaWVmSWQ6IHN0cmluZyB8IHVuZGVmaW5lZCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIWJyaWVmSWQpIHJldHVyblxuXG4gIGF3YWl0IGF4aW9zQ2xpZW50LmRlbGV0ZTxCcmllZkNvbmZpZz4oZ2VuZXJhdGVQYXRoKEJSSUVGX0JZX0lEX0FQSV9QQVRILCB7IGJyaWVmSWQgfSkpXG59XG5cbmNvbnN0IGVkaXRCcmllZkNvbmZpZyA9IGFzeW5jIChcbiAgYnJpZWZFZGl0OiBCcmllZkNvbmZpZ0FQSSxcbiAgYnJpZWZJZDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghYnJpZWZJZCkgcmV0dXJuXG5cbiAgYXdhaXQgYXhpb3NDbGllbnQucHV0PEJyaWVmQ29uZmlnPihcbiAgICBnZW5lcmF0ZVBhdGgoQlJJRUZfQllfSURfQVBJX1BBVEgucmVwbGFjZShcIjpicmllZklkXCIsIGJyaWVmSWQpKSxcbiAgICBicmllZkVkaXQsXG4gIClcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJpZWYsIGxvYWRBbGxCcmllZnMsIGxvYWRCcmllZkNvbmZpZ0J5SWQsIGRlbGV0ZUJyaWVmQ29uZmlnQnlJZCwgZWRpdEJyaWVmQ29uZmlnIH1cbiJdLCJuYW1lcyI6WyJjcmVhdGVCcmllZiIsImRlbGV0ZUJyaWVmQ29uZmlnQnlJZCIsImVkaXRCcmllZkNvbmZpZyIsImxvYWRBbGxCcmllZnMiLCJsb2FkQnJpZWZDb25maWdCeUlkIiwiYnJpZWZQb3N0IiwiZGF0YSIsImF4aW9zQ2xpZW50IiwicG9zdCIsIkJSSUVGX0FQSV9QQVRIIiwiZ2V0IiwicmVzdWx0cyIsImJyaWVmSWQiLCJnZW5lcmF0ZVBhdGgiLCJCUklFRl9CWV9JRF9BUElfUEFUSCIsImRlbGV0ZSIsImJyaWVmRWRpdCIsInB1dCIsInJlcGxhY2UiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQStDU0EsV0FBVztlQUFYQTs7SUFBaURDLHFCQUFxQjtlQUFyQkE7O0lBQXVCQyxlQUFlO2VBQWZBOztJQUEzREMsYUFBYTtlQUFiQTs7SUFBZUMsbUJBQW1CO2VBQW5CQTs7O2dDQTlDUjs2QkFDRDtvQ0FFeUI7QUFFckQsTUFBTUosY0FBYyxPQUFPSztJQUN6QixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1DLHdCQUFXLENBQUNDLElBQUksQ0FDckNDLGtDQUFjLEVBQ2RKO0lBRUYsT0FBT0M7QUFDVDtBQUVBLE1BQU1ILGdCQUFnQjtJQUNwQixNQUFNLEVBQUVHLElBQUksRUFBRSxHQUFHLE1BQU1DLHdCQUFXLENBQUNHLEdBQUcsQ0FBNEJELGtDQUFjO0lBQ2hGLE9BQU9ILEtBQUtLLE9BQU87QUFDckI7QUFFQSxNQUFNUCxzQkFBc0IsT0FBT1E7SUFDakMsSUFBSSxDQUFDQSxTQUFTLE9BQU87SUFFckIsTUFBTSxFQUFFTixJQUFJLEVBQUUsR0FBRyxNQUFNQyx3QkFBVyxDQUFDRyxHQUFHLENBQ3BDRyxJQUFBQSw0QkFBWSxFQUFDQyx3Q0FBb0IsRUFBRTtRQUFFRjtJQUFRO0lBRy9DLE9BQU9OO0FBQ1Q7QUFFQSxNQUFNTCx3QkFBd0IsT0FBT1c7SUFDbkMsSUFBSSxDQUFDQSxTQUFTO0lBRWQsTUFBTUwsd0JBQVcsQ0FBQ1EsTUFBTSxDQUFjRixJQUFBQSw0QkFBWSxFQUFDQyx3Q0FBb0IsRUFBRTtRQUFFRjtJQUFRO0FBQ3JGO0FBRUEsTUFBTVYsa0JBQWtCLE9BQ3RCYyxXQUNBSjtJQUVBLElBQUksQ0FBQ0EsU0FBUztJQUVkLE1BQU1MLHdCQUFXLENBQUNVLEdBQUcsQ0FDbkJKLElBQUFBLDRCQUFZLEVBQUNDLHdDQUFvQixDQUFDSSxPQUFPLENBQUMsWUFBWU4sV0FDdERJO0FBRUoifQ==