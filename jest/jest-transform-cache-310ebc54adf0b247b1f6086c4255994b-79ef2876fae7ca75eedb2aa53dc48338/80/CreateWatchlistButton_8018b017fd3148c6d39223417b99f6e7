62598eb94e5979b4877881a3d0758f17
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CreateWatchlistButton", {
    enumerable: true,
    get: function() {
        return CreateWatchlistButton;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _providers = require("@rp/react/web/common/providers");
const _core = require("@rp/react/web/mui/core");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SuccessMessage = ({ watchlistName, entityName })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
        fontWeight: "bold",
        children: [
            entityName,
            " ",
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                component: "span",
                children: "added to"
            }),
            " ",
            watchlistName
        ]
    });
const ErrorMessage = ({ watchlistName })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
        children: [
            "Error adding to the new",
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                component: "span",
                fontWeight: "bold",
                children: watchlistName
            })
        ]
    });
const CreateWatchlistButton = ({ filter, onClick, onHandleOpenModal })=>{
    const { enqueueSuccess, enqueueError } = (0, _providers.useSnackbar)();
    const items = filter.map((item)=>item.key);
    const amountAdded = filter.length;
    const onSuccess = (watchlist)=>{
        enqueueSuccess(/*#__PURE__*/ (0, _jsxruntime.jsx)(SuccessMessage, {
            watchlistName: watchlist.name,
            entityName: amountAdded >= 5 ? `${amountAdded} items ` : ` ${filter.map((entity)=>entity.name).join(", ")} `
        }));
    };
    const onError = (message, watchlistName)=>{
        enqueueError(/*#__PURE__*/ (0, _jsxruntime.jsx)(ErrorMessage, {
            watchlistName: watchlistName
        }));
    };
    const handleCreateWatchlist = ()=>{
        onHandleOpenModal({
            items
        }, onSuccess, onError);
        if (onClick) {
            onClick();
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
        onClick: handleCreateWatchlist,
        children: "Add to new Watchlist"
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9jb21wb3NpdGUtY29tcG9uZW50cy9zcmMvV2F0Y2hsaXN0TWVudS9DcmVhdGVXYXRjaGxpc3RCdXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgQ3FzSXRlbSB9IGZyb20gXCJAcnAvY29tbW9uL2FwaS10eXBlc1wiXG4vLyBUeXBlc1xuaW1wb3J0IHsgV2F0Y2hsaXN0IH0gZnJvbSBcIkBycC9jb21tb24vYXBpLXR5cGVzXCJcbmltcG9ydCB7IHVzZVNuYWNrYmFyIH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvY29tbW9uL3Byb3ZpZGVyc1wiXG4vLyBQYWNrYWdlc1xuaW1wb3J0IHsgQnV0dG9uLCBUeXBvZ3JhcGh5IH0gZnJvbSBcIkBycC9yZWFjdC93ZWIvbXVpL2NvcmVcIlxuaW1wb3J0IHsgSGFuZGxlT3Blbk1vZGFsUHJvcHMgfSBmcm9tIFwiLi9XYXRjaGxpc3RNZW51LnR5cGVzXCJcblxuLy8gQ29udGV4dFxuXG50eXBlIFN1Y2Nlc3NNZXNzYWdlUHJvcHMgPSB7XG4gIHdhdGNobGlzdE5hbWU6IHN0cmluZ1xuICBlbnRpdHlOYW1lOiBzdHJpbmdcbn1cblxuY29uc3QgU3VjY2Vzc01lc3NhZ2UgPSAoeyB3YXRjaGxpc3ROYW1lLCBlbnRpdHlOYW1lIH06IFN1Y2Nlc3NNZXNzYWdlUHJvcHMpID0+IChcbiAgPFR5cG9ncmFwaHkgZm9udFdlaWdodD1cImJvbGRcIj5cbiAgICB7ZW50aXR5TmFtZX0gPFR5cG9ncmFwaHkgY29tcG9uZW50PVwic3BhblwiPmFkZGVkIHRvPC9UeXBvZ3JhcGh5PiB7d2F0Y2hsaXN0TmFtZX1cbiAgPC9UeXBvZ3JhcGh5PlxuKVxuXG50eXBlIEVycm9yTWVzc2FnZVByb3BzID0ge1xuICB3YXRjaGxpc3ROYW1lOiBzdHJpbmdcbn1cblxuY29uc3QgRXJyb3JNZXNzYWdlID0gKHsgd2F0Y2hsaXN0TmFtZSB9OiBFcnJvck1lc3NhZ2VQcm9wcykgPT4gKFxuICA8VHlwb2dyYXBoeT5cbiAgICBFcnJvciBhZGRpbmcgdG8gdGhlIG5ld1xuICAgIDxUeXBvZ3JhcGh5IGNvbXBvbmVudD1cInNwYW5cIiBmb250V2VpZ2h0PVwiYm9sZFwiPlxuICAgICAge3dhdGNobGlzdE5hbWV9XG4gICAgPC9UeXBvZ3JhcGh5PlxuICA8L1R5cG9ncmFwaHk+XG4pXG5cbmNvbnN0IENyZWF0ZVdhdGNobGlzdEJ1dHRvbiA9ICh7XG4gIGZpbHRlcixcbiAgb25DbGljayxcbiAgb25IYW5kbGVPcGVuTW9kYWwsXG59OiB7XG4gIGZpbHRlcjogQXJyYXk8Q3FzSXRlbT5cbiAgb25DbGljaz86ICgpID0+IHZvaWRcbiAgb25IYW5kbGVPcGVuTW9kYWw6IEhhbmRsZU9wZW5Nb2RhbFByb3BzXG59KSA9PiB7XG4gIGNvbnN0IHsgZW5xdWV1ZVN1Y2Nlc3MsIGVucXVldWVFcnJvciB9ID0gdXNlU25hY2tiYXIoKVxuXG4gIGNvbnN0IGl0ZW1zID0gZmlsdGVyLm1hcChpdGVtID0+IGl0ZW0ua2V5KVxuXG4gIGNvbnN0IGFtb3VudEFkZGVkID0gZmlsdGVyLmxlbmd0aFxuXG4gIGNvbnN0IG9uU3VjY2VzcyA9ICh3YXRjaGxpc3Q6IFdhdGNobGlzdCkgPT4ge1xuICAgIGVucXVldWVTdWNjZXNzKFxuICAgICAgPFN1Y2Nlc3NNZXNzYWdlXG4gICAgICAgIHdhdGNobGlzdE5hbWU9e3dhdGNobGlzdC5uYW1lfVxuICAgICAgICBlbnRpdHlOYW1lPXtcbiAgICAgICAgICBhbW91bnRBZGRlZCA+PSA1XG4gICAgICAgICAgICA/IGAke2Ftb3VudEFkZGVkfSBpdGVtcyBgXG4gICAgICAgICAgICA6IGAgJHtmaWx0ZXIubWFwKGVudGl0eSA9PiBlbnRpdHkubmFtZSkuam9pbihcIiwgXCIpfSBgXG4gICAgICAgIH1cbiAgICAgIC8+LFxuICAgIClcbiAgfVxuXG4gIGNvbnN0IG9uRXJyb3IgPSAobWVzc2FnZTogc3RyaW5nLCB3YXRjaGxpc3ROYW1lOiBzdHJpbmcpID0+IHtcbiAgICBlbnF1ZXVlRXJyb3IoPEVycm9yTWVzc2FnZSB3YXRjaGxpc3ROYW1lPXt3YXRjaGxpc3ROYW1lfSAvPilcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNyZWF0ZVdhdGNobGlzdCA9ICgpID0+IHtcbiAgICBvbkhhbmRsZU9wZW5Nb2RhbCh7IGl0ZW1zIH0sIG9uU3VjY2Vzcywgb25FcnJvcilcbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljaygpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDxCdXR0b24gb25DbGljaz17aGFuZGxlQ3JlYXRlV2F0Y2hsaXN0fT5BZGQgdG8gbmV3IFdhdGNobGlzdDwvQnV0dG9uPlxufVxuXG5leHBvcnQgeyBDcmVhdGVXYXRjaGxpc3RCdXR0b24gfVxuIl0sIm5hbWVzIjpbIkNyZWF0ZVdhdGNobGlzdEJ1dHRvbiIsIlN1Y2Nlc3NNZXNzYWdlIiwid2F0Y2hsaXN0TmFtZSIsImVudGl0eU5hbWUiLCJUeXBvZ3JhcGh5IiwiZm9udFdlaWdodCIsImNvbXBvbmVudCIsIkVycm9yTWVzc2FnZSIsImZpbHRlciIsIm9uQ2xpY2siLCJvbkhhbmRsZU9wZW5Nb2RhbCIsImVucXVldWVTdWNjZXNzIiwiZW5xdWV1ZUVycm9yIiwidXNlU25hY2tiYXIiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJrZXkiLCJhbW91bnRBZGRlZCIsImxlbmd0aCIsIm9uU3VjY2VzcyIsIndhdGNobGlzdCIsIm5hbWUiLCJlbnRpdHkiLCJqb2luIiwib25FcnJvciIsIm1lc3NhZ2UiLCJoYW5kbGVDcmVhdGVXYXRjaGxpc3QiLCJCdXR0b24iXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyIsIm1hcHBpbmdzIjoiOzs7OytCQTZFU0E7OztlQUFBQTs7Ozs4REE3RVM7MkJBSVU7c0JBRU87Ozs7OztBQVVuQyxNQUFNQyxpQkFBaUIsQ0FBQyxFQUFFQyxhQUFhLEVBQUVDLFVBQVUsRUFBdUIsaUJBQ3hFLHNCQUFDQyxnQkFBVTtRQUFDQyxZQUFXOztZQUNwQkY7WUFBVzswQkFBQyxxQkFBQ0MsZ0JBQVU7Z0JBQUNFLFdBQVU7MEJBQU87O1lBQXFCO1lBQUVKOzs7QUFRckUsTUFBTUssZUFBZSxDQUFDLEVBQUVMLGFBQWEsRUFBcUIsaUJBQ3hELHNCQUFDRSxnQkFBVTs7WUFBQzswQkFFVixxQkFBQ0EsZ0JBQVU7Z0JBQUNFLFdBQVU7Z0JBQU9ELFlBQVc7MEJBQ3JDSDs7OztBQUtQLE1BQU1GLHdCQUF3QixDQUFDLEVBQzdCUSxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsaUJBQWlCLEVBS2xCO0lBQ0MsTUFBTSxFQUFFQyxjQUFjLEVBQUVDLFlBQVksRUFBRSxHQUFHQyxJQUFBQSxzQkFBVztJQUVwRCxNQUFNQyxRQUFRTixPQUFPTyxHQUFHLENBQUNDLENBQUFBLE9BQVFBLEtBQUtDLEdBQUc7SUFFekMsTUFBTUMsY0FBY1YsT0FBT1csTUFBTTtJQUVqQyxNQUFNQyxZQUFZLENBQUNDO1FBQ2pCViw2QkFDRSxxQkFBQ1Y7WUFDQ0MsZUFBZW1CLFVBQVVDLElBQUk7WUFDN0JuQixZQUNFZSxlQUFlLElBQ1gsQ0FBQyxFQUFFQSxZQUFZLE9BQU8sQ0FBQyxHQUN2QixDQUFDLENBQUMsRUFBRVYsT0FBT08sR0FBRyxDQUFDUSxDQUFBQSxTQUFVQSxPQUFPRCxJQUFJLEVBQUVFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7SUFJL0Q7SUFFQSxNQUFNQyxVQUFVLENBQUNDLFNBQWlCeEI7UUFDaENVLDJCQUFhLHFCQUFDTDtZQUFhTCxlQUFlQTs7SUFDNUM7SUFFQSxNQUFNeUIsd0JBQXdCO1FBQzVCakIsa0JBQWtCO1lBQUVJO1FBQU0sR0FBR00sV0FBV0s7UUFDeEMsSUFBSWhCLFNBQVM7WUFDWEE7UUFDRjtJQUNGO0lBRUEscUJBQU8scUJBQUNtQixZQUFNO1FBQUNuQixTQUFTa0I7a0JBQXVCOztBQUNqRCJ9