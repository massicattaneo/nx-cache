{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/web/common/base-components/src/ImageCutter/ImageCutter.tsx"],"sourcesContent":["import { PropsWithChildren, Suspense, lazy, useCallback, useEffect, useRef, useState } from \"react\"\nimport { Box, Button, IconButton, Skeleton, Tooltip } from \"@rp/react/web/mui/core\"\nimport { DeleteOutline, Undo } from \"@rp/react/web/mui/icons\"\nimport { UploadInput, UploadInputRef } from \"../UploadInput\"\nimport { CroppedAreaPixels, getCroppedImg } from \"./imageCutterUtils\"\n\nconst Fallback = ({ width, height }: { width: number; height: number }) => {\n  return (\n    <Box sx={{ position: \"relative\", width, height: height + 45 }}>\n      <Skeleton variant=\"rectangular\" width={width} height={height} />\n      <Skeleton variant=\"rectangular\" width={width} height={36} sx={{ mt: 1 }} />\n    </Box>\n  )\n}\n\nconst Cropper = lazy(() => import(\"react-easy-crop\"))\n\ntype Props = PropsWithChildren<{\n  canvasHeight: number\n  canvasWidth: number\n  defaultImage: string\n  disabled?: boolean\n  height: number\n  image: string\n  label?: string\n  setImage: (image: string) => void\n  width: number\n  autoOpenUpload?: boolean\n}>\n\nconst CONTAINER_CLASS_NAME = \"cropper-container\"\nconst CROP_AREA_CLASS_NAME = \"cropper-area-container\"\n\nexport const ImageCutter = ({\n  canvasHeight,\n  canvasWidth,\n  children,\n  defaultImage,\n  disabled,\n  height,\n  image,\n  label = \"Change Image\",\n  setImage,\n  width,\n  autoOpenUpload = false,\n}: Props) => {\n  const hasAutoOpenUpload = useRef(!autoOpenUpload)\n  const [zoom, setZoom] = useState<number>(1)\n  const [original, setOriginal] = useState<string>(image)\n  const [croppedImage, setCroppedImage] = useState<string>(\"\")\n  const [hasUploaded, setHasUploaded] = useState<boolean>(false)\n  const [crop, setCrop] = useState<Record<\"x\" | \"y\", number>>({ x: 0, y: 0 })\n  const buttonRef = useRef<UploadInputRef>(null)\n  const isDefaultImage = image === defaultImage\n  const onDeleteOrUndo = () => {\n    const what = hasUploaded ? image : defaultImage\n    setImage(what)\n    setCroppedImage(what)\n    setOriginal(what)\n    setZoom(1)\n    setHasUploaded(false)\n  }\n\n  const uploadImage = useCallback(async () => buttonRef.current?.open() ?? [], [])\n\n  const executeUpload = useCallback(() => {\n    uploadImage().then(([file]: Array<File>) => {\n      if (file) {\n        setOriginal(URL.createObjectURL(file))\n        setCroppedImage(URL.createObjectURL(file))\n        setHasUploaded(true)\n      }\n    })\n  }, [uploadImage])\n\n  useEffect(() => {\n    if (hasAutoOpenUpload.current) return\n    hasAutoOpenUpload.current = true\n    setTimeout(executeUpload)\n  }, [executeUpload, autoOpenUpload])\n\n  return (\n    <Suspense fallback={<Fallback width={width} height={height} />}>\n      <UploadInput ref={buttonRef} accept=\"image/*\" />\n      <Box\n        sx={{\n          position: \"relative\",\n          width,\n          height,\n          backgroundColor: \"overlay.surface\",\n          borderRadius: 2,\n          overflow: \"hidden\",\n          [`& .${CONTAINER_CLASS_NAME}`]: {\n            cursor: \"default\",\n          },\n          [`& .${CROP_AREA_CLASS_NAME}`]: {\n            visibility: hasUploaded ? \"visible\" : \"hidden\",\n            borderRadius: \"8px\",\n          },\n        }}\n      >\n        <Cropper\n          image={original}\n          crop={crop}\n          zoom={zoom}\n          aspect={canvasWidth / canvasHeight}\n          onCropChange={setCrop}\n          onZoomChange={setZoom}\n          classes={{\n            containerClassName: CONTAINER_CLASS_NAME,\n            cropAreaClassName: CROP_AREA_CLASS_NAME,\n          }}\n          onCropComplete={async (_, croppedAreaPixels: CroppedAreaPixels) => {\n            if (!original) return\n            const cropped = await getCroppedImg(\n              original,\n              croppedAreaPixels,\n              canvasWidth,\n              canvasHeight,\n            )\n            setCroppedImage(cropped)\n          }}\n        />\n      </Box>\n      <Box sx={{ display: \"flex\", justifyContent: \"left\", mt: 1, gap: 1 }}>\n        {children}\n        <Box sx={{ flexGrow: 1 }}>\n          <Button\n            sx={{ fontSize: 14 }}\n            disabled={disabled}\n            variant=\"contained-light\"\n            onClick={() => {\n              if (hasUploaded) {\n                setHasUploaded(false)\n                setImage(croppedImage)\n                setOriginal(croppedImage)\n                setCroppedImage(\"\")\n                setZoom(1)\n              } else {\n                executeUpload()\n              }\n            }}\n          >\n            {hasUploaded ? \"Apply changes\" : label}\n          </Button>\n        </Box>\n        <Tooltip\n          title={isDefaultImage && !hasUploaded ? \"\" : hasUploaded ? \"Discard\" : \"Remove Picture\"}\n        >\n          <IconButton\n            disabled={isDefaultImage && !hasUploaded}\n            sx={{ justifySelf: \"flex-end\" }}\n            onClick={onDeleteOrUndo}\n          >\n            {hasUploaded ? <Undo /> : <DeleteOutline />}\n          </IconButton>\n        </Tooltip>\n      </Box>\n    </Suspense>\n  )\n}\n"],"names":["ImageCutter","Fallback","width","height","Box","sx","position","Skeleton","variant","mt","Cropper","lazy","CONTAINER_CLASS_NAME","CROP_AREA_CLASS_NAME","canvasHeight","canvasWidth","children","defaultImage","disabled","image","label","setImage","autoOpenUpload","hasAutoOpenUpload","useRef","zoom","setZoom","useState","original","setOriginal","croppedImage","setCroppedImage","hasUploaded","setHasUploaded","crop","setCrop","x","y","buttonRef","isDefaultImage","onDeleteOrUndo","what","uploadImage","useCallback","current","open","executeUpload","then","file","URL","createObjectURL","useEffect","setTimeout","Suspense","fallback","UploadInput","ref","accept","backgroundColor","borderRadius","overflow","cursor","visibility","aspect","onCropChange","onZoomChange","classes","containerClassName","cropAreaClassName","onCropComplete","_","croppedAreaPixels","cropped","getCroppedImg","display","justifyContent","gap","flexGrow","Button","fontSize","onClick","Tooltip","title","IconButton","justifySelf","Undo","DeleteOutline"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}