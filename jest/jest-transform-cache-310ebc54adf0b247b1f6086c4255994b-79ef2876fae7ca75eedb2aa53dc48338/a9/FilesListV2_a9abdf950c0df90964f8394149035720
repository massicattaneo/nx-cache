75524f2d66feb083c7ceb45f3aaca6e0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "FilesListV2", {
    enumerable: true,
    get: function() {
        return FilesListV2;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _compact = /*#__PURE__*/ _interop_require_default(require("lodash/compact"));
const _reactrouter = require("react-router");
const _settings = require("@rp/common/settings");
const _providers = require("@rp/react/common/providers");
const _file = require("@rp/react/tanstack-api/file");
const _basecomponents = require("@rp/react/web/common/base-components");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _files = require("@rp/react/web/common/files");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _FilesListItemV2 = require("./FilesListItemV2");
const _FilesListNoUploaded = require("./FilesListNoUploaded");
const _filesListconstants = require("./filesList.constants");
const _filesListutils = require("./filesList.utils");
const _hooks = require("./hooks");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function FilesListV2({ filterTerm, selectedFiles, shared = false, setSelectedFiles, openChatPane, ownersSelected, ownersList, isChatPaneOpen }) {
    const [state, setState] = (0, _react.useState)(_file.FILES_INFINITE_PAGE_SIZE);
    const { actions, deleteFiles } = (0, _files.useFileActions)({
        isForFilesPage: true
    });
    const { uploading, filteredFiles, isLoadingFiles, allFiles, sortBy, direction, onChange, completedFiltered, hasNextPage, fetchNextPage, isFetchingNextPage, isPlaceholderData } = (0, _files.useFileList)({
        filterTerm,
        ownership: "all",
        ownersSelected,
        ownersList
    });
    const { setDivRef, shouldUseMinimalList } = (0, _hooks.useShouldUseMinimalList)();
    const columnsWidth = shouldUseMinimalList ? _filesListconstants.COLUMNS_WIDTH_MINIMAL : _filesListconstants.COLUMNS_WIDTH;
    const { hasEntitlement } = (0, _providers.useAccount)();
    const { id: currentOpenDocumentID } = (0, _reactrouter.useParams)();
    (0, _react.useEffect)(()=>{
        setState(_file.FILES_INFINITE_PAGE_SIZE);
    }, [
        filterTerm
    ]);
    const handleCheckboxChange = (0, _react.useCallback)((ev, val)=>(0, _filesListutils.handleCheckboxChangeFunc)({
            ev,
            val,
            setSelectedFiles,
            completedFiltered,
            shared
        }), [
        completedFiltered,
        setSelectedFiles,
        shared
    ]);
    const shouldShowChatIcon = hasEntitlement("chat:file");
    const shouldShowDeleteIcon = selectedFiles.every((file)=>!file.shared) && !shared && selectedFiles.length > 0;
    const shouldShowIconBox = shouldShowChatIcon || shouldShowDeleteIcon;
    const isChatDisabled = selectedFiles.length > _settings.MAX_SELECTABLE_FILES || isChatPaneOpen;
    const columns = (0, _react.useMemo)(()=>(0, _compact.default)([
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Checkbox, {
                    disabled: !!uploading.length,
                    checked: selectedFiles.length === completedFiltered.length && completedFiltered.length > 0,
                    onChange: handleCheckboxChange
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    sx: {
                        fontSize: 11,
                        fontWeight: 700
                    },
                    children: "TYPE"
                })
            },
            {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                    label: "NAME",
                    value: "name",
                    onChange: onChange,
                    sortBy: sortBy,
                    direction: direction,
                    sortOptions: _filesListconstants.SORT_OPTIONS,
                    shouldPreventMobileFormat: true
                })
            },
            !shouldUseMinimalList && {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                    sx: {
                        fontSize: 11,
                        fontWeight: 700
                    },
                    children: "OWNER"
                })
            },
            !shouldUseMinimalList && {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                    label: "UPLOAD DATE",
                    value: "date",
                    onChange: onChange,
                    sortBy: sortBy,
                    direction: direction,
                    sortOptions: _filesListconstants.SORT_OPTIONS,
                    defaultDirection: "desc",
                    shouldPreventMobileFormat: true
                })
            },
            !shouldUseMinimalList && {
                node: /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubSortableHeadCell, {
                    label: "FILE SIZE",
                    value: "size",
                    onChange: onChange,
                    sortBy: sortBy,
                    direction: direction,
                    sortOptions: _filesListconstants.SORT_OPTIONS,
                    defaultDirection: "desc",
                    shouldPreventMobileFormat: true
                })
            },
            {
                node: shouldShowIconBox ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                    sx: {
                        textAlign: "right",
                        width: "90px",
                        marginLeft: shouldUseMinimalList ? -5 : 2
                    },
                    children: [
                        shouldShowChatIcon && /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.RPTooltip, {
                            title: selectedFiles.length > _settings.MAX_SELECTABLE_FILES ? "You can only add a maximum of 10 files" : "Chat",
                            placement: "top",
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                                    sx: {
                                        mr: shouldUseMinimalList ? 0 : 1
                                    },
                                    onClick: openChatPane,
                                    disabled: isChatDisabled,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ChatBubbleOutline, {})
                                })
                            })
                        }),
                        shouldShowDeleteIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                            sx: {
                                p: "5px"
                            },
                            onClick: ()=>{
                                deleteFiles(selectedFiles.map((i)=>i.id)).then(()=>{
                                    setSelectedFiles([]);
                                });
                            },
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Delete, {})
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                            sx: {
                                width: 34,
                                display: "inline-block"
                            }
                        })
                    ]
                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                    children: "Â "
                })
            }
        ]), [
        completedFiltered.length,
        deleteFiles,
        direction,
        handleCheckboxChange,
        isChatDisabled,
        onChange,
        openChatPane,
        selectedFiles,
        setSelectedFiles,
        shouldShowChatIcon,
        shouldShowDeleteIcon,
        shouldShowIconBox,
        shouldUseMinimalList,
        sortBy,
        uploading.length
    ]);
    if (isLoadingFiles) return /*#__PURE__*/ (0, _jsxruntime.jsx)(_basecomponents.LoadingSpinner, {});
    if (filterTerm.length > 0 && filteredFiles.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.FindNoResults, {
            text: "No files found for your search.",
            isLoading: isPlaceholderData
        });
    }
    if (allFiles.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListNoUploaded.FilesListNoUploaded, {
            isLoading: isPlaceholderData
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            width: 1,
            mt: 1
        },
        ref: setDivRef,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.HubTableRow, {
                sx: {
                    backgroundColor: "transparent",
                    gap: 0,
                    marginLeft: "3px"
                },
                columnsWidth: columnsWidth,
                columns: columns,
                shouldPreventMobileFormat: true
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.InfiniteList, {
                state: state,
                setState: setState,
                rootMargin: "0px 0px 300px 0px",
                initialElements: _file.FILES_INFINITE_PAGE_SIZE,
                pageSize: _file.FILES_INFINITE_PAGE_SIZE,
                items: filteredFiles,
                fetchNextPage: fetchNextPage,
                hasMore: hasNextPage,
                loading: isFetchingNextPage,
                renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_FilesListItemV2.FilesListItemV2, {
                        shouldUseMinimalList: shouldUseMinimalList,
                        isThisFileOpen: currentOpenDocumentID === item.id,
                        shared: shared,
                        isPlaceholderData: isPlaceholderData,
                        filterTerm: filterTerm,
                        selectedFiles: selectedFiles,
                        setSelectedFiles: setSelectedFiles,
                        actions: actions,
                        item: item,
                        columnsWidth: columnsWidth,
                        openChatPane: openChatPane
                    })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,