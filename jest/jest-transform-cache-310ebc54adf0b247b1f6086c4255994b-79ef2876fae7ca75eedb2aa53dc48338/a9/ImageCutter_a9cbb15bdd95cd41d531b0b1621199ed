dc26b291f38fb59fb0233fc5db5a6457
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ImageCutter", {
    enumerable: true,
    get: function() {
        return ImageCutter;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _UploadInput = require("../UploadInput");
const _imageCutterUtils = require("./imageCutterUtils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Fallback = ({ width, height })=>{
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            position: "relative",
            width,
            height: height + 45
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                variant: "rectangular",
                width: width,
                height: height
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Skeleton, {
                variant: "rectangular",
                width: width,
                height: 36,
                sx: {
                    mt: 1
                }
            })
        ]
    });
};
const Cropper = /*#__PURE__*/ (0, _react.lazy)(()=>Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("react-easy-crop"))));
const CONTAINER_CLASS_NAME = "cropper-container";
const CROP_AREA_CLASS_NAME = "cropper-area-container";
const ImageCutter = ({ canvasHeight, canvasWidth, children, defaultImage, disabled, height, image, label = "Change Image", setImage, width, autoOpenUpload = false })=>{
    const hasAutoOpenUpload = (0, _react.useRef)(!autoOpenUpload);
    const [zoom, setZoom] = (0, _react.useState)(1);
    const [original, setOriginal] = (0, _react.useState)(image);
    const [croppedImage, setCroppedImage] = (0, _react.useState)("");
    const [hasUploaded, setHasUploaded] = (0, _react.useState)(false);
    const [crop, setCrop] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const buttonRef = (0, _react.useRef)(null);
    const isDefaultImage = image === defaultImage;
    const onDeleteOrUndo = ()=>{
        const what = hasUploaded ? image : defaultImage;
        setImage(what);
        setCroppedImage(what);
        setOriginal(what);
        setZoom(1);
        setHasUploaded(false);
    };
    const uploadImage = (0, _react.useCallback)(async ()=>{
        var _buttonRef_current;
        var _buttonRef_current_open;
        return (_buttonRef_current_open = (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : _buttonRef_current.open()) !== null && _buttonRef_current_open !== void 0 ? _buttonRef_current_open : [];
    }, []);
    const executeUpload = (0, _react.useCallback)(()=>{
        uploadImage().then(([file])=>{
            if (file) {
                setOriginal(URL.createObjectURL(file));
                setCroppedImage(URL.createObjectURL(file));
                setHasUploaded(true);
            }
        });
    }, [
        uploadImage
    ]);
    (0, _react.useEffect)(()=>{
        if (hasAutoOpenUpload.current) return;
        hasAutoOpenUpload.current = true;
        setTimeout(executeUpload);
    }, [
        executeUpload,
        autoOpenUpload
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Suspense, {
        fallback: /*#__PURE__*/ (0, _jsxruntime.jsx)(Fallback, {
            width: width,
            height: height
        }),
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_UploadInput.UploadInput, {
                ref: buttonRef,
                accept: "image/*"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                sx: {
                    position: "relative",
                    width,
                    height,
                    backgroundColor: "overlay.surface",
                    borderRadius: 2,
                    overflow: "hidden",
                    [`& .${CONTAINER_CLASS_NAME}`]: {
                        cursor: "default"
                    },
                    [`& .${CROP_AREA_CLASS_NAME}`]: {
                        visibility: hasUploaded ? "visible" : "hidden",
                        borderRadius: "8px"
                    }
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Cropper, {
                    image: original,
                    crop: crop,
                    zoom: zoom,
                    aspect: canvasWidth / canvasHeight,
                    onCropChange: setCrop,
                    onZoomChange: setZoom,
                    classes: {
                        containerClassName: CONTAINER_CLASS_NAME,
                        cropAreaClassName: CROP_AREA_CLASS_NAME
                    },
                    onCropComplete: async (_, croppedAreaPixels)=>{
                        if (!original) return;
                        const cropped = await (0, _imageCutterUtils.getCroppedImg)(original, croppedAreaPixels, canvasWidth, canvasHeight);
                        setCroppedImage(cropped);
                    }
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    display: "flex",
                    justifyContent: "left",
                    mt: 1,
                    gap: 1
                },
                children: [
                    children,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Box, {
                        sx: {
                            flexGrow: 1
                        },
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Button, {
                            sx: {
                                fontSize: 14
                            },
                            disabled: disabled,
                            variant: "contained-light",
                            onClick: ()=>{
                                if (hasUploaded) {
                                    setHasUploaded(false);
                                    setImage(croppedImage);
                                    setOriginal(croppedImage);
                                    setCroppedImage("");
                                    setZoom(1);
                                } else {
                                    executeUpload();
                                }
                            },
                            children: hasUploaded ? "Apply changes" : label
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Tooltip, {
                        title: isDefaultImage && !hasUploaded ? "" : hasUploaded ? "Discard" : "Remove Picture",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.IconButton, {
                            disabled: isDefaultImage && !hasUploaded,
                            sx: {
                                justifySelf: "flex-end"
                            },
                            onClick: onDeleteOrUndo,
                            children: hasUploaded ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Undo, {}) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.DeleteOutline, {})
                        })
                    })
                ]
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,