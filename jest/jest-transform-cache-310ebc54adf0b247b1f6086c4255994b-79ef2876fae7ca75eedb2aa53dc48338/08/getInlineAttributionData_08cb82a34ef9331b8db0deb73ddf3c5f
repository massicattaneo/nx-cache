9332ddd0a77d5b3102b9a0c359d5d339
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getCqsInlineAttributionData: function() {
        return getCqsInlineAttributionData;
    },
    getExternalInlineAttributionData: function() {
        return getExternalInlineAttributionData;
    },
    groupInlineAttributions: function() {
        return groupInlineAttributions;
    }
});
const _settings = require("@rp/common/settings");
const _utils = require("@rp/web/utils");
const getCqsInlineAttributionData = ({ id, chunkMap, onUserInteraction, setShowTooltip, setDocumentData, setHashParams })=>{
    let inlineAttributionData = undefined;
    const chunk = chunkMap[id];
    if (chunk !== undefined) {
        const url = chunk.parent.url;
        var _chunk_parent_srcName, _chunk_parent_language, _chunk_parent_rpProviderId, _chunk_parent_rpProviderId1;
        inlineAttributionData = {
            type: "CQS",
            hd: chunk.parent.hd,
            text: chunk.text,
            sourceName: (_chunk_parent_srcName = chunk.parent.srcName) !== null && _chunk_parent_srcName !== void 0 ? _chunk_parent_srcName : "Unknown Source",
            language: (_chunk_parent_language = chunk.parent.language) !== null && _chunk_parent_language !== void 0 ? _chunk_parent_language : "English",
            ts: chunk.parent.ts,
            documentScope: chunk.parent.documentScope,
            relatedSource: chunk.relatedSource,
            contentType: chunk.parent.contentType,
            srcKey: chunk.parent.srcKey,
            url: url !== null && url !== void 0 ? url : null,
            documentId: chunk.parent.id,
            rpProviderId: (_chunk_parent_rpProviderId = chunk.parent.rpProviderId) !== null && _chunk_parent_rpProviderId !== void 0 ? _chunk_parent_rpProviderId : null,
            onClick: url && _settings.REDIRECT_PROVIDERS.includes((_chunk_parent_rpProviderId1 = chunk.parent.rpProviderId) !== null && _chunk_parent_rpProviderId1 !== void 0 ? _chunk_parent_rpProviderId1 : "") ? (ev)=>{
                ev.stopPropagation();
                var _chunk_parent_srcName, _chunk_parent_rpProviderId;
                onUserInteraction({
                    action: "click",
                    sourceUrl: url,
                    sourceTitle: chunk.parent.hd,
                    documentId: null,
                    sourceId: chunk.parent.srcKey,
                    sourceName: (_chunk_parent_srcName = chunk.parent.srcName) !== null && _chunk_parent_srcName !== void 0 ? _chunk_parent_srcName : null,
                    providerId: (_chunk_parent_rpProviderId = chunk.parent.rpProviderId) !== null && _chunk_parent_rpProviderId !== void 0 ? _chunk_parent_rpProviderId : null
                });
                window.open((0, _utils.getUrlWithTextFragment)(url, chunk.text), "_blank", "noopener,noreferrer");
                setShowTooltip(false);
            } : (ev)=>{
                var _chunk_boundingBoxes;
                ev.stopPropagation();
                var _chunk_parent_url, _chunk_parent_srcName, _chunk_parent_rpProviderId;
                onUserInteraction({
                    action: "click",
                    sourceUrl: (_chunk_parent_url = chunk.parent.url) !== null && _chunk_parent_url !== void 0 ? _chunk_parent_url : null,
                    sourceTitle: chunk.parent.hd,
                    documentId: chunk.parent.id,
                    sourceId: chunk.parent.srcKey,
                    sourceName: (_chunk_parent_srcName = chunk.parent.srcName) !== null && _chunk_parent_srcName !== void 0 ? _chunk_parent_srcName : null,
                    providerId: (_chunk_parent_rpProviderId = chunk.parent.rpProviderId) !== null && _chunk_parent_rpProviderId !== void 0 ? _chunk_parent_rpProviderId : null
                });
                setDocumentData({
                    documentId: chunk.parent.id,
                    documentScope: chunk.parent.documentScope,
                    language: chunk.parent.language,
                    chunks: chunk.parent.chunks,
                    startingChunkId: chunk.cnum
                });
                const hashParams = chunk.parent.documentScope === "files" ? {
                    document: chunk.parent.id,
                    private: "true"
                } : {
                    document: chunk.parent.id
                };
                const boundingBox = (_chunk_boundingBoxes = chunk.boundingBoxes) === null || _chunk_boundingBoxes === void 0 ? void 0 : _chunk_boundingBoxes[0];
                if (boundingBox) {
                    hashParams.bb = JSON.stringify(boundingBox);
                }
                setHashParams(hashParams);
            }
        };
    }
    return inlineAttributionData;
};
const getExternalInlineAttributionData = ({ id, externalMap, onUserInteraction, setShowTooltip })=>{
    let inlineAttributionData = undefined;
    const result = externalMap[id];
    if (result !== undefined) {
        inlineAttributionData = {
            type: "EXTERNAL",
            hd: result.hd,
            text: result.text,
            sourceName: result.action.name,
            ts: result.ts,
            url: result.action.url,
            documentId: null,
            onClick: (ev)=>{
                ev.stopPropagation();
                onUserInteraction({
                    action: "click",
                    sourceUrl: result.action.url,
                    sourceTitle: result.hd,
                    documentId: null,
                    sourceId: null,
                    sourceName: null,
                    providerId: null
                });
                window.open(result.action.url, "_blank", "noopener,noreferrer");
                setShowTooltip(false);
            },
            externalFavicon: result.action.faviconUrl
        };
    }
    return inlineAttributionData;
};
// All CQS attributions from the list should go under the same document id
const groupInlineAttributions = (list)=>{
    const cleanList = list.filter((attribution)=>attribution !== undefined);
    const cqsCollections = {};
    const finalList = [];
    for (const attribution of cleanList){
        if (attribution.type === "EXTERNAL") {
            finalList.push({
                type: "EXTERNAL",
                label: attribution.sourceName,
                data: [
                    attribution
                ]
            });
        }
        if (attribution.type === "CQS") {
            if (cqsCollections[attribution.documentId] === undefined) {
                const documentList = [
                    attribution
                ];
                cqsCollections[attribution.documentId] = documentList;
                finalList.push({
                    type: "CQS",
                    label: attribution.sourceName,
                    data: documentList
                });
            } else {
                cqsCollections[attribution.documentId].push(attribution);
            }
        }
    }
    return finalList;
};

//# sourceMappingURL=data:application/json;base64,