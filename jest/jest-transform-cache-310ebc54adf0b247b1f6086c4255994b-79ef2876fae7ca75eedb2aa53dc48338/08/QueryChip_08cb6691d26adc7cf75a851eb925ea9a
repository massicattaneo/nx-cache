4cacff56e941cac02f0154dea990195f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    QueryChip: function() {
        return QueryChip;
    },
    isExternalStory: function() {
        return isExternalStory;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _core = require("@rp/react/web/mui/core");
const _icons = require("@rp/react/web/mui/icons");
const _ExternalAuditCard = require("../ExternalAuditCard");
const ACCEPTED_TYPES = [
    "CQS",
    "EXTERNAL"
];
const isExternalStory = (story)=>{
    return "action" in story && story.action.type === "EXTERNAL";
};
const renderAuditCard = (item, index, renderCqsCard)=>{
    return isExternalStory(item) ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_ExternalAuditCard.ExternalAuditCard, {
        title: item.hd,
        faviconUrl: item.action.faviconUrl,
        name: item.action.name,
        url: item.action.url,
        body: item.text
    }, item.action.url) : renderCqsCard(item, index);
};
const QueryChip = ({ query, trace, renderCard })=>{
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    var _trace_filter_map_flat;
    const acceptedResults = (_trace_filter_map_flat = trace === null || trace === void 0 ? void 0 : trace.filter((group)=>ACCEPTED_TYPES.includes(group.type)).map((group)=>group.values).flat()) !== null && _trace_filter_map_flat !== void 0 ? _trace_filter_map_flat : [];
    const shouldDisplayDropdown = trace ? trace.filter((group)=>ACCEPTED_TYPES.includes(group.type)).length > 0 : false;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
        sx: {
            maxWidth: "100%",
            width: isOpen ? 1 : undefined
        },
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    p: 1,
                    borderRadius: 1,
                    bgcolor: isOpen ? "elevation.dp06" : "overlay.surface",
                    fontSize: 16,
                    display: "flex",
                    gap: 0.5,
                    cursor: "pointer",
                    outline: "1px solid",
                    outlineColor: isOpen ? "outline.border" : "transparent",
                    width: "fit-content",
                    "&:hover": {
                        bgcolor: "elevation.dp06",
                        outlineColor: "outline.border"
                    }
                },
                onClick: ()=>shouldDisplayDropdown ? setIsOpen((prev)=>!prev) : undefined,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.Search, {}),
                    query,
                    shouldDisplayDropdown ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_icons.ArrowDropDown, {
                        sx: {
                            transform: isOpen ? "rotateZ(180deg)" : undefined
                        }
                    }) : null
                ]
            }, query),
            isOpen ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Box, {
                sx: {
                    overflow: "hidden",
                    "& .StoryCard-storyCardRoot": {
                        backgroundColor: "elevation.dp01"
                    },
                    "& .StoryCard-storyCardRoot:hover": {
                        backgroundColor: "overlay.surface"
                    }
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                        sx: {
                            fontSize: 14,
                            color: "text.secondary",
                            letterSpacing: 1,
                            pt: 2,
                            pb: 2
                        },
                        children: [
                            acceptedResults.length,
                            " matching",
                            " ",
                            acceptedResults.length === 1 ? "document" : "documents"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.ShowMoreList, {
                        items: acceptedResults,
                        renderItem: (item, index)=>renderAuditCard(item, index, renderCard),
                        paginate: 3,
                        showMoreLabel: {
                            more: "Show more",
                            less: "Show less"
                        }
                    })
                ]
            }) : null
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,