{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/tanstack-api/watchlist/src/useCustomDataViews.ts"],"sourcesContent":["import { AxiosError } from \"axios\"\nimport { z } from \"zod\"\nimport { displayError } from \"@rp/common/utils\"\nimport { financialDataSchemas } from \"@rp/common/zod-contracts/financial-data\"\nimport { axiosClient } from \"@rp/react/axios-client\"\nimport { SnackbarEnqueueAction } from \"@rp/react/common/types\"\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\"\n\n// Types (strongly typed to actual schemas)\ntype Schemas = typeof financialDataSchemas\ntype Endpoint = keyof Schemas\ntype SchemaFor<E extends Endpoint> = Schemas[E]\ntype ColumnKey<E extends Endpoint> = Extract<keyof z.infer<SchemaFor<E>>, string>\nexport type ApiCustomColumn = {\n  [E in Endpoint]: {\n    endpoint: E\n    columnKey: ColumnKey<E>\n  }\n}[Endpoint]\n\nexport type CustomDataViewResponse = {\n  id: string\n  columns: Array<ApiCustomColumn>\n  createdAt: string\n  updatedAt: string\n}\n\nexport type CustomDataViewListResponse = {\n  results: Array<CustomDataViewResponse>\n}\n\nexport type CreateCustomDataViewRequest = {\n  columns: Array<ApiCustomColumn>\n}\n\nexport type UpdateCustomDataViewRequest = {\n  columns: Array<ApiCustomColumn> | null\n}\n\n// Query Keys\nexport const customDataViewsQueryKeys = {\n  all: [\"custom-data-views\"] as const,\n  detail: (id: string) => [\"custom-data-views\", id] as const,\n}\n\n// API Functions\nconst getAll = async (): Promise<CustomDataViewListResponse> => {\n  const { data } = await axiosClient.get<CustomDataViewListResponse>(\"/custom-data-views\")\n  return data\n}\n\nconst create = async (request: CreateCustomDataViewRequest): Promise<CustomDataViewResponse> => {\n  const { data } = await axiosClient.post<CustomDataViewResponse>(\"/custom-data-views\", request)\n  return data\n}\n\nconst update = async (\n  id: string,\n  request: UpdateCustomDataViewRequest,\n): Promise<CustomDataViewResponse> => {\n  const { data } = await axiosClient.patch<CustomDataViewResponse>(\n    `/custom-data-views/${id}`,\n    request,\n  )\n  return data\n}\n\nconst destroy = async (id: string): Promise<void> => {\n  await axiosClient.delete(`/custom-data-views/${id}`)\n}\n\n// Query Hooks\nexport const useCustomDataViews = (options?: { enabled?: boolean }) => {\n  const result = useQuery({\n    queryKey: customDataViewsQueryKeys.all,\n    queryFn: getAll,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    retry: 3,\n    enabled: options?.enabled ?? true,\n  })\n\n  return result\n}\n\n// Get the primary custom data view (users typically have one)\nexport const usePrimaryCustomDataView = (options?: { enabled?: boolean }) => {\n  const { data, ...rest } = useCustomDataViews(options)\n\n  const primaryDataView = data?.results?.[0] || null\n\n  return {\n    data: primaryDataView,\n    ...rest,\n  }\n}\n\n// Mutation Hooks\nexport const useCreateCustomDataView = (options?: { enqueueError?: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: create,\n    onSuccess: newDataView => {\n      // Update the cache with the new data view\n      queryClient.setQueryData<CustomDataViewListResponse>(customDataViewsQueryKeys.all, old => {\n        if (!old) {\n          return { results: [newDataView] }\n        }\n        return {\n          results: [...old.results, newDataView],\n        }\n      })\n\n      // Invalidate to ensure we have fresh data\n      queryClient.invalidateQueries({ queryKey: customDataViewsQueryKeys.all })\n    },\n    onError: (error: AxiosError) => {\n      options?.enqueueError?.(displayError(error, \"Failed to create custom data view\"))\n    },\n  })\n}\n\nexport const useUpdateCustomDataView = (options?: { enqueueError?: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: ({ id, request }: { id: string; request: UpdateCustomDataViewRequest }) =>\n      update(id, request),\n    onMutate: async ({ id, request }) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: customDataViewsQueryKeys.all })\n\n      // Snapshot the previous value\n      const previousDataViews = queryClient.getQueryData<CustomDataViewListResponse>(\n        customDataViewsQueryKeys.all,\n      )\n\n      // Optimistically update\n      queryClient.setQueryData<CustomDataViewListResponse>(customDataViewsQueryKeys.all, old => {\n        if (!old) return old\n        return {\n          results: old.results.map(item => {\n            if (item.id === id && request.columns) {\n              return {\n                ...item,\n                columns: request.columns,\n                updatedAt: new Date().toISOString(),\n              }\n            }\n            return item\n          }),\n        }\n      })\n\n      return { previousDataViews }\n    },\n    onError: (error: AxiosError, __, context) => {\n      // Revert optimistic update on error\n      if (context?.previousDataViews) {\n        queryClient.setQueryData(customDataViewsQueryKeys.all, context.previousDataViews)\n      }\n      options?.enqueueError?.(displayError(error, \"Failed to update custom data view\"))\n    },\n    onSuccess: updatedDataView => {\n      // Update with the actual server response\n      queryClient.setQueryData<CustomDataViewListResponse>(customDataViewsQueryKeys.all, old => {\n        if (!old) return old\n        return {\n          results: old.results.map(item =>\n            item.id === updatedDataView.id ? updatedDataView : item,\n          ),\n        }\n      })\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: customDataViewsQueryKeys.all })\n    },\n  })\n}\n\nexport const useDeleteCustomDataView = (options?: { enqueueError?: SnackbarEnqueueAction }) => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: destroy,\n    onMutate: async (id: string) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: customDataViewsQueryKeys.all })\n\n      // Snapshot the previous value\n      const previousDataViews = queryClient.getQueryData<CustomDataViewListResponse>(\n        customDataViewsQueryKeys.all,\n      )\n\n      // Optimistically remove the item\n      queryClient.setQueryData<CustomDataViewListResponse>(customDataViewsQueryKeys.all, old => {\n        if (!old) return old\n        return {\n          results: old.results.filter(item => item.id !== id),\n        }\n      })\n\n      return { previousDataViews }\n    },\n    onError: (error: AxiosError, __, context) => {\n      // Revert optimistic update on error\n      if (context?.previousDataViews) {\n        queryClient.setQueryData(customDataViewsQueryKeys.all, context.previousDataViews)\n      }\n      options?.enqueueError?.(displayError(error, \"Failed to delete custom data view\"))\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: customDataViewsQueryKeys.all })\n    },\n  })\n}\n\n// Helper hook that combines create/update logic\nexport const useSaveCustomDataView = (options?: {\n  enqueueError?: SnackbarEnqueueAction\n  enabled?: boolean\n}) => {\n  const createMutation = useCreateCustomDataView({ enqueueError: options?.enqueueError })\n  const updateMutation = useUpdateCustomDataView({ enqueueError: options?.enqueueError })\n  const { data: _primaryDataView, refetch } = usePrimaryCustomDataView({\n    enabled: options?.enabled,\n  })\n\n  const saveMutation = useMutation({\n    mutationFn: async (columns: Array<ApiCustomColumn>) => {\n      // First, try to get the most up-to-date data\n      const { data: freshData } = await refetch()\n      const currentDataView = freshData?.results?.[0]\n\n      if (currentDataView) {\n        // Update existing\n        return updateMutation.mutateAsync({\n          id: currentDataView.id,\n          request: { columns },\n        })\n      } else {\n        // Create new\n        try {\n          return await createMutation.mutateAsync({ columns })\n        } catch (error) {\n          // If creation fails with conflict, try to refetch and update instead\n          if (error instanceof AxiosError && error.response?.status === 409) {\n            const existingDataView = freshData?.results?.[0]\n            if (existingDataView) {\n              return updateMutation.mutateAsync({\n                id: existingDataView.id,\n                request: { columns },\n              })\n            }\n          }\n          throw error\n        }\n      }\n    },\n    onError: (error: AxiosError) => {\n      options?.enqueueError?.(displayError(error, \"Failed to save custom data view\"))\n    },\n  })\n\n  return {\n    ...saveMutation,\n    isPending: saveMutation.isPending || createMutation.isPending || updateMutation.isPending,\n  }\n}\n"],"names":["customDataViewsQueryKeys","useCreateCustomDataView","useCustomDataViews","useDeleteCustomDataView","usePrimaryCustomDataView","useSaveCustomDataView","useUpdateCustomDataView","all","detail","id","getAll","data","axiosClient","get","create","request","post","update","patch","destroy","delete","options","result","useQuery","queryKey","queryFn","staleTime","retry","enabled","rest","primaryDataView","results","queryClient","useQueryClient","useMutation","mutationFn","onSuccess","newDataView","setQueryData","old","invalidateQueries","onError","error","enqueueError","displayError","onMutate","cancelQueries","previousDataViews","getQueryData","map","item","columns","updatedAt","Date","toISOString","__","context","updatedDataView","onSettled","filter","createMutation","updateMutation","_primaryDataView","refetch","saveMutation","freshData","currentDataView","mutateAsync","AxiosError","response","status","existingDataView","isPending"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAwCaA,wBAAwB;eAAxBA;;IAyDAC,uBAAuB;eAAvBA;;IAzBAC,kBAAkB;eAAlBA;;IA6GAC,uBAAuB;eAAvBA;;IAhGAC,wBAAwB;eAAxBA;;IAuIAC,qBAAqB;eAArBA;;IAlGAC,uBAAuB;eAAvBA;;;uBA1Hc;uBAEE;6BAED;4BAE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkC/C,MAAMN,2BAA2B;IACtCO,KAAK;QAAC;KAAoB;IAC1BC,QAAQ,CAACC,KAAe;YAAC;YAAqBA;SAAG;AACnD;AAEA,gBAAgB;AAChB,MAAMC,SAAS;IACb,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,wBAAW,CAACC,GAAG,CAA6B;IACnE,OAAOF;AACT;AAEA,MAAMG,SAAS,OAAOC;IACpB,MAAM,EAAEJ,IAAI,EAAE,GAAG,MAAMC,wBAAW,CAACI,IAAI,CAAyB,sBAAsBD;IACtF,OAAOJ;AACT;AAEA,MAAMM,SAAS,OACbR,IACAM;IAEA,MAAM,EAAEJ,IAAI,EAAE,GAAG,MAAMC,wBAAW,CAACM,KAAK,CACtC,CAAC,mBAAmB,EAAET,GAAG,CAAC,EAC1BM;IAEF,OAAOJ;AACT;AAEA,MAAMQ,UAAU,OAAOV;IACrB,MAAMG,wBAAW,CAACQ,MAAM,CAAC,CAAC,mBAAmB,EAAEX,GAAG,CAAC;AACrD;AAGO,MAAMP,qBAAqB,CAACmB;QAMtBA;IALX,MAAMC,SAASC,IAAAA,oBAAQ,EAAC;QACtBC,UAAUxB,yBAAyBO,GAAG;QACtCkB,SAASf;QACTgB,WAAW,OAAO,KAAK;QACvBC,OAAO;QACPC,SAASP,CAAAA,mBAAAA,oBAAAA,8BAAAA,QAASO,OAAO,cAAhBP,8BAAAA,mBAAoB;IAC/B;IAEA,OAAOC;AACT;AAGO,MAAMlB,2BAA2B,CAACiB;QAGfV;IAFxB,MAA0BT,sBAAAA,mBAAmBmB,UAAvC,EAAEV,IAAI,EAAW,GAAGT,qBAAT2B,kCAAS3B;QAAlBS;;IAER,MAAMmB,kBAAkBnB,CAAAA,iBAAAA,4BAAAA,gBAAAA,KAAMoB,OAAO,cAAbpB,oCAAAA,aAAe,CAAC,EAAE,KAAI;IAE9C,OAAO;QACLA,MAAMmB;OACHD;AAEP;AAGO,MAAM5B,0BAA0B,CAACoB;IACtC,MAAMW,cAAcC,IAAAA,0BAAc;IAElC,OAAOC,IAAAA,uBAAW,EAAC;QACjBC,YAAYrB;QACZsB,WAAWC,CAAAA;YACT,0CAA0C;YAC1CL,YAAYM,YAAY,CAA6BtC,yBAAyBO,GAAG,EAAEgC,CAAAA;gBACjF,IAAI,CAACA,KAAK;oBACR,OAAO;wBAAER,SAAS;4BAACM;yBAAY;oBAAC;gBAClC;gBACA,OAAO;oBACLN,SAAS;2BAAIQ,IAAIR,OAAO;wBAAEM;qBAAY;gBACxC;YACF;YAEA,0CAA0C;YAC1CL,YAAYQ,iBAAiB,CAAC;gBAAEhB,UAAUxB,yBAAyBO,GAAG;YAAC;QACzE;QACAkC,SAAS,CAACC;gBACRrB;YAAAA,oBAAAA,+BAAAA,wBAAAA,QAASsB,YAAY,cAArBtB,4CAAAA,2BAAAA,SAAwBuB,IAAAA,mBAAY,EAACF,OAAO;QAC9C;IACF;AACF;AAEO,MAAMpC,0BAA0B,CAACe;IACtC,MAAMW,cAAcC,IAAAA,0BAAc;IAElC,OAAOC,IAAAA,uBAAW,EAAC;QACjBC,YAAY,CAAC,EAAE1B,EAAE,EAAEM,OAAO,EAAwD,GAChFE,OAAOR,IAAIM;QACb8B,UAAU,OAAO,EAAEpC,EAAE,EAAEM,OAAO,EAAE;YAC9B,gCAAgC;YAChC,MAAMiB,YAAYc,aAAa,CAAC;gBAAEtB,UAAUxB,yBAAyBO,GAAG;YAAC;YAEzE,8BAA8B;YAC9B,MAAMwC,oBAAoBf,YAAYgB,YAAY,CAChDhD,yBAAyBO,GAAG;YAG9B,wBAAwB;YACxByB,YAAYM,YAAY,CAA6BtC,yBAAyBO,GAAG,EAAEgC,CAAAA;gBACjF,IAAI,CAACA,KAAK,OAAOA;gBACjB,OAAO;oBACLR,SAASQ,IAAIR,OAAO,CAACkB,GAAG,CAACC,CAAAA;wBACvB,IAAIA,KAAKzC,EAAE,KAAKA,MAAMM,QAAQoC,OAAO,EAAE;4BACrC,OAAO,wCACFD;gCACHC,SAASpC,QAAQoC,OAAO;gCACxBC,WAAW,IAAIC,OAAOC,WAAW;;wBAErC;wBACA,OAAOJ;oBACT;gBACF;YACF;YAEA,OAAO;gBAAEH;YAAkB;QAC7B;QACAN,SAAS,CAACC,OAAmBa,IAAIC;gBAK/BnC;YAJA,oCAAoC;YACpC,IAAImC,oBAAAA,8BAAAA,QAAST,iBAAiB,EAAE;gBAC9Bf,YAAYM,YAAY,CAACtC,yBAAyBO,GAAG,EAAEiD,QAAQT,iBAAiB;YAClF;YACA1B,oBAAAA,+BAAAA,wBAAAA,QAASsB,YAAY,cAArBtB,4CAAAA,2BAAAA,SAAwBuB,IAAAA,mBAAY,EAACF,OAAO;QAC9C;QACAN,WAAWqB,CAAAA;YACT,yCAAyC;YACzCzB,YAAYM,YAAY,CAA6BtC,yBAAyBO,GAAG,EAAEgC,CAAAA;gBACjF,IAAI,CAACA,KAAK,OAAOA;gBACjB,OAAO;oBACLR,SAASQ,IAAIR,OAAO,CAACkB,GAAG,CAACC,CAAAA,OACvBA,KAAKzC,EAAE,KAAKgD,gBAAgBhD,EAAE,GAAGgD,kBAAkBP;gBAEvD;YACF;QACF;QACAQ,WAAW;YACT,wCAAwC;YACxC1B,YAAYQ,iBAAiB,CAAC;gBAAEhB,UAAUxB,yBAAyBO,GAAG;YAAC;QACzE;IACF;AACF;AAEO,MAAMJ,0BAA0B,CAACkB;IACtC,MAAMW,cAAcC,IAAAA,0BAAc;IAElC,OAAOC,IAAAA,uBAAW,EAAC;QACjBC,YAAYhB;QACZ0B,UAAU,OAAOpC;YACf,gCAAgC;YAChC,MAAMuB,YAAYc,aAAa,CAAC;gBAAEtB,UAAUxB,yBAAyBO,GAAG;YAAC;YAEzE,8BAA8B;YAC9B,MAAMwC,oBAAoBf,YAAYgB,YAAY,CAChDhD,yBAAyBO,GAAG;YAG9B,iCAAiC;YACjCyB,YAAYM,YAAY,CAA6BtC,yBAAyBO,GAAG,EAAEgC,CAAAA;gBACjF,IAAI,CAACA,KAAK,OAAOA;gBACjB,OAAO;oBACLR,SAASQ,IAAIR,OAAO,CAAC4B,MAAM,CAACT,CAAAA,OAAQA,KAAKzC,EAAE,KAAKA;gBAClD;YACF;YAEA,OAAO;gBAAEsC;YAAkB;QAC7B;QACAN,SAAS,CAACC,OAAmBa,IAAIC;gBAK/BnC;YAJA,oCAAoC;YACpC,IAAImC,oBAAAA,8BAAAA,QAAST,iBAAiB,EAAE;gBAC9Bf,YAAYM,YAAY,CAACtC,yBAAyBO,GAAG,EAAEiD,QAAQT,iBAAiB;YAClF;YACA1B,oBAAAA,+BAAAA,wBAAAA,QAASsB,YAAY,cAArBtB,4CAAAA,2BAAAA,SAAwBuB,IAAAA,mBAAY,EAACF,OAAO;QAC9C;QACAgB,WAAW;YACT,wCAAwC;YACxC1B,YAAYQ,iBAAiB,CAAC;gBAAEhB,UAAUxB,yBAAyBO,GAAG;YAAC;QACzE;IACF;AACF;AAGO,MAAMF,wBAAwB,CAACgB;IAIpC,MAAMuC,iBAAiB3D,wBAAwB;QAAE0C,YAAY,EAAEtB,oBAAAA,8BAAAA,QAASsB,YAAY;IAAC;IACrF,MAAMkB,iBAAiBvD,wBAAwB;QAAEqC,YAAY,EAAEtB,oBAAAA,8BAAAA,QAASsB,YAAY;IAAC;IACrF,MAAM,EAAEhC,MAAMmD,gBAAgB,EAAEC,OAAO,EAAE,GAAG3D,yBAAyB;QACnEwB,OAAO,EAAEP,oBAAAA,8BAAAA,QAASO,OAAO;IAC3B;IAEA,MAAMoC,eAAe9B,IAAAA,uBAAW,EAAC;QAC/BC,YAAY,OAAOgB;gBAGOc;YAFxB,6CAA6C;YAC7C,MAAM,EAAEtD,MAAMsD,SAAS,EAAE,GAAG,MAAMF;YAClC,MAAMG,kBAAkBD,sBAAAA,iCAAAA,qBAAAA,UAAWlC,OAAO,cAAlBkC,yCAAAA,kBAAoB,CAAC,EAAE;YAE/C,IAAIC,iBAAiB;gBACnB,kBAAkB;gBAClB,OAAOL,eAAeM,WAAW,CAAC;oBAChC1D,IAAIyD,gBAAgBzD,EAAE;oBACtBM,SAAS;wBAAEoC;oBAAQ;gBACrB;YACF,OAAO;gBACL,aAAa;gBACb,IAAI;oBACF,OAAO,MAAMS,eAAeO,WAAW,CAAC;wBAAEhB;oBAAQ;gBACpD,EAAE,OAAOT,OAAO;wBAEqBA;oBADnC,qEAAqE;oBACrE,IAAIA,iBAAiB0B,iBAAU,IAAI1B,EAAAA,kBAAAA,MAAM2B,QAAQ,cAAd3B,sCAAAA,gBAAgB4B,MAAM,MAAK,KAAK;4BACxCL;wBAAzB,MAAMM,mBAAmBN,sBAAAA,iCAAAA,sBAAAA,UAAWlC,OAAO,cAAlBkC,0CAAAA,mBAAoB,CAAC,EAAE;wBAChD,IAAIM,kBAAkB;4BACpB,OAAOV,eAAeM,WAAW,CAAC;gCAChC1D,IAAI8D,iBAAiB9D,EAAE;gCACvBM,SAAS;oCAAEoC;gCAAQ;4BACrB;wBACF;oBACF;oBACA,MAAMT;gBACR;YACF;QACF;QACAD,SAAS,CAACC;gBACRrB;YAAAA,oBAAAA,+BAAAA,wBAAAA,QAASsB,YAAY,cAArBtB,4CAAAA,2BAAAA,SAAwBuB,IAAAA,mBAAY,EAACF,OAAO;QAC9C;IACF;IAEA,OAAO,wCACFsB;QACHQ,WAAWR,aAAaQ,SAAS,IAAIZ,eAAeY,SAAS,IAAIX,eAAeW,SAAS;;AAE7F"}