3c23dff1a7ae1f2e39657539bf7b2c57
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    customDataViewsQueryKeys: function() {
        return customDataViewsQueryKeys;
    },
    useCreateCustomDataView: function() {
        return useCreateCustomDataView;
    },
    useCustomDataViews: function() {
        return useCustomDataViews;
    },
    useDeleteCustomDataView: function() {
        return useDeleteCustomDataView;
    },
    usePrimaryCustomDataView: function() {
        return usePrimaryCustomDataView;
    },
    useSaveCustomDataView: function() {
        return useSaveCustomDataView;
    },
    useUpdateCustomDataView: function() {
        return useUpdateCustomDataView;
    }
});
const _axios = require("axios");
const _utils = require("@rp/common/utils");
const _axiosclient = require("@rp/react/axios-client");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const customDataViewsQueryKeys = {
    all: [
        "custom-data-views"
    ],
    detail: (id)=>[
            "custom-data-views",
            id
        ]
};
// API Functions
const getAll = async ()=>{
    const { data } = await _axiosclient.axiosClient.get("/custom-data-views");
    return data;
};
const create = async (request)=>{
    const { data } = await _axiosclient.axiosClient.post("/custom-data-views", request);
    return data;
};
const update = async (id, request)=>{
    const { data } = await _axiosclient.axiosClient.patch(`/custom-data-views/${id}`, request);
    return data;
};
const destroy = async (id)=>{
    await _axiosclient.axiosClient.delete(`/custom-data-views/${id}`);
};
const useCustomDataViews = (options)=>{
    var _options_enabled;
    const result = (0, _reactquery.useQuery)({
        queryKey: customDataViewsQueryKeys.all,
        queryFn: getAll,
        staleTime: 1000 * 60 * 5,
        retry: 3,
        enabled: (_options_enabled = options === null || options === void 0 ? void 0 : options.enabled) !== null && _options_enabled !== void 0 ? _options_enabled : true
    });
    return result;
};
const usePrimaryCustomDataView = (options)=>{
    var _data_results;
    const _useCustomDataViews = useCustomDataViews(options), { data } = _useCustomDataViews, rest = _object_without_properties(_useCustomDataViews, [
        "data"
    ]);
    const primaryDataView = (data === null || data === void 0 ? void 0 : (_data_results = data.results) === null || _data_results === void 0 ? void 0 : _data_results[0]) || null;
    return _object_spread({
        data: primaryDataView
    }, rest);
};
const useCreateCustomDataView = (options)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: create,
        onSuccess: (newDataView)=>{
            // Update the cache with the new data view
            queryClient.setQueryData(customDataViewsQueryKeys.all, (old)=>{
                if (!old) {
                    return {
                        results: [
                            newDataView
                        ]
                    };
                }
                return {
                    results: [
                        ...old.results,
                        newDataView
                    ]
                };
            });
            // Invalidate to ensure we have fresh data
            queryClient.invalidateQueries({
                queryKey: customDataViewsQueryKeys.all
            });
        },
        onError: (error)=>{
            var _options_enqueueError;
            options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (0, _utils.displayError)(error, "Failed to create custom data view"));
        }
    });
};
const useUpdateCustomDataView = (options)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: ({ id, request })=>update(id, request),
        onMutate: async ({ id, request })=>{
            // Cancel any outgoing refetches
            await queryClient.cancelQueries({
                queryKey: customDataViewsQueryKeys.all
            });
            // Snapshot the previous value
            const previousDataViews = queryClient.getQueryData(customDataViewsQueryKeys.all);
            // Optimistically update
            queryClient.setQueryData(customDataViewsQueryKeys.all, (old)=>{
                if (!old) return old;
                return {
                    results: old.results.map((item)=>{
                        if (item.id === id && request.columns) {
                            return _object_spread_props(_object_spread({}, item), {
                                columns: request.columns,
                                updatedAt: new Date().toISOString()
                            });
                        }
                        return item;
                    })
                };
            });
            return {
                previousDataViews
            };
        },
        onError: (error, __, context)=>{
            var _options_enqueueError;
            // Revert optimistic update on error
            if (context === null || context === void 0 ? void 0 : context.previousDataViews) {
                queryClient.setQueryData(customDataViewsQueryKeys.all, context.previousDataViews);
            }
            options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (0, _utils.displayError)(error, "Failed to update custom data view"));
        },
        onSuccess: (updatedDataView)=>{
            // Update with the actual server response
            queryClient.setQueryData(customDataViewsQueryKeys.all, (old)=>{
                if (!old) return old;
                return {
                    results: old.results.map((item)=>item.id === updatedDataView.id ? updatedDataView : item)
                };
            });
        },
        onSettled: ()=>{
            // Always refetch after error or success
            queryClient.invalidateQueries({
                queryKey: customDataViewsQueryKeys.all
            });
        }
    });
};
const useDeleteCustomDataView = (options)=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    return (0, _reactquery.useMutation)({
        mutationFn: destroy,
        onMutate: async (id)=>{
            // Cancel any outgoing refetches
            await queryClient.cancelQueries({
                queryKey: customDataViewsQueryKeys.all
            });
            // Snapshot the previous value
            const previousDataViews = queryClient.getQueryData(customDataViewsQueryKeys.all);
            // Optimistically remove the item
            queryClient.setQueryData(customDataViewsQueryKeys.all, (old)=>{
                if (!old) return old;
                return {
                    results: old.results.filter((item)=>item.id !== id)
                };
            });
            return {
                previousDataViews
            };
        },
        onError: (error, __, context)=>{
            var _options_enqueueError;
            // Revert optimistic update on error
            if (context === null || context === void 0 ? void 0 : context.previousDataViews) {
                queryClient.setQueryData(customDataViewsQueryKeys.all, context.previousDataViews);
            }
            options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (0, _utils.displayError)(error, "Failed to delete custom data view"));
        },
        onSettled: ()=>{
            // Always refetch after error or success
            queryClient.invalidateQueries({
                queryKey: customDataViewsQueryKeys.all
            });
        }
    });
};
const useSaveCustomDataView = (options)=>{
    const createMutation = useCreateCustomDataView({
        enqueueError: options === null || options === void 0 ? void 0 : options.enqueueError
    });
    const updateMutation = useUpdateCustomDataView({
        enqueueError: options === null || options === void 0 ? void 0 : options.enqueueError
    });
    const { data: _primaryDataView, refetch } = usePrimaryCustomDataView({
        enabled: options === null || options === void 0 ? void 0 : options.enabled
    });
    const saveMutation = (0, _reactquery.useMutation)({
        mutationFn: async (columns)=>{
            var _freshData_results;
            // First, try to get the most up-to-date data
            const { data: freshData } = await refetch();
            const currentDataView = freshData === null || freshData === void 0 ? void 0 : (_freshData_results = freshData.results) === null || _freshData_results === void 0 ? void 0 : _freshData_results[0];
            if (currentDataView) {
                // Update existing
                return updateMutation.mutateAsync({
                    id: currentDataView.id,
                    request: {
                        columns
                    }
                });
            } else {
                // Create new
                try {
                    return await createMutation.mutateAsync({
                        columns
                    });
                } catch (error) {
                    var _error_response;
                    // If creation fails with conflict, try to refetch and update instead
                    if (error instanceof _axios.AxiosError && ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 409) {
                        var _freshData_results1;
                        const existingDataView = freshData === null || freshData === void 0 ? void 0 : (_freshData_results1 = freshData.results) === null || _freshData_results1 === void 0 ? void 0 : _freshData_results1[0];
                        if (existingDataView) {
                            return updateMutation.mutateAsync({
                                id: existingDataView.id,
                                request: {
                                    columns
                                }
                            });
                        }
                    }
                    throw error;
                }
            }
        },
        onError: (error)=>{
            var _options_enqueueError;
            options === null || options === void 0 ? void 0 : (_options_enqueueError = options.enqueueError) === null || _options_enqueueError === void 0 ? void 0 : _options_enqueueError.call(options, (0, _utils.displayError)(error, "Failed to save custom data view"));
        }
    });
    return _object_spread_props(_object_spread({}, saveMutation), {
        isPending: saveMutation.isPending || createMutation.isPending || updateMutation.isPending
    });
};

//# sourceMappingURL=data:application/json;base64,