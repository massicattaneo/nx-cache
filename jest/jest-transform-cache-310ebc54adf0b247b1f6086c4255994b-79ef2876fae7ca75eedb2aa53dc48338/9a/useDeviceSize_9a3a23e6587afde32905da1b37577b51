bd68be4fde425834e905fbdcb3b1afcc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDeviceSize", {
    enumerable: true,
    get: function() {
        return useDeviceSize;
    }
});
const _react = require("react");
const _styles = require("@mui/styles");
const getWidth = ()=>{
    var _window_visualViewport, _window_visualViewport1;
    const hasScrollbar = window.innerWidth > document.body.clientWidth;
    if ((_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.width) return ((_window_visualViewport1 = window.visualViewport) === null || _window_visualViewport1 === void 0 ? void 0 : _window_visualViewport1.width) + (hasScrollbar ? 15 : 0);
    return window.innerWidth;
};
const getHeight = ()=>{
    var _window_visualViewport;
    var _window_visualViewport_height;
    return (_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight;
};
const minKeyboardHeight = 300;
const isPortrait = ()=>{
    var _window_screen_orientation, _window_screen;
    switch((_window_screen = window.screen) === null || _window_screen === void 0 ? void 0 : (_window_screen_orientation = _window_screen.orientation) === null || _window_screen_orientation === void 0 ? void 0 : _window_screen_orientation.type){
        case "landscape-primary":
            return false;
        case "landscape-secondary":
            return false;
        default:
            return true;
    }
};
const useDeviceSize = ()=>{
    const [width, setWidth] = (0, _react.useState)(getWidth());
    const [height, setHeight] = (0, _react.useState)(getHeight());
    const [isDeviceKeyboardOpen, setIsDeviceKeyboardOpen] = (0, _react.useState)(false);
    const theme = (0, _styles.useTheme)();
    const recalculate = (0, _react.useCallback)(()=>{
        setWidth(getWidth());
        setHeight(getHeight());
        setIsDeviceKeyboardOpen(()=>{
            const height = isPortrait() ? window.screen.height : window.screen.width;
            return height - minKeyboardHeight > getHeight();
        });
    }, []);
    (0, _react.useEffect)(()=>{
        var _window_visualViewport;
        (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.addEventListener("resize", recalculate);
        window.addEventListener("resize", recalculate);
        recalculate();
        return ()=>{
            var _window_visualViewport;
            (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.removeEventListener("resize", recalculate);
            window.removeEventListener("resize", recalculate);
        };
    }, [
        recalculate
    ]);
    return {
        width,
        height,
        isDeviceKeyboardOpen,
        between: (from, to)=>{
            if (!to) return width >= theme.breakpoints.values[from];
            return width >= theme.breakpoints.values[from] && width < theme.breakpoints.values[to];
        }
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL2xpYnMvcmVhY3Qvd2ViL2NvbW1vbi9ob29rcy9zcmMvdXNlRGV2aWNlU2l6ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyB1c2VUaGVtZSB9IGZyb20gXCJAbXVpL3N0eWxlc1wiXG5pbXBvcnQgeyBSUFRoZW1lUHJvcHMgfSBmcm9tIFwiQHJwL3JlYWN0L3RoZW1lXCJcbmltcG9ydCB7IEJyZWFrcG9pbnQgfSBmcm9tIFwiQHJwL3JlYWN0L3dlYi9tdWkvY29yZVwiXG5cbmNvbnN0IGdldFdpZHRoID0gKCkgPT4ge1xuICBjb25zdCBoYXNTY3JvbGxiYXIgPSB3aW5kb3cuaW5uZXJXaWR0aCA+IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGhcbiAgaWYgKHdpbmRvdy52aXN1YWxWaWV3cG9ydD8ud2lkdGgpIHJldHVybiB3aW5kb3cudmlzdWFsVmlld3BvcnQ/LndpZHRoICsgKGhhc1Njcm9sbGJhciA/IDE1IDogMClcbiAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoXG59XG5jb25zdCBnZXRIZWlnaHQgPSAoKSA9PiB3aW5kb3cudmlzdWFsVmlld3BvcnQ/LmhlaWdodCA/PyB3aW5kb3cuaW5uZXJIZWlnaHRcbmNvbnN0IG1pbktleWJvYXJkSGVpZ2h0ID0gMzAwXG5jb25zdCBpc1BvcnRyYWl0ID0gKCkgPT4ge1xuICBzd2l0Y2ggKHdpbmRvdy5zY3JlZW4/Lm9yaWVudGF0aW9uPy50eXBlKSB7XG4gICAgY2FzZSBcImxhbmRzY2FwZS1wcmltYXJ5XCI6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICBjYXNlIFwibGFuZHNjYXBlLXNlY29uZGFyeVwiOlxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuY29uc3QgdXNlRGV2aWNlU2l6ZSA9ICgpID0+IHtcbiAgY29uc3QgW3dpZHRoLCBzZXRXaWR0aF0gPSB1c2VTdGF0ZTxudW1iZXI+KGdldFdpZHRoKCkpXG4gIGNvbnN0IFtoZWlnaHQsIHNldEhlaWdodF0gPSB1c2VTdGF0ZTxudW1iZXI+KGdldEhlaWdodCgpKVxuICBjb25zdCBbaXNEZXZpY2VLZXlib2FyZE9wZW4sIHNldElzRGV2aWNlS2V5Ym9hcmRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWU8UlBUaGVtZVByb3BzPigpXG5cbiAgY29uc3QgcmVjYWxjdWxhdGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0V2lkdGgoZ2V0V2lkdGgoKSlcbiAgICBzZXRIZWlnaHQoZ2V0SGVpZ2h0KCkpXG4gICAgc2V0SXNEZXZpY2VLZXlib2FyZE9wZW4oKCkgPT4ge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gaXNQb3J0cmFpdCgpID8gd2luZG93LnNjcmVlbi5oZWlnaHQgOiB3aW5kb3cuc2NyZWVuLndpZHRoXG4gICAgICByZXR1cm4gaGVpZ2h0IC0gbWluS2V5Ym9hcmRIZWlnaHQgPiBnZXRIZWlnaHQoKVxuICAgIH0pXG4gIH0sIFtdKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93LnZpc3VhbFZpZXdwb3J0Py5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlY2FsY3VsYXRlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlY2FsY3VsYXRlKVxuICAgIHJlY2FsY3VsYXRlKClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnZpc3VhbFZpZXdwb3J0Py5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlY2FsY3VsYXRlKVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVjYWxjdWxhdGUpXG4gICAgfVxuICB9LCBbcmVjYWxjdWxhdGVdKVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGlzRGV2aWNlS2V5Ym9hcmRPcGVuLFxuICAgIGJldHdlZW46IChmcm9tOiBCcmVha3BvaW50LCB0bz86IEJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmICghdG8pIHJldHVybiB3aWR0aCA+PSB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbZnJvbV1cbiAgICAgIHJldHVybiB3aWR0aCA+PSB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbZnJvbV0gJiYgd2lkdGggPCB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbdG9dXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgeyB1c2VEZXZpY2VTaXplIH1cbiJdLCJuYW1lcyI6WyJ1c2VEZXZpY2VTaXplIiwiZ2V0V2lkdGgiLCJ3aW5kb3ciLCJoYXNTY3JvbGxiYXIiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnQiLCJib2R5IiwiY2xpZW50V2lkdGgiLCJ2aXN1YWxWaWV3cG9ydCIsIndpZHRoIiwiZ2V0SGVpZ2h0IiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtaW5LZXlib2FyZEhlaWdodCIsImlzUG9ydHJhaXQiLCJzY3JlZW4iLCJvcmllbnRhdGlvbiIsInR5cGUiLCJzZXRXaWR0aCIsInVzZVN0YXRlIiwic2V0SGVpZ2h0IiwiaXNEZXZpY2VLZXlib2FyZE9wZW4iLCJzZXRJc0RldmljZUtleWJvYXJkT3BlbiIsInRoZW1lIiwidXNlVGhlbWUiLCJyZWNhbGN1bGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJiZXR3ZWVuIiwiZnJvbSIsInRvIiwiYnJlYWtwb2ludHMiLCJ2YWx1ZXMiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJtYXBwaW5ncyI6Ijs7OzsrQkE0RFNB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