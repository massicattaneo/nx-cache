9aaf3ad42ffa90aeb92940bd6d1085d6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "usePersistedChat", {
    enumerable: true,
    get: function() {
        return usePersistedChat;
    }
});
const _react = require("react");
const _adapters = require("@rp/adapters");
const _utils = require("@rp/common/utils");
const _customerio = require("@rp/react/common/customer-io");
const _chat = require("@rp/react/tanstack-api/chat");
const _reactquery = require("@tanstack/react-query");
const _getChatSummaryResponse = require("./getChatSummaryResponse");
const _getStatusMessage = require("./getStatusMessage");
const _getTrackingMessage = require("./getTrackingMessage");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 1000;
const WARN_TIMEOUT = 30000;
const ERROR_TIMEOUT = 60000;
const CREATE_ACTION = "ChatWithMemoryRequest";
const EDIT_ACTION = "ChatWithMemoryUpdateLastRequest";
var _getApiEnvironmentConfig_url;
const WEB_SOCKET_URL = (_getApiEnvironmentConfig_url = (0, _utils.getApiEnvironmentConfig)("web-socket").url) !== null && _getApiEnvironmentConfig_url !== void 0 ? _getApiEnvironmentConfig_url : "";
const getErrorMessage = (type)=>{
    switch(type){
        case "WARNING":
            return {
                message: "We are currently suffering from slowness, but we are working hard to get all the data you need.",
                type: "WARNING"
            };
        case "ERROR":
            return {
                message: "We experienced an internal timeout due to high data volume and are working to enhance your experience. Apologies for the inconvenience.",
                type: "ERROR"
            };
        default:
            return {
                message: "",
                type: "NONE"
            };
    }
};
const usePersistedChat = ({ chatId, inputMessage, displayedMessage, edit, onStatusChange, onComplete, enabled = true, stopped = false, onStop, onError, scope, documentScope, watchlistId, chatMetrics, useMasterRouter, interactionType, webSocketUrl, enableTracking = false, entities, workflow, nativeDeviceAnalytics = undefined })=>{
    const websocket = (0, _react.useRef)(undefined);
    const [summary, setSummary] = (0, _react.useState)({
        response: "",
        timings: {},
        auditTraces: [],
        originSources: [],
        responseBlocks: [],
        interactionType,
        statusData: {
            step: "initial",
            queries: []
        },
        auditBlocks: []
    });
    const prevSummary = (0, _react.useRef)(summary);
    const [status, setStatus] = (0, _react.useState)("IDLE");
    const [error, setError] = (0, _react.useState)(getErrorMessage("NONE"));
    const [retryAttempts, setRetryAttempts] = (0, _react.useState)(0);
    const onCompleteCallbackExecuted = (0, _react.useRef)(false);
    const queryClient = (0, _reactquery.useQueryClient)();
    const awsWsWarnTimeout = (0, _react.useRef)(undefined);
    const awsWsErrorTimeout = (0, _react.useRef)(undefined);
    const setErrorStatus = ({ wsEvent, error })=>{
        _customerio.chatCustomerIo.summaryError({
            chatId,
            interactionTimestamp: summary.interactionTimestamp,
            response: (0, _getChatSummaryResponse.getChatSummaryResponse)({
                summary
            }),
            inputMessage
        });
        setStatus("ERROR");
        setError((prev)=>error !== null && error !== void 0 ? error : prev);
        onError === null || onError === void 0 ? void 0 : onError(summary, error, wsEvent);
        if (!error || error.type === "ERROR") disposeWebsocket();
    };
    const disposeWebsocket = (0, _react.useCallback)(()=>{
        if (websocket.current) {
            websocket.current.close();
            websocket.current = undefined;
            clearTimeout(awsWsWarnTimeout.current);
            clearTimeout(awsWsErrorTimeout.current);
        }
    }, []);
    (0, _react.useEffect)(()=>{
        onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange(status);
        return ()=>onStatusChange === null || onStatusChange === void 0 ? void 0 : onStatusChange("IDLE");
    }, [
        onStatusChange,
        status
    ]);
    (0, _react.useEffect)(()=>{
        if (status === "COMPLETED" && summary.interactionTimestamp !== undefined && enabled && !onCompleteCallbackExecuted.current) {
            onComplete === null || onComplete === void 0 ? void 0 : onComplete(summary.interactionTimestamp, summary);
            if (!enableTracking) {
                _customerio.chatCustomerIo.summaryCompleted({
                    chatId,
                    interactionTimestamp: summary.interactionTimestamp,
                    response: (0, _getChatSummaryResponse.getChatSummaryResponse)({
                        summary,
                        engineResponse: "answer"
                    }),
                    inputMessage
                });
            }
            onCompleteCallbackExecuted.current = true;
        }
    }, [
        enabled,
        onComplete,
        status,
        summary,
        inputMessage,
        chatId,
        enableTracking
    ]);
    (0, _react.useEffect)(()=>{
        if (stopped && enabled) {
            _customerio.chatCustomerIo.inputStopClick();
            setStatus("STOPPED");
            onStop === null || onStop === void 0 ? void 0 : onStop(summary);
            disposeWebsocket();
        }
    }, [
        disposeWebsocket,
        onStop,
        stopped,
        summary,
        enabled
    ]);
    const setupSocket = async ()=>{
        if (!enabled || websocket.current) {
            return disposeWebsocket();
        }
        const token = await _adapters.adapters.api.getClerkToken();
        if (token) {
            setSummary((prev)=>{
                prevSummary.current = prev;
                return {
                    response: "",
                    timings: {
                        start: Date.now()
                    },
                    auditTraces: [],
                    originSources: [],
                    responseBlocks: [],
                    statusData: {
                        step: "initial",
                        queries: []
                    },
                    interactionType,
                    auditBlocks: []
                };
            });
            setStatus("WAITING");
            const newWebsocket = new WebSocket(`${webSocketUrl !== null && webSocketUrl !== void 0 ? webSocketUrl : WEB_SOCKET_URL}?jwt_token=${token}`);
            websocket.current = newWebsocket;
            newWebsocket.onopen = ()=>{
                var _workflow_selectedData_selectedTimeframe, _workflow_selectedData, _workflow_selectedData_selectedTimeframe1, _workflow_selectedData1, _workflow_originWorkflow, _workflow_selectedData2, _workflow_selectedData3, _workflow_selectedData_customInstructions, _workflow_selectedData4, _workflow_selectedData5;
                if (newWebsocket !== websocket.current) {
                    newWebsocket.close();
                    return;
                }
                clearTimeout(awsWsWarnTimeout.current);
                clearTimeout(awsWsErrorTimeout.current);
                awsWsWarnTimeout.current = setTimeout(()=>{
                    setErrorStatus({
                        error: getErrorMessage("WARNING")
                    });
                }, WARN_TIMEOUT);
                awsWsErrorTimeout.current = setTimeout(()=>{
                    setErrorStatus({
                        error: getErrorMessage("ERROR")
                    });
                }, ERROR_TIMEOUT);
                setStatus("NOT_READY");
                newWebsocket.send(JSON.stringify(_object_spread(_object_spread_props(_object_spread({
                    requestId: `${Date.now()}`,
                    action: edit ? EDIT_ACTION : CREATE_ACTION,
                    chatId,
                    inputMessage,
                    scope,
                    scopeDocuments: documentScope,
                    scopeWatchlistId: watchlistId,
                    entities
                }, (workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData = workflow.selectedData) === null || _workflow_selectedData === void 0 ? void 0 : (_workflow_selectedData_selectedTimeframe = _workflow_selectedData.selectedTimeframe) === null || _workflow_selectedData_selectedTimeframe === void 0 ? void 0 : _workflow_selectedData_selectedTimeframe.start) && (workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData1 = workflow.selectedData) === null || _workflow_selectedData1 === void 0 ? void 0 : (_workflow_selectedData_selectedTimeframe1 = _workflow_selectedData1.selectedTimeframe) === null || _workflow_selectedData_selectedTimeframe1 === void 0 ? void 0 : _workflow_selectedData_selectedTimeframe1.end) ? {
                    time_range: {
                        start_time: workflow.selectedData.selectedTimeframe.start,
                        end_time: workflow.selectedData.selectedTimeframe.end
                    }
                } : {}), {
                    flow_type: workflow === null || workflow === void 0 ? void 0 : (_workflow_originWorkflow = workflow.originWorkflow) === null || _workflow_originWorkflow === void 0 ? void 0 : _workflow_originWorkflow.type,
                    interactionType,
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    tracking: enableTracking ? (0, _getTrackingMessage.getTrackingMessage)(nativeDeviceAnalytics) : undefined,
                    displayedMessage,
                    sectors: (workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData2 = workflow.selectedData) === null || _workflow_selectedData2 === void 0 ? void 0 : _workflow_selectedData2.selectedSector) ? [
                        workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData3 = workflow.selectedData) === null || _workflow_selectedData3 === void 0 ? void 0 : _workflow_selectedData3.selectedSector
                    ] : undefined,
                    customInstructions: (workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData4 = workflow.selectedData) === null || _workflow_selectedData4 === void 0 ? void 0 : (_workflow_selectedData_customInstructions = _workflow_selectedData4.customInstructions) === null || _workflow_selectedData_customInstructions === void 0 ? void 0 : _workflow_selectedData_customInstructions.length) ? workflow === null || workflow === void 0 ? void 0 : (_workflow_selectedData5 = workflow.selectedData) === null || _workflow_selectedData5 === void 0 ? void 0 : _workflow_selectedData5.customInstructions : undefined
                }), chatMetrics ? {
                    debug: true
                } : {}, useMasterRouter ? {
                    useMasterRouter: true
                } : {})));
                onCompleteCallbackExecuted.current = false;
            };
            newWebsocket.onmessage = async (event)=>{
                if (newWebsocket !== websocket.current) {
                    newWebsocket.close();
                    return;
                }
                const data = JSON.parse(event.data);
                if (data.type !== undefined) {
                    clearTimeout(awsWsWarnTimeout.current);
                    clearTimeout(awsWsErrorTimeout.current);
                }
                switch(data.type){
                    case "SOURCES":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                originSources: [
                                    ...prevSummary.originSources,
                                    ...data.originSources
                                ],
                                metadata: _object_spread({}, prevSummary.metadata, data.metadata),
                                timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                    sources: Date.now()
                                })
                            }));
                        break;
                    case "AUDIT_TRACE":
                        setSummary((prevSummary)=>{
                            var _prevSummary_timings_audit;
                            return _object_spread_props(_object_spread({}, prevSummary), {
                                auditTraces: [
                                    ...prevSummary.auditTraces,
                                    data.trace
                                ],
                                timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                    audit: (_prevSummary_timings_audit = prevSummary.timings.audit) !== null && _prevSummary_timings_audit !== void 0 ? _prevSummary_timings_audit : Date.now()
                                })
                            });
                        });
                        break;
                    case "NEXT":
                        setStatus((prev)=>prev === "ERROR" ? "NOT_READY" : prev);
                        if (data.block) {
                            const currentBlock = data.block;
                            switch(currentBlock.type){
                                case "NEXT_ID":
                                    setSummary((prevSummary)=>{
                                        const newResponseBlocks = [
                                            ...prevSummary.responseBlocks
                                        ];
                                        const stateBlockIndex = newResponseBlocks.findIndex((block)=>block.type === "NEXT_ID" && block.id === currentBlock.id);
                                        if (stateBlockIndex === -1) {
                                            newResponseBlocks.push(currentBlock);
                                        } else {
                                            const stateBlock = _object_spread({}, newResponseBlocks[stateBlockIndex]);
                                            if (stateBlock.type === "NEXT_ID") {
                                                var _currentBlock_content_value;
                                                stateBlock.content = _object_spread_props(_object_spread({}, stateBlock.content), {
                                                    value: stateBlock.content.value += (_currentBlock_content_value = currentBlock.content.value) !== null && _currentBlock_content_value !== void 0 ? _currentBlock_content_value : ""
                                                });
                                                newResponseBlocks[stateBlockIndex] = stateBlock;
                                            }
                                        }
                                        var _prevSummary_timings_firstToken;
                                        return _object_spread_props(_object_spread({}, prevSummary), {
                                            responseBlocks: newResponseBlocks,
                                            statusData: prevSummary.statusData.step !== "completed" ? _object_spread_props(_object_spread({}, prevSummary.statusData), {
                                                step: "completed",
                                                message: "Analysis Complete"
                                            }) : prevSummary.statusData,
                                            timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                                firstToken: (_prevSummary_timings_firstToken = prevSummary.timings.firstToken) !== null && _prevSummary_timings_firstToken !== void 0 ? _prevSummary_timings_firstToken : Date.now()
                                            })
                                        });
                                    });
                                    break;
                                case "ENGINE":
                                    (0, _chat.enrichEngineCharWidgetSpec)(queryClient, {
                                        interactionTimestamp: "",
                                        inputMessage: "",
                                        responseBlock: currentBlock,
                                        originSources: [],
                                        dateCreated: "",
                                        lastUpdated: "",
                                        origin: {
                                            type: "empty_message"
                                        },
                                        responseBlocks: [],
                                        auditBlocks: []
                                    }).then((res)=>{
                                        setSummary((prevSummary)=>{
                                            const newResponseBlocks = [
                                                ...prevSummary.responseBlocks
                                            ];
                                            newResponseBlocks.push(res.responseBlock);
                                            return _object_spread_props(_object_spread({}, prevSummary), {
                                                responseBlock: res.responseBlock.type === "ENGINE" ? res.responseBlock : prevSummary.responseBlock,
                                                responseBlocks: newResponseBlocks,
                                                statusData: prevSummary.statusData.step !== "completed" ? _object_spread_props(_object_spread({}, prevSummary.statusData), {
                                                    step: "completed",
                                                    message: "Analysis Complete"
                                                }) : prevSummary.statusData
                                            });
                                        });
                                    });
                            }
                        } else if (data.content.length > 0) {
                            setSummary((prevSummary)=>{
                                const newResponseBlocks = prevSummary.responseBlocks[0] && prevSummary.responseBlocks[0].type === "TEXT" ? [
                                    _object_spread_props(_object_spread({}, prevSummary.responseBlocks[0]), {
                                        value: prevSummary.responseBlocks[0].value + data.content
                                    })
                                ] : [
                                    {
                                        type: "TEXT",
                                        value: data.content
                                    },
                                    ...prevSummary.responseBlocks
                                ];
                                var _prevSummary_timings_firstToken;
                                return _object_spread_props(_object_spread({}, prevSummary), {
                                    response: prevSummary.response + data.content,
                                    responseBlocks: newResponseBlocks,
                                    statusData: prevSummary.statusData.step !== "completed" ? _object_spread_props(_object_spread({}, prevSummary.statusData), {
                                        step: "completed",
                                        message: "Analysis Complete"
                                    }) : prevSummary.statusData,
                                    timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                        firstToken: (_prevSummary_timings_firstToken = prevSummary.timings.firstToken) !== null && _prevSummary_timings_firstToken !== void 0 ? _prevSummary_timings_firstToken : Date.now()
                                    })
                                });
                            });
                        }
                        break;
                    case "PROFILING":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                profiling: data
                            }));
                        break;
                    case "STATUS":
                    case "STATUS_CONCLUDING":
                    case "STATUS_QUERY":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                statusData: (0, _getStatusMessage.getStatusData)(prevSummary.statusData, data)
                            }));
                        break;
                    case "STATUS_COLLAPSE":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                auditBlocks: [
                                    ...prevSummary.auditBlocks,
                                    {
                                        type: "COLLAPSE",
                                        content: data.content,
                                        title: data.title
                                    }
                                ],
                                statusData: (0, _getStatusMessage.getStatusData)(prevSummary.statusData, data)
                            }));
                        break;
                    case "STATUS_RESET":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                originSources: [],
                                statusData: (0, _getStatusMessage.getStatusData)(prevSummary.statusData, data)
                            }));
                        break;
                    case "FOLLOW_UP":
                        setSummary((prevSummary)=>_object_spread_props(_object_spread({}, prevSummary), {
                                followUpQuestions: data.followUp.queries
                            }));
                        break;
                    case "COMPLETE":
                        setStatus("COMPLETED");
                        setRetryAttempts(0);
                        if (data.contentBlock && data.contentBlock.type === "ENGINE") {
                            const res = await (0, _chat.enrichEngineCharWidgetSpec)(queryClient, {
                                interactionTimestamp: "",
                                inputMessage: "",
                                responseBlock: data.contentBlock,
                                originSources: [],
                                dateCreated: "",
                                lastUpdated: "",
                                origin: {
                                    type: "empty_message"
                                },
                                responseBlocks: [],
                                auditBlocks: []
                            });
                            const responseBlock = res.responseBlock.type === "ENGINE" ? res.responseBlock : undefined;
                            setSummary((prevSummary)=>{
                                const finalData = _object_spread_props(_object_spread({}, prevSummary), {
                                    interactionTimestamp: data.interactionTimestamp,
                                    timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                        completed: Date.now()
                                    }),
                                    responseBlock: responseBlock !== null && responseBlock !== void 0 ? responseBlock : prevSummary.responseBlock,
                                    responseBlocks: responseBlock ? [
                                        responseBlock
                                    ] : prevSummary.responseBlocks
                                });
                                return finalData;
                            });
                        } else {
                            setSummary((prevSummary)=>{
                                const finalData = _object_spread_props(_object_spread({}, prevSummary), {
                                    responseBlocks: data.contentBlock ? [
                                        data.contentBlock
                                    ] : prevSummary.responseBlocks,
                                    interactionTimestamp: data.interactionTimestamp,
                                    timings: _object_spread_props(_object_spread({}, prevSummary.timings), {
                                        completed: Date.now()
                                    })
                                });
                                return finalData;
                            });
                        }
                        newWebsocket.close();
                        websocket.current = undefined;
                        break;
                    case "FAILED":
                    case "NO_CONTENT":
                        setErrorStatus({
                            error: getErrorMessage("ERROR")
                        });
                        break;
                }
            };
            newWebsocket.onerror = (error)=>{
                newWebsocket.close();
                websocket.current = undefined;
                if (status === "STOPPED") return;
                if (retryAttempts < MAX_RETRY_ATTEMPTS) {
                    setTimeout(()=>setRetryAttempts((prev)=>prev + 1), RETRY_DELAY);
                } else {
                    setErrorStatus({
                        wsEvent: error,
                        error: getErrorMessage("ERROR")
                    });
                }
            };
        }
    };
    (0, _react.useEffect)(()=>{
        setupSocket();
        return ()=>disposeWebsocket();
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        enabled,
        retryAttempts,
        chatId,
        inputMessage,
        disposeWebsocket
    ]);
    return {
        summary,
        status,
        isIdle: status === "IDLE",
        isConnecting: status === "WAITING",
        isLoading: status === "WAITING" || status === "NOT_READY",
        isError: status === "ERROR",
        error
    };
};

//# sourceMappingURL=data:application/json;base64,