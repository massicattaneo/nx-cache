{"version":3,"sources":["/Users/mcattaneo/workspace/frontend/libs/react/common/hooks/src/lib/useChat/usePersistedChat.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\"\nimport { adapters } from \"@rp/adapters\"\nimport { ChatWatchlistEntity, DatasetScope } from \"@rp/common/api-types\"\nimport { getApiEnvironmentConfig } from \"@rp/common/utils\"\nimport { chatCustomerIo } from \"@rp/react/common/customer-io\"\nimport { WorkflowState } from \"@rp/react/common/workflow\"\nimport {\n  ChatFile,\n  ChatInteractionType,\n  enrichEngineCharWidgetSpec,\n} from \"@rp/react/tanstack-api/chat\"\nimport { LlmMessage } from \"@rp/react/tanstack-api/llm-summary\"\nimport { useQueryClient } from \"@tanstack/react-query\"\nimport { getChatSummaryResponse } from \"./getChatSummaryResponse\"\nimport { getStatusData } from \"./getStatusMessage\"\nimport { NativeDeviceAnalytics, getTrackingMessage } from \"./getTrackingMessage\"\nimport { LlmSummaryError, SummaryState, SummaryStatus } from \"./useChat.types\"\n\nconst MAX_RETRY_ATTEMPTS = 3\nconst RETRY_DELAY = 1_000\nconst WARN_TIMEOUT = 30_000\nconst ERROR_TIMEOUT = 60_000\n\nconst CREATE_ACTION = \"ChatWithMemoryRequest\"\nconst EDIT_ACTION = \"ChatWithMemoryUpdateLastRequest\"\nconst WEB_SOCKET_URL = getApiEnvironmentConfig(\"web-socket\").url ?? \"\"\n\ntype Props = {\n  chatId: string\n  inputMessage: string\n  displayedMessage?: string\n  edit?: boolean\n  enabled?: boolean\n  stopped?: boolean\n  onStatusChange?: (status: SummaryStatus) => void\n  onComplete?: (interactionId: string, data: SummaryState) => void\n  onStop?: (data: SummaryState) => void\n  onError?: (data: SummaryState, error: LlmSummaryError, wsError?: Event) => void\n  // These two can't be set at the same time\n  scope?: DatasetScope\n  documentScope?: Array<ChatFile>\n  watchlistId?: string\n  entities?: Array<ChatWatchlistEntity>\n  chatMetrics?: boolean\n  useMasterRouter?: boolean\n  interactionType: ChatInteractionType\n  webSocketUrl?: string\n  enableTracking?: boolean\n  workflow?: WorkflowState\n  nativeDeviceAnalytics?: NativeDeviceAnalytics\n}\n\nconst getErrorMessage = (type: LlmSummaryError[\"type\"]) => {\n  switch (type) {\n    case \"WARNING\":\n      return {\n        message:\n          \"We are currently suffering from slowness, but we are working hard to get all the data you need.\",\n        type: \"WARNING\" as const,\n      }\n    case \"ERROR\":\n      return {\n        message:\n          \"We experienced an internal timeout due to high data volume and are working to enhance your experience. Apologies for the inconvenience.\",\n        type: \"ERROR\" as const,\n      }\n    default:\n      return {\n        message: \"\",\n        type: \"NONE\" as const,\n      }\n  }\n}\n\nconst usePersistedChat = ({\n  chatId,\n  inputMessage,\n  displayedMessage,\n  edit,\n  onStatusChange,\n  onComplete,\n  enabled = true,\n  stopped = false,\n  onStop,\n  onError,\n  scope,\n  documentScope,\n  watchlistId,\n  chatMetrics,\n  useMasterRouter,\n  interactionType,\n  webSocketUrl,\n  enableTracking = false,\n  entities,\n  workflow,\n  nativeDeviceAnalytics = undefined,\n}: Props) => {\n  const websocket = useRef<WebSocket>(undefined)\n  const [summary, setSummary] = useState<SummaryState>({\n    response: \"\",\n    timings: {},\n    auditTraces: [],\n    originSources: [],\n    responseBlocks: [],\n    interactionType,\n    statusData: { step: \"initial\", queries: [] },\n    auditBlocks: [],\n  })\n\n  const prevSummary = useRef<SummaryState>(summary)\n  const [status, setStatus] = useState<SummaryStatus>(\"IDLE\")\n  const [error, setError] = useState<LlmSummaryError>(getErrorMessage(\"NONE\"))\n  const [retryAttempts, setRetryAttempts] = useState(0)\n  const onCompleteCallbackExecuted = useRef(false)\n  const queryClient = useQueryClient()\n  const awsWsWarnTimeout = useRef<ReturnType<typeof setTimeout>>(undefined)\n  const awsWsErrorTimeout = useRef<ReturnType<typeof setTimeout>>(undefined)\n\n  const setErrorStatus = ({ wsEvent, error }: { wsEvent?: Event; error: LlmSummaryError }) => {\n    chatCustomerIo.summaryError({\n      chatId,\n      interactionTimestamp: summary.interactionTimestamp,\n      response: getChatSummaryResponse({ summary }),\n      inputMessage,\n    })\n    setStatus(\"ERROR\")\n    setError(prev => error ?? prev)\n    onError?.(summary, error, wsEvent)\n    if (!error || error.type === \"ERROR\") disposeWebsocket()\n  }\n\n  const disposeWebsocket = useCallback(() => {\n    if (websocket.current) {\n      websocket.current.close()\n      websocket.current = undefined\n      clearTimeout(awsWsWarnTimeout.current)\n      clearTimeout(awsWsErrorTimeout.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    onStatusChange?.(status)\n    return () => onStatusChange?.(\"IDLE\")\n  }, [onStatusChange, status])\n\n  useEffect(() => {\n    if (\n      status === \"COMPLETED\" &&\n      summary.interactionTimestamp !== undefined &&\n      enabled &&\n      !onCompleteCallbackExecuted.current\n    ) {\n      onComplete?.(summary.interactionTimestamp, summary)\n      if (!enableTracking) {\n        chatCustomerIo.summaryCompleted({\n          chatId,\n          interactionTimestamp: summary.interactionTimestamp,\n          response: getChatSummaryResponse({ summary, engineResponse: \"answer\" }),\n          inputMessage,\n        })\n      }\n      onCompleteCallbackExecuted.current = true\n    }\n  }, [enabled, onComplete, status, summary, inputMessage, chatId, enableTracking])\n\n  useEffect(() => {\n    if (stopped && enabled) {\n      chatCustomerIo.inputStopClick()\n      setStatus(\"STOPPED\")\n      onStop?.(summary)\n      disposeWebsocket()\n    }\n  }, [disposeWebsocket, onStop, stopped, summary, enabled])\n\n  const setupSocket = async () => {\n    if (!enabled || websocket.current) {\n      return disposeWebsocket()\n    }\n\n    const token = await adapters.api.getClerkToken()\n\n    if (token) {\n      setSummary(prev => {\n        prevSummary.current = prev\n        return {\n          response: \"\",\n          timings: {\n            start: Date.now(),\n          },\n          auditTraces: [],\n          originSources: [],\n          responseBlocks: [],\n          statusData: { step: \"initial\", queries: [] },\n          interactionType,\n          auditBlocks: [],\n        }\n      })\n      setStatus(\"WAITING\")\n\n      const newWebsocket = new WebSocket(`${webSocketUrl ?? WEB_SOCKET_URL}?jwt_token=${token}`)\n      websocket.current = newWebsocket\n\n      newWebsocket.onopen = () => {\n        if (newWebsocket !== websocket.current) {\n          newWebsocket.close()\n          return\n        }\n        clearTimeout(awsWsWarnTimeout.current)\n        clearTimeout(awsWsErrorTimeout.current)\n        awsWsWarnTimeout.current = setTimeout(() => {\n          setErrorStatus({ error: getErrorMessage(\"WARNING\") })\n        }, WARN_TIMEOUT)\n        awsWsErrorTimeout.current = setTimeout(() => {\n          setErrorStatus({ error: getErrorMessage(\"ERROR\") })\n        }, ERROR_TIMEOUT)\n\n        setStatus(\"NOT_READY\")\n        newWebsocket.send(\n          JSON.stringify({\n            requestId: `${Date.now()}`,\n            action: edit ? EDIT_ACTION : CREATE_ACTION,\n            chatId,\n            inputMessage,\n            scope,\n            scopeDocuments: documentScope,\n            scopeWatchlistId: watchlistId,\n            entities,\n            ...(workflow?.selectedData?.selectedTimeframe?.start &&\n            workflow?.selectedData?.selectedTimeframe?.end\n              ? {\n                  time_range: {\n                    start_time: workflow.selectedData.selectedTimeframe.start,\n                    end_time: workflow.selectedData.selectedTimeframe.end,\n                  },\n                }\n              : {}),\n            flow_type: workflow?.originWorkflow?.type,\n            interactionType,\n            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n            tracking: enableTracking ? getTrackingMessage(nativeDeviceAnalytics) : undefined,\n            displayedMessage,\n            sectors: workflow?.selectedData?.selectedSector\n              ? [workflow?.selectedData?.selectedSector]\n              : undefined,\n            customInstructions: workflow?.selectedData?.customInstructions?.length\n              ? workflow?.selectedData?.customInstructions\n              : undefined,\n            ...(chatMetrics ? { debug: true } : {}),\n            ...(useMasterRouter ? { useMasterRouter: true } : {}),\n          }),\n        )\n        onCompleteCallbackExecuted.current = false\n      }\n\n      newWebsocket.onmessage = async event => {\n        if (newWebsocket !== websocket.current) {\n          newWebsocket.close()\n          return\n        }\n        const data: LlmMessage = JSON.parse(event.data)\n        if (data.type !== undefined) {\n          clearTimeout(awsWsWarnTimeout.current)\n          clearTimeout(awsWsErrorTimeout.current)\n        }\n        switch (data.type) {\n          case \"SOURCES\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              originSources: [...prevSummary.originSources, ...data.originSources],\n              metadata: { ...prevSummary.metadata, ...data.metadata },\n              timings: { ...prevSummary.timings, sources: Date.now() },\n            }))\n            break\n          case \"AUDIT_TRACE\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              auditTraces: [...prevSummary.auditTraces, data.trace],\n              timings: {\n                ...prevSummary.timings,\n                audit: prevSummary.timings.audit ?? Date.now(),\n              },\n            }))\n            break\n          case \"NEXT\":\n            setStatus(prev => (prev === \"ERROR\" ? \"NOT_READY\" : prev))\n            if (data.block) {\n              const currentBlock = data.block\n              switch (currentBlock.type) {\n                case \"NEXT_ID\":\n                  setSummary(prevSummary => {\n                    const newResponseBlocks = [...prevSummary.responseBlocks]\n                    const stateBlockIndex = newResponseBlocks.findIndex(\n                      block => block.type === \"NEXT_ID\" && block.id === currentBlock.id,\n                    )\n                    if (stateBlockIndex === -1) {\n                      newResponseBlocks.push(currentBlock)\n                    } else {\n                      const stateBlock = { ...newResponseBlocks[stateBlockIndex] }\n                      if (stateBlock.type === \"NEXT_ID\") {\n                        stateBlock.content = {\n                          ...stateBlock.content,\n                          value: (stateBlock.content.value += currentBlock.content.value ?? \"\"),\n                        }\n                        newResponseBlocks[stateBlockIndex] = stateBlock\n                      }\n                    }\n\n                    return {\n                      ...prevSummary,\n                      responseBlocks: newResponseBlocks,\n                      statusData:\n                        prevSummary.statusData.step !== \"completed\"\n                          ? ({\n                              ...prevSummary.statusData,\n                              step: \"completed\",\n                              message: \"Analysis Complete\",\n                            } as const)\n                          : prevSummary.statusData,\n                      timings: {\n                        ...prevSummary.timings,\n                        firstToken: prevSummary.timings.firstToken ?? Date.now(),\n                      },\n                    }\n                  })\n                  break\n                case \"ENGINE\":\n                  enrichEngineCharWidgetSpec(queryClient, {\n                    interactionTimestamp: \"\",\n                    inputMessage: \"\",\n                    responseBlock: currentBlock,\n                    originSources: [],\n                    dateCreated: \"\",\n                    lastUpdated: \"\",\n                    origin: {\n                      type: \"empty_message\",\n                    },\n                    responseBlocks: [],\n                    auditBlocks: [],\n                  }).then(res => {\n                    setSummary(prevSummary => {\n                      const newResponseBlocks = [...prevSummary.responseBlocks]\n\n                      newResponseBlocks.push(res.responseBlock)\n\n                      return {\n                        ...prevSummary,\n                        responseBlock:\n                          res.responseBlock.type === \"ENGINE\"\n                            ? res.responseBlock\n                            : prevSummary.responseBlock,\n                        responseBlocks: newResponseBlocks,\n                        statusData:\n                          prevSummary.statusData.step !== \"completed\"\n                            ? ({\n                                ...prevSummary.statusData,\n                                step: \"completed\",\n                                message: \"Analysis Complete\",\n                              } as const)\n                            : prevSummary.statusData,\n                      }\n                    })\n                  })\n              }\n            } else if (data.content.length > 0) {\n              setSummary(prevSummary => {\n                const newResponseBlocks =\n                  prevSummary.responseBlocks[0] && prevSummary.responseBlocks[0].type === \"TEXT\"\n                    ? [\n                        {\n                          ...prevSummary.responseBlocks[0],\n                          value: prevSummary.responseBlocks[0].value + data.content,\n                        },\n                      ]\n                    : [\n                        { type: \"TEXT\" as const, value: data.content },\n                        ...prevSummary.responseBlocks,\n                      ]\n\n                return {\n                  ...prevSummary,\n                  response: prevSummary.response + data.content,\n                  responseBlocks: newResponseBlocks,\n                  statusData:\n                    prevSummary.statusData.step !== \"completed\"\n                      ? ({\n                          ...prevSummary.statusData,\n                          step: \"completed\",\n                          message: \"Analysis Complete\",\n                        } as const)\n                      : prevSummary.statusData,\n                  timings: {\n                    ...prevSummary.timings,\n                    firstToken: prevSummary.timings.firstToken ?? Date.now(),\n                  },\n                }\n              })\n            }\n            break\n          case \"PROFILING\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              profiling: data,\n            }))\n            break\n          case \"STATUS\":\n          case \"STATUS_CONCLUDING\":\n          case \"STATUS_QUERY\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              statusData: getStatusData(prevSummary.statusData, data),\n            }))\n            break\n          case \"STATUS_COLLAPSE\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              auditBlocks: [\n                ...prevSummary.auditBlocks,\n                { type: \"COLLAPSE\", content: data.content, title: data.title },\n              ],\n              statusData: getStatusData(prevSummary.statusData, data),\n            }))\n            break\n          case \"STATUS_RESET\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              originSources: [],\n              statusData: getStatusData(prevSummary.statusData, data),\n            }))\n            break\n          case \"FOLLOW_UP\":\n            setSummary(prevSummary => ({\n              ...prevSummary,\n              followUpQuestions: data.followUp.queries,\n            }))\n            break\n          case \"COMPLETE\":\n            setStatus(\"COMPLETED\")\n            setRetryAttempts(0)\n            if (data.contentBlock && data.contentBlock.type === \"ENGINE\") {\n              const res = await enrichEngineCharWidgetSpec(queryClient, {\n                interactionTimestamp: \"\",\n                inputMessage: \"\",\n                responseBlock: data.contentBlock,\n                originSources: [],\n                dateCreated: \"\",\n                lastUpdated: \"\",\n                origin: {\n                  type: \"empty_message\",\n                },\n                responseBlocks: [],\n                auditBlocks: [],\n              })\n\n              const responseBlock =\n                res.responseBlock.type === \"ENGINE\" ? res.responseBlock : undefined\n\n              setSummary(prevSummary => {\n                const finalData = {\n                  ...prevSummary,\n                  interactionTimestamp: data.interactionTimestamp,\n                  timings: { ...prevSummary.timings, completed: Date.now() },\n                  responseBlock: responseBlock ?? prevSummary.responseBlock,\n                  responseBlocks: responseBlock ? [responseBlock] : prevSummary.responseBlocks,\n                }\n                return finalData\n              })\n            } else {\n              setSummary(prevSummary => {\n                const finalData = {\n                  ...prevSummary,\n                  responseBlocks: data.contentBlock\n                    ? [data.contentBlock]\n                    : prevSummary.responseBlocks,\n                  interactionTimestamp: data.interactionTimestamp,\n                  timings: { ...prevSummary.timings, completed: Date.now() },\n                }\n                return finalData\n              })\n            }\n\n            newWebsocket.close()\n            websocket.current = undefined\n            break\n          case \"FAILED\":\n          case \"NO_CONTENT\":\n            setErrorStatus({ error: getErrorMessage(\"ERROR\") })\n            break\n        }\n      }\n\n      newWebsocket.onerror = error => {\n        newWebsocket.close()\n        websocket.current = undefined\n        if (status === \"STOPPED\") return\n        if (retryAttempts < MAX_RETRY_ATTEMPTS) {\n          setTimeout(() => setRetryAttempts(prev => prev + 1), RETRY_DELAY)\n        } else {\n          setErrorStatus({ wsEvent: error, error: getErrorMessage(\"ERROR\") })\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    setupSocket()\n    return () => disposeWebsocket()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enabled, retryAttempts, chatId, inputMessage, disposeWebsocket])\n\n  return {\n    summary,\n    status,\n    isIdle: status === \"IDLE\",\n    isConnecting: status === \"WAITING\",\n    isLoading: status === \"WAITING\" || status === \"NOT_READY\",\n    isError: status === \"ERROR\",\n    error,\n  }\n}\n\nexport { usePersistedChat }\nexport type { SummaryStatus, SummaryState }\n"],"names":["usePersistedChat","MAX_RETRY_ATTEMPTS","RETRY_DELAY","WARN_TIMEOUT","ERROR_TIMEOUT","CREATE_ACTION","EDIT_ACTION","getApiEnvironmentConfig","WEB_SOCKET_URL","url","getErrorMessage","type","message","chatId","inputMessage","displayedMessage","edit","onStatusChange","onComplete","enabled","stopped","onStop","onError","scope","documentScope","watchlistId","chatMetrics","useMasterRouter","interactionType","webSocketUrl","enableTracking","entities","workflow","nativeDeviceAnalytics","undefined","websocket","useRef","summary","setSummary","useState","response","timings","auditTraces","originSources","responseBlocks","statusData","step","queries","auditBlocks","prevSummary","status","setStatus","error","setError","retryAttempts","setRetryAttempts","onCompleteCallbackExecuted","queryClient","useQueryClient","awsWsWarnTimeout","awsWsErrorTimeout","setErrorStatus","wsEvent","chatCustomerIo","summaryError","interactionTimestamp","getChatSummaryResponse","prev","disposeWebsocket","useCallback","current","close","clearTimeout","useEffect","summaryCompleted","engineResponse","inputStopClick","setupSocket","token","adapters","api","getClerkToken","start","Date","now","newWebsocket","WebSocket","onopen","setTimeout","send","JSON","stringify","requestId","action","scopeDocuments","scopeWatchlistId","selectedData","selectedTimeframe","end","time_range","start_time","end_time","flow_type","originWorkflow","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","tracking","getTrackingMessage","sectors","selectedSector","customInstructions","length","debug","onmessage","event","data","parse","metadata","sources","trace","audit","block","currentBlock","newResponseBlocks","stateBlockIndex","findIndex","id","push","stateBlock","content","value","firstToken","enrichEngineCharWidgetSpec","responseBlock","dateCreated","lastUpdated","origin","then","res","profiling","getStatusData","title","followUpQuestions","followUp","contentBlock","finalData","completed","onerror","isIdle","isConnecting","isLoading","isError"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}