857f569fea6b4d2cbf02f4e4609ef2f1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useAddEntities", {
    enumerable: true,
    get: function() {
        return useAddEntities;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _common = require("@rp/react/tanstack-api/common");
const _watchlist = require("@rp/react/tanstack-api/watchlist");
const _core = require("@rp/react/web/mui/core");
const _reactquery = require("@tanstack/react-query");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
var FetchStates;
(function(FetchStates) {
    FetchStates["LOADING"] = "LOADING";
    FetchStates["SUCCESS"] = "SUCCESS";
    FetchStates["ERROR"] = "ERROR";
})(FetchStates || (FetchStates = {}));
const updateQueryStatus = (state, action)=>{
    switch(action.fetchState){
        case "LOADING":
            return {
                isLoading: true,
                error: undefined
            };
        case "SUCCESS":
            return {
                isLoading: false,
                error: undefined
            };
        case "ERROR":
            return {
                isLoading: false,
                error: action.errorMessage
            };
    }
};
const useAddEntities = ({ onSuccess, enqueueSuccess, enqueueError, enqueueInfo })=>{
    const queryClient = (0, _reactquery.useQueryClient)();
    const [queryState, dispatchQueryState] = (0, _react.useReducer)(updateQueryStatus, {
        isLoading: false,
        error: undefined
    });
    const addEntities = (0, _react.useCallback)(async (watchlistId, entities, watchlistName)=>{
        dispatchQueryState({
            fetchState: "LOADING"
        });
        try {
            const { items, name } = await (0, _common.getWatchlistById)(watchlistId);
            const entitiesIds = entities.map(({ key })=>key);
            const newEntityIds = [
                ...new Set([
                    ...items,
                    ...entitiesIds
                ])
            ];
            const entitiesAdded = entities.filter((item)=>!items.includes(item.key));
            const amountAdded = entitiesAdded.length;
            if (amountAdded === 0) {
                enqueueInfo(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                    component: "span",
                    children: [
                        "These items already exist in",
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                            component: "span",
                            fontWeight: "bold",
                            children: ` ${name}`
                        })
                    ]
                }));
                dispatchQueryState({
                    fetchState: "SUCCESS"
                });
                return;
            }
            const data = await (0, _watchlist.patchWatchlist)({
                id: watchlistId,
                items: newEntityIds
            });
            enqueueSuccess(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                component: "span",
                fontWeight: "bold",
                children: [
                    amountAdded >= 5 ? `${amountAdded} items ` : ` ${entitiesAdded.map((entity)=>entity.name).join(", ")} `,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        component: "span",
                        children: "added to"
                    }),
                    ` ${name}`
                ]
            }));
            dispatchQueryState({
                fetchState: "SUCCESS"
            });
            (0, _watchlist.onWatchlistUpdateSuccess)(queryClient)(data);
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);
        } catch (error) {
            dispatchQueryState({
                fetchState: "ERROR",
                errorMessage: String(error)
            });
            enqueueError(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_core.Typography, {
                children: [
                    "Error adding to",
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
                        component: "span",
                        sx: {
                            fontWeight: "bold"
                        },
                        children: watchlistName
                    })
                ]
            }));
        }
    }, [
        enqueueSuccess,
        queryClient,
        onSuccess,
        enqueueInfo,
        enqueueError
    ]);
    return _object_spread({
        addEntities
    }, queryState);
};

//# sourceMappingURL=data:application/json;base64,