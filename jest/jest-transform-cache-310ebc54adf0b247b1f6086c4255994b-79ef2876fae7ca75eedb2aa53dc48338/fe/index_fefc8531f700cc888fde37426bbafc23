87efd8b54425239569d5d5a6aee25c71
/**
 * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
 * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
 */ /**
 * @typedef {import('mdast-util-gfm-table').Options} Options
 *   Configuration.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    gfmFromMarkdown: function() {
        return gfmFromMarkdown;
    },
    gfmToMarkdown: function() {
        return gfmToMarkdown;
    }
});
const _mdastutilgfmautolinkliteral = require("mdast-util-gfm-autolink-literal");
const _mdastutilgfmfootnote = require("mdast-util-gfm-footnote");
const _mdastutilgfmstrikethrough = require("mdast-util-gfm-strikethrough");
const _mdastutilgfmtable = require("mdast-util-gfm-table");
const _mdastutilgfmtasklistitem = require("mdast-util-gfm-task-list-item");
function gfmFromMarkdown() {
    return [
        (0, _mdastutilgfmautolinkliteral.gfmAutolinkLiteralFromMarkdown)(),
        (0, _mdastutilgfmfootnote.gfmFootnoteFromMarkdown)(),
        (0, _mdastutilgfmstrikethrough.gfmStrikethroughFromMarkdown)(),
        (0, _mdastutilgfmtable.gfmTableFromMarkdown)(),
        (0, _mdastutilgfmtasklistitem.gfmTaskListItemFromMarkdown)()
    ];
}
function gfmToMarkdown(options) {
    return {
        extensions: [
            (0, _mdastutilgfmautolinkliteral.gfmAutolinkLiteralToMarkdown)(),
            (0, _mdastutilgfmfootnote.gfmFootnoteToMarkdown)(),
            (0, _mdastutilgfmstrikethrough.gfmStrikethroughToMarkdown)(),
            (0, _mdastutilgfmtable.gfmTableToMarkdown)(options),
            (0, _mdastutilgfmtasklistitem.gfmTaskListItemToMarkdown)()
        ]
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWdmbS9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5FeHRlbnNpb259IEZyb21NYXJrZG93bkV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1tYXJrZG93bicpLk9wdGlvbnN9IFRvTWFya2Rvd25FeHRlbnNpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZ2ZtLXRhYmxlJykuT3B0aW9uc30gT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICovXG5cbmltcG9ydCB7XG4gIGdmbUF1dG9saW5rTGl0ZXJhbEZyb21NYXJrZG93bixcbiAgZ2ZtQXV0b2xpbmtMaXRlcmFsVG9NYXJrZG93blxufSBmcm9tICdtZGFzdC11dGlsLWdmbS1hdXRvbGluay1saXRlcmFsJ1xuaW1wb3J0IHtcbiAgZ2ZtRm9vdG5vdGVGcm9tTWFya2Rvd24sXG4gIGdmbUZvb3Rub3RlVG9NYXJrZG93blxufSBmcm9tICdtZGFzdC11dGlsLWdmbS1mb290bm90ZSdcbmltcG9ydCB7XG4gIGdmbVN0cmlrZXRocm91Z2hGcm9tTWFya2Rvd24sXG4gIGdmbVN0cmlrZXRocm91Z2hUb01hcmtkb3duXG59IGZyb20gJ21kYXN0LXV0aWwtZ2ZtLXN0cmlrZXRocm91Z2gnXG5pbXBvcnQge2dmbVRhYmxlRnJvbU1hcmtkb3duLCBnZm1UYWJsZVRvTWFya2Rvd259IGZyb20gJ21kYXN0LXV0aWwtZ2ZtLXRhYmxlJ1xuaW1wb3J0IHtcbiAgZ2ZtVGFza0xpc3RJdGVtRnJvbU1hcmtkb3duLFxuICBnZm1UYXNrTGlzdEl0ZW1Ub01hcmtkb3duXG59IGZyb20gJ21kYXN0LXV0aWwtZ2ZtLXRhc2stbGlzdC1pdGVtJ1xuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLWZyb20tbWFya2Rvd25gIHRvIGVuYWJsZSBHRk0gKGF1dG9saW5rXG4gKiBsaXRlcmFscywgZm9vdG5vdGVzLCBzdHJpa2V0aHJvdWdoLCB0YWJsZXMsIHRhc2tsaXN0cykuXG4gKlxuICogQHJldHVybnMge0FycmF5PEZyb21NYXJrZG93bkV4dGVuc2lvbj59XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAgdG8gZW5hYmxlIEdGTSAoYXV0b2xpbmsgbGl0ZXJhbHMsXG4gKiAgIGZvb3Rub3Rlcywgc3RyaWtldGhyb3VnaCwgdGFibGVzLCB0YXNrbGlzdHMpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2ZtRnJvbU1hcmtkb3duKCkge1xuICByZXR1cm4gW1xuICAgIGdmbUF1dG9saW5rTGl0ZXJhbEZyb21NYXJrZG93bigpLFxuICAgIGdmbUZvb3Rub3RlRnJvbU1hcmtkb3duKCksXG4gICAgZ2ZtU3RyaWtldGhyb3VnaEZyb21NYXJrZG93bigpLFxuICAgIGdmbVRhYmxlRnJvbU1hcmtkb3duKCksXG4gICAgZ2ZtVGFza0xpc3RJdGVtRnJvbU1hcmtkb3duKClcbiAgXVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLXRvLW1hcmtkb3duYCB0byBlbmFibGUgR0ZNIChhdXRvbGlua1xuICogbGl0ZXJhbHMsIGZvb3Rub3Rlcywgc3RyaWtldGhyb3VnaCwgdGFibGVzLCB0YXNrbGlzdHMpLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge1RvTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gIHRvIGVuYWJsZSBHRk0gKGF1dG9saW5rIGxpdGVyYWxzLFxuICogICBmb290bm90ZXMsIHN0cmlrZXRocm91Z2gsIHRhYmxlcywgdGFza2xpc3RzKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdmbVRvTWFya2Rvd24ob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGV4dGVuc2lvbnM6IFtcbiAgICAgIGdmbUF1dG9saW5rTGl0ZXJhbFRvTWFya2Rvd24oKSxcbiAgICAgIGdmbUZvb3Rub3RlVG9NYXJrZG93bigpLFxuICAgICAgZ2ZtU3RyaWtldGhyb3VnaFRvTWFya2Rvd24oKSxcbiAgICAgIGdmbVRhYmxlVG9NYXJrZG93bihvcHRpb25zKSxcbiAgICAgIGdmbVRhc2tMaXN0SXRlbVRvTWFya2Rvd24oKVxuICAgIF1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImdmbUZyb21NYXJrZG93biIsImdmbVRvTWFya2Rvd24iLCJnZm1BdXRvbGlua0xpdGVyYWxGcm9tTWFya2Rvd24iLCJnZm1Gb290bm90ZUZyb21NYXJrZG93biIsImdmbVN0cmlrZXRocm91Z2hGcm9tTWFya2Rvd24iLCJnZm1UYWJsZUZyb21NYXJrZG93biIsImdmbVRhc2tMaXN0SXRlbUZyb21NYXJrZG93biIsIm9wdGlvbnMiLCJleHRlbnNpb25zIiwiZ2ZtQXV0b2xpbmtMaXRlcmFsVG9NYXJrZG93biIsImdmbUZvb3Rub3RlVG9NYXJrZG93biIsImdmbVN0cmlrZXRocm91Z2hUb01hcmtkb3duIiwiZ2ZtVGFibGVUb01hcmtkb3duIiwiZ2ZtVGFza0xpc3RJdGVtVG9NYXJrZG93biJdLCJyYW5nZU1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQyxHQUVEOzs7Q0FHQzs7Ozs7Ozs7Ozs7SUE0QmVBLGVBQWU7ZUFBZkE7O0lBb0JBQyxhQUFhO2VBQWJBOzs7NkNBM0NUO3NDQUlBOzJDQUlBO21DQUNnRDswQ0FJaEQ7QUFVQSxTQUFTRDtJQUNkLE9BQU87UUFDTEUsSUFBQUEsMkRBQThCO1FBQzlCQyxJQUFBQSw2Q0FBdUI7UUFDdkJDLElBQUFBLHVEQUE0QjtRQUM1QkMsSUFBQUEsdUNBQW9CO1FBQ3BCQyxJQUFBQSxxREFBMkI7S0FDNUI7QUFDSDtBQVlPLFNBQVNMLGNBQWNNLE9BQU87SUFDbkMsT0FBTztRQUNMQyxZQUFZO1lBQ1ZDLElBQUFBLHlEQUE0QjtZQUM1QkMsSUFBQUEsMkNBQXFCO1lBQ3JCQyxJQUFBQSxxREFBMEI7WUFDMUJDLElBQUFBLHFDQUFrQixFQUFDTDtZQUNuQk0sSUFBQUEsbURBQXlCO1NBQzFCO0lBQ0g7QUFDRiJ9