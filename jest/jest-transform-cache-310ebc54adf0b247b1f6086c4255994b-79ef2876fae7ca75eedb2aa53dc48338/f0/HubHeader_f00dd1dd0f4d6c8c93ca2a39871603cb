31085297a0759521cd3ef6a059374e24
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "HubHeader", {
    enumerable: true,
    get: function() {
        return HubHeader;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reactrouterdom = require("react-router-dom");
const _settings = require("@rp/common/settings");
const _utils = require("@rp/common/utils");
const _hooks = require("@rp/react/common/hooks");
const _providers = require("@rp/react/common/providers");
const _userdataqueries = require("@rp/react/tanstack-api/user-data-queries");
const _compositecomponents = require("@rp/react/web/common/composite-components");
const _files = require("@rp/react/web/common/files");
const _hooks1 = require("@rp/react/web/common/hooks");
const _layout = require("@rp/react/web/common/layout");
const _providers1 = require("@rp/react/web/common/providers");
const _utils1 = require("@rp/react/web/common/vendors/utils");
const _core = require("@rp/react/web/mui/core");
const _router = require("@rp/react/web/router");
const _reactquery = require("@tanstack/react-query");
const HubHeader = ({ label, buttonLabel, onClick, icon, filterTerm, setFilterTerm, id, placeholder, hideSearch = false, hideMobileSearch = false, page, onFileUpload, rightItems = [] })=>{
    const { isMobile } = (0, _hooks1.useDeviceInfo)();
    const navigate = (0, _reactrouterdom.useNavigate)();
    const createQuery = (0, _userdataqueries.useCreateSavedQuery)();
    const queryClient = (0, _reactquery.useQueryClient)();
    const buttonRef = (0, _react.useRef)(null);
    const { quota } = (0, _providers.useAccount)();
    const { planComparisonModal: { handleOpen: planComparisonHandleOpen } } = (0, _providers1.useModal)();
    const hasMetWatchlistLimit = (0, _hooks.useIsWatchlistLimitMet)(quota);
    // ========================
    // Header Button Actions
    // ========================
    const runWatchlistSearch = ()=>{
        if (!id) return;
        // Get the name of the watchlist
        const watchlist = queryClient.getQueryData([
            "watchlists",
            id
        ]);
        var _watchlist_name;
        const name = (_watchlist_name = watchlist === null || watchlist === void 0 ? void 0 : watchlist.name) !== null && _watchlist_name !== void 0 ? _watchlist_name : (0, _utils.defaultSaveName)("search");
        // Create a query with the watchlist filter
        const expression = {
            type: "and",
            value: [
                {
                    type: "watchlist",
                    operation: "in",
                    value: id
                }
            ]
        };
        // POST to create a saved query
        createQuery.mutateAsync({
            name,
            query: {
                expression
            }
        }, {
            onSuccess: (response)=>{
                // Send the event to GTM
                _utils1.tagManagerEvents.queryInit({
                    queryId: response.id,
                    location: "watchlist",
                    queryType: "watchlist"
                });
                // Navigate to the search page
                navigate(`/search/${response.id}`);
            }
        });
    };
    const buttonActions = {
        goToSearch () {
            navigate(_router.SEARCH_ROUTE);
        },
        createWatchlist () {
            hasMetWatchlistLimit ? planComparisonHandleOpen(_settings.WATCHLIST_FEATURE_NAME) : navigate(_router.WATCHLIST_NEW);
        },
        uploadFiles () {
            var _buttonRef_current;
            (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : _buttonRef_current.open();
        },
        newChat () {
            navigate(_router.CHAT_ROUTE);
        },
        runWatchlistSearch
    };
    let rightContent = [
        ...rightItems
    ];
    if (!hideSearch) {
        rightContent = [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_layout.HeaderSearchBar, {
                filterTerm: filterTerm,
                onChange: (value)=>setFilterTerm(value),
                placeholder: placeholder
            }, "header-search-bar"),
            ...rightContent
        ];
    }
    if (buttonLabel) {
        const { IconButton, Icon } = icon !== null && icon !== void 0 ? icon : {};
        const StartIcon = IconButton !== null && IconButton !== void 0 ? IconButton : Icon;
        rightContent = [
            ...rightContent,
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_layout.HeaderButton, {
                disabled: onClick === undefined,
                onClick: onClick && buttonActions[onClick],
                startIcon: StartIcon ? /*#__PURE__*/ (0, _jsxruntime.jsx)(StartIcon, {}) : null,
                children: [
                    buttonLabel,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_files.UploadFiles, {
                        location: "filesPage",
                        multiple: true,
                        ref: buttonRef,
                        onSubmit: ()=>{
                            onFileUpload === null || onFileUpload === void 0 ? void 0 : onFileUpload();
                        }
                    })
                ]
            }, "header-button")
        ];
    }
    if (isMobile) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_compositecomponents.SearchMobileHeader, {
            filterTerm: filterTerm,
            setFilterTerm: setFilterTerm,
            placeholder: placeholder,
            title: page,
            hideSearch: hideMobileSearch
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_layout.Header, {
        leftColumns: 3,
        rightColumns: 9,
        leftContent: /*#__PURE__*/ (0, _jsxruntime.jsx)(_core.Typography, {
            variant: "h5",
            fontWeight: 700,
            letterSpacing: -0.25,
            children: label
        }),
        rightContent: rightContent
    });
};

//# sourceMappingURL=data:application/json;base64,