a93b59e0126e21c5aa647288d78e8f1c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return addSlide;
    }
});
function addSlide(index, slides) {
    const swiper = this;
    const { params, activeIndex, slidesEl } = swiper;
    let activeIndexBuffer = activeIndex;
    if (params.loop) {
        activeIndexBuffer -= swiper.loopedSlides;
        swiper.loopDestroy();
        swiper.recalcSlides();
    }
    const baseLength = swiper.slides.length;
    if (index <= 0) {
        swiper.prependSlide(slides);
        return;
    }
    if (index >= baseLength) {
        swiper.appendSlide(slides);
        return;
    }
    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
    const slidesBuffer = [];
    for(let i = baseLength - 1; i >= index; i -= 1){
        const currentSlide = swiper.slides[i];
        currentSlide.remove();
        slidesBuffer.unshift(currentSlide);
    }
    if (typeof slides === 'object' && 'length' in slides) {
        for(let i = 0; i < slides.length; i += 1){
            if (slides[i]) slidesEl.append(slides[i]);
        }
        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
    } else {
        slidesEl.append(slides);
    }
    for(let i = 0; i < slidesBuffer.length; i += 1){
        slidesEl.append(slidesBuffer[i]);
    }
    swiper.recalcSlides();
    if (params.loop) {
        swiper.loopCreate();
    }
    if (!params.observer || swiper.isElement) {
        swiper.update();
    }
    if (params.loop) {
        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
    } else {
        swiper.slideTo(newActiveIndex, 0, false);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hZGRTbGlkZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICB9XG4gIGNvbnN0IGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgY29uc3Qgc2xpZGVzQnVmZmVyID0gW107XG4gIGZvciAobGV0IGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgY29uc3QgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlc1tpXTtcbiAgICBjdXJyZW50U2xpZGUucmVtb3ZlKCk7XG4gICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgfVxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNCdWZmZXJbaV0pO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iXSwibmFtZXMiOlsiYWRkU2xpZGUiLCJpbmRleCIsInNsaWRlcyIsInN3aXBlciIsInBhcmFtcyIsImFjdGl2ZUluZGV4Iiwic2xpZGVzRWwiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImxvb3AiLCJsb29wZWRTbGlkZXMiLCJsb29wRGVzdHJveSIsInJlY2FsY1NsaWRlcyIsImJhc2VMZW5ndGgiLCJsZW5ndGgiLCJwcmVwZW5kU2xpZGUiLCJhcHBlbmRTbGlkZSIsIm5ld0FjdGl2ZUluZGV4Iiwic2xpZGVzQnVmZmVyIiwiaSIsImN1cnJlbnRTbGlkZSIsInJlbW92ZSIsInVuc2hpZnQiLCJhcHBlbmQiLCJsb29wQ3JlYXRlIiwib2JzZXJ2ZXIiLCJpc0VsZW1lbnQiLCJ1cGRhdGUiLCJzbGlkZVRvIl0sInJhbmdlTWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBQUE7OztlQUF3QkE7OztBQUFULFNBQVNBLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtJQUM1QyxNQUFNQyxTQUFTLElBQUk7SUFDbkIsTUFBTSxFQUNKQyxNQUFNLEVBQ05DLFdBQVcsRUFDWEMsUUFBUSxFQUNULEdBQUdIO0lBQ0osSUFBSUksb0JBQW9CRjtJQUN4QixJQUFJRCxPQUFPSSxJQUFJLEVBQUU7UUFDZkQscUJBQXFCSixPQUFPTSxZQUFZO1FBQ3hDTixPQUFPTyxXQUFXO1FBQ2xCUCxPQUFPUSxZQUFZO0lBQ3JCO0lBQ0EsTUFBTUMsYUFBYVQsT0FBT0QsTUFBTSxDQUFDVyxNQUFNO0lBQ3ZDLElBQUlaLFNBQVMsR0FBRztRQUNkRSxPQUFPVyxZQUFZLENBQUNaO1FBQ3BCO0lBQ0Y7SUFDQSxJQUFJRCxTQUFTVyxZQUFZO1FBQ3ZCVCxPQUFPWSxXQUFXLENBQUNiO1FBQ25CO0lBQ0Y7SUFDQSxJQUFJYyxpQkFBaUJULG9CQUFvQk4sUUFBUU0sb0JBQW9CLElBQUlBO0lBQ3pFLE1BQU1VLGVBQWUsRUFBRTtJQUN2QixJQUFLLElBQUlDLElBQUlOLGFBQWEsR0FBR00sS0FBS2pCLE9BQU9pQixLQUFLLEVBQUc7UUFDL0MsTUFBTUMsZUFBZWhCLE9BQU9ELE1BQU0sQ0FBQ2dCLEVBQUU7UUFDckNDLGFBQWFDLE1BQU07UUFDbkJILGFBQWFJLE9BQU8sQ0FBQ0Y7SUFDdkI7SUFDQSxJQUFJLE9BQU9qQixXQUFXLFlBQVksWUFBWUEsUUFBUTtRQUNwRCxJQUFLLElBQUlnQixJQUFJLEdBQUdBLElBQUloQixPQUFPVyxNQUFNLEVBQUVLLEtBQUssRUFBRztZQUN6QyxJQUFJaEIsTUFBTSxDQUFDZ0IsRUFBRSxFQUFFWixTQUFTZ0IsTUFBTSxDQUFDcEIsTUFBTSxDQUFDZ0IsRUFBRTtRQUMxQztRQUNBRixpQkFBaUJULG9CQUFvQk4sUUFBUU0sb0JBQW9CTCxPQUFPVyxNQUFNLEdBQUdOO0lBQ25GLE9BQU87UUFDTEQsU0FBU2dCLE1BQU0sQ0FBQ3BCO0lBQ2xCO0lBQ0EsSUFBSyxJQUFJZ0IsSUFBSSxHQUFHQSxJQUFJRCxhQUFhSixNQUFNLEVBQUVLLEtBQUssRUFBRztRQUMvQ1osU0FBU2dCLE1BQU0sQ0FBQ0wsWUFBWSxDQUFDQyxFQUFFO0lBQ2pDO0lBQ0FmLE9BQU9RLFlBQVk7SUFDbkIsSUFBSVAsT0FBT0ksSUFBSSxFQUFFO1FBQ2ZMLE9BQU9vQixVQUFVO0lBQ25CO0lBQ0EsSUFBSSxDQUFDbkIsT0FBT29CLFFBQVEsSUFBSXJCLE9BQU9zQixTQUFTLEVBQUU7UUFDeEN0QixPQUFPdUIsTUFBTTtJQUNmO0lBQ0EsSUFBSXRCLE9BQU9JLElBQUksRUFBRTtRQUNmTCxPQUFPd0IsT0FBTyxDQUFDWCxpQkFBaUJiLE9BQU9NLFlBQVksRUFBRSxHQUFHO0lBQzFELE9BQU87UUFDTE4sT0FBT3dCLE9BQU8sQ0FBQ1gsZ0JBQWdCLEdBQUc7SUFDcEM7QUFDRiJ9