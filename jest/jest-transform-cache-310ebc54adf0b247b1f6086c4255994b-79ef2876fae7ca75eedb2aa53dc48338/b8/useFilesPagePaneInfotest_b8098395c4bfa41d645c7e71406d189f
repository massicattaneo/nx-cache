58a92b04e55f582d95397cc1137edd47
"use strict";
jest.mock("react-router", ()=>_object_spread_props(_object_spread({}, jest.requireActual("react-router")), {
        useNavigate: ()=>mockNavigate,
        useParams: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _reactrouter = require("react-router");
const _react = require("@testing-library/react");
const _useFilesPagePaneInfo = require("./useFilesPagePaneInfo");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
let renderedHook;
const expectedInitialState = {
    chatPaneWidth: "50%",
    documentPaneWidth: null,
    filesPaneWidth: "50%",
    closeChatPane: expect.any(Function),
    closeDocumentPane: expect.any(Function),
    expandDocumentPane: expect.any(Function),
    openChatPane: expect.any(Function),
    unexpandDocumentPane: expect.any(Function)
};
const mockNavigate = jest.fn();
const mockUseParams = _reactrouter.useParams;
describe("useFilesPagePaneInfo", ()=>{
    describe("initial state", ()=>{
        beforeEach(()=>{
            mockUseParams.mockReturnValue({});
            renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
        });
        it("should return correct state", ()=>{
            expect(renderedHook.result.current).toStrictEqual(expectedInitialState);
        });
    });
    describe("methods", ()=>{
        describe("close document pane", ()=>{
            beforeEach(()=>{
                mockUseParams.mockReturnValue({
                    id: "some-doc-id"
                });
                renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
                (0, _react.act)(renderedHook.result.current.closeDocumentPane);
                (0, _react.act)(renderedHook.rerender);
            });
            it("should call navigate correctly", ()=>{
                expect(mockNavigate).toHaveBeenCalledTimes(1);
                expect(mockNavigate).toHaveBeenCalledWith("/files", {
                    replace: true
                });
            });
        });
        describe("expand document pane", ()=>{
            beforeEach(()=>{
                mockUseParams.mockReturnValue({
                    id: "some-doc-id"
                });
                renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
                (0, _react.act)(renderedHook.result.current.expandDocumentPane);
            });
            it("should return correct state", ()=>{
                expect(renderedHook.result.current).toStrictEqual(_object_spread_props(_object_spread({}, expectedInitialState), {
                    chatPaneWidth: null,
                    documentPaneWidth: "100%",
                    filesPaneWidth: null
                }));
            });
        });
        describe("unexpand document pane", ()=>{
            beforeEach(()=>{
                mockUseParams.mockReturnValue({
                    id: "some-doc-id"
                });
                renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
                (0, _react.act)(renderedHook.result.current.expandDocumentPane);
                (0, _react.waitFor)(()=>renderedHook.result.current.documentPaneWidth === "100%");
                (0, _react.act)(renderedHook.result.current.unexpandDocumentPane);
            });
            it("should return correct state", ()=>{
                expect(renderedHook.result.current).toStrictEqual(_object_spread_props(_object_spread({}, expectedInitialState), {
                    chatPaneWidth: "33%",
                    documentPaneWidth: "33%",
                    filesPaneWidth: "34%"
                }));
            });
        });
        describe("openChatPane", ()=>{
            beforeEach(()=>{
                mockUseParams.mockReturnValue({
                    id: "some-doc-id"
                });
                renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
                (0, _react.act)(renderedHook.result.current.openChatPane);
            });
            it("should return correct state", ()=>{
                expect(renderedHook.result.current).toStrictEqual(_object_spread_props(_object_spread({}, expectedInitialState), {
                    chatPaneWidth: "33%",
                    documentPaneWidth: "33%",
                    filesPaneWidth: "34%"
                }));
            });
        });
        describe("closeChatPane", ()=>{
            beforeEach(()=>{
                mockUseParams.mockReturnValue({
                    id: "some-doc-id"
                });
                renderedHook = (0, _react.renderHook)(_useFilesPagePaneInfo.useFilesPagePaneInfo);
                (0, _react.act)(renderedHook.result.current.openChatPane);
                (0, _react.waitFor)(()=>!!renderedHook.result.current);
                (0, _react.act)(renderedHook.result.current.closeChatPane);
            });
            it("should return correct state", ()=>{
                expect(renderedHook.result.current).toStrictEqual(_object_spread_props(_object_spread({}, expectedInitialState), {
                    chatPaneWidth: null,
                    documentPaneWidth: "50%",
                    filesPaneWidth: "50%"
                }));
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,