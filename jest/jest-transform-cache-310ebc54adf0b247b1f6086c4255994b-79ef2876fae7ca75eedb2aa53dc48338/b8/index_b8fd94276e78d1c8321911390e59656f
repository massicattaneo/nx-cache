613236e0bfdc8514e38069f0552fc016
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "trimLines", {
    enumerable: true,
    get: function() {
        return trimLines;
    }
});
const tab = 9 /* `\t` */ ;
const space = 32 /* ` ` */ ;
function trimLines(value) {
    const source = String(value);
    const search = /\r?\n|\r/g;
    let match = search.exec(source);
    let last = 0;
    /** @type {Array<string>} */ const lines = [];
    while(match){
        lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);
        last = match.index + match[0].length;
        match = search.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join('');
}
/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */ function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start) {
        let code = value.codePointAt(startIndex);
        while(code === tab || code === space){
            startIndex++;
            code = value.codePointAt(startIndex);
        }
    }
    if (end) {
        let code = value.codePointAt(endIndex - 1);
        while(code === tab || code === space){
            endIndex--;
            code = value.codePointAt(endIndex - 1);
        }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tY2F0dGFuZW8vd29ya3NwYWNlL2Zyb250ZW5kL25vZGVfbW9kdWxlcy90cmltLWxpbmVzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRhYiA9IDkgLyogYFxcdGAgKi9cbmNvbnN0IHNwYWNlID0gMzIgLyogYCBgICovXG5cbi8qKlxuICogUmVtb3ZlIGluaXRpYWwgYW5kIGZpbmFsIHNwYWNlcyBhbmQgdGFicyBhdCB0aGUgbGluZSBicmVha3MgaW4gYHZhbHVlYC5cbiAqIERvZXMgbm90IHRyaW0gaW5pdGlhbCBhbmQgZmluYWwgc3BhY2VzIGFuZCB0YWJzIG9mIHRoZSB2YWx1ZSBpdHNlbGYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBUcmltbWVkIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbUxpbmVzKHZhbHVlKSB7XG4gIGNvbnN0IHNvdXJjZSA9IFN0cmluZyh2YWx1ZSlcbiAgY29uc3Qgc2VhcmNoID0gL1xccj9cXG58XFxyL2dcbiAgbGV0IG1hdGNoID0gc2VhcmNoLmV4ZWMoc291cmNlKVxuICBsZXQgbGFzdCA9IDBcbiAgLyoqIEB0eXBlIHtBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCBsaW5lcyA9IFtdXG5cbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgbGluZXMucHVzaChcbiAgICAgIHRyaW1MaW5lKHNvdXJjZS5zbGljZShsYXN0LCBtYXRjaC5pbmRleCksIGxhc3QgPiAwLCB0cnVlKSxcbiAgICAgIG1hdGNoWzBdXG4gICAgKVxuXG4gICAgbGFzdCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgbWF0Y2ggPSBzZWFyY2guZXhlYyhzb3VyY2UpXG4gIH1cblxuICBsaW5lcy5wdXNoKHRyaW1MaW5lKHNvdXJjZS5zbGljZShsYXN0KSwgbGFzdCA+IDAsIGZhbHNlKSlcblxuICByZXR1cm4gbGluZXMuam9pbignJylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgTGluZSB0byB0cmltLlxuICogQHBhcmFtIHtib29sZWFufSBzdGFydFxuICogICBXaGV0aGVyIHRvIHRyaW0gdGhlIHN0YXJ0IG9mIHRoZSBsaW5lLlxuICogQHBhcmFtIHtib29sZWFufSBlbmRcbiAqICAgV2hldGhlciB0byB0cmltIHRoZSBlbmQgb2YgdGhlIGxpbmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBUcmltbWVkIGxpbmUuXG4gKi9cbmZ1bmN0aW9uIHRyaW1MaW5lKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gIGxldCBzdGFydEluZGV4ID0gMFxuICBsZXQgZW5kSW5kZXggPSB2YWx1ZS5sZW5ndGhcblxuICBpZiAoc3RhcnQpIHtcbiAgICBsZXQgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KHN0YXJ0SW5kZXgpXG5cbiAgICB3aGlsZSAoY29kZSA9PT0gdGFiIHx8IGNvZGUgPT09IHNwYWNlKSB7XG4gICAgICBzdGFydEluZGV4KytcbiAgICAgIGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChzdGFydEluZGV4KVxuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICBsZXQgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KGVuZEluZGV4IC0gMSlcblxuICAgIHdoaWxlIChjb2RlID09PSB0YWIgfHwgY29kZSA9PT0gc3BhY2UpIHtcbiAgICAgIGVuZEluZGV4LS1cbiAgICAgIGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChlbmRJbmRleCAtIDEpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVuZEluZGV4ID4gc3RhcnRJbmRleCA/IHZhbHVlLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSA6ICcnXG59XG4iXSwibmFtZXMiOlsidHJpbUxpbmVzIiwidGFiIiwic3BhY2UiLCJ2YWx1ZSIsInNvdXJjZSIsIlN0cmluZyIsInNlYXJjaCIsIm1hdGNoIiwiZXhlYyIsImxhc3QiLCJsaW5lcyIsInB1c2giLCJ0cmltTGluZSIsInNsaWNlIiwiaW5kZXgiLCJsZW5ndGgiLCJqb2luIiwic3RhcnQiLCJlbmQiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjb2RlIiwiY29kZVBvaW50QXQiXSwicmFuZ2VNYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7IiwibWFwcGluZ3MiOiI7Ozs7K0JBWWdCQTs7O2VBQUFBOzs7QUFaaEIsTUFBTUMsTUFBTSxFQUFFLFFBQVE7QUFDdEIsTUFBTUMsUUFBUSxHQUFHLE9BQU87QUFXakIsU0FBU0YsVUFBVUcsS0FBSztJQUM3QixNQUFNQyxTQUFTQyxPQUFPRjtJQUN0QixNQUFNRyxTQUFTO0lBQ2YsSUFBSUMsUUFBUUQsT0FBT0UsSUFBSSxDQUFDSjtJQUN4QixJQUFJSyxPQUFPO0lBQ1gsMEJBQTBCLEdBQzFCLE1BQU1DLFFBQVEsRUFBRTtJQUVoQixNQUFPSCxNQUFPO1FBQ1pHLE1BQU1DLElBQUksQ0FDUkMsU0FBU1IsT0FBT1MsS0FBSyxDQUFDSixNQUFNRixNQUFNTyxLQUFLLEdBQUdMLE9BQU8sR0FBRyxPQUNwREYsS0FBSyxDQUFDLEVBQUU7UUFHVkUsT0FBT0YsTUFBTU8sS0FBSyxHQUFHUCxLQUFLLENBQUMsRUFBRSxDQUFDUSxNQUFNO1FBQ3BDUixRQUFRRCxPQUFPRSxJQUFJLENBQUNKO0lBQ3RCO0lBRUFNLE1BQU1DLElBQUksQ0FBQ0MsU0FBU1IsT0FBT1MsS0FBSyxDQUFDSixPQUFPQSxPQUFPLEdBQUc7SUFFbEQsT0FBT0MsTUFBTU0sSUFBSSxDQUFDO0FBQ3BCO0FBRUE7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0osU0FBU1QsS0FBSyxFQUFFYyxLQUFLLEVBQUVDLEdBQUc7SUFDakMsSUFBSUMsYUFBYTtJQUNqQixJQUFJQyxXQUFXakIsTUFBTVksTUFBTTtJQUUzQixJQUFJRSxPQUFPO1FBQ1QsSUFBSUksT0FBT2xCLE1BQU1tQixXQUFXLENBQUNIO1FBRTdCLE1BQU9FLFNBQVNwQixPQUFPb0IsU0FBU25CLE1BQU87WUFDckNpQjtZQUNBRSxPQUFPbEIsTUFBTW1CLFdBQVcsQ0FBQ0g7UUFDM0I7SUFDRjtJQUVBLElBQUlELEtBQUs7UUFDUCxJQUFJRyxPQUFPbEIsTUFBTW1CLFdBQVcsQ0FBQ0YsV0FBVztRQUV4QyxNQUFPQyxTQUFTcEIsT0FBT29CLFNBQVNuQixNQUFPO1lBQ3JDa0I7WUFDQUMsT0FBT2xCLE1BQU1tQixXQUFXLENBQUNGLFdBQVc7UUFDdEM7SUFDRjtJQUVBLE9BQU9BLFdBQVdELGFBQWFoQixNQUFNVSxLQUFLLENBQUNNLFlBQVlDLFlBQVk7QUFDckUifQ==